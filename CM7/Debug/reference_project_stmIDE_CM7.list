
reference_project_stmIDE_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .program_default_CM7_section_init 00000008  20000400  08000298  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .program_default_CM7_section_noInit 00000000  20000408  20000408  000508d0  2**0
                  CONTENTS
  3 .program_blinking_led_CM7_section_init 00000008  20001000  080002a0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .program_blinking_led_CM7_section_noInit 00000000  20001008  20001008  000508d0  2**0
                  CONTENTS
  5 .program_default_CM4_section_init 00000004  10000800  080002a8  00020800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .program_default_CM4_section_noInit 00000000  10000804  10000804  000508d0  2**0
                  CONTENTS
  7 .program_blinking_led_CM4_section_init 00000004  10000c00  080002ac  00020c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .program_blinking_led_CM4_section_noInit 00000000  10000c04  10000c04  000508d0  2**0
                  CONTENTS
  9 .os_section_consts 00000800  38000000  080002b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .os_section_vars 00000200  38008000  08000ab0  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .os_section_funcs 0000155c  08000cb0  08000cb0  00040cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         00007300  0800220c  0800220c  0004220c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .rodata       00000118  0800950c  0800950c  0004950c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .ARM          00000008  08009624  08009624  00049624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .init_array   00000004  0800962c  0800962c  0004962c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .fini_array   00000004  08009630  08009630  00049630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .data         00000010  20000800  08009634  00050800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .RxDecripSection 00000060  20000810  08009644  00050810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .TxDecripSection 00000060  20000870  080096a4  00050870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .bss          00000694  200008d0  08009704  000508d0  2**2
                  ALLOC
 21 .ARM.attributes 0000002e  00000000  00000000  000508d0  2**0
                  CONTENTS, READONLY
 22 .debug_info   0003efae  00000000  00000000  000508fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_abbrev 00007485  00000000  00000000  0008f8ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 00001ce0  00000000  00000000  00096d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 00001848  00000000  00000000  00098a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_macro  0004265b  00000000  00000000  0009a260  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_line   0002bba8  00000000  00000000  000dc8bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_str    00193ac4  00000000  00000000  00108463  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .comment      0000007b  00000000  00000000  0029bf27  2**0
                  CONTENTS, READONLY
 30 .debug_frame  00006b90  00000000  00000000  0029bfa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .os_section_funcs:

08000cb0 <buffer_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_readArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b092      	sub	sp, #72	; 0x48
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
    CosmOS_BufferStateType bufferState;


    if ( buffer IS_EQUAL_TO NULL )
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d103      	bne.n	8000cca <buffer_readArray+0x1a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_IS_NULL_POINTER;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000cc8:	e046      	b.n	8000d58 <buffer_readArray+0xa8>
        CosmOS_CoreVariableType * coreVar;
        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * readPermission;


        osVar = os_getOsVar();
 8000cca:	f000 fad3 	bl	8001274 <os_getOsVar>
 8000cce:	63f8      	str	r0, [r7, #60]	; 0x3c
  * @return CosmOS_CoreVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_CoreVariableType * CIL_core_getCoreVar(void)
{    
    uint32_t result;
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8000cd0:	464b      	mov	r3, r9
 8000cd2:	617b      	str	r3, [r7, #20]
    return (CosmOS_CoreVariableType *)result;
 8000cd4:	697b      	ldr	r3, [r7, #20]
        coreVar = CIL_core_getCoreVar();
 8000cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	61bb      	str	r3, [r7, #24]
  * 
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * os_getOsBufferVar(CosmOS_OsVariableType * osVar, BitWidthType bufferId)
{
    return (&(osVar->bufferVars[bufferId]));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	4413      	add	r3, r2

        bufferVar = os_getOsBufferVar( osVar, id );
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
 8000cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cee:	623b      	str	r3, [r7, #32]
  * 
  * @return CosmOS_PermissionsConfigurationType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_PermissionsConfigurationType * buffer_getBufferReadPermission(CosmOS_BufferVariableType * bufferVar)
{
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->readPermission);
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]

        readPermission = buffer_getBufferReadPermission( bufferVar );
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
        accessState = permission_tryAccess( readPermission, coreVar );
 8000cf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cfc:	f000 fae4 	bl	80012c8 <permission_tryAccess>
 8000d00:	62f8      	str	r0, [r7, #44]	; 0x2c

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000d08:	d103      	bne.n	8000d12 <buffer_readArray+0x62>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d10:	e022      	b.n	8000d58 <buffer_readArray+0xa8>
 8000d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d14:	613b      	str	r3, [r7, #16]
  * 
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getFullCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return (bufferVar->fullCells);
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	68db      	ldr	r3, [r3, #12]
        else
        {
            BitWidthType fullCellsNum;


            fullCellsNum = buffer_getFullCellsNum( bufferVar );
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28

            if ( fullCellsNum >= size)
 8000d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d316      	bcc.n	8000d52 <buffer_readArray+0xa2>
                BitWidthType userBufferIndex;

                unsigned char * userBuffer;

                
                userBuffer = buffer;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
                userBufferIndex = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	643b      	str	r3, [r7, #64]	; 0x40

                while ( ( userBufferIndex < size ) )
 8000d2c:	e00c      	b.n	8000d48 <buffer_readArray+0x98>
                {
                    bufferState = buffer_pull( bufferVar, ( userBuffer + userBufferIndex ) );
 8000d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d32:	4413      	add	r3, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d38:	f000 f873 	bl	8000e22 <buffer_pull>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    userBufferIndex++;
 8000d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d44:	3301      	adds	r3, #1
 8000d46:	643b      	str	r3, [r7, #64]	; 0x40
                while ( ( userBufferIndex < size ) )
 8000d48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3ee      	bcc.n	8000d2e <buffer_readArray+0x7e>
 8000d50:	e002      	b.n	8000d58 <buffer_readArray+0xa8>
                }
            }
            else
            {
                bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM;
 8000d52:	2306      	movs	r3, #6
 8000d54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8000d58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3748      	adds	r7, #72	; 0x48
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <buffer_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_writeArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b092      	sub	sp, #72	; 0x48
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
    CosmOS_BufferStateType bufferState;


    if ( buffer IS_EQUAL_TO NULL )
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d103      	bne.n	8000d7e <buffer_writeArray+0x1a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_IS_NULL_POINTER;
 8000d76:	2304      	movs	r3, #4
 8000d78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d7c:	e04b      	b.n	8000e16 <buffer_writeArray+0xb2>
        CosmOS_CoreVariableType * coreVar;
        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * writePermission;


        osVar = os_getOsVar();
 8000d7e:	f000 fa79 	bl	8001274 <os_getOsVar>
 8000d82:	63f8      	str	r0, [r7, #60]	; 0x3c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8000d84:	464b      	mov	r3, r9
 8000d86:	617b      	str	r3, [r7, #20]
    return (CosmOS_CoreVariableType *)result;
 8000d88:	697b      	ldr	r3, [r7, #20]
        coreVar = CIL_core_getCoreVar();
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	4413      	add	r3, r2

        bufferVar = os_getOsBufferVar( osVar, id );
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8000da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da2:	623b      	str	r3, [r7, #32]
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->writePermission);
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	691b      	ldr	r3, [r3, #16]

        writePermission = buffer_getBufferWritePermission( bufferVar );
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
        accessState = permission_tryAccess( writePermission, coreVar );
 8000dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000db0:	f000 fa8a 	bl	80012c8 <permission_tryAccess>
 8000db4:	62f8      	str	r0, [r7, #44]	; 0x2c

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8000db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db8:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000dbc:	d103      	bne.n	8000dc6 <buffer_writeArray+0x62>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000dc4:	e027      	b.n	8000e16 <buffer_writeArray+0xb2>
 8000dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc8:	613b      	str	r3, [r7, #16]
  * 
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getEmptyCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return ((bufferVar->cfg->size) - (bufferVar->fullCells));
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	1ad3      	subs	r3, r2, r3
        else
        {   
            BitWidthType emptyCellsNum;


            emptyCellsNum = buffer_getEmptyCellsNum( bufferVar );
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28

            if ( emptyCellsNum >= size)
 8000dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d317      	bcc.n	8000e10 <buffer_writeArray+0xac>
                BitWidthType userBufferIndex;

                unsigned char * userBuffer;


                userBuffer = buffer;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
                userBufferIndex = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	643b      	str	r3, [r7, #64]	; 0x40

                while ( ( userBufferIndex < size ) )
 8000de8:	e00d      	b.n	8000e06 <buffer_writeArray+0xa2>
                {
                    bufferState = buffer_push( bufferVar, *( userBuffer + userBufferIndex ) );
 8000dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dee:	4413      	add	r3, r2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4619      	mov	r1, r3
 8000df4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000df6:	f000 f84e 	bl	8000e96 <buffer_push>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    userBufferIndex++;
 8000e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e02:	3301      	adds	r3, #1
 8000e04:	643b      	str	r3, [r7, #64]	; 0x40
                while ( ( userBufferIndex < size ) )
 8000e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d3ed      	bcc.n	8000dea <buffer_writeArray+0x86>
 8000e0e:	e002      	b.n	8000e16 <buffer_writeArray+0xb2>
                }
            }
            else
            {
                bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS;
 8000e10:	2305      	movs	r3, #5
 8000e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8000e16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3748      	adds	r7, #72	; 0x48
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <buffer_pull>:
{
 8000e22:	b480      	push	{r7}
 8000e24:	b089      	sub	sp, #36	; 0x24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8000e42:	61bb      	str	r3, [r7, #24]
    *data = *( osBuffer + bufferVar->tail );
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells--;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	60da      	str	r2, [r3, #12]
    bufferVar->tail = ( ( bufferVar->tail + 1 ) % bufferSize );
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	3301      	adds	r3, #1
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e68:	69f9      	ldr	r1, [r7, #28]
 8000e6a:	fb01 f202 	mul.w	r2, r1, r2
 8000e6e:	1a9a      	subs	r2, r3, r2
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	613b      	str	r3, [r7, #16]
  * 
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isEmpty(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT(bufferVar->fullCells) ? BUFFER_STATE_ENUM__EMPTY : BUFFER_STATE_ENUM__OK);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf0c      	ite	eq
 8000e80:	2301      	moveq	r3, #1
 8000e82:	2300      	movne	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
    bufferState = buffer_isEmpty( bufferVar );
 8000e86:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8000e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <buffer_push>:
{
 8000e96:	b480      	push	{r7}
 8000e98:	b089      	sub	sp, #36	; 0x24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	70fb      	strb	r3, [r7, #3]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8000eb8:	61bb      	str	r3, [r7, #24]
    *( osBuffer + bufferVar->head ) = data;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	78fa      	ldrb	r2, [r7, #3]
 8000ec4:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells++;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60da      	str	r2, [r3, #12]
    bufferVar->head = ( ( bufferVar->head + 1 ) % bufferSize );
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000edc:	69f9      	ldr	r1, [r7, #28]
 8000ede:	fb01 f202 	mul.w	r2, r1, r2
 8000ee2:	1a9a      	subs	r2, r3, r2
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	613b      	str	r3, [r7, #16]
  * 
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isFull(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT((bufferVar->cfg->size) ^ (bufferVar->fullCells)) ? \
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	68db      	ldr	r3, [r3, #12]
    BUFFER_STATE_ENUM__FULL : BUFFER_STATE_ENUM__OK);
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d101      	bne.n	8000efe <buffer_push+0x68>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e000      	b.n	8000f00 <buffer_push+0x6a>
 8000efe:	2300      	movs	r3, #0
    bufferState = buffer_isFull( bufferVar );
 8000f00:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3724      	adds	r7, #36	; 0x24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <bufferDouble_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_readArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	; 0x38
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8000f1e:	f000 f9a9 	bl	8001274 <os_getOsVar>
 8000f22:	6338      	str	r0, [r7, #48]	; 0x30
 8000f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f26:	623b      	str	r3, [r7, #32]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	61fb      	str	r3, [r7, #28]
  * 
  * @return CosmOS_BufferDoubleVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferDoubleVariableType * os_getOsBufferDoubleVar(CosmOS_OsVariableType * osVar, BitWidthType bufferDoubleId)
{
    return (&(osVar->bufferDoubleVars[bufferDoubleId]));
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	68d9      	ldr	r1, [r3, #12]
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <bufferDouble_readArray+0x3a>
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d00b      	beq.n	8000f60 <bufferDouble_readArray+0x50>
        }

        default :
        {
            /* PANIC */
            break;
 8000f48:	e015      	b.n	8000f76 <bufferDouble_readArray+0x66>
 8000f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4c:	61bb      	str	r3, [r7, #24]
  * 
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * bufferDouble_getBufferDoubleUserBuffer(CosmOS_BufferDoubleVariableType * bufferDoubleVar)
{
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8000f5e:	e00a      	b.n	8000f76 <bufferDouble_readArray+0x66>
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8000f74:	bf00      	nop
 8000f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f78:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->id);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_readArray( bufferId, buffer, size );
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f88:	f7ff fe92 	bl	8000cb0 <buffer_readArray>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8000f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3738      	adds	r7, #56	; 0x38
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <bufferDouble_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_writeArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b08e      	sub	sp, #56	; 0x38
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8000fac:	f000 f962 	bl	8001274 <os_getOsVar>
 8000fb0:	6338      	str	r0, [r7, #48]	; 0x30
 8000fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb4:	623b      	str	r3, [r7, #32]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	68d9      	ldr	r1, [r3, #12]
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <bufferDouble_writeArray+0x3a>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d00b      	beq.n	8000fee <bufferDouble_writeArray+0x50>
        }

        default :
        {
            /* PANIC */
            break;
 8000fd6:	e015      	b.n	8001004 <bufferDouble_writeArray+0x66>
 8000fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fda:	61bb      	str	r3, [r7, #24]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8000fec:	e00a      	b.n	8001004 <bufferDouble_writeArray+0x66>
 8000fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff0:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8001002:	bf00      	nop
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_writeArray( bufferId, buffer, size );
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001016:	f7ff fea5 	bl	8000d64 <buffer_writeArray>
 800101a:	4603      	mov	r3, r0
 800101c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8001020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001024:	4618      	mov	r0, r3
 8001026:	3738      	adds	r7, #56	; 0x38
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <core_getCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_CoreVariableType * core_getCoreVar(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8001032:	464b      	mov	r3, r9
 8001034:	607b      	str	r3, [r7, #4]
    return (CosmOS_CoreVariableType *)result;
 8001036:	687b      	ldr	r3, [r7, #4]
    return CIL_core_getCoreVar();
 8001038:	bf00      	nop
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <core_setSchedulableIntoCurrentContext>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void core_setSchedulableIntoCurrentContext(CosmOS_CoreVariableType * coreVar, CosmOS_SchedulableVariableType * schedulableVar)
{
 8001046:	b480      	push	{r7}
 8001048:	b08d      	sub	sp, #52	; 0x34
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
 800104e:	6039      	str	r1, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	60fb      	str	r3, [r7, #12]
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType schedulable_getProgramId(CosmOS_SchedulableVariableType * schedulable)
{
    return (schedulable->cfg->programId);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	699b      	ldr	r3, [r3, #24]
    BitWidthType programId;

    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulableVar );
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001062:	613b      	str	r3, [r7, #16]
  * 
  * @return CosmOS_ProgramVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ProgramVariableType * core_getCoreProgramVar(CosmOS_CoreVariableType * core, BitWidthType programIterator)
{
    return (&(core->programVars[programIterator]));
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	68d9      	ldr	r1, [r3, #12]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
    programVar = core_getCoreProgramVar( coreVar, programId ); 
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	61bb      	str	r3, [r7, #24]
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreProgramInExecution(CosmOS_CoreVariableType * core, CosmOS_ProgramVariableType * programInExecutionParam)
{
    core->programInExecution = programInExecutionParam;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	623b      	str	r3, [r7, #32]
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreSchedulableInExecution(CosmOS_CoreVariableType * core, CosmOS_SchedulableVariableType * schedulableInExecutionParam)
{
    core->schedulableInExecution = schedulableInExecutionParam;
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	6a3a      	ldr	r2, [r7, #32]
 8001090:	605a      	str	r2, [r3, #4]

    core_setCoreProgramInExecution( coreVar, programVar );
    core_setCoreSchedulableInExecution( coreVar, schedulableVar );
}
 8001092:	bf00      	nop
 8001094:	3734      	adds	r7, #52	; 0x34
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <coreSync_getBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_getBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b096      	sub	sp, #88	; 0x58
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    return (&(core->barrierVars[barrierId]));
 80010b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b2:	695a      	ldr	r2, [r3, #20]
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
    CosmOS_BarrierVariableType * barrierVar;

    volatile CosmOS_BarrierStateType barrierState;


    barrierVar = core_getBarrierVar( coreVar, barrierId );
 80010ba:	653b      	str	r3, [r7, #80]	; 0x50
 80010bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
 80010c0:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void coreSync_setBarrierState(CosmOS_BarrierVariableType * barrier, CosmOS_BarrierStateType barrierStateParam)
{
    barrier->barrierState = barrierStateParam;
 80010c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ca:	601a      	str	r2, [r3, #0]
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__REACHED);

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    osVar = os_getOsVar();
 80010cc:	f000 f8d2 	bl	8001274 <os_getOsVar>
 80010d0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80010d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
    return (osVar->cfg->numberOfCores);
 80010d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 80010dc:	64bb      	str	r3, [r7, #72]	; 0x48

    numberOfSynchronizedCores = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	657b      	str	r3, [r7, #84]	; 0x54
 80010e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
    return (&(osVar->coreVars[coreId]));
 80010ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f0:	015b      	lsls	r3, r3, #5
 80010f2:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, numberOfSynchronizedCores );
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	647b      	str	r3, [r7, #68]	; 0x44
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	643b      	str	r3, [r7, #64]	; 0x40
 80010fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
    barrierVar = core_getBarrierVar( coreVar, barrierId );
 8001108:	653b      	str	r3, [r7, #80]	; 0x50

    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 800110a:	e026      	b.n	800115a <coreSync_getBarrier+0xbc>
 800110c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800110e:	623b      	str	r3, [r7, #32]
    return (barrier->barrierState);
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	681b      	ldr	r3, [r3, #0]
    {
        barrierState = coreSync_getBarrierState( barrierVar );
 8001114:	60fb      	str	r3, [r7, #12]
        
        if ( ( barrierState IS_EQUAL_TO BARRIER_STATE_ENUM__REACHED ) )
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800111c:	d11d      	bne.n	800115a <coreSync_getBarrier+0xbc>
        {
            numberOfSynchronizedCores++;
 800111e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001120:	3301      	adds	r3, #1
 8001122:	657b      	str	r3, [r7, #84]	; 0x54

            coreVar = os_getCoreVar( osVar, ( numberOfSynchronizedCores % numberOfCores ) );
 8001124:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001128:	fbb3 f2f2 	udiv	r2, r3, r2
 800112c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800112e:	fb01 f202 	mul.w	r2, r1, r2
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001136:	617a      	str	r2, [r7, #20]
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	015b      	lsls	r3, r3, #5
 8001142:	4413      	add	r3, r2
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	695a      	ldr	r2, [r3, #20]
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
            barrierVar = core_getBarrierVar( coreVar, barrierId );
 8001158:	653b      	str	r3, [r7, #80]	; 0x50
    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 800115a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800115c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800115e:	429a      	cmp	r2, r3
 8001160:	d1d4      	bne.n	800110c <coreSync_getBarrier+0x6e>
        }
    }
}
 8001162:	bf00      	nop
 8001164:	3758      	adds	r7, #88	; 0x58
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <coreSync_reactivateBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_reactivateBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 800116a:	b480      	push	{r7}
 800116c:	b089      	sub	sp, #36	; 0x24
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	6039      	str	r1, [r7, #0]
    CosmOS_BarrierVariableType * barrierVar;

    cosmosAssert( barrierId IS_EQUAL_TO SCHEDULERS_SYNC_ID );
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	2b03      	cmp	r3, #3
 8001178:	bf0c      	ite	eq
 800117a:	2301      	moveq	r3, #1
 800117c:	2300      	movne	r3, #0
 800117e:	b2db      	uxtb	r3, r3
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	4413      	add	r3, r2

    barrierVar = core_getBarrierVar( coreVar, barrierId );
 8001194:	61fb      	str	r3, [r7, #28]
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
    barrier->barrierState = barrierStateParam;
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	601a      	str	r2, [r3, #0]
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__ACTIVATED );

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */
}
 80011a4:	bf00      	nop
 80011a6:	3724      	adds	r7, #36	; 0x24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <deviceIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void deviceIO_togglePin(BitWidthType id, void *GPIOx, BitWidthType GPIO_Pin)
{    
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
    CIL_GPIO_togglePin( GPIOx, GPIO_Pin );
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	68b8      	ldr	r0, [r7, #8]
 80011c0:	f000 fd33 	bl	8001c2a <CIL_GPIO_togglePin>
}
 80011c4:	bf00      	nop
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <memoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
    CIL_memoryProtection_init();
 80011d0:	f000 fd6c 	bl	8001cac <CIL_memoryProtection_init>
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <memoryProtection_setMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_setMemoryProtection(CosmOS_CoreVariableType * core,CosmOS_SchedulableVariableType  * schedulable)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b096      	sub	sp, #88	; 0x58
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	699b      	ldr	r3, [r3, #24]

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulable );
 80011ec:	657b      	str	r3, [r7, #84]	; 0x54
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f4:	613b      	str	r3, [r7, #16]
    return (&(core->programVars[programIterator]));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	68d9      	ldr	r1, [r3, #12]
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
    programVar = core_getCoreProgramVar( core, programId ); 
 8001206:	653b      	str	r3, [r7, #80]	; 0x50
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	61bb      	str	r3, [r7, #24]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]

    stack = schedulable_getStack( schedulable );
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
  * 
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackLowAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackLowAddress);
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	685b      	ldr	r3, [r3, #4]
    stackLowAddress = stack_getStackLowAddress( stack );
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	623b      	str	r3, [r7, #32]
  * 
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackHighAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackHighAddress);
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 800122a:	61fb      	str	r3, [r7, #28]
    CIL_memoryProtection_setStackOverflowProtection( stackLowAddress, stackHighAddress );
 800122c:	69f9      	ldr	r1, [r7, #28]
 800122e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001230:	f000 fe3c 	bl	8001eac <CIL_memoryProtection_setStackOverflowProtection>
 8001234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001236:	64bb      	str	r3, [r7, #72]	; 0x48
 8001238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemorySize(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemorySize);
 800123c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
    size = program_getProgramMemorySize( program );
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
 8001244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryLowAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryLowAddress);
 8001248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	691b      	ldr	r3, [r3, #16]
    lowAddress = program_getProgramMemoryLowAddress( program );
 800124e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryHighAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryHighAddress);
 8001254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
    highAddress = program_getProgramMemoryHighAddress( program );
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
    if ( size )
 800125c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <memoryProtection_setMemoryProtection+0x92>
        CIL_memoryProtection_setProgramMemoryProtection( lowAddress, highAddress );
 8001262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001264:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001266:	f000 fe7d 	bl	8001f64 <CIL_memoryProtection_setProgramMemoryProtection>

    memoryProtection_setStackOverflowProtection( stack );
    memoryProtection_setProgramMemoryProtection( programVar );
}
 800126a:	bf00      	nop
 800126c:	3758      	adds	r7, #88	; 0x58
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <os_getOsVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_OsVariableType * os_getOsVar(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
    return &OsVar;
 8001278:	4b02      	ldr	r3, [pc, #8]	; (8001284 <os_getOsVar+0x10>)
}
 800127a:	4618      	mov	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	380080cc 	.word	0x380080cc

08001288 <os_start>:
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    scheduler_start();
 800128c:	f000 fa3e 	bl	800170c <scheduler_start>
};
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <osInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osInit_init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_OsVariableType * osVar;

    switchMemoryProtection_init();
 800129a:	f7ff ff97 	bl	80011cc <memoryProtection_init>

    osVar = os_getOsVar();
 800129e:	f7ff ffe9 	bl	8001274 <os_getOsVar>
 80012a2:	6078      	str	r0, [r7, #4]

    CIL_core_setCoreVar(osVar);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 fcdb 	bl	8001c60 <CIL_core_setCoreVar>

    coreVar = core_getCoreVar();
 80012aa:	f7ff febf 	bl	800102c <core_getCoreVar>
 80012ae:	6038      	str	r0, [r7, #0]

    stackInit_init( coreVar );
 80012b0:	6838      	ldr	r0, [r7, #0]
 80012b2:	f000 fbcd 	bl	8001a50 <stackInit_init>

    //init MPU 
    //init DMA to buffers
    //Maybe better have here CIL_microInit()

    coreSync_getBarrier( coreVar, OS_INIT_ID );
 80012b6:	2100      	movs	r1, #0
 80012b8:	6838      	ldr	r0, [r7, #0]
 80012ba:	f7ff fef0 	bl	800109e <coreSync_getBarrier>
    
};
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <permission_tryAccess>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_AccessStateType permission_tryAccess(CosmOS_PermissionsConfigurationType * permission,CosmOS_CoreVariableType * coreVar)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	60bb      	str	r3, [r7, #8]
    return (core->schedulableInExecution);
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	685b      	ldr	r3, [r3, #4]
    CosmOS_AccessStateType accessState;

    CosmOS_SchedulableVariableType * schedulableVar;

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	613b      	str	r3, [r7, #16]
    cosmosAssert( IS_NOT( permission[schedulableVar->cfg->coreId].bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] & \
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	4413      	add	r3, r2
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	491f      	ldr	r1, [pc, #124]	; (8001378 <permission_tryAccess+0xb0>)
 80012fa:	5ccb      	ldrb	r3, [r1, r3]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	69db      	ldr	r3, [r3, #28]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	6979      	ldr	r1, [r7, #20]
 800130c:	440b      	add	r3, r1
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <permission_tryAccess+0xb0>)
 8001318:	5cc3      	ldrb	r3, [r0, r3]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4013      	ands	r3, r2
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf0c      	ite	eq
 8001326:	2301      	moveq	r3, #1
 8001328:	2300      	movne	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	60fb      	str	r3, [r7, #12]
    return ((( permission[schedulableVar->cfg->coreId].bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] >> schedulableVar->cfg->id ) & BITLOCK_MASK ) ? \
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4413      	add	r3, r2
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	490d      	ldr	r1, [pc, #52]	; (8001378 <permission_tryAccess+0xb0>)
 8001344:	5ccb      	ldrb	r3, [r1, r3]
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	4413      	add	r3, r2
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	fa22 f303 	lsr.w	r3, r2, r3
 8001356:	f003 0301 	and.w	r3, r3, #1
            ACCESS_STATE_ENUM__ALLOWED : ACCESS_STATE_ENUM__DENIED );
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <permission_tryAccess+0x9a>
 800135e:	2300      	movs	r3, #0
 8001360:	e001      	b.n	8001366 <permission_tryAccess+0x9e>
 8001362:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    accessState = permission_trySchedulableAccess( permission, schedulableVar );
 8001366:	61bb      	str	r3, [r7, #24]

    return accessState;
 8001368:	69bb      	ldr	r3, [r7, #24]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	38000060 	.word	0x38000060

0800137c <schedulable_setExecutionStateToFinished>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void schedulable_setExecutionStateToFinished(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8001382:	f7ff fe53 	bl	800102c <core_getCoreVar>
 8001386:	6178      	str	r0, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	2302      	movs	r3, #2
 8001398:	72fb      	strb	r3, [r7, #11]
  * 
  * @return CosmOS_SchedulableStateType
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setState(CosmOS_SchedulableVariableType * schedulable, CosmOS_SchedulableStateType stateParam)
{
    schedulable->state = stateParam;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	7afa      	ldrb	r2, [r7, #11]
 800139e:	711a      	strb	r2, [r3, #4]

    schedulable_setState( schedulableVar, SCHEDULABLE_INSTANCE_ENUM__EXECUTED );
};
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <scheduler_performanceScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_performanceScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b093      	sub	sp, #76	; 0x4c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	613b      	str	r3, [r7, #16]
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType scheduler_getSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler)
{
    return (scheduler->threadListIterator);
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	68db      	ldr	r3, [r3, #12]
        threadListElementsNum;

    CosmOS_ThreadVariableType *threadVar;


    threadListIterator = scheduler_getSchedulerThreadListIterator(schedulerVar);
 80013be:	647b      	str	r3, [r7, #68]	; 0x44
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	617b      	str	r3, [r7, #20]
    return (scheduler->cfg->threadListElementsNum);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
    threadListElementsNum = scheduler_getSchedulerThreadListElementsNum(schedulerVar);
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40

    cosmosAssert(threadListIterator < threadListElementsNum);
 80013cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013d0:	429a      	cmp	r2, r3
 80013d2:	bf34      	ite	cc
 80013d4:	2301      	movcc	r3, #1
 80013d6:	2300      	movcs	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	623b      	str	r3, [r7, #32]
 80013e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e2:	61fb      	str	r3, [r7, #28]
  * 
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * scheduler_getSchedulerThreadListThreadVar(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIterator)
{
    return (CosmOS_ThreadVariableType *)(scheduler->cfg->threadList[threadListIterator].threadVar);
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	681b      	ldr	r3, [r3, #0]

    threadVar = scheduler_getSchedulerThreadListThreadVar(schedulerVar, threadListIterator);
 80013f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  * 
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * thread_getThreadSchedulable(CosmOS_ThreadVariableType * thread)
{
    return (CosmOS_SchedulableVariableType *)(thread->schedulable);
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = thread_getThreadSchedulable(threadVar);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = schedulable_getStackPointer(*schedulableVar);
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
    return (schedulable->stackPointer);
 8001406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	601a      	str	r2, [r3, #0]

    threadListIterator = ((threadListIterator + 1) % threadListElementsNum);
 800140e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001410:	3301      	adds	r3, #1
 8001412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001414:	fbb3 f2f2 	udiv	r2, r3, r2
 8001418:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800141a:	fb01 f202 	mul.w	r2, r1, r2
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	647b      	str	r3, [r7, #68]	; 0x44
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
 8001426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIteratorParam)
{
    scheduler->threadListIterator = threadListIteratorParam;
 800142a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800142c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->preemptTick);
 8001434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
    scheduler_setSchedulerThreadListIterator(schedulerVar, threadListIterator);

    preemptTick = scheduler_getSchedulerPreemptTick(schedulerVar);
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
    *timerTicks = preemptTick;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001440:	601a      	str	r2, [r3, #0]
}
 8001442:	bf00      	nop
 8001444:	374c      	adds	r7, #76	; 0x4c
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <scheduler_classicScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_classicScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks, BitWidthType startTick, BitWidthType currentTick)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b088      	sub	sp, #32
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	617b      	str	r3, [r7, #20]
    return (CosmOS_TaskVariableType *)(scheduler->cfg->idleTaskVar);
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    CosmOS_TaskVariableType * taskVar;


    taskVar = scheduler_getSchedulerIdleTaskVar( schedulerVar );
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	61bb      	str	r3, [r7, #24]
  * 
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * task_getTaskSchedulable(CosmOS_TaskVariableType * task)
{
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = task_getTaskSchedulable( taskVar );
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fac3 	bl	8001a04 <stackInit_schedulableStackInit>
 800147e:	4602      	mov	r2, r0
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	601a      	str	r2, [r3, #0]

    if ( startTick < currentTick )
 8001484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <scheduler_classicScheduling+0x4e>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->lastToFirstTaskTicks);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699a      	ldr	r2, [r3, #24]
    {
        *timerTicks = scheduler_getSchedulerLastToFirstTaskTicks( schedulerVar );
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *timerTicks = startTick - currentTick;
    }
}
 800149a:	e004      	b.n	80014a6 <scheduler_classicScheduling+0x58>
        *timerTicks = startTick - currentTick;
 800149c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	1ad2      	subs	r2, r2, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	601a      	str	r2, [r3, #0]
}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <scheduler_scheduleNextInstance>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType scheduler_scheduleNextInstance(StackPointerType stackPointer)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b0b4      	sub	sp, #208	; 0xd0
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;
    CosmOS_SchedulableVariableType * priorSchedulableVar;


    coreVar = core_getCoreVar();
 80014b6:	f7ff fdb9 	bl	800102c <core_getCoreVar>
 80014ba:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80014be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80014c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return (core->schedulerVar);
 80014c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014ca:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 80014cc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80014d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80014d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (core->schedulableInExecution);
 80014d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014dc:	685b      	ldr	r3, [r3, #4]
    priorSchedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 80014de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80014e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->cfg->hyperTick);
 80014ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 80014f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->schedulerState);
 80014fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001502:	7c1b      	ldrb	r3, [r3, #16]
    schedulerState = scheduler_getSchedulerState( schedulerVar );
 8001504:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800150c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (scheduler->currentTick);
 8001510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001514:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800151a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800151e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->scheduleTableIterator);
 8001522:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001526:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800152e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->cfg->scheduleTableElementsNum);
 8001532:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 800153a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    if ( scheduleTableElementsNum )
 800153e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01b      	beq.n	800157e <scheduler_scheduleNextInstance+0xd0>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800154c:	429a      	cmp	r2, r3
 800154e:	bf8c      	ite	hi
 8001550:	2301      	movhi	r3, #1
 8001552:	2300      	movls	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001560:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8001568:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    }

    //this should be moved to the sysTick interrupt with higher priority to have faster response - without else, that should stay here
    if ( schedulerState IS_EQUAL_TO SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK )
 800157e:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001582:	2b01      	cmp	r3, #1
 8001584:	d107      	bne.n	8001596 <scheduler_scheduleNextInstance+0xe8>
 8001586:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800158a:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (schedulable->state);
 800158c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800158e:	791b      	ldrb	r3, [r3, #4]
    {
        CosmOS_SchedulableStateType schedulableState;

        schedulableState = schedulable_getState( priorSchedulableVar );
 8001590:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8001594:	e007      	b.n	80015a6 <scheduler_scheduleNextInstance+0xf8>
 8001596:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800159a:	67bb      	str	r3, [r7, #120]	; 0x78
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	677b      	str	r3, [r7, #116]	; 0x74
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setStackPointer(CosmOS_SchedulableVariableType * schedulable, StackPointerType stackPointerParam)
{
    schedulable->stackPointer = stackPointerParam;
 80015a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015a4:	609a      	str	r2, [r3, #8]
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_setStackPointer( priorSchedulableVar, stackPointer );
    }

    if ( scheduleTableElementsNum AND startTick IS_EQUAL_TO currentTick )
 80015a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d05d      	beq.n	800166a <scheduler_scheduleNextInstance+0x1bc>
 80015ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80015b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d157      	bne.n	800166a <scheduler_scheduleNextInstance+0x1bc>
 80015ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015be:	673b      	str	r3, [r7, #112]	; 0x70
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	667b      	str	r3, [r7, #100]	; 0x64
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	663b      	str	r3, [r7, #96]	; 0x60
 80015d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 80015de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80015e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80015e6:	657b      	str	r3, [r7, #84]	; 0x54
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 80015e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4413      	add	r3, r2
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	653b      	str	r3, [r7, #80]	; 0x50
 80015f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80015fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015fe:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8001600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001602:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8001604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f9fb 	bl	8001a04 <stackInit_schedulableStackInit>
 800160e:	4602      	mov	r2, r0
 8001610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001612:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 8001614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	64bb      	str	r3, [r7, #72]	; 0x48
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    schedulable->state = stateParam;
 8001620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001622:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001626:	711a      	strb	r2, [r3, #4]
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8001628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001630:	fbb3 f2f2 	udiv	r2, r3, r2
 8001634:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001636:	fb01 f202 	mul.w	r2, r1, r2
 800163a:	1a9a      	subs	r2, r3, r2
 800163c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800163e:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8001640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001646:	643a      	str	r2, [r7, #64]	; 0x40
 8001648:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 800164a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800164c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
    return (task->cfg->wcet);
 8001654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
    *timerTicks = wcet;
 800165c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800165e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001660:	601a      	str	r2, [r3, #0]
    {   
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8001662:	2301      	movs	r3, #1
 8001664:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001668:	e00c      	b.n	8001684 <scheduler_scheduleNextInstance+0x1d6>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	f107 0210 	add.w	r2, r7, #16
 8001672:	f107 010c 	add.w	r1, r7, #12
 8001676:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800167a:	f7ff fe95 	bl	80013a8 <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 800167e:	2302      	movs	r3, #2
 8001680:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	623a      	str	r2, [r7, #32]
 800168a:	61fb      	str	r3, [r7, #28]
    schedulable->stackPointer = stackPointerParam;
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	609a      	str	r2, [r3, #8]
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4619      	mov	r1, r3
 8001696:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800169a:	f7ff fcd4 	bl	8001046 <core_setSchedulableIntoCurrentContext>
 800169e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016a4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80016a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_SchedulerStateType schedulerStateParam)
{
    scheduler->schedulerState = schedulerStateParam;
 80016ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016b2:	741a      	strb	r2, [r3, #16]

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 80016b4:	2300      	movs	r3, #0
 80016b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    currentTick = ( ( currentTick + timerTicks ) % hyperTick ); 
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016c0:	4413      	add	r3, r2
 80016c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80016c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80016ca:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80016ce:	fb01 f202 	mul.w	r2, r1, r2
 80016d2:	1a9b      	subs	r3, r3, r2
 80016d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
 80016de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    scheduler->currentTick = currentTickParam;
 80016e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e8:	605a      	str	r2, [r3, #4]
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016f2:	f7ff fd71 	bl	80011d8 <memoryProtection_setMemoryProtection>

    CIL_sysTimer_setTicks( timerTicks, schedulersSyncState );
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fd4d 	bl	800219c <CIL_sysTimer_setTicks>

    return stackPointerRetVal;
 8001702:	693b      	ldr	r3, [r7, #16]
};
 8001704:	4618      	mov	r0, r3
 8001706:	37d0      	adds	r7, #208	; 0xd0
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <scheduler_start>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_start(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0aa      	sub	sp, #168	; 0xa8
 8001710:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8001712:	f7ff fc8b 	bl	800102c <core_getCoreVar>
 8001716:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800171a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800171e:	677b      	str	r3, [r7, #116]	; 0x74
    return (core->schedulerVar);
 8001720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001722:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8001724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800172c:	67bb      	str	r3, [r7, #120]	; 0x78
    return (scheduler->cfg->hyperTick);
 800172e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8001734:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800173c:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (scheduler->currentTick);
 800173e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001740:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8001742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001746:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800174a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (scheduler->scheduleTableIterator);
 800174e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001752:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800175a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTableElementsNum);
 800175e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8001766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if ( scheduleTableElementsNum )
 800176a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800176e:	2b00      	cmp	r3, #0
 8001770:	d016      	beq.n	80017a0 <scheduler_start+0x94>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001778:	429a      	cmp	r2, r3
 800177a:	bf8c      	ite	hi
 800177c:	2301      	movhi	r3, #1
 800177e:	2300      	movls	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	66bb      	str	r3, [r7, #104]	; 0x68

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800178a:	673a      	str	r2, [r7, #112]	; 0x70
 800178c:	66fb      	str	r3, [r7, #108]	; 0x6c
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 800178e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4413      	add	r3, r2
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }

    if ( scheduleTableElementsNum AND (startTick IS_EQUAL_TO currentTick) )
 80017a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d05b      	beq.n	8001860 <scheduler_start+0x154>
 80017a8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80017ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d155      	bne.n	8001860 <scheduler_start+0x154>
 80017b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017b8:	667b      	str	r3, [r7, #100]	; 0x64
 80017ba:	463b      	mov	r3, r7
 80017bc:	663b      	str	r3, [r7, #96]	; 0x60
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	657b      	str	r3, [r7, #84]	; 0x54
 80017ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017d2:	653b      	str	r3, [r7, #80]	; 0x50
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 80017d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017dc:	64bb      	str	r3, [r7, #72]	; 0x48
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 80017de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4413      	add	r3, r2
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
 80017ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f0:	643b      	str	r3, [r7, #64]	; 0x40
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 80017f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80017f4:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 80017f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017f8:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 80017fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f000 f900 	bl	8001a04 <stackInit_schedulableStackInit>
 8001804:	4602      	mov	r2, r0
 8001806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001808:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 800180a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001810:	2301      	movs	r3, #1
 8001812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    schedulable->state = stateParam;
 8001816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001818:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800181c:	711a      	strb	r2, [r3, #4]
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 800181e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001826:	fbb3 f2f2 	udiv	r2, r3, r2
 800182a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800182c:	fb01 f202 	mul.w	r2, r1, r2
 8001830:	1a9a      	subs	r2, r3, r2
 8001832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001834:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8001836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800183c:	637a      	str	r2, [r7, #52]	; 0x34
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8001840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (task->cfg->wcet);
 800184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
    *timerTicks = wcet;
 8001852:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001856:	601a      	str	r2, [r3, #0]
    {   
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 800185e:	e00b      	b.n	8001878 <scheduler_start+0x16c>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	f107 0208 	add.w	r2, r7, #8
 8001868:	4639      	mov	r1, r7
 800186a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800186e:	f7ff fd9b 	bl	80013a8 <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8001872:	2302      	movs	r3, #2
 8001874:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	617a      	str	r2, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
    schedulable->stackPointer = stackPointerParam;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	609a      	str	r2, [r3, #8]
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	4619      	mov	r1, r3
 800188a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800188e:	f7ff fbda 	bl	8001046 <core_setSchedulableIntoCurrentContext>
 8001892:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001896:	61fb      	str	r3, [r7, #28]
 8001898:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800189c:	76fb      	strb	r3, [r7, #27]
    scheduler->schedulerState = schedulerStateParam;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	7efa      	ldrb	r2, [r7, #27]
 80018a2:	741a      	strb	r2, [r3, #16]

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    currentTick = ( currentTick + timerTicks ) % hyperTick;
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018b0:	4413      	add	r3, r2
 80018b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80018ba:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80018be:	fb01 f202 	mul.w	r2, r1, r2
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
 80018ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018d2:	623b      	str	r3, [r7, #32]
    scheduler->currentTick = currentTickParam;
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	6a3a      	ldr	r2, [r7, #32]
 80018d8:	605a      	str	r2, [r3, #4]
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar , schedulableVar );
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80018e2:	f7ff fc79 	bl	80011d8 <memoryProtection_setMemoryProtection>

    CIL_sysTimer_setTicks( timerTicks, schedulersSyncState );
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80018ec:	4618      	mov	r0, r3
 80018ee:	f000 fc55 	bl	800219c <CIL_sysTimer_setTicks>

    CIL_stack_setStackPointer( stackPointerRetVal );
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fbd4 	bl	80020a2 <CIL_stack_setStackPointer>
};
 80018fa:	bf00      	nop
 80018fc:	37a8      	adds	r7, #168	; 0xa8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <schedulerSync_sync>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SchedulerSyncStateType schedulerSync_sync(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_CoreVariableType * coreVar, BitWidthType currentTick, BitWidthType hyperTick)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b096      	sub	sp, #88	; 0x58
 8001906:	af00      	add	r7, sp, #0
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	60b9      	str	r1, [r7, #8]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	603b      	str	r3, [r7, #0]
    
    CosmOS_BooleanType syncInitState;

    CosmOS_SchedulerSyncStateType schedulerState = SCHEDULER_SYNC_STATE_ENUM__NOT_IN_SYNC;
 8001910:	2300      	movs	r3, #0
 8001912:	657b      	str	r3, [r7, #84]	; 0x54
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->syncInitState);
 8001918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800191a:	7e1b      	ldrb	r3, [r3, #24]


    syncInitState = scheduler_getSchedulerSyncInitState( schedulerVar );
 800191c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    if ( __COSMOS_UNLIKELY( syncInitState IS_EQUAL_TO False ) )
 8001920:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d02e      	beq.n	8001990 <schedulerSync_sync+0x8e>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->firstSyncTaskStartTick);
 8001936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a1b      	ldr	r3, [r3, #32]
    {
        BitWidthType firstSyncTaskStartTick;


        firstSyncTaskStartTick = scheduler_getSchedulerFirstSyncTaskStartTick( schedulerVar );
 800193c:	647b      	str	r3, [r7, #68]	; 0x44

        if ( firstSyncTaskStartTick IS_EQUAL_TO currentTick )
 800193e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	d14d      	bne.n	80019e2 <schedulerSync_sync+0xe0>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	623b      	str	r3, [r7, #32]
    return (scheduler->cfg->syncTicks);
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks,
                          nextTick;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8001950:	643b      	str	r3, [r7, #64]	; 0x40

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001956:	4413      	add	r3, r2
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	fbb3 f2f2 	udiv	r2, r3, r2
 800195e:	6839      	ldr	r1, [r7, #0]
 8001960:	fb01 f202 	mul.w	r2, r1, r2
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
 800196c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerNextSyncTick(CosmOS_SchedulerVariableType * scheduler, BitWidthType paramNextSyncTick)
{
    scheduler->nextSyncTick = paramNextSyncTick;
 8001970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001974:	615a      	str	r2, [r3, #20]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	633b      	str	r3, [r7, #48]	; 0x30
 800197a:	2301      	movs	r3, #1
 800197c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerSyncInitState(CosmOS_SchedulerVariableType * scheduler, CosmOS_BooleanType paramSyncInitState)
{
    scheduler->syncInitState = paramSyncInitState;
 8001980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001982:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001986:	761a      	strb	r2, [r3, #24]
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            scheduler_setSchedulerSyncInitState( schedulerVar, True );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8001988:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800198c:	657b      	str	r3, [r7, #84]	; 0x54
 800198e:	e028      	b.n	80019e2 <schedulerSync_sync+0xe0>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	61fb      	str	r3, [r7, #28]
    return (scheduler->nextSyncTick);
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	695b      	ldr	r3, [r3, #20]
    else
    {
        BitWidthType nextTick;


        nextTick = scheduler_getSchedulerNextSyncTick( schedulerVar );
 8001998:	64fb      	str	r3, [r7, #76]	; 0x4c

        if ( __COSMOS_UNLIKELY( nextTick IS_EQUAL_TO currentTick ) )
 800199a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	bf0c      	ite	eq
 80019a2:	2301      	moveq	r3, #1
 80019a4:	2300      	movne	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d01a      	beq.n	80019e2 <schedulerSync_sync+0xe0>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->syncTicks);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019bc:	4413      	add	r3, r2
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	fb01 f202 	mul.w	r2, r1, r2
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d4:	617b      	str	r3, [r7, #20]
    scheduler->nextSyncTick = paramNextSyncTick;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	615a      	str	r2, [r3, #20]
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 80019dc:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80019e0:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    if ( schedulerState IS_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 80019e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e4:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 80019e8:	d107      	bne.n	80019fa <schedulerSync_sync+0xf8>
    {
        coreSync_getBarrier( coreVar, SCHEDULERS_SYNC_ID );
 80019ea:	2103      	movs	r1, #3
 80019ec:	68b8      	ldr	r0, [r7, #8]
 80019ee:	f7ff fb56 	bl	800109e <coreSync_getBarrier>
        coreSync_reactivateBarrier( coreVar, SCHEDULERS_SYNC_ID );
 80019f2:	2103      	movs	r1, #3
 80019f4:	68b8      	ldr	r0, [r7, #8]
 80019f6:	f7ff fbb8 	bl	800116a <coreSync_reactivateBarrier>
    }

    return schedulerState;
 80019fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
};
 80019fc:	4618      	mov	r0, r3
 80019fe:	3758      	adds	r7, #88	; 0x58
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <stackInit_schedulableStackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType stackInit_schedulableStackInit(CosmOS_SchedulableVariableType  * schedulable)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	; 0x30
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	60fb      	str	r3, [r7, #12]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
    StackPointerType stackPointer;

    CosmOS_StackConfigurationType * stack;


    stack = schedulable_getStack( schedulable );
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	613b      	str	r3, [r7, #16]
    return (schedulable->cfg->handler);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
    handler = schedulable_getHandler( schedulable );
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	617b      	str	r3, [r7, #20]
    return (stack->stackLowAddress);
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	685b      	ldr	r3, [r3, #4]

    stackLowAddress = stack_getStackLowAddress( stack );
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a30:	61bb      	str	r3, [r7, #24]
    return (stack->stackHighAddress);
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 8001a36:	623b      	str	r3, [r7, #32]

    stackPointer = CIL_stack_stackInit( stackLowAddress, stackHighAddress, (BitWidthType)handler );
 8001a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	6a39      	ldr	r1, [r7, #32]
 8001a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a40:	f000 faec 	bl	800201c <CIL_stack_stackInit>
 8001a44:	61f8      	str	r0, [r7, #28]

    return stackPointer;
 8001a46:	69fb      	ldr	r3, [r7, #28]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3730      	adds	r7, #48	; 0x30
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <stackInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void stackInit_init(CosmOS_CoreVariableType * coreVar)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b094      	sub	sp, #80	; 0x50
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->cfg->numberOfPrograms);
 8001a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
                  stackPointerRetVal;

    CosmOS_ThreadVariableType * threadVar;
    CosmOS_ProgramVariableType * programVar;

    numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 8001a62:	647b      	str	r3, [r7, #68]	; 0x44

    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8001a64:	2300      	movs	r3, #0
 8001a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a68:	e039      	b.n	8001ade <stackInit_init+0x8e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a70:	623b      	str	r3, [r7, #32]
    return (&(core->programVars[programIterator]));
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	68d9      	ldr	r1, [r3, #12]
 8001a76:	6a3a      	ldr	r2, [r7, #32]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	440b      	add	r3, r1
    {
        programVar = core_getCoreProgramVar( coreVar, programIterator );
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
 8001a84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->numberOfThreads);
 8001a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
        numberOfThreads = program_getProgramNumberOfThreads( programVar );
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8001a90:	2300      	movs	r3, #0
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a94:	e01c      	b.n	8001ad0 <stackInit_init+0x80>
 8001a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a9c:	60fb      	str	r3, [r7, #12]
  * 
  * @return CosmOS_ThreadVariableType * 
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * program_getProgramThread(CosmOS_ProgramVariableType * program, BitWidthType threadIterator)
{
    return (&(program->threadVars[threadIterator]));
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4413      	add	r3, r2
        {   
            CosmOS_SchedulableVariableType * schedulableVar;


            threadVar = program_getProgramThread( programVar, threadIterator );
 8001aa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	685b      	ldr	r3, [r3, #4]
            schedulableVar = thread_getThreadSchedulable( threadVar );
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34

            stackPointerRetVal = stackInit_schedulableStackInit( schedulableVar );
 8001ab4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ab6:	f7ff ffa5 	bl	8001a04 <stackInit_schedulableStackInit>
 8001aba:	6338      	str	r0, [r7, #48]	; 0x30
 8001abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001abe:	61fb      	str	r3, [r7, #28]
 8001ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac2:	61bb      	str	r3, [r7, #24]
    schedulable->stackPointer = stackPointerParam;
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	609a      	str	r2, [r3, #8]
        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8001aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001acc:	3301      	adds	r3, #1
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ad0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d3de      	bcc.n	8001a96 <stackInit_init+0x46>
    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8001ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ada:	3301      	adds	r3, #1
 8001adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ade:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d3c1      	bcc.n	8001a6a <stackInit_init+0x1a>
            schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
        }
    }
}
 8001ae6:	bf00      	nop
 8001ae8:	3750      	adds	r7, #80	; 0x50
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <sysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysCalls_os(BitWidthType id)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
    CIL_sysCalls_os( id );
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fb34 	bl	8002164 <CIL_sysCalls_os>
};
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <sysCalls_readWrite>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_readWrite(BitWidthType id, void * entity, BitWidthType size)
{   
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    returnValue = CIL_sysCalls_readWrite( id, entity, size );
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fb30 	bl	800217a <CIL_sysCalls_readWrite>
 8001b1a:	6178      	str	r0, [r7, #20]

    return returnValue;
 8001b1c:	697b      	ldr	r3, [r7, #20]
};
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <sysJobs_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysJobs_dispatcher(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b096      	sub	sp, #88	; 0x58
 8001b2a:	af00      	add	r7, sp, #0

    CosmOS_CoreVariableType * coreVar;
    CosmOS_SysJobsVariableType * sysJobsVar;


    coreVar = core_getCoreVar();
 8001b2c:	f7ff fa7e 	bl	800102c <core_getCoreVar>
 8001b30:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    return (core->sysJobs);
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	69db      	ldr	r3, [r3, #28]
    sysJobsVar = core_getCoreOsSysJobs( coreVar );
 8001b3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs)
{
    return (sysJobs->currentTick);
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	685b      	ldr	r3, [r3, #4]

    sysJobsCurrentTick = sysJobs_getSysJobsCurrentTick( sysJobsVar );
 8001b44:	647b      	str	r3, [r7, #68]	; 0x44
 8001b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (sysJobs->cfg->numOfGroups);
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
    numOfGroups = sysJobs_getSysJobsNumOfGroups( sysJobsVar );
 8001b50:	643b      	str	r3, [r7, #64]	; 0x40

    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8001b52:	2300      	movs	r3, #0
 8001b54:	657b      	str	r3, [r7, #84]	; 0x54
 8001b56:	e049      	b.n	8001bec <sysJobs_dispatcher+0xc6>
 8001b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b5a:	623b      	str	r3, [r7, #32]
 8001b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b5e:	61fb      	str	r3, [r7, #28]
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsGroupTickMultiplicator(CosmOS_SysJobsVariableType * sysJobs, BitWidthType groupId)
{
    return (sysJobs->cfg->groups[groupId].tickMultiplicator);
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	689b      	ldr	r3, [r3, #8]
    { 
        BitWidthType  groupTickMultiplicator;


        groupTickMultiplicator = sysJobs_getSysJobsGroupTickMultiplicator( sysJobsVar, groupIterator );
 8001b74:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( IS_NOT( sysJobsCurrentTick % groupTickMultiplicator ) )
 8001b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d12d      	bne.n	8001be6 <sysJobs_dispatcher+0xc0>
 8001b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b90:	60fb      	str	r3, [r7, #12]
    return (CosmOS_GenericVoidType *)(sysJobs->cfg->groups[groupId].handlers);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6819      	ldr	r1, [r3, #0]
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4413      	add	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	681b      	ldr	r3, [r3, #0]
        {
            BitWidthType numOfHandlers;
            CosmOS_GenericVoidType * handlers;


            handlers = sysJobs_getSysJobsGroupHandlers( sysJobsVar, groupIterator );
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bae:	617b      	str	r3, [r7, #20]
    return (sysJobs->cfg->groups[groupId].numOfHandlers);
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	685b      	ldr	r3, [r3, #4]
            numOfHandlers = sysJobs_getSysJobsGroupNumOfHandlers( sysJobsVar, groupIterator );
 8001bc4:	633b      	str	r3, [r7, #48]	; 0x30

            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	653b      	str	r3, [r7, #80]	; 0x50
 8001bca:	e008      	b.n	8001bde <sysJobs_dispatcher+0xb8>
            {
                handlers[handlerIterator]();
 8001bcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bd2:	4413      	add	r3, r2
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4798      	blx	r3
            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 8001bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bda:	3301      	adds	r3, #1
 8001bdc:	653b      	str	r3, [r7, #80]	; 0x50
 8001bde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d3f2      	bcc.n	8001bcc <sysJobs_dispatcher+0xa6>
    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8001be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be8:	3301      	adds	r3, #1
 8001bea:	657b      	str	r3, [r7, #84]	; 0x54
 8001bec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d3b1      	bcc.n	8001b58 <sysJobs_dispatcher+0x32>
 8001bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bf6:	603b      	str	r3, [r7, #0]
    return (sysJobs->cfg->hyperTick);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
            }
        }
    }

    hyperTick = sysJobs_getSysJobsHyperTick( sysJobsVar );
 8001bfe:	63fb      	str	r3, [r7, #60]	; 0x3c

    sysJobsCurrentTick = ( ( sysJobsCurrentTick + 1 ) % hyperTick );
 8001c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c02:	3301      	adds	r3, #1
 8001c04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c06:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c0c:	fb01 f202 	mul.w	r2, r1, r2
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	647b      	str	r3, [r7, #68]	; 0x44
 8001c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c1a:	607b      	str	r3, [r7, #4]
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void sysJobs_setSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs, BitWidthType currentTickParam)
{
    sysJobs->currentTick = currentTickParam;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	605a      	str	r2, [r3, #4]
    sysJobs_setSysJobsCurrentTick( sysJobsVar, sysJobsCurrentTick );

};
 8001c22:	bf00      	nop
 8001c24:	3758      	adds	r7, #88	; 0x58
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <CIL_GPIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_GPIO_togglePin(void *GPIOx, BitWidthType GPIO_Pin)
{    
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
 8001c32:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin( GPIOx, (uint16_t)GPIO_Pin );
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f003 f993 	bl	8004f66 <HAL_GPIO_TogglePin>
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <CIL_core_getCoreId>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CIL_core_getCoreId(void)
{    
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
    return (HAL_GetCurrentCPUID() == CM7_CPUID) ? CORE_0_ID : CORE_1_ID;
 8001c4c:	f001 fe00 	bl	8003850 <HAL_GetCurrentCPUID>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b03      	cmp	r3, #3
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <CIL_core_setCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_core_setCoreVar(CosmOS_OsVariableType * osVar)
{    
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	; 0x28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
    BitWidthType coreId,
                numberOfCores;

    CosmOS_CoreVariableType * coreVar;

    coreId = CIL_core_getCoreId();
 8001c68:	f7ff ffee 	bl	8001c48 <CIL_core_getCoreId>
 8001c6c:	6278      	str	r0, [r7, #36]	; 0x24
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfCores);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 8001c78:	623b      	str	r3, [r7, #32]

    cosmosAssert( coreId < numberOfCores );
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	bf34      	ite	cc
 8001c82:	2301      	movcc	r3, #1
 8001c84:	2300      	movcs	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	61bb      	str	r3, [r7, #24]
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	617b      	str	r3, [r7, #20]
    return (&(osVar->coreVars[coreId]));
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	015b      	lsls	r3, r3, #5
 8001c9a:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, coreId );
 8001c9c:	61fb      	str	r3, [r7, #28]

    //must be changed, not valid for all compilers
    __asm volatile("MOV R9,%[coreVariable]" : [coreVariable] "=r" (coreVar));
 8001c9e:	4699      	mov	r9, r3
 8001ca0:	61fb      	str	r3, [r7, #28]
}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <CIL_memoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_memoryProtection_init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	; 0x28
 8001cb0:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cb2:	463b      	mov	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
    BitWidthType core,
                 address;

    core = CIL_core_getCoreId();
 8001cbe:	f7ff ffc3 	bl	8001c48 <CIL_core_getCoreId>
 8001cc2:	6238      	str	r0, [r7, #32]

    HAL_MPU_Disable();
 8001cc4:	f001 fd4c 	bl	8003760 <HAL_MPU_Disable>

    if( core IS_EQUAL_TO CORE_0_ID){
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d11e      	bne.n	8001d0c <CIL_memoryProtection_init+0x60>

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 8001cd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001cda:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8001cdc:	2314      	movs	r3, #20
 8001cde:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8001ce8:	2306      	movs	r3, #6
 8001cea:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
      
        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f001 fd62 	bl	80037c8 <HAL_MPU_ConfigRegion>

        address = 0x20000000;
 8001d04:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0a:	e01d      	b.n	8001d48 <CIL_memoryProtection_init+0x9c>

    }
    else
    {

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 8001d14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d18:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8001d1a:	2314      	movs	r3, #20
 8001d1c:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001d22:	2301      	movs	r3, #1
 8001d24:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8001d26:	2306      	movs	r3, #6
 8001d28:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
      
        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 fd43 	bl	80037c8 <HAL_MPU_ConfigRegion>

        address = 0x10000000;
 8001d42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24

    }

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = address;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001d54:	2310      	movs	r3, #16
 8001d56:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8001d60:	2302      	movs	r3, #2
 8001d62:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d74:	463b      	mov	r3, r7
 8001d76:	4618      	mov	r0, r3
 8001d78:	f001 fd26 	bl	80037c8 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001d80:	2302      	movs	r3, #2
 8001d82:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress =  (BitWidthType)_s_os_section_consts;
 8001d84:	4b43      	ldr	r3, [pc, #268]	; (8001e94 <CIL_memoryProtection_init+0x1e8>)
 8001d86:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8001d88:	4a43      	ldr	r2, [pc, #268]	; (8001e98 <CIL_memoryProtection_init+0x1ec>)
 8001d8a:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <CIL_memoryProtection_init+0x1e8>)
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 1;
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 2;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 4;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 8;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 16;
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	4a35      	ldr	r2, [pc, #212]	; (8001e9c <CIL_memoryProtection_init+0x1f0>)
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	0edb      	lsrs	r3, r3, #27
 8001dcc:	4a34      	ldr	r2, [pc, #208]	; (8001ea0 <CIL_memoryProtection_init+0x1f4>)
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	613b      	str	r3, [r7, #16]
    return (result-1);
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8001de4:	2306      	movs	r3, #6
 8001de6:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001de8:	2301      	movs	r3, #1
 8001dea:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001dec:	2301      	movs	r3, #1
 8001dee:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001df4:	2301      	movs	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f001 fce4 	bl	80037c8 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001e04:	2303      	movs	r3, #3
 8001e06:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_os_section_vars;
 8001e08:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <CIL_memoryProtection_init+0x1f8>)
 8001e0a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <CIL_memoryProtection_init+0x1fc>)
 8001e0e:	4b25      	ldr	r3, [pc, #148]	; (8001ea4 <CIL_memoryProtection_init+0x1f8>)
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	69fa      	ldr	r2, [r7, #28]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	091b      	lsrs	r3, r3, #4
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	0c1b      	lsrs	r3, r3, #16
 8001e40:	69fa      	ldr	r2, [r7, #28]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <CIL_memoryProtection_init+0x1f0>)
 8001e4a:	fb02 f303 	mul.w	r3, r2, r3
 8001e4e:	0edb      	lsrs	r3, r3, #27
 8001e50:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <CIL_memoryProtection_init+0x1f4>)
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001e60:	2300      	movs	r3, #0
 8001e62:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001e64:	2301      	movs	r3, #1
 8001e66:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001e70:	2301      	movs	r3, #1
 8001e72:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001e74:	2301      	movs	r3, #1
 8001e76:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f001 fca2 	bl	80037c8 <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8001e84:	2006      	movs	r0, #6
 8001e86:	f001 fc81 	bl	800378c <HAL_MPU_Enable>

}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	; 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	38000000 	.word	0x38000000
 8001e98:	38000800 	.word	0x38000800
 8001e9c:	07c4acdd 	.word	0x07c4acdd
 8001ea0:	08009584 	.word	0x08009584
 8001ea4:	38008000 	.word	0x38008000
 8001ea8:	38008200 	.word	0x38008200

08001eac <CIL_memoryProtection_setStackOverflowProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_memoryProtection_setStackOverflowProtection(AddressType stackLowAddress, AddressType stackHighAddress)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001eb6:	f107 0308 	add.w	r3, r7, #8
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	605a      	str	r2, [r3, #4]
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8001ec4:	f001 fc4c 	bl	8003760 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 8001ecc:	2307      	movs	r3, #7
 8001ece:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (stackLowAddress);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	085b      	lsrs	r3, r3, #1
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	089b      	lsrs	r3, r3, #2
 8001eea:	69fa      	ldr	r2, [r7, #28]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	0c1b      	lsrs	r3, r3, #16
 8001f08:	69fa      	ldr	r2, [r7, #28]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <CIL_memoryProtection_setStackOverflowProtection+0xb0>)
 8001f12:	fb02 f303 	mul.w	r3, r2, r3
 8001f16:	0edb      	lsrs	r3, r3, #27
 8001f18:	4a11      	ldr	r2, [pc, #68]	; (8001f60 <CIL_memoryProtection_setStackOverflowProtection+0xb4>)
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001f30:	2303      	movs	r3, #3
 8001f32:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001f40:	2301      	movs	r3, #1
 8001f42:	75fb      	strb	r3, [r7, #23]
  
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f001 fc3d 	bl	80037c8 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8001f4e:	2006      	movs	r0, #6
 8001f50:	f001 fc1c 	bl	800378c <HAL_MPU_Enable>
}
 8001f54:	bf00      	nop
 8001f56:	3720      	adds	r7, #32
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	07c4acdd 	.word	0x07c4acdd
 8001f60:	08009584 	.word	0x08009584

08001f64 <CIL_memoryProtection_setProgramMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_memoryProtection_setProgramMemoryProtection(AddressType lowAddress, AddressType highAddress)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8001f7c:	f001 fbf0 	bl	8003760 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 8001f84:	2306      	movs	r3, #6
 8001f86:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( highAddress - lowAddress ));
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	085b      	lsrs	r3, r3, #1
 8001f98:	69fa      	ldr	r2, [r7, #28]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	0c1b      	lsrs	r3, r3, #16
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4a12      	ldr	r2, [pc, #72]	; (8002014 <CIL_memoryProtection_setProgramMemoryProtection+0xb0>)
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	0edb      	lsrs	r3, r3, #27
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <CIL_memoryProtection_setProgramMemoryProtection+0xb4>)
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( highAddress - lowAddress ));
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	75fb      	strb	r3, [r7, #23]
  
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	4618      	mov	r0, r3
 8002002:	f001 fbe1 	bl	80037c8 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8002006:	2006      	movs	r0, #6
 8002008:	f001 fbc0 	bl	800378c <HAL_MPU_Enable>
}
 800200c:	bf00      	nop
 800200e:	3720      	adds	r7, #32
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	07c4acdd 	.word	0x07c4acdd
 8002018:	08009584 	.word	0x08009584

0800201c <CIL_stack_stackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType CIL_stack_stackInit(AddressType stackLowAddress, AddressType stackHighAddress, AddressType handlerAddress)
{
 800201c:	b480      	push	{r7}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
    CosmOS_StackType *stack = ( CosmOS_StackType* )( stackHighAddress - (AddressType)sizeof(CosmOS_StackType) );
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	3b40      	subs	r3, #64	; 0x40
 800202c:	617b      	str	r3, [r7, #20]

    stack->XPSR  = 0x01000000;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002034:	63da      	str	r2, [r3, #60]	; 0x3c
    stack->PC    = handlerAddress;
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	639a      	str	r2, [r3, #56]	; 0x38
    stack->LR    = 0xFFFFFFFD;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f06f 0202 	mvn.w	r2, #2
 8002042:	635a      	str	r2, [r3, #52]	; 0x34
    stack->R12   = 0;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
    stack->R3    = 0;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2200      	movs	r2, #0
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
    stack->R2    = 0;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2200      	movs	r2, #0
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
    stack->R1    = 0;
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2200      	movs	r2, #0
 800205a:	625a      	str	r2, [r3, #36]	; 0x24
    stack->R0    = 0;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2200      	movs	r2, #0
 8002060:	621a      	str	r2, [r3, #32]
    stack->R14   = 0xFFFFFFFD;
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f06f 0202 	mvn.w	r2, #2
 8002068:	61da      	str	r2, [r3, #28]
    stack->R11   = 0;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
    stack->R10   = 0;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
    stack->R8    = 0;
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
    stack->R7    = 0;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
    stack->R6    = 0;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
    stack->R5    = 0;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
    stack->R4    = 0;
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

    return (StackPointerType)(&(stack->R4));
 8002094:	697b      	ldr	r3, [r7, #20]
}
 8002096:	4618      	mov	r0, r3
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <CIL_stack_setStackPointer>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION __NAKED void CIL_stack_setStackPointer(AddressType address)
{
    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 80020a2:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
	  __asm volatile ("MSR PSP,R0");
 80020a6:	f380 8809 	msr	PSP, r0
    __asm volatile ("MOV R0, #0x3");
 80020aa:	f04f 0003 	mov.w	r0, #3
    __asm volatile ("MSR CONTROL, R0");
 80020ae:	f380 8814 	msr	CONTROL, r0
    __asm volatile ("ISB");
 80020b2:	f3bf 8f6f 	isb	sy
    __asm volatile ("BX R14");
 80020b6:	4770      	bx	lr
}
 80020b8:	bf00      	nop

080020ba <CIL_sysCalls_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_sysCalls_dispatcher(BitWidthType *sp)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b08e      	sub	sp, #56	; 0x38
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
    CosmOS_GenericVoidType sysCall;
    CosmOS_OsVariableType * osVar;
    CosmOS_RoutesConfigurationType * routeVar;

  
    uint8_t *pc = (uint8_t*)(sp[6]);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3318      	adds	r3, #24
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
    
    pc-=2;
 80020ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020cc:	3b02      	subs	r3, #2
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30

    osVar = os_getOsVar();
 80020d0:	f7ff f8d0 	bl	8001274 <os_getOsVar>
 80020d4:	62f8      	str	r0, [r7, #44]	; 0x2c

    uint8_t sysCallId = *pc;
 80020d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80020de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e0:	60bb      	str	r3, [r7, #8]
    return (CosmOS_RoutesConfigurationType *)(osVar->cfg->route);
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]

    routeVar = os_getOsRoutes( osVar );
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24

    sysCall = route_getRoutesFunc( routeVar, sp[0] );
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f0:	613a      	str	r2, [r7, #16]
 80020f2:	60fb      	str	r3, [r7, #12]
  * 
  * @return CosmOS_GenericVoidType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_GenericVoidType route_getRoutesFunc(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (CosmOS_GenericVoidType)(route->routeFunc[route->routeIdToFunc[callId]]);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	623b      	str	r3, [r7, #32]
    entityId = route_getRoutesEntityId( routeVar, sp[0] );
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	61ba      	str	r2, [r7, #24]
 8002114:	617b      	str	r3, [r7, #20]
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType route_getRoutesEntityId(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (route->routeIdToEntity[callId]);
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	61fb      	str	r3, [r7, #28]

    switch ( sysCallId )
 8002124:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002128:	2b01      	cmp	r3, #1
 800212a:	d007      	beq.n	800213c <CIL_sysCalls_dispatcher+0x82>
 800212c:	2b02      	cmp	r3, #2
 800212e:	d011      	beq.n	8002154 <CIL_sysCalls_dispatcher+0x9a>
 8002130:	2b00      	cmp	r3, #0
 8002132:	d000      	beq.n	8002136 <CIL_sysCalls_dispatcher+0x7c>
        }

        default :
        {
            /* PANIC */
            break;
 8002134:	e00f      	b.n	8002156 <CIL_sysCalls_dispatcher+0x9c>
            sysCall();
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	4798      	blx	r3
            break;
 800213a:	e00c      	b.n	8002156 <CIL_sysCalls_dispatcher+0x9c>
            returnValue = ((CosmOS_GenericBitWidthRWType)sysCall)(entityId, (void *)sp[1], sp[2]);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3304      	adds	r3, #4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3308      	adds	r3, #8
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	69f8      	ldr	r0, [r7, #28]
 800214e:	4798      	blx	r3
 8002150:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8002152:	e000      	b.n	8002156 <CIL_sysCalls_dispatcher+0x9c>
            break;
 8002154:	bf00      	nop
        }
    }

    sp[0] = returnValue;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	3738      	adds	r7, #56	; 0x38
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <CIL_sysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_sysCalls_os(BitWidthType id)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    __asm volatile("SVC #0");
 800216c:	df00      	svc	0
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <CIL_sysCalls_readWrite>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CIL_sysCalls_readWrite(BitWidthType id, void * entity, BitWidthType num)
{
 800217a:	b480      	push	{r7}
 800217c:	b087      	sub	sp, #28
 800217e:	af00      	add	r7, sp, #0
 8002180:	60f8      	str	r0, [r7, #12]
 8002182:	60b9      	str	r1, [r7, #8]
 8002184:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #1");
 8002186:	df01      	svc	1
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8002188:	4603      	mov	r3, r0
 800218a:	617b      	str	r3, [r7, #20]

    return returnValue;
 800218c:	697b      	ldr	r3, [r7, #20]
}
 800218e:	4618      	mov	r0, r3
 8002190:	371c      	adds	r7, #28
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <CIL_sysTimer_setTicks>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_sysTimer_setTicks(BitWidthType ticks, CosmOS_SchedulerSyncStateType schedulersSyncState)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
    if( schedulersSyncState IS_NOT_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC ) 
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 80021ac:	d010      	beq.n	80021d0 <CIL_sysTimer_setTicks+0x34>
    {
        BitWidthType delay;
        delay = SysTick->LOAD - SysTick->VAL;
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <CIL_sysTimer_setTicks+0x5c>)
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <CIL_sysTimer_setTicks+0x5c>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	60fb      	str	r3, [r7, #12]
        
        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)-delay) - 1UL);         /* set reload register */
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f242 7210 	movw	r2, #10000	; 0x2710
 80021c0:	fb02 f203 	mul.w	r2, r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <CIL_sysTimer_setTicks+0x5c>)
 80021ca:	3b01      	subs	r3, #1
 80021cc:	6053      	str	r3, [r2, #4]
 80021ce:	e007      	b.n	80021e0 <CIL_sysTimer_setTicks+0x44>
    }
    else
    {
        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)) - 1UL);               /* set reload register */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80021d6:	fb02 f303 	mul.w	r3, r2, r3
 80021da:	4a07      	ldr	r2, [pc, #28]	; (80021f8 <CIL_sysTimer_setTicks+0x5c>)
 80021dc:	3b01      	subs	r3, #1
 80021de:	6053      	str	r3, [r2, #4]
    }

    SysTick->VAL   = 0UL;                                                     /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <CIL_sysTimer_setTicks+0x5c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <CIL_sysTimer_setTicks+0x5c>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                                   /* Enable SysTick IRQ and SysTick Timer */
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000e010 	.word	0xe000e010

080021fc <CIL_uart_sysJob>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_uart_sysJob()
{    
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

    //TX SIDE
    //check where is DMA and switch it if its buffer is empty
    //check if user is in red zone, if yes check if DMA is on the same buffer, then switch to the other
    //HAL_UART_Receive_DMA()
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

Disassembly of section .text:

0800220c <__do_global_dtors_aux>:
 800220c:	b510      	push	{r4, lr}
 800220e:	4c05      	ldr	r4, [pc, #20]	; (8002224 <__do_global_dtors_aux+0x18>)
 8002210:	7823      	ldrb	r3, [r4, #0]
 8002212:	b933      	cbnz	r3, 8002222 <__do_global_dtors_aux+0x16>
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <__do_global_dtors_aux+0x1c>)
 8002216:	b113      	cbz	r3, 800221e <__do_global_dtors_aux+0x12>
 8002218:	4804      	ldr	r0, [pc, #16]	; (800222c <__do_global_dtors_aux+0x20>)
 800221a:	f3af 8000 	nop.w
 800221e:	2301      	movs	r3, #1
 8002220:	7023      	strb	r3, [r4, #0]
 8002222:	bd10      	pop	{r4, pc}
 8002224:	200008d0 	.word	0x200008d0
 8002228:	00000000 	.word	0x00000000
 800222c:	080094f4 	.word	0x080094f4

08002230 <frame_dummy>:
 8002230:	b508      	push	{r3, lr}
 8002232:	4b03      	ldr	r3, [pc, #12]	; (8002240 <frame_dummy+0x10>)
 8002234:	b11b      	cbz	r3, 800223e <frame_dummy+0xe>
 8002236:	4903      	ldr	r1, [pc, #12]	; (8002244 <frame_dummy+0x14>)
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <frame_dummy+0x18>)
 800223a:	f3af 8000 	nop.w
 800223e:	bd08      	pop	{r3, pc}
 8002240:	00000000 	.word	0x00000000
 8002244:	200008d4 	.word	0x200008d4
 8002248:	080094f4 	.word	0x080094f4

0800224c <__aeabi_uldivmod>:
 800224c:	b953      	cbnz	r3, 8002264 <__aeabi_uldivmod+0x18>
 800224e:	b94a      	cbnz	r2, 8002264 <__aeabi_uldivmod+0x18>
 8002250:	2900      	cmp	r1, #0
 8002252:	bf08      	it	eq
 8002254:	2800      	cmpeq	r0, #0
 8002256:	bf1c      	itt	ne
 8002258:	f04f 31ff 	movne.w	r1, #4294967295
 800225c:	f04f 30ff 	movne.w	r0, #4294967295
 8002260:	f000 b972 	b.w	8002548 <__aeabi_idiv0>
 8002264:	f1ad 0c08 	sub.w	ip, sp, #8
 8002268:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800226c:	f000 f806 	bl	800227c <__udivmoddi4>
 8002270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002274:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002278:	b004      	add	sp, #16
 800227a:	4770      	bx	lr

0800227c <__udivmoddi4>:
 800227c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002280:	9e08      	ldr	r6, [sp, #32]
 8002282:	4604      	mov	r4, r0
 8002284:	4688      	mov	r8, r1
 8002286:	2b00      	cmp	r3, #0
 8002288:	d14b      	bne.n	8002322 <__udivmoddi4+0xa6>
 800228a:	428a      	cmp	r2, r1
 800228c:	4615      	mov	r5, r2
 800228e:	d967      	bls.n	8002360 <__udivmoddi4+0xe4>
 8002290:	fab2 f282 	clz	r2, r2
 8002294:	b14a      	cbz	r2, 80022aa <__udivmoddi4+0x2e>
 8002296:	f1c2 0720 	rsb	r7, r2, #32
 800229a:	fa01 f302 	lsl.w	r3, r1, r2
 800229e:	fa20 f707 	lsr.w	r7, r0, r7
 80022a2:	4095      	lsls	r5, r2
 80022a4:	ea47 0803 	orr.w	r8, r7, r3
 80022a8:	4094      	lsls	r4, r2
 80022aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80022ae:	0c23      	lsrs	r3, r4, #16
 80022b0:	fbb8 f7fe 	udiv	r7, r8, lr
 80022b4:	fa1f fc85 	uxth.w	ip, r5
 80022b8:	fb0e 8817 	mls	r8, lr, r7, r8
 80022bc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80022c0:	fb07 f10c 	mul.w	r1, r7, ip
 80022c4:	4299      	cmp	r1, r3
 80022c6:	d909      	bls.n	80022dc <__udivmoddi4+0x60>
 80022c8:	18eb      	adds	r3, r5, r3
 80022ca:	f107 30ff 	add.w	r0, r7, #4294967295
 80022ce:	f080 811b 	bcs.w	8002508 <__udivmoddi4+0x28c>
 80022d2:	4299      	cmp	r1, r3
 80022d4:	f240 8118 	bls.w	8002508 <__udivmoddi4+0x28c>
 80022d8:	3f02      	subs	r7, #2
 80022da:	442b      	add	r3, r5
 80022dc:	1a5b      	subs	r3, r3, r1
 80022de:	b2a4      	uxth	r4, r4
 80022e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80022e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80022e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80022ec:	fb00 fc0c 	mul.w	ip, r0, ip
 80022f0:	45a4      	cmp	ip, r4
 80022f2:	d909      	bls.n	8002308 <__udivmoddi4+0x8c>
 80022f4:	192c      	adds	r4, r5, r4
 80022f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80022fa:	f080 8107 	bcs.w	800250c <__udivmoddi4+0x290>
 80022fe:	45a4      	cmp	ip, r4
 8002300:	f240 8104 	bls.w	800250c <__udivmoddi4+0x290>
 8002304:	3802      	subs	r0, #2
 8002306:	442c      	add	r4, r5
 8002308:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800230c:	eba4 040c 	sub.w	r4, r4, ip
 8002310:	2700      	movs	r7, #0
 8002312:	b11e      	cbz	r6, 800231c <__udivmoddi4+0xa0>
 8002314:	40d4      	lsrs	r4, r2
 8002316:	2300      	movs	r3, #0
 8002318:	e9c6 4300 	strd	r4, r3, [r6]
 800231c:	4639      	mov	r1, r7
 800231e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002322:	428b      	cmp	r3, r1
 8002324:	d909      	bls.n	800233a <__udivmoddi4+0xbe>
 8002326:	2e00      	cmp	r6, #0
 8002328:	f000 80eb 	beq.w	8002502 <__udivmoddi4+0x286>
 800232c:	2700      	movs	r7, #0
 800232e:	e9c6 0100 	strd	r0, r1, [r6]
 8002332:	4638      	mov	r0, r7
 8002334:	4639      	mov	r1, r7
 8002336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800233a:	fab3 f783 	clz	r7, r3
 800233e:	2f00      	cmp	r7, #0
 8002340:	d147      	bne.n	80023d2 <__udivmoddi4+0x156>
 8002342:	428b      	cmp	r3, r1
 8002344:	d302      	bcc.n	800234c <__udivmoddi4+0xd0>
 8002346:	4282      	cmp	r2, r0
 8002348:	f200 80fa 	bhi.w	8002540 <__udivmoddi4+0x2c4>
 800234c:	1a84      	subs	r4, r0, r2
 800234e:	eb61 0303 	sbc.w	r3, r1, r3
 8002352:	2001      	movs	r0, #1
 8002354:	4698      	mov	r8, r3
 8002356:	2e00      	cmp	r6, #0
 8002358:	d0e0      	beq.n	800231c <__udivmoddi4+0xa0>
 800235a:	e9c6 4800 	strd	r4, r8, [r6]
 800235e:	e7dd      	b.n	800231c <__udivmoddi4+0xa0>
 8002360:	b902      	cbnz	r2, 8002364 <__udivmoddi4+0xe8>
 8002362:	deff      	udf	#255	; 0xff
 8002364:	fab2 f282 	clz	r2, r2
 8002368:	2a00      	cmp	r2, #0
 800236a:	f040 808f 	bne.w	800248c <__udivmoddi4+0x210>
 800236e:	1b49      	subs	r1, r1, r5
 8002370:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8002374:	fa1f f885 	uxth.w	r8, r5
 8002378:	2701      	movs	r7, #1
 800237a:	fbb1 fcfe 	udiv	ip, r1, lr
 800237e:	0c23      	lsrs	r3, r4, #16
 8002380:	fb0e 111c 	mls	r1, lr, ip, r1
 8002384:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002388:	fb08 f10c 	mul.w	r1, r8, ip
 800238c:	4299      	cmp	r1, r3
 800238e:	d907      	bls.n	80023a0 <__udivmoddi4+0x124>
 8002390:	18eb      	adds	r3, r5, r3
 8002392:	f10c 30ff 	add.w	r0, ip, #4294967295
 8002396:	d202      	bcs.n	800239e <__udivmoddi4+0x122>
 8002398:	4299      	cmp	r1, r3
 800239a:	f200 80cd 	bhi.w	8002538 <__udivmoddi4+0x2bc>
 800239e:	4684      	mov	ip, r0
 80023a0:	1a59      	subs	r1, r3, r1
 80023a2:	b2a3      	uxth	r3, r4
 80023a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80023a8:	fb0e 1410 	mls	r4, lr, r0, r1
 80023ac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80023b0:	fb08 f800 	mul.w	r8, r8, r0
 80023b4:	45a0      	cmp	r8, r4
 80023b6:	d907      	bls.n	80023c8 <__udivmoddi4+0x14c>
 80023b8:	192c      	adds	r4, r5, r4
 80023ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80023be:	d202      	bcs.n	80023c6 <__udivmoddi4+0x14a>
 80023c0:	45a0      	cmp	r8, r4
 80023c2:	f200 80b6 	bhi.w	8002532 <__udivmoddi4+0x2b6>
 80023c6:	4618      	mov	r0, r3
 80023c8:	eba4 0408 	sub.w	r4, r4, r8
 80023cc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80023d0:	e79f      	b.n	8002312 <__udivmoddi4+0x96>
 80023d2:	f1c7 0c20 	rsb	ip, r7, #32
 80023d6:	40bb      	lsls	r3, r7
 80023d8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80023dc:	ea4e 0e03 	orr.w	lr, lr, r3
 80023e0:	fa01 f407 	lsl.w	r4, r1, r7
 80023e4:	fa20 f50c 	lsr.w	r5, r0, ip
 80023e8:	fa21 f30c 	lsr.w	r3, r1, ip
 80023ec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80023f0:	4325      	orrs	r5, r4
 80023f2:	fbb3 f9f8 	udiv	r9, r3, r8
 80023f6:	0c2c      	lsrs	r4, r5, #16
 80023f8:	fb08 3319 	mls	r3, r8, r9, r3
 80023fc:	fa1f fa8e 	uxth.w	sl, lr
 8002400:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8002404:	fb09 f40a 	mul.w	r4, r9, sl
 8002408:	429c      	cmp	r4, r3
 800240a:	fa02 f207 	lsl.w	r2, r2, r7
 800240e:	fa00 f107 	lsl.w	r1, r0, r7
 8002412:	d90b      	bls.n	800242c <__udivmoddi4+0x1b0>
 8002414:	eb1e 0303 	adds.w	r3, lr, r3
 8002418:	f109 30ff 	add.w	r0, r9, #4294967295
 800241c:	f080 8087 	bcs.w	800252e <__udivmoddi4+0x2b2>
 8002420:	429c      	cmp	r4, r3
 8002422:	f240 8084 	bls.w	800252e <__udivmoddi4+0x2b2>
 8002426:	f1a9 0902 	sub.w	r9, r9, #2
 800242a:	4473      	add	r3, lr
 800242c:	1b1b      	subs	r3, r3, r4
 800242e:	b2ad      	uxth	r5, r5
 8002430:	fbb3 f0f8 	udiv	r0, r3, r8
 8002434:	fb08 3310 	mls	r3, r8, r0, r3
 8002438:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800243c:	fb00 fa0a 	mul.w	sl, r0, sl
 8002440:	45a2      	cmp	sl, r4
 8002442:	d908      	bls.n	8002456 <__udivmoddi4+0x1da>
 8002444:	eb1e 0404 	adds.w	r4, lr, r4
 8002448:	f100 33ff 	add.w	r3, r0, #4294967295
 800244c:	d26b      	bcs.n	8002526 <__udivmoddi4+0x2aa>
 800244e:	45a2      	cmp	sl, r4
 8002450:	d969      	bls.n	8002526 <__udivmoddi4+0x2aa>
 8002452:	3802      	subs	r0, #2
 8002454:	4474      	add	r4, lr
 8002456:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800245a:	fba0 8902 	umull	r8, r9, r0, r2
 800245e:	eba4 040a 	sub.w	r4, r4, sl
 8002462:	454c      	cmp	r4, r9
 8002464:	46c2      	mov	sl, r8
 8002466:	464b      	mov	r3, r9
 8002468:	d354      	bcc.n	8002514 <__udivmoddi4+0x298>
 800246a:	d051      	beq.n	8002510 <__udivmoddi4+0x294>
 800246c:	2e00      	cmp	r6, #0
 800246e:	d069      	beq.n	8002544 <__udivmoddi4+0x2c8>
 8002470:	ebb1 050a 	subs.w	r5, r1, sl
 8002474:	eb64 0403 	sbc.w	r4, r4, r3
 8002478:	fa04 fc0c 	lsl.w	ip, r4, ip
 800247c:	40fd      	lsrs	r5, r7
 800247e:	40fc      	lsrs	r4, r7
 8002480:	ea4c 0505 	orr.w	r5, ip, r5
 8002484:	e9c6 5400 	strd	r5, r4, [r6]
 8002488:	2700      	movs	r7, #0
 800248a:	e747      	b.n	800231c <__udivmoddi4+0xa0>
 800248c:	f1c2 0320 	rsb	r3, r2, #32
 8002490:	fa20 f703 	lsr.w	r7, r0, r3
 8002494:	4095      	lsls	r5, r2
 8002496:	fa01 f002 	lsl.w	r0, r1, r2
 800249a:	fa21 f303 	lsr.w	r3, r1, r3
 800249e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80024a2:	4338      	orrs	r0, r7
 80024a4:	0c01      	lsrs	r1, r0, #16
 80024a6:	fbb3 f7fe 	udiv	r7, r3, lr
 80024aa:	fa1f f885 	uxth.w	r8, r5
 80024ae:	fb0e 3317 	mls	r3, lr, r7, r3
 80024b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80024b6:	fb07 f308 	mul.w	r3, r7, r8
 80024ba:	428b      	cmp	r3, r1
 80024bc:	fa04 f402 	lsl.w	r4, r4, r2
 80024c0:	d907      	bls.n	80024d2 <__udivmoddi4+0x256>
 80024c2:	1869      	adds	r1, r5, r1
 80024c4:	f107 3cff 	add.w	ip, r7, #4294967295
 80024c8:	d22f      	bcs.n	800252a <__udivmoddi4+0x2ae>
 80024ca:	428b      	cmp	r3, r1
 80024cc:	d92d      	bls.n	800252a <__udivmoddi4+0x2ae>
 80024ce:	3f02      	subs	r7, #2
 80024d0:	4429      	add	r1, r5
 80024d2:	1acb      	subs	r3, r1, r3
 80024d4:	b281      	uxth	r1, r0
 80024d6:	fbb3 f0fe 	udiv	r0, r3, lr
 80024da:	fb0e 3310 	mls	r3, lr, r0, r3
 80024de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80024e2:	fb00 f308 	mul.w	r3, r0, r8
 80024e6:	428b      	cmp	r3, r1
 80024e8:	d907      	bls.n	80024fa <__udivmoddi4+0x27e>
 80024ea:	1869      	adds	r1, r5, r1
 80024ec:	f100 3cff 	add.w	ip, r0, #4294967295
 80024f0:	d217      	bcs.n	8002522 <__udivmoddi4+0x2a6>
 80024f2:	428b      	cmp	r3, r1
 80024f4:	d915      	bls.n	8002522 <__udivmoddi4+0x2a6>
 80024f6:	3802      	subs	r0, #2
 80024f8:	4429      	add	r1, r5
 80024fa:	1ac9      	subs	r1, r1, r3
 80024fc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8002500:	e73b      	b.n	800237a <__udivmoddi4+0xfe>
 8002502:	4637      	mov	r7, r6
 8002504:	4630      	mov	r0, r6
 8002506:	e709      	b.n	800231c <__udivmoddi4+0xa0>
 8002508:	4607      	mov	r7, r0
 800250a:	e6e7      	b.n	80022dc <__udivmoddi4+0x60>
 800250c:	4618      	mov	r0, r3
 800250e:	e6fb      	b.n	8002308 <__udivmoddi4+0x8c>
 8002510:	4541      	cmp	r1, r8
 8002512:	d2ab      	bcs.n	800246c <__udivmoddi4+0x1f0>
 8002514:	ebb8 0a02 	subs.w	sl, r8, r2
 8002518:	eb69 020e 	sbc.w	r2, r9, lr
 800251c:	3801      	subs	r0, #1
 800251e:	4613      	mov	r3, r2
 8002520:	e7a4      	b.n	800246c <__udivmoddi4+0x1f0>
 8002522:	4660      	mov	r0, ip
 8002524:	e7e9      	b.n	80024fa <__udivmoddi4+0x27e>
 8002526:	4618      	mov	r0, r3
 8002528:	e795      	b.n	8002456 <__udivmoddi4+0x1da>
 800252a:	4667      	mov	r7, ip
 800252c:	e7d1      	b.n	80024d2 <__udivmoddi4+0x256>
 800252e:	4681      	mov	r9, r0
 8002530:	e77c      	b.n	800242c <__udivmoddi4+0x1b0>
 8002532:	3802      	subs	r0, #2
 8002534:	442c      	add	r4, r5
 8002536:	e747      	b.n	80023c8 <__udivmoddi4+0x14c>
 8002538:	f1ac 0c02 	sub.w	ip, ip, #2
 800253c:	442b      	add	r3, r5
 800253e:	e72f      	b.n	80023a0 <__udivmoddi4+0x124>
 8002540:	4638      	mov	r0, r7
 8002542:	e708      	b.n	8002356 <__udivmoddi4+0xda>
 8002544:	4637      	mov	r7, r6
 8002546:	e6e9      	b.n	800231c <__udivmoddi4+0xa0>

08002548 <__aeabi_idiv0>:
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop

0800254c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002550:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <SystemInit+0x104>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	4a3e      	ldr	r2, [pc, #248]	; (8002650 <SystemInit+0x104>)
 8002558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800255c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8002560:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <SystemInit+0x104>)
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	4a3a      	ldr	r2, [pc, #232]	; (8002650 <SystemInit+0x104>)
 8002566:	f043 0310 	orr.w	r3, r3, #16
 800256a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800256c:	4b39      	ldr	r3, [pc, #228]	; (8002654 <SystemInit+0x108>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	2b06      	cmp	r3, #6
 8002576:	d807      	bhi.n	8002588 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002578:	4b36      	ldr	r3, [pc, #216]	; (8002654 <SystemInit+0x108>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 030f 	bic.w	r3, r3, #15
 8002580:	4a34      	ldr	r2, [pc, #208]	; (8002654 <SystemInit+0x108>)
 8002582:	f043 0307 	orr.w	r3, r3, #7
 8002586:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002588:	4b33      	ldr	r3, [pc, #204]	; (8002658 <SystemInit+0x10c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a32      	ldr	r2, [pc, #200]	; (8002658 <SystemInit+0x10c>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002594:	4b30      	ldr	r3, [pc, #192]	; (8002658 <SystemInit+0x10c>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800259a:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <SystemInit+0x10c>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	492e      	ldr	r1, [pc, #184]	; (8002658 <SystemInit+0x10c>)
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <SystemInit+0x110>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025a6:	4b2b      	ldr	r3, [pc, #172]	; (8002654 <SystemInit+0x108>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	2b07      	cmp	r3, #7
 80025b0:	d907      	bls.n	80025c2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025b2:	4b28      	ldr	r3, [pc, #160]	; (8002654 <SystemInit+0x108>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 030f 	bic.w	r3, r3, #15
 80025ba:	4a26      	ldr	r2, [pc, #152]	; (8002654 <SystemInit+0x108>)
 80025bc:	f043 0307 	orr.w	r3, r3, #7
 80025c0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80025c2:	4b25      	ldr	r3, [pc, #148]	; (8002658 <SystemInit+0x10c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80025c8:	4b23      	ldr	r3, [pc, #140]	; (8002658 <SystemInit+0x10c>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80025ce:	4b22      	ldr	r3, [pc, #136]	; (8002658 <SystemInit+0x10c>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <SystemInit+0x10c>)
 80025d6:	4a22      	ldr	r2, [pc, #136]	; (8002660 <SystemInit+0x114>)
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80025da:	4b1f      	ldr	r3, [pc, #124]	; (8002658 <SystemInit+0x10c>)
 80025dc:	4a21      	ldr	r2, [pc, #132]	; (8002664 <SystemInit+0x118>)
 80025de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <SystemInit+0x10c>)
 80025e2:	4a21      	ldr	r2, [pc, #132]	; (8002668 <SystemInit+0x11c>)
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80025e6:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <SystemInit+0x10c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <SystemInit+0x10c>)
 80025ee:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <SystemInit+0x11c>)
 80025f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80025f2:	4b19      	ldr	r3, [pc, #100]	; (8002658 <SystemInit+0x10c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <SystemInit+0x10c>)
 80025fa:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <SystemInit+0x11c>)
 80025fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80025fe:	4b16      	ldr	r3, [pc, #88]	; (8002658 <SystemInit+0x10c>)
 8002600:	2200      	movs	r2, #0
 8002602:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <SystemInit+0x10c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a13      	ldr	r2, [pc, #76]	; (8002658 <SystemInit+0x10c>)
 800260a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <SystemInit+0x10c>)
 8002612:	2200      	movs	r2, #0
 8002614:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8002616:	4b15      	ldr	r3, [pc, #84]	; (800266c <SystemInit+0x120>)
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	4a14      	ldr	r2, [pc, #80]	; (800266c <SystemInit+0x120>)
 800261c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002620:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002622:	4b13      	ldr	r3, [pc, #76]	; (8002670 <SystemInit+0x124>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b13      	ldr	r3, [pc, #76]	; (8002674 <SystemInit+0x128>)
 8002628:	4013      	ands	r3, r2
 800262a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800262e:	d202      	bcs.n	8002636 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002630:	4b11      	ldr	r3, [pc, #68]	; (8002678 <SystemInit+0x12c>)
 8002632:	2201      	movs	r2, #1
 8002634:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002636:	4b11      	ldr	r3, [pc, #68]	; (800267c <SystemInit+0x130>)
 8002638:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800263c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <SystemInit+0x104>)
 8002640:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002644:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00
 8002654:	52002000 	.word	0x52002000
 8002658:	58024400 	.word	0x58024400
 800265c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002660:	02020200 	.word	0x02020200
 8002664:	01ff0000 	.word	0x01ff0000
 8002668:	01010280 	.word	0x01010280
 800266c:	580000c0 	.word	0x580000c0
 8002670:	5c001000 	.word	0x5c001000
 8002674:	ffff0000 	.word	0xffff0000
 8002678:	51008108 	.word	0x51008108
 800267c:	52004000 	.word	0x52004000

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80026da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026de:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80026e0:	bf00      	nop
 80026e2:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <main+0xe0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <main+0x24>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	dcf4      	bgt.n	80026e2 <main+0xe>
  if ( timeout < 0 )
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	da01      	bge.n	8002702 <main+0x2e>
  {
  Error_Handler();
 80026fe:	f000 fad9 	bl	8002cb4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002702:	f000 feaf 	bl	8003464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002706:	f000 f857 	bl	80027b8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800270a:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <main+0xe0>)
 800270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002710:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <main+0xe0>)
 8002712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800271a:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <main+0xe0>)
 800271c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	603b      	str	r3, [r7, #0]
 8002726:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8002728:	2000      	movs	r0, #0
 800272a:	f002 fc37 	bl	8004f9c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800272e:	2100      	movs	r1, #0
 8002730:	2000      	movs	r0, #0
 8002732:	f002 fc4d 	bl	8004fd0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8002736:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800273a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800273c:	bf00      	nop
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <main+0xe0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d104      	bne.n	8002754 <main+0x80>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	dcf4      	bgt.n	800273e <main+0x6a>
if ( timeout < 0 )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	da01      	bge.n	800275e <main+0x8a>
{
Error_Handler();
 800275a:	f000 faab 	bl	8002cb4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800275e:	f000 f9e1 	bl	8002b24 <MX_GPIO_Init>
  MX_DMA_Init();
 8002762:	f000 f9b7 	bl	8002ad4 <MX_DMA_Init>
  MX_ETH_Init();
 8002766:	f000 f8e5 	bl	8002934 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800276a:	f000 f935 	bl	80029d8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800276e:	f000 f97f 	bl	8002a70 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  SET_BIT(RCC->D3AMR, RCC_D3AMR_SRAM4AMEN);
 8002772:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <main+0xe0>)
 8002774:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <main+0xe0>)
 800277a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800277e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	NVIC_SetPriority(SVCall_IRQn,3);
 8002782:	2103      	movs	r1, #3
 8002784:	f06f 0004 	mvn.w	r0, #4
 8002788:	f7ff ff7a 	bl	8002680 <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn,4);
 800278c:	2104      	movs	r1, #4
 800278e:	f06f 0001 	mvn.w	r0, #1
 8002792:	f7ff ff75 	bl	8002680 <__NVIC_SetPriority>
  NVIC_SetPriority (SysTick_IRQn, 0);         /* set Priority for Systick Interrupt */
 8002796:	2100      	movs	r1, #0
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	f7ff ff70 	bl	8002680 <__NVIC_SetPriority>
    cosmosApi_boot();
 80027a0:	f000 fd8c 	bl	80032bc <osBoot_boot>
	cosmosApi_osInit_init();
 80027a4:	2005      	movs	r0, #5
 80027a6:	f7ff f9a2 	bl	8001aee <sysCalls_os>
	cosmosApi_os_start();
 80027aa:	2006      	movs	r0, #6
 80027ac:	f7ff f99f 	bl	8001aee <sysCalls_os>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <main+0xdc>
 80027b2:	bf00      	nop
 80027b4:	58024400 	.word	0x58024400

080027b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b0cc      	sub	sp, #304	; 0x130
 80027bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027c2:	224c      	movs	r2, #76	; 0x4c
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f006 fe8c 	bl	80094e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80027d0:	2220      	movs	r2, #32
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f006 fe85 	bl	80094e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	4618      	mov	r0, r3
 80027e0:	23bc      	movs	r3, #188	; 0xbc
 80027e2:	461a      	mov	r2, r3
 80027e4:	2100      	movs	r1, #0
 80027e6:	f006 fe7d 	bl	80094e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80027ea:	2004      	movs	r0, #4
 80027ec:	f002 fd4c 	bl	8005288 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	4b4c      	ldr	r3, [pc, #304]	; (8002928 <SystemClock_Config+0x170>)
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	4a4b      	ldr	r2, [pc, #300]	; (8002928 <SystemClock_Config+0x170>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002802:	4b49      	ldr	r3, [pc, #292]	; (8002928 <SystemClock_Config+0x170>)
 8002804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002806:	f003 0201 	and.w	r2, r3, #1
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	4b47      	ldr	r3, [pc, #284]	; (800292c <SystemClock_Config+0x174>)
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002816:	4a45      	ldr	r2, [pc, #276]	; (800292c <SystemClock_Config+0x174>)
 8002818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281c:	6193      	str	r3, [r2, #24]
 800281e:	4b43      	ldr	r3, [pc, #268]	; (800292c <SystemClock_Config+0x174>)
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	1d3b      	adds	r3, r7, #4
 800282c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800282e:	bf00      	nop
 8002830:	4b3e      	ldr	r3, [pc, #248]	; (800292c <SystemClock_Config+0x174>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283c:	d1f8      	bne.n	8002830 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800283e:	2321      	movs	r3, #33	; 0x21
 8002840:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002844:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002848:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800284c:	2301      	movs	r3, #1
 800284e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002852:	2302      	movs	r3, #2
 8002854:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002858:	2302      	movs	r3, #2
 800285a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800285e:	2301      	movs	r3, #1
 8002860:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 25;
 8002864:	2319      	movs	r3, #25
 8002866:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800286a:	2302      	movs	r3, #2
 800286c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002870:	2304      	movs	r3, #4
 8002872:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002876:	2302      	movs	r3, #2
 8002878:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800287c:	230c      	movs	r3, #12
 800287e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800288e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002892:	4618      	mov	r0, r3
 8002894:	f002 fd62 	bl	800535c <HAL_RCC_OscConfig>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800289e:	f000 fa09 	bl	8002cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a2:	233f      	movs	r3, #63	; 0x3f
 80028a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a8:	2303      	movs	r3, #3
 80028aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80028d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80028d6:	2101      	movs	r1, #1
 80028d8:	4618      	mov	r0, r3
 80028da:	f003 f94f 	bl	8005b7c <HAL_RCC_ClockConfig>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <SystemClock_Config+0x130>
  {
    Error_Handler();
 80028e4:	f000 f9e6 	bl	8002cb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80028e8:	f107 0308 	add.w	r3, r7, #8
 80028ec:	4a10      	ldr	r2, [pc, #64]	; (8002930 <SystemClock_Config+0x178>)
 80028ee:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028f0:	f107 0308 	add.w	r3, r7, #8
 80028f4:	2200      	movs	r2, #0
 80028f6:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80028f8:	f107 0308 	add.w	r3, r7, #8
 80028fc:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002904:	f107 0308 	add.w	r3, r7, #8
 8002908:	4618      	mov	r0, r3
 800290a:	f003 fcfd 	bl	8006308 <HAL_RCCEx_PeriphCLKConfig>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d001      	beq.n	8002918 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8002914:	f000 f9ce 	bl	8002cb4 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8002918:	f002 fd10 	bl	800533c <HAL_PWREx_EnableUSBVoltageDetector>
}
 800291c:	bf00      	nop
 800291e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	58000400 	.word	0x58000400
 800292c:	58024800 	.word	0x58024800
 8002930:	00040002 	.word	0x00040002

08002934 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <MX_ETH_Init+0x90>)
 800293a:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <MX_ETH_Init+0x94>)
 800293c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <MX_ETH_Init+0x90>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <MX_ETH_Init+0x90>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	3301      	adds	r3, #1
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8002950:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <MX_ETH_Init+0x90>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	3302      	adds	r3, #2
 8002956:	22e1      	movs	r2, #225	; 0xe1
 8002958:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800295a:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <MX_ETH_Init+0x90>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	3303      	adds	r3, #3
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <MX_ETH_Init+0x90>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	3304      	adds	r3, #4
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <MX_ETH_Init+0x90>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	3305      	adds	r3, #5
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002978:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <MX_ETH_Init+0x90>)
 800297a:	2201      	movs	r2, #1
 800297c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800297e:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <MX_ETH_Init+0x90>)
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <MX_ETH_Init+0x98>)
 8002982:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <MX_ETH_Init+0x90>)
 8002986:	4a12      	ldr	r2, [pc, #72]	; (80029d0 <MX_ETH_Init+0x9c>)
 8002988:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_ETH_Init+0x90>)
 800298c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002990:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002992:	480c      	ldr	r0, [pc, #48]	; (80029c4 <MX_ETH_Init+0x90>)
 8002994:	f001 fd08 	bl	80043a8 <HAL_ETH_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 800299e:	f000 f989 	bl	8002cb4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80029a2:	2234      	movs	r2, #52	; 0x34
 80029a4:	2100      	movs	r1, #0
 80029a6:	480b      	ldr	r0, [pc, #44]	; (80029d4 <MX_ETH_Init+0xa0>)
 80029a8:	f006 fd9c 	bl	80094e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80029ac:	4b09      	ldr	r3, [pc, #36]	; (80029d4 <MX_ETH_Init+0xa0>)
 80029ae:	2221      	movs	r2, #33	; 0x21
 80029b0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <MX_ETH_Init+0xa0>)
 80029b4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029b8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80029ba:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <MX_ETH_Init+0xa0>)
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000e70 	.word	0x20000e70
 80029c8:	40028000 	.word	0x40028000
 80029cc:	20000870 	.word	0x20000870
 80029d0:	20000810 	.word	0x20000810
 80029d4:	20000ee0 	.word	0x20000ee0

080029d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029dc:	4b22      	ldr	r3, [pc, #136]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 80029de:	4a23      	ldr	r2, [pc, #140]	; (8002a6c <MX_USART3_UART_Init+0x94>)
 80029e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 80029e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ea:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029f0:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 80029fe:	220c      	movs	r2, #12
 8002a00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a08:	4b17      	ldr	r3, [pc, #92]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a0e:	4b16      	ldr	r3, [pc, #88]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a20:	4811      	ldr	r0, [pc, #68]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 8002a22:	f005 fa09 	bl	8007e38 <HAL_UART_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002a2c:	f000 f942 	bl	8002cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a30:	2100      	movs	r1, #0
 8002a32:	480d      	ldr	r0, [pc, #52]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 8002a34:	f006 f9a3 	bl	8008d7e <HAL_UARTEx_SetTxFifoThreshold>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002a3e:	f000 f939 	bl	8002cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a42:	2100      	movs	r1, #0
 8002a44:	4808      	ldr	r0, [pc, #32]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 8002a46:	f006 f9d8 	bl	8008dfa <HAL_UARTEx_SetRxFifoThreshold>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002a50:	f000 f930 	bl	8002cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002a54:	4804      	ldr	r0, [pc, #16]	; (8002a68 <MX_USART3_UART_Init+0x90>)
 8002a56:	f006 f959 	bl	8008d0c <HAL_UARTEx_DisableFifoMode>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002a60:	f000 f928 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a64:	bf00      	nop
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000964 	.word	0x20000964
 8002a6c:	40004800 	.word	0x40004800

08002a70 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a76:	4a16      	ldr	r2, [pc, #88]	; (8002ad0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002a78:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002a7a:	4b14      	ldr	r3, [pc, #80]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a7c:	2209      	movs	r2, #9
 8002a7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a82:	2202      	movs	r2, #2
 8002a84:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a8e:	2202      	movs	r2, #2
 8002a90:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002aa4:	4b09      	ldr	r3, [pc, #36]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002ab6:	4805      	ldr	r0, [pc, #20]	; (8002acc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002ab8:	f002 fa9e 	bl	8004ff8 <HAL_PCD_Init>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002ac2:	f000 f8f7 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200009f0 	.word	0x200009f0
 8002ad0:	40080000 	.word	0x40080000

08002ad4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <MX_DMA_Init+0x4c>)
 8002adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <MX_DMA_Init+0x4c>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <MX_DMA_Init+0x4c>)
 8002aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002af8:	2200      	movs	r2, #0
 8002afa:	2100      	movs	r1, #0
 8002afc:	200b      	movs	r0, #11
 8002afe:	f000 fe07 	bl	8003710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b02:	200b      	movs	r0, #11
 8002b04:	f000 fe1e 	bl	8003744 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002b08:	2200      	movs	r2, #0
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	200c      	movs	r0, #12
 8002b0e:	f000 fdff 	bl	8003710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002b12:	200c      	movs	r0, #12
 8002b14:	f000 fe16 	bl	8003744 <HAL_NVIC_EnableIRQ>

}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	58024400 	.word	0x58024400

08002b24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08e      	sub	sp, #56	; 0x38
 8002b28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b3a:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b40:	4a50      	ldr	r2, [pc, #320]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b42:	f043 0304 	orr.w	r3, r3, #4
 8002b46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b4a:	4b4e      	ldr	r3, [pc, #312]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b58:	4b4a      	ldr	r3, [pc, #296]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5e:	4a49      	ldr	r2, [pc, #292]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b68:	4b46      	ldr	r3, [pc, #280]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b76:	4b43      	ldr	r3, [pc, #268]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7c:	4a41      	ldr	r2, [pc, #260]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b7e:	f043 0301 	orr.w	r3, r3, #1
 8002b82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b86:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b94:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9a:	4a3a      	ldr	r2, [pc, #232]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002b9c:	f043 0320 	orr.w	r3, r3, #32
 8002ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ba4:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb2:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb8:	4a32      	ldr	r2, [pc, #200]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002bba:	f043 0302 	orr.w	r3, r3, #2
 8002bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	613b      	str	r3, [r7, #16]
 8002bce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd6:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002bd8:	f043 0308 	orr.w	r3, r3, #8
 8002bdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be0:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	60fb      	str	r3, [r7, #12]
 8002bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002bee:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf4:	4a23      	ldr	r2, [pc, #140]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bfe:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	60bb      	str	r3, [r7, #8]
 8002c0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c12:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002c14:	f043 0310 	orr.w	r3, r3, #16
 8002c18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <MX_GPIO_Init+0x160>)
 8002c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	607b      	str	r3, [r7, #4]
 8002c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002c30:	4815      	ldr	r0, [pc, #84]	; (8002c88 <MX_GPIO_Init+0x164>)
 8002c32:	f002 f97f 	bl	8004f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2102      	movs	r1, #2
 8002c3a:	4814      	ldr	r0, [pc, #80]	; (8002c8c <MX_GPIO_Init+0x168>)
 8002c3c:	f002 f97a 	bl	8004f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c46:	2301      	movs	r3, #1
 8002c48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c56:	4619      	mov	r1, r3
 8002c58:	480b      	ldr	r0, [pc, #44]	; (8002c88 <MX_GPIO_Init+0x164>)
 8002c5a:	f001 ffbb 	bl	8004bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c62:	2301      	movs	r3, #1
 8002c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c72:	4619      	mov	r1, r3
 8002c74:	4805      	ldr	r0, [pc, #20]	; (8002c8c <MX_GPIO_Init+0x168>)
 8002c76:	f001 ffad 	bl	8004bd4 <HAL_GPIO_Init>

}
 8002c7a:	bf00      	nop
 8002c7c:	3738      	adds	r7, #56	; 0x38
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	58024400 	.word	0x58024400
 8002c88:	58021400 	.word	0x58021400
 8002c8c:	58021000 	.word	0x58021000

08002c90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ca2:	f000 fc1b 	bl	80034dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40010000 	.word	0x40010000

08002cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cba:	e7fe      	b.n	8002cba <Error_Handler+0x6>

08002cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <HAL_MspInit+0x30>)
 8002cc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cc8:	4a08      	ldr	r2, [pc, #32]	; (8002cec <HAL_MspInit+0x30>)
 8002cca:	f043 0302 	orr.w	r3, r3, #2
 8002cce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002cd2:	4b06      	ldr	r3, [pc, #24]	; (8002cec <HAL_MspInit+0x30>)
 8002cd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	58024400 	.word	0x58024400

08002cf0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08e      	sub	sp, #56	; 0x38
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a59      	ldr	r2, [pc, #356]	; (8002e74 <HAL_ETH_MspInit+0x184>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	f040 80ab 	bne.w	8002e6a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002d14:	4b58      	ldr	r3, [pc, #352]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d1a:	4a57      	ldr	r2, [pc, #348]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d24:	4b54      	ldr	r3, [pc, #336]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d2e:	623b      	str	r3, [r7, #32]
 8002d30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002d32:	4b51      	ldr	r3, [pc, #324]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d38:	4a4f      	ldr	r2, [pc, #316]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d42:	4b4d      	ldr	r3, [pc, #308]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002d50:	4b49      	ldr	r3, [pc, #292]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d56:	4a48      	ldr	r2, [pc, #288]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d60:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6e:	4b42      	ldr	r3, [pc, #264]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d74:	4a40      	ldr	r2, [pc, #256]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d7e:	4b3e      	ldr	r3, [pc, #248]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d8c:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d92:	4a39      	ldr	r2, [pc, #228]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d9c:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002daa:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db0:	4a31      	ldr	r2, [pc, #196]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002db2:	f043 0302 	orr.w	r3, r3, #2
 8002db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dba:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dc8:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dce:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_ETH_MspInit+0x188>)
 8002dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002de6:	2332      	movs	r3, #50	; 0x32
 8002de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002df6:	230b      	movs	r3, #11
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dfe:	4619      	mov	r1, r3
 8002e00:	481e      	ldr	r0, [pc, #120]	; (8002e7c <HAL_ETH_MspInit+0x18c>)
 8002e02:	f001 fee7 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002e06:	2386      	movs	r3, #134	; 0x86
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e16:	230b      	movs	r3, #11
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4817      	ldr	r0, [pc, #92]	; (8002e80 <HAL_ETH_MspInit+0x190>)
 8002e22:	f001 fed7 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e38:	230b      	movs	r3, #11
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	4619      	mov	r1, r3
 8002e42:	4810      	ldr	r0, [pc, #64]	; (8002e84 <HAL_ETH_MspInit+0x194>)
 8002e44:	f001 fec6 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002e48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002e5a:	230b      	movs	r3, #11
 8002e5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e62:	4619      	mov	r1, r3
 8002e64:	4808      	ldr	r0, [pc, #32]	; (8002e88 <HAL_ETH_MspInit+0x198>)
 8002e66:	f001 feb5 	bl	8004bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002e6a:	bf00      	nop
 8002e6c:	3738      	adds	r7, #56	; 0x38
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40028000 	.word	0x40028000
 8002e78:	58024400 	.word	0x58024400
 8002e7c:	58020800 	.word	0x58020800
 8002e80:	58020000 	.word	0x58020000
 8002e84:	58020400 	.word	0x58020400
 8002e88:	58021800 	.word	0x58021800

08002e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 0314 	add.w	r3, r7, #20
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a48      	ldr	r2, [pc, #288]	; (8002fcc <HAL_UART_MspInit+0x140>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	f040 8089 	bne.w	8002fc2 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002eb0:	4b47      	ldr	r3, [pc, #284]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eb6:	4a46      	ldr	r2, [pc, #280]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ebc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ec0:	4b43      	ldr	r3, [pc, #268]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002ec2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ece:	4b40      	ldr	r3, [pc, #256]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed4:	4a3e      	ldr	r2, [pc, #248]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002ed6:	f043 0308 	orr.w	r3, r3, #8
 8002eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ede:	4b3c      	ldr	r3, [pc, #240]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	60fb      	str	r3, [r7, #12]
 8002eea:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002eec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002efe:	2307      	movs	r3, #7
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	4619      	mov	r1, r3
 8002f08:	4832      	ldr	r0, [pc, #200]	; (8002fd4 <HAL_UART_MspInit+0x148>)
 8002f0a:	f001 fe63 	bl	8004bd4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002f0e:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f10:	4a32      	ldr	r2, [pc, #200]	; (8002fdc <HAL_UART_MspInit+0x150>)
 8002f12:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002f14:	4b30      	ldr	r3, [pc, #192]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f16:	222d      	movs	r2, #45	; 0x2d
 8002f18:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f20:	4b2d      	ldr	r3, [pc, #180]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f26:	4b2c      	ldr	r3, [pc, #176]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f2c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f34:	4b28      	ldr	r3, [pc, #160]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002f3a:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f46:	4b24      	ldr	r3, [pc, #144]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002f4c:	4822      	ldr	r0, [pc, #136]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f4e:	f000 fc93 	bl	8003878 <HAL_DMA_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002f58:	f7ff feac 	bl	8002cb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f60:	679a      	str	r2, [r3, #120]	; 0x78
 8002f62:	4a1d      	ldr	r2, [pc, #116]	; (8002fd8 <HAL_UART_MspInit+0x14c>)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002f6a:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <HAL_UART_MspInit+0x158>)
 8002f6c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002f6e:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002f70:	222e      	movs	r2, #46	; 0x2e
 8002f72:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002f76:	2240      	movs	r2, #64	; 0x40
 8002f78:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f7a:	4b19      	ldr	r3, [pc, #100]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002f82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f86:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f88:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002fa6:	480e      	ldr	r0, [pc, #56]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002fa8:	f000 fc66 	bl	8003878 <HAL_DMA_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002fb2:	f7ff fe7f 	bl	8002cb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002fba:	675a      	str	r2, [r3, #116]	; 0x74
 8002fbc:	4a08      	ldr	r2, [pc, #32]	; (8002fe0 <HAL_UART_MspInit+0x154>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002fc2:	bf00      	nop
 8002fc4:	3728      	adds	r7, #40	; 0x28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40004800 	.word	0x40004800
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	58020c00 	.word	0x58020c00
 8002fd8:	200008ec 	.word	0x200008ec
 8002fdc:	40020010 	.word	0x40020010
 8002fe0:	20000df8 	.word	0x20000df8
 8002fe4:	40020028 	.word	0x40020028

08002fe8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a21      	ldr	r2, [pc, #132]	; (800308c <HAL_PCD_MspInit+0xa4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d13b      	bne.n	8003082 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800300a:	4b21      	ldr	r3, [pc, #132]	; (8003090 <HAL_PCD_MspInit+0xa8>)
 800300c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003010:	4a1f      	ldr	r2, [pc, #124]	; (8003090 <HAL_PCD_MspInit+0xa8>)
 8003012:	f043 0301 	orr.w	r3, r3, #1
 8003016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800301a:	4b1d      	ldr	r3, [pc, #116]	; (8003090 <HAL_PCD_MspInit+0xa8>)
 800301c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003028:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800302c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302e:	2302      	movs	r3, #2
 8003030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800303a:	230a      	movs	r3, #10
 800303c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800303e:	f107 0314 	add.w	r3, r7, #20
 8003042:	4619      	mov	r1, r3
 8003044:	4813      	ldr	r0, [pc, #76]	; (8003094 <HAL_PCD_MspInit+0xac>)
 8003046:	f001 fdc5 	bl	8004bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800304a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800304e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4619      	mov	r1, r3
 800305e:	480d      	ldr	r0, [pc, #52]	; (8003094 <HAL_PCD_MspInit+0xac>)
 8003060:	f001 fdb8 	bl	8004bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_PCD_MspInit+0xa8>)
 8003066:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800306a:	4a09      	ldr	r2, [pc, #36]	; (8003090 <HAL_PCD_MspInit+0xa8>)
 800306c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003070:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003074:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_PCD_MspInit+0xa8>)
 8003076:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800307a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003082:	bf00      	nop
 8003084:	3728      	adds	r7, #40	; 0x28
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40080000 	.word	0x40080000
 8003090:	58024400 	.word	0x58024400
 8003094:	58020000 	.word	0x58020000

08003098 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08e      	sub	sp, #56	; 0x38
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	d842      	bhi.n	800312c <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80030a6:	2200      	movs	r2, #0
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	2019      	movs	r0, #25
 80030ac:	f000 fb30 	bl	8003710 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80030b0:	2019      	movs	r0, #25
 80030b2:	f000 fb47 	bl	8003744 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80030b6:	4a23      	ldr	r2, [pc, #140]	; (8003144 <HAL_InitTick+0xac>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80030bc:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_InitTick+0xb0>)
 80030be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030c2:	4a21      	ldr	r2, [pc, #132]	; (8003148 <HAL_InitTick+0xb0>)
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80030cc:	4b1e      	ldr	r3, [pc, #120]	; (8003148 <HAL_InitTick+0xb0>)
 80030ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030da:	f107 020c 	add.w	r2, r7, #12
 80030de:	f107 0310 	add.w	r3, r7, #16
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f003 f8cd 	bl	8006284 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80030ea:	f003 f8b5 	bl	8006258 <HAL_RCC_GetPCLK2Freq>
 80030ee:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80030f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f2:	4a16      	ldr	r2, [pc, #88]	; (800314c <HAL_InitTick+0xb4>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	0c9b      	lsrs	r3, r3, #18
 80030fa:	3b01      	subs	r3, #1
 80030fc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_InitTick+0xb8>)
 8003100:	4a14      	ldr	r2, [pc, #80]	; (8003154 <HAL_InitTick+0xbc>)
 8003102:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <HAL_InitTick+0xb8>)
 8003106:	f240 32e7 	movw	r2, #999	; 0x3e7
 800310a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800310c:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_InitTick+0xb8>)
 800310e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003110:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003112:	4b0f      	ldr	r3, [pc, #60]	; (8003150 <HAL_InitTick+0xb8>)
 8003114:	2200      	movs	r2, #0
 8003116:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003118:	4b0d      	ldr	r3, [pc, #52]	; (8003150 <HAL_InitTick+0xb8>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800311e:	480c      	ldr	r0, [pc, #48]	; (8003150 <HAL_InitTick+0xb8>)
 8003120:	f004 fbf2 	bl	8007908 <HAL_TIM_Base_Init>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d107      	bne.n	800313a <HAL_InitTick+0xa2>
 800312a:	e001      	b.n	8003130 <HAL_InitTick+0x98>
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e005      	b.n	800313c <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003130:	4807      	ldr	r0, [pc, #28]	; (8003150 <HAL_InitTick+0xb8>)
 8003132:	f004 fc4b 	bl	80079cc <HAL_TIM_Base_Start_IT>
 8003136:	4603      	mov	r3, r0
 8003138:	e000      	b.n	800313c <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
}
 800313c:	4618      	mov	r0, r3
 800313e:	3738      	adds	r7, #56	; 0x38
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	20000808 	.word	0x20000808
 8003148:	58024400 	.word	0x58024400
 800314c:	431bde83 	.word	0x431bde83
 8003150:	20000f14 	.word	0x20000f14
 8003154:	40010000 	.word	0x40010000

08003158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800315c:	e7fe      	b.n	800315c <NMI_Handler+0x4>

0800315e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800315e:	b480      	push	{r7}
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003162:	e7fe      	b.n	8003162 <HardFault_Handler+0x4>

08003164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003168:	e7fe      	b.n	8003168 <MemManage_Handler+0x4>

0800316a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800316a:	b480      	push	{r7}
 800316c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800316e:	e7fe      	b.n	800316e <BusFault_Handler+0x4>

08003170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003174:	e7fe      	b.n	8003174 <UsageFault_Handler+0x4>

08003176 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <TIM1_UP_IRQHandler+0x10>)
 800318a:	f004 fc55 	bl	8007a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000f14 	.word	0x20000f14

08003198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031d0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800319c:	f7ff f9d6 	bl	800254c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80031a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80031a2:	e003      	b.n	80031ac <LoopCopyDataInit>

080031a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80031a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80031a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80031aa:	3104      	adds	r1, #4

080031ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80031ac:	480a      	ldr	r0, [pc, #40]	; (80031d8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80031b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80031b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80031b4:	d3f6      	bcc.n	80031a4 <CopyDataInit>
  ldr  r2, =_sbss
 80031b6:	4a0a      	ldr	r2, [pc, #40]	; (80031e0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80031b8:	e002      	b.n	80031c0 <LoopFillZerobss>

080031ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80031ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80031bc:	f842 3b04 	str.w	r3, [r2], #4

080031c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80031c0:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80031c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80031c4:	d3f9      	bcc.n	80031ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031c6:	f006 f969 	bl	800949c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ca:	f7ff fa83 	bl	80026d4 <main>
  bx  lr    
 80031ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80031d4:	08009634 	.word	0x08009634
  ldr  r0, =_sdata
 80031d8:	20000800 	.word	0x20000800
  ldr  r3, =_edata
 80031dc:	20000810 	.word	0x20000810
  ldr  r2, =_sbss
 80031e0:	200008d0 	.word	0x200008d0
  ldr  r3, = _ebss
 80031e4:	20000f64 	.word	0x20000f64

080031e8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031e8:	e7fe      	b.n	80031e8 <ADC3_IRQHandler>
	...

080031ec <Task_0_Core_1_Handler>:
** Program ID macro = PROGRAM_1_CORE_1_ID
** WCET macro = TASK_0_PROGRAM_1_CORE_1_WCET
** Period of task in ticks = 50
********************************************************************************/ 
void Task_0_Core_1_Handler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_1_Handler
********************************************************************************/
if (counter_cm4 > 100)
 80031f0:	4b09      	ldr	r3, [pc, #36]	; (8003218 <Task_0_Core_1_Handler+0x2c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b64      	cmp	r3, #100	; 0x64
 80031f6:	dd08      	ble.n	800320a <Task_0_Core_1_Handler+0x1e>
{
    counter_cm4 = 0;
 80031f8:	4b07      	ldr	r3, [pc, #28]	; (8003218 <Task_0_Core_1_Handler+0x2c>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOB, GPIO_PIN_0); //GREEN LED
 80031fe:	2201      	movs	r2, #1
 8003200:	4906      	ldr	r1, [pc, #24]	; (800321c <Task_0_Core_1_Handler+0x30>)
 8003202:	2004      	movs	r0, #4
 8003204:	f7fe fc7e 	bl	8001b04 <sysCalls_readWrite>
}
/********************************************************************************
** stop_name =Task_0_Core_1_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8003208:	e004      	b.n	8003214 <Task_0_Core_1_Handler+0x28>
    counter_cm4++;
 800320a:	4b03      	ldr	r3, [pc, #12]	; (8003218 <Task_0_Core_1_Handler+0x2c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	4a01      	ldr	r2, [pc, #4]	; (8003218 <Task_0_Core_1_Handler+0x2c>)
 8003212:	6013      	str	r3, [r2, #0]
};
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}
 8003218:	10000c00 	.word	0x10000c00
 800321c:	58020400 	.word	0x58020400

08003220 <Task_0_Core_0_Handler>:
** Program ID macro = PROGRAM_1_CORE_0_ID
** WCET macro = TASK_0_PROGRAM_1_CORE_0_WCET
** Period of task in ticks = 50
********************************************************************************/ 
void Task_0_Core_0_Handler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_0_Handler
********************************************************************************/
if (counter > 100)
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <Task_0_Core_0_Handler+0x30>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b64      	cmp	r3, #100	; 0x64
 800322a:	dd08      	ble.n	800323e <Task_0_Core_0_Handler+0x1e>
{
    counter = 0;
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <Task_0_Core_0_Handler+0x30>)
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOE, GPIO_PIN_1); //ORANGE LED
 8003232:	2202      	movs	r2, #2
 8003234:	4907      	ldr	r1, [pc, #28]	; (8003254 <Task_0_Core_0_Handler+0x34>)
 8003236:	2004      	movs	r0, #4
 8003238:	f7fe fc64 	bl	8001b04 <sysCalls_readWrite>
 800323c:	e004      	b.n	8003248 <Task_0_Core_0_Handler+0x28>
}
else
{
    counter++;
 800323e:	4b04      	ldr	r3, [pc, #16]	; (8003250 <Task_0_Core_0_Handler+0x30>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	4a02      	ldr	r2, [pc, #8]	; (8003250 <Task_0_Core_0_Handler+0x30>)
 8003246:	6013      	str	r3, [r2, #0]
}
__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 8003248:	ee20 0a20 	vmul.f32	s0, s0, s1
/********************************************************************************
** stop_name =Task_0_Core_0_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20001000 	.word	0x20001000
 8003254:	58021000 	.word	0x58021000

08003258 <IdleThread_CM4>:
/********************************************************************************
** Thread ID macro = THREAD_0_PROGRAM_0_CORE_1_ID
** Program ID macro = PROGRAM_0_CORE_1_ID
********************************************************************************/ 
void IdleThread_CM4(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =IdleThread_CM4
********************************************************************************/
if (counter_IdleThread_CM4 > 100)
 800325c:	4b08      	ldr	r3, [pc, #32]	; (8003280 <IdleThread_CM4+0x28>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b64      	cmp	r3, #100	; 0x64
 8003262:	dd05      	ble.n	8003270 <IdleThread_CM4+0x18>
{
    cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4);
 8003264:	2210      	movs	r2, #16
 8003266:	4907      	ldr	r1, [pc, #28]	; (8003284 <IdleThread_CM4+0x2c>)
 8003268:	2004      	movs	r0, #4
 800326a:	f7fe fc4b 	bl	8001b04 <sysCalls_readWrite>
}
/********************************************************************************
** stop_name =IdleThread_CM4
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 800326e:	e004      	b.n	800327a <IdleThread_CM4+0x22>
    counter_IdleThread_CM4++;
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <IdleThread_CM4+0x28>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	3301      	adds	r3, #1
 8003276:	4a02      	ldr	r2, [pc, #8]	; (8003280 <IdleThread_CM4+0x28>)
 8003278:	6013      	str	r3, [r2, #0]
};
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	10000800 	.word	0x10000800
 8003284:	58020000 	.word	0x58020000

08003288 <IdleThread_CM7>:
/********************************************************************************
** Thread ID macro = THREAD_0_PROGRAM_0_CORE_0_ID
** Program ID macro = PROGRAM_0_CORE_0_ID
********************************************************************************/ 
void IdleThread_CM7(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =IdleThread_CM7
********************************************************************************/
if (counter_IdleThread_CM7 > 100)
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <IdleThread_CM7+0x2c>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b64      	cmp	r3, #100	; 0x64
 8003292:	dd06      	ble.n	80032a2 <IdleThread_CM7+0x1a>
{
    cosmosApi_deviceIO_togglePin(GPIOF, GPIO_PIN_11);
 8003294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003298:	4907      	ldr	r1, [pc, #28]	; (80032b8 <IdleThread_CM7+0x30>)
 800329a:	2004      	movs	r0, #4
 800329c:	f7fe fc32 	bl	8001b04 <sysCalls_readWrite>
 80032a0:	e004      	b.n	80032ac <IdleThread_CM7+0x24>
}
else
{
    counter_IdleThread_CM7++;
 80032a2:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <IdleThread_CM7+0x2c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3301      	adds	r3, #1
 80032a8:	4a02      	ldr	r2, [pc, #8]	; (80032b4 <IdleThread_CM7+0x2c>)
 80032aa:	6013      	str	r3, [r2, #0]
}
__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 80032ac:	ee20 0a20 	vmul.f32	s0, s0, s1
/********************************************************************************
** stop_name =IdleThread_CM7
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000400 	.word	0x20000400
 80032b8:	58021400 	.word	0x58021400

080032bc <osBoot_boot>:
  * @param[in]  none
  * 
  * @return none
********************************************************************************/
void osBoot_boot(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08c      	sub	sp, #48	; 0x30
 80032c0:	af00      	add	r7, sp, #0
    BitWidthType  coreId,
                  programSectionsNumber;

    CosmOS_ProgramSectionConfigurationType * programSections;

    coreId = CIL_core_getCoreId();
 80032c2:	f7fe fcc1 	bl	8001c48 <CIL_core_getCoreId>
 80032c6:	62b8      	str	r0, [r7, #40]	; 0x28

    programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 80032c8:	4a28      	ldr	r2, [pc, #160]	; (800336c <osBoot_boot+0xb0>)
 80032ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
    programSectionsNumber = bootSections[coreId].programSectionsNumber;
 80032d2:	4a26      	ldr	r2, [pc, #152]	; (800336c <osBoot_boot+0xb0>)
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	4413      	add	r3, r2
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	623b      	str	r3, [r7, #32]


    for (BitWidthType i=0; i < programSectionsNumber; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e2:	e03b      	b.n	800335c <osBoot_boot+0xa0>
    {
        osBoot_bootSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 80032e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	461a      	mov	r2, r3
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	4413      	add	r3, r2
 80032f4:	6818      	ldr	r0, [r3, #0]
 80032f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	461a      	mov	r2, r3
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	4413      	add	r3, r2
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	461a      	mov	r2, r3
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	4413      	add	r3, r2
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61f8      	str	r0, [r7, #28]
 800331c:	61b9      	str	r1, [r7, #24]
 800331e:	617b      	str	r3, [r7, #20]
    BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	613b      	str	r3, [r7, #16]
	  unsigned char *pDst = sectionStart;
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	60fb      	str	r3, [r7, #12]
	  unsigned char *pSrc = sectionStartInFlash;
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	60bb      	str	r3, [r7, #8]
	  for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8003330:	2300      	movs	r3, #0
 8003332:	607b      	str	r3, [r7, #4]
 8003334:	e00a      	b.n	800334c <osBoot_boot+0x90>
	  	  *pDst++=*pSrc++;
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	1c53      	adds	r3, r2, #1
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1c59      	adds	r1, r3, #1
 8003340:	60f9      	str	r1, [r7, #12]
 8003342:	7812      	ldrb	r2, [r2, #0]
 8003344:	701a      	strb	r2, [r3, #0]
	  for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3301      	adds	r3, #1
 800334a:	607b      	str	r3, [r7, #4]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	429a      	cmp	r2, r3
 8003354:	d3ef      	bcc.n	8003336 <osBoot_boot+0x7a>
    for (BitWidthType i=0; i < programSectionsNumber; i++)
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	3301      	adds	r3, #1
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800335c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	429a      	cmp	r2, r3
 8003362:	d3bf      	bcc.n	80032e4 <osBoot_boot+0x28>
    }
};
 8003364:	bf00      	nop
 8003366:	3730      	adds	r7, #48	; 0x30
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	08009574 	.word	0x08009574

08003370 <Idle_CM7>:
  * *************************************************************************//**
  * @addtogroup General_schedulableCfg_h General  
  * @ingroup Apis_schedulableCfg_h                                            
  * @{                                                                           
********************************************************************************/
__WEAK void Idle_CM7(void){};
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <Idle_CM4>:
__WEAK void sysJobs_CM7(void){};
__WEAK void Task_0_Core_0_Handler(void){};
__WEAK void Idle_CM4(void){};
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <wrapped_Idle_CM7>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/

void wrapped_Idle_CM7(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
    Idle_CM7();
 8003390:	f7ff ffee 	bl	8003370 <Idle_CM7>
    for(;;);
 8003394:	e7fe      	b.n	8003394 <wrapped_Idle_CM7+0x8>

08003396 <wrapped_sysJobs_CM7>:
};
void wrapped_sysJobs_CM7(void)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 800339a:	2008      	movs	r0, #8
 800339c:	f7fe fba7 	bl	8001aee <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80033a0:	2007      	movs	r0, #7
 80033a2:	f7fe fba4 	bl	8001aee <sysCalls_os>
    for(;;);
 80033a6:	e7fe      	b.n	80033a6 <wrapped_sysJobs_CM7+0x10>

080033a8 <wrapped_Task_0_Core_0_Handler>:
};
void wrapped_Task_0_Core_0_Handler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
    Task_0_Core_0_Handler();
 80033ac:	f7ff ff38 	bl	8003220 <Task_0_Core_0_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80033b0:	2007      	movs	r0, #7
 80033b2:	f7fe fb9c 	bl	8001aee <sysCalls_os>
    for(;;);
 80033b6:	e7fe      	b.n	80033b6 <wrapped_Task_0_Core_0_Handler+0xe>

080033b8 <wrapped_Idle_CM4>:
};
void wrapped_Idle_CM4(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
    Idle_CM4();
 80033bc:	f7ff ffdf 	bl	800337e <Idle_CM4>
    for(;;);
 80033c0:	e7fe      	b.n	80033c0 <wrapped_Idle_CM4+0x8>

080033c2 <wrapped_sysJobs_CM4>:
};
void wrapped_sysJobs_CM4(void)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 80033c6:	2008      	movs	r0, #8
 80033c8:	f7fe fb91 	bl	8001aee <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80033cc:	2007      	movs	r0, #7
 80033ce:	f7fe fb8e 	bl	8001aee <sysCalls_os>
    for(;;);
 80033d2:	e7fe      	b.n	80033d2 <wrapped_sysJobs_CM4+0x10>

080033d4 <wrapped_Task_0_Core_1_Handler>:
};
void wrapped_Task_0_Core_1_Handler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
    Task_0_Core_1_Handler();
 80033d8:	f7ff ff08 	bl	80031ec <Task_0_Core_1_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80033dc:	2007      	movs	r0, #7
 80033de:	f7fe fb86 	bl	8001aee <sysCalls_os>
    for(;;);
 80033e2:	e7fe      	b.n	80033e2 <wrapped_Task_0_Core_1_Handler+0xe>

080033e4 <wrapped_IdleThread_CM7>:
};
void wrapped_IdleThread_CM7(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM7();
 80033e8:	f7ff ff4e 	bl	8003288 <IdleThread_CM7>
 80033ec:	e7fc      	b.n	80033e8 <wrapped_IdleThread_CM7+0x4>

080033ee <wrapped_IdleThread_CM4>:
    }
};
void wrapped_IdleThread_CM4(void)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM4();
 80033f2:	f7ff ff31 	bl	8003258 <IdleThread_CM4>
 80033f6:	e7fc      	b.n	80033f2 <wrapped_IdleThread_CM4+0x4>

080033f8 <PendSV_Handler>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/ 
__NAKED void PendSV_Handler(void)
{
    __asm volatile ("MRS R0,PSP");
 80033f8:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("ISB");
 80033fc:	f3bf 8f6f 	isb	sy

    __asm volatile ("TST R14, #16");
 8003400:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ"); 
 8003404:	bf08      	it	eq
    __asm volatile ("VSTMDBEQ R0!,{S16-S31}"); /* If fp is true save floating point registers on stack */
 8003406:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    __asm volatile ("STMDB R0!,{R4-R8,R10,R11,R14}");
 800340a:	e920 4df0 	stmdb	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}

    __asm volatile ("BL scheduler_scheduleNextInstance");
 800340e:	f7fe f84e 	bl	80014ae <scheduler_scheduleNextInstance>
    __asm volatile ("ISB");
 8003412:	f3bf 8f6f 	isb	sy

    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8003416:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
    __asm volatile ("TST R14, #16");
 800341a:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ"); 
 800341e:	bf08      	it	eq
    __asm volatile ("VLDMIAEQ R0!,{S16-S31}"); /* If fp is true restore floating point registers on stack */
 8003420:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    __asm volatile ("MSR PSP,R0");
 8003424:	f380 8809 	msr	PSP, r0
    __asm volatile ("ISB");
 8003428:	f3bf 8f6f 	isb	sy

    __asm volatile ("BX R14");
 800342c:	4770      	bx	lr
}
 800342e:	bf00      	nop

08003430 <SysTick_Handler>:

void SysTick_Handler(){
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <SysTick_Handler+0x1c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a04      	ldr	r2, [pc, #16]	; (800344c <SysTick_Handler+0x1c>)
 800343a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800343e:	6053      	str	r3, [r2, #4]
}
 8003440:	bf00      	nop
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <SVC_Handler>:

__NAKED void SVC_Handler( void )
{
    __asm volatile ("TST LR, #4");
 8003450:	f01e 0f04 	tst.w	lr, #4
    __asm volatile ("ITE EQ");
 8003454:	bf0c      	ite	eq
    __asm volatile ("MRSEQ r0, MSP");
 8003456:	f3ef 8008 	mrseq	r0, MSP
    __asm volatile ("MRSNE r0, PSP");
 800345a:	f3ef 8009 	mrsne	r0, PSP
    __asm volatile ( "B CIL_sysCalls_dispatcher");
 800345e:	f7fe be2c 	b.w	80020ba <CIL_sysCalls_dispatcher>
}
 8003462:	bf00      	nop

08003464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800346a:	2003      	movs	r0, #3
 800346c:	f000 f945 	bl	80036fa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003470:	f002 fd3a 	bl	8005ee8 <HAL_RCC_GetSysClockFreq>
 8003474:	4601      	mov	r1, r0
 8003476:	4b15      	ldr	r3, [pc, #84]	; (80034cc <HAL_Init+0x68>)
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <HAL_Init+0x6c>)
 8003482:	5cd3      	ldrb	r3, [r2, r3]
 8003484:	f003 031f 	and.w	r3, r3, #31
 8003488:	fa21 f303 	lsr.w	r3, r1, r3
 800348c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <HAL_Init+0x68>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	4a0e      	ldr	r2, [pc, #56]	; (80034d0 <HAL_Init+0x6c>)
 8003498:	5cd3      	ldrb	r3, [r2, r3]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	fa22 f303 	lsr.w	r3, r2, r3
 80034a4:	4a0b      	ldr	r2, [pc, #44]	; (80034d4 <HAL_Init+0x70>)
 80034a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034a8:	4a0b      	ldr	r2, [pc, #44]	; (80034d8 <HAL_Init+0x74>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034ae:	2000      	movs	r0, #0
 80034b0:	f7ff fdf2 	bl	8003098 <HAL_InitTick>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e002      	b.n	80034c4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80034be:	f7ff fbfd 	bl	8002cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	58024400 	.word	0x58024400
 80034d0:	0800951c 	.word	0x0800951c
 80034d4:	20000804 	.word	0x20000804
 80034d8:	20000800 	.word	0x20000800

080034dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_IncTick+0x20>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_IncTick+0x24>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_IncTick+0x24>)
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	2000080c 	.word	0x2000080c
 8003500:	20000f60 	.word	0x20000f60

08003504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return uwTick;
 8003508:	4b03      	ldr	r3, [pc, #12]	; (8003518 <HAL_GetTick+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000f60 	.word	0x20000f60

0800351c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff ffee 	bl	8003504 <HAL_GetTick>
 8003528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d005      	beq.n	8003542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_Delay+0x40>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	4413      	add	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003542:	bf00      	nop
 8003544:	f7ff ffde 	bl	8003504 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	429a      	cmp	r2, r3
 8003552:	d8f7      	bhi.n	8003544 <HAL_Delay+0x28>
  {
  }
}
 8003554:	bf00      	nop
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	2000080c 	.word	0x2000080c

08003560 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_GetREVID+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0c1b      	lsrs	r3, r3, #16
}
 800356a:	4618      	mov	r0, r3
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	5c001000 	.word	0x5c001000

08003578 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003580:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003588:	4904      	ldr	r1, [pc, #16]	; (800359c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4313      	orrs	r3, r2
 800358e:	604b      	str	r3, [r1, #4]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	58000400 	.word	0x58000400

080035a0 <__NVIC_SetPriorityGrouping>:
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <__NVIC_SetPriorityGrouping+0x40>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035bc:	4013      	ands	r3, r2
 80035be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <__NVIC_SetPriorityGrouping+0x44>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035ce:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <__NVIC_SetPriorityGrouping+0x40>)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	60d3      	str	r3, [r2, #12]
}
 80035d4:	bf00      	nop
 80035d6:	3714      	adds	r7, #20
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00
 80035e4:	05fa0000 	.word	0x05fa0000

080035e8 <__NVIC_GetPriorityGrouping>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <__NVIC_GetPriorityGrouping+0x18>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	0a1b      	lsrs	r3, r3, #8
 80035f2:	f003 0307 	and.w	r3, r3, #7
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	e000ed00 	.word	0xe000ed00

08003604 <__NVIC_EnableIRQ>:
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	4603      	mov	r3, r0
 800360c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800360e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003612:	2b00      	cmp	r3, #0
 8003614:	db0b      	blt.n	800362e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	f003 021f 	and.w	r2, r3, #31
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <__NVIC_EnableIRQ+0x38>)
 800361e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2001      	movs	r0, #1
 8003626:	fa00 f202 	lsl.w	r2, r0, r2
 800362a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000e100 	.word	0xe000e100

08003640 <__NVIC_SetPriority>:
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800364c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db0a      	blt.n	800366a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	490c      	ldr	r1, [pc, #48]	; (800368c <__NVIC_SetPriority+0x4c>)
 800365a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800365e:	0112      	lsls	r2, r2, #4
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	440b      	add	r3, r1
 8003664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003668:	e00a      	b.n	8003680 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4908      	ldr	r1, [pc, #32]	; (8003690 <__NVIC_SetPriority+0x50>)
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	3b04      	subs	r3, #4
 8003678:	0112      	lsls	r2, r2, #4
 800367a:	b2d2      	uxtb	r2, r2
 800367c:	440b      	add	r3, r1
 800367e:	761a      	strb	r2, [r3, #24]
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	e000e100 	.word	0xe000e100
 8003690:	e000ed00 	.word	0xe000ed00

08003694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003694:	b480      	push	{r7}
 8003696:	b089      	sub	sp, #36	; 0x24
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f1c3 0307 	rsb	r3, r3, #7
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	bf28      	it	cs
 80036b2:	2304      	movcs	r3, #4
 80036b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2b06      	cmp	r3, #6
 80036bc:	d902      	bls.n	80036c4 <NVIC_EncodePriority+0x30>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3b03      	subs	r3, #3
 80036c2:	e000      	b.n	80036c6 <NVIC_EncodePriority+0x32>
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036c8:	f04f 32ff 	mov.w	r2, #4294967295
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	401a      	ands	r2, r3
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036dc:	f04f 31ff 	mov.w	r1, #4294967295
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	fa01 f303 	lsl.w	r3, r1, r3
 80036e6:	43d9      	mvns	r1, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	4313      	orrs	r3, r2
         );
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3724      	adds	r7, #36	; 0x24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ff4c 	bl	80035a0 <__NVIC_SetPriorityGrouping>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800371e:	f7ff ff63 	bl	80035e8 <__NVIC_GetPriorityGrouping>
 8003722:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	68b9      	ldr	r1, [r7, #8]
 8003728:	6978      	ldr	r0, [r7, #20]
 800372a:	f7ff ffb3 	bl	8003694 <NVIC_EncodePriority>
 800372e:	4602      	mov	r2, r0
 8003730:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003734:	4611      	mov	r1, r2
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff82 	bl	8003640 <__NVIC_SetPriority>
}
 800373c:	bf00      	nop
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800374e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff ff56 	bl	8003604 <__NVIC_EnableIRQ>
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003764:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_MPU_Disable+0x24>)
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	4a05      	ldr	r2, [pc, #20]	; (8003784 <HAL_MPU_Disable+0x24>)
 800376e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003772:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <HAL_MPU_Disable+0x28>)
 8003776:	2200      	movs	r2, #0
 8003778:	605a      	str	r2, [r3, #4]
}
 800377a:	bf00      	nop
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	e000ed00 	.word	0xe000ed00
 8003788:	e000ed90 	.word	0xe000ed90

0800378c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003794:	4a0a      	ldr	r2, [pc, #40]	; (80037c0 <HAL_MPU_Enable+0x34>)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_MPU_Enable+0x38>)
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <HAL_MPU_Enable+0x38>)
 80037a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80037aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80037ae:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000ed90 	.word	0xe000ed90
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	785a      	ldrb	r2, [r3, #1]
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_MPU_ConfigRegion+0x84>)
 80037d6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d029      	beq.n	8003834 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80037e0:	4a1a      	ldr	r2, [pc, #104]	; (800384c <HAL_MPU_ConfigRegion+0x84>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	7b1b      	ldrb	r3, [r3, #12]
 80037ec:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	7adb      	ldrb	r3, [r3, #11]
 80037f2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80037f4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	7a9b      	ldrb	r3, [r3, #10]
 80037fa:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80037fc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	7b5b      	ldrb	r3, [r3, #13]
 8003802:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003804:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7b9b      	ldrb	r3, [r3, #14]
 800380a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800380c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	7bdb      	ldrb	r3, [r3, #15]
 8003812:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003814:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	7a5b      	ldrb	r3, [r3, #9]
 800381a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800381c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	7a1b      	ldrb	r3, [r3, #8]
 8003822:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003824:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	7812      	ldrb	r2, [r2, #0]
 800382a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800382c:	4a07      	ldr	r2, [pc, #28]	; (800384c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800382e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003830:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8003832:	e005      	b.n	8003840 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <HAL_MPU_ConfigRegion+0x84>)
 8003836:	2200      	movs	r2, #0
 8003838:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800383a:	4b04      	ldr	r3, [pc, #16]	; (800384c <HAL_MPU_ConfigRegion+0x84>)
 800383c:	2200      	movs	r2, #0
 800383e:	611a      	str	r2, [r3, #16]
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed90 	.word	0xe000ed90

08003850 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8003854:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_GetCurrentCPUID+0x24>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	2b07      	cmp	r3, #7
 8003860:	d101      	bne.n	8003866 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8003862:	2303      	movs	r3, #3
 8003864:	e000      	b.n	8003868 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8003866:	2301      	movs	r3, #1
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003880:	f7ff fe40 	bl	8003504 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e316      	b.n	8003ebe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a66      	ldr	r2, [pc, #408]	; (8003a30 <HAL_DMA_Init+0x1b8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d04a      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a65      	ldr	r2, [pc, #404]	; (8003a34 <HAL_DMA_Init+0x1bc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d045      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a63      	ldr	r2, [pc, #396]	; (8003a38 <HAL_DMA_Init+0x1c0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d040      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a62      	ldr	r2, [pc, #392]	; (8003a3c <HAL_DMA_Init+0x1c4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d03b      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a60      	ldr	r2, [pc, #384]	; (8003a40 <HAL_DMA_Init+0x1c8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d036      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a5f      	ldr	r2, [pc, #380]	; (8003a44 <HAL_DMA_Init+0x1cc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d031      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a5d      	ldr	r2, [pc, #372]	; (8003a48 <HAL_DMA_Init+0x1d0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d02c      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_DMA_Init+0x1d4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d027      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a5a      	ldr	r2, [pc, #360]	; (8003a50 <HAL_DMA_Init+0x1d8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d022      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <HAL_DMA_Init+0x1dc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d01d      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a57      	ldr	r2, [pc, #348]	; (8003a58 <HAL_DMA_Init+0x1e0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d018      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <HAL_DMA_Init+0x1e4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a54      	ldr	r2, [pc, #336]	; (8003a60 <HAL_DMA_Init+0x1e8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00e      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a53      	ldr	r2, [pc, #332]	; (8003a64 <HAL_DMA_Init+0x1ec>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d009      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a51      	ldr	r2, [pc, #324]	; (8003a68 <HAL_DMA_Init+0x1f0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_DMA_Init+0xb8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a50      	ldr	r2, [pc, #320]	; (8003a6c <HAL_DMA_Init+0x1f4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <HAL_DMA_Init+0xbc>
 8003930:	2301      	movs	r3, #1
 8003932:	e000      	b.n	8003936 <HAL_DMA_Init+0xbe>
 8003934:	2300      	movs	r3, #0
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 813b 	beq.w	8003bb2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a37      	ldr	r2, [pc, #220]	; (8003a30 <HAL_DMA_Init+0x1b8>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d04a      	beq.n	80039ec <HAL_DMA_Init+0x174>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a36      	ldr	r2, [pc, #216]	; (8003a34 <HAL_DMA_Init+0x1bc>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d045      	beq.n	80039ec <HAL_DMA_Init+0x174>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a34      	ldr	r2, [pc, #208]	; (8003a38 <HAL_DMA_Init+0x1c0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d040      	beq.n	80039ec <HAL_DMA_Init+0x174>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a33      	ldr	r2, [pc, #204]	; (8003a3c <HAL_DMA_Init+0x1c4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d03b      	beq.n	80039ec <HAL_DMA_Init+0x174>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <HAL_DMA_Init+0x1c8>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d036      	beq.n	80039ec <HAL_DMA_Init+0x174>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a30      	ldr	r2, [pc, #192]	; (8003a44 <HAL_DMA_Init+0x1cc>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d031      	beq.n	80039ec <HAL_DMA_Init+0x174>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2e      	ldr	r2, [pc, #184]	; (8003a48 <HAL_DMA_Init+0x1d0>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d02c      	beq.n	80039ec <HAL_DMA_Init+0x174>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <HAL_DMA_Init+0x1d4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d027      	beq.n	80039ec <HAL_DMA_Init+0x174>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <HAL_DMA_Init+0x1d8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d022      	beq.n	80039ec <HAL_DMA_Init+0x174>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <HAL_DMA_Init+0x1dc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d01d      	beq.n	80039ec <HAL_DMA_Init+0x174>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a28      	ldr	r2, [pc, #160]	; (8003a58 <HAL_DMA_Init+0x1e0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d018      	beq.n	80039ec <HAL_DMA_Init+0x174>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a27      	ldr	r2, [pc, #156]	; (8003a5c <HAL_DMA_Init+0x1e4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d013      	beq.n	80039ec <HAL_DMA_Init+0x174>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a25      	ldr	r2, [pc, #148]	; (8003a60 <HAL_DMA_Init+0x1e8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00e      	beq.n	80039ec <HAL_DMA_Init+0x174>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <HAL_DMA_Init+0x1ec>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_DMA_Init+0x174>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a22      	ldr	r2, [pc, #136]	; (8003a68 <HAL_DMA_Init+0x1f0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d004      	beq.n	80039ec <HAL_DMA_Init+0x174>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a21      	ldr	r2, [pc, #132]	; (8003a6c <HAL_DMA_Init+0x1f4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d108      	bne.n	80039fe <HAL_DMA_Init+0x186>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e007      	b.n	8003a0e <HAL_DMA_Init+0x196>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a0e:	e02f      	b.n	8003a70 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a10:	f7ff fd78 	bl	8003504 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b05      	cmp	r3, #5
 8003a1c:	d928      	bls.n	8003a70 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2203      	movs	r2, #3
 8003a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e246      	b.n	8003ebe <HAL_DMA_Init+0x646>
 8003a30:	40020010 	.word	0x40020010
 8003a34:	40020028 	.word	0x40020028
 8003a38:	40020040 	.word	0x40020040
 8003a3c:	40020058 	.word	0x40020058
 8003a40:	40020070 	.word	0x40020070
 8003a44:	40020088 	.word	0x40020088
 8003a48:	400200a0 	.word	0x400200a0
 8003a4c:	400200b8 	.word	0x400200b8
 8003a50:	40020410 	.word	0x40020410
 8003a54:	40020428 	.word	0x40020428
 8003a58:	40020440 	.word	0x40020440
 8003a5c:	40020458 	.word	0x40020458
 8003a60:	40020470 	.word	0x40020470
 8003a64:	40020488 	.word	0x40020488
 8003a68:	400204a0 	.word	0x400204a0
 8003a6c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1c8      	bne.n	8003a10 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	4b83      	ldr	r3, [pc, #524]	; (8003c98 <HAL_DMA_Init+0x420>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003a96:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003aa2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003aae:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d107      	bne.n	8003ad4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003acc:	4313      	orrs	r3, r2
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003ad4:	4b71      	ldr	r3, [pc, #452]	; (8003c9c <HAL_DMA_Init+0x424>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	4b71      	ldr	r3, [pc, #452]	; (8003ca0 <HAL_DMA_Init+0x428>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae0:	d328      	bcc.n	8003b34 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b28      	cmp	r3, #40	; 0x28
 8003ae8:	d903      	bls.n	8003af2 <HAL_DMA_Init+0x27a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b2e      	cmp	r3, #46	; 0x2e
 8003af0:	d917      	bls.n	8003b22 <HAL_DMA_Init+0x2aa>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b3e      	cmp	r3, #62	; 0x3e
 8003af8:	d903      	bls.n	8003b02 <HAL_DMA_Init+0x28a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2b42      	cmp	r3, #66	; 0x42
 8003b00:	d90f      	bls.n	8003b22 <HAL_DMA_Init+0x2aa>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2b46      	cmp	r3, #70	; 0x46
 8003b08:	d903      	bls.n	8003b12 <HAL_DMA_Init+0x29a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b48      	cmp	r3, #72	; 0x48
 8003b10:	d907      	bls.n	8003b22 <HAL_DMA_Init+0x2aa>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b4e      	cmp	r3, #78	; 0x4e
 8003b18:	d905      	bls.n	8003b26 <HAL_DMA_Init+0x2ae>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b52      	cmp	r3, #82	; 0x52
 8003b20:	d801      	bhi.n	8003b26 <HAL_DMA_Init+0x2ae>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_DMA_Init+0x2b0>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b32:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0307 	bic.w	r3, r3, #7
 8003b4a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d117      	bne.n	8003b8e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00e      	beq.n	8003b8e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fa8f 	bl	8004094 <DMA_CheckFifoParam>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2240      	movs	r2, #64	; 0x40
 8003b80:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e197      	b.n	8003ebe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f9ca 	bl	8003f30 <DMA_CalcBaseAndBitshift>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba4:	f003 031f 	and.w	r3, r3, #31
 8003ba8:	223f      	movs	r2, #63	; 0x3f
 8003baa:	409a      	lsls	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	e0cd      	b.n	8003d4e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a3b      	ldr	r2, [pc, #236]	; (8003ca4 <HAL_DMA_Init+0x42c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d022      	beq.n	8003c02 <HAL_DMA_Init+0x38a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a39      	ldr	r2, [pc, #228]	; (8003ca8 <HAL_DMA_Init+0x430>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d01d      	beq.n	8003c02 <HAL_DMA_Init+0x38a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a38      	ldr	r2, [pc, #224]	; (8003cac <HAL_DMA_Init+0x434>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d018      	beq.n	8003c02 <HAL_DMA_Init+0x38a>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a36      	ldr	r2, [pc, #216]	; (8003cb0 <HAL_DMA_Init+0x438>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d013      	beq.n	8003c02 <HAL_DMA_Init+0x38a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a35      	ldr	r2, [pc, #212]	; (8003cb4 <HAL_DMA_Init+0x43c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d00e      	beq.n	8003c02 <HAL_DMA_Init+0x38a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a33      	ldr	r2, [pc, #204]	; (8003cb8 <HAL_DMA_Init+0x440>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d009      	beq.n	8003c02 <HAL_DMA_Init+0x38a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a32      	ldr	r2, [pc, #200]	; (8003cbc <HAL_DMA_Init+0x444>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d004      	beq.n	8003c02 <HAL_DMA_Init+0x38a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a30      	ldr	r2, [pc, #192]	; (8003cc0 <HAL_DMA_Init+0x448>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d101      	bne.n	8003c06 <HAL_DMA_Init+0x38e>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <HAL_DMA_Init+0x390>
 8003c06:	2300      	movs	r3, #0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8097 	beq.w	8003d3c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a24      	ldr	r2, [pc, #144]	; (8003ca4 <HAL_DMA_Init+0x42c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d021      	beq.n	8003c5c <HAL_DMA_Init+0x3e4>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a22      	ldr	r2, [pc, #136]	; (8003ca8 <HAL_DMA_Init+0x430>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01c      	beq.n	8003c5c <HAL_DMA_Init+0x3e4>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a21      	ldr	r2, [pc, #132]	; (8003cac <HAL_DMA_Init+0x434>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d017      	beq.n	8003c5c <HAL_DMA_Init+0x3e4>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a1f      	ldr	r2, [pc, #124]	; (8003cb0 <HAL_DMA_Init+0x438>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d012      	beq.n	8003c5c <HAL_DMA_Init+0x3e4>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a1e      	ldr	r2, [pc, #120]	; (8003cb4 <HAL_DMA_Init+0x43c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00d      	beq.n	8003c5c <HAL_DMA_Init+0x3e4>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <HAL_DMA_Init+0x440>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d008      	beq.n	8003c5c <HAL_DMA_Init+0x3e4>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a1b      	ldr	r2, [pc, #108]	; (8003cbc <HAL_DMA_Init+0x444>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <HAL_DMA_Init+0x3e4>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a19      	ldr	r2, [pc, #100]	; (8003cc0 <HAL_DMA_Init+0x448>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4b12      	ldr	r3, [pc, #72]	; (8003cc4 <HAL_DMA_Init+0x44c>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b40      	cmp	r3, #64	; 0x40
 8003c84:	d020      	beq.n	8003cc8 <HAL_DMA_Init+0x450>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	2b80      	cmp	r3, #128	; 0x80
 8003c8c:	d102      	bne.n	8003c94 <HAL_DMA_Init+0x41c>
 8003c8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c92:	e01a      	b.n	8003cca <HAL_DMA_Init+0x452>
 8003c94:	2300      	movs	r3, #0
 8003c96:	e018      	b.n	8003cca <HAL_DMA_Init+0x452>
 8003c98:	fe10803f 	.word	0xfe10803f
 8003c9c:	5c001000 	.word	0x5c001000
 8003ca0:	ffff0000 	.word	0xffff0000
 8003ca4:	58025408 	.word	0x58025408
 8003ca8:	5802541c 	.word	0x5802541c
 8003cac:	58025430 	.word	0x58025430
 8003cb0:	58025444 	.word	0x58025444
 8003cb4:	58025458 	.word	0x58025458
 8003cb8:	5802546c 	.word	0x5802546c
 8003cbc:	58025480 	.word	0x58025480
 8003cc0:	58025494 	.word	0x58025494
 8003cc4:	fffe000f 	.word	0xfffe000f
 8003cc8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	68d2      	ldr	r2, [r2, #12]
 8003cce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003cf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003cf8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b6e      	ldr	r3, [pc, #440]	; (8003ec8 <HAL_DMA_Init+0x650>)
 8003d10:	4413      	add	r3, r2
 8003d12:	4a6e      	ldr	r2, [pc, #440]	; (8003ecc <HAL_DMA_Init+0x654>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	009a      	lsls	r2, r3, #2
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f905 	bl	8003f30 <DMA_CalcBaseAndBitshift>
 8003d26:	4603      	mov	r3, r0
 8003d28:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2201      	movs	r2, #1
 8003d34:	409a      	lsls	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	e008      	b.n	8003d4e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2240      	movs	r2, #64	; 0x40
 8003d40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2203      	movs	r2, #3
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e0b7      	b.n	8003ebe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a5f      	ldr	r2, [pc, #380]	; (8003ed0 <HAL_DMA_Init+0x658>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d072      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a5d      	ldr	r2, [pc, #372]	; (8003ed4 <HAL_DMA_Init+0x65c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d06d      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a5c      	ldr	r2, [pc, #368]	; (8003ed8 <HAL_DMA_Init+0x660>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d068      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a5a      	ldr	r2, [pc, #360]	; (8003edc <HAL_DMA_Init+0x664>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d063      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a59      	ldr	r2, [pc, #356]	; (8003ee0 <HAL_DMA_Init+0x668>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d05e      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a57      	ldr	r2, [pc, #348]	; (8003ee4 <HAL_DMA_Init+0x66c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d059      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a56      	ldr	r2, [pc, #344]	; (8003ee8 <HAL_DMA_Init+0x670>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d054      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a54      	ldr	r2, [pc, #336]	; (8003eec <HAL_DMA_Init+0x674>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d04f      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a53      	ldr	r2, [pc, #332]	; (8003ef0 <HAL_DMA_Init+0x678>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d04a      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a51      	ldr	r2, [pc, #324]	; (8003ef4 <HAL_DMA_Init+0x67c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d045      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a50      	ldr	r2, [pc, #320]	; (8003ef8 <HAL_DMA_Init+0x680>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d040      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a4e      	ldr	r2, [pc, #312]	; (8003efc <HAL_DMA_Init+0x684>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d03b      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a4d      	ldr	r2, [pc, #308]	; (8003f00 <HAL_DMA_Init+0x688>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d036      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a4b      	ldr	r2, [pc, #300]	; (8003f04 <HAL_DMA_Init+0x68c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d031      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a4a      	ldr	r2, [pc, #296]	; (8003f08 <HAL_DMA_Init+0x690>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d02c      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a48      	ldr	r2, [pc, #288]	; (8003f0c <HAL_DMA_Init+0x694>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d027      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a47      	ldr	r2, [pc, #284]	; (8003f10 <HAL_DMA_Init+0x698>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d022      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a45      	ldr	r2, [pc, #276]	; (8003f14 <HAL_DMA_Init+0x69c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d01d      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a44      	ldr	r2, [pc, #272]	; (8003f18 <HAL_DMA_Init+0x6a0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d018      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a42      	ldr	r2, [pc, #264]	; (8003f1c <HAL_DMA_Init+0x6a4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a41      	ldr	r2, [pc, #260]	; (8003f20 <HAL_DMA_Init+0x6a8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d00e      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a3f      	ldr	r2, [pc, #252]	; (8003f24 <HAL_DMA_Init+0x6ac>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d009      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a3e      	ldr	r2, [pc, #248]	; (8003f28 <HAL_DMA_Init+0x6b0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d004      	beq.n	8003e3e <HAL_DMA_Init+0x5c6>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a3c      	ldr	r2, [pc, #240]	; (8003f2c <HAL_DMA_Init+0x6b4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d101      	bne.n	8003e42 <HAL_DMA_Init+0x5ca>
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_DMA_Init+0x5cc>
 8003e42:	2300      	movs	r3, #0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d032      	beq.n	8003eae <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f000 f99f 	bl	800418c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d102      	bne.n	8003e5c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e70:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d010      	beq.n	8003e9c <HAL_DMA_Init+0x624>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d80c      	bhi.n	8003e9c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa1c 	bl	80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	e008      	b.n	8003eae <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	a7fdabf8 	.word	0xa7fdabf8
 8003ecc:	cccccccd 	.word	0xcccccccd
 8003ed0:	40020010 	.word	0x40020010
 8003ed4:	40020028 	.word	0x40020028
 8003ed8:	40020040 	.word	0x40020040
 8003edc:	40020058 	.word	0x40020058
 8003ee0:	40020070 	.word	0x40020070
 8003ee4:	40020088 	.word	0x40020088
 8003ee8:	400200a0 	.word	0x400200a0
 8003eec:	400200b8 	.word	0x400200b8
 8003ef0:	40020410 	.word	0x40020410
 8003ef4:	40020428 	.word	0x40020428
 8003ef8:	40020440 	.word	0x40020440
 8003efc:	40020458 	.word	0x40020458
 8003f00:	40020470 	.word	0x40020470
 8003f04:	40020488 	.word	0x40020488
 8003f08:	400204a0 	.word	0x400204a0
 8003f0c:	400204b8 	.word	0x400204b8
 8003f10:	58025408 	.word	0x58025408
 8003f14:	5802541c 	.word	0x5802541c
 8003f18:	58025430 	.word	0x58025430
 8003f1c:	58025444 	.word	0x58025444
 8003f20:	58025458 	.word	0x58025458
 8003f24:	5802546c 	.word	0x5802546c
 8003f28:	58025480 	.word	0x58025480
 8003f2c:	58025494 	.word	0x58025494

08003f30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a42      	ldr	r2, [pc, #264]	; (8004048 <DMA_CalcBaseAndBitshift+0x118>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d04a      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a41      	ldr	r2, [pc, #260]	; (800404c <DMA_CalcBaseAndBitshift+0x11c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d045      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a3f      	ldr	r2, [pc, #252]	; (8004050 <DMA_CalcBaseAndBitshift+0x120>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d040      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3e      	ldr	r2, [pc, #248]	; (8004054 <DMA_CalcBaseAndBitshift+0x124>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d03b      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a3c      	ldr	r2, [pc, #240]	; (8004058 <DMA_CalcBaseAndBitshift+0x128>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d036      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a3b      	ldr	r2, [pc, #236]	; (800405c <DMA_CalcBaseAndBitshift+0x12c>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d031      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a39      	ldr	r2, [pc, #228]	; (8004060 <DMA_CalcBaseAndBitshift+0x130>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d02c      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a38      	ldr	r2, [pc, #224]	; (8004064 <DMA_CalcBaseAndBitshift+0x134>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d027      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a36      	ldr	r2, [pc, #216]	; (8004068 <DMA_CalcBaseAndBitshift+0x138>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d022      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a35      	ldr	r2, [pc, #212]	; (800406c <DMA_CalcBaseAndBitshift+0x13c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d01d      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a33      	ldr	r2, [pc, #204]	; (8004070 <DMA_CalcBaseAndBitshift+0x140>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d018      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a32      	ldr	r2, [pc, #200]	; (8004074 <DMA_CalcBaseAndBitshift+0x144>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d013      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a30      	ldr	r2, [pc, #192]	; (8004078 <DMA_CalcBaseAndBitshift+0x148>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00e      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a2f      	ldr	r2, [pc, #188]	; (800407c <DMA_CalcBaseAndBitshift+0x14c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d009      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2d      	ldr	r2, [pc, #180]	; (8004080 <DMA_CalcBaseAndBitshift+0x150>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2c      	ldr	r2, [pc, #176]	; (8004084 <DMA_CalcBaseAndBitshift+0x154>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d101      	bne.n	8003fdc <DMA_CalcBaseAndBitshift+0xac>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <DMA_CalcBaseAndBitshift+0xae>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d024      	beq.n	800402c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	3b10      	subs	r3, #16
 8003fea:	4a27      	ldr	r2, [pc, #156]	; (8004088 <DMA_CalcBaseAndBitshift+0x158>)
 8003fec:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff0:	091b      	lsrs	r3, r3, #4
 8003ff2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	4a24      	ldr	r2, [pc, #144]	; (800408c <DMA_CalcBaseAndBitshift+0x15c>)
 8003ffc:	5cd3      	ldrb	r3, [r2, r3]
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d908      	bls.n	800401c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	4b1f      	ldr	r3, [pc, #124]	; (8004090 <DMA_CalcBaseAndBitshift+0x160>)
 8004012:	4013      	ands	r3, r2
 8004014:	1d1a      	adds	r2, r3, #4
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	659a      	str	r2, [r3, #88]	; 0x58
 800401a:	e00d      	b.n	8004038 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	4b1b      	ldr	r3, [pc, #108]	; (8004090 <DMA_CalcBaseAndBitshift+0x160>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6593      	str	r3, [r2, #88]	; 0x58
 800402a:	e005      	b.n	8004038 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	40020010 	.word	0x40020010
 800404c:	40020028 	.word	0x40020028
 8004050:	40020040 	.word	0x40020040
 8004054:	40020058 	.word	0x40020058
 8004058:	40020070 	.word	0x40020070
 800405c:	40020088 	.word	0x40020088
 8004060:	400200a0 	.word	0x400200a0
 8004064:	400200b8 	.word	0x400200b8
 8004068:	40020410 	.word	0x40020410
 800406c:	40020428 	.word	0x40020428
 8004070:	40020440 	.word	0x40020440
 8004074:	40020458 	.word	0x40020458
 8004078:	40020470 	.word	0x40020470
 800407c:	40020488 	.word	0x40020488
 8004080:	400204a0 	.word	0x400204a0
 8004084:	400204b8 	.word	0x400204b8
 8004088:	aaaaaaab 	.word	0xaaaaaaab
 800408c:	08009604 	.word	0x08009604
 8004090:	fffffc00 	.word	0xfffffc00

08004094 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d120      	bne.n	80040ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d858      	bhi.n	8004162 <DMA_CheckFifoParam+0xce>
 80040b0:	a201      	add	r2, pc, #4	; (adr r2, 80040b8 <DMA_CheckFifoParam+0x24>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040c9 	.word	0x080040c9
 80040bc:	080040db 	.word	0x080040db
 80040c0:	080040c9 	.word	0x080040c9
 80040c4:	08004163 	.word	0x08004163
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d048      	beq.n	8004166 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040d8:	e045      	b.n	8004166 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040e2:	d142      	bne.n	800416a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040e8:	e03f      	b.n	800416a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699b      	ldr	r3, [r3, #24]
 80040ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f2:	d123      	bne.n	800413c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d838      	bhi.n	800416e <DMA_CheckFifoParam+0xda>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <DMA_CheckFifoParam+0x70>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004115 	.word	0x08004115
 8004108:	0800411b 	.word	0x0800411b
 800410c:	08004115 	.word	0x08004115
 8004110:	0800412d 	.word	0x0800412d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	73fb      	strb	r3, [r7, #15]
        break;
 8004118:	e030      	b.n	800417c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d025      	beq.n	8004172 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800412a:	e022      	b.n	8004172 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004134:	d11f      	bne.n	8004176 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800413a:	e01c      	b.n	8004176 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	2b02      	cmp	r3, #2
 8004142:	d902      	bls.n	800414a <DMA_CheckFifoParam+0xb6>
 8004144:	2b03      	cmp	r3, #3
 8004146:	d003      	beq.n	8004150 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004148:	e018      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
        break;
 800414e:	e015      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
    break;
 8004160:	e00b      	b.n	800417a <DMA_CheckFifoParam+0xe6>
        break;
 8004162:	bf00      	nop
 8004164:	e00a      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 8004166:	bf00      	nop
 8004168:	e008      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 800416a:	bf00      	nop
 800416c:	e006      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 800416e:	bf00      	nop
 8004170:	e004      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 8004172:	bf00      	nop
 8004174:	e002      	b.n	800417c <DMA_CheckFifoParam+0xe8>
        break;
 8004176:	bf00      	nop
 8004178:	e000      	b.n	800417c <DMA_CheckFifoParam+0xe8>
    break;
 800417a:	bf00      	nop
    }
  }

  return status;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop

0800418c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a38      	ldr	r2, [pc, #224]	; (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d022      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a36      	ldr	r2, [pc, #216]	; (8004284 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d01d      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a35      	ldr	r2, [pc, #212]	; (8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d018      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a33      	ldr	r2, [pc, #204]	; (800428c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a32      	ldr	r2, [pc, #200]	; (8004290 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a30      	ldr	r2, [pc, #192]	; (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d009      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2d      	ldr	r2, [pc, #180]	; (800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d101      	bne.n	80041ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01a      	beq.n	800422a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	3b08      	subs	r3, #8
 80041fc:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4b26      	ldr	r3, [pc, #152]	; (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a24      	ldr	r2, [pc, #144]	; (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004218:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 031f 	and.w	r3, r3, #31
 8004220:	2201      	movs	r2, #1
 8004222:	409a      	lsls	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004228:	e024      	b.n	8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	3b10      	subs	r3, #16
 8004232:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004234:	fba2 2303 	umull	r2, r3, r2, r3
 8004238:	091b      	lsrs	r3, r3, #4
 800423a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	4a1c      	ldr	r2, [pc, #112]	; (80042b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d806      	bhi.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d902      	bls.n	8004252 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3308      	adds	r3, #8
 8004250:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a16      	ldr	r2, [pc, #88]	; (80042bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004264:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 031f 	and.w	r3, r3, #31
 800426c:	2201      	movs	r2, #1
 800426e:	409a      	lsls	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004274:	bf00      	nop
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	58025408 	.word	0x58025408
 8004284:	5802541c 	.word	0x5802541c
 8004288:	58025430 	.word	0x58025430
 800428c:	58025444 	.word	0x58025444
 8004290:	58025458 	.word	0x58025458
 8004294:	5802546c 	.word	0x5802546c
 8004298:	58025480 	.word	0x58025480
 800429c:	58025494 	.word	0x58025494
 80042a0:	cccccccd 	.word	0xcccccccd
 80042a4:	16009600 	.word	0x16009600
 80042a8:	58025880 	.word	0x58025880
 80042ac:	aaaaaaab 	.word	0xaaaaaaab
 80042b0:	400204b8 	.word	0x400204b8
 80042b4:	4002040f 	.word	0x4002040f
 80042b8:	10008200 	.word	0x10008200
 80042bc:	40020880 	.word	0x40020880

080042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d04a      	beq.n	800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d847      	bhi.n	800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a25      	ldr	r2, [pc, #148]	; (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a24      	ldr	r2, [pc, #144]	; (800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d01d      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a22      	ldr	r2, [pc, #136]	; (8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a21      	ldr	r2, [pc, #132]	; (8004384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1e      	ldr	r2, [pc, #120]	; (800438c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1c      	ldr	r2, [pc, #112]	; (8004390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a1b      	ldr	r2, [pc, #108]	; (8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004330:	2300      	movs	r3, #0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4b17      	ldr	r3, [pc, #92]	; (8004398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	461a      	mov	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a15      	ldr	r2, [pc, #84]	; (800439c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004348:	671a      	str	r2, [r3, #112]	; 0x70
 800434a:	e009      	b.n	8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	461a      	mov	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a11      	ldr	r2, [pc, #68]	; (80043a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800435e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3b01      	subs	r3, #1
 8004364:	2201      	movs	r2, #1
 8004366:	409a      	lsls	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	58025408 	.word	0x58025408
 800437c:	5802541c 	.word	0x5802541c
 8004380:	58025430 	.word	0x58025430
 8004384:	58025444 	.word	0x58025444
 8004388:	58025458 	.word	0x58025458
 800438c:	5802546c 	.word	0x5802546c
 8004390:	58025480 	.word	0x58025480
 8004394:	58025494 	.word	0x58025494
 8004398:	1600963f 	.word	0x1600963f
 800439c:	58025940 	.word	0x58025940
 80043a0:	1000823f 	.word	0x1000823f
 80043a4:	40020940 	.word	0x40020940

080043a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e0c6      	b.n	8004548 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fe fc94 	bl	8002cf0 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2223      	movs	r2, #35	; 0x23
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ce:	4b60      	ldr	r3, [pc, #384]	; (8004550 <HAL_ETH_Init+0x1a8>)
 80043d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043d4:	4a5e      	ldr	r2, [pc, #376]	; (8004550 <HAL_ETH_Init+0x1a8>)
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043de:	4b5c      	ldr	r3, [pc, #368]	; (8004550 <HAL_ETH_Init+0x1a8>)
 80043e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7a1b      	ldrb	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d103      	bne.n	80043fc <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80043f4:	2000      	movs	r0, #0
 80043f6:	f7ff f8bf 	bl	8003578 <HAL_SYSCFG_ETHInterfaceSelect>
 80043fa:	e003      	b.n	8004404 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80043fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004400:	f7ff f8ba 	bl	8003578 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800441c:	f7ff f872 	bl	8003504 <HAL_GetTick>
 8004420:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004422:	e00f      	b.n	8004444 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004424:	f7ff f86e 	bl	8003504 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004432:	d907      	bls.n	8004444 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2204      	movs	r2, #4
 8004438:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	22e0      	movs	r2, #224	; 0xe0
 800443e:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e081      	b.n	8004548 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e6      	bne.n	8004424 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fac0 	bl	80049dc <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800445c:	f001 feb6 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 8004460:	4602      	mov	r2, r0
 8004462:	4b3c      	ldr	r3, [pc, #240]	; (8004554 <HAL_ETH_Init+0x1ac>)
 8004464:	fba3 2302 	umull	r2, r3, r3, r2
 8004468:	0c9a      	lsrs	r2, r3, #18
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3a01      	subs	r2, #1
 8004470:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fa13 	bl	80048a0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004490:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004494:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	f003 0303 	and.w	r3, r3, #3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d007      	beq.n	80044b2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	22e0      	movs	r2, #224	; 0xe0
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e04a      	b.n	8004548 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	f241 1308 	movw	r3, #4360	; 0x1108
 80044ba:	4413      	add	r3, r2
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	4b26      	ldr	r3, [pc, #152]	; (8004558 <HAL_ETH_Init+0x1b0>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6952      	ldr	r2, [r2, #20]
 80044c6:	0052      	lsls	r2, r2, #1
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	6809      	ldr	r1, [r1, #0]
 80044cc:	431a      	orrs	r2, r3
 80044ce:	f241 1308 	movw	r3, #4360	; 0x1108
 80044d2:	440b      	add	r3, r1
 80044d4:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fad8 	bl	8004a8c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fb1c 	bl	8004b1a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	3305      	adds	r3, #5
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	021a      	lsls	r2, r3, #8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	3304      	adds	r3, #4
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	4619      	mov	r1, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	430a      	orrs	r2, r1
 80044fc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	3303      	adds	r3, #3
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	061a      	lsls	r2, r3, #24
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	3302      	adds	r3, #2
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	041b      	lsls	r3, r3, #16
 8004514:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	3301      	adds	r3, #1
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004520:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800452e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004530:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2210      	movs	r2, #16
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2210      	movs	r2, #16
 8004544:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	58024400 	.word	0x58024400
 8004554:	431bde83 	.word	0x431bde83
 8004558:	ffff8001 	.word	0xffff8001

0800455c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800456e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	791b      	ldrb	r3, [r3, #4]
 8004574:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004576:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	7b1b      	ldrb	r3, [r3, #12]
 800457c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800457e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	7b5b      	ldrb	r3, [r3, #13]
 8004584:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004586:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	7b9b      	ldrb	r3, [r3, #14]
 800458c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800458e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	7bdb      	ldrb	r3, [r3, #15]
 8004594:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004596:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	7c12      	ldrb	r2, [r2, #16]
 800459c:	2a00      	cmp	r2, #0
 800459e:	d102      	bne.n	80045a6 <ETH_SetMACConfig+0x4a>
 80045a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80045a4:	e000      	b.n	80045a8 <ETH_SetMACConfig+0x4c>
 80045a6:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80045a8:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	7c52      	ldrb	r2, [r2, #17]
 80045ae:	2a00      	cmp	r2, #0
 80045b0:	d102      	bne.n	80045b8 <ETH_SetMACConfig+0x5c>
 80045b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045b6:	e000      	b.n	80045ba <ETH_SetMACConfig+0x5e>
 80045b8:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80045ba:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	7c9b      	ldrb	r3, [r3, #18]
 80045c0:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80045c2:	431a      	orrs	r2, r3
                                macconf->Speed |
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80045c8:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80045ce:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	7f1b      	ldrb	r3, [r3, #28]
 80045d4:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80045d6:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	7f5b      	ldrb	r3, [r3, #29]
 80045dc:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80045de:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	7f92      	ldrb	r2, [r2, #30]
 80045e4:	2a00      	cmp	r2, #0
 80045e6:	d102      	bne.n	80045ee <ETH_SetMACConfig+0x92>
 80045e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045ec:	e000      	b.n	80045f0 <ETH_SetMACConfig+0x94>
 80045ee:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80045f0:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	7fdb      	ldrb	r3, [r3, #31]
 80045f6:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80045f8:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004600:	2a00      	cmp	r2, #0
 8004602:	d102      	bne.n	800460a <ETH_SetMACConfig+0xae>
 8004604:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004608:	e000      	b.n	800460c <ETH_SetMACConfig+0xb0>
 800460a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800460c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004612:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800461a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800461c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	4b56      	ldr	r3, [pc, #344]	; (8004788 <ETH_SetMACConfig+0x22c>)
 800462e:	4013      	ands	r3, r2
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6812      	ldr	r2, [r2, #0]
 8004634:	68f9      	ldr	r1, [r7, #12]
 8004636:	430b      	orrs	r3, r1
 8004638:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004646:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004648:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004650:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004652:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800465a:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800465c:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004664:	2a00      	cmp	r2, #0
 8004666:	d102      	bne.n	800466e <ETH_SetMACConfig+0x112>
 8004668:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800466c:	e000      	b.n	8004670 <ETH_SetMACConfig+0x114>
 800466e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004670:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	4b42      	ldr	r3, [pc, #264]	; (800478c <ETH_SetMACConfig+0x230>)
 8004682:	4013      	ands	r3, r2
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6812      	ldr	r2, [r2, #0]
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	430b      	orrs	r3, r1
 800468c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004694:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b3a      	ldr	r3, [pc, #232]	; (8004790 <ETH_SetMACConfig+0x234>)
 80046a6:	4013      	ands	r3, r2
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	6812      	ldr	r2, [r2, #0]
 80046ac:	68f9      	ldr	r1, [r7, #12]
 80046ae:	430b      	orrs	r3, r1
 80046b0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80046b8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046be:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80046c6:	2a00      	cmp	r2, #0
 80046c8:	d101      	bne.n	80046ce <ETH_SetMACConfig+0x172>
 80046ca:	2280      	movs	r2, #128	; 0x80
 80046cc:	e000      	b.n	80046d0 <ETH_SetMACConfig+0x174>
 80046ce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80046d0:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046d8:	4313      	orrs	r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046e2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80046e6:	4013      	ands	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	68f9      	ldr	r1, [r7, #12]
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80046f8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004700:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f023 0103 	bic.w	r1, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	430a      	orrs	r2, r1
 800471a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004726:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004742:	2a00      	cmp	r2, #0
 8004744:	d101      	bne.n	800474a <ETH_SetMACConfig+0x1ee>
 8004746:	2240      	movs	r2, #64	; 0x40
 8004748:	e000      	b.n	800474c <ETH_SetMACConfig+0x1f0>
 800474a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800474c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004754:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004756:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800475e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004760:	4313      	orrs	r3, r2
 8004762:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800476c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	430a      	orrs	r2, r1
 8004778:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	00048083 	.word	0x00048083
 800478c:	c0f88000 	.word	0xc0f88000
 8004790:	fffffef0 	.word	0xfffffef0

08004794 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	4b38      	ldr	r3, [pc, #224]	; (800488c <ETH_SetDMAConfig+0xf8>)
 80047aa:	4013      	ands	r3, r2
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	6809      	ldr	r1, [r1, #0]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80047ba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	791b      	ldrb	r3, [r3, #4]
 80047c0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047c6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	7b1b      	ldrb	r3, [r3, #12]
 80047cc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	f241 0304 	movw	r3, #4100	; 0x1004
 80047da:	4413      	add	r3, r2
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	4b2c      	ldr	r3, [pc, #176]	; (8004890 <ETH_SetDMAConfig+0xfc>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6811      	ldr	r1, [r2, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	431a      	orrs	r2, r3
 80047ea:	f241 0304 	movw	r3, #4100	; 0x1004
 80047ee:	440b      	add	r3, r1
 80047f0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	7b5b      	ldrb	r3, [r3, #13]
 80047f6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b22      	ldr	r3, [pc, #136]	; (8004894 <ETH_SetDMAConfig+0x100>)
 800480c:	4013      	ands	r3, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6811      	ldr	r1, [r2, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	431a      	orrs	r2, r3
 8004816:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800481a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	7d1b      	ldrb	r3, [r3, #20]
 8004824:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004826:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	7f5b      	ldrb	r3, [r3, #29]
 800482c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f241 1304 	movw	r3, #4356	; 0x1104
 800483a:	4413      	add	r3, r2
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b16      	ldr	r3, [pc, #88]	; (8004898 <ETH_SetDMAConfig+0x104>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6811      	ldr	r1, [r2, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	431a      	orrs	r2, r3
 800484a:	f241 1304 	movw	r3, #4356	; 0x1104
 800484e:	440b      	add	r3, r1
 8004850:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	7f1b      	ldrb	r3, [r3, #28]
 8004856:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	f241 1308 	movw	r3, #4360	; 0x1108
 8004868:	4413      	add	r3, r2
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <ETH_SetDMAConfig+0x108>)
 800486e:	4013      	ands	r3, r2
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6811      	ldr	r1, [r2, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	431a      	orrs	r2, r3
 8004878:	f241 1308 	movw	r3, #4360	; 0x1108
 800487c:	440b      	add	r3, r1
 800487e:	601a      	str	r2, [r3, #0]
}
 8004880:	bf00      	nop
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	ffff87fd 	.word	0xffff87fd
 8004890:	ffff2ffe 	.word	0xffff2ffe
 8004894:	fffec000 	.word	0xfffec000
 8004898:	ffc0efef 	.word	0xffc0efef
 800489c:	7fc0ffff 	.word	0x7fc0ffff

080048a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b0a4      	sub	sp, #144	; 0x90
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80048a8:	2301      	movs	r3, #1
 80048aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80048ae:	2300      	movs	r3, #0
 80048b0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80048d0:	2300      	movs	r3, #0
 80048d2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80048dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048e0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80048ec:	2300      	movs	r3, #0
 80048ee:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80048f2:	2300      	movs	r3, #0
 80048f4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80048f8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80048fc:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80048fe:	2300      	movs	r3, #0
 8004900:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004904:	2300      	movs	r3, #0
 8004906:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004908:	2301      	movs	r3, #1
 800490a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800490e:	2300      	movs	r3, #0
 8004910:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004914:	2300      	movs	r3, #0
 8004916:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800491a:	2300      	movs	r3, #0
 800491c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800491e:	2300      	movs	r3, #0
 8004920:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004922:	2300      	movs	r3, #0
 8004924:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004926:	2300      	movs	r3, #0
 8004928:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800492c:	2300      	movs	r3, #0
 800492e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004938:	2320      	movs	r3, #32
 800493a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004944:	2300      	movs	r3, #0
 8004946:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800494a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800494e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004950:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004954:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004956:	2300      	movs	r3, #0
 8004958:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800495c:	2302      	movs	r3, #2
 800495e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004962:	2300      	movs	r3, #0
 8004964:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004968:	2300      	movs	r3, #0
 800496a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800496e:	2300      	movs	r3, #0
 8004970:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004974:	2301      	movs	r3, #1
 8004976:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800497a:	2300      	movs	r3, #0
 800497c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7ff fde6 	bl	800455c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004990:	2301      	movs	r3, #1
 8004992:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004994:	2301      	movs	r3, #1
 8004996:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004998:	2300      	movs	r3, #0
 800499a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800499c:	2300      	movs	r3, #0
 800499e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80049aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80049b0:	2300      	movs	r3, #0
 80049b2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80049b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80049b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80049c0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80049c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80049c6:	f107 0308 	add.w	r3, r7, #8
 80049ca:	4619      	mov	r1, r3
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff fee1 	bl	8004794 <ETH_SetDMAConfig>
}
 80049d2:	bf00      	nop
 80049d4:	3790      	adds	r7, #144	; 0x90
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
	...

080049dc <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049ec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80049f6:	f001 fbe9 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 80049fa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4a1e      	ldr	r2, [pc, #120]	; (8004a78 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d908      	bls.n	8004a16 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4a1d      	ldr	r2, [pc, #116]	; (8004a7c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d804      	bhi.n	8004a16 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e027      	b.n	8004a66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	4a18      	ldr	r2, [pc, #96]	; (8004a7c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d908      	bls.n	8004a30 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d804      	bhi.n	8004a30 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	e01a      	b.n	8004a66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d903      	bls.n	8004a40 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4a12      	ldr	r2, [pc, #72]	; (8004a84 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d911      	bls.n	8004a64 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d908      	bls.n	8004a5a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4a0f      	ldr	r2, [pc, #60]	; (8004a88 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d804      	bhi.n	8004a5a <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a56:	60fb      	str	r3, [r7, #12]
 8004a58:	e005      	b.n	8004a66 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e000      	b.n	8004a66 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004a64:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	01312cff 	.word	0x01312cff
 8004a7c:	02160ebf 	.word	0x02160ebf
 8004a80:	039386ff 	.word	0x039386ff
 8004a84:	05f5e0ff 	.word	0x05f5e0ff
 8004a88:	08f0d17f 	.word	0x08f0d17f

08004a8c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e01d      	b.n	8004ad6 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68d9      	ldr	r1, [r3, #12]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	4413      	add	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	440b      	add	r3, r1
 8004aaa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2200      	movs	r2, #0
 8004abc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	3206      	adds	r2, #6
 8004acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	60fb      	str	r3, [r7, #12]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d9de      	bls.n	8004a9a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	f241 132c 	movw	r3, #4396	; 0x112c
 8004aea:	4413      	add	r3, r2
 8004aec:	2203      	movs	r2, #3
 8004aee:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	68d9      	ldr	r1, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	f241 1314 	movw	r3, #4372	; 0x1114
 8004afc:	4413      	add	r3, r2
 8004afe:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004b0c:	601a      	str	r2, [r3, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b085      	sub	sp, #20
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e024      	b.n	8004b72 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6919      	ldr	r1, [r3, #16]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	4413      	add	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	440b      	add	r3, r1
 8004b38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	2200      	movs	r2, #0
 8004b44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2200      	movs	r2, #0
 8004b56:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b5e:	68ba      	ldr	r2, [r7, #8]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	330a      	adds	r3, #10
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d9d7      	bls.n	8004b28 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	f241 1330 	movw	r3, #4400	; 0x1130
 8004b9e:	4413      	add	r3, r2
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6919      	ldr	r1, [r3, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	f241 131c 	movw	r3, #4380	; 0x111c
 8004bb0:	4413      	add	r3, r2
 8004bb2:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	f241 1328 	movw	r3, #4392	; 0x1128
 8004bc4:	4413      	add	r3, r2
 8004bc6:	6019      	str	r1, [r3, #0]
}
 8004bc8:	bf00      	nop
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b089      	sub	sp, #36	; 0x24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004be2:	4b89      	ldr	r3, [pc, #548]	; (8004e08 <HAL_GPIO_Init+0x234>)
 8004be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004be6:	e194      	b.n	8004f12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	2101      	movs	r1, #1
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f000 8186 	beq.w	8004f0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d00b      	beq.n	8004c20 <HAL_GPIO_Init+0x4c>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d007      	beq.n	8004c20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c14:	2b11      	cmp	r3, #17
 8004c16:	d003      	beq.n	8004c20 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b12      	cmp	r3, #18
 8004c1e:	d130      	bne.n	8004c82 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	005b      	lsls	r3, r3, #1
 8004c2a:	2203      	movs	r2, #3
 8004c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4013      	ands	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c56:	2201      	movs	r2, #1
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	f003 0201 	and.w	r2, r3, #1
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	fa02 f303 	lsl.w	r3, r2, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4013      	ands	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689a      	ldr	r2, [r3, #8]
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_Init+0xee>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b12      	cmp	r3, #18
 8004cc0:	d123      	bne.n	8004d0a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	08da      	lsrs	r2, r3, #3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3208      	adds	r2, #8
 8004cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	220f      	movs	r2, #15
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	43db      	mvns	r3, r3
 8004ce0:	69ba      	ldr	r2, [r7, #24]
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	691a      	ldr	r2, [r3, #16]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	08da      	lsrs	r2, r3, #3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3208      	adds	r2, #8
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	2203      	movs	r2, #3
 8004d16:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0203 	and.w	r2, r3, #3
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 80e0 	beq.w	8004f0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4c:	4b2f      	ldr	r3, [pc, #188]	; (8004e0c <HAL_GPIO_Init+0x238>)
 8004d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d52:	4a2e      	ldr	r2, [pc, #184]	; (8004e0c <HAL_GPIO_Init+0x238>)
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d5c:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <HAL_GPIO_Init+0x238>)
 8004d5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	60fb      	str	r3, [r7, #12]
 8004d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d6a:	4a29      	ldr	r2, [pc, #164]	; (8004e10 <HAL_GPIO_Init+0x23c>)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	3302      	adds	r3, #2
 8004d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	220f      	movs	r2, #15
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	69ba      	ldr	r2, [r7, #24]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <HAL_GPIO_Init+0x240>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d052      	beq.n	8004e3c <HAL_GPIO_Init+0x268>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <HAL_GPIO_Init+0x244>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d031      	beq.n	8004e02 <HAL_GPIO_Init+0x22e>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1e      	ldr	r2, [pc, #120]	; (8004e1c <HAL_GPIO_Init+0x248>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d02b      	beq.n	8004dfe <HAL_GPIO_Init+0x22a>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	; (8004e20 <HAL_GPIO_Init+0x24c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d025      	beq.n	8004dfa <HAL_GPIO_Init+0x226>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <HAL_GPIO_Init+0x250>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d01f      	beq.n	8004df6 <HAL_GPIO_Init+0x222>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <HAL_GPIO_Init+0x254>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d019      	beq.n	8004df2 <HAL_GPIO_Init+0x21e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a1a      	ldr	r2, [pc, #104]	; (8004e2c <HAL_GPIO_Init+0x258>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d013      	beq.n	8004dee <HAL_GPIO_Init+0x21a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <HAL_GPIO_Init+0x25c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d00d      	beq.n	8004dea <HAL_GPIO_Init+0x216>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a18      	ldr	r2, [pc, #96]	; (8004e34 <HAL_GPIO_Init+0x260>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d007      	beq.n	8004de6 <HAL_GPIO_Init+0x212>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_GPIO_Init+0x264>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d101      	bne.n	8004de2 <HAL_GPIO_Init+0x20e>
 8004dde:	2309      	movs	r3, #9
 8004de0:	e02d      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004de2:	230a      	movs	r3, #10
 8004de4:	e02b      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004de6:	2308      	movs	r3, #8
 8004de8:	e029      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004dea:	2307      	movs	r3, #7
 8004dec:	e027      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004dee:	2306      	movs	r3, #6
 8004df0:	e025      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004df2:	2305      	movs	r3, #5
 8004df4:	e023      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004df6:	2304      	movs	r3, #4
 8004df8:	e021      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e01f      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	e01d      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e01b      	b.n	8004e3e <HAL_GPIO_Init+0x26a>
 8004e06:	bf00      	nop
 8004e08:	58000080 	.word	0x58000080
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	58000400 	.word	0x58000400
 8004e14:	58020000 	.word	0x58020000
 8004e18:	58020400 	.word	0x58020400
 8004e1c:	58020800 	.word	0x58020800
 8004e20:	58020c00 	.word	0x58020c00
 8004e24:	58021000 	.word	0x58021000
 8004e28:	58021400 	.word	0x58021400
 8004e2c:	58021800 	.word	0x58021800
 8004e30:	58021c00 	.word	0x58021c00
 8004e34:	58022000 	.word	0x58022000
 8004e38:	58022400 	.word	0x58022400
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	f002 0203 	and.w	r2, r2, #3
 8004e44:	0092      	lsls	r2, r2, #2
 8004e46:	4093      	lsls	r3, r2
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e4e:	4938      	ldr	r1, [pc, #224]	; (8004f30 <HAL_GPIO_Init+0x35c>)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	089b      	lsrs	r3, r3, #2
 8004e54:	3302      	adds	r3, #2
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004ed6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004f04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f47f ae63 	bne.w	8004be8 <HAL_GPIO_Init+0x14>
  }
}
 8004f22:	bf00      	nop
 8004f24:	3724      	adds	r7, #36	; 0x24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	58000400 	.word	0x58000400

08004f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	807b      	strh	r3, [r7, #2]
 8004f40:	4613      	mov	r3, r2
 8004f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f44:	787b      	ldrb	r3, [r7, #1]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f4a:	887a      	ldrh	r2, [r7, #2]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f50:	e003      	b.n	8004f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f52:	887b      	ldrh	r3, [r7, #2]
 8004f54:	041a      	lsls	r2, r3, #16
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	619a      	str	r2, [r3, #24]
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	695a      	ldr	r2, [r3, #20]
 8004f76:	887b      	ldrh	r3, [r7, #2]
 8004f78:	401a      	ands	r2, r3
 8004f7a:	887b      	ldrh	r3, [r7, #2]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d104      	bne.n	8004f8a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f80:	887b      	ldrh	r3, [r7, #2]
 8004f82:	041a      	lsls	r2, r3, #16
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004f88:	e002      	b.n	8004f90 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004f8a:	887a      	ldrh	r2, [r7, #2]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	619a      	str	r2, [r3, #24]
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004fa4:	4a08      	ldr	r2, [pc, #32]	; (8004fc8 <HAL_HSEM_FastTake+0x2c>)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3320      	adds	r3, #32
 8004faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fae:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <HAL_HSEM_FastTake+0x30>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d101      	bne.n	8004fb8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e000      	b.n	8004fba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	370c      	adds	r7, #12
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	58026400 	.word	0x58026400
 8004fcc:	80000300 	.word	0x80000300

08004fd0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004fda:	4906      	ldr	r1, [pc, #24]	; (8004ff4 <HAL_HSEM_Release+0x24>)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	58026400 	.word	0x58026400

08004ff8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ffa:	b08f      	sub	sp, #60	; 0x3c
 8004ffc:	af0a      	add	r7, sp, #40	; 0x28
 8004ffe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e116      	b.n	8005238 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f7fd ffdf 	bl	8002fe8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2203      	movs	r2, #3
 800502e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800503a:	2b00      	cmp	r3, #0
 800503c:	d102      	bne.n	8005044 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4618      	mov	r0, r3
 800504a:	f003 ffdf 	bl	800900c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	687e      	ldr	r6, [r7, #4]
 8005056:	466d      	mov	r5, sp
 8005058:	f106 0410 	add.w	r4, r6, #16
 800505c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800505e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005064:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005068:	e885 0003 	stmia.w	r5, {r0, r1}
 800506c:	1d33      	adds	r3, r6, #4
 800506e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005070:	6838      	ldr	r0, [r7, #0]
 8005072:	f003 ff69 	bl	8008f48 <USB_CoreInit>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d005      	beq.n	8005088 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e0d7      	b.n	8005238 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2100      	movs	r1, #0
 800508e:	4618      	mov	r0, r3
 8005090:	f003 ffcd 	bl	800902e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
 8005098:	e04a      	b.n	8005130 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800509a:	7bfa      	ldrb	r2, [r7, #15]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	4613      	mov	r3, r2
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	1a9b      	subs	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	440b      	add	r3, r1
 80050a8:	333d      	adds	r3, #61	; 0x3d
 80050aa:	2201      	movs	r2, #1
 80050ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050ae:	7bfa      	ldrb	r2, [r7, #15]
 80050b0:	6879      	ldr	r1, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	1a9b      	subs	r3, r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	333c      	adds	r3, #60	; 0x3c
 80050be:	7bfa      	ldrb	r2, [r7, #15]
 80050c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050c2:	7bfa      	ldrb	r2, [r7, #15]
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	b298      	uxth	r0, r3
 80050c8:	6879      	ldr	r1, [r7, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	440b      	add	r3, r1
 80050d4:	3342      	adds	r3, #66	; 0x42
 80050d6:	4602      	mov	r2, r0
 80050d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050da:	7bfa      	ldrb	r2, [r7, #15]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	1a9b      	subs	r3, r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	333f      	adds	r3, #63	; 0x3f
 80050ea:	2200      	movs	r2, #0
 80050ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050ee:	7bfa      	ldrb	r2, [r7, #15]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	3344      	adds	r3, #68	; 0x44
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005102:	7bfa      	ldrb	r2, [r7, #15]
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	3348      	adds	r3, #72	; 0x48
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005116:	7bfa      	ldrb	r2, [r7, #15]
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	1a9b      	subs	r3, r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	3350      	adds	r3, #80	; 0x50
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800512a:	7bfb      	ldrb	r3, [r7, #15]
 800512c:	3301      	adds	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	7bfa      	ldrb	r2, [r7, #15]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	d3af      	bcc.n	800509a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800513a:	2300      	movs	r3, #0
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e044      	b.n	80051ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005140:	7bfa      	ldrb	r2, [r7, #15]
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005156:	7bfa      	ldrb	r2, [r7, #15]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005168:	7bfa      	ldrb	r2, [r7, #15]
 800516a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800516c:	7bfa      	ldrb	r2, [r7, #15]
 800516e:	6879      	ldr	r1, [r7, #4]
 8005170:	4613      	mov	r3, r2
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	1a9b      	subs	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	440b      	add	r3, r1
 800517a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005182:	7bfa      	ldrb	r2, [r7, #15]
 8005184:	6879      	ldr	r1, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	009b      	lsls	r3, r3, #2
 800518e:	440b      	add	r3, r1
 8005190:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005194:	2200      	movs	r2, #0
 8005196:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005198:	7bfa      	ldrb	r2, [r7, #15]
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	4613      	mov	r3, r2
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	1a9b      	subs	r3, r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	440b      	add	r3, r1
 80051a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051ae:	7bfa      	ldrb	r2, [r7, #15]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051c4:	7bfb      	ldrb	r3, [r7, #15]
 80051c6:	3301      	adds	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
 80051ca:	7bfa      	ldrb	r2, [r7, #15]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d3b5      	bcc.n	8005140 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	687e      	ldr	r6, [r7, #4]
 80051dc:	466d      	mov	r5, sp
 80051de:	f106 0410 	add.w	r4, r6, #16
 80051e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80051f2:	1d33      	adds	r3, r6, #4
 80051f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051f6:	6838      	ldr	r0, [r7, #0]
 80051f8:	f003 ff44 	bl	8009084 <USB_DevInit>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e014      	b.n	8005238 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	2b01      	cmp	r3, #1
 8005224:	d102      	bne.n	800522c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f80a 	bl	8005240 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f004 f8e6 	bl	8009402 <USB_DevDisconnect>

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005240 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800526e:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HAL_PCDEx_ActivateLPM+0x44>)
 8005270:	4313      	orrs	r3, r2
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	10000003 	.word	0x10000003

08005288 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005290:	4b29      	ldr	r3, [pc, #164]	; (8005338 <HAL_PWREx_ConfigSupply+0xb0>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	2b06      	cmp	r3, #6
 800529a:	d00a      	beq.n	80052b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800529c:	4b26      	ldr	r3, [pc, #152]	; (8005338 <HAL_PWREx_ConfigSupply+0xb0>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d001      	beq.n	80052ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e040      	b.n	8005330 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e03e      	b.n	8005330 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052b2:	4b21      	ldr	r3, [pc, #132]	; (8005338 <HAL_PWREx_ConfigSupply+0xb0>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80052ba:	491f      	ldr	r1, [pc, #124]	; (8005338 <HAL_PWREx_ConfigSupply+0xb0>)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052c2:	f7fe f91f 	bl	8003504 <HAL_GetTick>
 80052c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052c8:	e009      	b.n	80052de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052ca:	f7fe f91b 	bl	8003504 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d8:	d901      	bls.n	80052de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e028      	b.n	8005330 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052de:	4b16      	ldr	r3, [pc, #88]	; (8005338 <HAL_PWREx_ConfigSupply+0xb0>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ea:	d1ee      	bne.n	80052ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b1e      	cmp	r3, #30
 80052f0:	d008      	beq.n	8005304 <HAL_PWREx_ConfigSupply+0x7c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b2e      	cmp	r3, #46	; 0x2e
 80052f6:	d005      	beq.n	8005304 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b1d      	cmp	r3, #29
 80052fc:	d002      	beq.n	8005304 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b2d      	cmp	r3, #45	; 0x2d
 8005302:	d114      	bne.n	800532e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005304:	f7fe f8fe 	bl	8003504 <HAL_GetTick>
 8005308:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800530a:	e009      	b.n	8005320 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800530c:	f7fe f8fa 	bl	8003504 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800531a:	d901      	bls.n	8005320 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e007      	b.n	8005330 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_PWREx_ConfigSupply+0xb0>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532c:	d1ee      	bne.n	800530c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3710      	adds	r7, #16
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	58024800 	.word	0x58024800

0800533c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4a04      	ldr	r2, [pc, #16]	; (8005358 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800534a:	60d3      	str	r3, [r2, #12]
}
 800534c:	bf00      	nop
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	58024800 	.word	0x58024800

0800535c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08c      	sub	sp, #48	; 0x30
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e3ff      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8087 	beq.w	800548a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800537c:	4b99      	ldr	r3, [pc, #612]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005386:	4b97      	ldr	r3, [pc, #604]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	2b10      	cmp	r3, #16
 8005390:	d007      	beq.n	80053a2 <HAL_RCC_OscConfig+0x46>
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	2b18      	cmp	r3, #24
 8005396:	d110      	bne.n	80053ba <HAL_RCC_OscConfig+0x5e>
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d10b      	bne.n	80053ba <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a2:	4b90      	ldr	r3, [pc, #576]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d06c      	beq.n	8005488 <HAL_RCC_OscConfig+0x12c>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d168      	bne.n	8005488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e3d9      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c2:	d106      	bne.n	80053d2 <HAL_RCC_OscConfig+0x76>
 80053c4:	4b87      	ldr	r3, [pc, #540]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a86      	ldr	r2, [pc, #536]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80053ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	e02e      	b.n	8005430 <HAL_RCC_OscConfig+0xd4>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCC_OscConfig+0x98>
 80053da:	4b82      	ldr	r3, [pc, #520]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a81      	ldr	r2, [pc, #516]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80053e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	4b7f      	ldr	r3, [pc, #508]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a7e      	ldr	r2, [pc, #504]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80053ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e01d      	b.n	8005430 <HAL_RCC_OscConfig+0xd4>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053fc:	d10c      	bne.n	8005418 <HAL_RCC_OscConfig+0xbc>
 80053fe:	4b79      	ldr	r3, [pc, #484]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a78      	ldr	r2, [pc, #480]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	4b76      	ldr	r3, [pc, #472]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a75      	ldr	r2, [pc, #468]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e00b      	b.n	8005430 <HAL_RCC_OscConfig+0xd4>
 8005418:	4b72      	ldr	r3, [pc, #456]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a71      	ldr	r2, [pc, #452]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 800541e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	4b6f      	ldr	r3, [pc, #444]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a6e      	ldr	r2, [pc, #440]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 800542a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800542e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d013      	beq.n	8005460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fe f864 	bl	8003504 <HAL_GetTick>
 800543c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005440:	f7fe f860 	bl	8003504 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e38d      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005452:	4b64      	ldr	r3, [pc, #400]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0xe4>
 800545e:	e014      	b.n	800548a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fe f850 	bl	8003504 <HAL_GetTick>
 8005464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005468:	f7fe f84c 	bl	8003504 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	; 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e379      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800547a:	4b5a      	ldr	r3, [pc, #360]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x10c>
 8005486:	e000      	b.n	800548a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80ae 	beq.w	80055f4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005498:	4b52      	ldr	r3, [pc, #328]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054a2:	4b50      	ldr	r3, [pc, #320]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <HAL_RCC_OscConfig+0x162>
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	2b18      	cmp	r3, #24
 80054b2:	d13a      	bne.n	800552a <HAL_RCC_OscConfig+0x1ce>
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f003 0303 	and.w	r3, r3, #3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d135      	bne.n	800552a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054be:	4b49      	ldr	r3, [pc, #292]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0304 	and.w	r3, r3, #4
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_RCC_OscConfig+0x17a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e34b      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d6:	f7fe f843 	bl	8003560 <HAL_GetREVID>
 80054da:	4602      	mov	r2, r0
 80054dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d817      	bhi.n	8005514 <HAL_RCC_OscConfig+0x1b8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	2b40      	cmp	r3, #64	; 0x40
 80054ea:	d108      	bne.n	80054fe <HAL_RCC_OscConfig+0x1a2>
 80054ec:	4b3d      	ldr	r3, [pc, #244]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054f4:	4a3b      	ldr	r2, [pc, #236]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80054f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054fa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054fc:	e07a      	b.n	80055f4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fe:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	031b      	lsls	r3, r3, #12
 800550c:	4935      	ldr	r1, [pc, #212]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 800550e:	4313      	orrs	r3, r2
 8005510:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005512:	e06f      	b.n	80055f4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005514:	4b33      	ldr	r3, [pc, #204]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	061b      	lsls	r3, r3, #24
 8005522:	4930      	ldr	r1, [pc, #192]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005524:	4313      	orrs	r3, r2
 8005526:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005528:	e064      	b.n	80055f4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d045      	beq.n	80055be <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005532:	4b2c      	ldr	r3, [pc, #176]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 0219 	bic.w	r2, r3, #25
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	4929      	ldr	r1, [pc, #164]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005544:	f7fd ffde 	bl	8003504 <HAL_GetTick>
 8005548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800554c:	f7fd ffda 	bl	8003504 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e307      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800555e:	4b21      	ldr	r3, [pc, #132]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800556a:	f7fd fff9 	bl	8003560 <HAL_GetREVID>
 800556e:	4602      	mov	r2, r0
 8005570:	f241 0303 	movw	r3, #4099	; 0x1003
 8005574:	429a      	cmp	r2, r3
 8005576:	d817      	bhi.n	80055a8 <HAL_RCC_OscConfig+0x24c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d108      	bne.n	8005592 <HAL_RCC_OscConfig+0x236>
 8005580:	4b18      	ldr	r3, [pc, #96]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005588:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 800558a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800558e:	6053      	str	r3, [r2, #4]
 8005590:	e030      	b.n	80055f4 <HAL_RCC_OscConfig+0x298>
 8005592:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	031b      	lsls	r3, r3, #12
 80055a0:	4910      	ldr	r1, [pc, #64]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	604b      	str	r3, [r1, #4]
 80055a6:	e025      	b.n	80055f4 <HAL_RCC_OscConfig+0x298>
 80055a8:	4b0e      	ldr	r3, [pc, #56]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	061b      	lsls	r3, r3, #24
 80055b6:	490b      	ldr	r1, [pc, #44]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80055b8:	4313      	orrs	r3, r2
 80055ba:	604b      	str	r3, [r1, #4]
 80055bc:	e01a      	b.n	80055f4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a08      	ldr	r2, [pc, #32]	; (80055e4 <HAL_RCC_OscConfig+0x288>)
 80055c4:	f023 0301 	bic.w	r3, r3, #1
 80055c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ca:	f7fd ff9b 	bl	8003504 <HAL_GetTick>
 80055ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055d0:	e00a      	b.n	80055e8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055d2:	f7fd ff97 	bl	8003504 <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d903      	bls.n	80055e8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e2c4      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
 80055e4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055e8:	4ba4      	ldr	r3, [pc, #656]	; (800587c <HAL_RCC_OscConfig+0x520>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1ee      	bne.n	80055d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80a9 	beq.w	8005754 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005602:	4b9e      	ldr	r3, [pc, #632]	; (800587c <HAL_RCC_OscConfig+0x520>)
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800560a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800560c:	4b9b      	ldr	r3, [pc, #620]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800560e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005610:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d007      	beq.n	8005628 <HAL_RCC_OscConfig+0x2cc>
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b18      	cmp	r3, #24
 800561c:	d13a      	bne.n	8005694 <HAL_RCC_OscConfig+0x338>
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d135      	bne.n	8005694 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005628:	4b94      	ldr	r3, [pc, #592]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <HAL_RCC_OscConfig+0x2e4>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	2b80      	cmp	r3, #128	; 0x80
 800563a:	d001      	beq.n	8005640 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e296      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005640:	f7fd ff8e 	bl	8003560 <HAL_GetREVID>
 8005644:	4602      	mov	r2, r0
 8005646:	f241 0303 	movw	r3, #4099	; 0x1003
 800564a:	429a      	cmp	r2, r3
 800564c:	d817      	bhi.n	800567e <HAL_RCC_OscConfig+0x322>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	2b20      	cmp	r3, #32
 8005654:	d108      	bne.n	8005668 <HAL_RCC_OscConfig+0x30c>
 8005656:	4b89      	ldr	r3, [pc, #548]	; (800587c <HAL_RCC_OscConfig+0x520>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800565e:	4a87      	ldr	r2, [pc, #540]	; (800587c <HAL_RCC_OscConfig+0x520>)
 8005660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005664:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005666:	e075      	b.n	8005754 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005668:	4b84      	ldr	r3, [pc, #528]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	069b      	lsls	r3, r3, #26
 8005676:	4981      	ldr	r1, [pc, #516]	; (800587c <HAL_RCC_OscConfig+0x520>)
 8005678:	4313      	orrs	r3, r2
 800567a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800567c:	e06a      	b.n	8005754 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800567e:	4b7f      	ldr	r3, [pc, #508]	; (800587c <HAL_RCC_OscConfig+0x520>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	061b      	lsls	r3, r3, #24
 800568c:	497b      	ldr	r1, [pc, #492]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800568e:	4313      	orrs	r3, r2
 8005690:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005692:	e05f      	b.n	8005754 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d042      	beq.n	8005722 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800569c:	4b77      	ldr	r3, [pc, #476]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a76      	ldr	r2, [pc, #472]	; (800587c <HAL_RCC_OscConfig+0x520>)
 80056a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a8:	f7fd ff2c 	bl	8003504 <HAL_GetTick>
 80056ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056b0:	f7fd ff28 	bl	8003504 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e255      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056c2:	4b6e      	ldr	r3, [pc, #440]	; (800587c <HAL_RCC_OscConfig+0x520>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056ce:	f7fd ff47 	bl	8003560 <HAL_GetREVID>
 80056d2:	4602      	mov	r2, r0
 80056d4:	f241 0303 	movw	r3, #4099	; 0x1003
 80056d8:	429a      	cmp	r2, r3
 80056da:	d817      	bhi.n	800570c <HAL_RCC_OscConfig+0x3b0>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	d108      	bne.n	80056f6 <HAL_RCC_OscConfig+0x39a>
 80056e4:	4b65      	ldr	r3, [pc, #404]	; (800587c <HAL_RCC_OscConfig+0x520>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056ec:	4a63      	ldr	r2, [pc, #396]	; (800587c <HAL_RCC_OscConfig+0x520>)
 80056ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f2:	6053      	str	r3, [r2, #4]
 80056f4:	e02e      	b.n	8005754 <HAL_RCC_OscConfig+0x3f8>
 80056f6:	4b61      	ldr	r3, [pc, #388]	; (800587c <HAL_RCC_OscConfig+0x520>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	069b      	lsls	r3, r3, #26
 8005704:	495d      	ldr	r1, [pc, #372]	; (800587c <HAL_RCC_OscConfig+0x520>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
 800570a:	e023      	b.n	8005754 <HAL_RCC_OscConfig+0x3f8>
 800570c:	4b5b      	ldr	r3, [pc, #364]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	061b      	lsls	r3, r3, #24
 800571a:	4958      	ldr	r1, [pc, #352]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800571c:	4313      	orrs	r3, r2
 800571e:	60cb      	str	r3, [r1, #12]
 8005720:	e018      	b.n	8005754 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005722:	4b56      	ldr	r3, [pc, #344]	; (800587c <HAL_RCC_OscConfig+0x520>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a55      	ldr	r2, [pc, #340]	; (800587c <HAL_RCC_OscConfig+0x520>)
 8005728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800572c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572e:	f7fd fee9 	bl	8003504 <HAL_GetTick>
 8005732:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005736:	f7fd fee5 	bl	8003504 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e212      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005748:	4b4c      	ldr	r3, [pc, #304]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1f0      	bne.n	8005736 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0308 	and.w	r3, r3, #8
 800575c:	2b00      	cmp	r3, #0
 800575e:	d036      	beq.n	80057ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d019      	beq.n	800579c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005768:	4b44      	ldr	r3, [pc, #272]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800576a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800576c:	4a43      	ldr	r2, [pc, #268]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005774:	f7fd fec6 	bl	8003504 <HAL_GetTick>
 8005778:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800577c:	f7fd fec2 	bl	8003504 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e1ef      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800578e:	4b3b      	ldr	r3, [pc, #236]	; (800587c <HAL_RCC_OscConfig+0x520>)
 8005790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <HAL_RCC_OscConfig+0x420>
 800579a:	e018      	b.n	80057ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800579c:	4b37      	ldr	r3, [pc, #220]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800579e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a0:	4a36      	ldr	r2, [pc, #216]	; (800587c <HAL_RCC_OscConfig+0x520>)
 80057a2:	f023 0301 	bic.w	r3, r3, #1
 80057a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fd feac 	bl	8003504 <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b0:	f7fd fea8 	bl	8003504 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e1d5      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057c2:	4b2e      	ldr	r3, [pc, #184]	; (800587c <HAL_RCC_OscConfig+0x520>)
 80057c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d036      	beq.n	8005848 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d019      	beq.n	8005816 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057e2:	4b26      	ldr	r3, [pc, #152]	; (800587c <HAL_RCC_OscConfig+0x520>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a25      	ldr	r2, [pc, #148]	; (800587c <HAL_RCC_OscConfig+0x520>)
 80057e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057ee:	f7fd fe89 	bl	8003504 <HAL_GetTick>
 80057f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057f6:	f7fd fe85 	bl	8003504 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e1b2      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005808:	4b1c      	ldr	r3, [pc, #112]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0f0      	beq.n	80057f6 <HAL_RCC_OscConfig+0x49a>
 8005814:	e018      	b.n	8005848 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005816:	4b19      	ldr	r3, [pc, #100]	; (800587c <HAL_RCC_OscConfig+0x520>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a18      	ldr	r2, [pc, #96]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800581c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005820:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005822:	f7fd fe6f 	bl	8003504 <HAL_GetTick>
 8005826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800582a:	f7fd fe6b 	bl	8003504 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e198      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800583c:	4b0f      	ldr	r3, [pc, #60]	; (800587c <HAL_RCC_OscConfig+0x520>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8085 	beq.w	8005960 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005856:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <HAL_RCC_OscConfig+0x524>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a09      	ldr	r2, [pc, #36]	; (8005880 <HAL_RCC_OscConfig+0x524>)
 800585c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005862:	f7fd fe4f 	bl	8003504 <HAL_GetTick>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005868:	e00c      	b.n	8005884 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800586a:	f7fd fe4b 	bl	8003504 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b64      	cmp	r3, #100	; 0x64
 8005876:	d905      	bls.n	8005884 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e178      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
 800587c:	58024400 	.word	0x58024400
 8005880:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005884:	4b96      	ldr	r3, [pc, #600]	; (8005ae0 <HAL_RCC_OscConfig+0x784>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0ec      	beq.n	800586a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d106      	bne.n	80058a6 <HAL_RCC_OscConfig+0x54a>
 8005898:	4b92      	ldr	r3, [pc, #584]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 800589a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589c:	4a91      	ldr	r2, [pc, #580]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6713      	str	r3, [r2, #112]	; 0x70
 80058a4:	e02d      	b.n	8005902 <HAL_RCC_OscConfig+0x5a6>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCC_OscConfig+0x56c>
 80058ae:	4b8d      	ldr	r3, [pc, #564]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b2:	4a8c      	ldr	r2, [pc, #560]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	6713      	str	r3, [r2, #112]	; 0x70
 80058ba:	4b8a      	ldr	r3, [pc, #552]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058be:	4a89      	ldr	r2, [pc, #548]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058c0:	f023 0304 	bic.w	r3, r3, #4
 80058c4:	6713      	str	r3, [r2, #112]	; 0x70
 80058c6:	e01c      	b.n	8005902 <HAL_RCC_OscConfig+0x5a6>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b05      	cmp	r3, #5
 80058ce:	d10c      	bne.n	80058ea <HAL_RCC_OscConfig+0x58e>
 80058d0:	4b84      	ldr	r3, [pc, #528]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	4a83      	ldr	r2, [pc, #524]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058d6:	f043 0304 	orr.w	r3, r3, #4
 80058da:	6713      	str	r3, [r2, #112]	; 0x70
 80058dc:	4b81      	ldr	r3, [pc, #516]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	4a80      	ldr	r2, [pc, #512]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	6713      	str	r3, [r2, #112]	; 0x70
 80058e8:	e00b      	b.n	8005902 <HAL_RCC_OscConfig+0x5a6>
 80058ea:	4b7e      	ldr	r3, [pc, #504]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	4a7d      	ldr	r2, [pc, #500]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	6713      	str	r3, [r2, #112]	; 0x70
 80058f6:	4b7b      	ldr	r3, [pc, #492]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	4a7a      	ldr	r2, [pc, #488]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80058fc:	f023 0304 	bic.w	r3, r3, #4
 8005900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d015      	beq.n	8005936 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590a:	f7fd fdfb 	bl	8003504 <HAL_GetTick>
 800590e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005910:	e00a      	b.n	8005928 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005912:	f7fd fdf7 	bl	8003504 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005920:	4293      	cmp	r3, r2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e122      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005928:	4b6e      	ldr	r3, [pc, #440]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 800592a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0ee      	beq.n	8005912 <HAL_RCC_OscConfig+0x5b6>
 8005934:	e014      	b.n	8005960 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005936:	f7fd fde5 	bl	8003504 <HAL_GetTick>
 800593a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fd fde1 	bl	8003504 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e10c      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005954:	4b63      	ldr	r3, [pc, #396]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1ee      	bne.n	800593e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8101 	beq.w	8005b6c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800596a:	4b5e      	ldr	r3, [pc, #376]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005972:	2b18      	cmp	r3, #24
 8005974:	f000 80bc 	beq.w	8005af0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	2b02      	cmp	r3, #2
 800597e:	f040 8095 	bne.w	8005aac <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005982:	4b58      	ldr	r3, [pc, #352]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a57      	ldr	r2, [pc, #348]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800598c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598e:	f7fd fdb9 	bl	8003504 <HAL_GetTick>
 8005992:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005994:	e008      	b.n	80059a8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005996:	f7fd fdb5 	bl	8003504 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d901      	bls.n	80059a8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e0e2      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059a8:	4b4e      	ldr	r3, [pc, #312]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1f0      	bne.n	8005996 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059b4:	4b4b      	ldr	r3, [pc, #300]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80059b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059b8:	4b4b      	ldr	r3, [pc, #300]	; (8005ae8 <HAL_RCC_OscConfig+0x78c>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059c4:	0112      	lsls	r2, r2, #4
 80059c6:	430a      	orrs	r2, r1
 80059c8:	4946      	ldr	r1, [pc, #280]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	628b      	str	r3, [r1, #40]	; 0x28
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	3b01      	subs	r3, #1
 80059d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	3b01      	subs	r3, #1
 80059de:	025b      	lsls	r3, r3, #9
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e8:	3b01      	subs	r3, #1
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	3b01      	subs	r3, #1
 80059f8:	061b      	lsls	r3, r3, #24
 80059fa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80059fe:	4939      	ldr	r1, [pc, #228]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a04:	4b37      	ldr	r3, [pc, #220]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	4a36      	ldr	r2, [pc, #216]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a10:	4b34      	ldr	r3, [pc, #208]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a14:	4b35      	ldr	r3, [pc, #212]	; (8005aec <HAL_RCC_OscConfig+0x790>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a1c:	00d2      	lsls	r2, r2, #3
 8005a1e:	4931      	ldr	r1, [pc, #196]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a24:	4b2f      	ldr	r3, [pc, #188]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	f023 020c 	bic.w	r2, r3, #12
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	492c      	ldr	r1, [pc, #176]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a36:	4b2b      	ldr	r3, [pc, #172]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	f023 0202 	bic.w	r2, r3, #2
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	4928      	ldr	r1, [pc, #160]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a48:	4b26      	ldr	r3, [pc, #152]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	4a25      	ldr	r2, [pc, #148]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a54:	4b23      	ldr	r3, [pc, #140]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4a22      	ldr	r2, [pc, #136]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a60:	4b20      	ldr	r3, [pc, #128]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	4a1f      	ldr	r2, [pc, #124]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a70:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a78:	4b1a      	ldr	r3, [pc, #104]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a19      	ldr	r2, [pc, #100]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fd fd3e 	bl	8003504 <HAL_GetTick>
 8005a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a8a:	e008      	b.n	8005a9e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a8c:	f7fd fd3a 	bl	8003504 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d901      	bls.n	8005a9e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e067      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a9e:	4b11      	ldr	r3, [pc, #68]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0f0      	beq.n	8005a8c <HAL_RCC_OscConfig+0x730>
 8005aaa:	e05f      	b.n	8005b6c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aac:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab8:	f7fd fd24 	bl	8003504 <HAL_GetTick>
 8005abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac0:	f7fd fd20 	bl	8003504 <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e04d      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ad2:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <HAL_RCC_OscConfig+0x788>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1f0      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x764>
 8005ade:	e045      	b.n	8005b6c <HAL_RCC_OscConfig+0x810>
 8005ae0:	58024800 	.word	0x58024800
 8005ae4:	58024400 	.word	0x58024400
 8005ae8:	fffffc0c 	.word	0xfffffc0c
 8005aec:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005af0:	4b21      	ldr	r3, [pc, #132]	; (8005b78 <HAL_RCC_OscConfig+0x81c>)
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005af6:	4b20      	ldr	r3, [pc, #128]	; (8005b78 <HAL_RCC_OscConfig+0x81c>)
 8005af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d031      	beq.n	8005b68 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f003 0203 	and.w	r2, r3, #3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d12a      	bne.n	8005b68 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d122      	bne.n	8005b68 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d11a      	bne.n	8005b68 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	0a5b      	lsrs	r3, r3, #9
 8005b36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d111      	bne.n	8005b68 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	0c1b      	lsrs	r3, r3, #16
 8005b48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d108      	bne.n	8005b68 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	0e1b      	lsrs	r3, r3, #24
 8005b5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b62:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e000      	b.n	8005b6e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3730      	adds	r7, #48	; 0x30
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	58024400 	.word	0x58024400

08005b7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b086      	sub	sp, #24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e19c      	b.n	8005eca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b90:	4b8a      	ldr	r3, [pc, #552]	; (8005dbc <HAL_RCC_ClockConfig+0x240>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	683a      	ldr	r2, [r7, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d910      	bls.n	8005bc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b9e:	4b87      	ldr	r3, [pc, #540]	; (8005dbc <HAL_RCC_ClockConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f023 020f 	bic.w	r2, r3, #15
 8005ba6:	4985      	ldr	r1, [pc, #532]	; (8005dbc <HAL_RCC_ClockConfig+0x240>)
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bae:	4b83      	ldr	r3, [pc, #524]	; (8005dbc <HAL_RCC_ClockConfig+0x240>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d001      	beq.n	8005bc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e184      	b.n	8005eca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d010      	beq.n	8005bee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	691a      	ldr	r2, [r3, #16]
 8005bd0:	4b7b      	ldr	r3, [pc, #492]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d908      	bls.n	8005bee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005bdc:	4b78      	ldr	r3, [pc, #480]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	4975      	ldr	r1, [pc, #468]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d010      	beq.n	8005c1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695a      	ldr	r2, [r3, #20]
 8005bfe:	4b70      	ldr	r3, [pc, #448]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d908      	bls.n	8005c1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c0a:	4b6d      	ldr	r3, [pc, #436]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	496a      	ldr	r1, [pc, #424]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0310 	and.w	r3, r3, #16
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d010      	beq.n	8005c4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	4b64      	ldr	r3, [pc, #400]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d908      	bls.n	8005c4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c38:	4b61      	ldr	r3, [pc, #388]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	495e      	ldr	r1, [pc, #376]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d010      	beq.n	8005c78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	69da      	ldr	r2, [r3, #28]
 8005c5a:	4b59      	ldr	r3, [pc, #356]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d908      	bls.n	8005c78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c66:	4b56      	ldr	r3, [pc, #344]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	4953      	ldr	r1, [pc, #332]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0302 	and.w	r3, r3, #2
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d010      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	4b4d      	ldr	r3, [pc, #308]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d908      	bls.n	8005ca6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c94:	4b4a      	ldr	r3, [pc, #296]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f023 020f 	bic.w	r2, r3, #15
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	4947      	ldr	r1, [pc, #284]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d055      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cb2:	4b43      	ldr	r3, [pc, #268]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	4940      	ldr	r1, [pc, #256]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d107      	bne.n	8005cdc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ccc:	4b3c      	ldr	r3, [pc, #240]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d121      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0f6      	b.n	8005eca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d107      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ce4:	4b36      	ldr	r3, [pc, #216]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d115      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0ea      	b.n	8005eca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d107      	bne.n	8005d0c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cfc:	4b30      	ldr	r3, [pc, #192]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d109      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0de      	b.n	8005eca <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d0c:	4b2c      	ldr	r3, [pc, #176]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0d6      	b.n	8005eca <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d1c:	4b28      	ldr	r3, [pc, #160]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f023 0207 	bic.w	r2, r3, #7
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	4925      	ldr	r1, [pc, #148]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2e:	f7fd fbe9 	bl	8003504 <HAL_GetTick>
 8005d32:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d34:	e00a      	b.n	8005d4c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d36:	f7fd fbe5 	bl	8003504 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e0be      	b.n	8005eca <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d4c:	4b1c      	ldr	r3, [pc, #112]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	00db      	lsls	r3, r3, #3
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d1eb      	bne.n	8005d36 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d010      	beq.n	8005d8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	f003 030f 	and.w	r3, r3, #15
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d208      	bcs.n	8005d8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d7a:	4b11      	ldr	r3, [pc, #68]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005d7c:	699b      	ldr	r3, [r3, #24]
 8005d7e:	f023 020f 	bic.w	r2, r3, #15
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	490e      	ldr	r1, [pc, #56]	; (8005dc0 <HAL_RCC_ClockConfig+0x244>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d8c:	4b0b      	ldr	r3, [pc, #44]	; (8005dbc <HAL_RCC_ClockConfig+0x240>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 030f 	and.w	r3, r3, #15
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d214      	bcs.n	8005dc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <HAL_RCC_ClockConfig+0x240>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f023 020f 	bic.w	r2, r3, #15
 8005da2:	4906      	ldr	r1, [pc, #24]	; (8005dbc <HAL_RCC_ClockConfig+0x240>)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005daa:	4b04      	ldr	r3, [pc, #16]	; (8005dbc <HAL_RCC_ClockConfig+0x240>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d005      	beq.n	8005dc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e086      	b.n	8005eca <HAL_RCC_ClockConfig+0x34e>
 8005dbc:	52002000 	.word	0x52002000
 8005dc0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d010      	beq.n	8005df2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	4b3f      	ldr	r3, [pc, #252]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d208      	bcs.n	8005df2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005de0:	4b3c      	ldr	r3, [pc, #240]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	4939      	ldr	r1, [pc, #228]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d010      	beq.n	8005e20 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695a      	ldr	r2, [r3, #20]
 8005e02:	4b34      	ldr	r3, [pc, #208]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e04:	69db      	ldr	r3, [r3, #28]
 8005e06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d208      	bcs.n	8005e20 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e0e:	4b31      	ldr	r3, [pc, #196]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	695b      	ldr	r3, [r3, #20]
 8005e1a:	492e      	ldr	r1, [pc, #184]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0310 	and.w	r3, r3, #16
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d010      	beq.n	8005e4e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	699a      	ldr	r2, [r3, #24]
 8005e30:	4b28      	ldr	r3, [pc, #160]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d208      	bcs.n	8005e4e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e3c:	4b25      	ldr	r3, [pc, #148]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	699b      	ldr	r3, [r3, #24]
 8005e48:	4922      	ldr	r1, [pc, #136]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d010      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69da      	ldr	r2, [r3, #28]
 8005e5e:	4b1d      	ldr	r3, [pc, #116]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d208      	bcs.n	8005e7c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e6a:	4b1a      	ldr	r3, [pc, #104]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	4917      	ldr	r1, [pc, #92]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e7c:	f000 f834 	bl	8005ee8 <HAL_RCC_GetSysClockFreq>
 8005e80:	4601      	mov	r1, r0
 8005e82:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	0a1b      	lsrs	r3, r3, #8
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <HAL_RCC_ClockConfig+0x35c>)
 8005e8e:	5cd3      	ldrb	r3, [r2, r3]
 8005e90:	f003 031f 	and.w	r3, r3, #31
 8005e94:	fa21 f303 	lsr.w	r3, r1, r3
 8005e98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <HAL_RCC_ClockConfig+0x358>)
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	4a0d      	ldr	r2, [pc, #52]	; (8005ed8 <HAL_RCC_ClockConfig+0x35c>)
 8005ea4:	5cd3      	ldrb	r3, [r2, r3]
 8005ea6:	f003 031f 	and.w	r3, r3, #31
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb0:	4a0a      	ldr	r2, [pc, #40]	; (8005edc <HAL_RCC_ClockConfig+0x360>)
 8005eb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005eb4:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <HAL_RCC_ClockConfig+0x364>)
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005eba:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <HAL_RCC_ClockConfig+0x368>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fd f8ea 	bl	8003098 <HAL_InitTick>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	58024400 	.word	0x58024400
 8005ed8:	0800951c 	.word	0x0800951c
 8005edc:	20000804 	.word	0x20000804
 8005ee0:	20000800 	.word	0x20000800
 8005ee4:	20000808 	.word	0x20000808

08005ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b089      	sub	sp, #36	; 0x24
 8005eec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005eee:	4baf      	ldr	r3, [pc, #700]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ef6:	2b18      	cmp	r3, #24
 8005ef8:	f200 814e 	bhi.w	8006198 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005efc:	a201      	add	r2, pc, #4	; (adr r2, 8005f04 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f02:	bf00      	nop
 8005f04:	08005f69 	.word	0x08005f69
 8005f08:	08006199 	.word	0x08006199
 8005f0c:	08006199 	.word	0x08006199
 8005f10:	08006199 	.word	0x08006199
 8005f14:	08006199 	.word	0x08006199
 8005f18:	08006199 	.word	0x08006199
 8005f1c:	08006199 	.word	0x08006199
 8005f20:	08006199 	.word	0x08006199
 8005f24:	08005f8f 	.word	0x08005f8f
 8005f28:	08006199 	.word	0x08006199
 8005f2c:	08006199 	.word	0x08006199
 8005f30:	08006199 	.word	0x08006199
 8005f34:	08006199 	.word	0x08006199
 8005f38:	08006199 	.word	0x08006199
 8005f3c:	08006199 	.word	0x08006199
 8005f40:	08006199 	.word	0x08006199
 8005f44:	08005f95 	.word	0x08005f95
 8005f48:	08006199 	.word	0x08006199
 8005f4c:	08006199 	.word	0x08006199
 8005f50:	08006199 	.word	0x08006199
 8005f54:	08006199 	.word	0x08006199
 8005f58:	08006199 	.word	0x08006199
 8005f5c:	08006199 	.word	0x08006199
 8005f60:	08006199 	.word	0x08006199
 8005f64:	08005f9b 	.word	0x08005f9b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f68:	4b90      	ldr	r3, [pc, #576]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0320 	and.w	r3, r3, #32
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d009      	beq.n	8005f88 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f74:	4b8d      	ldr	r3, [pc, #564]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	08db      	lsrs	r3, r3, #3
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	4a8c      	ldr	r2, [pc, #560]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
 8005f84:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005f86:	e10a      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005f88:	4b89      	ldr	r3, [pc, #548]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005f8a:	61bb      	str	r3, [r7, #24]
    break;
 8005f8c:	e107      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005f8e:	4b89      	ldr	r3, [pc, #548]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005f90:	61bb      	str	r3, [r7, #24]
    break;
 8005f92:	e104      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005f94:	4b88      	ldr	r3, [pc, #544]	; (80061b8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005f96:	61bb      	str	r3, [r7, #24]
    break;
 8005f98:	e101      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f9a:	4b84      	ldr	r3, [pc, #528]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fa4:	4b81      	ldr	r3, [pc, #516]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa8:	091b      	lsrs	r3, r3, #4
 8005faa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fae:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fb0:	4b7e      	ldr	r3, [pc, #504]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005fba:	4b7c      	ldr	r3, [pc, #496]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbe:	08db      	lsrs	r3, r3, #3
 8005fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 80da 	beq.w	8006192 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d05a      	beq.n	800609a <HAL_RCC_GetSysClockFreq+0x1b2>
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d302      	bcc.n	8005fee <HAL_RCC_GetSysClockFreq+0x106>
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d078      	beq.n	80060de <HAL_RCC_GetSysClockFreq+0x1f6>
 8005fec:	e099      	b.n	8006122 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fee:	4b6f      	ldr	r3, [pc, #444]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d02d      	beq.n	8006056 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ffa:	4b6c      	ldr	r3, [pc, #432]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	08db      	lsrs	r3, r3, #3
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	4a6a      	ldr	r2, [pc, #424]	; (80061b0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006006:	fa22 f303 	lsr.w	r3, r2, r3
 800600a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	ee07 3a90 	vmov	s15, r3
 800601c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006024:	4b61      	ldr	r3, [pc, #388]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006034:	ed97 6a02 	vldr	s12, [r7, #8]
 8006038:	eddf 5a60 	vldr	s11, [pc, #384]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2d4>
 800603c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006050:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006054:	e087      	b.n	8006166 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	ee07 3a90 	vmov	s15, r3
 800605c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006060:	eddf 6a57 	vldr	s13, [pc, #348]	; 80061c0 <HAL_RCC_GetSysClockFreq+0x2d8>
 8006064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006068:	4b50      	ldr	r3, [pc, #320]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006070:	ee07 3a90 	vmov	s15, r3
 8006074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006078:	ed97 6a02 	vldr	s12, [r7, #8]
 800607c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2d4>
 8006080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800608c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006094:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006098:	e065      	b.n	8006166 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	ee07 3a90 	vmov	s15, r3
 80060a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a4:	eddf 6a47 	vldr	s13, [pc, #284]	; 80061c4 <HAL_RCC_GetSysClockFreq+0x2dc>
 80060a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ac:	4b3f      	ldr	r3, [pc, #252]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b4:	ee07 3a90 	vmov	s15, r3
 80060b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80060c0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2d4>
 80060c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060dc:	e043      	b.n	8006166 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e8:	eddf 6a37 	vldr	s13, [pc, #220]	; 80061c8 <HAL_RCC_GetSysClockFreq+0x2e0>
 80060ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f0:	4b2e      	ldr	r3, [pc, #184]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006100:	ed97 6a02 	vldr	s12, [r7, #8]
 8006104:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2d4>
 8006108:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006110:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006114:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006120:	e021      	b.n	8006166 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	ee07 3a90 	vmov	s15, r3
 8006128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80061c4 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006130:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006134:	4b1d      	ldr	r3, [pc, #116]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006144:	ed97 6a02 	vldr	s12, [r7, #8]
 8006148:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80061bc <HAL_RCC_GetSysClockFreq+0x2d4>
 800614c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006150:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006154:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006158:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006160:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006164:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006166:	4b11      	ldr	r3, [pc, #68]	; (80061ac <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	0a5b      	lsrs	r3, r3, #9
 800616c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006170:	3301      	adds	r3, #1
 8006172:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	ee07 3a90 	vmov	s15, r3
 800617a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800617e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006182:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800618a:	ee17 3a90 	vmov	r3, s15
 800618e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006190:	e005      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006192:	2300      	movs	r3, #0
 8006194:	61bb      	str	r3, [r7, #24]
    break;
 8006196:	e002      	b.n	800619e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006198:	4b06      	ldr	r3, [pc, #24]	; (80061b4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800619a:	61bb      	str	r3, [r7, #24]
    break;
 800619c:	bf00      	nop
  }

  return sysclockfreq;
 800619e:	69bb      	ldr	r3, [r7, #24]
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3724      	adds	r7, #36	; 0x24
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	58024400 	.word	0x58024400
 80061b0:	03d09000 	.word	0x03d09000
 80061b4:	003d0900 	.word	0x003d0900
 80061b8:	007a1200 	.word	0x007a1200
 80061bc:	46000000 	.word	0x46000000
 80061c0:	4c742400 	.word	0x4c742400
 80061c4:	4a742400 	.word	0x4a742400
 80061c8:	4af42400 	.word	0x4af42400

080061cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061d2:	f7ff fe89 	bl	8005ee8 <HAL_RCC_GetSysClockFreq>
 80061d6:	4601      	mov	r1, r0
 80061d8:	4b10      	ldr	r3, [pc, #64]	; (800621c <HAL_RCC_GetHCLKFreq+0x50>)
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	0a1b      	lsrs	r3, r3, #8
 80061de:	f003 030f 	and.w	r3, r3, #15
 80061e2:	4a0f      	ldr	r2, [pc, #60]	; (8006220 <HAL_RCC_GetHCLKFreq+0x54>)
 80061e4:	5cd3      	ldrb	r3, [r2, r3]
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	fa21 f303 	lsr.w	r3, r1, r3
 80061ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <HAL_RCC_GetHCLKFreq+0x50>)
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	f003 030f 	and.w	r3, r3, #15
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <HAL_RCC_GetHCLKFreq+0x54>)
 80061fa:	5cd3      	ldrb	r3, [r2, r3]
 80061fc:	f003 031f 	and.w	r3, r3, #31
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	fa22 f303 	lsr.w	r3, r2, r3
 8006206:	4a07      	ldr	r2, [pc, #28]	; (8006224 <HAL_RCC_GetHCLKFreq+0x58>)
 8006208:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800620a:	4a07      	ldr	r2, [pc, #28]	; (8006228 <HAL_RCC_GetHCLKFreq+0x5c>)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006210:	4b04      	ldr	r3, [pc, #16]	; (8006224 <HAL_RCC_GetHCLKFreq+0x58>)
 8006212:	681b      	ldr	r3, [r3, #0]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	58024400 	.word	0x58024400
 8006220:	0800951c 	.word	0x0800951c
 8006224:	20000804 	.word	0x20000804
 8006228:	20000800 	.word	0x20000800

0800622c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006230:	f7ff ffcc 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 8006234:	4601      	mov	r1, r0
 8006236:	4b06      	ldr	r3, [pc, #24]	; (8006250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	091b      	lsrs	r3, r3, #4
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	4a04      	ldr	r2, [pc, #16]	; (8006254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006242:	5cd3      	ldrb	r3, [r2, r3]
 8006244:	f003 031f 	and.w	r3, r3, #31
 8006248:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800624c:	4618      	mov	r0, r3
 800624e:	bd80      	pop	{r7, pc}
 8006250:	58024400 	.word	0x58024400
 8006254:	0800951c 	.word	0x0800951c

08006258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800625c:	f7ff ffb6 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 8006260:	4601      	mov	r1, r0
 8006262:	4b06      	ldr	r3, [pc, #24]	; (800627c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	0a1b      	lsrs	r3, r3, #8
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	4a04      	ldr	r2, [pc, #16]	; (8006280 <HAL_RCC_GetPCLK2Freq+0x28>)
 800626e:	5cd3      	ldrb	r3, [r2, r3]
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006278:	4618      	mov	r0, r3
 800627a:	bd80      	pop	{r7, pc}
 800627c:	58024400 	.word	0x58024400
 8006280:	0800951c 	.word	0x0800951c

08006284 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	223f      	movs	r2, #63	; 0x3f
 8006292:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006294:	4b1a      	ldr	r3, [pc, #104]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f003 0207 	and.w	r2, r3, #7
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80062a0:	4b17      	ldr	r3, [pc, #92]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80062ac:	4b14      	ldr	r3, [pc, #80]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	f003 020f 	and.w	r2, r3, #15
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80062b8:	4b11      	ldr	r3, [pc, #68]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80062c4:	4b0e      	ldr	r3, [pc, #56]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80062d0:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062d2:	69db      	ldr	r3, [r3, #28]
 80062d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80062dc:	4b08      	ldr	r3, [pc, #32]	; (8006300 <HAL_RCC_GetClockConfig+0x7c>)
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062e8:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_RCC_GetClockConfig+0x80>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 020f 	and.w	r2, r3, #15
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	601a      	str	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr
 8006300:	58024400 	.word	0x58024400
 8006304:	52002000 	.word	0x52002000

08006308 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006310:	2300      	movs	r3, #0
 8006312:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006314:	2300      	movs	r3, #0
 8006316:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d03d      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800632c:	d013      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800632e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006332:	d802      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d007      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006338:	e01f      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800633a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800633e:	d013      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006340:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006344:	d01c      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006346:	e018      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006348:	4baf      	ldr	r3, [pc, #700]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	4aae      	ldr	r2, [pc, #696]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800634e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006354:	e015      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3304      	adds	r3, #4
 800635a:	2102      	movs	r1, #2
 800635c:	4618      	mov	r0, r3
 800635e:	f001 f96f 	bl	8007640 <RCCEx_PLL2_Config>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006366:	e00c      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3324      	adds	r3, #36	; 0x24
 800636c:	2102      	movs	r1, #2
 800636e:	4618      	mov	r0, r3
 8006370:	f001 fa18 	bl	80077a4 <RCCEx_PLL3_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006378:	e003      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
      break;
 800637e:	e000      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006382:	7dfb      	ldrb	r3, [r7, #23]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d109      	bne.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006388:	4b9f      	ldr	r3, [pc, #636]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006394:	499c      	ldr	r1, [pc, #624]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006396:	4313      	orrs	r3, r2
 8006398:	650b      	str	r3, [r1, #80]	; 0x50
 800639a:	e001      	b.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639c:	7dfb      	ldrb	r3, [r7, #23]
 800639e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d03d      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d826      	bhi.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063d1 	.word	0x080063d1
 80063c0:	080063df 	.word	0x080063df
 80063c4:	080063f1 	.word	0x080063f1
 80063c8:	08006409 	.word	0x08006409
 80063cc:	08006409 	.word	0x08006409
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063d0:	4b8d      	ldr	r3, [pc, #564]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	4a8c      	ldr	r2, [pc, #560]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063dc:	e015      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	3304      	adds	r3, #4
 80063e2:	2100      	movs	r1, #0
 80063e4:	4618      	mov	r0, r3
 80063e6:	f001 f92b 	bl	8007640 <RCCEx_PLL2_Config>
 80063ea:	4603      	mov	r3, r0
 80063ec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063ee:	e00c      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	3324      	adds	r3, #36	; 0x24
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 f9d4 	bl	80077a4 <RCCEx_PLL3_Config>
 80063fc:	4603      	mov	r3, r0
 80063fe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006400:	e003      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	75fb      	strb	r3, [r7, #23]
      break;
 8006406:	e000      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006408:	bf00      	nop
    }

    if(ret == HAL_OK)
 800640a:	7dfb      	ldrb	r3, [r7, #23]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006410:	4b7d      	ldr	r3, [pc, #500]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006414:	f023 0207 	bic.w	r2, r3, #7
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641c:	497a      	ldr	r1, [pc, #488]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800641e:	4313      	orrs	r3, r2
 8006420:	650b      	str	r3, [r1, #80]	; 0x50
 8006422:	e001      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
 8006426:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006430:	2b00      	cmp	r3, #0
 8006432:	d03e      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006438:	2b80      	cmp	r3, #128	; 0x80
 800643a:	d01c      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800643c:	2b80      	cmp	r3, #128	; 0x80
 800643e:	d804      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d008      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006444:	2b40      	cmp	r3, #64	; 0x40
 8006446:	d00d      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006448:	e01e      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800644a:	2bc0      	cmp	r3, #192	; 0xc0
 800644c:	d01f      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800644e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006452:	d01e      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006454:	e018      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006456:	4b6c      	ldr	r3, [pc, #432]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645a:	4a6b      	ldr	r2, [pc, #428]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800645c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006460:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006462:	e017      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3304      	adds	r3, #4
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f001 f8e8 	bl	8007640 <RCCEx_PLL2_Config>
 8006470:	4603      	mov	r3, r0
 8006472:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006474:	e00e      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3324      	adds	r3, #36	; 0x24
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f001 f991 	bl	80077a4 <RCCEx_PLL3_Config>
 8006482:	4603      	mov	r3, r0
 8006484:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006486:	e005      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	75fb      	strb	r3, [r7, #23]
      break;
 800648c:	e002      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800648e:	bf00      	nop
 8006490:	e000      	b.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8006492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006494:	7dfb      	ldrb	r3, [r7, #23]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d109      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800649a:	4b5b      	ldr	r3, [pc, #364]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800649c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a6:	4958      	ldr	r1, [pc, #352]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064a8:	4313      	orrs	r3, r2
 80064aa:	650b      	str	r3, [r1, #80]	; 0x50
 80064ac:	e001      	b.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ae:	7dfb      	ldrb	r3, [r7, #23]
 80064b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d044      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064c8:	d01f      	beq.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80064ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ce:	d805      	bhi.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064d8:	d00e      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80064da:	e01f      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80064dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064e0:	d01f      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80064e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064e6:	d01e      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80064e8:	e018      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ea:	4b47      	ldr	r3, [pc, #284]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ee:	4a46      	ldr	r2, [pc, #280]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064f6:	e017      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3304      	adds	r3, #4
 80064fc:	2100      	movs	r1, #0
 80064fe:	4618      	mov	r0, r3
 8006500:	f001 f89e 	bl	8007640 <RCCEx_PLL2_Config>
 8006504:	4603      	mov	r3, r0
 8006506:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006508:	e00e      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	3324      	adds	r3, #36	; 0x24
 800650e:	2100      	movs	r1, #0
 8006510:	4618      	mov	r0, r3
 8006512:	f001 f947 	bl	80077a4 <RCCEx_PLL3_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800651a:	e005      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	75fb      	strb	r3, [r7, #23]
      break;
 8006520:	e002      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006522:	bf00      	nop
 8006524:	e000      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006528:	7dfb      	ldrb	r3, [r7, #23]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800652e:	4b36      	ldr	r3, [pc, #216]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006532:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800653c:	4932      	ldr	r1, [pc, #200]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800653e:	4313      	orrs	r3, r2
 8006540:	658b      	str	r3, [r1, #88]	; 0x58
 8006542:	e001      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
 8006546:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006550:	2b00      	cmp	r3, #0
 8006552:	d044      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800655a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800655e:	d01f      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006564:	d805      	bhi.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800656a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800656e:	d00e      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006570:	e01f      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8006572:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006576:	d01f      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006578:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800657c:	d01e      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800657e:	e018      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006580:	4b21      	ldr	r3, [pc, #132]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	4a20      	ldr	r2, [pc, #128]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800658a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800658c:	e017      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	3304      	adds	r3, #4
 8006592:	2100      	movs	r1, #0
 8006594:	4618      	mov	r0, r3
 8006596:	f001 f853 	bl	8007640 <RCCEx_PLL2_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800659e:	e00e      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	3324      	adds	r3, #36	; 0x24
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 f8fc 	bl	80077a4 <RCCEx_PLL3_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065b0:	e005      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	75fb      	strb	r3, [r7, #23]
      break;
 80065b6:	e002      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80065b8:	bf00      	nop
 80065ba:	e000      	b.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80065bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065c4:	4b10      	ldr	r3, [pc, #64]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065d2:	490d      	ldr	r1, [pc, #52]	; (8006608 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	658b      	str	r3, [r1, #88]	; 0x58
 80065d8:	e001      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
 80065dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d035      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ee:	2b10      	cmp	r3, #16
 80065f0:	d00c      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x304>
 80065f2:	2b10      	cmp	r3, #16
 80065f4:	d802      	bhi.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01b      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80065fa:	e017      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x324>
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d00c      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006600:	2b30      	cmp	r3, #48	; 0x30
 8006602:	d018      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006604:	e012      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8006606:	bf00      	nop
 8006608:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800660c:	4baf      	ldr	r3, [pc, #700]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	4aae      	ldr	r2, [pc, #696]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006616:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006618:	e00e      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3304      	adds	r3, #4
 800661e:	2102      	movs	r1, #2
 8006620:	4618      	mov	r0, r3
 8006622:	f001 f80d 	bl	8007640 <RCCEx_PLL2_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800662a:	e005      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	75fb      	strb	r3, [r7, #23]
      break;
 8006630:	e002      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006636:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006638:	7dfb      	ldrb	r3, [r7, #23]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800663e:	4ba3      	ldr	r3, [pc, #652]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006642:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800664a:	49a0      	ldr	r1, [pc, #640]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800664c:	4313      	orrs	r3, r2
 800664e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006650:	e001      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006652:	7dfb      	ldrb	r3, [r7, #23]
 8006654:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d042      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666a:	d01f      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800666c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006670:	d805      	bhi.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667a:	d00e      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800667c:	e01f      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800667e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006682:	d01f      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006688:	d01e      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800668a:	e018      	b.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800668c:	4b8f      	ldr	r3, [pc, #572]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4a8e      	ldr	r2, [pc, #568]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006698:	e017      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3304      	adds	r3, #4
 800669e:	2100      	movs	r1, #0
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 ffcd 	bl	8007640 <RCCEx_PLL2_Config>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066aa:	e00e      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3324      	adds	r3, #36	; 0x24
 80066b0:	2100      	movs	r1, #0
 80066b2:	4618      	mov	r0, r3
 80066b4:	f001 f876 	bl	80077a4 <RCCEx_PLL3_Config>
 80066b8:	4603      	mov	r3, r0
 80066ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066bc:	e005      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	75fb      	strb	r3, [r7, #23]
      break;
 80066c2:	e002      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80066c4:	bf00      	nop
 80066c6:	e000      	b.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80066c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d109      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066d0:	4b7e      	ldr	r3, [pc, #504]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066dc:	497b      	ldr	r1, [pc, #492]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	650b      	str	r3, [r1, #80]	; 0x50
 80066e2:	e001      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
 80066e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d042      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066fc:	d01b      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80066fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006702:	d805      	bhi.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006704:	2b00      	cmp	r3, #0
 8006706:	d022      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670c:	d00a      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800670e:	e01b      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8006710:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006714:	d01d      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8006716:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800671a:	d01c      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800671c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006720:	d01b      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8006722:	e011      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	2101      	movs	r1, #1
 800672a:	4618      	mov	r0, r3
 800672c:	f000 ff88 	bl	8007640 <RCCEx_PLL2_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006734:	e012      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3324      	adds	r3, #36	; 0x24
 800673a:	2101      	movs	r1, #1
 800673c:	4618      	mov	r0, r3
 800673e:	f001 f831 	bl	80077a4 <RCCEx_PLL3_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006746:	e009      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	75fb      	strb	r3, [r7, #23]
      break;
 800674c:	e006      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800674e:	bf00      	nop
 8006750:	e004      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006752:	bf00      	nop
 8006754:	e002      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006756:	bf00      	nop
 8006758:	e000      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800675a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800675c:	7dfb      	ldrb	r3, [r7, #23]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d109      	bne.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006762:	4b5a      	ldr	r3, [pc, #360]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006766:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800676e:	4957      	ldr	r1, [pc, #348]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006770:	4313      	orrs	r3, r2
 8006772:	650b      	str	r3, [r1, #80]	; 0x50
 8006774:	e001      	b.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006776:	7dfb      	ldrb	r3, [r7, #23]
 8006778:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d044      	beq.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800678c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006790:	d01b      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006796:	d805      	bhi.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006798:	2b00      	cmp	r3, #0
 800679a:	d022      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800679c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067a0:	d00a      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80067a2:	e01b      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80067a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067a8:	d01d      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80067aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067ae:	d01c      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80067b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067b4:	d01b      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80067b6:	e011      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3304      	adds	r3, #4
 80067bc:	2101      	movs	r1, #1
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 ff3e 	bl	8007640 <RCCEx_PLL2_Config>
 80067c4:	4603      	mov	r3, r0
 80067c6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067c8:	e012      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3324      	adds	r3, #36	; 0x24
 80067ce:	2101      	movs	r1, #1
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 ffe7 	bl	80077a4 <RCCEx_PLL3_Config>
 80067d6:	4603      	mov	r3, r0
 80067d8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067da:	e009      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	75fb      	strb	r3, [r7, #23]
      break;
 80067e0:	e006      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067e2:	bf00      	nop
 80067e4:	e004      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10a      	bne.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067f6:	4b35      	ldr	r3, [pc, #212]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006804:	4931      	ldr	r1, [pc, #196]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006806:	4313      	orrs	r3, r2
 8006808:	658b      	str	r3, [r1, #88]	; 0x58
 800680a:	e001      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d02d      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006820:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006824:	d005      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682a:	d009      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d013      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006830:	e00f      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006832:	4b26      	ldr	r3, [pc, #152]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	4a25      	ldr	r2, [pc, #148]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800683c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800683e:	e00c      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3304      	adds	r3, #4
 8006844:	2101      	movs	r1, #1
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fefa 	bl	8007640 <RCCEx_PLL2_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006850:	e003      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	75fb      	strb	r3, [r7, #23]
      break;
 8006856:	e000      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006860:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006864:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800686c:	4917      	ldr	r1, [pc, #92]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800686e:	4313      	orrs	r3, r2
 8006870:	650b      	str	r3, [r1, #80]	; 0x50
 8006872:	e001      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d035      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006888:	2b03      	cmp	r3, #3
 800688a:	d81b      	bhi.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800688c:	a201      	add	r2, pc, #4	; (adr r2, 8006894 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006892:	bf00      	nop
 8006894:	080068d1 	.word	0x080068d1
 8006898:	080068a5 	.word	0x080068a5
 800689c:	080068b3 	.word	0x080068b3
 80068a0:	080068d1 	.word	0x080068d1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068a4:	4b09      	ldr	r3, [pc, #36]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	4a08      	ldr	r2, [pc, #32]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80068aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068b0:	e00f      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3304      	adds	r3, #4
 80068b6:	2102      	movs	r1, #2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fec1 	bl	8007640 <RCCEx_PLL2_Config>
 80068be:	4603      	mov	r3, r0
 80068c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068c2:	e006      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068c4:	2301      	movs	r3, #1
 80068c6:	75fb      	strb	r3, [r7, #23]
      break;
 80068c8:	e003      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80068ca:	bf00      	nop
 80068cc:	58024400 	.word	0x58024400
      break;
 80068d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068d8:	4bba      	ldr	r3, [pc, #744]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068dc:	f023 0203 	bic.w	r2, r3, #3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e4:	49b7      	ldr	r1, [pc, #732]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068ea:	e001      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 8086 	beq.w	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068fe:	4bb2      	ldr	r3, [pc, #712]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4ab1      	ldr	r2, [pc, #708]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006908:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800690a:	f7fc fdfb 	bl	8003504 <HAL_GetTick>
 800690e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006910:	e009      	b.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006912:	f7fc fdf7 	bl	8003504 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b64      	cmp	r3, #100	; 0x64
 800691e:	d902      	bls.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	75fb      	strb	r3, [r7, #23]
        break;
 8006924:	e005      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006926:	4ba8      	ldr	r3, [pc, #672]	; (8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692e:	2b00      	cmp	r3, #0
 8006930:	d0ef      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d166      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006938:	4ba2      	ldr	r3, [pc, #648]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800693a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006942:	4053      	eors	r3, r2
 8006944:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006948:	2b00      	cmp	r3, #0
 800694a:	d013      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800694c:	4b9d      	ldr	r3, [pc, #628]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800694e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006954:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006956:	4b9b      	ldr	r3, [pc, #620]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695a:	4a9a      	ldr	r2, [pc, #616]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800695c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006960:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006962:	4b98      	ldr	r3, [pc, #608]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	4a97      	ldr	r2, [pc, #604]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800696c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800696e:	4a95      	ldr	r2, [pc, #596]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800697a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800697e:	d115      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006980:	f7fc fdc0 	bl	8003504 <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006986:	e00b      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006988:	f7fc fdbc 	bl	8003504 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	f241 3288 	movw	r2, #5000	; 0x1388
 8006996:	4293      	cmp	r3, r2
 8006998:	d902      	bls.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	75fb      	strb	r3, [r7, #23]
            break;
 800699e:	e005      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069a0:	4b88      	ldr	r3, [pc, #544]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0ed      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80069ac:	7dfb      	ldrb	r3, [r7, #23]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d126      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c0:	d10d      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80069c2:	4b80      	ldr	r3, [pc, #512]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069d0:	0919      	lsrs	r1, r3, #4
 80069d2:	4b7e      	ldr	r3, [pc, #504]	; (8006bcc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80069d4:	400b      	ands	r3, r1
 80069d6:	497b      	ldr	r1, [pc, #492]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069d8:	4313      	orrs	r3, r2
 80069da:	610b      	str	r3, [r1, #16]
 80069dc:	e005      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80069de:	4b79      	ldr	r3, [pc, #484]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	4a78      	ldr	r2, [pc, #480]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069e8:	6113      	str	r3, [r2, #16]
 80069ea:	4b76      	ldr	r3, [pc, #472]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f8:	4972      	ldr	r1, [pc, #456]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	670b      	str	r3, [r1, #112]	; 0x70
 80069fe:	e004      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	75bb      	strb	r3, [r7, #22]
 8006a04:	e001      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0301 	and.w	r3, r3, #1
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d07d      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a1a:	2b28      	cmp	r3, #40	; 0x28
 8006a1c:	d866      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006af3 	.word	0x08006af3
 8006a28:	08006aed 	.word	0x08006aed
 8006a2c:	08006aed 	.word	0x08006aed
 8006a30:	08006aed 	.word	0x08006aed
 8006a34:	08006aed 	.word	0x08006aed
 8006a38:	08006aed 	.word	0x08006aed
 8006a3c:	08006aed 	.word	0x08006aed
 8006a40:	08006aed 	.word	0x08006aed
 8006a44:	08006ac9 	.word	0x08006ac9
 8006a48:	08006aed 	.word	0x08006aed
 8006a4c:	08006aed 	.word	0x08006aed
 8006a50:	08006aed 	.word	0x08006aed
 8006a54:	08006aed 	.word	0x08006aed
 8006a58:	08006aed 	.word	0x08006aed
 8006a5c:	08006aed 	.word	0x08006aed
 8006a60:	08006aed 	.word	0x08006aed
 8006a64:	08006adb 	.word	0x08006adb
 8006a68:	08006aed 	.word	0x08006aed
 8006a6c:	08006aed 	.word	0x08006aed
 8006a70:	08006aed 	.word	0x08006aed
 8006a74:	08006aed 	.word	0x08006aed
 8006a78:	08006aed 	.word	0x08006aed
 8006a7c:	08006aed 	.word	0x08006aed
 8006a80:	08006aed 	.word	0x08006aed
 8006a84:	08006af3 	.word	0x08006af3
 8006a88:	08006aed 	.word	0x08006aed
 8006a8c:	08006aed 	.word	0x08006aed
 8006a90:	08006aed 	.word	0x08006aed
 8006a94:	08006aed 	.word	0x08006aed
 8006a98:	08006aed 	.word	0x08006aed
 8006a9c:	08006aed 	.word	0x08006aed
 8006aa0:	08006aed 	.word	0x08006aed
 8006aa4:	08006af3 	.word	0x08006af3
 8006aa8:	08006aed 	.word	0x08006aed
 8006aac:	08006aed 	.word	0x08006aed
 8006ab0:	08006aed 	.word	0x08006aed
 8006ab4:	08006aed 	.word	0x08006aed
 8006ab8:	08006aed 	.word	0x08006aed
 8006abc:	08006aed 	.word	0x08006aed
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	08006af3 	.word	0x08006af3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3304      	adds	r3, #4
 8006acc:	2101      	movs	r1, #1
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 fdb6 	bl	8007640 <RCCEx_PLL2_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ad8:	e00c      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	3324      	adds	r3, #36	; 0x24
 8006ade:	2101      	movs	r1, #1
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fe5f 	bl	80077a4 <RCCEx_PLL3_Config>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006aea:	e003      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	75fb      	strb	r3, [r7, #23]
      break;
 8006af0:	e000      	b.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006af2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006af4:	7dfb      	ldrb	r3, [r7, #23]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d109      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006afa:	4b32      	ldr	r3, [pc, #200]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b06:	492f      	ldr	r1, [pc, #188]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	654b      	str	r3, [r1, #84]	; 0x54
 8006b0c:	e001      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d037      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d820      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b6f 	.word	0x08006b6f
 8006b30:	08006b45 	.word	0x08006b45
 8006b34:	08006b57 	.word	0x08006b57
 8006b38:	08006b6f 	.word	0x08006b6f
 8006b3c:	08006b6f 	.word	0x08006b6f
 8006b40:	08006b6f 	.word	0x08006b6f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3304      	adds	r3, #4
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fd78 	bl	8007640 <RCCEx_PLL2_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b54:	e00c      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3324      	adds	r3, #36	; 0x24
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fe21 	bl	80077a4 <RCCEx_PLL3_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b66:	e003      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6c:	e000      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d109      	bne.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b76:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7a:	f023 0207 	bic.w	r2, r3, #7
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b82:	4910      	ldr	r1, [pc, #64]	; (8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	654b      	str	r3, [r1, #84]	; 0x54
 8006b88:	e001      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
 8006b8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d040      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba0:	2b05      	cmp	r3, #5
 8006ba2:	d827      	bhi.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006ba4:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006bfb 	.word	0x08006bfb
 8006bb0:	08006bd1 	.word	0x08006bd1
 8006bb4:	08006be3 	.word	0x08006be3
 8006bb8:	08006bfb 	.word	0x08006bfb
 8006bbc:	08006bfb 	.word	0x08006bfb
 8006bc0:	08006bfb 	.word	0x08006bfb
 8006bc4:	58024400 	.word	0x58024400
 8006bc8:	58024800 	.word	0x58024800
 8006bcc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fd32 	bl	8007640 <RCCEx_PLL2_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006be0:	e00c      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	3324      	adds	r3, #36	; 0x24
 8006be6:	2101      	movs	r1, #1
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fddb 	bl	80077a4 <RCCEx_PLL3_Config>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bf2:	e003      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bf8:	e000      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006bfa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c02:	4bb2      	ldr	r3, [pc, #712]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c06:	f023 0207 	bic.w	r2, r3, #7
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c10:	49ae      	ldr	r1, [pc, #696]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	658b      	str	r3, [r1, #88]	; 0x58
 8006c16:	e001      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d044      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c32:	d01b      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006c34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c38:	d805      	bhi.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d022      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c42:	d00a      	beq.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006c44:	e01b      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4a:	d01d      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006c4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c50:	d01c      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c56:	d01b      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006c58:	e011      	b.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f000 fced 	bl	8007640 <RCCEx_PLL2_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c6a:	e012      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	3324      	adds	r3, #36	; 0x24
 8006c70:	2102      	movs	r1, #2
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fd96 	bl	80077a4 <RCCEx_PLL3_Config>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c7c:	e009      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	75fb      	strb	r3, [r7, #23]
      break;
 8006c82:	e006      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c84:	bf00      	nop
 8006c86:	e004      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c88:	bf00      	nop
 8006c8a:	e002      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c8c:	bf00      	nop
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c92:	7dfb      	ldrb	r3, [r7, #23]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10a      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c98:	4b8c      	ldr	r3, [pc, #560]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c9c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca6:	4989      	ldr	r1, [pc, #548]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	654b      	str	r3, [r1, #84]	; 0x54
 8006cac:	e001      	b.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d044      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cc8:	d01b      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cce:	d805      	bhi.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d022      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cd8:	d00a      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006cda:	e01b      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce0:	d01d      	beq.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006ce2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ce6:	d01c      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006ce8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cec:	d01b      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006cee:	e011      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fca2 	bl	8007640 <RCCEx_PLL2_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d00:	e012      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3324      	adds	r3, #36	; 0x24
 8006d06:	2102      	movs	r1, #2
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fd4b 	bl	80077a4 <RCCEx_PLL3_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d12:	e009      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
      break;
 8006d18:	e006      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d1a:	bf00      	nop
 8006d1c:	e004      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d1e:	bf00      	nop
 8006d20:	e002      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d22:	bf00      	nop
 8006d24:	e000      	b.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10a      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d2e:	4b67      	ldr	r3, [pc, #412]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d32:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d3c:	4963      	ldr	r1, [pc, #396]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	658b      	str	r3, [r1, #88]	; 0x58
 8006d42:	e001      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d44:	7dfb      	ldrb	r3, [r7, #23]
 8006d46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d044      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d5e:	d01b      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d64:	d805      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d022      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d6e:	d00a      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d70:	e01b      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006d72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d76:	d01d      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006d78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d7c:	d01c      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006d7e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d82:	d01b      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006d84:	e011      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	3304      	adds	r3, #4
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 fc57 	bl	8007640 <RCCEx_PLL2_Config>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d96:	e012      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3324      	adds	r3, #36	; 0x24
 8006d9c:	2102      	movs	r1, #2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fd00 	bl	80077a4 <RCCEx_PLL3_Config>
 8006da4:	4603      	mov	r3, r0
 8006da6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006da8:	e009      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	75fb      	strb	r3, [r7, #23]
      break;
 8006dae:	e006      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006db0:	bf00      	nop
 8006db2:	e004      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006db4:	bf00      	nop
 8006db6:	e002      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006db8:	bf00      	nop
 8006dba:	e000      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dc4:	4b41      	ldr	r3, [pc, #260]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dd2:	493e      	ldr	r1, [pc, #248]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	658b      	str	r3, [r1, #88]	; 0x58
 8006dd8:	e001      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0308 	and.w	r3, r3, #8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01a      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df4:	d10a      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3324      	adds	r3, #36	; 0x24
 8006dfa:	2102      	movs	r1, #2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 fcd1 	bl	80077a4 <RCCEx_PLL3_Config>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d001      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e0c:	4b2f      	ldr	r3, [pc, #188]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e1a:	492c      	ldr	r1, [pc, #176]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d01a      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e36:	d10a      	bne.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3324      	adds	r3, #36	; 0x24
 8006e3c:	2102      	movs	r1, #2
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fcb0 	bl	80077a4 <RCCEx_PLL3_Config>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e4e:	4b1f      	ldr	r3, [pc, #124]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e5c:	491b      	ldr	r1, [pc, #108]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d032      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e78:	d00d      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006e7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e7e:	d016      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d111      	bne.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3304      	adds	r3, #4
 8006e88:	2100      	movs	r1, #0
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f000 fbd8 	bl	8007640 <RCCEx_PLL2_Config>
 8006e90:	4603      	mov	r3, r0
 8006e92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e94:	e00c      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	3324      	adds	r3, #36	; 0x24
 8006e9a:	2102      	movs	r1, #2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fc81 	bl	80077a4 <RCCEx_PLL3_Config>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ea6:	e003      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8006eac:	e000      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10c      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006eb6:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ec4:	4901      	ldr	r1, [pc, #4]	; (8006ecc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	658b      	str	r3, [r1, #88]	; 0x58
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006ecc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed0:	7dfb      	ldrb	r3, [r7, #23]
 8006ed2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d02f      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006eea:	d00c      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ef0:	d015      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef6:	d10f      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef8:	4b79      	ldr	r3, [pc, #484]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	4a78      	ldr	r2, [pc, #480]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f04:	e00c      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3324      	adds	r3, #36	; 0x24
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f000 fc49 	bl	80077a4 <RCCEx_PLL3_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f16:	e003      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1c:	e000      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006f1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f26:	4b6e      	ldr	r3, [pc, #440]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f34:	496a      	ldr	r1, [pc, #424]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	654b      	str	r3, [r1, #84]	; 0x54
 8006f3a:	e001      	b.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d029      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f58:	d007      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006f5a:	e00f      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5c:	4b60      	ldr	r3, [pc, #384]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	4a5f      	ldr	r2, [pc, #380]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f68:	e00b      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	3304      	adds	r3, #4
 8006f6e:	2102      	movs	r1, #2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fb65 	bl	8007640 <RCCEx_PLL2_Config>
 8006f76:	4603      	mov	r3, r0
 8006f78:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f7a:	e002      	b.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f88:	4b55      	ldr	r3, [pc, #340]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f94:	4952      	ldr	r1, [pc, #328]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f96:	4313      	orrs	r3, r2
 8006f98:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f9a:	e001      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9c:	7dfb      	ldrb	r3, [r7, #23]
 8006f9e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00a      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	3324      	adds	r3, #36	; 0x24
 8006fb0:	2102      	movs	r1, #2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 fbf6 	bl	80077a4 <RCCEx_PLL3_Config>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d02f      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd6:	d00c      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fdc:	d802      	bhi.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d011      	beq.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006fe2:	e00d      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe8:	d00f      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fee:	d00e      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006ff0:	e006      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ff2:	4b3b      	ldr	r3, [pc, #236]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	4a3a      	ldr	r2, [pc, #232]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006ffe:	e007      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
      break;
 8007004:	e004      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8007006:	bf00      	nop
 8007008:	e002      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800700a:	bf00      	nop
 800700c:	e000      	b.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800700e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007010:	7dfb      	ldrb	r3, [r7, #23]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007016:	4b32      	ldr	r3, [pc, #200]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007022:	492f      	ldr	r1, [pc, #188]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007024:	4313      	orrs	r3, r2
 8007026:	654b      	str	r3, [r1, #84]	; 0x54
 8007028:	e001      	b.n	800702e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d008      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800703a:	4b29      	ldr	r3, [pc, #164]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800703c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	4926      	ldr	r1, [pc, #152]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007048:	4313      	orrs	r3, r2
 800704a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007054:	2b00      	cmp	r3, #0
 8007056:	d009      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007058:	4b21      	ldr	r3, [pc, #132]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007066:	491e      	ldr	r1, [pc, #120]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007068:	4313      	orrs	r3, r2
 800706a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d008      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007078:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800707a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007084:	4916      	ldr	r1, [pc, #88]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007086:	4313      	orrs	r3, r2
 8007088:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00d      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007096:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	4a11      	ldr	r2, [pc, #68]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800709c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070a0:	6113      	str	r3, [r2, #16]
 80070a2:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80070ac:	490c      	ldr	r1, [pc, #48]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da08      	bge.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070ba:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80070bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c6:	4906      	ldr	r1, [pc, #24]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80070cc:	7dbb      	ldrb	r3, [r7, #22]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d101      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80070d2:	2300      	movs	r3, #0
 80070d4:	e000      	b.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	58024400 	.word	0x58024400

080070e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80070e8:	f7ff f870 	bl	80061cc <HAL_RCC_GetHCLKFreq>
 80070ec:	4601      	mov	r1, r0
 80070ee:	4b06      	ldr	r3, [pc, #24]	; (8007108 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	091b      	lsrs	r3, r3, #4
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	4a04      	ldr	r2, [pc, #16]	; (800710c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070fa:	5cd3      	ldrb	r3, [r2, r3]
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	58024400 	.word	0x58024400
 800710c:	0800951c 	.word	0x0800951c

08007110 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007110:	b480      	push	{r7}
 8007112:	b089      	sub	sp, #36	; 0x24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007118:	4b9d      	ldr	r3, [pc, #628]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800711a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800711c:	f003 0303 	and.w	r3, r3, #3
 8007120:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007122:	4b9b      	ldr	r3, [pc, #620]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007126:	0b1b      	lsrs	r3, r3, #12
 8007128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800712c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800712e:	4b98      	ldr	r3, [pc, #608]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007132:	091b      	lsrs	r3, r3, #4
 8007134:	f003 0301 	and.w	r3, r3, #1
 8007138:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800713a:	4b95      	ldr	r3, [pc, #596]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800713c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713e:	08db      	lsrs	r3, r3, #3
 8007140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	fb02 f303 	mul.w	r3, r2, r3
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 810a 	beq.w	8007372 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d05a      	beq.n	800721a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007164:	2b01      	cmp	r3, #1
 8007166:	d302      	bcc.n	800716e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007168:	2b02      	cmp	r3, #2
 800716a:	d078      	beq.n	800725e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800716c:	e099      	b.n	80072a2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800716e:	4b88      	ldr	r3, [pc, #544]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0320 	and.w	r3, r3, #32
 8007176:	2b00      	cmp	r3, #0
 8007178:	d02d      	beq.n	80071d6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800717a:	4b85      	ldr	r3, [pc, #532]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	08db      	lsrs	r3, r3, #3
 8007180:	f003 0303 	and.w	r3, r3, #3
 8007184:	4a83      	ldr	r2, [pc, #524]	; (8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007186:	fa22 f303 	lsr.w	r3, r2, r3
 800718a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	ee07 3a90 	vmov	s15, r3
 800719c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a4:	4b7a      	ldr	r3, [pc, #488]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ac:	ee07 3a90 	vmov	s15, r3
 80071b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80071bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071d4:	e087      	b.n	80072e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	ee07 3a90 	vmov	s15, r3
 80071dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800739c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80071e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e8:	4b69      	ldr	r3, [pc, #420]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80071ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f0:	ee07 3a90 	vmov	s15, r3
 80071f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007214:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007218:	e065      	b.n	80072e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	ee07 3a90 	vmov	s15, r3
 8007220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007224:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722c:	4b58      	ldr	r3, [pc, #352]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800722e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007240:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007258:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800725c:	e043      	b.n	80072e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	ee07 3a90 	vmov	s15, r3
 8007264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007268:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800726c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007270:	4b47      	ldr	r3, [pc, #284]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007280:	ed97 6a03 	vldr	s12, [r7, #12]
 8007284:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072a0:	e021      	b.n	80072e6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	ee07 3a90 	vmov	s15, r3
 80072a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ac:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80072b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072b4:	4b36      	ldr	r3, [pc, #216]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072bc:	ee07 3a90 	vmov	s15, r3
 80072c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80072c8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007398 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80072cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072e4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80072e6:	4b2a      	ldr	r3, [pc, #168]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	0a5b      	lsrs	r3, r3, #9
 80072ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f0:	ee07 3a90 	vmov	s15, r3
 80072f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007300:	edd7 6a07 	vldr	s13, [r7, #28]
 8007304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800730c:	ee17 2a90 	vmov	r2, s15
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007314:	4b1e      	ldr	r3, [pc, #120]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	0c1b      	lsrs	r3, r3, #16
 800731a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800731e:	ee07 3a90 	vmov	s15, r3
 8007322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800732a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800732e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800733a:	ee17 2a90 	vmov	r2, s15
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007342:	4b13      	ldr	r3, [pc, #76]	; (8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	0e1b      	lsrs	r3, r3, #24
 8007348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800734c:	ee07 3a90 	vmov	s15, r3
 8007350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007354:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800735c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007368:	ee17 2a90 	vmov	r2, s15
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007370:	e008      	b.n	8007384 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	609a      	str	r2, [r3, #8]
}
 8007384:	bf00      	nop
 8007386:	3724      	adds	r7, #36	; 0x24
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	58024400 	.word	0x58024400
 8007394:	03d09000 	.word	0x03d09000
 8007398:	46000000 	.word	0x46000000
 800739c:	4c742400 	.word	0x4c742400
 80073a0:	4a742400 	.word	0x4a742400
 80073a4:	4af42400 	.word	0x4af42400

080073a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	; 0x24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073b0:	4b9d      	ldr	r3, [pc, #628]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	f003 0303 	and.w	r3, r3, #3
 80073b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80073ba:	4b9b      	ldr	r3, [pc, #620]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80073bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073be:	0d1b      	lsrs	r3, r3, #20
 80073c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80073c6:	4b98      	ldr	r3, [pc, #608]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	0a1b      	lsrs	r3, r3, #8
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80073d2:	4b95      	ldr	r3, [pc, #596]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80073d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d6:	08db      	lsrs	r3, r3, #3
 80073d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	fb02 f303 	mul.w	r3, r2, r3
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 810a 	beq.w	800760a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d05a      	beq.n	80074b2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d302      	bcc.n	8007406 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007400:	2b02      	cmp	r3, #2
 8007402:	d078      	beq.n	80074f6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007404:	e099      	b.n	800753a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007406:	4b88      	ldr	r3, [pc, #544]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d02d      	beq.n	800746e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007412:	4b85      	ldr	r3, [pc, #532]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	4a83      	ldr	r2, [pc, #524]	; (800762c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800741e:	fa22 f303 	lsr.w	r3, r2, r3
 8007422:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	ee07 3a90 	vmov	s15, r3
 800742a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	ee07 3a90 	vmov	s15, r3
 8007434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007438:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743c:	4b7a      	ldr	r3, [pc, #488]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007444:	ee07 3a90 	vmov	s15, r3
 8007448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007450:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007454:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007458:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007460:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007468:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800746c:	e087      	b.n	800757e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007478:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007634 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800747c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007480:	4b69      	ldr	r3, [pc, #420]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007488:	ee07 3a90 	vmov	s15, r3
 800748c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007490:	ed97 6a03 	vldr	s12, [r7, #12]
 8007494:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007498:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074b0:	e065      	b.n	800757e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074bc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80074c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c4:	4b58      	ldr	r3, [pc, #352]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80074c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074cc:	ee07 3a90 	vmov	s15, r3
 80074d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80074d8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80074dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074f4:	e043      	b.n	800757e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007500:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800763c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007508:	4b47      	ldr	r3, [pc, #284]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007510:	ee07 3a90 	vmov	s15, r3
 8007514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007518:	ed97 6a03 	vldr	s12, [r7, #12]
 800751c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800752c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007534:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007538:	e021      	b.n	800757e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	ee07 3a90 	vmov	s15, r3
 8007540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007544:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007638 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800754c:	4b36      	ldr	r3, [pc, #216]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007554:	ee07 3a90 	vmov	s15, r3
 8007558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800755c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007560:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007630 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800756c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007578:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800757c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800757e:	4b2a      	ldr	r3, [pc, #168]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007582:	0a5b      	lsrs	r3, r3, #9
 8007584:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007588:	ee07 3a90 	vmov	s15, r3
 800758c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007590:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007598:	edd7 6a07 	vldr	s13, [r7, #28]
 800759c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a4:	ee17 2a90 	vmov	r2, s15
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80075ac:	4b1e      	ldr	r3, [pc, #120]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b6:	ee07 3a90 	vmov	s15, r3
 80075ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075d2:	ee17 2a90 	vmov	r2, s15
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80075da:	4b13      	ldr	r3, [pc, #76]	; (8007628 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	0e1b      	lsrs	r3, r3, #24
 80075e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e4:	ee07 3a90 	vmov	s15, r3
 80075e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007600:	ee17 2a90 	vmov	r2, s15
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007608:	e008      	b.n	800761c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	609a      	str	r2, [r3, #8]
}
 800761c:	bf00      	nop
 800761e:	3724      	adds	r7, #36	; 0x24
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	58024400 	.word	0x58024400
 800762c:	03d09000 	.word	0x03d09000
 8007630:	46000000 	.word	0x46000000
 8007634:	4c742400 	.word	0x4c742400
 8007638:	4a742400 	.word	0x4a742400
 800763c:	4af42400 	.word	0x4af42400

08007640 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800764e:	4b53      	ldr	r3, [pc, #332]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b03      	cmp	r3, #3
 8007658:	d101      	bne.n	800765e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e099      	b.n	8007792 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800765e:	4b4f      	ldr	r3, [pc, #316]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a4e      	ldr	r2, [pc, #312]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007664:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766a:	f7fb ff4b 	bl	8003504 <HAL_GetTick>
 800766e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007670:	e008      	b.n	8007684 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007672:	f7fb ff47 	bl	8003504 <HAL_GetTick>
 8007676:	4602      	mov	r2, r0
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	2b02      	cmp	r3, #2
 800767e:	d901      	bls.n	8007684 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e086      	b.n	8007792 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007684:	4b45      	ldr	r3, [pc, #276]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1f0      	bne.n	8007672 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007690:	4b42      	ldr	r3, [pc, #264]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	031b      	lsls	r3, r3, #12
 800769e:	493f      	ldr	r1, [pc, #252]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	628b      	str	r3, [r1, #40]	; 0x28
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	025b      	lsls	r3, r3, #9
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	431a      	orrs	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	3b01      	subs	r3, #1
 80076c0:	041b      	lsls	r3, r3, #16
 80076c2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	3b01      	subs	r3, #1
 80076ce:	061b      	lsls	r3, r3, #24
 80076d0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076d4:	4931      	ldr	r1, [pc, #196]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076da:	4b30      	ldr	r3, [pc, #192]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	492d      	ldr	r1, [pc, #180]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076ec:	4b2b      	ldr	r3, [pc, #172]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	f023 0220 	bic.w	r2, r3, #32
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	699b      	ldr	r3, [r3, #24]
 80076f8:	4928      	ldr	r1, [pc, #160]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076fe:	4b27      	ldr	r3, [pc, #156]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007702:	4a26      	ldr	r2, [pc, #152]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007704:	f023 0310 	bic.w	r3, r3, #16
 8007708:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800770a:	4b24      	ldr	r3, [pc, #144]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 800770c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800770e:	4b24      	ldr	r3, [pc, #144]	; (80077a0 <RCCEx_PLL2_Config+0x160>)
 8007710:	4013      	ands	r3, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	69d2      	ldr	r2, [r2, #28]
 8007716:	00d2      	lsls	r2, r2, #3
 8007718:	4920      	ldr	r1, [pc, #128]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800771e:	4b1f      	ldr	r3, [pc, #124]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	4a1e      	ldr	r2, [pc, #120]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007724:	f043 0310 	orr.w	r3, r3, #16
 8007728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d106      	bne.n	800773e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007730:	4b1a      	ldr	r3, [pc, #104]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	4a19      	ldr	r2, [pc, #100]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007736:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800773a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800773c:	e00f      	b.n	800775e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d106      	bne.n	8007752 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007744:	4b15      	ldr	r3, [pc, #84]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007748:	4a14      	ldr	r2, [pc, #80]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 800774a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800774e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007750:	e005      	b.n	800775e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007752:	4b12      	ldr	r3, [pc, #72]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	4a11      	ldr	r2, [pc, #68]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007758:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800775c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800775e:	4b0f      	ldr	r3, [pc, #60]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a0e      	ldr	r2, [pc, #56]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007764:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007768:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776a:	f7fb fecb 	bl	8003504 <HAL_GetTick>
 800776e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007770:	e008      	b.n	8007784 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007772:	f7fb fec7 	bl	8003504 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e006      	b.n	8007792 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007784:	4b05      	ldr	r3, [pc, #20]	; (800779c <RCCEx_PLL2_Config+0x15c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0f0      	beq.n	8007772 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	58024400 	.word	0x58024400
 80077a0:	ffff0007 	.word	0xffff0007

080077a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077b2:	4b53      	ldr	r3, [pc, #332]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d101      	bne.n	80077c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e099      	b.n	80078f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80077c2:	4b4f      	ldr	r3, [pc, #316]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a4e      	ldr	r2, [pc, #312]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80077c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ce:	f7fb fe99 	bl	8003504 <HAL_GetTick>
 80077d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077d4:	e008      	b.n	80077e8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077d6:	f7fb fe95 	bl	8003504 <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d901      	bls.n	80077e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077e4:	2303      	movs	r3, #3
 80077e6:	e086      	b.n	80078f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077e8:	4b45      	ldr	r3, [pc, #276]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1f0      	bne.n	80077d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077f4:	4b42      	ldr	r3, [pc, #264]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	051b      	lsls	r3, r3, #20
 8007802:	493f      	ldr	r1, [pc, #252]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007804:	4313      	orrs	r3, r2
 8007806:	628b      	str	r3, [r1, #40]	; 0x28
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	3b01      	subs	r3, #1
 800780e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	3b01      	subs	r3, #1
 8007818:	025b      	lsls	r3, r3, #9
 800781a:	b29b      	uxth	r3, r3
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	3b01      	subs	r3, #1
 8007824:	041b      	lsls	r3, r3, #16
 8007826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	3b01      	subs	r3, #1
 8007832:	061b      	lsls	r3, r3, #24
 8007834:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007838:	4931      	ldr	r1, [pc, #196]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 800783a:	4313      	orrs	r3, r2
 800783c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800783e:	4b30      	ldr	r3, [pc, #192]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	492d      	ldr	r1, [pc, #180]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 800784c:	4313      	orrs	r3, r2
 800784e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007850:	4b2b      	ldr	r3, [pc, #172]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007854:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	4928      	ldr	r1, [pc, #160]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 800785e:	4313      	orrs	r3, r2
 8007860:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007862:	4b27      	ldr	r3, [pc, #156]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007866:	4a26      	ldr	r2, [pc, #152]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800786c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800786e:	4b24      	ldr	r3, [pc, #144]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007872:	4b24      	ldr	r3, [pc, #144]	; (8007904 <RCCEx_PLL3_Config+0x160>)
 8007874:	4013      	ands	r3, r2
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	69d2      	ldr	r2, [r2, #28]
 800787a:	00d2      	lsls	r2, r2, #3
 800787c:	4920      	ldr	r1, [pc, #128]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 800787e:	4313      	orrs	r3, r2
 8007880:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007882:	4b1f      	ldr	r3, [pc, #124]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	4a1e      	ldr	r2, [pc, #120]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800788c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d106      	bne.n	80078a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007894:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	4a19      	ldr	r2, [pc, #100]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 800789a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800789e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078a0:	e00f      	b.n	80078c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d106      	bne.n	80078b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80078a8:	4b15      	ldr	r3, [pc, #84]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	4a14      	ldr	r2, [pc, #80]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80078b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078b4:	e005      	b.n	80078c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80078b6:	4b12      	ldr	r3, [pc, #72]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	4a11      	ldr	r2, [pc, #68]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80078c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80078c2:	4b0f      	ldr	r3, [pc, #60]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a0e      	ldr	r2, [pc, #56]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078ce:	f7fb fe19 	bl	8003504 <HAL_GetTick>
 80078d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078d4:	e008      	b.n	80078e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078d6:	f7fb fe15 	bl	8003504 <HAL_GetTick>
 80078da:	4602      	mov	r2, r0
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	1ad3      	subs	r3, r2, r3
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d901      	bls.n	80078e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e006      	b.n	80078f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078e8:	4b05      	ldr	r3, [pc, #20]	; (8007900 <RCCEx_PLL3_Config+0x15c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0f0      	beq.n	80078d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	58024400 	.word	0x58024400
 8007904:	ffff0007 	.word	0xffff0007

08007908 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e049      	b.n	80079ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007920:	b2db      	uxtb	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f841 	bl	80079b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f000 f9be 	bl	8007cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2201      	movs	r2, #1
 8007998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079ac:	2300      	movs	r3, #0
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b083      	sub	sp, #12
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
	...

080079cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d001      	beq.n	80079e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e021      	b.n	8007a28 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f042 0201 	orr.w	r2, r2, #1
 80079fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689a      	ldr	r2, [r3, #8]
 8007a02:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <HAL_TIM_Base_Start_IT+0x68>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2b06      	cmp	r3, #6
 8007a0c:	d00b      	beq.n	8007a26 <HAL_TIM_Base_Start_IT+0x5a>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a14:	d007      	beq.n	8007a26 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	681a      	ldr	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f042 0201 	orr.w	r2, r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	00010007 	.word	0x00010007

08007a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d122      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d11b      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0202 	mvn.w	r2, #2
 8007a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f003 0303 	and.w	r3, r3, #3
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f905 	bl	8007c8a <HAL_TIM_IC_CaptureCallback>
 8007a80:	e005      	b.n	8007a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f8f7 	bl	8007c76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f908 	bl	8007c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0304 	and.w	r3, r3, #4
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	d122      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0304 	and.w	r3, r3, #4
 8007aac:	2b04      	cmp	r3, #4
 8007aae:	d11b      	bne.n	8007ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0204 	mvn.w	r2, #4
 8007ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2202      	movs	r2, #2
 8007abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f8db 	bl	8007c8a <HAL_TIM_IC_CaptureCallback>
 8007ad4:	e005      	b.n	8007ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f8cd 	bl	8007c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f8de 	bl	8007c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d122      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d11b      	bne.n	8007b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f06f 0208 	mvn.w	r2, #8
 8007b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2204      	movs	r2, #4
 8007b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	f003 0303 	and.w	r3, r3, #3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d003      	beq.n	8007b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 f8b1 	bl	8007c8a <HAL_TIM_IC_CaptureCallback>
 8007b28:	e005      	b.n	8007b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8a3 	bl	8007c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f8b4 	bl	8007c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f003 0310 	and.w	r3, r3, #16
 8007b46:	2b10      	cmp	r3, #16
 8007b48:	d122      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b10      	cmp	r3, #16
 8007b56:	d11b      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f06f 0210 	mvn.w	r2, #16
 8007b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2208      	movs	r2, #8
 8007b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d003      	beq.n	8007b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f887 	bl	8007c8a <HAL_TIM_IC_CaptureCallback>
 8007b7c:	e005      	b.n	8007b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 f879 	bl	8007c76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f88a 	bl	8007c9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691b      	ldr	r3, [r3, #16]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d10e      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d107      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f06f 0201 	mvn.w	r2, #1
 8007bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7fb f86a 	bl	8002c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc6:	2b80      	cmp	r3, #128	; 0x80
 8007bc8:	d10e      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd4:	2b80      	cmp	r3, #128	; 0x80
 8007bd6:	d107      	bne.n	8007be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f914 	bl	8007e10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf6:	d10e      	bne.n	8007c16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c02:	2b80      	cmp	r3, #128	; 0x80
 8007c04:	d107      	bne.n	8007c16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f907 	bl	8007e24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b40      	cmp	r3, #64	; 0x40
 8007c22:	d10e      	bne.n	8007c42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2e:	2b40      	cmp	r3, #64	; 0x40
 8007c30:	d107      	bne.n	8007c42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f838 	bl	8007cb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	d10e      	bne.n	8007c6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d107      	bne.n	8007c6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f06f 0220 	mvn.w	r2, #32
 8007c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f8c7 	bl	8007dfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c6e:	bf00      	nop
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c76:	b480      	push	{r7}
 8007c78:	b083      	sub	sp, #12
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c7e:	bf00      	nop
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
	...

08007cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4a40      	ldr	r2, [pc, #256]	; (8007ddc <TIM_Base_SetConfig+0x114>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d013      	beq.n	8007d08 <TIM_Base_SetConfig+0x40>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ce6:	d00f      	beq.n	8007d08 <TIM_Base_SetConfig+0x40>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	4a3d      	ldr	r2, [pc, #244]	; (8007de0 <TIM_Base_SetConfig+0x118>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d00b      	beq.n	8007d08 <TIM_Base_SetConfig+0x40>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a3c      	ldr	r2, [pc, #240]	; (8007de4 <TIM_Base_SetConfig+0x11c>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d007      	beq.n	8007d08 <TIM_Base_SetConfig+0x40>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a3b      	ldr	r2, [pc, #236]	; (8007de8 <TIM_Base_SetConfig+0x120>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d003      	beq.n	8007d08 <TIM_Base_SetConfig+0x40>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a3a      	ldr	r2, [pc, #232]	; (8007dec <TIM_Base_SetConfig+0x124>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d108      	bne.n	8007d1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a2f      	ldr	r2, [pc, #188]	; (8007ddc <TIM_Base_SetConfig+0x114>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d01f      	beq.n	8007d62 <TIM_Base_SetConfig+0x9a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d28:	d01b      	beq.n	8007d62 <TIM_Base_SetConfig+0x9a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a2c      	ldr	r2, [pc, #176]	; (8007de0 <TIM_Base_SetConfig+0x118>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d017      	beq.n	8007d62 <TIM_Base_SetConfig+0x9a>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a2b      	ldr	r2, [pc, #172]	; (8007de4 <TIM_Base_SetConfig+0x11c>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d013      	beq.n	8007d62 <TIM_Base_SetConfig+0x9a>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a2a      	ldr	r2, [pc, #168]	; (8007de8 <TIM_Base_SetConfig+0x120>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00f      	beq.n	8007d62 <TIM_Base_SetConfig+0x9a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a29      	ldr	r2, [pc, #164]	; (8007dec <TIM_Base_SetConfig+0x124>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00b      	beq.n	8007d62 <TIM_Base_SetConfig+0x9a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a28      	ldr	r2, [pc, #160]	; (8007df0 <TIM_Base_SetConfig+0x128>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d007      	beq.n	8007d62 <TIM_Base_SetConfig+0x9a>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a27      	ldr	r2, [pc, #156]	; (8007df4 <TIM_Base_SetConfig+0x12c>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d003      	beq.n	8007d62 <TIM_Base_SetConfig+0x9a>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a26      	ldr	r2, [pc, #152]	; (8007df8 <TIM_Base_SetConfig+0x130>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d108      	bne.n	8007d74 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a10      	ldr	r2, [pc, #64]	; (8007ddc <TIM_Base_SetConfig+0x114>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d00f      	beq.n	8007dc0 <TIM_Base_SetConfig+0xf8>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a12      	ldr	r2, [pc, #72]	; (8007dec <TIM_Base_SetConfig+0x124>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d00b      	beq.n	8007dc0 <TIM_Base_SetConfig+0xf8>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a11      	ldr	r2, [pc, #68]	; (8007df0 <TIM_Base_SetConfig+0x128>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d007      	beq.n	8007dc0 <TIM_Base_SetConfig+0xf8>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a10      	ldr	r2, [pc, #64]	; (8007df4 <TIM_Base_SetConfig+0x12c>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d003      	beq.n	8007dc0 <TIM_Base_SetConfig+0xf8>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a0f      	ldr	r2, [pc, #60]	; (8007df8 <TIM_Base_SetConfig+0x130>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d103      	bne.n	8007dc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	691a      	ldr	r2, [r3, #16]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	615a      	str	r2, [r3, #20]
}
 8007dce:	bf00      	nop
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40000800 	.word	0x40000800
 8007de8:	40000c00 	.word	0x40000c00
 8007dec:	40010400 	.word	0x40010400
 8007df0:	40014000 	.word	0x40014000
 8007df4:	40014400 	.word	0x40014400
 8007df8:	40014800 	.word	0x40014800

08007dfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d101      	bne.n	8007e4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e46:	2301      	movs	r3, #1
 8007e48:	e042      	b.n	8007ed0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d106      	bne.n	8007e62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7fb f815 	bl	8002e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2224      	movs	r2, #36	; 0x24
 8007e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f022 0201 	bic.w	r2, r2, #1
 8007e78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f82c 	bl	8007ed8 <UART_SetConfig>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d101      	bne.n	8007e8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e022      	b.n	8007ed0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 fdd0 	bl	8008a38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689a      	ldr	r2, [r3, #8]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007eb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681a      	ldr	r2, [r3, #0]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f042 0201 	orr.w	r2, r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fe57 	bl	8008b7c <UART_CheckIdleState>
 8007ece:	4603      	mov	r3, r0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ed8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007edc:	b08e      	sub	sp, #56	; 0x38
 8007ede:	af00      	add	r7, sp, #0
 8007ee0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f06:	4313      	orrs	r3, r2
 8007f08:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	4bc1      	ldr	r3, [pc, #772]	; (8008218 <UART_SetConfig+0x340>)
 8007f12:	4013      	ands	r3, r2
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	6812      	ldr	r2, [r2, #0]
 8007f18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f1a:	430b      	orrs	r3, r1
 8007f1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	430a      	orrs	r2, r1
 8007f32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4ab7      	ldr	r2, [pc, #732]	; (800821c <UART_SetConfig+0x344>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d004      	beq.n	8007f4e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a1b      	ldr	r3, [r3, #32]
 8007f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	689a      	ldr	r2, [r3, #8]
 8007f54:	4bb2      	ldr	r3, [pc, #712]	; (8008220 <UART_SetConfig+0x348>)
 8007f56:	4013      	ands	r3, r2
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	6812      	ldr	r2, [r2, #0]
 8007f5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	f023 010f 	bic.w	r1, r3, #15
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4aa9      	ldr	r2, [pc, #676]	; (8008224 <UART_SetConfig+0x34c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d177      	bne.n	8008072 <UART_SetConfig+0x19a>
 8007f82:	4ba9      	ldr	r3, [pc, #676]	; (8008228 <UART_SetConfig+0x350>)
 8007f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f8a:	2b28      	cmp	r3, #40	; 0x28
 8007f8c:	d86c      	bhi.n	8008068 <UART_SetConfig+0x190>
 8007f8e:	a201      	add	r2, pc, #4	; (adr r2, 8007f94 <UART_SetConfig+0xbc>)
 8007f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f94:	08008039 	.word	0x08008039
 8007f98:	08008069 	.word	0x08008069
 8007f9c:	08008069 	.word	0x08008069
 8007fa0:	08008069 	.word	0x08008069
 8007fa4:	08008069 	.word	0x08008069
 8007fa8:	08008069 	.word	0x08008069
 8007fac:	08008069 	.word	0x08008069
 8007fb0:	08008069 	.word	0x08008069
 8007fb4:	08008041 	.word	0x08008041
 8007fb8:	08008069 	.word	0x08008069
 8007fbc:	08008069 	.word	0x08008069
 8007fc0:	08008069 	.word	0x08008069
 8007fc4:	08008069 	.word	0x08008069
 8007fc8:	08008069 	.word	0x08008069
 8007fcc:	08008069 	.word	0x08008069
 8007fd0:	08008069 	.word	0x08008069
 8007fd4:	08008049 	.word	0x08008049
 8007fd8:	08008069 	.word	0x08008069
 8007fdc:	08008069 	.word	0x08008069
 8007fe0:	08008069 	.word	0x08008069
 8007fe4:	08008069 	.word	0x08008069
 8007fe8:	08008069 	.word	0x08008069
 8007fec:	08008069 	.word	0x08008069
 8007ff0:	08008069 	.word	0x08008069
 8007ff4:	08008051 	.word	0x08008051
 8007ff8:	08008069 	.word	0x08008069
 8007ffc:	08008069 	.word	0x08008069
 8008000:	08008069 	.word	0x08008069
 8008004:	08008069 	.word	0x08008069
 8008008:	08008069 	.word	0x08008069
 800800c:	08008069 	.word	0x08008069
 8008010:	08008069 	.word	0x08008069
 8008014:	08008059 	.word	0x08008059
 8008018:	08008069 	.word	0x08008069
 800801c:	08008069 	.word	0x08008069
 8008020:	08008069 	.word	0x08008069
 8008024:	08008069 	.word	0x08008069
 8008028:	08008069 	.word	0x08008069
 800802c:	08008069 	.word	0x08008069
 8008030:	08008069 	.word	0x08008069
 8008034:	08008061 	.word	0x08008061
 8008038:	2301      	movs	r3, #1
 800803a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803e:	e233      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008040:	2304      	movs	r3, #4
 8008042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008046:	e22f      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008048:	2308      	movs	r3, #8
 800804a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800804e:	e22b      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008050:	2310      	movs	r3, #16
 8008052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008056:	e227      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008058:	2320      	movs	r3, #32
 800805a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800805e:	e223      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008060:	2340      	movs	r3, #64	; 0x40
 8008062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008066:	e21f      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008068:	2380      	movs	r3, #128	; 0x80
 800806a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800806e:	bf00      	nop
 8008070:	e21a      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a6d      	ldr	r2, [pc, #436]	; (800822c <UART_SetConfig+0x354>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d132      	bne.n	80080e2 <UART_SetConfig+0x20a>
 800807c:	4b6a      	ldr	r3, [pc, #424]	; (8008228 <UART_SetConfig+0x350>)
 800807e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008080:	f003 0307 	and.w	r3, r3, #7
 8008084:	2b05      	cmp	r3, #5
 8008086:	d827      	bhi.n	80080d8 <UART_SetConfig+0x200>
 8008088:	a201      	add	r2, pc, #4	; (adr r2, 8008090 <UART_SetConfig+0x1b8>)
 800808a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808e:	bf00      	nop
 8008090:	080080a9 	.word	0x080080a9
 8008094:	080080b1 	.word	0x080080b1
 8008098:	080080b9 	.word	0x080080b9
 800809c:	080080c1 	.word	0x080080c1
 80080a0:	080080c9 	.word	0x080080c9
 80080a4:	080080d1 	.word	0x080080d1
 80080a8:	2300      	movs	r3, #0
 80080aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ae:	e1fb      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80080b0:	2304      	movs	r3, #4
 80080b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080b6:	e1f7      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80080b8:	2308      	movs	r3, #8
 80080ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080be:	e1f3      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80080c0:	2310      	movs	r3, #16
 80080c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080c6:	e1ef      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80080c8:	2320      	movs	r3, #32
 80080ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ce:	e1eb      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80080d0:	2340      	movs	r3, #64	; 0x40
 80080d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080d6:	e1e7      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80080d8:	2380      	movs	r3, #128	; 0x80
 80080da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080de:	bf00      	nop
 80080e0:	e1e2      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a52      	ldr	r2, [pc, #328]	; (8008230 <UART_SetConfig+0x358>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d132      	bne.n	8008152 <UART_SetConfig+0x27a>
 80080ec:	4b4e      	ldr	r3, [pc, #312]	; (8008228 <UART_SetConfig+0x350>)
 80080ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f0:	f003 0307 	and.w	r3, r3, #7
 80080f4:	2b05      	cmp	r3, #5
 80080f6:	d827      	bhi.n	8008148 <UART_SetConfig+0x270>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <UART_SetConfig+0x228>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	08008119 	.word	0x08008119
 8008104:	08008121 	.word	0x08008121
 8008108:	08008129 	.word	0x08008129
 800810c:	08008131 	.word	0x08008131
 8008110:	08008139 	.word	0x08008139
 8008114:	08008141 	.word	0x08008141
 8008118:	2300      	movs	r3, #0
 800811a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800811e:	e1c3      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008120:	2304      	movs	r3, #4
 8008122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008126:	e1bf      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008128:	2308      	movs	r3, #8
 800812a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800812e:	e1bb      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008130:	2310      	movs	r3, #16
 8008132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008136:	e1b7      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008138:	2320      	movs	r3, #32
 800813a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800813e:	e1b3      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008140:	2340      	movs	r3, #64	; 0x40
 8008142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008146:	e1af      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008148:	2380      	movs	r3, #128	; 0x80
 800814a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800814e:	bf00      	nop
 8008150:	e1aa      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a37      	ldr	r2, [pc, #220]	; (8008234 <UART_SetConfig+0x35c>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d132      	bne.n	80081c2 <UART_SetConfig+0x2ea>
 800815c:	4b32      	ldr	r3, [pc, #200]	; (8008228 <UART_SetConfig+0x350>)
 800815e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008160:	f003 0307 	and.w	r3, r3, #7
 8008164:	2b05      	cmp	r3, #5
 8008166:	d827      	bhi.n	80081b8 <UART_SetConfig+0x2e0>
 8008168:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <UART_SetConfig+0x298>)
 800816a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816e:	bf00      	nop
 8008170:	08008189 	.word	0x08008189
 8008174:	08008191 	.word	0x08008191
 8008178:	08008199 	.word	0x08008199
 800817c:	080081a1 	.word	0x080081a1
 8008180:	080081a9 	.word	0x080081a9
 8008184:	080081b1 	.word	0x080081b1
 8008188:	2300      	movs	r3, #0
 800818a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800818e:	e18b      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008190:	2304      	movs	r3, #4
 8008192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008196:	e187      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008198:	2308      	movs	r3, #8
 800819a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800819e:	e183      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80081a0:	2310      	movs	r3, #16
 80081a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081a6:	e17f      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80081a8:	2320      	movs	r3, #32
 80081aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ae:	e17b      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081b6:	e177      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081be:	bf00      	nop
 80081c0:	e172      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a1c      	ldr	r2, [pc, #112]	; (8008238 <UART_SetConfig+0x360>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d144      	bne.n	8008256 <UART_SetConfig+0x37e>
 80081cc:	4b16      	ldr	r3, [pc, #88]	; (8008228 <UART_SetConfig+0x350>)
 80081ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	2b05      	cmp	r3, #5
 80081d6:	d839      	bhi.n	800824c <UART_SetConfig+0x374>
 80081d8:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <UART_SetConfig+0x308>)
 80081da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081de:	bf00      	nop
 80081e0:	080081f9 	.word	0x080081f9
 80081e4:	08008201 	.word	0x08008201
 80081e8:	08008209 	.word	0x08008209
 80081ec:	08008211 	.word	0x08008211
 80081f0:	0800823d 	.word	0x0800823d
 80081f4:	08008245 	.word	0x08008245
 80081f8:	2300      	movs	r3, #0
 80081fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081fe:	e153      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008200:	2304      	movs	r3, #4
 8008202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008206:	e14f      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008208:	2308      	movs	r3, #8
 800820a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800820e:	e14b      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008210:	2310      	movs	r3, #16
 8008212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008216:	e147      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008218:	cfff69f3 	.word	0xcfff69f3
 800821c:	58000c00 	.word	0x58000c00
 8008220:	11fff4ff 	.word	0x11fff4ff
 8008224:	40011000 	.word	0x40011000
 8008228:	58024400 	.word	0x58024400
 800822c:	40004400 	.word	0x40004400
 8008230:	40004800 	.word	0x40004800
 8008234:	40004c00 	.word	0x40004c00
 8008238:	40005000 	.word	0x40005000
 800823c:	2320      	movs	r3, #32
 800823e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008242:	e131      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008244:	2340      	movs	r3, #64	; 0x40
 8008246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800824a:	e12d      	b.n	80084a8 <UART_SetConfig+0x5d0>
 800824c:	2380      	movs	r3, #128	; 0x80
 800824e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008252:	bf00      	nop
 8008254:	e128      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4ab6      	ldr	r2, [pc, #728]	; (8008534 <UART_SetConfig+0x65c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d178      	bne.n	8008352 <UART_SetConfig+0x47a>
 8008260:	4bb5      	ldr	r3, [pc, #724]	; (8008538 <UART_SetConfig+0x660>)
 8008262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008264:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008268:	2b28      	cmp	r3, #40	; 0x28
 800826a:	d86d      	bhi.n	8008348 <UART_SetConfig+0x470>
 800826c:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <UART_SetConfig+0x39c>)
 800826e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008272:	bf00      	nop
 8008274:	08008319 	.word	0x08008319
 8008278:	08008349 	.word	0x08008349
 800827c:	08008349 	.word	0x08008349
 8008280:	08008349 	.word	0x08008349
 8008284:	08008349 	.word	0x08008349
 8008288:	08008349 	.word	0x08008349
 800828c:	08008349 	.word	0x08008349
 8008290:	08008349 	.word	0x08008349
 8008294:	08008321 	.word	0x08008321
 8008298:	08008349 	.word	0x08008349
 800829c:	08008349 	.word	0x08008349
 80082a0:	08008349 	.word	0x08008349
 80082a4:	08008349 	.word	0x08008349
 80082a8:	08008349 	.word	0x08008349
 80082ac:	08008349 	.word	0x08008349
 80082b0:	08008349 	.word	0x08008349
 80082b4:	08008329 	.word	0x08008329
 80082b8:	08008349 	.word	0x08008349
 80082bc:	08008349 	.word	0x08008349
 80082c0:	08008349 	.word	0x08008349
 80082c4:	08008349 	.word	0x08008349
 80082c8:	08008349 	.word	0x08008349
 80082cc:	08008349 	.word	0x08008349
 80082d0:	08008349 	.word	0x08008349
 80082d4:	08008331 	.word	0x08008331
 80082d8:	08008349 	.word	0x08008349
 80082dc:	08008349 	.word	0x08008349
 80082e0:	08008349 	.word	0x08008349
 80082e4:	08008349 	.word	0x08008349
 80082e8:	08008349 	.word	0x08008349
 80082ec:	08008349 	.word	0x08008349
 80082f0:	08008349 	.word	0x08008349
 80082f4:	08008339 	.word	0x08008339
 80082f8:	08008349 	.word	0x08008349
 80082fc:	08008349 	.word	0x08008349
 8008300:	08008349 	.word	0x08008349
 8008304:	08008349 	.word	0x08008349
 8008308:	08008349 	.word	0x08008349
 800830c:	08008349 	.word	0x08008349
 8008310:	08008349 	.word	0x08008349
 8008314:	08008341 	.word	0x08008341
 8008318:	2301      	movs	r3, #1
 800831a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800831e:	e0c3      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008320:	2304      	movs	r3, #4
 8008322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008326:	e0bf      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008328:	2308      	movs	r3, #8
 800832a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800832e:	e0bb      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008330:	2310      	movs	r3, #16
 8008332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008336:	e0b7      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008338:	2320      	movs	r3, #32
 800833a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800833e:	e0b3      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008340:	2340      	movs	r3, #64	; 0x40
 8008342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008346:	e0af      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008348:	2380      	movs	r3, #128	; 0x80
 800834a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800834e:	bf00      	nop
 8008350:	e0aa      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a79      	ldr	r2, [pc, #484]	; (800853c <UART_SetConfig+0x664>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d132      	bne.n	80083c2 <UART_SetConfig+0x4ea>
 800835c:	4b76      	ldr	r3, [pc, #472]	; (8008538 <UART_SetConfig+0x660>)
 800835e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	2b05      	cmp	r3, #5
 8008366:	d827      	bhi.n	80083b8 <UART_SetConfig+0x4e0>
 8008368:	a201      	add	r2, pc, #4	; (adr r2, 8008370 <UART_SetConfig+0x498>)
 800836a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800836e:	bf00      	nop
 8008370:	08008389 	.word	0x08008389
 8008374:	08008391 	.word	0x08008391
 8008378:	08008399 	.word	0x08008399
 800837c:	080083a1 	.word	0x080083a1
 8008380:	080083a9 	.word	0x080083a9
 8008384:	080083b1 	.word	0x080083b1
 8008388:	2300      	movs	r3, #0
 800838a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800838e:	e08b      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008390:	2304      	movs	r3, #4
 8008392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008396:	e087      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008398:	2308      	movs	r3, #8
 800839a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800839e:	e083      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80083a0:	2310      	movs	r3, #16
 80083a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083a6:	e07f      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80083a8:	2320      	movs	r3, #32
 80083aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ae:	e07b      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80083b0:	2340      	movs	r3, #64	; 0x40
 80083b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083b6:	e077      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80083b8:	2380      	movs	r3, #128	; 0x80
 80083ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083be:	bf00      	nop
 80083c0:	e072      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a5e      	ldr	r2, [pc, #376]	; (8008540 <UART_SetConfig+0x668>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d132      	bne.n	8008432 <UART_SetConfig+0x55a>
 80083cc:	4b5a      	ldr	r3, [pc, #360]	; (8008538 <UART_SetConfig+0x660>)
 80083ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d0:	f003 0307 	and.w	r3, r3, #7
 80083d4:	2b05      	cmp	r3, #5
 80083d6:	d827      	bhi.n	8008428 <UART_SetConfig+0x550>
 80083d8:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <UART_SetConfig+0x508>)
 80083da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083de:	bf00      	nop
 80083e0:	080083f9 	.word	0x080083f9
 80083e4:	08008401 	.word	0x08008401
 80083e8:	08008409 	.word	0x08008409
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008419 	.word	0x08008419
 80083f4:	08008421 	.word	0x08008421
 80083f8:	2300      	movs	r3, #0
 80083fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083fe:	e053      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008400:	2304      	movs	r3, #4
 8008402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008406:	e04f      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008408:	2308      	movs	r3, #8
 800840a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800840e:	e04b      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008416:	e047      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008418:	2320      	movs	r3, #32
 800841a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800841e:	e043      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008420:	2340      	movs	r3, #64	; 0x40
 8008422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008426:	e03f      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008428:	2380      	movs	r3, #128	; 0x80
 800842a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800842e:	bf00      	nop
 8008430:	e03a      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a43      	ldr	r2, [pc, #268]	; (8008544 <UART_SetConfig+0x66c>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d132      	bne.n	80084a2 <UART_SetConfig+0x5ca>
 800843c:	4b3e      	ldr	r3, [pc, #248]	; (8008538 <UART_SetConfig+0x660>)
 800843e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008440:	f003 0307 	and.w	r3, r3, #7
 8008444:	2b05      	cmp	r3, #5
 8008446:	d827      	bhi.n	8008498 <UART_SetConfig+0x5c0>
 8008448:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <UART_SetConfig+0x578>)
 800844a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844e:	bf00      	nop
 8008450:	08008469 	.word	0x08008469
 8008454:	08008471 	.word	0x08008471
 8008458:	08008479 	.word	0x08008479
 800845c:	08008481 	.word	0x08008481
 8008460:	08008489 	.word	0x08008489
 8008464:	08008491 	.word	0x08008491
 8008468:	2302      	movs	r3, #2
 800846a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800846e:	e01b      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008470:	2304      	movs	r3, #4
 8008472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008476:	e017      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008478:	2308      	movs	r3, #8
 800847a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800847e:	e013      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008480:	2310      	movs	r3, #16
 8008482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008486:	e00f      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008488:	2320      	movs	r3, #32
 800848a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800848e:	e00b      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008490:	2340      	movs	r3, #64	; 0x40
 8008492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008496:	e007      	b.n	80084a8 <UART_SetConfig+0x5d0>
 8008498:	2380      	movs	r3, #128	; 0x80
 800849a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800849e:	bf00      	nop
 80084a0:	e002      	b.n	80084a8 <UART_SetConfig+0x5d0>
 80084a2:	2380      	movs	r3, #128	; 0x80
 80084a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a25      	ldr	r2, [pc, #148]	; (8008544 <UART_SetConfig+0x66c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	f040 80b8 	bne.w	8008624 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084b8:	2b08      	cmp	r3, #8
 80084ba:	d019      	beq.n	80084f0 <UART_SetConfig+0x618>
 80084bc:	2b08      	cmp	r3, #8
 80084be:	dc04      	bgt.n	80084ca <UART_SetConfig+0x5f2>
 80084c0:	2b02      	cmp	r3, #2
 80084c2:	d009      	beq.n	80084d8 <UART_SetConfig+0x600>
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d00b      	beq.n	80084e0 <UART_SetConfig+0x608>
 80084c8:	e042      	b.n	8008550 <UART_SetConfig+0x678>
 80084ca:	2b20      	cmp	r3, #32
 80084cc:	d02b      	beq.n	8008526 <UART_SetConfig+0x64e>
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	d02c      	beq.n	800852c <UART_SetConfig+0x654>
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	d014      	beq.n	8008500 <UART_SetConfig+0x628>
 80084d6:	e03b      	b.n	8008550 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80084d8:	f7fe fe04 	bl	80070e4 <HAL_RCCEx_GetD3PCLK1Freq>
 80084dc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80084de:	e03d      	b.n	800855c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e0:	f107 0314 	add.w	r3, r7, #20
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fe13 	bl	8007110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084ee:	e035      	b.n	800855c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084f0:	f107 0308 	add.w	r3, r7, #8
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe ff57 	bl	80073a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80084fe:	e02d      	b.n	800855c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008500:	4b0d      	ldr	r3, [pc, #52]	; (8008538 <UART_SetConfig+0x660>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0320 	and.w	r3, r3, #32
 8008508:	2b00      	cmp	r3, #0
 800850a:	d009      	beq.n	8008520 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800850c:	4b0a      	ldr	r3, [pc, #40]	; (8008538 <UART_SetConfig+0x660>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	08db      	lsrs	r3, r3, #3
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	4a0c      	ldr	r2, [pc, #48]	; (8008548 <UART_SetConfig+0x670>)
 8008518:	fa22 f303 	lsr.w	r3, r2, r3
 800851c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800851e:	e01d      	b.n	800855c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <UART_SetConfig+0x670>)
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008524:	e01a      	b.n	800855c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008526:	4b09      	ldr	r3, [pc, #36]	; (800854c <UART_SetConfig+0x674>)
 8008528:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800852a:	e017      	b.n	800855c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800852c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008530:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008532:	e013      	b.n	800855c <UART_SetConfig+0x684>
 8008534:	40011400 	.word	0x40011400
 8008538:	58024400 	.word	0x58024400
 800853c:	40007800 	.word	0x40007800
 8008540:	40007c00 	.word	0x40007c00
 8008544:	58000c00 	.word	0x58000c00
 8008548:	03d09000 	.word	0x03d09000
 800854c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8008550:	2300      	movs	r3, #0
 8008552:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800855a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 824d 	beq.w	80089fe <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	4aad      	ldr	r2, [pc, #692]	; (8008820 <UART_SetConfig+0x948>)
 800856a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800856e:	461a      	mov	r2, r3
 8008570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008572:	fbb3 f3f2 	udiv	r3, r3, r2
 8008576:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	4613      	mov	r3, r2
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	4413      	add	r3, r2
 8008582:	6a3a      	ldr	r2, [r7, #32]
 8008584:	429a      	cmp	r2, r3
 8008586:	d305      	bcc.n	8008594 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800858e:	6a3a      	ldr	r2, [r7, #32]
 8008590:	429a      	cmp	r2, r3
 8008592:	d903      	bls.n	800859c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800859a:	e230      	b.n	80089fe <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	4618      	mov	r0, r3
 80085a0:	f04f 0100 	mov.w	r1, #0
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	4a9d      	ldr	r2, [pc, #628]	; (8008820 <UART_SetConfig+0x948>)
 80085aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	f04f 0400 	mov.w	r4, #0
 80085b4:	461a      	mov	r2, r3
 80085b6:	4623      	mov	r3, r4
 80085b8:	f7f9 fe48 	bl	800224c <__aeabi_uldivmod>
 80085bc:	4603      	mov	r3, r0
 80085be:	460c      	mov	r4, r1
 80085c0:	4619      	mov	r1, r3
 80085c2:	4622      	mov	r2, r4
 80085c4:	f04f 0300 	mov.w	r3, #0
 80085c8:	f04f 0400 	mov.w	r4, #0
 80085cc:	0214      	lsls	r4, r2, #8
 80085ce:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80085d2:	020b      	lsls	r3, r1, #8
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6852      	ldr	r2, [r2, #4]
 80085d8:	0852      	lsrs	r2, r2, #1
 80085da:	4611      	mov	r1, r2
 80085dc:	f04f 0200 	mov.w	r2, #0
 80085e0:	eb13 0b01 	adds.w	fp, r3, r1
 80085e4:	eb44 0c02 	adc.w	ip, r4, r2
 80085e8:	4658      	mov	r0, fp
 80085ea:	4661      	mov	r1, ip
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f04f 0400 	mov.w	r4, #0
 80085f4:	461a      	mov	r2, r3
 80085f6:	4623      	mov	r3, r4
 80085f8:	f7f9 fe28 	bl	800224c <__aeabi_uldivmod>
 80085fc:	4603      	mov	r3, r0
 80085fe:	460c      	mov	r4, r1
 8008600:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008608:	d308      	bcc.n	800861c <UART_SetConfig+0x744>
 800860a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008610:	d204      	bcs.n	800861c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008618:	60da      	str	r2, [r3, #12]
 800861a:	e1f0      	b.n	80089fe <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008622:	e1ec      	b.n	80089fe <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800862c:	f040 8100 	bne.w	8008830 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8008630:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008634:	2b40      	cmp	r3, #64	; 0x40
 8008636:	f200 80b7 	bhi.w	80087a8 <UART_SetConfig+0x8d0>
 800863a:	a201      	add	r2, pc, #4	; (adr r2, 8008640 <UART_SetConfig+0x768>)
 800863c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008640:	08008745 	.word	0x08008745
 8008644:	0800874d 	.word	0x0800874d
 8008648:	080087a9 	.word	0x080087a9
 800864c:	080087a9 	.word	0x080087a9
 8008650:	08008755 	.word	0x08008755
 8008654:	080087a9 	.word	0x080087a9
 8008658:	080087a9 	.word	0x080087a9
 800865c:	080087a9 	.word	0x080087a9
 8008660:	08008765 	.word	0x08008765
 8008664:	080087a9 	.word	0x080087a9
 8008668:	080087a9 	.word	0x080087a9
 800866c:	080087a9 	.word	0x080087a9
 8008670:	080087a9 	.word	0x080087a9
 8008674:	080087a9 	.word	0x080087a9
 8008678:	080087a9 	.word	0x080087a9
 800867c:	080087a9 	.word	0x080087a9
 8008680:	08008775 	.word	0x08008775
 8008684:	080087a9 	.word	0x080087a9
 8008688:	080087a9 	.word	0x080087a9
 800868c:	080087a9 	.word	0x080087a9
 8008690:	080087a9 	.word	0x080087a9
 8008694:	080087a9 	.word	0x080087a9
 8008698:	080087a9 	.word	0x080087a9
 800869c:	080087a9 	.word	0x080087a9
 80086a0:	080087a9 	.word	0x080087a9
 80086a4:	080087a9 	.word	0x080087a9
 80086a8:	080087a9 	.word	0x080087a9
 80086ac:	080087a9 	.word	0x080087a9
 80086b0:	080087a9 	.word	0x080087a9
 80086b4:	080087a9 	.word	0x080087a9
 80086b8:	080087a9 	.word	0x080087a9
 80086bc:	080087a9 	.word	0x080087a9
 80086c0:	0800879b 	.word	0x0800879b
 80086c4:	080087a9 	.word	0x080087a9
 80086c8:	080087a9 	.word	0x080087a9
 80086cc:	080087a9 	.word	0x080087a9
 80086d0:	080087a9 	.word	0x080087a9
 80086d4:	080087a9 	.word	0x080087a9
 80086d8:	080087a9 	.word	0x080087a9
 80086dc:	080087a9 	.word	0x080087a9
 80086e0:	080087a9 	.word	0x080087a9
 80086e4:	080087a9 	.word	0x080087a9
 80086e8:	080087a9 	.word	0x080087a9
 80086ec:	080087a9 	.word	0x080087a9
 80086f0:	080087a9 	.word	0x080087a9
 80086f4:	080087a9 	.word	0x080087a9
 80086f8:	080087a9 	.word	0x080087a9
 80086fc:	080087a9 	.word	0x080087a9
 8008700:	080087a9 	.word	0x080087a9
 8008704:	080087a9 	.word	0x080087a9
 8008708:	080087a9 	.word	0x080087a9
 800870c:	080087a9 	.word	0x080087a9
 8008710:	080087a9 	.word	0x080087a9
 8008714:	080087a9 	.word	0x080087a9
 8008718:	080087a9 	.word	0x080087a9
 800871c:	080087a9 	.word	0x080087a9
 8008720:	080087a9 	.word	0x080087a9
 8008724:	080087a9 	.word	0x080087a9
 8008728:	080087a9 	.word	0x080087a9
 800872c:	080087a9 	.word	0x080087a9
 8008730:	080087a9 	.word	0x080087a9
 8008734:	080087a9 	.word	0x080087a9
 8008738:	080087a9 	.word	0x080087a9
 800873c:	080087a9 	.word	0x080087a9
 8008740:	080087a1 	.word	0x080087a1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008744:	f7fd fd72 	bl	800622c <HAL_RCC_GetPCLK1Freq>
 8008748:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800874a:	e033      	b.n	80087b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800874c:	f7fd fd84 	bl	8006258 <HAL_RCC_GetPCLK2Freq>
 8008750:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008752:	e02f      	b.n	80087b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008754:	f107 0314 	add.w	r3, r7, #20
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe fcd9 	bl	8007110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008762:	e027      	b.n	80087b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008764:	f107 0308 	add.w	r3, r7, #8
 8008768:	4618      	mov	r0, r3
 800876a:	f7fe fe1d 	bl	80073a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008772:	e01f      	b.n	80087b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008774:	4b2b      	ldr	r3, [pc, #172]	; (8008824 <UART_SetConfig+0x94c>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	d009      	beq.n	8008794 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008780:	4b28      	ldr	r3, [pc, #160]	; (8008824 <UART_SetConfig+0x94c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	08db      	lsrs	r3, r3, #3
 8008786:	f003 0303 	and.w	r3, r3, #3
 800878a:	4a27      	ldr	r2, [pc, #156]	; (8008828 <UART_SetConfig+0x950>)
 800878c:	fa22 f303 	lsr.w	r3, r2, r3
 8008790:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008792:	e00f      	b.n	80087b4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8008794:	4b24      	ldr	r3, [pc, #144]	; (8008828 <UART_SetConfig+0x950>)
 8008796:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008798:	e00c      	b.n	80087b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800879a:	4b24      	ldr	r3, [pc, #144]	; (800882c <UART_SetConfig+0x954>)
 800879c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800879e:	e009      	b.n	80087b4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80087a6:	e005      	b.n	80087b4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 80087a8:	2300      	movs	r3, #0
 80087aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80087b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	f000 8121 	beq.w	80089fe <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c0:	4a17      	ldr	r2, [pc, #92]	; (8008820 <UART_SetConfig+0x948>)
 80087c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087c6:	461a      	mov	r2, r3
 80087c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80087ce:	005a      	lsls	r2, r3, #1
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	441a      	add	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d916      	bls.n	8008818 <UART_SetConfig+0x940>
 80087ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f0:	d212      	bcs.n	8008818 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f023 030f 	bic.w	r3, r3, #15
 80087fa:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	b29b      	uxth	r3, r3
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	b29a      	uxth	r2, r3
 8008808:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800880a:	4313      	orrs	r3, r2
 800880c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008814:	60da      	str	r2, [r3, #12]
 8008816:	e0f2      	b.n	80089fe <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800881e:	e0ee      	b.n	80089fe <UART_SetConfig+0xb26>
 8008820:	0800960c 	.word	0x0800960c
 8008824:	58024400 	.word	0x58024400
 8008828:	03d09000 	.word	0x03d09000
 800882c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8008830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008834:	2b40      	cmp	r3, #64	; 0x40
 8008836:	f200 80b7 	bhi.w	80089a8 <UART_SetConfig+0xad0>
 800883a:	a201      	add	r2, pc, #4	; (adr r2, 8008840 <UART_SetConfig+0x968>)
 800883c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008840:	08008945 	.word	0x08008945
 8008844:	0800894d 	.word	0x0800894d
 8008848:	080089a9 	.word	0x080089a9
 800884c:	080089a9 	.word	0x080089a9
 8008850:	08008955 	.word	0x08008955
 8008854:	080089a9 	.word	0x080089a9
 8008858:	080089a9 	.word	0x080089a9
 800885c:	080089a9 	.word	0x080089a9
 8008860:	08008965 	.word	0x08008965
 8008864:	080089a9 	.word	0x080089a9
 8008868:	080089a9 	.word	0x080089a9
 800886c:	080089a9 	.word	0x080089a9
 8008870:	080089a9 	.word	0x080089a9
 8008874:	080089a9 	.word	0x080089a9
 8008878:	080089a9 	.word	0x080089a9
 800887c:	080089a9 	.word	0x080089a9
 8008880:	08008975 	.word	0x08008975
 8008884:	080089a9 	.word	0x080089a9
 8008888:	080089a9 	.word	0x080089a9
 800888c:	080089a9 	.word	0x080089a9
 8008890:	080089a9 	.word	0x080089a9
 8008894:	080089a9 	.word	0x080089a9
 8008898:	080089a9 	.word	0x080089a9
 800889c:	080089a9 	.word	0x080089a9
 80088a0:	080089a9 	.word	0x080089a9
 80088a4:	080089a9 	.word	0x080089a9
 80088a8:	080089a9 	.word	0x080089a9
 80088ac:	080089a9 	.word	0x080089a9
 80088b0:	080089a9 	.word	0x080089a9
 80088b4:	080089a9 	.word	0x080089a9
 80088b8:	080089a9 	.word	0x080089a9
 80088bc:	080089a9 	.word	0x080089a9
 80088c0:	0800899b 	.word	0x0800899b
 80088c4:	080089a9 	.word	0x080089a9
 80088c8:	080089a9 	.word	0x080089a9
 80088cc:	080089a9 	.word	0x080089a9
 80088d0:	080089a9 	.word	0x080089a9
 80088d4:	080089a9 	.word	0x080089a9
 80088d8:	080089a9 	.word	0x080089a9
 80088dc:	080089a9 	.word	0x080089a9
 80088e0:	080089a9 	.word	0x080089a9
 80088e4:	080089a9 	.word	0x080089a9
 80088e8:	080089a9 	.word	0x080089a9
 80088ec:	080089a9 	.word	0x080089a9
 80088f0:	080089a9 	.word	0x080089a9
 80088f4:	080089a9 	.word	0x080089a9
 80088f8:	080089a9 	.word	0x080089a9
 80088fc:	080089a9 	.word	0x080089a9
 8008900:	080089a9 	.word	0x080089a9
 8008904:	080089a9 	.word	0x080089a9
 8008908:	080089a9 	.word	0x080089a9
 800890c:	080089a9 	.word	0x080089a9
 8008910:	080089a9 	.word	0x080089a9
 8008914:	080089a9 	.word	0x080089a9
 8008918:	080089a9 	.word	0x080089a9
 800891c:	080089a9 	.word	0x080089a9
 8008920:	080089a9 	.word	0x080089a9
 8008924:	080089a9 	.word	0x080089a9
 8008928:	080089a9 	.word	0x080089a9
 800892c:	080089a9 	.word	0x080089a9
 8008930:	080089a9 	.word	0x080089a9
 8008934:	080089a9 	.word	0x080089a9
 8008938:	080089a9 	.word	0x080089a9
 800893c:	080089a9 	.word	0x080089a9
 8008940:	080089a1 	.word	0x080089a1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008944:	f7fd fc72 	bl	800622c <HAL_RCC_GetPCLK1Freq>
 8008948:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800894a:	e033      	b.n	80089b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800894c:	f7fd fc84 	bl	8006258 <HAL_RCC_GetPCLK2Freq>
 8008950:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008952:	e02f      	b.n	80089b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008954:	f107 0314 	add.w	r3, r7, #20
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fbd9 	bl	8007110 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008962:	e027      	b.n	80089b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008964:	f107 0308 	add.w	r3, r7, #8
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fd1d 	bl	80073a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008972:	e01f      	b.n	80089b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008974:	4b2c      	ldr	r3, [pc, #176]	; (8008a28 <UART_SetConfig+0xb50>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0320 	and.w	r3, r3, #32
 800897c:	2b00      	cmp	r3, #0
 800897e:	d009      	beq.n	8008994 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008980:	4b29      	ldr	r3, [pc, #164]	; (8008a28 <UART_SetConfig+0xb50>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	08db      	lsrs	r3, r3, #3
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	4a28      	ldr	r2, [pc, #160]	; (8008a2c <UART_SetConfig+0xb54>)
 800898c:	fa22 f303 	lsr.w	r3, r2, r3
 8008990:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008992:	e00f      	b.n	80089b4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8008994:	4b25      	ldr	r3, [pc, #148]	; (8008a2c <UART_SetConfig+0xb54>)
 8008996:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008998:	e00c      	b.n	80089b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800899a:	4b25      	ldr	r3, [pc, #148]	; (8008a30 <UART_SetConfig+0xb58>)
 800899c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800899e:	e009      	b.n	80089b4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80089a6:	e005      	b.n	80089b4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80089b2:	bf00      	nop
    }

    if (pclk != 0U)
 80089b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d021      	beq.n	80089fe <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089be:	4a1d      	ldr	r2, [pc, #116]	; (8008a34 <UART_SetConfig+0xb5c>)
 80089c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089c4:	461a      	mov	r2, r3
 80089c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	085b      	lsrs	r3, r3, #1
 80089d2:	441a      	add	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089dc:	b29b      	uxth	r3, r3
 80089de:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e2:	2b0f      	cmp	r3, #15
 80089e4:	d908      	bls.n	80089f8 <UART_SetConfig+0xb20>
 80089e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089ec:	d204      	bcs.n	80089f8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089f4:	60da      	str	r2, [r3, #12]
 80089f6:	e002      	b.n	80089fe <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2201      	movs	r2, #1
 8008a02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2201      	movs	r2, #1
 8008a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008a1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3738      	adds	r7, #56	; 0x38
 8008a22:	46bd      	mov	sp, r7
 8008a24:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	03d09000 	.word	0x03d09000
 8008a30:	003d0900 	.word	0x003d0900
 8008a34:	0800960c 	.word	0x0800960c

08008a38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a44:	f003 0301 	and.w	r3, r3, #1
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00a      	beq.n	8008a62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a66:	f003 0302 	and.w	r3, r3, #2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00a      	beq.n	8008aa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aaa:	f003 0308 	and.w	r3, r3, #8
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008acc:	f003 0310 	and.w	r3, r3, #16
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00a      	beq.n	8008aea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d01a      	beq.n	8008b4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b36:	d10a      	bne.n	8008b4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00a      	beq.n	8008b70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	605a      	str	r2, [r3, #4]
  }
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af02      	add	r7, sp, #8
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008b8c:	f7fa fcba 	bl	8003504 <HAL_GetTick>
 8008b90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b08      	cmp	r3, #8
 8008b9e:	d10e      	bne.n	8008bbe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f82c 	bl	8008c0c <UART_WaitOnFlagUntilTimeout>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d001      	beq.n	8008bbe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e022      	b.n	8008c04 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b04      	cmp	r3, #4
 8008bca:	d10e      	bne.n	8008bea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f816 	bl	8008c0c <UART_WaitOnFlagUntilTimeout>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e00c      	b.n	8008c04 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c1c:	e062      	b.n	8008ce4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c24:	d05e      	beq.n	8008ce4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c26:	f7fa fc6d 	bl	8003504 <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d302      	bcc.n	8008c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d11d      	bne.n	8008c78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c4a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689a      	ldr	r2, [r3, #8]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 0201 	bic.w	r2, r2, #1
 8008c5a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2220      	movs	r2, #32
 8008c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2220      	movs	r2, #32
 8008c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e045      	b.n	8008d04 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0304 	and.w	r3, r3, #4
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d02e      	beq.n	8008ce4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c94:	d126      	bne.n	8008ce4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c9e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008cae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 0201 	bic.w	r2, r2, #1
 8008cbe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2220      	movs	r2, #32
 8008ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	e00f      	b.n	8008d04 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	69da      	ldr	r2, [r3, #28]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	4013      	ands	r3, r2
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	bf0c      	ite	eq
 8008cf4:	2301      	moveq	r3, #1
 8008cf6:	2300      	movne	r3, #0
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	79fb      	ldrb	r3, [r7, #7]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d08d      	beq.n	8008c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d101      	bne.n	8008d22 <HAL_UARTEx_DisableFifoMode+0x16>
 8008d1e:	2302      	movs	r3, #2
 8008d20:	e027      	b.n	8008d72 <HAL_UARTEx_DisableFifoMode+0x66>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2224      	movs	r2, #36	; 0x24
 8008d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 0201 	bic.w	r2, r2, #1
 8008d48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008d50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	68fa      	ldr	r2, [r7, #12]
 8008d5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
 8008d86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d101      	bne.n	8008d96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008d92:	2302      	movs	r3, #2
 8008d94:	e02d      	b.n	8008df2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2224      	movs	r2, #36	; 0x24
 8008da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f022 0201 	bic.w	r2, r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	683a      	ldr	r2, [r7, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f850 	bl	8008e78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68fa      	ldr	r2, [r7, #12]
 8008dde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2220      	movs	r2, #32
 8008de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3710      	adds	r7, #16
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d101      	bne.n	8008e12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008e0e:	2302      	movs	r3, #2
 8008e10:	e02d      	b.n	8008e6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2224      	movs	r2, #36	; 0x24
 8008e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 0201 	bic.w	r2, r2, #1
 8008e38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f000 f812 	bl	8008e78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2220      	movs	r2, #32
 8008e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2200      	movs	r2, #0
 8008e68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
	...

08008e78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b089      	sub	sp, #36	; 0x24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008e80:	4a2f      	ldr	r2, [pc, #188]	; (8008f40 <UARTEx_SetNbDataToProcess+0xc8>)
 8008e82:	f107 0314 	add.w	r3, r7, #20
 8008e86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e8a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008e8e:	4a2d      	ldr	r2, [pc, #180]	; (8008f44 <UARTEx_SetNbDataToProcess+0xcc>)
 8008e90:	f107 030c 	add.w	r3, r7, #12
 8008e94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008e98:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d108      	bne.n	8008eb6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008eb4:	e03d      	b.n	8008f32 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008eb6:	2310      	movs	r3, #16
 8008eb8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008eba:	2310      	movs	r3, #16
 8008ebc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	0e5b      	lsrs	r3, r3, #25
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	0f5b      	lsrs	r3, r3, #29
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008ede:	7fbb      	ldrb	r3, [r7, #30]
 8008ee0:	7f3a      	ldrb	r2, [r7, #28]
 8008ee2:	f107 0120 	add.w	r1, r7, #32
 8008ee6:	440a      	add	r2, r1
 8008ee8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008eec:	fb02 f303 	mul.w	r3, r2, r3
 8008ef0:	7f3a      	ldrb	r2, [r7, #28]
 8008ef2:	f107 0120 	add.w	r1, r7, #32
 8008ef6:	440a      	add	r2, r1
 8008ef8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008efc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008f08:	7ffb      	ldrb	r3, [r7, #31]
 8008f0a:	7f7a      	ldrb	r2, [r7, #29]
 8008f0c:	f107 0120 	add.w	r1, r7, #32
 8008f10:	440a      	add	r2, r1
 8008f12:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008f16:	fb02 f303 	mul.w	r3, r2, r3
 8008f1a:	7f7a      	ldrb	r2, [r7, #29]
 8008f1c:	f107 0120 	add.w	r1, r7, #32
 8008f20:	440a      	add	r2, r1
 8008f22:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008f26:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008f32:	bf00      	nop
 8008f34:	3724      	adds	r7, #36	; 0x24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	0800950c 	.word	0x0800950c
 8008f44:	08009514 	.word	0x08009514

08008f48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f48:	b084      	sub	sp, #16
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
 8008f52:	f107 001c 	add.w	r0, r7, #28
 8008f56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d120      	bne.n	8008fa2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	4b25      	ldr	r3, [pc, #148]	; (8009008 <USB_CoreInit+0xc0>)
 8008f72:	4013      	ands	r3, r2
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d105      	bne.n	8008f96 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fa4c 	bl	8009434 <USB_CoreReset>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]
 8008fa0:	e01a      	b.n	8008fd8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa40 	bl	8009434 <USB_CoreReset>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d106      	bne.n	8008fcc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	639a      	str	r2, [r3, #56]	; 0x38
 8008fca:	e005      	b.n	8008fd8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d10b      	bne.n	8008ff6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f043 0206 	orr.w	r2, r3, #6
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f043 0220 	orr.w	r2, r3, #32
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009002:	b004      	add	sp, #16
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	ffbdffbf 	.word	0xffbdffbf

0800900c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f023 0201 	bic.w	r2, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	370c      	adds	r7, #12
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009046:	78fb      	ldrb	r3, [r7, #3]
 8009048:	2b01      	cmp	r3, #1
 800904a:	d106      	bne.n	800905a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	60da      	str	r2, [r3, #12]
 8009058:	e00b      	b.n	8009072 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800905a:	78fb      	ldrb	r3, [r7, #3]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d106      	bne.n	800906e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	60da      	str	r2, [r3, #12]
 800906c:	e001      	b.n	8009072 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	e003      	b.n	800907a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009072:	2032      	movs	r0, #50	; 0x32
 8009074:	f7fa fa52 	bl	800351c <HAL_Delay>

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009084:	b084      	sub	sp, #16
 8009086:	b580      	push	{r7, lr}
 8009088:	b086      	sub	sp, #24
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009096:	2300      	movs	r3, #0
 8009098:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800909e:	2300      	movs	r3, #0
 80090a0:	613b      	str	r3, [r7, #16]
 80090a2:	e009      	b.n	80090b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3340      	adds	r3, #64	; 0x40
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	2200      	movs	r2, #0
 80090b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	3301      	adds	r3, #1
 80090b6:	613b      	str	r3, [r7, #16]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2b0e      	cmp	r3, #14
 80090bc:	d9f2      	bls.n	80090a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80090be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d11c      	bne.n	80090fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090d2:	f043 0302 	orr.w	r3, r3, #2
 80090d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	601a      	str	r2, [r3, #0]
 80090fc:	e005      	b.n	800910a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009110:	461a      	mov	r2, r3
 8009112:	2300      	movs	r3, #0
 8009114:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800911c:	4619      	mov	r1, r3
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009124:	461a      	mov	r2, r3
 8009126:	680b      	ldr	r3, [r1, #0]
 8009128:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800912a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912c:	2b01      	cmp	r3, #1
 800912e:	d10c      	bne.n	800914a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009132:	2b00      	cmp	r3, #0
 8009134:	d104      	bne.n	8009140 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009136:	2100      	movs	r1, #0
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f949 	bl	80093d0 <USB_SetDevSpeed>
 800913e:	e008      	b.n	8009152 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009140:	2101      	movs	r1, #1
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f944 	bl	80093d0 <USB_SetDevSpeed>
 8009148:	e003      	b.n	8009152 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800914a:	2103      	movs	r1, #3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f93f 	bl	80093d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009152:	2110      	movs	r1, #16
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f8f3 	bl	8009340 <USB_FlushTxFifo>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f911 	bl	800938c <USB_FlushRxFifo>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800917a:	461a      	mov	r2, r3
 800917c:	2300      	movs	r3, #0
 800917e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009186:	461a      	mov	r2, r3
 8009188:	2300      	movs	r3, #0
 800918a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009192:	461a      	mov	r2, r3
 8009194:	2300      	movs	r3, #0
 8009196:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009198:	2300      	movs	r3, #0
 800919a:	613b      	str	r3, [r7, #16]
 800919c:	e043      	b.n	8009226 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091b4:	d118      	bne.n	80091e8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10a      	bne.n	80091d2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c8:	461a      	mov	r2, r3
 80091ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091ce:	6013      	str	r3, [r2, #0]
 80091d0:	e013      	b.n	80091fa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091de:	461a      	mov	r2, r3
 80091e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	e008      	b.n	80091fa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f4:	461a      	mov	r2, r3
 80091f6:	2300      	movs	r3, #0
 80091f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009206:	461a      	mov	r2, r3
 8009208:	2300      	movs	r3, #0
 800920a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009218:	461a      	mov	r2, r3
 800921a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800921e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	3301      	adds	r3, #1
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	429a      	cmp	r2, r3
 800922c:	d3b7      	bcc.n	800919e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800922e:	2300      	movs	r3, #0
 8009230:	613b      	str	r3, [r7, #16]
 8009232:	e043      	b.n	80092bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009246:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800924a:	d118      	bne.n	800927e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	4413      	add	r3, r2
 800925a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800925e:	461a      	mov	r2, r3
 8009260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009264:	6013      	str	r3, [r2, #0]
 8009266:	e013      	b.n	8009290 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009274:	461a      	mov	r2, r3
 8009276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800927a:	6013      	str	r3, [r2, #0]
 800927c:	e008      	b.n	8009290 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	015a      	lsls	r2, r3, #5
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	4413      	add	r3, r2
 8009286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800928a:	461a      	mov	r2, r3
 800928c:	2300      	movs	r3, #0
 800928e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929c:	461a      	mov	r2, r3
 800929e:	2300      	movs	r3, #0
 80092a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	015a      	lsls	r2, r3, #5
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4413      	add	r3, r2
 80092aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ae:	461a      	mov	r2, r3
 80092b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	3301      	adds	r3, #1
 80092ba:	613b      	str	r3, [r7, #16]
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	693a      	ldr	r2, [r7, #16]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d3b7      	bcc.n	8009234 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80092e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d105      	bne.n	80092f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	699b      	ldr	r3, [r3, #24]
 80092f0:	f043 0210 	orr.w	r2, r3, #16
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	699a      	ldr	r2, [r3, #24]
 80092fc:	4b0e      	ldr	r3, [pc, #56]	; (8009338 <USB_DevInit+0x2b4>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d005      	beq.n	8009316 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	f043 0208 	orr.w	r2, r3, #8
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009318:	2b01      	cmp	r3, #1
 800931a:	d105      	bne.n	8009328 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	699a      	ldr	r2, [r3, #24]
 8009320:	4b06      	ldr	r3, [pc, #24]	; (800933c <USB_DevInit+0x2b8>)
 8009322:	4313      	orrs	r3, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009328:	7dfb      	ldrb	r3, [r7, #23]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009334:	b004      	add	sp, #16
 8009336:	4770      	bx	lr
 8009338:	803c3800 	.word	0x803c3800
 800933c:	40000004 	.word	0x40000004

08009340 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800934a:	2300      	movs	r3, #0
 800934c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	019b      	lsls	r3, r3, #6
 8009352:	f043 0220 	orr.w	r2, r3, #32
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	3301      	adds	r3, #1
 800935e:	60fb      	str	r3, [r7, #12]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4a09      	ldr	r2, [pc, #36]	; (8009388 <USB_FlushTxFifo+0x48>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d901      	bls.n	800936c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e006      	b.n	800937a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	f003 0320 	and.w	r3, r3, #32
 8009374:	2b20      	cmp	r3, #32
 8009376:	d0f0      	beq.n	800935a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	00030d40 	.word	0x00030d40

0800938c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2210      	movs	r2, #16
 800939c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3301      	adds	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4a09      	ldr	r2, [pc, #36]	; (80093cc <USB_FlushRxFifo+0x40>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d901      	bls.n	80093b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e006      	b.n	80093be <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	f003 0310 	and.w	r3, r3, #16
 80093b8:	2b10      	cmp	r3, #16
 80093ba:	d0f0      	beq.n	800939e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	00030d40 	.word	0x00030d40

080093d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	460b      	mov	r3, r1
 80093da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	78fb      	ldrb	r3, [r7, #3]
 80093ea:	68f9      	ldr	r1, [r7, #12]
 80093ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093f0:	4313      	orrs	r3, r2
 80093f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800941c:	f043 0302 	orr.w	r3, r3, #2
 8009420:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009422:	2003      	movs	r0, #3
 8009424:	f7fa f87a 	bl	800351c <HAL_Delay>

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
	...

08009434 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3301      	adds	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	4a13      	ldr	r2, [pc, #76]	; (8009498 <USB_CoreReset+0x64>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d901      	bls.n	8009452 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800944e:	2303      	movs	r3, #3
 8009450:	e01b      	b.n	800948a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	daf2      	bge.n	8009440 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800945a:	2300      	movs	r3, #0
 800945c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f043 0201 	orr.w	r2, r3, #1
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	3301      	adds	r3, #1
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a09      	ldr	r2, [pc, #36]	; (8009498 <USB_CoreReset+0x64>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d901      	bls.n	800947c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e006      	b.n	800948a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b01      	cmp	r3, #1
 8009486:	d0f0      	beq.n	800946a <USB_CoreReset+0x36>

  return HAL_OK;
 8009488:	2300      	movs	r3, #0
}
 800948a:	4618      	mov	r0, r3
 800948c:	3714      	adds	r7, #20
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr
 8009496:	bf00      	nop
 8009498:	00030d40 	.word	0x00030d40

0800949c <__libc_init_array>:
 800949c:	b570      	push	{r4, r5, r6, lr}
 800949e:	4e0d      	ldr	r6, [pc, #52]	; (80094d4 <__libc_init_array+0x38>)
 80094a0:	4c0d      	ldr	r4, [pc, #52]	; (80094d8 <__libc_init_array+0x3c>)
 80094a2:	1ba4      	subs	r4, r4, r6
 80094a4:	10a4      	asrs	r4, r4, #2
 80094a6:	2500      	movs	r5, #0
 80094a8:	42a5      	cmp	r5, r4
 80094aa:	d109      	bne.n	80094c0 <__libc_init_array+0x24>
 80094ac:	4e0b      	ldr	r6, [pc, #44]	; (80094dc <__libc_init_array+0x40>)
 80094ae:	4c0c      	ldr	r4, [pc, #48]	; (80094e0 <__libc_init_array+0x44>)
 80094b0:	f000 f820 	bl	80094f4 <_init>
 80094b4:	1ba4      	subs	r4, r4, r6
 80094b6:	10a4      	asrs	r4, r4, #2
 80094b8:	2500      	movs	r5, #0
 80094ba:	42a5      	cmp	r5, r4
 80094bc:	d105      	bne.n	80094ca <__libc_init_array+0x2e>
 80094be:	bd70      	pop	{r4, r5, r6, pc}
 80094c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094c4:	4798      	blx	r3
 80094c6:	3501      	adds	r5, #1
 80094c8:	e7ee      	b.n	80094a8 <__libc_init_array+0xc>
 80094ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094ce:	4798      	blx	r3
 80094d0:	3501      	adds	r5, #1
 80094d2:	e7f2      	b.n	80094ba <__libc_init_array+0x1e>
 80094d4:	0800962c 	.word	0x0800962c
 80094d8:	0800962c 	.word	0x0800962c
 80094dc:	0800962c 	.word	0x0800962c
 80094e0:	08009630 	.word	0x08009630

080094e4 <memset>:
 80094e4:	4402      	add	r2, r0
 80094e6:	4603      	mov	r3, r0
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d100      	bne.n	80094ee <memset+0xa>
 80094ec:	4770      	bx	lr
 80094ee:	f803 1b01 	strb.w	r1, [r3], #1
 80094f2:	e7f9      	b.n	80094e8 <memset+0x4>

080094f4 <_init>:
 80094f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094f6:	bf00      	nop
 80094f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fa:	bc08      	pop	{r3}
 80094fc:	469e      	mov	lr, r3
 80094fe:	4770      	bx	lr

08009500 <_fini>:
 8009500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009502:	bf00      	nop
 8009504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009506:	bc08      	pop	{r3}
 8009508:	469e      	mov	lr, r3
 800950a:	4770      	bx	lr
