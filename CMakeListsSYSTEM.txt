cmake_minimum_required(VERSION 3.15.3)

project(CosmOS)

enable_language(C ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 11)

set(EXECUTABLE ${PROJECT_NAME}.out)

set(sourceDirectory "src")
set(unitTestSource "ut.cpp")
set(unitTestDirectory "test/ut")

set(workspace "${CMAKE_CURRENT_SOURCE_DIR}")
set(CM4 "${workspace}/CM4")
set(common "${workspace}/Common")
set(cosmos "${workspace}/Cosmos")
set(drivers "${workspace}/Drivers")
set(middlewares "${workspace}/Middlewares")
set(core "${cosmos}/core")
set(application "${cosmos}/generated/application")
set(generated "${cosmos}/generated/core")
set(integration "${cosmos}/stm32h755_integration")

FILE(GLOB_RECURSE coreIncludeDirs LIST_DIRECTORIES true ${core})
list(FILTER coreIncludeDirs INCLUDE REGEX "^.*/inc$")

FILE(GLOB_RECURSE generatedIncludeDirs LIST_DIRECTORIES true ${generated})
list(FILTER generatedIncludeDirs INCLUDE REGEX "^.*/inc$")

include_directories("${integration}/CIL/inc")
include_directories(${coreIncludeDirs})
include_directories(${generatedIncludeDirs})
include_directories("${application}/inc")
include_directories("${CM4}/Core/Inc")
include_directories("${CM4}/LWIP/App")
include_directories("${CM4}/LWIP/Target")
include_directories("${drivers}/CMSIS/Include")
include_directories("${drivers}/CMSIS/Device/ST/STM32H7xx/Include")
include_directories("${drivers}/STM32H7xx_HAL_Driver/Inc")
include_directories("${drivers}/STM32H7xx_HAL_Driver/Inc/Legacy")
include_directories("${drivers}/BSP/Components/lan8742")
include_directories("${middlewares}/Third_Party/LwIP/src/include")
include_directories("${middlewares}/Third_Party/LwIP/system")

FILE(GLOB_RECURSE coreSourcesC "${core}/*.c")
FILE(GLOB_RECURSE applicationSourcesC "${application}/*.c")
FILE(GLOB_RECURSE applicationSourcesCXX "${application}/*.cpp")
FILE(GLOB_RECURSE generatedSourcesC "${generated}/*.c")
FILE(GLOB_RECURSE integrationSourcesC "${integration}/*.c")
FILE(GLOB_RECURSE driversSourcesC "${drivers}/*.c")
FILE(GLOB_RECURSE middlewaresSourcesC "${middlewares}/*.c")
FILE(GLOB_RECURSE commonSourcesC "${common}/*.c")
FILE(GLOB_RECURSE CM4SourcesC "${CM4}/*.c")
FILE(GLOB_RECURSE CM4SourcesASM "${CM4}/*.s")

add_executable(${EXECUTABLE}
${CM4SourcesC}
${coreSourcesC}
${applicationSourcesC}
${applicationSourcesCXX}
${generatedSourcesC}
${integrationSourcesC}
${driversSourcesC}
${middlewaresSourcesC}
${commonSourcesC}
${CM4SourcesASM}
)

target_compile_definitions(${EXECUTABLE} PRIVATE
        -DUSE_HAL_DRIVER
        -DSTM32H755xx
        -DADDR_32BIT
        -DARCH_32BIT
        -DCORE_CM4
        -DUSE_MULTI_CORE_SHARED_CODE
        )

target_compile_options(${EXECUTABLE} PRIVATE
        -mcpu=cortex-m4
        -mthumb
        -mfpu=fpv4-sp-d16
        -mfloat-abi=hard
        -ffixed-r9
        -fdata-sections
        -ffunction-sections
        -Wall

        $<$<CONFIG:Debug>:-Og>
        )

target_link_options(${EXECUTABLE} PRIVATE
        -T${CMAKE_SOURCE_DIR}/CM4/STM32H755ZITX_FLASH.ld
        -mcpu=cortex-m4
        -mthumb
        -mfpu=fpv5-d16
        -mfloat-abi=hard
        -specs=nano.specs
        -lc
        -lsupc++
        -lstdc++
        -lm
        -lnosys
        -static
        -Wl,-Map=${PROJECT_NAME}.map,--cref
        -Wl,--gc-sections
        -Wl,--print-memory-usage
        )

add_custom_command(TARGET ${EXECUTABLE}
        POST_BUILD
        COMMAND arm-none-eabi-size ${EXECUTABLE})

add_custom_command(TARGET ${EXECUTABLE}
        POST_BUILD
        COMMAND arm-none-eabi-objcopy -O ihex ${EXECUTABLE} ${PROJECT_NAME}.hex
        COMMAND arm-none-eabi-objcopy -O binary ${EXECUTABLE} ${PROJECT_NAME}.bin)
