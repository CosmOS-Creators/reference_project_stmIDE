
../../../../Cosmos/Build/CM7/bin/m7core.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .program_default_CM7_section_init 00000008  20000400  08000298  00010400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .program_default_CM7_section_noInit 00000000  20000408  20000408  000508d0  2**0
                  CONTENTS
  3 .program_blinking_led_CM7_section_init 00000008  20001000  080002a0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .program_blinking_led_CM7_section_noInit 00000000  20001008  20001008  000508d0  2**0
                  CONTENTS
  5 .program_default_CM4_section_init 00000004  10000800  080002a8  00020800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .program_default_CM4_section_noInit 00000000  10000804  10000804  000508d0  2**0
                  CONTENTS
  7 .program_blinking_led_CM4_section_init 00000004  10000c00  080002ac  00020c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .program_blinking_led_CM4_section_noInit 00000000  10000c04  10000c04  000508d0  2**0
                  CONTENTS
  9 .os_section_consts 00000800  38000000  080002b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .os_section_vars 00000200  38008000  08000ab0  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .os_section_funcs 000015a0  08000cb0  08000cb0  00040cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         0000732c  08002250  08002250  00042250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .rodata       00000118  0800957c  0800957c  0004957c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .ARM          00000008  08009694  08009694  00049694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .init_array   00000004  0800969c  0800969c  0004969c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .fini_array   00000004  080096a0  080096a0  000496a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .data         00000010  20000800  080096a4  00050800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .RxDecripSection 00000060  20000810  080096b4  00050810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .TxDecripSection 00000060  20000870  08009714  00050870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .bss          00000694  200008d0  08009774  000508d0  2**2
                  ALLOC
 21 .ARM.attributes 0000002e  00000000  00000000  000508d0  2**0
                  CONTENTS, READONLY
 22 .debug_line   0002c4ae  00000000  00000000  000508fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_info   00042dc6  00000000  00000000  0007cdac  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_abbrev 00008513  00000000  00000000  000bfb72  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_aranges 00001ce0  00000000  00000000  000c8088  2**3
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    001931e5  00000000  00000000  000c9d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_ranges 00001848  00000000  00000000  0025cf50  2**3
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_macro  00042695  00000000  00000000  0025e798  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .comment      00000079  00000000  00000000  002a0e2d  2**0
                  CONTENTS, READONLY
 30 .debug_frame  00006b90  00000000  00000000  002a0ea8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .os_section_funcs:

08000cb0 <buffer_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_readArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b092      	sub	sp, #72	; 0x48
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
    CosmOS_BufferStateType bufferState;


    if ( buffer IS_EQUAL_TO NULL )
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d103      	bne.n	8000cca <buffer_readArray+0x1a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_IS_NULL_POINTER;
 8000cc2:	2304      	movs	r3, #4
 8000cc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000cc8:	e046      	b.n	8000d58 <buffer_readArray+0xa8>
        CosmOS_CoreVariableType * coreVar;
        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * readPermission;


        osVar = os_getOsVar();
 8000cca:	f000 fad9 	bl	8001280 <os_getOsVar>
 8000cce:	63f8      	str	r0, [r7, #60]	; 0x3c
  * @return CosmOS_CoreVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_CoreVariableType * CIL_core_getCoreVar(void)
{    
    uint32_t result;
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8000cd0:	464b      	mov	r3, r9
 8000cd2:	617b      	str	r3, [r7, #20]
    return (CosmOS_CoreVariableType *)result;
 8000cd4:	697b      	ldr	r3, [r7, #20]
        coreVar = CIL_core_getCoreVar();
 8000cd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	61bb      	str	r3, [r7, #24]
  * 
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * os_getOsBufferVar(CosmOS_OsVariableType * osVar, BitWidthType bufferId)
{
    return (&(osVar->bufferVars[bufferId]));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	4413      	add	r3, r2

        bufferVar = os_getOsBufferVar( osVar, id );
 8000cea:	637b      	str	r3, [r7, #52]	; 0x34
 8000cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cee:	623b      	str	r3, [r7, #32]
  * 
  * @return CosmOS_PermissionsConfigurationType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_PermissionsConfigurationType * buffer_getBufferReadPermission(CosmOS_BufferVariableType * bufferVar)
{
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->readPermission);
 8000cf0:	6a3b      	ldr	r3, [r7, #32]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68db      	ldr	r3, [r3, #12]

        readPermission = buffer_getBufferReadPermission( bufferVar );
 8000cf6:	633b      	str	r3, [r7, #48]	; 0x30
        accessState = permission_tryAccess( readPermission, coreVar );
 8000cf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000cfc:	f000 faea 	bl	80012d4 <permission_tryAccess>
 8000d00:	62f8      	str	r0, [r7, #44]	; 0x2c

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000d08:	d103      	bne.n	8000d12 <buffer_readArray+0x62>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d10:	e022      	b.n	8000d58 <buffer_readArray+0xa8>
 8000d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d14:	613b      	str	r3, [r7, #16]
  * 
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getFullCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return (bufferVar->fullCells);
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	68db      	ldr	r3, [r3, #12]
        else
        {
            BitWidthType fullCellsNum;


            fullCellsNum = buffer_getFullCellsNum( bufferVar );
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28

            if ( fullCellsNum >= size)
 8000d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d316      	bcc.n	8000d52 <buffer_readArray+0xa2>
                BitWidthType userBufferIndex;

                unsigned char * userBuffer;

                
                userBuffer = buffer;
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
                userBufferIndex = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	643b      	str	r3, [r7, #64]	; 0x40

                while ( ( userBufferIndex < size ) )
 8000d2c:	e00c      	b.n	8000d48 <buffer_readArray+0x98>
                {
                    bufferState = buffer_pull( bufferVar, ( userBuffer + userBufferIndex ) );
 8000d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d32:	4413      	add	r3, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d38:	f000 f873 	bl	8000e22 <buffer_pull>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    userBufferIndex++;
 8000d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d44:	3301      	adds	r3, #1
 8000d46:	643b      	str	r3, [r7, #64]	; 0x40
                while ( ( userBufferIndex < size ) )
 8000d48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3ee      	bcc.n	8000d2e <buffer_readArray+0x7e>
 8000d50:	e002      	b.n	8000d58 <buffer_readArray+0xa8>
                }
            }
            else
            {
                bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM;
 8000d52:	2306      	movs	r3, #6
 8000d54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8000d58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3748      	adds	r7, #72	; 0x48
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <buffer_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_writeArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b092      	sub	sp, #72	; 0x48
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
    CosmOS_BufferStateType bufferState;


    if ( buffer IS_EQUAL_TO NULL )
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d103      	bne.n	8000d7e <buffer_writeArray+0x1a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_IS_NULL_POINTER;
 8000d76:	2304      	movs	r3, #4
 8000d78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000d7c:	e04b      	b.n	8000e16 <buffer_writeArray+0xb2>
        CosmOS_CoreVariableType * coreVar;
        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * writePermission;


        osVar = os_getOsVar();
 8000d7e:	f000 fa7f 	bl	8001280 <os_getOsVar>
 8000d82:	63f8      	str	r0, [r7, #60]	; 0x3c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8000d84:	464b      	mov	r3, r9
 8000d86:	617b      	str	r3, [r7, #20]
    return (CosmOS_CoreVariableType *)result;
 8000d88:	697b      	ldr	r3, [r7, #20]
        coreVar = CIL_core_getCoreVar();
 8000d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	4413      	add	r3, r2

        bufferVar = os_getOsBufferVar( osVar, id );
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
 8000da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da2:	623b      	str	r3, [r7, #32]
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->writePermission);
 8000da4:	6a3b      	ldr	r3, [r7, #32]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	691b      	ldr	r3, [r3, #16]

        writePermission = buffer_getBufferWritePermission( bufferVar );
 8000daa:	633b      	str	r3, [r7, #48]	; 0x30
        accessState = permission_tryAccess( writePermission, coreVar );
 8000dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000dae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000db0:	f000 fa90 	bl	80012d4 <permission_tryAccess>
 8000db4:	62f8      	str	r0, [r7, #44]	; 0x2c

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8000db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db8:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000dbc:	d103      	bne.n	8000dc6 <buffer_writeArray+0x62>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000dc4:	e027      	b.n	8000e16 <buffer_writeArray+0xb2>
 8000dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc8:	613b      	str	r3, [r7, #16]
  * 
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getEmptyCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return ((bufferVar->cfg->size) - (bufferVar->fullCells));
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	1ad3      	subs	r3, r2, r3
        else
        {   
            BitWidthType emptyCellsNum;


            emptyCellsNum = buffer_getEmptyCellsNum( bufferVar );
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28

            if ( emptyCellsNum >= size)
 8000dd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d317      	bcc.n	8000e10 <buffer_writeArray+0xac>
                BitWidthType userBufferIndex;

                unsigned char * userBuffer;


                userBuffer = buffer;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
                userBufferIndex = 0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	643b      	str	r3, [r7, #64]	; 0x40

                while ( ( userBufferIndex < size ) )
 8000de8:	e00d      	b.n	8000e06 <buffer_writeArray+0xa2>
                {
                    bufferState = buffer_push( bufferVar, *( userBuffer + userBufferIndex ) );
 8000dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dee:	4413      	add	r3, r2
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4619      	mov	r1, r3
 8000df4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000df6:	f000 f84e 	bl	8000e96 <buffer_push>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    userBufferIndex++;
 8000e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e02:	3301      	adds	r3, #1
 8000e04:	643b      	str	r3, [r7, #64]	; 0x40
                while ( ( userBufferIndex < size ) )
 8000e06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d3ed      	bcc.n	8000dea <buffer_writeArray+0x86>
 8000e0e:	e002      	b.n	8000e16 <buffer_writeArray+0xb2>
                }
            }
            else
            {
                bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS;
 8000e10:	2305      	movs	r3, #5
 8000e12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8000e16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3748      	adds	r7, #72	; 0x48
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <buffer_pull>:
{
 8000e22:	b480      	push	{r7}
 8000e24:	b089      	sub	sp, #36	; 0x24
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8000e42:	61bb      	str	r3, [r7, #24]
    *data = *( osBuffer + bufferVar->tail );
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	781a      	ldrb	r2, [r3, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells--;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	60da      	str	r2, [r3, #12]
    bufferVar->tail = ( ( bufferVar->tail + 1 ) % bufferSize );
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	3301      	adds	r3, #1
 8000e62:	69fa      	ldr	r2, [r7, #28]
 8000e64:	fbb3 f2f2 	udiv	r2, r3, r2
 8000e68:	69f9      	ldr	r1, [r7, #28]
 8000e6a:	fb01 f202 	mul.w	r2, r1, r2
 8000e6e:	1a9a      	subs	r2, r3, r2
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	613b      	str	r3, [r7, #16]
  * 
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isEmpty(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT(bufferVar->fullCells) ? BUFFER_STATE_ENUM__EMPTY : BUFFER_STATE_ENUM__OK);
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	bf0c      	ite	eq
 8000e80:	2301      	moveq	r3, #1
 8000e82:	2300      	movne	r3, #0
 8000e84:	b2db      	uxtb	r3, r3
    bufferState = buffer_isEmpty( bufferVar );
 8000e86:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8000e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <buffer_push>:
{
 8000e96:	b480      	push	{r7}
 8000e98:	b089      	sub	sp, #36	; 0x24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	70fb      	strb	r3, [r7, #3]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8000eb8:	61bb      	str	r3, [r7, #24]
    *( osBuffer + bufferVar->head ) = data;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	78fa      	ldrb	r2, [r7, #3]
 8000ec4:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells++;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60da      	str	r2, [r3, #12]
    bufferVar->head = ( ( bufferVar->head + 1 ) % bufferSize );
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000edc:	69f9      	ldr	r1, [r7, #28]
 8000ede:	fb01 f202 	mul.w	r2, r1, r2
 8000ee2:	1a9a      	subs	r2, r3, r2
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	613b      	str	r3, [r7, #16]
  * 
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isFull(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT((bufferVar->cfg->size) ^ (bufferVar->fullCells)) ? \
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	68db      	ldr	r3, [r3, #12]
    BUFFER_STATE_ENUM__FULL : BUFFER_STATE_ENUM__OK);
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d101      	bne.n	8000efe <buffer_push+0x68>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e000      	b.n	8000f00 <buffer_push+0x6a>
 8000efe:	2300      	movs	r3, #0
    bufferState = buffer_isFull( bufferVar );
 8000f00:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3724      	adds	r7, #36	; 0x24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <bufferDouble_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_readArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	; 0x38
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8000f1e:	f000 f9af 	bl	8001280 <os_getOsVar>
 8000f22:	6338      	str	r0, [r7, #48]	; 0x30
 8000f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f26:	623b      	str	r3, [r7, #32]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	61fb      	str	r3, [r7, #28]
  * 
  * @return CosmOS_BufferDoubleVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferDoubleVariableType * os_getOsBufferDoubleVar(CosmOS_OsVariableType * osVar, BitWidthType bufferDoubleId)
{
    return (&(osVar->bufferDoubleVars[bufferDoubleId]));
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	68d9      	ldr	r1, [r3, #12]
 8000f30:	69fa      	ldr	r2, [r7, #28]
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8000f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8000f3e:	78fb      	ldrb	r3, [r7, #3]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d002      	beq.n	8000f4a <bufferDouble_readArray+0x3a>
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d00b      	beq.n	8000f60 <bufferDouble_readArray+0x50>
        }

        default :
        {
            /* PANIC */
            break;
 8000f48:	e015      	b.n	8000f76 <bufferDouble_readArray+0x66>
 8000f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f4c:	61bb      	str	r3, [r7, #24]
  * 
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * bufferDouble_getBufferDoubleUserBuffer(CosmOS_BufferDoubleVariableType * bufferDoubleVar)
{
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8000f5e:	e00a      	b.n	8000f76 <bufferDouble_readArray+0x66>
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8000f74:	bf00      	nop
 8000f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f78:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->id);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_readArray( bufferId, buffer, size );
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	68b9      	ldr	r1, [r7, #8]
 8000f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f88:	f7ff fe92 	bl	8000cb0 <buffer_readArray>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8000f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3738      	adds	r7, #56	; 0x38
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <bufferDouble_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_writeArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b08e      	sub	sp, #56	; 0x38
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8000fac:	f000 f968 	bl	8001280 <os_getOsVar>
 8000fb0:	6338      	str	r0, [r7, #48]	; 0x30
 8000fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fb4:	623b      	str	r3, [r7, #32]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	6a3b      	ldr	r3, [r7, #32]
 8000fbc:	68d9      	ldr	r1, [r3, #12]
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	4413      	add	r3, r2
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d002      	beq.n	8000fd8 <bufferDouble_writeArray+0x3a>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d00b      	beq.n	8000fee <bufferDouble_writeArray+0x50>
        }

        default :
        {
            /* PANIC */
            break;
 8000fd6:	e015      	b.n	8001004 <bufferDouble_writeArray+0x66>
 8000fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fda:	61bb      	str	r3, [r7, #24]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8000fea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8000fec:	e00a      	b.n	8001004 <bufferDouble_writeArray+0x66>
 8000fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ff0:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8001002:	bf00      	nop
 8001004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_writeArray( bufferId, buffer, size );
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001016:	f7ff fea5 	bl	8000d64 <buffer_writeArray>
 800101a:	4603      	mov	r3, r0
 800101c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8001020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001024:	4618      	mov	r0, r3
 8001026:	3738      	adds	r7, #56	; 0x38
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}

0800102c <core_getCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_CoreVariableType * core_getCoreVar(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8001032:	464b      	mov	r3, r9
 8001034:	607b      	str	r3, [r7, #4]
    return (CosmOS_CoreVariableType *)result;
 8001036:	687b      	ldr	r3, [r7, #4]
    return CIL_core_getCoreVar();
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <core_setSchedulableIntoCurrentContext>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void core_setSchedulableIntoCurrentContext(CosmOS_CoreVariableType * coreVar, CosmOS_SchedulableVariableType * schedulableVar)
{
 8001044:	b480      	push	{r7}
 8001046:	b08d      	sub	sp, #52	; 0x34
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	60fb      	str	r3, [r7, #12]
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType schedulable_getProgramId(CosmOS_SchedulableVariableType * schedulable)
{
    return (schedulable->cfg->programId);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	699b      	ldr	r3, [r3, #24]
    BitWidthType programId;

    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulableVar );
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001060:	613b      	str	r3, [r7, #16]
  * 
  * @return CosmOS_ProgramVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ProgramVariableType * core_getCoreProgramVar(CosmOS_CoreVariableType * core, BitWidthType programIterator)
{
    return (&(core->programVars[programIterator]));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	68d9      	ldr	r1, [r3, #12]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4613      	mov	r3, r2
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4413      	add	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
    programVar = core_getCoreProgramVar( coreVar, programId ); 
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107a:	61bb      	str	r3, [r7, #24]
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreProgramInExecution(CosmOS_CoreVariableType * core, CosmOS_ProgramVariableType * programInExecutionParam)
{
    core->programInExecution = programInExecutionParam;
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	609a      	str	r2, [r3, #8]
}
 8001082:	bf00      	nop
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	623b      	str	r3, [r7, #32]
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreSchedulableInExecution(CosmOS_CoreVariableType * core, CosmOS_SchedulableVariableType * schedulableInExecutionParam)
{
    core->schedulableInExecution = schedulableInExecutionParam;
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	6a3a      	ldr	r2, [r7, #32]
 8001090:	605a      	str	r2, [r3, #4]
}
 8001092:	bf00      	nop

    core_setCoreProgramInExecution( coreVar, programVar );
    core_setCoreSchedulableInExecution( coreVar, schedulableVar );
}
 8001094:	bf00      	nop
 8001096:	3734      	adds	r7, #52	; 0x34
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <coreSync_getBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_getBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b096      	sub	sp, #88	; 0x58
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    return (&(core->barrierVars[barrierId]));
 80010b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
    CosmOS_BarrierVariableType * barrierVar;

    volatile CosmOS_BarrierStateType barrierState;


    barrierVar = core_getBarrierVar( coreVar, barrierId );
 80010bc:	653b      	str	r3, [r7, #80]	; 0x50
 80010be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
 80010c2:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void coreSync_setBarrierState(CosmOS_BarrierVariableType * barrier, CosmOS_BarrierStateType barrierStateParam)
{
    barrier->barrierState = barrierStateParam;
 80010c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010cc:	601a      	str	r2, [r3, #0]
}
 80010ce:	bf00      	nop
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__REACHED);

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    osVar = os_getOsVar();
 80010d0:	f000 f8d6 	bl	8001280 <os_getOsVar>
 80010d4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80010d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010d8:	637b      	str	r3, [r7, #52]	; 0x34
    return (osVar->cfg->numberOfCores);
 80010da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 80010e0:	64bb      	str	r3, [r7, #72]	; 0x48

    numberOfSynchronizedCores = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	657b      	str	r3, [r7, #84]	; 0x54
 80010e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
    return (&(osVar->coreVars[coreId]));
 80010ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010f4:	015b      	lsls	r3, r3, #5
 80010f6:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, numberOfSynchronizedCores );
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	643b      	str	r3, [r7, #64]	; 0x40
 8001102:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
    barrierVar = core_getBarrierVar( coreVar, barrierId );
 800110c:	653b      	str	r3, [r7, #80]	; 0x50

    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 800110e:	e026      	b.n	800115e <coreSync_getBarrier+0xbe>
 8001110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001112:	623b      	str	r3, [r7, #32]
    return (barrier->barrierState);
 8001114:	6a3b      	ldr	r3, [r7, #32]
 8001116:	681b      	ldr	r3, [r3, #0]
    {
        barrierState = coreSync_getBarrierState( barrierVar );
 8001118:	60fb      	str	r3, [r7, #12]
        
        if ( ( barrierState IS_EQUAL_TO BARRIER_STATE_ENUM__REACHED ) )
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8001120:	d11d      	bne.n	800115e <coreSync_getBarrier+0xbe>
        {
            numberOfSynchronizedCores++;
 8001122:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001124:	3301      	adds	r3, #1
 8001126:	657b      	str	r3, [r7, #84]	; 0x54

            coreVar = os_getCoreVar( osVar, ( numberOfSynchronizedCores % numberOfCores ) );
 8001128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800112a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800112c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001130:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001132:	fb01 f202 	mul.w	r2, r1, r2
 8001136:	1a9b      	subs	r3, r3, r2
 8001138:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800113a:	617a      	str	r2, [r7, #20]
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	015b      	lsls	r3, r3, #5
 8001146:	4413      	add	r3, r2
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	61bb      	str	r3, [r7, #24]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
            barrierVar = core_getBarrierVar( coreVar, barrierId );
 800115c:	653b      	str	r3, [r7, #80]	; 0x50
    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 800115e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001162:	429a      	cmp	r2, r3
 8001164:	d1d4      	bne.n	8001110 <coreSync_getBarrier+0x70>
        }
    }
}
 8001166:	bf00      	nop
 8001168:	bf00      	nop
 800116a:	3758      	adds	r7, #88	; 0x58
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <coreSync_reactivateBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_reactivateBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	; 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
    CosmOS_BarrierVariableType * barrierVar;

    cosmosAssert( barrierId IS_EQUAL_TO SCHEDULERS_SYNC_ID );
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b03      	cmp	r3, #3
 800117e:	bf0c      	ite	eq
 8001180:	2301      	moveq	r3, #1
 8001182:	2300      	movne	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	60bb      	str	r3, [r7, #8]
    }
    else
    {
      
    }
}
 8001188:	bf00      	nop
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2

    barrierVar = core_getBarrierVar( coreVar, barrierId );
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
    barrier->barrierState = barrierStateParam;
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	bf00      	nop
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__ACTIVATED );

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */
}
 80011ae:	bf00      	nop
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <deviceIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void deviceIO_togglePin(BitWidthType id, void *GPIOx, BitWidthType GPIO_Pin)
{    
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
    CIL_GPIO_togglePin( GPIOx, GPIO_Pin );
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	68b8      	ldr	r0, [r7, #8]
 80011ca:	f000 fd7e 	bl	8001cca <CIL_GPIO_togglePin>
}
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <memoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_init(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
    CIL_memoryProtection_init();
 80011da:	f000 fd85 	bl	8001ce8 <CIL_memoryProtection_init>
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <memoryProtection_setMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_setMemoryProtection(CosmOS_CoreVariableType * core,CosmOS_SchedulableVariableType  * schedulable)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b096      	sub	sp, #88	; 0x58
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	6039      	str	r1, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	699b      	ldr	r3, [r3, #24]

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulable );
 80011f6:	657b      	str	r3, [r7, #84]	; 0x54
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011fe:	613b      	str	r3, [r7, #16]
    return (&(core->programVars[programIterator]));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	68d9      	ldr	r1, [r3, #12]
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4613      	mov	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
    programVar = core_getCoreProgramVar( core, programId ); 
 8001210:	653b      	str	r3, [r7, #80]	; 0x50
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	61bb      	str	r3, [r7, #24]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]

    stack = schedulable_getStack( schedulable );
 800121c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800121e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  * 
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackLowAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackLowAddress);
 8001226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001228:	685b      	ldr	r3, [r3, #4]
    stackLowAddress = stack_getStackLowAddress( stack );
 800122a:	627b      	str	r3, [r7, #36]	; 0x24
 800122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122e:	623b      	str	r3, [r7, #32]
  * 
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackHighAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackHighAddress);
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 8001234:	61fb      	str	r3, [r7, #28]
    CIL_memoryProtection_setStackOverflowProtection( stackLowAddress, stackHighAddress );
 8001236:	69f9      	ldr	r1, [r7, #28]
 8001238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800123a:	f000 fe55 	bl	8001ee8 <CIL_memoryProtection_setStackOverflowProtection>
}
 800123e:	bf00      	nop
 8001240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001242:	64bb      	str	r3, [r7, #72]	; 0x48
 8001244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001246:	647b      	str	r3, [r7, #68]	; 0x44
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemorySize(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemorySize);
 8001248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
    size = program_getProgramMemorySize( program );
 800124e:	643b      	str	r3, [r7, #64]	; 0x40
 8001250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001252:	63fb      	str	r3, [r7, #60]	; 0x3c
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryLowAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryLowAddress);
 8001254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	691b      	ldr	r3, [r3, #16]
    lowAddress = program_getProgramMemoryLowAddress( program );
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
 800125c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800125e:	637b      	str	r3, [r7, #52]	; 0x34
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryHighAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryHighAddress);
 8001260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	695b      	ldr	r3, [r3, #20]
    highAddress = program_getProgramMemoryHighAddress( program );
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
    if ( size )
 8001268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <memoryProtection_setMemoryProtection+0x94>
        CIL_memoryProtection_setProgramMemoryProtection( lowAddress, highAddress );
 800126e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001270:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001272:	f000 fe95 	bl	8001fa0 <CIL_memoryProtection_setProgramMemoryProtection>
}
 8001276:	bf00      	nop

    memoryProtection_setStackOverflowProtection( stack );
    memoryProtection_setProgramMemoryProtection( programVar );
}
 8001278:	bf00      	nop
 800127a:	3758      	adds	r7, #88	; 0x58
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <os_getOsVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_OsVariableType * os_getOsVar(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
    return &OsVar;
 8001284:	4b02      	ldr	r3, [pc, #8]	; (8001290 <os_getOsVar+0x10>)
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	380080cc 	.word	0x380080cc

08001294 <os_start>:
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
    scheduler_start();
 8001298:	f000 fa49 	bl	800172e <scheduler_start>
};
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}

080012a0 <osInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osInit_init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_OsVariableType * osVar;

    switchMemoryProtection_init();
 80012a6:	f7ff ff96 	bl	80011d6 <memoryProtection_init>

    osVar = os_getOsVar();
 80012aa:	f7ff ffe9 	bl	8001280 <os_getOsVar>
 80012ae:	6078      	str	r0, [r7, #4]

    CIL_core_setCoreVar(osVar);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 fce4 	bl	8001c7e <CIL_core_setCoreVar>

    coreVar = core_getCoreVar();
 80012b6:	f7ff feb9 	bl	800102c <core_getCoreVar>
 80012ba:	6038      	str	r0, [r7, #0]

    stackInit_init( coreVar );
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f000 fbe2 	bl	8001a86 <stackInit_init>

    //init MPU 
    //init DMA to buffers
    //Maybe better have here CIL_microInit()

    coreSync_getBarrier( coreVar, OS_INIT_ID );
 80012c2:	2100      	movs	r1, #0
 80012c4:	6838      	ldr	r0, [r7, #0]
 80012c6:	f7ff feeb 	bl	80010a0 <coreSync_getBarrier>
    
};
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <permission_tryAccess>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_AccessStateType permission_tryAccess(CosmOS_PermissionsConfigurationType * permission,CosmOS_CoreVariableType * coreVar)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	60bb      	str	r3, [r7, #8]
    return (core->schedulableInExecution);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	685b      	ldr	r3, [r3, #4]
    CosmOS_AccessStateType accessState;

    CosmOS_SchedulableVariableType * schedulableVar;

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	613b      	str	r3, [r7, #16]
    cosmosAssert( IS_NOT( permission[schedulableVar->cfg->coreId].bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] & \
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	4413      	add	r3, r2
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	491f      	ldr	r1, [pc, #124]	; (8001384 <permission_tryAccess+0xb0>)
 8001306:	5ccb      	ldrb	r3, [r1, r3]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	69db      	ldr	r3, [r3, #28]
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	6979      	ldr	r1, [r7, #20]
 8001318:	440b      	add	r3, r1
 800131a:	6859      	ldr	r1, [r3, #4]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	691b      	ldr	r3, [r3, #16]
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <permission_tryAccess+0xb0>)
 8001324:	5cc3      	ldrb	r3, [r0, r3]
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	440b      	add	r3, r1
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4013      	ands	r3, r2
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	bf00      	nop
    return ((( permission[schedulableVar->cfg->coreId].bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] >> schedulableVar->cfg->id ) & BITLOCK_MASK ) ? \
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	4413      	add	r3, r2
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <permission_tryAccess+0xb0>)
 8001352:	5ccb      	ldrb	r3, [r1, r3]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	691b      	ldr	r3, [r3, #16]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	f003 0301 	and.w	r3, r3, #1
            ACCESS_STATE_ENUM__ALLOWED : ACCESS_STATE_ENUM__DENIED );
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <permission_tryAccess+0x9c>
 800136c:	2300      	movs	r3, #0
 800136e:	e001      	b.n	8001374 <permission_tryAccess+0xa0>
 8001370:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    accessState = permission_trySchedulableAccess( permission, schedulableVar );
 8001374:	61bb      	str	r3, [r7, #24]

    return accessState;
 8001376:	69bb      	ldr	r3, [r7, #24]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3724      	adds	r7, #36	; 0x24
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	38000060 	.word	0x38000060

08001388 <schedulable_setExecutionStateToFinished>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void schedulable_setExecutionStateToFinished(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 800138e:	f7ff fe4d 	bl	800102c <core_getCoreVar>
 8001392:	6178      	str	r0, [r7, #20]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	2302      	movs	r3, #2
 80013a4:	72fb      	strb	r3, [r7, #11]
  * 
  * @return CosmOS_SchedulableStateType
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setState(CosmOS_SchedulableVariableType * schedulable, CosmOS_SchedulableStateType stateParam)
{
    schedulable->state = stateParam;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	7afa      	ldrb	r2, [r7, #11]
 80013aa:	711a      	strb	r2, [r3, #4]
}
 80013ac:	bf00      	nop

    schedulable_setState( schedulableVar, SCHEDULABLE_INSTANCE_ENUM__EXECUTED );
};
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <scheduler_performanceScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_performanceScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b093      	sub	sp, #76	; 0x4c
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	613b      	str	r3, [r7, #16]
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType scheduler_getSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler)
{
    return (scheduler->threadListIterator);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	68db      	ldr	r3, [r3, #12]
        threadListElementsNum;

    CosmOS_ThreadVariableType *threadVar;


    threadListIterator = scheduler_getSchedulerThreadListIterator(schedulerVar);
 80013cc:	647b      	str	r3, [r7, #68]	; 0x44
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	617b      	str	r3, [r7, #20]
    return (scheduler->cfg->threadListElementsNum);
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
    threadListElementsNum = scheduler_getSchedulerThreadListElementsNum(schedulerVar);
 80013d8:	643b      	str	r3, [r7, #64]	; 0x40

    cosmosAssert(threadListIterator < threadListElementsNum);
 80013da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013de:	429a      	cmp	r2, r3
 80013e0:	bf34      	ite	cc
 80013e2:	2301      	movcc	r3, #1
 80013e4:	2300      	movcs	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	bf00      	nop
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	623b      	str	r3, [r7, #32]
 80013f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f2:	61fb      	str	r3, [r7, #28]
  * 
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * scheduler_getSchedulerThreadListThreadVar(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIterator)
{
    return (CosmOS_ThreadVariableType *)(scheduler->cfg->threadList[threadListIterator].threadVar);
 80013f4:	6a3b      	ldr	r3, [r7, #32]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	681b      	ldr	r3, [r3, #0]

    threadVar = scheduler_getSchedulerThreadListThreadVar(schedulerVar, threadListIterator);
 8001402:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  * 
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * thread_getThreadSchedulable(CosmOS_ThreadVariableType * thread)
{
    return (CosmOS_SchedulableVariableType *)(thread->schedulable);
 8001408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140a:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = thread_getThreadSchedulable(threadVar);
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = schedulable_getStackPointer(*schedulableVar);
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
    return (schedulable->stackPointer);
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	601a      	str	r2, [r3, #0]

    threadListIterator = ((threadListIterator + 1) % threadListElementsNum);
 800141e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001420:	3301      	adds	r3, #1
 8001422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001424:	fbb3 f2f2 	udiv	r2, r3, r2
 8001428:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800142a:	fb01 f202 	mul.w	r2, r1, r2
 800142e:	1a9b      	subs	r3, r3, r2
 8001430:	647b      	str	r3, [r7, #68]	; 0x44
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
 8001436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIteratorParam)
{
    scheduler->threadListIterator = threadListIteratorParam;
 800143a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800143c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800143e:	60da      	str	r2, [r3, #12]
}
 8001440:	bf00      	nop
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->preemptTick);
 8001446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
    scheduler_setSchedulerThreadListIterator(schedulerVar, threadListIterator);

    preemptTick = scheduler_getSchedulerPreemptTick(schedulerVar);
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
    *timerTicks = preemptTick;
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001452:	601a      	str	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	374c      	adds	r7, #76	; 0x4c
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <scheduler_classicScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_classicScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks, BitWidthType startTick, BitWidthType currentTick)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	617b      	str	r3, [r7, #20]
    return (CosmOS_TaskVariableType *)(scheduler->cfg->idleTaskVar);
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    CosmOS_TaskVariableType * taskVar;


    taskVar = scheduler_getSchedulerIdleTaskVar( schedulerVar );
 8001478:	61fb      	str	r3, [r7, #28]
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	61bb      	str	r3, [r7, #24]
  * 
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * task_getTaskSchedulable(CosmOS_TaskVariableType * task)
{
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = task_getTaskSchedulable( taskVar );
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f000 fad5 	bl	8001a3a <stackInit_schedulableStackInit>
 8001490:	4602      	mov	r2, r0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	601a      	str	r2, [r3, #0]

    if ( startTick < currentTick )
 8001496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	429a      	cmp	r2, r3
 800149c:	d207      	bcs.n	80014ae <scheduler_classicScheduling+0x4e>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->lastToFirstTaskTicks);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	699a      	ldr	r2, [r3, #24]
    {
        *timerTicks = scheduler_getSchedulerLastToFirstTaskTicks( schedulerVar );
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *timerTicks = startTick - currentTick;
    }
}
 80014ac:	e004      	b.n	80014b8 <scheduler_classicScheduling+0x58>
        *timerTicks = startTick - currentTick;
 80014ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b2:	1ad2      	subs	r2, r2, r3
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	601a      	str	r2, [r3, #0]
}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <scheduler_scheduleNextInstance>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType scheduler_scheduleNextInstance(StackPointerType stackPointer)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0b4      	sub	sp, #208	; 0xd0
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;
    CosmOS_SchedulableVariableType * priorSchedulableVar;


    coreVar = core_getCoreVar();
 80014c8:	f7ff fdb0 	bl	800102c <core_getCoreVar>
 80014cc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80014d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80014d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return (core->schedulerVar);
 80014d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014dc:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 80014de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80014e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80014e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (core->schedulableInExecution);
 80014ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014ee:	685b      	ldr	r3, [r3, #4]
    priorSchedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 80014f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80014f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80014f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->cfg->hyperTick);
 80014fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8001504:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001508:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800150c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->schedulerState);
 8001510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001514:	7c1b      	ldrb	r3, [r3, #16]
    schedulerState = scheduler_getSchedulerState( schedulerVar );
 8001516:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 800151a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800151e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (scheduler->currentTick);
 8001522:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001526:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8001528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800152c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001530:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->scheduleTableIterator);
 8001534:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001538:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001540:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->cfg->scheduleTableElementsNum);
 8001544:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 800154c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    if ( scheduleTableElementsNum )
 8001550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01c      	beq.n	8001592 <scheduler_scheduleNextInstance+0xd2>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800155e:	429a      	cmp	r2, r3
 8001560:	bf8c      	ite	hi
 8001562:	2301      	movhi	r3, #1
 8001564:	2300      	movls	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800156c:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001574:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001578:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 800157c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    }

    //this should be moved to the sysTick interrupt with higher priority to have faster response - without else, that should stay here
    if ( schedulerState IS_EQUAL_TO SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK )
 8001592:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <scheduler_scheduleNextInstance+0xea>
 800159a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800159e:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (schedulable->state);
 80015a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015a2:	791b      	ldrb	r3, [r3, #4]
    {
        CosmOS_SchedulableStateType schedulableState;

        schedulableState = schedulable_getState( priorSchedulableVar );
 80015a4:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 80015a8:	e008      	b.n	80015bc <scheduler_scheduleNextInstance+0xfc>
 80015aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	677b      	str	r3, [r7, #116]	; 0x74
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setStackPointer(CosmOS_SchedulableVariableType * schedulable, StackPointerType stackPointerParam)
{
    schedulable->stackPointer = stackPointerParam;
 80015b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80015b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015b8:	609a      	str	r2, [r3, #8]
}
 80015ba:	bf00      	nop
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_setStackPointer( priorSchedulableVar, stackPointer );
    }

    if ( scheduleTableElementsNum AND startTick IS_EQUAL_TO currentTick )
 80015bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d060      	beq.n	8001686 <scheduler_scheduleNextInstance+0x1c6>
 80015c4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80015c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d15a      	bne.n	8001686 <scheduler_scheduleNextInstance+0x1c6>
 80015d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015d4:	673b      	str	r3, [r7, #112]	; 0x70
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80015e2:	f107 0318 	add.w	r3, r7, #24
 80015e6:	667b      	str	r3, [r7, #100]	; 0x64
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	663b      	str	r3, [r7, #96]	; 0x60
 80015ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 80015f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80015fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80015fc:	657b      	str	r3, [r7, #84]	; 0x54
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 80015fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4413      	add	r3, r2
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	653b      	str	r3, [r7, #80]	; 0x50
 800160e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001610:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001614:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8001616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001618:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 800161a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f000 fa0b 	bl	8001a3a <stackInit_schedulableStackInit>
 8001624:	4602      	mov	r2, r0
 8001626:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001628:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 800162a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001630:	2301      	movs	r3, #1
 8001632:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    schedulable->state = stateParam;
 8001636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001638:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800163c:	711a      	strb	r2, [r3, #4]
}
 800163e:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8001640:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	3301      	adds	r3, #1
 8001646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001648:	fbb3 f2f2 	udiv	r2, r3, r2
 800164c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800164e:	fb01 f202 	mul.w	r2, r1, r2
 8001652:	1a9a      	subs	r2, r3, r2
 8001654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001656:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8001658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800165e:	643a      	str	r2, [r7, #64]	; 0x40
 8001660:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8001662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001666:	609a      	str	r2, [r3, #8]
}
 8001668:	bf00      	nop
 800166a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800166c:	63bb      	str	r3, [r7, #56]	; 0x38
    return (task->cfg->wcet);
 800166e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
    *timerTicks = wcet;
 8001676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800167a:	601a      	str	r2, [r3, #0]
}
 800167c:	bf00      	nop
    {   
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001684:	e00c      	b.n	80016a0 <scheduler_scheduleNextInstance+0x1e0>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	f107 0210 	add.w	r2, r7, #16
 800168e:	f107 010c 	add.w	r1, r7, #12
 8001692:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001696:	f7ff fe8e 	bl	80013b6 <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 800169a:	2302      	movs	r3, #2
 800169c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	623a      	str	r2, [r7, #32]
 80016a6:	61fb      	str	r3, [r7, #28]
    schedulable->stackPointer = stackPointerParam;
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	609a      	str	r2, [r3, #8]
}
 80016ae:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4619      	mov	r1, r3
 80016b4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016b8:	f7ff fcc4 	bl	8001044 <core_setSchedulableIntoCurrentContext>
 80016bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016c2:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80016c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_SchedulerStateType schedulerStateParam)
{
    scheduler->schedulerState = schedulerStateParam;
 80016ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016cc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80016d0:	741a      	strb	r2, [r3, #16]
}
 80016d2:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    currentTick = ( ( currentTick + timerTicks ) % hyperTick ); 
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80016e0:	4413      	add	r3, r2
 80016e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80016e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80016ea:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80016ee:	fb01 f202 	mul.w	r2, r1, r2
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80016f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016fc:	633b      	str	r3, [r7, #48]	; 0x30
 80016fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001702:	62fb      	str	r3, [r7, #44]	; 0x2c
    scheduler->currentTick = currentTickParam;
 8001704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001708:	605a      	str	r2, [r3, #4]
}
 800170a:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4619      	mov	r1, r3
 8001710:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001714:	f7ff fd65 	bl	80011e2 <memoryProtection_setMemoryProtection>

    CIL_sysTimer_setTicks( timerTicks, schedulersSyncState );
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fd5e 	bl	80021e0 <CIL_sysTimer_setTicks>

    return stackPointerRetVal;
 8001724:	693b      	ldr	r3, [r7, #16]
};
 8001726:	4618      	mov	r0, r3
 8001728:	37d0      	adds	r7, #208	; 0xd0
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <scheduler_start>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_start(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b0aa      	sub	sp, #168	; 0xa8
 8001732:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8001734:	f7ff fc7a 	bl	800102c <core_getCoreVar>
 8001738:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 800173c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001740:	677b      	str	r3, [r7, #116]	; 0x74
    return (core->schedulerVar);
 8001742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001744:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8001746:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800174a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800174e:	67bb      	str	r3, [r7, #120]	; 0x78
    return (scheduler->cfg->hyperTick);
 8001750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8001756:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800175a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800175e:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (scheduler->currentTick);
 8001760:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001762:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8001764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001768:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800176c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (scheduler->scheduleTableIterator);
 8001770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001774:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800177c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTableElementsNum);
 8001780:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8001788:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if ( scheduleTableElementsNum )
 800178c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001790:	2b00      	cmp	r3, #0
 8001792:	d017      	beq.n	80017c4 <scheduler_start+0x96>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800179a:	429a      	cmp	r2, r3
 800179c:	bf8c      	ite	hi
 800179e:	2301      	movhi	r3, #1
 80017a0:	2300      	movls	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80017a6:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80017ae:	673a      	str	r2, [r7, #112]	; 0x70
 80017b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 80017b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	4413      	add	r3, r2
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }

    if ( scheduleTableElementsNum AND (startTick IS_EQUAL_TO currentTick) )
 80017c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d05e      	beq.n	800188a <scheduler_start+0x15c>
 80017cc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80017d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d158      	bne.n	800188a <scheduler_start+0x15c>
 80017d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80017dc:	667b      	str	r3, [r7, #100]	; 0x64
 80017de:	463b      	mov	r3, r7
 80017e0:	663b      	str	r3, [r7, #96]	; 0x60
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	657b      	str	r3, [r7, #84]	; 0x54
 80017f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017f6:	653b      	str	r3, [r7, #80]	; 0x50
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 80017f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80017fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001800:	64bb      	str	r3, [r7, #72]	; 0x48
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8001802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800180a:	00db      	lsls	r3, r3, #3
 800180c:	4413      	add	r3, r2
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	647b      	str	r3, [r7, #68]	; 0x44
 8001812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001814:	643b      	str	r3, [r7, #64]	; 0x40
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8001816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001818:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 800181a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800181c:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 800181e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f000 f909 	bl	8001a3a <stackInit_schedulableStackInit>
 8001828:	4602      	mov	r2, r0
 800182a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800182c:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 800182e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001834:	2301      	movs	r3, #1
 8001836:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    schedulable->state = stateParam;
 800183a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800183c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001840:	711a      	strb	r2, [r3, #4]
}
 8001842:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8001844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800184c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001850:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001852:	fb01 f202 	mul.w	r2, r1, r2
 8001856:	1a9a      	subs	r2, r3, r2
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 800185c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001862:	637a      	str	r2, [r7, #52]	; 0x34
 8001864:	633b      	str	r3, [r7, #48]	; 0x30
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8001866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800186a:	609a      	str	r2, [r3, #8]
}
 800186c:	bf00      	nop
 800186e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (task->cfg->wcet);
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
    *timerTicks = wcet;
 800187a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800187c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800187e:	601a      	str	r2, [r3, #0]
}
 8001880:	bf00      	nop
    {   
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8001882:	2301      	movs	r3, #1
 8001884:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001888:	e00b      	b.n	80018a2 <scheduler_start+0x174>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	f107 0208 	add.w	r2, r7, #8
 8001892:	4639      	mov	r1, r7
 8001894:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001898:	f7ff fd8d 	bl	80013b6 <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 800189c:	2302      	movs	r3, #2
 800189e:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	617a      	str	r2, [r7, #20]
 80018a8:	613b      	str	r3, [r7, #16]
    schedulable->stackPointer = stackPointerParam;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	609a      	str	r2, [r3, #8]
}
 80018b0:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80018ba:	f7ff fbc3 	bl	8001044 <core_setSchedulableIntoCurrentContext>
 80018be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 80018c8:	76fb      	strb	r3, [r7, #27]
    scheduler->schedulerState = schedulerStateParam;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	7efa      	ldrb	r2, [r7, #27]
 80018ce:	741a      	strb	r2, [r3, #16]
}
 80018d0:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    currentTick = ( currentTick + timerTicks ) % hyperTick;
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018de:	4413      	add	r3, r2
 80018e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80018e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80018e8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80018ec:	fb01 f202 	mul.w	r2, r1, r2
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80018f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
 80018fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001900:	623b      	str	r3, [r7, #32]
    scheduler->currentTick = currentTickParam;
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	6a3a      	ldr	r2, [r7, #32]
 8001906:	605a      	str	r2, [r3, #4]
}
 8001908:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar , schedulableVar );
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001912:	f7ff fc66 	bl	80011e2 <memoryProtection_setMemoryProtection>

    CIL_sysTimer_setTicks( timerTicks, schedulersSyncState );
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800191c:	4618      	mov	r0, r3
 800191e:	f000 fc5f 	bl	80021e0 <CIL_sysTimer_setTicks>

    CIL_stack_setStackPointer( stackPointerRetVal );
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 fbda 	bl	80020de <CIL_stack_setStackPointer>
};
 800192a:	bf00      	nop
 800192c:	37a8      	adds	r7, #168	; 0xa8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <schedulerSync_sync>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SchedulerSyncStateType schedulerSync_sync(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_CoreVariableType * coreVar, BitWidthType currentTick, BitWidthType hyperTick)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b096      	sub	sp, #88	; 0x58
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
    
    CosmOS_BooleanType syncInitState;

    CosmOS_SchedulerSyncStateType schedulerState = SCHEDULER_SYNC_STATE_ENUM__NOT_IN_SYNC;
 8001940:	2300      	movs	r3, #0
 8001942:	657b      	str	r3, [r7, #84]	; 0x54
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->syncInitState);
 8001948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800194a:	7e1b      	ldrb	r3, [r3, #24]


    syncInitState = scheduler_getSchedulerSyncInitState( schedulerVar );
 800194c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    if ( __COSMOS_UNLIKELY( syncInitState IS_EQUAL_TO False ) )
 8001950:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b00      	cmp	r3, #0
 8001960:	d030      	beq.n	80019c4 <schedulerSync_sync+0x92>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->firstSyncTaskStartTick);
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a1b      	ldr	r3, [r3, #32]
    {
        BitWidthType firstSyncTaskStartTick;


        firstSyncTaskStartTick = scheduler_getSchedulerFirstSyncTaskStartTick( schedulerVar );
 800196c:	647b      	str	r3, [r7, #68]	; 0x44

        if ( firstSyncTaskStartTick IS_EQUAL_TO currentTick )
 800196e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	429a      	cmp	r2, r3
 8001974:	d150      	bne.n	8001a18 <schedulerSync_sync+0xe6>
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	623b      	str	r3, [r7, #32]
    return (scheduler->cfg->syncTicks);
 800197a:	6a3b      	ldr	r3, [r7, #32]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks,
                          nextTick;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8001980:	643b      	str	r3, [r7, #64]	; 0x40

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001986:	4413      	add	r3, r2
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	fbb3 f2f2 	udiv	r2, r3, r2
 800198e:	6839      	ldr	r1, [r7, #0]
 8001990:	fb01 f202 	mul.w	r2, r1, r2
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
 800199c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800199e:	627b      	str	r3, [r7, #36]	; 0x24
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerNextSyncTick(CosmOS_SchedulerVariableType * scheduler, BitWidthType paramNextSyncTick)
{
    scheduler->nextSyncTick = paramNextSyncTick;
 80019a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a4:	615a      	str	r2, [r3, #20]
}
 80019a6:	bf00      	nop
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	633b      	str	r3, [r7, #48]	; 0x30
 80019ac:	2301      	movs	r3, #1
 80019ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerSyncInitState(CosmOS_SchedulerVariableType * scheduler, CosmOS_BooleanType paramSyncInitState)
{
    scheduler->syncInitState = paramSyncInitState;
 80019b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80019b8:	761a      	strb	r2, [r3, #24]
}
 80019ba:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            scheduler_setSchedulerSyncInitState( schedulerVar, True );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 80019bc:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80019c0:	657b      	str	r3, [r7, #84]	; 0x54
 80019c2:	e029      	b.n	8001a18 <schedulerSync_sync+0xe6>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	61fb      	str	r3, [r7, #28]
    return (scheduler->nextSyncTick);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	695b      	ldr	r3, [r3, #20]
    else
    {
        BitWidthType nextTick;


        nextTick = scheduler_getSchedulerNextSyncTick( schedulerVar );
 80019cc:	64fb      	str	r3, [r7, #76]	; 0x4c

        if ( __COSMOS_UNLIKELY( nextTick IS_EQUAL_TO currentTick ) )
 80019ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01b      	beq.n	8001a18 <schedulerSync_sync+0xe6>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->syncTicks);
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 80019ea:	64bb      	str	r3, [r7, #72]	; 0x48

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019f0:	4413      	add	r3, r2
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	fb01 f202 	mul.w	r2, r1, r2
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a08:	617b      	str	r3, [r7, #20]
    scheduler->nextSyncTick = paramNextSyncTick;
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	615a      	str	r2, [r3, #20]
}
 8001a10:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8001a12:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8001a16:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    if ( schedulerState IS_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 8001a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a1a:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8001a1e:	d107      	bne.n	8001a30 <schedulerSync_sync+0xfe>
    {
        coreSync_getBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8001a20:	2103      	movs	r1, #3
 8001a22:	68b8      	ldr	r0, [r7, #8]
 8001a24:	f7ff fb3c 	bl	80010a0 <coreSync_getBarrier>
        coreSync_reactivateBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8001a28:	2103      	movs	r1, #3
 8001a2a:	68b8      	ldr	r0, [r7, #8]
 8001a2c:	f7ff fba0 	bl	8001170 <coreSync_reactivateBarrier>
    }

    return schedulerState;
 8001a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
};
 8001a32:	4618      	mov	r0, r3
 8001a34:	3758      	adds	r7, #88	; 0x58
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <stackInit_schedulableStackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType stackInit_schedulableStackInit(CosmOS_SchedulableVariableType  * schedulable)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b08c      	sub	sp, #48	; 0x30
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
    StackPointerType stackPointer;

    CosmOS_StackConfigurationType * stack;


    stack = schedulable_getStack( schedulable );
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	613b      	str	r3, [r7, #16]
    return (schedulable->cfg->handler);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
    handler = schedulable_getHandler( schedulable );
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a5c:	617b      	str	r3, [r7, #20]
    return (stack->stackLowAddress);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	685b      	ldr	r3, [r3, #4]

    stackLowAddress = stack_getStackLowAddress( stack );
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a66:	61bb      	str	r3, [r7, #24]
    return (stack->stackHighAddress);
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 8001a6c:	623b      	str	r3, [r7, #32]

    stackPointer = CIL_stack_stackInit( stackLowAddress, stackHighAddress, (BitWidthType)handler );
 8001a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a70:	461a      	mov	r2, r3
 8001a72:	6a39      	ldr	r1, [r7, #32]
 8001a74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a76:	f000 faef 	bl	8002058 <CIL_stack_stackInit>
 8001a7a:	61f8      	str	r0, [r7, #28]

    return stackPointer;
 8001a7c:	69fb      	ldr	r3, [r7, #28]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3730      	adds	r7, #48	; 0x30
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <stackInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void stackInit_init(CosmOS_CoreVariableType * coreVar)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b094      	sub	sp, #80	; 0x50
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->cfg->numberOfPrograms);
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
                  stackPointerRetVal;

    CosmOS_ThreadVariableType * threadVar;
    CosmOS_ProgramVariableType * programVar;

    numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 8001a98:	647b      	str	r3, [r7, #68]	; 0x44

    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a9e:	e03a      	b.n	8001b16 <stackInit_init+0x90>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aa6:	623b      	str	r3, [r7, #32]
    return (&(core->programVars[programIterator]));
 8001aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aaa:	68d9      	ldr	r1, [r3, #12]
 8001aac:	6a3a      	ldr	r2, [r7, #32]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
    {
        programVar = core_getCoreProgramVar( coreVar, programIterator );
 8001ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8001aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->numberOfThreads);
 8001abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
        numberOfThreads = program_getProgramNumberOfThreads( programVar );
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aca:	e01d      	b.n	8001b08 <stackInit_init+0x82>
 8001acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ad2:	60fb      	str	r3, [r7, #12]
  * 
  * @return CosmOS_ThreadVariableType * 
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * program_getProgramThread(CosmOS_ProgramVariableType * program, BitWidthType threadIterator)
{
    return (&(program->threadVars[threadIterator]));
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	4413      	add	r3, r2
        {   
            CosmOS_SchedulableVariableType * schedulableVar;


            threadVar = program_getProgramThread( programVar, threadIterator );
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ae2:	617b      	str	r3, [r7, #20]
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	685b      	ldr	r3, [r3, #4]
            schedulableVar = thread_getThreadSchedulable( threadVar );
 8001ae8:	637b      	str	r3, [r7, #52]	; 0x34

            stackPointerRetVal = stackInit_schedulableStackInit( schedulableVar );
 8001aea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001aec:	f7ff ffa5 	bl	8001a3a <stackInit_schedulableStackInit>
 8001af0:	6338      	str	r0, [r7, #48]	; 0x30
 8001af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	61bb      	str	r3, [r7, #24]
    schedulable->stackPointer = stackPointerParam;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	609a      	str	r2, [r3, #8]
}
 8001b00:	bf00      	nop
        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8001b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b04:	3301      	adds	r3, #1
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d3dd      	bcc.n	8001acc <stackInit_init+0x46>
    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8001b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b12:	3301      	adds	r3, #1
 8001b14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d3c0      	bcc.n	8001aa0 <stackInit_init+0x1a>
            schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
        }
    }
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3750      	adds	r7, #80	; 0x50
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <sysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysCalls_os(BitWidthType id)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    CIL_sysCalls_os( id );
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fb39 	bl	80021a8 <CIL_sysCalls_os>
};
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <sysCalls_readWrite>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_readWrite(BitWidthType id, void * entity, BitWidthType size)
{   
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    returnValue = CIL_sysCalls_readWrite( id, entity, size );
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 fb35 	bl	80021be <CIL_sysCalls_readWrite>
 8001b54:	6178      	str	r0, [r7, #20]

    return returnValue;
 8001b56:	697b      	ldr	r3, [r7, #20]
};
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <sysJobs_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysJobs_dispatcher(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b096      	sub	sp, #88	; 0x58
 8001b64:	af00      	add	r7, sp, #0

    CosmOS_CoreVariableType * coreVar;
    CosmOS_SysJobsVariableType * sysJobsVar;


    coreVar = core_getCoreVar();
 8001b66:	f7ff fa61 	bl	800102c <core_getCoreVar>
 8001b6a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b6e:	627b      	str	r3, [r7, #36]	; 0x24
    return (core->sysJobs);
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	69db      	ldr	r3, [r3, #28]
    sysJobsVar = core_getCoreOsSysJobs( coreVar );
 8001b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs)
{
    return (sysJobs->currentTick);
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	685b      	ldr	r3, [r3, #4]

    sysJobsCurrentTick = sysJobs_getSysJobsCurrentTick( sysJobsVar );
 8001b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (sysJobs->cfg->numOfGroups);
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
    numOfGroups = sysJobs_getSysJobsNumOfGroups( sysJobsVar );
 8001b8a:	643b      	str	r3, [r7, #64]	; 0x40

    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	657b      	str	r3, [r7, #84]	; 0x54
 8001b90:	e049      	b.n	8001c26 <sysJobs_dispatcher+0xc6>
 8001b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b94:	623b      	str	r3, [r7, #32]
 8001b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b98:	61fb      	str	r3, [r7, #28]
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsGroupTickMultiplicator(CosmOS_SysJobsVariableType * sysJobs, BitWidthType groupId)
{
    return (sysJobs->cfg->groups[groupId].tickMultiplicator);
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	69fa      	ldr	r2, [r7, #28]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	689b      	ldr	r3, [r3, #8]
    { 
        BitWidthType  groupTickMultiplicator;


        groupTickMultiplicator = sysJobs_getSysJobsGroupTickMultiplicator( sysJobsVar, groupIterator );
 8001bae:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( IS_NOT( sysJobsCurrentTick % groupTickMultiplicator ) )
 8001bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bb4:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001bba:	fb01 f202 	mul.w	r2, r1, r2
 8001bbe:	1a9b      	subs	r3, r3, r2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d12d      	bne.n	8001c20 <sysJobs_dispatcher+0xc0>
 8001bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bca:	60fb      	str	r3, [r7, #12]
    return (CosmOS_GenericVoidType *)(sysJobs->cfg->groups[groupId].handlers);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6819      	ldr	r1, [r3, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	681b      	ldr	r3, [r3, #0]
        {
            BitWidthType numOfHandlers;
            CosmOS_GenericVoidType * handlers;


            handlers = sysJobs_getSysJobsGroupHandlers( sysJobsVar, groupIterator );
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
 8001be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001be4:	61bb      	str	r3, [r7, #24]
 8001be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001be8:	617b      	str	r3, [r7, #20]
    return (sysJobs->cfg->groups[groupId].numOfHandlers);
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	685b      	ldr	r3, [r3, #4]
            numOfHandlers = sysJobs_getSysJobsGroupNumOfHandlers( sysJobsVar, groupIterator );
 8001bfe:	633b      	str	r3, [r7, #48]	; 0x30

            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 8001c00:	2300      	movs	r3, #0
 8001c02:	653b      	str	r3, [r7, #80]	; 0x50
 8001c04:	e008      	b.n	8001c18 <sysJobs_dispatcher+0xb8>
            {
                handlers[handlerIterator]();
 8001c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c0c:	4413      	add	r3, r2
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4798      	blx	r3
            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 8001c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c14:	3301      	adds	r3, #1
 8001c16:	653b      	str	r3, [r7, #80]	; 0x50
 8001c18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3f2      	bcc.n	8001c06 <sysJobs_dispatcher+0xa6>
    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8001c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c22:	3301      	adds	r3, #1
 8001c24:	657b      	str	r3, [r7, #84]	; 0x54
 8001c26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3b1      	bcc.n	8001b92 <sysJobs_dispatcher+0x32>
 8001c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c30:	603b      	str	r3, [r7, #0]
    return (sysJobs->cfg->hyperTick);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
            }
        }
    }

    hyperTick = sysJobs_getSysJobsHyperTick( sysJobsVar );
 8001c38:	63fb      	str	r3, [r7, #60]	; 0x3c

    sysJobsCurrentTick = ( ( sysJobsCurrentTick + 1 ) % hyperTick );
 8001c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c40:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c46:	fb01 f202 	mul.w	r2, r1, r2
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8001c4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c54:	607b      	str	r3, [r7, #4]
  * 
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void sysJobs_setSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs, BitWidthType currentTickParam)
{
    sysJobs->currentTick = currentTickParam;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	605a      	str	r2, [r3, #4]
}
 8001c5c:	bf00      	nop
    sysJobs_setSysJobsCurrentTick( sysJobsVar, sysJobsCurrentTick );

};
 8001c5e:	bf00      	nop
 8001c60:	3758      	adds	r7, #88	; 0x58
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <CIL_core_getCoreId>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CIL_core_getCoreId(void)
{    
 8001c66:	b580      	push	{r7, lr}
 8001c68:	af00      	add	r7, sp, #0
    return (HAL_GetCurrentCPUID() == CM7_CPUID) ? CORE_0_ID : CORE_1_ID;
 8001c6a:	f001 fd7f 	bl	800376c <HAL_GetCurrentCPUID>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b03      	cmp	r3, #3
 8001c72:	bf14      	ite	ne
 8001c74:	2301      	movne	r3, #1
 8001c76:	2300      	moveq	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <CIL_core_setCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_core_setCoreVar(CosmOS_OsVariableType * osVar)
{    
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b08a      	sub	sp, #40	; 0x28
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
    BitWidthType coreId,
                numberOfCores;

    CosmOS_CoreVariableType * coreVar;

    coreId = CIL_core_getCoreId();
 8001c86:	f7ff ffee 	bl	8001c66 <CIL_core_getCoreId>
 8001c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfCores);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 8001c96:	623b      	str	r3, [r7, #32]

    cosmosAssert( coreId < numberOfCores );
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	bf34      	ite	cc
 8001ca0:	2301      	movcc	r3, #1
 8001ca2:	2300      	movcs	r3, #0
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	bf00      	nop
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	617b      	str	r3, [r7, #20]
    return (&(osVar->coreVars[coreId]));
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	015b      	lsls	r3, r3, #5
 8001cba:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, coreId );
 8001cbc:	61fb      	str	r3, [r7, #28]

    //must be changed, not valid for all compilers
    __asm volatile("MOV R9,%[coreVariable]" : [coreVariable] "=r" (coreVar));
 8001cbe:	4699      	mov	r9, r3
 8001cc0:	61fb      	str	r3, [r7, #28]
}
 8001cc2:	bf00      	nop
 8001cc4:	3728      	adds	r7, #40	; 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <CIL_GPIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_GPIO_togglePin(void *GPIOx, BitWidthType GPIO_Pin)
{    
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin( GPIOx, (uint16_t)GPIO_Pin );
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4619      	mov	r1, r3
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f003 f8d1 	bl	8004e82 <HAL_GPIO_TogglePin>
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <CIL_memoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_memoryProtection_init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cee:	463b      	mov	r3, r7
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
    BitWidthType core,
                 address;

    core = CIL_core_getCoreId();
 8001cfa:	f7ff ffb4 	bl	8001c66 <CIL_core_getCoreId>
 8001cfe:	6238      	str	r0, [r7, #32]

    HAL_MPU_Disable();
 8001d00:	f001 fcb8 	bl	8003674 <HAL_MPU_Disable>

    if( core IS_EQUAL_TO CORE_0_ID){
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11e      	bne.n	8001d48 <CIL_memoryProtection_init+0x60>

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 8001d12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d16:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8001d18:	2314      	movs	r3, #20
 8001d1a:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8001d24:	2306      	movs	r3, #6
 8001d26:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001d34:	2301      	movs	r3, #1
 8001d36:	73fb      	strb	r3, [r7, #15]
      
        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d38:	463b      	mov	r3, r7
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 fcd2 	bl	80036e4 <HAL_MPU_ConfigRegion>

        address = 0x20000000;
 8001d40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
 8001d46:	e01d      	b.n	8001d84 <CIL_memoryProtection_init+0x9c>

    }
    else
    {

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 8001d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d54:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8001d56:	2314      	movs	r3, #20
 8001d58:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8001d62:	2306      	movs	r3, #6
 8001d64:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001d72:	2301      	movs	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
      
        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d76:	463b      	mov	r3, r7
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 fcb3 	bl	80036e4 <HAL_MPU_ConfigRegion>

        address = 0x10000000;
 8001d7e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24

    }

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001d84:	2301      	movs	r3, #1
 8001d86:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = address;
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001d90:	2310      	movs	r3, #16
 8001d92:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001d94:	2300      	movs	r3, #0
 8001d96:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001da4:	2301      	movs	r3, #1
 8001da6:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001db0:	463b      	mov	r3, r7
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fc96 	bl	80036e4 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001db8:	2301      	movs	r3, #1
 8001dba:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress =  (BitWidthType)_s_os_section_consts;
 8001dc0:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <CIL_memoryProtection_init+0x1e8>)
 8001dc2:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8001dc4:	4a43      	ldr	r2, [pc, #268]	; (8001ed4 <CIL_memoryProtection_init+0x1ec>)
 8001dc6:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <CIL_memoryProtection_init+0x1e8>)
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 1;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	085b      	lsrs	r3, r3, #1
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 2;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 4;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	091b      	lsrs	r3, r3, #4
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 8;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 16;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	0c1b      	lsrs	r3, r3, #16
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	617b      	str	r3, [r7, #20]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	4a35      	ldr	r2, [pc, #212]	; (8001ed8 <CIL_memoryProtection_init+0x1f0>)
 8001e02:	fb02 f303 	mul.w	r3, r2, r3
 8001e06:	0edb      	lsrs	r3, r3, #27
 8001e08:	4a34      	ldr	r2, [pc, #208]	; (8001edc <CIL_memoryProtection_init+0x1f4>)
 8001e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e0e:	613b      	str	r3, [r7, #16]
    return (result-1);
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8001e20:	2306      	movs	r3, #6
 8001e22:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001e24:	2301      	movs	r3, #1
 8001e26:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001e30:	2301      	movs	r3, #1
 8001e32:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001e34:	463b      	mov	r3, r7
 8001e36:	4618      	mov	r0, r3
 8001e38:	f001 fc54 	bl	80036e4 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001e40:	2303      	movs	r3, #3
 8001e42:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_os_section_vars;
 8001e44:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <CIL_memoryProtection_init+0x1f8>)
 8001e46:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8001e48:	4a26      	ldr	r2, [pc, #152]	; (8001ee4 <CIL_memoryProtection_init+0x1fc>)
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <CIL_memoryProtection_init+0x1f8>)
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	085b      	lsrs	r3, r3, #1
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	091b      	lsrs	r3, r3, #4
 8001e68:	69fa      	ldr	r2, [r7, #28]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	0c1b      	lsrs	r3, r3, #16
 8001e7c:	69fa      	ldr	r2, [r7, #28]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <CIL_memoryProtection_init+0x1f0>)
 8001e86:	fb02 f303 	mul.w	r3, r2, r3
 8001e8a:	0edb      	lsrs	r3, r3, #27
 8001e8c:	4a13      	ldr	r2, [pc, #76]	; (8001edc <CIL_memoryProtection_init+0x1f4>)
 8001e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e92:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001eac:	2301      	movs	r3, #1
 8001eae:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f001 fc12 	bl	80036e4 <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8001ec0:	2006      	movs	r0, #6
 8001ec2:	f001 fbef 	bl	80036a4 <HAL_MPU_Enable>

}
 8001ec6:	bf00      	nop
 8001ec8:	3728      	adds	r7, #40	; 0x28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	38000000 	.word	0x38000000
 8001ed4:	38000800 	.word	0x38000800
 8001ed8:	07c4acdd 	.word	0x07c4acdd
 8001edc:	080095e4 	.word	0x080095e4
 8001ee0:	38008000 	.word	0x38008000
 8001ee4:	38008200 	.word	0x38008200

08001ee8 <CIL_memoryProtection_setStackOverflowProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_memoryProtection_setStackOverflowProtection(AddressType stackLowAddress, AddressType stackHighAddress)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8001f00:	f001 fbb8 	bl	8003674 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f04:	2301      	movs	r3, #1
 8001f06:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (stackLowAddress);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	091b      	lsrs	r3, r3, #4
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	0a1b      	lsrs	r3, r3, #8
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	0c1b      	lsrs	r3, r3, #16
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <CIL_memoryProtection_setStackOverflowProtection+0xb0>)
 8001f4e:	fb02 f303 	mul.w	r3, r2, r3
 8001f52:	0edb      	lsrs	r3, r3, #27
 8001f54:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <CIL_memoryProtection_setStackOverflowProtection+0xb4>)
 8001f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5a:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001f64:	2300      	movs	r3, #0
 8001f66:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f70:	2300      	movs	r3, #0
 8001f72:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f74:	2301      	movs	r3, #1
 8001f76:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	75fb      	strb	r3, [r7, #23]
  
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fbad 	bl	80036e4 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8001f8a:	2006      	movs	r0, #6
 8001f8c:	f001 fb8a 	bl	80036a4 <HAL_MPU_Enable>
}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	07c4acdd 	.word	0x07c4acdd
 8001f9c:	080095e4 	.word	0x080095e4

08001fa0 <CIL_memoryProtection_setProgramMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_memoryProtection_setProgramMemoryProtection(AddressType lowAddress, AddressType highAddress)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8001fb8:	f001 fb5c 	bl	8003674 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 8001fc0:	2306      	movs	r3, #6
 8001fc2:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( highAddress - lowAddress ));
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	085b      	lsrs	r3, r3, #1
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	69fa      	ldr	r2, [r7, #28]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	0a1b      	lsrs	r3, r3, #8
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	0c1b      	lsrs	r3, r3, #16
 8001ffc:	69fa      	ldr	r2, [r7, #28]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	4a12      	ldr	r2, [pc, #72]	; (8002050 <CIL_memoryProtection_setProgramMemoryProtection+0xb0>)
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	0edb      	lsrs	r3, r3, #27
 800200c:	4a11      	ldr	r2, [pc, #68]	; (8002054 <CIL_memoryProtection_setProgramMemoryProtection+0xb4>)
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CIL_memoryProtection_fastLogBase2( highAddress - lowAddress ));
 8002018:	b2db      	uxtb	r3, r3
 800201a:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 800201c:	2300      	movs	r3, #0
 800201e:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002020:	2301      	movs	r3, #1
 8002022:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002024:	2303      	movs	r3, #3
 8002026:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800202c:	2301      	movs	r3, #1
 800202e:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002030:	2301      	movs	r3, #1
 8002032:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002034:	2301      	movs	r3, #1
 8002036:	75fb      	strb	r3, [r7, #23]
  
    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002038:	f107 0308 	add.w	r3, r7, #8
 800203c:	4618      	mov	r0, r3
 800203e:	f001 fb51 	bl	80036e4 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8002042:	2006      	movs	r0, #6
 8002044:	f001 fb2e 	bl	80036a4 <HAL_MPU_Enable>
}
 8002048:	bf00      	nop
 800204a:	3720      	adds	r7, #32
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	07c4acdd 	.word	0x07c4acdd
 8002054:	080095e4 	.word	0x080095e4

08002058 <CIL_stack_stackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType CIL_stack_stackInit(AddressType stackLowAddress, AddressType stackHighAddress, AddressType handlerAddress)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
    CosmOS_StackType *stack = ( CosmOS_StackType* )( stackHighAddress - (AddressType)sizeof(CosmOS_StackType) );
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	3b40      	subs	r3, #64	; 0x40
 8002068:	617b      	str	r3, [r7, #20]

    stack->XPSR  = 0x01000000;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002070:	63da      	str	r2, [r3, #60]	; 0x3c
    stack->PC    = handlerAddress;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	639a      	str	r2, [r3, #56]	; 0x38
    stack->LR    = 0xFFFFFFFD;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f06f 0202 	mvn.w	r2, #2
 800207e:	635a      	str	r2, [r3, #52]	; 0x34
    stack->R12   = 0;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	2200      	movs	r2, #0
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
    stack->R3    = 0;
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2200      	movs	r2, #0
 800208a:	62da      	str	r2, [r3, #44]	; 0x2c
    stack->R2    = 0;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2200      	movs	r2, #0
 8002090:	629a      	str	r2, [r3, #40]	; 0x28
    stack->R1    = 0;
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2200      	movs	r2, #0
 8002096:	625a      	str	r2, [r3, #36]	; 0x24
    stack->R0    = 0;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2200      	movs	r2, #0
 800209c:	621a      	str	r2, [r3, #32]
    stack->R14   = 0xFFFFFFFD;
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f06f 0202 	mvn.w	r2, #2
 80020a4:	61da      	str	r2, [r3, #28]
    stack->R11   = 0;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
    stack->R10   = 0;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2200      	movs	r2, #0
 80020b0:	615a      	str	r2, [r3, #20]
    stack->R8    = 0;
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2200      	movs	r2, #0
 80020b6:	611a      	str	r2, [r3, #16]
    stack->R7    = 0;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2200      	movs	r2, #0
 80020bc:	60da      	str	r2, [r3, #12]
    stack->R6    = 0;
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
    stack->R5    = 0;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2200      	movs	r2, #0
 80020c8:	605a      	str	r2, [r3, #4]
    stack->R4    = 0;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

    return (StackPointerType)(&(stack->R4));
 80020d0:	697b      	ldr	r3, [r7, #20]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <CIL_stack_setStackPointer>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION __NAKED void CIL_stack_setStackPointer(AddressType address)
{
    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 80020de:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
	  __asm volatile ("MSR PSP,R0");
 80020e2:	f380 8809 	msr	PSP, r0
    __asm volatile ("MOV R0, #0x3");
 80020e6:	f04f 0003 	mov.w	r0, #3
    __asm volatile ("MSR CONTROL, R0");
 80020ea:	f380 8814 	msr	CONTROL, r0
    __asm volatile ("ISB");
 80020ee:	f3bf 8f6f 	isb	sy
    __asm volatile ("BX R14");
 80020f2:	4770      	bx	lr
}
 80020f4:	bf00      	nop

080020f6 <CIL_sysCalls_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_sysCalls_dispatcher(BitWidthType *sp)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b08e      	sub	sp, #56	; 0x38
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
    CosmOS_GenericVoidType sysCall;
    CosmOS_OsVariableType * osVar;
    CosmOS_RoutesConfigurationType * routeVar;

  
    uint8_t *pc = (uint8_t*)(sp[6]);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3318      	adds	r3, #24
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
    
    pc-=2;
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002108:	3b02      	subs	r3, #2
 800210a:	633b      	str	r3, [r7, #48]	; 0x30

    osVar = os_getOsVar();
 800210c:	f7ff f8b8 	bl	8001280 <os_getOsVar>
 8002110:	62f8      	str	r0, [r7, #44]	; 0x2c

    uint8_t sysCallId = *pc;
 8002112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800211a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211c:	60bb      	str	r3, [r7, #8]
    return (CosmOS_RoutesConfigurationType *)(osVar->cfg->route);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691b      	ldr	r3, [r3, #16]

    routeVar = os_getOsRoutes( osVar );
 8002124:	627b      	str	r3, [r7, #36]	; 0x24

    sysCall = route_getRoutesFunc( routeVar, sp[0] );
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800212c:	613a      	str	r2, [r7, #16]
 800212e:	60fb      	str	r3, [r7, #12]
  * 
  * @return CosmOS_GenericVoidType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_GenericVoidType route_getRoutesFunc(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (CosmOS_GenericVoidType)(route->routeFunc[route->routeIdToFunc[callId]]);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	6859      	ldr	r1, [r3, #4]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	623b      	str	r3, [r7, #32]
    entityId = route_getRoutesEntityId( routeVar, sp[0] );
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214e:	61ba      	str	r2, [r7, #24]
 8002150:	617b      	str	r3, [r7, #20]
  * 
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType route_getRoutesEntityId(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (route->routeIdToEntity[callId]);
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	61fb      	str	r3, [r7, #28]

    switch ( sysCallId )
 8002160:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002164:	2b02      	cmp	r3, #2
 8002166:	d015      	beq.n	8002194 <CIL_sysCalls_dispatcher+0x9e>
 8002168:	2b02      	cmp	r3, #2
 800216a:	dc15      	bgt.n	8002198 <CIL_sysCalls_dispatcher+0xa2>
 800216c:	2b00      	cmp	r3, #0
 800216e:	d002      	beq.n	8002176 <CIL_sysCalls_dispatcher+0x80>
 8002170:	2b01      	cmp	r3, #1
 8002172:	d003      	beq.n	800217c <CIL_sysCalls_dispatcher+0x86>
        }

        default :
        {
            /* PANIC */
            break;
 8002174:	e010      	b.n	8002198 <CIL_sysCalls_dispatcher+0xa2>
            sysCall();
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	4798      	blx	r3
            break;
 800217a:	e00e      	b.n	800219a <CIL_sysCalls_dispatcher+0xa4>
            returnValue = ((CosmOS_GenericBitWidthRWType)sysCall)(entityId, (void *)sp[1], sp[2]);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3304      	adds	r3, #4
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4619      	mov	r1, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3308      	adds	r3, #8
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	69f8      	ldr	r0, [r7, #28]
 800218e:	4798      	blx	r3
 8002190:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8002192:	e002      	b.n	800219a <CIL_sysCalls_dispatcher+0xa4>
            break;
 8002194:	bf00      	nop
 8002196:	e000      	b.n	800219a <CIL_sysCalls_dispatcher+0xa4>
            break;
 8002198:	bf00      	nop
        }
    }

    sp[0] = returnValue;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	3738      	adds	r7, #56	; 0x38
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <CIL_sysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_sysCalls_os(BitWidthType id)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
    __asm volatile("SVC #0");
 80021b0:	df00      	svc	0
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <CIL_sysCalls_readWrite>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CIL_sysCalls_readWrite(BitWidthType id, void * entity, BitWidthType num)
{
 80021be:	b480      	push	{r7}
 80021c0:	b087      	sub	sp, #28
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #1");
 80021ca:	df01      	svc	1
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 80021cc:	4603      	mov	r3, r0
 80021ce:	617b      	str	r3, [r7, #20]

    return returnValue;
 80021d0:	697b      	ldr	r3, [r7, #20]
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <CIL_sysTimer_setTicks>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_sysTimer_setTicks(BitWidthType ticks, CosmOS_SchedulerSyncStateType schedulersSyncState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
    if( schedulersSyncState IS_NOT_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC ) 
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 80021f0:	d010      	beq.n	8002214 <CIL_sysTimer_setTicks+0x34>
    {
        BitWidthType delay;
        delay = SysTick->LOAD - SysTick->VAL;
 80021f2:	4b12      	ldr	r3, [pc, #72]	; (800223c <CIL_sysTimer_setTicks+0x5c>)
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4b11      	ldr	r3, [pc, #68]	; (800223c <CIL_sysTimer_setTicks+0x5c>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	60fb      	str	r3, [r7, #12]
        
        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)-delay) - 1UL);         /* set reload register */
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f242 7210 	movw	r2, #10000	; 0x2710
 8002204:	fb02 f203 	mul.w	r2, r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	4a0b      	ldr	r2, [pc, #44]	; (800223c <CIL_sysTimer_setTicks+0x5c>)
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
 8002212:	e007      	b.n	8002224 <CIL_sysTimer_setTicks+0x44>
    }
    else
    {
        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)) - 1UL);               /* set reload register */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f242 7210 	movw	r2, #10000	; 0x2710
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	4a07      	ldr	r2, [pc, #28]	; (800223c <CIL_sysTimer_setTicks+0x5c>)
 8002220:	3b01      	subs	r3, #1
 8002222:	6053      	str	r3, [r2, #4]
    }

    SysTick->VAL   = 0UL;                                                     /* Load the SysTick Counter Value */
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <CIL_sysTimer_setTicks+0x5c>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <CIL_sysTimer_setTicks+0x5c>)
 800222c:	2207      	movs	r2, #7
 800222e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                                   /* Enable SysTick IRQ and SysTick Timer */
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000e010 	.word	0xe000e010

08002240 <CIL_uart_sysJob>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CIL_uart_sysJob()
{    
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0

    //TX SIDE
    //check where is DMA and switch it if its buffer is empty
    //check if user is in red zone, if yes check if DMA is on the same buffer, then switch to the other
    //HAL_UART_Receive_DMA()
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

Disassembly of section .text:

08002250 <__do_global_dtors_aux>:
 8002250:	b510      	push	{r4, lr}
 8002252:	4c05      	ldr	r4, [pc, #20]	; (8002268 <__do_global_dtors_aux+0x18>)
 8002254:	7823      	ldrb	r3, [r4, #0]
 8002256:	b933      	cbnz	r3, 8002266 <__do_global_dtors_aux+0x16>
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <__do_global_dtors_aux+0x1c>)
 800225a:	b113      	cbz	r3, 8002262 <__do_global_dtors_aux+0x12>
 800225c:	4804      	ldr	r0, [pc, #16]	; (8002270 <__do_global_dtors_aux+0x20>)
 800225e:	f3af 8000 	nop.w
 8002262:	2301      	movs	r3, #1
 8002264:	7023      	strb	r3, [r4, #0]
 8002266:	bd10      	pop	{r4, pc}
 8002268:	200008d0 	.word	0x200008d0
 800226c:	00000000 	.word	0x00000000
 8002270:	08009564 	.word	0x08009564

08002274 <frame_dummy>:
 8002274:	b508      	push	{r3, lr}
 8002276:	4b03      	ldr	r3, [pc, #12]	; (8002284 <frame_dummy+0x10>)
 8002278:	b11b      	cbz	r3, 8002282 <frame_dummy+0xe>
 800227a:	4903      	ldr	r1, [pc, #12]	; (8002288 <frame_dummy+0x14>)
 800227c:	4803      	ldr	r0, [pc, #12]	; (800228c <frame_dummy+0x18>)
 800227e:	f3af 8000 	nop.w
 8002282:	bd08      	pop	{r3, pc}
 8002284:	00000000 	.word	0x00000000
 8002288:	200008d4 	.word	0x200008d4
 800228c:	08009564 	.word	0x08009564

08002290 <__aeabi_uldivmod>:
 8002290:	b953      	cbnz	r3, 80022a8 <__aeabi_uldivmod+0x18>
 8002292:	b94a      	cbnz	r2, 80022a8 <__aeabi_uldivmod+0x18>
 8002294:	2900      	cmp	r1, #0
 8002296:	bf08      	it	eq
 8002298:	2800      	cmpeq	r0, #0
 800229a:	bf1c      	itt	ne
 800229c:	f04f 31ff 	movne.w	r1, #4294967295
 80022a0:	f04f 30ff 	movne.w	r0, #4294967295
 80022a4:	f000 b96e 	b.w	8002584 <__aeabi_idiv0>
 80022a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80022ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80022b0:	f000 f806 	bl	80022c0 <__udivmoddi4>
 80022b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80022b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80022bc:	b004      	add	sp, #16
 80022be:	4770      	bx	lr

080022c0 <__udivmoddi4>:
 80022c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c4:	9d08      	ldr	r5, [sp, #32]
 80022c6:	4604      	mov	r4, r0
 80022c8:	468c      	mov	ip, r1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 8083 	bne.w	80023d6 <__udivmoddi4+0x116>
 80022d0:	428a      	cmp	r2, r1
 80022d2:	4617      	mov	r7, r2
 80022d4:	d947      	bls.n	8002366 <__udivmoddi4+0xa6>
 80022d6:	fab2 f282 	clz	r2, r2
 80022da:	b142      	cbz	r2, 80022ee <__udivmoddi4+0x2e>
 80022dc:	f1c2 0020 	rsb	r0, r2, #32
 80022e0:	fa24 f000 	lsr.w	r0, r4, r0
 80022e4:	4091      	lsls	r1, r2
 80022e6:	4097      	lsls	r7, r2
 80022e8:	ea40 0c01 	orr.w	ip, r0, r1
 80022ec:	4094      	lsls	r4, r2
 80022ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80022f2:	0c23      	lsrs	r3, r4, #16
 80022f4:	fbbc f6f8 	udiv	r6, ip, r8
 80022f8:	fa1f fe87 	uxth.w	lr, r7
 80022fc:	fb08 c116 	mls	r1, r8, r6, ip
 8002300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002304:	fb06 f10e 	mul.w	r1, r6, lr
 8002308:	4299      	cmp	r1, r3
 800230a:	d909      	bls.n	8002320 <__udivmoddi4+0x60>
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	f106 30ff 	add.w	r0, r6, #4294967295
 8002312:	f080 8119 	bcs.w	8002548 <__udivmoddi4+0x288>
 8002316:	4299      	cmp	r1, r3
 8002318:	f240 8116 	bls.w	8002548 <__udivmoddi4+0x288>
 800231c:	3e02      	subs	r6, #2
 800231e:	443b      	add	r3, r7
 8002320:	1a5b      	subs	r3, r3, r1
 8002322:	b2a4      	uxth	r4, r4
 8002324:	fbb3 f0f8 	udiv	r0, r3, r8
 8002328:	fb08 3310 	mls	r3, r8, r0, r3
 800232c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002330:	fb00 fe0e 	mul.w	lr, r0, lr
 8002334:	45a6      	cmp	lr, r4
 8002336:	d909      	bls.n	800234c <__udivmoddi4+0x8c>
 8002338:	193c      	adds	r4, r7, r4
 800233a:	f100 33ff 	add.w	r3, r0, #4294967295
 800233e:	f080 8105 	bcs.w	800254c <__udivmoddi4+0x28c>
 8002342:	45a6      	cmp	lr, r4
 8002344:	f240 8102 	bls.w	800254c <__udivmoddi4+0x28c>
 8002348:	3802      	subs	r0, #2
 800234a:	443c      	add	r4, r7
 800234c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002350:	eba4 040e 	sub.w	r4, r4, lr
 8002354:	2600      	movs	r6, #0
 8002356:	b11d      	cbz	r5, 8002360 <__udivmoddi4+0xa0>
 8002358:	40d4      	lsrs	r4, r2
 800235a:	2300      	movs	r3, #0
 800235c:	e9c5 4300 	strd	r4, r3, [r5]
 8002360:	4631      	mov	r1, r6
 8002362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002366:	b902      	cbnz	r2, 800236a <__udivmoddi4+0xaa>
 8002368:	deff      	udf	#255	; 0xff
 800236a:	fab2 f282 	clz	r2, r2
 800236e:	2a00      	cmp	r2, #0
 8002370:	d150      	bne.n	8002414 <__udivmoddi4+0x154>
 8002372:	1bcb      	subs	r3, r1, r7
 8002374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002378:	fa1f f887 	uxth.w	r8, r7
 800237c:	2601      	movs	r6, #1
 800237e:	fbb3 fcfe 	udiv	ip, r3, lr
 8002382:	0c21      	lsrs	r1, r4, #16
 8002384:	fb0e 331c 	mls	r3, lr, ip, r3
 8002388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800238c:	fb08 f30c 	mul.w	r3, r8, ip
 8002390:	428b      	cmp	r3, r1
 8002392:	d907      	bls.n	80023a4 <__udivmoddi4+0xe4>
 8002394:	1879      	adds	r1, r7, r1
 8002396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800239a:	d202      	bcs.n	80023a2 <__udivmoddi4+0xe2>
 800239c:	428b      	cmp	r3, r1
 800239e:	f200 80e9 	bhi.w	8002574 <__udivmoddi4+0x2b4>
 80023a2:	4684      	mov	ip, r0
 80023a4:	1ac9      	subs	r1, r1, r3
 80023a6:	b2a3      	uxth	r3, r4
 80023a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80023ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80023b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80023b4:	fb08 f800 	mul.w	r8, r8, r0
 80023b8:	45a0      	cmp	r8, r4
 80023ba:	d907      	bls.n	80023cc <__udivmoddi4+0x10c>
 80023bc:	193c      	adds	r4, r7, r4
 80023be:	f100 33ff 	add.w	r3, r0, #4294967295
 80023c2:	d202      	bcs.n	80023ca <__udivmoddi4+0x10a>
 80023c4:	45a0      	cmp	r8, r4
 80023c6:	f200 80d9 	bhi.w	800257c <__udivmoddi4+0x2bc>
 80023ca:	4618      	mov	r0, r3
 80023cc:	eba4 0408 	sub.w	r4, r4, r8
 80023d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80023d4:	e7bf      	b.n	8002356 <__udivmoddi4+0x96>
 80023d6:	428b      	cmp	r3, r1
 80023d8:	d909      	bls.n	80023ee <__udivmoddi4+0x12e>
 80023da:	2d00      	cmp	r5, #0
 80023dc:	f000 80b1 	beq.w	8002542 <__udivmoddi4+0x282>
 80023e0:	2600      	movs	r6, #0
 80023e2:	e9c5 0100 	strd	r0, r1, [r5]
 80023e6:	4630      	mov	r0, r6
 80023e8:	4631      	mov	r1, r6
 80023ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023ee:	fab3 f683 	clz	r6, r3
 80023f2:	2e00      	cmp	r6, #0
 80023f4:	d14a      	bne.n	800248c <__udivmoddi4+0x1cc>
 80023f6:	428b      	cmp	r3, r1
 80023f8:	d302      	bcc.n	8002400 <__udivmoddi4+0x140>
 80023fa:	4282      	cmp	r2, r0
 80023fc:	f200 80b8 	bhi.w	8002570 <__udivmoddi4+0x2b0>
 8002400:	1a84      	subs	r4, r0, r2
 8002402:	eb61 0103 	sbc.w	r1, r1, r3
 8002406:	2001      	movs	r0, #1
 8002408:	468c      	mov	ip, r1
 800240a:	2d00      	cmp	r5, #0
 800240c:	d0a8      	beq.n	8002360 <__udivmoddi4+0xa0>
 800240e:	e9c5 4c00 	strd	r4, ip, [r5]
 8002412:	e7a5      	b.n	8002360 <__udivmoddi4+0xa0>
 8002414:	f1c2 0320 	rsb	r3, r2, #32
 8002418:	fa20 f603 	lsr.w	r6, r0, r3
 800241c:	4097      	lsls	r7, r2
 800241e:	fa01 f002 	lsl.w	r0, r1, r2
 8002422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002426:	40d9      	lsrs	r1, r3
 8002428:	4330      	orrs	r0, r6
 800242a:	0c03      	lsrs	r3, r0, #16
 800242c:	fbb1 f6fe 	udiv	r6, r1, lr
 8002430:	fa1f f887 	uxth.w	r8, r7
 8002434:	fb0e 1116 	mls	r1, lr, r6, r1
 8002438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800243c:	fb06 f108 	mul.w	r1, r6, r8
 8002440:	4299      	cmp	r1, r3
 8002442:	fa04 f402 	lsl.w	r4, r4, r2
 8002446:	d909      	bls.n	800245c <__udivmoddi4+0x19c>
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	f106 3cff 	add.w	ip, r6, #4294967295
 800244e:	f080 808d 	bcs.w	800256c <__udivmoddi4+0x2ac>
 8002452:	4299      	cmp	r1, r3
 8002454:	f240 808a 	bls.w	800256c <__udivmoddi4+0x2ac>
 8002458:	3e02      	subs	r6, #2
 800245a:	443b      	add	r3, r7
 800245c:	1a5b      	subs	r3, r3, r1
 800245e:	b281      	uxth	r1, r0
 8002460:	fbb3 f0fe 	udiv	r0, r3, lr
 8002464:	fb0e 3310 	mls	r3, lr, r0, r3
 8002468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800246c:	fb00 f308 	mul.w	r3, r0, r8
 8002470:	428b      	cmp	r3, r1
 8002472:	d907      	bls.n	8002484 <__udivmoddi4+0x1c4>
 8002474:	1879      	adds	r1, r7, r1
 8002476:	f100 3cff 	add.w	ip, r0, #4294967295
 800247a:	d273      	bcs.n	8002564 <__udivmoddi4+0x2a4>
 800247c:	428b      	cmp	r3, r1
 800247e:	d971      	bls.n	8002564 <__udivmoddi4+0x2a4>
 8002480:	3802      	subs	r0, #2
 8002482:	4439      	add	r1, r7
 8002484:	1acb      	subs	r3, r1, r3
 8002486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800248a:	e778      	b.n	800237e <__udivmoddi4+0xbe>
 800248c:	f1c6 0c20 	rsb	ip, r6, #32
 8002490:	fa03 f406 	lsl.w	r4, r3, r6
 8002494:	fa22 f30c 	lsr.w	r3, r2, ip
 8002498:	431c      	orrs	r4, r3
 800249a:	fa20 f70c 	lsr.w	r7, r0, ip
 800249e:	fa01 f306 	lsl.w	r3, r1, r6
 80024a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80024a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80024aa:	431f      	orrs	r7, r3
 80024ac:	0c3b      	lsrs	r3, r7, #16
 80024ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80024b2:	fa1f f884 	uxth.w	r8, r4
 80024b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80024ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80024be:	fb09 fa08 	mul.w	sl, r9, r8
 80024c2:	458a      	cmp	sl, r1
 80024c4:	fa02 f206 	lsl.w	r2, r2, r6
 80024c8:	fa00 f306 	lsl.w	r3, r0, r6
 80024cc:	d908      	bls.n	80024e0 <__udivmoddi4+0x220>
 80024ce:	1861      	adds	r1, r4, r1
 80024d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80024d4:	d248      	bcs.n	8002568 <__udivmoddi4+0x2a8>
 80024d6:	458a      	cmp	sl, r1
 80024d8:	d946      	bls.n	8002568 <__udivmoddi4+0x2a8>
 80024da:	f1a9 0902 	sub.w	r9, r9, #2
 80024de:	4421      	add	r1, r4
 80024e0:	eba1 010a 	sub.w	r1, r1, sl
 80024e4:	b2bf      	uxth	r7, r7
 80024e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80024ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80024ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80024f2:	fb00 f808 	mul.w	r8, r0, r8
 80024f6:	45b8      	cmp	r8, r7
 80024f8:	d907      	bls.n	800250a <__udivmoddi4+0x24a>
 80024fa:	19e7      	adds	r7, r4, r7
 80024fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8002500:	d22e      	bcs.n	8002560 <__udivmoddi4+0x2a0>
 8002502:	45b8      	cmp	r8, r7
 8002504:	d92c      	bls.n	8002560 <__udivmoddi4+0x2a0>
 8002506:	3802      	subs	r0, #2
 8002508:	4427      	add	r7, r4
 800250a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800250e:	eba7 0708 	sub.w	r7, r7, r8
 8002512:	fba0 8902 	umull	r8, r9, r0, r2
 8002516:	454f      	cmp	r7, r9
 8002518:	46c6      	mov	lr, r8
 800251a:	4649      	mov	r1, r9
 800251c:	d31a      	bcc.n	8002554 <__udivmoddi4+0x294>
 800251e:	d017      	beq.n	8002550 <__udivmoddi4+0x290>
 8002520:	b15d      	cbz	r5, 800253a <__udivmoddi4+0x27a>
 8002522:	ebb3 020e 	subs.w	r2, r3, lr
 8002526:	eb67 0701 	sbc.w	r7, r7, r1
 800252a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800252e:	40f2      	lsrs	r2, r6
 8002530:	ea4c 0202 	orr.w	r2, ip, r2
 8002534:	40f7      	lsrs	r7, r6
 8002536:	e9c5 2700 	strd	r2, r7, [r5]
 800253a:	2600      	movs	r6, #0
 800253c:	4631      	mov	r1, r6
 800253e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002542:	462e      	mov	r6, r5
 8002544:	4628      	mov	r0, r5
 8002546:	e70b      	b.n	8002360 <__udivmoddi4+0xa0>
 8002548:	4606      	mov	r6, r0
 800254a:	e6e9      	b.n	8002320 <__udivmoddi4+0x60>
 800254c:	4618      	mov	r0, r3
 800254e:	e6fd      	b.n	800234c <__udivmoddi4+0x8c>
 8002550:	4543      	cmp	r3, r8
 8002552:	d2e5      	bcs.n	8002520 <__udivmoddi4+0x260>
 8002554:	ebb8 0e02 	subs.w	lr, r8, r2
 8002558:	eb69 0104 	sbc.w	r1, r9, r4
 800255c:	3801      	subs	r0, #1
 800255e:	e7df      	b.n	8002520 <__udivmoddi4+0x260>
 8002560:	4608      	mov	r0, r1
 8002562:	e7d2      	b.n	800250a <__udivmoddi4+0x24a>
 8002564:	4660      	mov	r0, ip
 8002566:	e78d      	b.n	8002484 <__udivmoddi4+0x1c4>
 8002568:	4681      	mov	r9, r0
 800256a:	e7b9      	b.n	80024e0 <__udivmoddi4+0x220>
 800256c:	4666      	mov	r6, ip
 800256e:	e775      	b.n	800245c <__udivmoddi4+0x19c>
 8002570:	4630      	mov	r0, r6
 8002572:	e74a      	b.n	800240a <__udivmoddi4+0x14a>
 8002574:	f1ac 0c02 	sub.w	ip, ip, #2
 8002578:	4439      	add	r1, r7
 800257a:	e713      	b.n	80023a4 <__udivmoddi4+0xe4>
 800257c:	3802      	subs	r0, #2
 800257e:	443c      	add	r4, r7
 8002580:	e724      	b.n	80023cc <__udivmoddi4+0x10c>
 8002582:	bf00      	nop

08002584 <__aeabi_idiv0>:
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop

08002588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025c0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800258c:	f006 ff24 	bl	80093d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002590:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002592:	e003      	b.n	800259c <LoopCopyDataInit>

08002594 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002596:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002598:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800259a:	3104      	adds	r1, #4

0800259c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800259c:	480a      	ldr	r0, [pc, #40]	; (80025c8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80025a0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025a2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025a4:	d3f6      	bcc.n	8002594 <CopyDataInit>
  ldr  r2, =_sbss
 80025a6:	4a0a      	ldr	r2, [pc, #40]	; (80025d0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80025a8:	e002      	b.n	80025b0 <LoopFillZerobss>

080025aa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025aa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025ac:	f842 3b04 	str.w	r3, [r2], #4

080025b0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025b0:	4b08      	ldr	r3, [pc, #32]	; (80025d4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80025b2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025b4:	d3f9      	bcc.n	80025aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025b6:	f006 ffa9 	bl	800950c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ba:	f000 f839 	bl	8002630 <main>
  bx  lr    
 80025be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025c0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80025c4:	080096a4 	.word	0x080096a4
  ldr  r0, =_sdata
 80025c8:	20000800 	.word	0x20000800
  ldr  r3, =_edata
 80025cc:	20000810 	.word	0x20000810
  ldr  r2, =_sbss
 80025d0:	200008d0 	.word	0x200008d0
  ldr  r3, = _ebss
 80025d4:	20000f64 	.word	0x20000f64

080025d8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d8:	e7fe      	b.n	80025d8 <ADC3_IRQHandler>
	...

080025dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	; (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	; (800262c <__NVIC_SetPriority+0x50>)
 800260c:	88fb      	ldrh	r3, [r7, #6]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8002636:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800263a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800263c:	bf00      	nop
 800263e:	4b34      	ldr	r3, [pc, #208]	; (8002710 <main+0xe0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d004      	beq.n	8002654 <main+0x24>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1e5a      	subs	r2, r3, #1
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	dcf4      	bgt.n	800263e <main+0xe>
  if ( timeout < 0 )
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	da01      	bge.n	800265e <main+0x2e>
  {
  Error_Handler();
 800265a:	f000 fad9 	bl	8002c10 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800265e:	f000 fe89 	bl	8003374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002662:	f000 f857 	bl	8002714 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8002666:	4b2a      	ldr	r3, [pc, #168]	; (8002710 <main+0xe0>)
 8002668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266c:	4a28      	ldr	r2, [pc, #160]	; (8002710 <main+0xe0>)
 800266e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002676:	4b26      	ldr	r3, [pc, #152]	; (8002710 <main+0xe0>)
 8002678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8002684:	2000      	movs	r0, #0
 8002686:	f002 fc17 	bl	8004eb8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800268a:	2100      	movs	r1, #0
 800268c:	2000      	movs	r0, #0
 800268e:	f002 fc2d 	bl	8004eec <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8002692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002696:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8002698:	bf00      	nop
 800269a:	4b1d      	ldr	r3, [pc, #116]	; (8002710 <main+0xe0>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d104      	bne.n	80026b0 <main+0x80>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	1e5a      	subs	r2, r3, #1
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	dcf4      	bgt.n	800269a <main+0x6a>
if ( timeout < 0 )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	da01      	bge.n	80026ba <main+0x8a>
{
Error_Handler();
 80026b6:	f000 faab 	bl	8002c10 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026ba:	f000 f9e1 	bl	8002a80 <MX_GPIO_Init>
  MX_DMA_Init();
 80026be:	f000 f9b7 	bl	8002a30 <MX_DMA_Init>
  MX_ETH_Init();
 80026c2:	f000 f8e5 	bl	8002890 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80026c6:	f000 f935 	bl	8002934 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80026ca:	f000 f97f 	bl	80029cc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  SET_BIT(RCC->D3AMR, RCC_D3AMR_SRAM4AMEN);
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <main+0xe0>)
 80026d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80026d4:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <main+0xe0>)
 80026d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026da:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	NVIC_SetPriority(SVCall_IRQn,3);
 80026de:	2103      	movs	r1, #3
 80026e0:	f06f 0004 	mvn.w	r0, #4
 80026e4:	f7ff ff7a 	bl	80025dc <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn,4);
 80026e8:	2104      	movs	r1, #4
 80026ea:	f06f 0001 	mvn.w	r0, #1
 80026ee:	f7ff ff75 	bl	80025dc <__NVIC_SetPriority>
  NVIC_SetPriority (SysTick_IRQn, 0);         /* set Priority for Systick Interrupt */
 80026f2:	2100      	movs	r1, #0
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295
 80026f8:	f7ff ff70 	bl	80025dc <__NVIC_SetPriority>
    cosmosApi_boot();
 80026fc:	f000 fd64 	bl	80031c8 <osBoot_boot>
	cosmosApi_osInit_init();
 8002700:	2005      	movs	r0, #5
 8002702:	f7ff fa11 	bl	8001b28 <sysCalls_os>
	cosmosApi_os_start();
 8002706:	2006      	movs	r0, #6
 8002708:	f7ff fa0e 	bl	8001b28 <sysCalls_os>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800270c:	e7fe      	b.n	800270c <main+0xdc>
 800270e:	bf00      	nop
 8002710:	58024400 	.word	0x58024400

08002714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b0cc      	sub	sp, #304	; 0x130
 8002718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800271a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800271e:	224c      	movs	r2, #76	; 0x4c
 8002720:	2100      	movs	r1, #0
 8002722:	4618      	mov	r0, r3
 8002724:	f006 ff16 	bl	8009554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002728:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800272c:	2220      	movs	r2, #32
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f006 ff0f 	bl	8009554 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	4618      	mov	r0, r3
 800273c:	23bc      	movs	r3, #188	; 0xbc
 800273e:	461a      	mov	r2, r3
 8002740:	2100      	movs	r1, #0
 8002742:	f006 ff07 	bl	8009554 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002746:	2004      	movs	r0, #4
 8002748:	f002 fd2c 	bl	80051a4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800274c:	1d3b      	adds	r3, r7, #4
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <SystemClock_Config+0x170>)
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	4a4b      	ldr	r2, [pc, #300]	; (8002884 <SystemClock_Config+0x170>)
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800275e:	4b49      	ldr	r3, [pc, #292]	; (8002884 <SystemClock_Config+0x170>)
 8002760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002762:	f003 0201 	and.w	r2, r3, #1
 8002766:	1d3b      	adds	r3, r7, #4
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	4b47      	ldr	r3, [pc, #284]	; (8002888 <SystemClock_Config+0x174>)
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002772:	4a45      	ldr	r2, [pc, #276]	; (8002888 <SystemClock_Config+0x174>)
 8002774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002778:	6193      	str	r3, [r2, #24]
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <SystemClock_Config+0x174>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800278a:	bf00      	nop
 800278c:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <SystemClock_Config+0x174>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002798:	d1f8      	bne.n	800278c <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800279a:	2321      	movs	r3, #33	; 0x21
 800279c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80027a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80027a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ae:	2302      	movs	r3, #2
 80027b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027b4:	2302      	movs	r3, #2
 80027b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 25;
 80027c0:	2319      	movs	r3, #25
 80027c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80027c6:	2302      	movs	r3, #2
 80027c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027cc:	2304      	movs	r3, #4
 80027ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027d2:	2302      	movs	r3, #2
 80027d4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80027d8:	230c      	movs	r3, #12
 80027da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027ea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 fd42 	bl	8005278 <HAL_RCC_OscConfig>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <SystemClock_Config+0xea>
  {
    Error_Handler();
 80027fa:	f000 fa09 	bl	8002c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027fe:	233f      	movs	r3, #63	; 0x3f
 8002800:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002804:	2303      	movs	r3, #3
 8002806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002810:	2300      	movs	r3, #0
 8002812:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002816:	2300      	movs	r3, #0
 8002818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002828:	2300      	movs	r3, #0
 800282a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800282e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002832:	2101      	movs	r1, #1
 8002834:	4618      	mov	r0, r3
 8002836:	f003 f92f 	bl	8005a98 <HAL_RCC_ClockConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <SystemClock_Config+0x130>
  {
    Error_Handler();
 8002840:	f000 f9e6 	bl	8002c10 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8002844:	f107 0308 	add.w	r3, r7, #8
 8002848:	4a10      	ldr	r2, [pc, #64]	; (800288c <SystemClock_Config+0x178>)
 800284a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800284c:	f107 0308 	add.w	r3, r7, #8
 8002850:	2200      	movs	r2, #0
 8002852:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800285c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002860:	f107 0308 	add.w	r3, r7, #8
 8002864:	4618      	mov	r0, r3
 8002866:	f003 fce5 	bl	8006234 <HAL_RCCEx_PeriphCLKConfig>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8002870:	f000 f9ce 	bl	8002c10 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8002874:	f002 fcf0 	bl	8005258 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8002878:	bf00      	nop
 800287a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	58000400 	.word	0x58000400
 8002888:	58024800 	.word	0x58024800
 800288c:	00040002 	.word	0x00040002

08002890 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <MX_ETH_Init+0x90>)
 8002896:	4a23      	ldr	r2, [pc, #140]	; (8002924 <MX_ETH_Init+0x94>)
 8002898:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <MX_ETH_Init+0x90>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80028a2:	4b1f      	ldr	r3, [pc, #124]	; (8002920 <MX_ETH_Init+0x90>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	3301      	adds	r3, #1
 80028a8:	2280      	movs	r2, #128	; 0x80
 80028aa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80028ac:	4b1c      	ldr	r3, [pc, #112]	; (8002920 <MX_ETH_Init+0x90>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	3302      	adds	r3, #2
 80028b2:	22e1      	movs	r2, #225	; 0xe1
 80028b4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <MX_ETH_Init+0x90>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	3303      	adds	r3, #3
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80028c0:	4b17      	ldr	r3, [pc, #92]	; (8002920 <MX_ETH_Init+0x90>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	3304      	adds	r3, #4
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <MX_ETH_Init+0x90>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	3305      	adds	r3, #5
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <MX_ETH_Init+0x90>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_ETH_Init+0x90>)
 80028dc:	4a12      	ldr	r2, [pc, #72]	; (8002928 <MX_ETH_Init+0x98>)
 80028de:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <MX_ETH_Init+0x90>)
 80028e2:	4a12      	ldr	r2, [pc, #72]	; (800292c <MX_ETH_Init+0x9c>)
 80028e4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_ETH_Init+0x90>)
 80028e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80028ec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80028ee:	480c      	ldr	r0, [pc, #48]	; (8002920 <MX_ETH_Init+0x90>)
 80028f0:	f001 fce8 	bl	80042c4 <HAL_ETH_Init>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80028fa:	f000 f989 	bl	8002c10 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80028fe:	2234      	movs	r2, #52	; 0x34
 8002900:	2100      	movs	r1, #0
 8002902:	480b      	ldr	r0, [pc, #44]	; (8002930 <MX_ETH_Init+0xa0>)
 8002904:	f006 fe26 	bl	8009554 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <MX_ETH_Init+0xa0>)
 800290a:	2221      	movs	r2, #33	; 0x21
 800290c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <MX_ETH_Init+0xa0>)
 8002910:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002914:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <MX_ETH_Init+0xa0>)
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000e70 	.word	0x20000e70
 8002924:	40028000 	.word	0x40028000
 8002928:	20000870 	.word	0x20000870
 800292c:	20000810 	.word	0x20000810
 8002930:	20000ee0 	.word	0x20000ee0

08002934 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 800293a:	4a23      	ldr	r2, [pc, #140]	; (80029c8 <MX_USART3_UART_Init+0x94>)
 800293c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800293e:	4b21      	ldr	r3, [pc, #132]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 8002940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002946:	4b1f      	ldr	r3, [pc, #124]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 800294e:	2200      	movs	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002952:	4b1c      	ldr	r3, [pc, #112]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002958:	4b1a      	ldr	r3, [pc, #104]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 800295a:	220c      	movs	r2, #12
 800295c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002964:	4b17      	ldr	r3, [pc, #92]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 800296c:	2200      	movs	r2, #0
 800296e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002970:	4b14      	ldr	r3, [pc, #80]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 8002972:	2200      	movs	r2, #0
 8002974:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 8002978:	2200      	movs	r2, #0
 800297a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800297c:	4811      	ldr	r0, [pc, #68]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 800297e:	f005 fa43 	bl	8007e08 <HAL_UART_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002988:	f000 f942 	bl	8002c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800298c:	2100      	movs	r1, #0
 800298e:	480d      	ldr	r0, [pc, #52]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 8002990:	f006 f993 	bl	8008cba <HAL_UARTEx_SetTxFifoThreshold>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800299a:	f000 f939 	bl	8002c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800299e:	2100      	movs	r1, #0
 80029a0:	4808      	ldr	r0, [pc, #32]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 80029a2:	f006 f9c8 	bl	8008d36 <HAL_UARTEx_SetRxFifoThreshold>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d001      	beq.n	80029b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80029ac:	f000 f930 	bl	8002c10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <MX_USART3_UART_Init+0x90>)
 80029b2:	f006 f949 	bl	8008c48 <HAL_UARTEx_DisableFifoMode>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80029bc:	f000 f928 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000964 	.word	0x20000964
 80029c8:	40004800 	.word	0x40004800

080029cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80029d0:	4b15      	ldr	r3, [pc, #84]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029d2:	4a16      	ldr	r2, [pc, #88]	; (8002a2c <MX_USB_OTG_FS_PCD_Init+0x60>)
 80029d4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029d8:	2209      	movs	r2, #9
 80029da:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029de:	2202      	movs	r2, #2
 80029e0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80029e8:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029ea:	2202      	movs	r2, #2
 80029ec:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80029f4:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002a00:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002a12:	4805      	ldr	r0, [pc, #20]	; (8002a28 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002a14:	f002 fa7e 	bl	8004f14 <HAL_PCD_Init>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002a1e:	f000 f8f7 	bl	8002c10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200009f0 	.word	0x200009f0
 8002a2c:	40080000 	.word	0x40080000

08002a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <MX_DMA_Init+0x4c>)
 8002a38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a3c:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <MX_DMA_Init+0x4c>)
 8002a3e:	f043 0301 	orr.w	r3, r3, #1
 8002a42:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <MX_DMA_Init+0x4c>)
 8002a48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	607b      	str	r3, [r7, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	200b      	movs	r0, #11
 8002a5a:	f000 fde3 	bl	8003624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a5e:	200b      	movs	r0, #11
 8002a60:	f000 fdfa 	bl	8003658 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	2100      	movs	r1, #0
 8002a68:	200c      	movs	r0, #12
 8002a6a:	f000 fddb 	bl	8003624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002a6e:	200c      	movs	r0, #12
 8002a70:	f000 fdf2 	bl	8003658 <HAL_NVIC_EnableIRQ>

}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	58024400 	.word	0x58024400

08002a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	; 0x38
 8002a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a96:	4b52      	ldr	r3, [pc, #328]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9c:	4a50      	ldr	r2, [pc, #320]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002a9e:	f043 0304 	orr.w	r3, r3, #4
 8002aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002aa6:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ab4:	4b4a      	ldr	r3, [pc, #296]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aba:	4a49      	ldr	r2, [pc, #292]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ac4:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad2:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad8:	4a41      	ldr	r2, [pc, #260]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002af0:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af6:	4a3a      	ldr	r2, [pc, #232]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002af8:	f043 0320 	orr.w	r3, r3, #32
 8002afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b00:	4b37      	ldr	r3, [pc, #220]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b06:	f003 0320 	and.w	r3, r3, #32
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0e:	4b34      	ldr	r3, [pc, #208]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b14:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1e:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b2c:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b32:	4a2b      	ldr	r2, [pc, #172]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b34:	f043 0308 	orr.w	r3, r3, #8
 8002b38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3c:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b4a:	4b25      	ldr	r3, [pc, #148]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b50:	4a23      	ldr	r2, [pc, #140]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b5a:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6e:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b70:	f043 0310 	orr.w	r3, r3, #16
 8002b74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b78:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <MX_GPIO_Init+0x160>)
 8002b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7e:	f003 0310 	and.w	r3, r3, #16
 8002b82:	607b      	str	r3, [r7, #4]
 8002b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b8c:	4815      	ldr	r0, [pc, #84]	; (8002be4 <MX_GPIO_Init+0x164>)
 8002b8e:	f002 f95f 	bl	8004e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2102      	movs	r1, #2
 8002b96:	4814      	ldr	r0, [pc, #80]	; (8002be8 <MX_GPIO_Init+0x168>)
 8002b98:	f002 f95a 	bl	8004e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002baa:	2303      	movs	r3, #3
 8002bac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480b      	ldr	r0, [pc, #44]	; (8002be4 <MX_GPIO_Init+0x164>)
 8002bb6:	f001 ff9b 	bl	8004af0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4805      	ldr	r0, [pc, #20]	; (8002be8 <MX_GPIO_Init+0x168>)
 8002bd2:	f001 ff8d 	bl	8004af0 <HAL_GPIO_Init>

}
 8002bd6:	bf00      	nop
 8002bd8:	3738      	adds	r7, #56	; 0x38
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	58024400 	.word	0x58024400
 8002be4:	58021400 	.word	0x58021400
 8002be8:	58021000 	.word	0x58021000

08002bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002bfe:	f000 fbf5 	bl	80033ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40010000 	.word	0x40010000

08002c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c14:	b672      	cpsid	i
}
 8002c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <Error_Handler+0x8>
	...

08002c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <HAL_MspInit+0x30>)
 8002c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c28:	4a08      	ldr	r2, [pc, #32]	; (8002c4c <HAL_MspInit+0x30>)
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c32:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_MspInit+0x30>)
 8002c34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	607b      	str	r3, [r7, #4]
 8002c3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	58024400 	.word	0x58024400

08002c50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	; 0x38
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a59      	ldr	r2, [pc, #356]	; (8002dd4 <HAL_ETH_MspInit+0x184>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	f040 80ab 	bne.w	8002dca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002c74:	4b58      	ldr	r3, [pc, #352]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002c76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c7a:	4a57      	ldr	r2, [pc, #348]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c84:	4b54      	ldr	r3, [pc, #336]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002c86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c8e:	623b      	str	r3, [r7, #32]
 8002c90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002c92:	4b51      	ldr	r3, [pc, #324]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c98:	4a4f      	ldr	r2, [pc, #316]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ca2:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002ca4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002cb0:	4b49      	ldr	r3, [pc, #292]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cb6:	4a48      	ldr	r2, [pc, #288]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cc0:	4b45      	ldr	r3, [pc, #276]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002cc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	61bb      	str	r3, [r7, #24]
 8002ccc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cce:	4b42      	ldr	r3, [pc, #264]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd4:	4a40      	ldr	r2, [pc, #256]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002cd6:	f043 0304 	orr.w	r3, r3, #4
 8002cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cde:	4b3e      	ldr	r3, [pc, #248]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cec:	4b3a      	ldr	r3, [pc, #232]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf2:	4a39      	ldr	r2, [pc, #228]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0a:	4b33      	ldr	r3, [pc, #204]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d10:	4a31      	ldr	r2, [pc, #196]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d1a:	4b2f      	ldr	r3, [pc, #188]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d28:	4b2b      	ldr	r3, [pc, #172]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2e:	4a2a      	ldr	r2, [pc, #168]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d38:	4b27      	ldr	r3, [pc, #156]	; (8002dd8 <HAL_ETH_MspInit+0x188>)
 8002d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002d46:	2332      	movs	r3, #50	; 0x32
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d52:	2300      	movs	r3, #0
 8002d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d56:	230b      	movs	r3, #11
 8002d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d5e:	4619      	mov	r1, r3
 8002d60:	481e      	ldr	r0, [pc, #120]	; (8002ddc <HAL_ETH_MspInit+0x18c>)
 8002d62:	f001 fec5 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002d66:	2386      	movs	r3, #134	; 0x86
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d72:	2300      	movs	r3, #0
 8002d74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d76:	230b      	movs	r3, #11
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d7e:	4619      	mov	r1, r3
 8002d80:	4817      	ldr	r0, [pc, #92]	; (8002de0 <HAL_ETH_MspInit+0x190>)
 8002d82:	f001 feb5 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d98:	230b      	movs	r3, #11
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da0:	4619      	mov	r1, r3
 8002da2:	4810      	ldr	r0, [pc, #64]	; (8002de4 <HAL_ETH_MspInit+0x194>)
 8002da4:	f001 fea4 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002da8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002dba:	230b      	movs	r3, #11
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4808      	ldr	r0, [pc, #32]	; (8002de8 <HAL_ETH_MspInit+0x198>)
 8002dc6:	f001 fe93 	bl	8004af0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002dca:	bf00      	nop
 8002dcc:	3738      	adds	r7, #56	; 0x38
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40028000 	.word	0x40028000
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	58020800 	.word	0x58020800
 8002de0:	58020000 	.word	0x58020000
 8002de4:	58020400 	.word	0x58020400
 8002de8:	58021800 	.word	0x58021800

08002dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b08a      	sub	sp, #40	; 0x28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a48      	ldr	r2, [pc, #288]	; (8002f2c <HAL_UART_MspInit+0x140>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f040 8089 	bne.w	8002f22 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e10:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_UART_MspInit+0x144>)
 8002e12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e16:	4a46      	ldr	r2, [pc, #280]	; (8002f30 <HAL_UART_MspInit+0x144>)
 8002e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e1c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e20:	4b43      	ldr	r3, [pc, #268]	; (8002f30 <HAL_UART_MspInit+0x144>)
 8002e22:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e2e:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <HAL_UART_MspInit+0x144>)
 8002e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e34:	4a3e      	ldr	r2, [pc, #248]	; (8002f30 <HAL_UART_MspInit+0x144>)
 8002e36:	f043 0308 	orr.w	r3, r3, #8
 8002e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_UART_MspInit+0x144>)
 8002e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e5e:	2307      	movs	r3, #7
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	4832      	ldr	r0, [pc, #200]	; (8002f34 <HAL_UART_MspInit+0x148>)
 8002e6a:	f001 fe41 	bl	8004af0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002e6e:	4b32      	ldr	r3, [pc, #200]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002e70:	4a32      	ldr	r2, [pc, #200]	; (8002f3c <HAL_UART_MspInit+0x150>)
 8002e72:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002e74:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002e76:	222d      	movs	r2, #45	; 0x2d
 8002e78:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e80:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e86:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002e88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e94:	4b28      	ldr	r3, [pc, #160]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002e9a:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002eac:	4822      	ldr	r0, [pc, #136]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002eae:	f000 fc71 	bl	8003794 <HAL_DMA_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002eb8:	f7ff feaa 	bl	8002c10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002ec0:	679a      	str	r2, [r3, #120]	; 0x78
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_UART_MspInit+0x14c>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002ec8:	4b1d      	ldr	r3, [pc, #116]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002eca:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <HAL_UART_MspInit+0x158>)
 8002ecc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002ece:	4b1c      	ldr	r3, [pc, #112]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002ed0:	222e      	movs	r2, #46	; 0x2e
 8002ed2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ed4:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eda:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ee0:	4b17      	ldr	r3, [pc, #92]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002ee2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ee6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eee:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f00:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002f06:	480e      	ldr	r0, [pc, #56]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002f08:	f000 fc44 	bl	8003794 <HAL_DMA_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002f12:	f7ff fe7d 	bl	8002c10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002f1a:	675a      	str	r2, [r3, #116]	; 0x74
 8002f1c:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <HAL_UART_MspInit+0x154>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f22:	bf00      	nop
 8002f24:	3728      	adds	r7, #40	; 0x28
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40004800 	.word	0x40004800
 8002f30:	58024400 	.word	0x58024400
 8002f34:	58020c00 	.word	0x58020c00
 8002f38:	200008ec 	.word	0x200008ec
 8002f3c:	40020010 	.word	0x40020010
 8002f40:	20000df8 	.word	0x20000df8
 8002f44:	40020028 	.word	0x40020028

08002f48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <HAL_PCD_MspInit+0xa4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d13b      	bne.n	8002fe2 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <HAL_PCD_MspInit+0xa8>)
 8002f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f70:	4a1f      	ldr	r2, [pc, #124]	; (8002ff0 <HAL_PCD_MspInit+0xa8>)
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <HAL_PCD_MspInit+0xa8>)
 8002f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002f88:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f92:	2300      	movs	r3, #0
 8002f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f96:	2300      	movs	r3, #0
 8002f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002f9a:	230a      	movs	r3, #10
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9e:	f107 0314 	add.w	r3, r7, #20
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4813      	ldr	r0, [pc, #76]	; (8002ff4 <HAL_PCD_MspInit+0xac>)
 8002fa6:	f001 fda3 	bl	8004af0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	480d      	ldr	r0, [pc, #52]	; (8002ff4 <HAL_PCD_MspInit+0xac>)
 8002fc0:	f001 fd96 	bl	8004af0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_PCD_MspInit+0xa8>)
 8002fc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fca:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <HAL_PCD_MspInit+0xa8>)
 8002fcc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002fd4:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_PCD_MspInit+0xa8>)
 8002fd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002fda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002fe2:	bf00      	nop
 8002fe4:	3728      	adds	r7, #40	; 0x28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40080000 	.word	0x40080000
 8002ff0:	58024400 	.word	0x58024400
 8002ff4:	58020000 	.word	0x58020000

08002ff8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08e      	sub	sp, #56	; 0x38
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b0f      	cmp	r3, #15
 8003004:	d842      	bhi.n	800308c <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8003006:	2200      	movs	r2, #0
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	2019      	movs	r0, #25
 800300c:	f000 fb0a 	bl	8003624 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003010:	2019      	movs	r0, #25
 8003012:	f000 fb21 	bl	8003658 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8003016:	4a23      	ldr	r2, [pc, #140]	; (80030a4 <HAL_InitTick+0xac>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800301c:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_InitTick+0xb0>)
 800301e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003022:	4a21      	ldr	r2, [pc, #132]	; (80030a8 <HAL_InitTick+0xb0>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800302c:	4b1e      	ldr	r3, [pc, #120]	; (80030a8 <HAL_InitTick+0xb0>)
 800302e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800303a:	f107 020c 	add.w	r2, r7, #12
 800303e:	f107 0310 	add.w	r3, r7, #16
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f003 f8b3 	bl	80061b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800304a:	f003 f89b 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 800304e:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003052:	4a16      	ldr	r2, [pc, #88]	; (80030ac <HAL_InitTick+0xb4>)
 8003054:	fba2 2303 	umull	r2, r3, r2, r3
 8003058:	0c9b      	lsrs	r3, r3, #18
 800305a:	3b01      	subs	r3, #1
 800305c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800305e:	4b14      	ldr	r3, [pc, #80]	; (80030b0 <HAL_InitTick+0xb8>)
 8003060:	4a14      	ldr	r2, [pc, #80]	; (80030b4 <HAL_InitTick+0xbc>)
 8003062:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003064:	4b12      	ldr	r3, [pc, #72]	; (80030b0 <HAL_InitTick+0xb8>)
 8003066:	f240 32e7 	movw	r2, #999	; 0x3e7
 800306a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800306c:	4a10      	ldr	r2, [pc, #64]	; (80030b0 <HAL_InitTick+0xb8>)
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003072:	4b0f      	ldr	r3, [pc, #60]	; (80030b0 <HAL_InitTick+0xb8>)
 8003074:	2200      	movs	r2, #0
 8003076:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <HAL_InitTick+0xb8>)
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800307e:	480c      	ldr	r0, [pc, #48]	; (80030b0 <HAL_InitTick+0xb8>)
 8003080:	f004 fc2a 	bl	80078d8 <HAL_TIM_Base_Init>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d107      	bne.n	800309a <HAL_InitTick+0xa2>
 800308a:	e001      	b.n	8003090 <HAL_InitTick+0x98>
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e005      	b.n	800309c <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003090:	4807      	ldr	r0, [pc, #28]	; (80030b0 <HAL_InitTick+0xb8>)
 8003092:	f004 fc83 	bl	800799c <HAL_TIM_Base_Start_IT>
 8003096:	4603      	mov	r3, r0
 8003098:	e000      	b.n	800309c <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
}
 800309c:	4618      	mov	r0, r3
 800309e:	3738      	adds	r7, #56	; 0x38
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	20000800 	.word	0x20000800
 80030a8:	58024400 	.word	0x58024400
 80030ac:	431bde83 	.word	0x431bde83
 80030b0:	20000f14 	.word	0x20000f14
 80030b4:	40010000 	.word	0x40010000

080030b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <NMI_Handler+0x4>

080030be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030c2:	e7fe      	b.n	80030c2 <HardFault_Handler+0x4>

080030c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030c8:	e7fe      	b.n	80030c8 <MemManage_Handler+0x4>

080030ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ca:	b480      	push	{r7}
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030ce:	e7fe      	b.n	80030ce <BusFault_Handler+0x4>

080030d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030d4:	e7fe      	b.n	80030d4 <UsageFault_Handler+0x4>

080030d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030e8:	4802      	ldr	r0, [pc, #8]	; (80030f4 <TIM1_UP_IRQHandler+0x10>)
 80030ea:	f004 fc8d 	bl	8007a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	20000f14 	.word	0x20000f14

080030f8 <Task_0_Core_1_Handler>:
** Program ID macro = PROGRAM_1_CORE_1_ID
** WCET macro = TASK_0_PROGRAM_1_CORE_1_WCET
** Period of task in ticks = 50
********************************************************************************/ 
void Task_0_Core_1_Handler(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_1_Handler
********************************************************************************/
if (counter_cm4 > 100)
 80030fc:	4b09      	ldr	r3, [pc, #36]	; (8003124 <Task_0_Core_1_Handler+0x2c>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b64      	cmp	r3, #100	; 0x64
 8003102:	dd08      	ble.n	8003116 <Task_0_Core_1_Handler+0x1e>
{
    counter_cm4 = 0;
 8003104:	4b07      	ldr	r3, [pc, #28]	; (8003124 <Task_0_Core_1_Handler+0x2c>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOB, GPIO_PIN_0); //GREEN LED
 800310a:	2201      	movs	r2, #1
 800310c:	4906      	ldr	r1, [pc, #24]	; (8003128 <Task_0_Core_1_Handler+0x30>)
 800310e:	2004      	movs	r0, #4
 8003110:	f7fe fd15 	bl	8001b3e <sysCalls_readWrite>
}
/********************************************************************************
** stop_name =Task_0_Core_1_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8003114:	e004      	b.n	8003120 <Task_0_Core_1_Handler+0x28>
    counter_cm4++;
 8003116:	4b03      	ldr	r3, [pc, #12]	; (8003124 <Task_0_Core_1_Handler+0x2c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	4a01      	ldr	r2, [pc, #4]	; (8003124 <Task_0_Core_1_Handler+0x2c>)
 800311e:	6013      	str	r3, [r2, #0]
};
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}
 8003124:	10000c00 	.word	0x10000c00
 8003128:	58020400 	.word	0x58020400

0800312c <Task_0_Core_0_Handler>:
** Program ID macro = PROGRAM_1_CORE_0_ID
** WCET macro = TASK_0_PROGRAM_1_CORE_0_WCET
** Period of task in ticks = 50
********************************************************************************/ 
void Task_0_Core_0_Handler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_0_Handler
********************************************************************************/
if (counter > 100)
 8003130:	4b0a      	ldr	r3, [pc, #40]	; (800315c <Task_0_Core_0_Handler+0x30>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b64      	cmp	r3, #100	; 0x64
 8003136:	dd08      	ble.n	800314a <Task_0_Core_0_Handler+0x1e>
{
    counter = 0;
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <Task_0_Core_0_Handler+0x30>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOE, GPIO_PIN_1); //ORANGE LED
 800313e:	2202      	movs	r2, #2
 8003140:	4907      	ldr	r1, [pc, #28]	; (8003160 <Task_0_Core_0_Handler+0x34>)
 8003142:	2004      	movs	r0, #4
 8003144:	f7fe fcfb 	bl	8001b3e <sysCalls_readWrite>
 8003148:	e004      	b.n	8003154 <Task_0_Core_0_Handler+0x28>
}
else
{
    counter++;
 800314a:	4b04      	ldr	r3, [pc, #16]	; (800315c <Task_0_Core_0_Handler+0x30>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	4a02      	ldr	r2, [pc, #8]	; (800315c <Task_0_Core_0_Handler+0x30>)
 8003152:	6013      	str	r3, [r2, #0]
}
__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 8003154:	ee20 0a20 	vmul.f32	s0, s0, s1
/********************************************************************************
** stop_name =Task_0_Core_0_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8003158:	bf00      	nop
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20001000 	.word	0x20001000
 8003160:	58021000 	.word	0x58021000

08003164 <IdleThread_CM4>:
/********************************************************************************
** Thread ID macro = THREAD_0_PROGRAM_0_CORE_1_ID
** Program ID macro = PROGRAM_0_CORE_1_ID
********************************************************************************/ 
void IdleThread_CM4(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =IdleThread_CM4
********************************************************************************/
if (counter_IdleThread_CM4 > 100)
 8003168:	4b08      	ldr	r3, [pc, #32]	; (800318c <IdleThread_CM4+0x28>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2b64      	cmp	r3, #100	; 0x64
 800316e:	dd05      	ble.n	800317c <IdleThread_CM4+0x18>
{
    cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4);
 8003170:	2210      	movs	r2, #16
 8003172:	4907      	ldr	r1, [pc, #28]	; (8003190 <IdleThread_CM4+0x2c>)
 8003174:	2004      	movs	r0, #4
 8003176:	f7fe fce2 	bl	8001b3e <sysCalls_readWrite>
}
/********************************************************************************
** stop_name =IdleThread_CM4
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 800317a:	e004      	b.n	8003186 <IdleThread_CM4+0x22>
    counter_IdleThread_CM4++;
 800317c:	4b03      	ldr	r3, [pc, #12]	; (800318c <IdleThread_CM4+0x28>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3301      	adds	r3, #1
 8003182:	4a02      	ldr	r2, [pc, #8]	; (800318c <IdleThread_CM4+0x28>)
 8003184:	6013      	str	r3, [r2, #0]
};
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	10000800 	.word	0x10000800
 8003190:	58020000 	.word	0x58020000

08003194 <IdleThread_CM7>:
/********************************************************************************
** Thread ID macro = THREAD_0_PROGRAM_0_CORE_0_ID
** Program ID macro = PROGRAM_0_CORE_0_ID
********************************************************************************/ 
void IdleThread_CM7(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =IdleThread_CM7
********************************************************************************/
if (counter_IdleThread_CM7 > 100)
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <IdleThread_CM7+0x2c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2b64      	cmp	r3, #100	; 0x64
 800319e:	dd06      	ble.n	80031ae <IdleThread_CM7+0x1a>
{
    cosmosApi_deviceIO_togglePin(GPIOF, GPIO_PIN_11);
 80031a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a4:	4907      	ldr	r1, [pc, #28]	; (80031c4 <IdleThread_CM7+0x30>)
 80031a6:	2004      	movs	r0, #4
 80031a8:	f7fe fcc9 	bl	8001b3e <sysCalls_readWrite>
 80031ac:	e004      	b.n	80031b8 <IdleThread_CM7+0x24>
}
else
{
    counter_IdleThread_CM7++;
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <IdleThread_CM7+0x2c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3301      	adds	r3, #1
 80031b4:	4a02      	ldr	r2, [pc, #8]	; (80031c0 <IdleThread_CM7+0x2c>)
 80031b6:	6013      	str	r3, [r2, #0]
}
__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 80031b8:	ee20 0a20 	vmul.f32	s0, s0, s1
/********************************************************************************
** stop_name =IdleThread_CM7
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000400 	.word	0x20000400
 80031c4:	58021400 	.word	0x58021400

080031c8 <osBoot_boot>:
  * @param[in]  none
  * 
  * @return none
********************************************************************************/
void osBoot_boot(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af00      	add	r7, sp, #0
    BitWidthType  coreId,
                  programSectionsNumber;

    CosmOS_ProgramSectionConfigurationType * programSections;

    coreId = CIL_core_getCoreId();
 80031ce:	f7fe fd4a 	bl	8001c66 <CIL_core_getCoreId>
 80031d2:	62b8      	str	r0, [r7, #40]	; 0x28

    programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <osBoot_boot+0xb4>)
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
    programSectionsNumber = bootSections[coreId].programSectionsNumber;
 80031de:	4a27      	ldr	r2, [pc, #156]	; (800327c <osBoot_boot+0xb4>)
 80031e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	623b      	str	r3, [r7, #32]


    for (BitWidthType i=0; i < programSectionsNumber; i++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ee:	e03c      	b.n	800326a <osBoot_boot+0xa2>
    {
        osBoot_bootSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 80031f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f2:	4613      	mov	r3, r2
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	4413      	add	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	461a      	mov	r2, r3
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	4413      	add	r3, r2
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	461a      	mov	r2, r3
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	4413      	add	r3, r2
 8003212:	6859      	ldr	r1, [r3, #4]
 8003214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	461a      	mov	r2, r3
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	4413      	add	r3, r2
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61f8      	str	r0, [r7, #28]
 8003228:	61b9      	str	r1, [r7, #24]
 800322a:	617b      	str	r3, [r7, #20]
    BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	613b      	str	r3, [r7, #16]
	  unsigned char *pDst = sectionStart;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	60fb      	str	r3, [r7, #12]
	  unsigned char *pSrc = sectionStartInFlash;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	60bb      	str	r3, [r7, #8]
	  for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 800323c:	2300      	movs	r3, #0
 800323e:	607b      	str	r3, [r7, #4]
 8003240:	e00a      	b.n	8003258 <osBoot_boot+0x90>
	  	  *pDst++=*pSrc++;
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	1c53      	adds	r3, r2, #1
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1c59      	adds	r1, r3, #1
 800324c:	60f9      	str	r1, [r7, #12]
 800324e:	7812      	ldrb	r2, [r2, #0]
 8003250:	701a      	strb	r2, [r3, #0]
	  for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3301      	adds	r3, #1
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	429a      	cmp	r2, r3
 8003260:	d3ef      	bcc.n	8003242 <osBoot_boot+0x7a>
}
 8003262:	bf00      	nop
    for (BitWidthType i=0; i < programSectionsNumber; i++)
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	3301      	adds	r3, #1
 8003268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800326a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	429a      	cmp	r2, r3
 8003270:	d3be      	bcc.n	80031f0 <osBoot_boot+0x28>
    }
};
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	3730      	adds	r7, #48	; 0x30
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	080095d4 	.word	0x080095d4

08003280 <Idle_CM7>:
  * *************************************************************************//**
  * @addtogroup General_schedulableCfg_h General  
  * @ingroup Apis_schedulableCfg_h                                            
  * @{                                                                           
********************************************************************************/
__WEAK void Idle_CM7(void){};
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <Idle_CM4>:
__WEAK void sysJobs_CM7(void){};
__WEAK void Task_0_Core_0_Handler(void){};
__WEAK void Idle_CM4(void){};
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <wrapped_Idle_CM7>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/

void wrapped_Idle_CM7(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0
    Idle_CM7();
 80032a0:	f7ff ffee 	bl	8003280 <Idle_CM7>
    for(;;);
 80032a4:	e7fe      	b.n	80032a4 <wrapped_Idle_CM7+0x8>

080032a6 <wrapped_sysJobs_CM7>:
};
void wrapped_sysJobs_CM7(void)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 80032aa:	2008      	movs	r0, #8
 80032ac:	f7fe fc3c 	bl	8001b28 <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80032b0:	2007      	movs	r0, #7
 80032b2:	f7fe fc39 	bl	8001b28 <sysCalls_os>
    for(;;);
 80032b6:	e7fe      	b.n	80032b6 <wrapped_sysJobs_CM7+0x10>

080032b8 <wrapped_Task_0_Core_0_Handler>:
};
void wrapped_Task_0_Core_0_Handler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
    Task_0_Core_0_Handler();
 80032bc:	f7ff ff36 	bl	800312c <Task_0_Core_0_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80032c0:	2007      	movs	r0, #7
 80032c2:	f7fe fc31 	bl	8001b28 <sysCalls_os>
    for(;;);
 80032c6:	e7fe      	b.n	80032c6 <wrapped_Task_0_Core_0_Handler+0xe>

080032c8 <wrapped_Idle_CM4>:
};
void wrapped_Idle_CM4(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
    Idle_CM4();
 80032cc:	f7ff ffdf 	bl	800328e <Idle_CM4>
    for(;;);
 80032d0:	e7fe      	b.n	80032d0 <wrapped_Idle_CM4+0x8>

080032d2 <wrapped_sysJobs_CM4>:
};
void wrapped_sysJobs_CM4(void)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 80032d6:	2008      	movs	r0, #8
 80032d8:	f7fe fc26 	bl	8001b28 <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80032dc:	2007      	movs	r0, #7
 80032de:	f7fe fc23 	bl	8001b28 <sysCalls_os>
    for(;;);
 80032e2:	e7fe      	b.n	80032e2 <wrapped_sysJobs_CM4+0x10>

080032e4 <wrapped_Task_0_Core_1_Handler>:
};
void wrapped_Task_0_Core_1_Handler(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	af00      	add	r7, sp, #0
    Task_0_Core_1_Handler();
 80032e8:	f7ff ff06 	bl	80030f8 <Task_0_Core_1_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80032ec:	2007      	movs	r0, #7
 80032ee:	f7fe fc1b 	bl	8001b28 <sysCalls_os>
    for(;;);
 80032f2:	e7fe      	b.n	80032f2 <wrapped_Task_0_Core_1_Handler+0xe>

080032f4 <wrapped_IdleThread_CM7>:
};
void wrapped_IdleThread_CM7(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM7();
 80032f8:	f7ff ff4c 	bl	8003194 <IdleThread_CM7>
 80032fc:	e7fc      	b.n	80032f8 <wrapped_IdleThread_CM7+0x4>

080032fe <wrapped_IdleThread_CM4>:
    }
};
void wrapped_IdleThread_CM4(void)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM4();
 8003302:	f7ff ff2f 	bl	8003164 <IdleThread_CM4>
 8003306:	e7fc      	b.n	8003302 <wrapped_IdleThread_CM4+0x4>

08003308 <PendSV_Handler>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/ 
__NAKED void PendSV_Handler(void)
{
    __asm volatile ("MRS R0,PSP");
 8003308:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("ISB");
 800330c:	f3bf 8f6f 	isb	sy

    __asm volatile ("TST R14, #16");
 8003310:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ"); 
 8003314:	bf08      	it	eq
    __asm volatile ("VSTMDBEQ R0!,{S16-S31}"); /* If fp is true save floating point registers on stack */
 8003316:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    __asm volatile ("STMDB R0!,{R4-R8,R10,R11,R14}");
 800331a:	e920 4df0 	stmdb	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}

    __asm volatile ("BL scheduler_scheduleNextInstance");
 800331e:	f7fe f8cf 	bl	80014c0 <scheduler_scheduleNextInstance>
    __asm volatile ("ISB");
 8003322:	f3bf 8f6f 	isb	sy

    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8003326:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
    __asm volatile ("TST R14, #16");
 800332a:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ"); 
 800332e:	bf08      	it	eq
    __asm volatile ("VLDMIAEQ R0!,{S16-S31}"); /* If fp is true restore floating point registers on stack */
 8003330:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    __asm volatile ("MSR PSP,R0");
 8003334:	f380 8809 	msr	PSP, r0
    __asm volatile ("ISB");
 8003338:	f3bf 8f6f 	isb	sy

    __asm volatile ("BX R14");
 800333c:	4770      	bx	lr
}
 800333e:	bf00      	nop

08003340 <SysTick_Handler>:

void SysTick_Handler(){
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <SysTick_Handler+0x1c>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a04      	ldr	r2, [pc, #16]	; (800335c <SysTick_Handler+0x1c>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334e:	6053      	str	r3, [r2, #4]
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <SVC_Handler>:

__NAKED void SVC_Handler( void )
{
    __asm volatile ("TST LR, #4");
 8003360:	f01e 0f04 	tst.w	lr, #4
    __asm volatile ("ITE EQ");
 8003364:	bf0c      	ite	eq
    __asm volatile ("MRSEQ r0, MSP");
 8003366:	f3ef 8008 	mrseq	r0, MSP
    __asm volatile ("MRSNE r0, PSP");
 800336a:	f3ef 8009 	mrsne	r0, PSP
    __asm volatile ( "B CIL_sysCalls_dispatcher");
 800336e:	f7fe bec2 	b.w	80020f6 <CIL_sysCalls_dispatcher>
}
 8003372:	bf00      	nop

08003374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800337a:	2003      	movs	r0, #3
 800337c:	f000 f947 	bl	800360e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003380:	f002 fd40 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b15      	ldr	r3, [pc, #84]	; (80033dc <HAL_Init+0x68>)
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	4913      	ldr	r1, [pc, #76]	; (80033e0 <HAL_Init+0x6c>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
 800339c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800339e:	4b0f      	ldr	r3, [pc, #60]	; (80033dc <HAL_Init+0x68>)
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 030f 	and.w	r3, r3, #15
 80033a6:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <HAL_Init+0x6c>)
 80033a8:	5cd3      	ldrb	r3, [r2, r3]
 80033aa:	f003 031f 	and.w	r3, r3, #31
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
 80033b4:	4a0b      	ldr	r2, [pc, #44]	; (80033e4 <HAL_Init+0x70>)
 80033b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b8:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <HAL_Init+0x74>)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033be:	2000      	movs	r0, #0
 80033c0:	f7ff fe1a 	bl	8002ff8 <HAL_InitTick>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e002      	b.n	80033d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80033ce:	f7ff fc25 	bl	8002c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	58024400 	.word	0x58024400
 80033e0:	08009684 	.word	0x08009684
 80033e4:	2000080c 	.word	0x2000080c
 80033e8:	20000808 	.word	0x20000808

080033ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x20>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_IncTick+0x24>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_IncTick+0x24>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	20000804 	.word	0x20000804
 8003410:	20000f60 	.word	0x20000f60

08003414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_GetTick+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000f60 	.word	0x20000f60

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff ffee 	bl	8003414 <HAL_GetTick>
 8003438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003444:	d005      	beq.n	8003452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_Delay+0x44>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003452:	bf00      	nop
 8003454:	f7ff ffde 	bl	8003414 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d8f7      	bhi.n	8003454 <HAL_Delay+0x28>
  {
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000804 	.word	0x20000804

08003474 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <HAL_GetREVID+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	0c1b      	lsrs	r3, r3, #16
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	5c001000 	.word	0x5c001000

0800348c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800349c:	4904      	ldr	r1, [pc, #16]	; (80034b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	58000400 	.word	0x58000400

080034b4 <__NVIC_SetPriorityGrouping>:
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <__NVIC_SetPriorityGrouping+0x40>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d0:	4013      	ands	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <__NVIC_SetPriorityGrouping+0x44>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e2:	4a04      	ldr	r2, [pc, #16]	; (80034f4 <__NVIC_SetPriorityGrouping+0x40>)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	60d3      	str	r3, [r2, #12]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00
 80034f8:	05fa0000 	.word	0x05fa0000

080034fc <__NVIC_GetPriorityGrouping>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003500:	4b04      	ldr	r3, [pc, #16]	; (8003514 <__NVIC_GetPriorityGrouping+0x18>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	0a1b      	lsrs	r3, r3, #8
 8003506:	f003 0307 	and.w	r3, r3, #7
}
 800350a:	4618      	mov	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <__NVIC_EnableIRQ>:
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	4603      	mov	r3, r0
 8003520:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003526:	2b00      	cmp	r3, #0
 8003528:	db0b      	blt.n	8003542 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	f003 021f 	and.w	r2, r3, #31
 8003530:	4907      	ldr	r1, [pc, #28]	; (8003550 <__NVIC_EnableIRQ+0x38>)
 8003532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	2001      	movs	r0, #1
 800353a:	fa00 f202 	lsl.w	r2, r0, r2
 800353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000e100 	.word	0xe000e100

08003554 <__NVIC_SetPriority>:
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003560:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003564:	2b00      	cmp	r3, #0
 8003566:	db0a      	blt.n	800357e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b2da      	uxtb	r2, r3
 800356c:	490c      	ldr	r1, [pc, #48]	; (80035a0 <__NVIC_SetPriority+0x4c>)
 800356e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003572:	0112      	lsls	r2, r2, #4
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	440b      	add	r3, r1
 8003578:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800357c:	e00a      	b.n	8003594 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4908      	ldr	r1, [pc, #32]	; (80035a4 <__NVIC_SetPriority+0x50>)
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	f003 030f 	and.w	r3, r3, #15
 800358a:	3b04      	subs	r3, #4
 800358c:	0112      	lsls	r2, r2, #4
 800358e:	b2d2      	uxtb	r2, r2
 8003590:	440b      	add	r3, r1
 8003592:	761a      	strb	r2, [r3, #24]
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr
 80035a0:	e000e100 	.word	0xe000e100
 80035a4:	e000ed00 	.word	0xe000ed00

080035a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b089      	sub	sp, #36	; 0x24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f1c3 0307 	rsb	r3, r3, #7
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	bf28      	it	cs
 80035c6:	2304      	movcs	r3, #4
 80035c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	3304      	adds	r3, #4
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d902      	bls.n	80035d8 <NVIC_EncodePriority+0x30>
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3b03      	subs	r3, #3
 80035d6:	e000      	b.n	80035da <NVIC_EncodePriority+0x32>
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035dc:	f04f 32ff 	mov.w	r2, #4294967295
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43da      	mvns	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	401a      	ands	r2, r3
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f0:	f04f 31ff 	mov.w	r1, #4294967295
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fa01 f303 	lsl.w	r3, r1, r3
 80035fa:	43d9      	mvns	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003600:	4313      	orrs	r3, r2
         );
}
 8003602:	4618      	mov	r0, r3
 8003604:	3724      	adds	r7, #36	; 0x24
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7ff ff4c 	bl	80034b4 <__NVIC_SetPriorityGrouping>
}
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003632:	f7ff ff63 	bl	80034fc <__NVIC_GetPriorityGrouping>
 8003636:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	68b9      	ldr	r1, [r7, #8]
 800363c:	6978      	ldr	r0, [r7, #20]
 800363e:	f7ff ffb3 	bl	80035a8 <NVIC_EncodePriority>
 8003642:	4602      	mov	r2, r0
 8003644:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff ff82 	bl	8003554 <__NVIC_SetPriority>
}
 8003650:	bf00      	nop
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003662:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff ff56 	bl	8003518 <__NVIC_EnableIRQ>
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003678:	f3bf 8f5f 	dmb	sy
}
 800367c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800367e:	4b07      	ldr	r3, [pc, #28]	; (800369c <HAL_MPU_Disable+0x28>)
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	4a06      	ldr	r2, [pc, #24]	; (800369c <HAL_MPU_Disable+0x28>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003688:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_MPU_Disable+0x2c>)
 800368c:	2200      	movs	r2, #0
 800368e:	605a      	str	r2, [r3, #4]
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e000ed00 	.word	0xe000ed00
 80036a0:	e000ed90 	.word	0xe000ed90

080036a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80036ac:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <HAL_MPU_Enable+0x38>)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_MPU_Enable+0x3c>)
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_MPU_Enable+0x3c>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80036c2:	f3bf 8f4f 	dsb	sy
}
 80036c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80036c8:	f3bf 8f6f 	isb	sy
}
 80036cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	e000ed90 	.word	0xe000ed90
 80036e0:	e000ed00 	.word	0xe000ed00

080036e4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	785a      	ldrb	r2, [r3, #1]
 80036f0:	4b1d      	ldr	r3, [pc, #116]	; (8003768 <HAL_MPU_ConfigRegion+0x84>)
 80036f2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d029      	beq.n	8003750 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80036fc:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <HAL_MPU_ConfigRegion+0x84>)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	7b1b      	ldrb	r3, [r3, #12]
 8003708:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	7adb      	ldrb	r3, [r3, #11]
 800370e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003710:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7a9b      	ldrb	r3, [r3, #10]
 8003716:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003718:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7b5b      	ldrb	r3, [r3, #13]
 800371e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003720:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	7b9b      	ldrb	r3, [r3, #14]
 8003726:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003728:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7bdb      	ldrb	r3, [r3, #15]
 800372e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003730:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7a5b      	ldrb	r3, [r3, #9]
 8003736:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003738:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	7a1b      	ldrb	r3, [r3, #8]
 800373e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003740:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	7812      	ldrb	r2, [r2, #0]
 8003746:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003748:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800374a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800374c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800374e:	e005      	b.n	800375c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_MPU_ConfigRegion+0x84>)
 8003752:	2200      	movs	r2, #0
 8003754:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8003756:	4b04      	ldr	r3, [pc, #16]	; (8003768 <HAL_MPU_ConfigRegion+0x84>)
 8003758:	2200      	movs	r2, #0
 800375a:	611a      	str	r2, [r3, #16]
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed90 	.word	0xe000ed90

0800376c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8003770:	4b07      	ldr	r3, [pc, #28]	; (8003790 <HAL_GetCurrentCPUID+0x24>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	2b07      	cmp	r3, #7
 800377c:	d101      	bne.n	8003782 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800377e:	2303      	movs	r3, #3
 8003780:	e000      	b.n	8003784 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8003782:	2301      	movs	r3, #1
  }
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	e000ed00 	.word	0xe000ed00

08003794 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7ff fe3a 	bl	8003414 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e316      	b.n	8003dda <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a66      	ldr	r2, [pc, #408]	; (800394c <HAL_DMA_Init+0x1b8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d04a      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a65      	ldr	r2, [pc, #404]	; (8003950 <HAL_DMA_Init+0x1bc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d045      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a63      	ldr	r2, [pc, #396]	; (8003954 <HAL_DMA_Init+0x1c0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d040      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a62      	ldr	r2, [pc, #392]	; (8003958 <HAL_DMA_Init+0x1c4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d03b      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a60      	ldr	r2, [pc, #384]	; (800395c <HAL_DMA_Init+0x1c8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d036      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a5f      	ldr	r2, [pc, #380]	; (8003960 <HAL_DMA_Init+0x1cc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d031      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5d      	ldr	r2, [pc, #372]	; (8003964 <HAL_DMA_Init+0x1d0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02c      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a5c      	ldr	r2, [pc, #368]	; (8003968 <HAL_DMA_Init+0x1d4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d027      	beq.n	800384c <HAL_DMA_Init+0xb8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a5a      	ldr	r2, [pc, #360]	; (800396c <HAL_DMA_Init+0x1d8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d022      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a59      	ldr	r2, [pc, #356]	; (8003970 <HAL_DMA_Init+0x1dc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d01d      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a57      	ldr	r2, [pc, #348]	; (8003974 <HAL_DMA_Init+0x1e0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_DMA_Init+0xb8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a56      	ldr	r2, [pc, #344]	; (8003978 <HAL_DMA_Init+0x1e4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d013      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a54      	ldr	r2, [pc, #336]	; (800397c <HAL_DMA_Init+0x1e8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_DMA_Init+0xb8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a53      	ldr	r2, [pc, #332]	; (8003980 <HAL_DMA_Init+0x1ec>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a51      	ldr	r2, [pc, #324]	; (8003984 <HAL_DMA_Init+0x1f0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_DMA_Init+0xb8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a50      	ldr	r2, [pc, #320]	; (8003988 <HAL_DMA_Init+0x1f4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d101      	bne.n	8003850 <HAL_DMA_Init+0xbc>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <HAL_DMA_Init+0xbe>
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 813b 	beq.w	8003ace <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a37      	ldr	r2, [pc, #220]	; (800394c <HAL_DMA_Init+0x1b8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d04a      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a36      	ldr	r2, [pc, #216]	; (8003950 <HAL_DMA_Init+0x1bc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d045      	beq.n	8003908 <HAL_DMA_Init+0x174>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a34      	ldr	r2, [pc, #208]	; (8003954 <HAL_DMA_Init+0x1c0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d040      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a33      	ldr	r2, [pc, #204]	; (8003958 <HAL_DMA_Init+0x1c4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d03b      	beq.n	8003908 <HAL_DMA_Init+0x174>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a31      	ldr	r2, [pc, #196]	; (800395c <HAL_DMA_Init+0x1c8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d036      	beq.n	8003908 <HAL_DMA_Init+0x174>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a30      	ldr	r2, [pc, #192]	; (8003960 <HAL_DMA_Init+0x1cc>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d031      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <HAL_DMA_Init+0x1d0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02c      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a2d      	ldr	r2, [pc, #180]	; (8003968 <HAL_DMA_Init+0x1d4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d027      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a2b      	ldr	r2, [pc, #172]	; (800396c <HAL_DMA_Init+0x1d8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d022      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a2a      	ldr	r2, [pc, #168]	; (8003970 <HAL_DMA_Init+0x1dc>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d01d      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a28      	ldr	r2, [pc, #160]	; (8003974 <HAL_DMA_Init+0x1e0>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d018      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a27      	ldr	r2, [pc, #156]	; (8003978 <HAL_DMA_Init+0x1e4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a25      	ldr	r2, [pc, #148]	; (800397c <HAL_DMA_Init+0x1e8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00e      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a24      	ldr	r2, [pc, #144]	; (8003980 <HAL_DMA_Init+0x1ec>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d009      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a22      	ldr	r2, [pc, #136]	; (8003984 <HAL_DMA_Init+0x1f0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_Init+0x174>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a21      	ldr	r2, [pc, #132]	; (8003988 <HAL_DMA_Init+0x1f4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d108      	bne.n	800391a <HAL_DMA_Init+0x186>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0201 	bic.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	e007      	b.n	800392a <HAL_DMA_Init+0x196>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0201 	bic.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800392a:	e02f      	b.n	800398c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800392c:	f7ff fd72 	bl	8003414 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b05      	cmp	r3, #5
 8003938:	d928      	bls.n	800398c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2203      	movs	r2, #3
 8003944:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e246      	b.n	8003dda <HAL_DMA_Init+0x646>
 800394c:	40020010 	.word	0x40020010
 8003950:	40020028 	.word	0x40020028
 8003954:	40020040 	.word	0x40020040
 8003958:	40020058 	.word	0x40020058
 800395c:	40020070 	.word	0x40020070
 8003960:	40020088 	.word	0x40020088
 8003964:	400200a0 	.word	0x400200a0
 8003968:	400200b8 	.word	0x400200b8
 800396c:	40020410 	.word	0x40020410
 8003970:	40020428 	.word	0x40020428
 8003974:	40020440 	.word	0x40020440
 8003978:	40020458 	.word	0x40020458
 800397c:	40020470 	.word	0x40020470
 8003980:	40020488 	.word	0x40020488
 8003984:	400204a0 	.word	0x400204a0
 8003988:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1c8      	bne.n	800392c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4b83      	ldr	r3, [pc, #524]	; (8003bb4 <HAL_DMA_Init+0x420>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80039b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039be:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ca:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d107      	bne.n	80039f0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	4313      	orrs	r3, r2
 80039ea:	697a      	ldr	r2, [r7, #20]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80039f0:	4b71      	ldr	r3, [pc, #452]	; (8003bb8 <HAL_DMA_Init+0x424>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4b71      	ldr	r3, [pc, #452]	; (8003bbc <HAL_DMA_Init+0x428>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039fc:	d328      	bcc.n	8003a50 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b28      	cmp	r3, #40	; 0x28
 8003a04:	d903      	bls.n	8003a0e <HAL_DMA_Init+0x27a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a0c:	d917      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b3e      	cmp	r3, #62	; 0x3e
 8003a14:	d903      	bls.n	8003a1e <HAL_DMA_Init+0x28a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2b42      	cmp	r3, #66	; 0x42
 8003a1c:	d90f      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b46      	cmp	r3, #70	; 0x46
 8003a24:	d903      	bls.n	8003a2e <HAL_DMA_Init+0x29a>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b48      	cmp	r3, #72	; 0x48
 8003a2c:	d907      	bls.n	8003a3e <HAL_DMA_Init+0x2aa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b4e      	cmp	r3, #78	; 0x4e
 8003a34:	d905      	bls.n	8003a42 <HAL_DMA_Init+0x2ae>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b52      	cmp	r3, #82	; 0x52
 8003a3c:	d801      	bhi.n	8003a42 <HAL_DMA_Init+0x2ae>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_DMA_Init+0x2b0>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d003      	beq.n	8003a50 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a4e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	f023 0307 	bic.w	r3, r3, #7
 8003a66:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d117      	bne.n	8003aaa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00e      	beq.n	8003aaa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fa8f 	bl	8003fb0 <DMA_CheckFifoParam>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2240      	movs	r2, #64	; 0x40
 8003a9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e197      	b.n	8003dda <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f9ca 	bl	8003e4c <DMA_CalcBaseAndBitshift>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	223f      	movs	r2, #63	; 0x3f
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e0cd      	b.n	8003c6a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a3b      	ldr	r2, [pc, #236]	; (8003bc0 <HAL_DMA_Init+0x42c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a39      	ldr	r2, [pc, #228]	; (8003bc4 <HAL_DMA_Init+0x430>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a38      	ldr	r2, [pc, #224]	; (8003bc8 <HAL_DMA_Init+0x434>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a36      	ldr	r2, [pc, #216]	; (8003bcc <HAL_DMA_Init+0x438>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a35      	ldr	r2, [pc, #212]	; (8003bd0 <HAL_DMA_Init+0x43c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a33      	ldr	r2, [pc, #204]	; (8003bd4 <HAL_DMA_Init+0x440>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a32      	ldr	r2, [pc, #200]	; (8003bd8 <HAL_DMA_Init+0x444>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_Init+0x38a>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a30      	ldr	r2, [pc, #192]	; (8003bdc <HAL_DMA_Init+0x448>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Init+0x38e>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_DMA_Init+0x390>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8097 	beq.w	8003c58 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <HAL_DMA_Init+0x42c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d021      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <HAL_DMA_Init+0x430>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d01c      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a21      	ldr	r2, [pc, #132]	; (8003bc8 <HAL_DMA_Init+0x434>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d017      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <HAL_DMA_Init+0x438>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d012      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <HAL_DMA_Init+0x43c>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00d      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_DMA_Init+0x440>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d008      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_DMA_Init+0x444>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_Init+0x3e4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a19      	ldr	r2, [pc, #100]	; (8003bdc <HAL_DMA_Init+0x448>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	4b12      	ldr	r3, [pc, #72]	; (8003be0 <HAL_DMA_Init+0x44c>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d020      	beq.n	8003be4 <HAL_DMA_Init+0x450>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b80      	cmp	r3, #128	; 0x80
 8003ba8:	d102      	bne.n	8003bb0 <HAL_DMA_Init+0x41c>
 8003baa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003bae:	e01a      	b.n	8003be6 <HAL_DMA_Init+0x452>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	e018      	b.n	8003be6 <HAL_DMA_Init+0x452>
 8003bb4:	fe10803f 	.word	0xfe10803f
 8003bb8:	5c001000 	.word	0x5c001000
 8003bbc:	ffff0000 	.word	0xffff0000
 8003bc0:	58025408 	.word	0x58025408
 8003bc4:	5802541c 	.word	0x5802541c
 8003bc8:	58025430 	.word	0x58025430
 8003bcc:	58025444 	.word	0x58025444
 8003bd0:	58025458 	.word	0x58025458
 8003bd4:	5802546c 	.word	0x5802546c
 8003bd8:	58025480 	.word	0x58025480
 8003bdc:	58025494 	.word	0x58025494
 8003be0:	fffe000f 	.word	0xfffe000f
 8003be4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68d2      	ldr	r2, [r2, #12]
 8003bea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003bec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003bf4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003bfc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003c14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4b6e      	ldr	r3, [pc, #440]	; (8003de4 <HAL_DMA_Init+0x650>)
 8003c2c:	4413      	add	r3, r2
 8003c2e:	4a6e      	ldr	r2, [pc, #440]	; (8003de8 <HAL_DMA_Init+0x654>)
 8003c30:	fba2 2303 	umull	r2, r3, r2, r3
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	009a      	lsls	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f905 	bl	8003e4c <DMA_CalcBaseAndBitshift>
 8003c42:	4603      	mov	r3, r0
 8003c44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c4a:	f003 031f 	and.w	r3, r3, #31
 8003c4e:	2201      	movs	r2, #1
 8003c50:	409a      	lsls	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	e008      	b.n	8003c6a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2240      	movs	r2, #64	; 0x40
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e0b7      	b.n	8003dda <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5f      	ldr	r2, [pc, #380]	; (8003dec <HAL_DMA_Init+0x658>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d072      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a5d      	ldr	r2, [pc, #372]	; (8003df0 <HAL_DMA_Init+0x65c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d06d      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a5c      	ldr	r2, [pc, #368]	; (8003df4 <HAL_DMA_Init+0x660>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d068      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a5a      	ldr	r2, [pc, #360]	; (8003df8 <HAL_DMA_Init+0x664>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d063      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a59      	ldr	r2, [pc, #356]	; (8003dfc <HAL_DMA_Init+0x668>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d05e      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a57      	ldr	r2, [pc, #348]	; (8003e00 <HAL_DMA_Init+0x66c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d059      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a56      	ldr	r2, [pc, #344]	; (8003e04 <HAL_DMA_Init+0x670>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d054      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a54      	ldr	r2, [pc, #336]	; (8003e08 <HAL_DMA_Init+0x674>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d04f      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a53      	ldr	r2, [pc, #332]	; (8003e0c <HAL_DMA_Init+0x678>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d04a      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a51      	ldr	r2, [pc, #324]	; (8003e10 <HAL_DMA_Init+0x67c>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d045      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a50      	ldr	r2, [pc, #320]	; (8003e14 <HAL_DMA_Init+0x680>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d040      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a4e      	ldr	r2, [pc, #312]	; (8003e18 <HAL_DMA_Init+0x684>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d03b      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a4d      	ldr	r2, [pc, #308]	; (8003e1c <HAL_DMA_Init+0x688>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d036      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a4b      	ldr	r2, [pc, #300]	; (8003e20 <HAL_DMA_Init+0x68c>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d031      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4a      	ldr	r2, [pc, #296]	; (8003e24 <HAL_DMA_Init+0x690>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d02c      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a48      	ldr	r2, [pc, #288]	; (8003e28 <HAL_DMA_Init+0x694>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d027      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a47      	ldr	r2, [pc, #284]	; (8003e2c <HAL_DMA_Init+0x698>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d022      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a45      	ldr	r2, [pc, #276]	; (8003e30 <HAL_DMA_Init+0x69c>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d01d      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a44      	ldr	r2, [pc, #272]	; (8003e34 <HAL_DMA_Init+0x6a0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d018      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a42      	ldr	r2, [pc, #264]	; (8003e38 <HAL_DMA_Init+0x6a4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a41      	ldr	r2, [pc, #260]	; (8003e3c <HAL_DMA_Init+0x6a8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a3f      	ldr	r2, [pc, #252]	; (8003e40 <HAL_DMA_Init+0x6ac>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d009      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a3e      	ldr	r2, [pc, #248]	; (8003e44 <HAL_DMA_Init+0x6b0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_DMA_Init+0x5c6>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a3c      	ldr	r2, [pc, #240]	; (8003e48 <HAL_DMA_Init+0x6b4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d101      	bne.n	8003d5e <HAL_DMA_Init+0x5ca>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_DMA_Init+0x5cc>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d032      	beq.n	8003dca <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f99f 	bl	80040a8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b80      	cmp	r3, #128	; 0x80
 8003d70:	d102      	bne.n	8003d78 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2200      	movs	r2, #0
 8003d76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d010      	beq.n	8003db8 <HAL_DMA_Init+0x624>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d80c      	bhi.n	8003db8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa1c 	bl	80041dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003db4:	605a      	str	r2, [r3, #4]
 8003db6:	e008      	b.n	8003dca <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	a7fdabf8 	.word	0xa7fdabf8
 8003de8:	cccccccd 	.word	0xcccccccd
 8003dec:	40020010 	.word	0x40020010
 8003df0:	40020028 	.word	0x40020028
 8003df4:	40020040 	.word	0x40020040
 8003df8:	40020058 	.word	0x40020058
 8003dfc:	40020070 	.word	0x40020070
 8003e00:	40020088 	.word	0x40020088
 8003e04:	400200a0 	.word	0x400200a0
 8003e08:	400200b8 	.word	0x400200b8
 8003e0c:	40020410 	.word	0x40020410
 8003e10:	40020428 	.word	0x40020428
 8003e14:	40020440 	.word	0x40020440
 8003e18:	40020458 	.word	0x40020458
 8003e1c:	40020470 	.word	0x40020470
 8003e20:	40020488 	.word	0x40020488
 8003e24:	400204a0 	.word	0x400204a0
 8003e28:	400204b8 	.word	0x400204b8
 8003e2c:	58025408 	.word	0x58025408
 8003e30:	5802541c 	.word	0x5802541c
 8003e34:	58025430 	.word	0x58025430
 8003e38:	58025444 	.word	0x58025444
 8003e3c:	58025458 	.word	0x58025458
 8003e40:	5802546c 	.word	0x5802546c
 8003e44:	58025480 	.word	0x58025480
 8003e48:	58025494 	.word	0x58025494

08003e4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a42      	ldr	r2, [pc, #264]	; (8003f64 <DMA_CalcBaseAndBitshift+0x118>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d04a      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a41      	ldr	r2, [pc, #260]	; (8003f68 <DMA_CalcBaseAndBitshift+0x11c>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d045      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a3f      	ldr	r2, [pc, #252]	; (8003f6c <DMA_CalcBaseAndBitshift+0x120>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d040      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a3e      	ldr	r2, [pc, #248]	; (8003f70 <DMA_CalcBaseAndBitshift+0x124>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d03b      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a3c      	ldr	r2, [pc, #240]	; (8003f74 <DMA_CalcBaseAndBitshift+0x128>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d036      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a3b      	ldr	r2, [pc, #236]	; (8003f78 <DMA_CalcBaseAndBitshift+0x12c>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d031      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a39      	ldr	r2, [pc, #228]	; (8003f7c <DMA_CalcBaseAndBitshift+0x130>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d02c      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a38      	ldr	r2, [pc, #224]	; (8003f80 <DMA_CalcBaseAndBitshift+0x134>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d027      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a36      	ldr	r2, [pc, #216]	; (8003f84 <DMA_CalcBaseAndBitshift+0x138>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d022      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a35      	ldr	r2, [pc, #212]	; (8003f88 <DMA_CalcBaseAndBitshift+0x13c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d01d      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a33      	ldr	r2, [pc, #204]	; (8003f8c <DMA_CalcBaseAndBitshift+0x140>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d018      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a32      	ldr	r2, [pc, #200]	; (8003f90 <DMA_CalcBaseAndBitshift+0x144>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d013      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a30      	ldr	r2, [pc, #192]	; (8003f94 <DMA_CalcBaseAndBitshift+0x148>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00e      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <DMA_CalcBaseAndBitshift+0x14c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d009      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2d      	ldr	r2, [pc, #180]	; (8003f9c <DMA_CalcBaseAndBitshift+0x150>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d004      	beq.n	8003ef4 <DMA_CalcBaseAndBitshift+0xa8>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2c      	ldr	r2, [pc, #176]	; (8003fa0 <DMA_CalcBaseAndBitshift+0x154>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d101      	bne.n	8003ef8 <DMA_CalcBaseAndBitshift+0xac>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e000      	b.n	8003efa <DMA_CalcBaseAndBitshift+0xae>
 8003ef8:	2300      	movs	r3, #0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d024      	beq.n	8003f48 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	3b10      	subs	r3, #16
 8003f06:	4a27      	ldr	r2, [pc, #156]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x158>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f18:	5cd3      	ldrb	r3, [r2, r3]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d908      	bls.n	8003f38 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b1f      	ldr	r3, [pc, #124]	; (8003fac <DMA_CalcBaseAndBitshift+0x160>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	1d1a      	adds	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	659a      	str	r2, [r3, #88]	; 0x58
 8003f36:	e00d      	b.n	8003f54 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <DMA_CalcBaseAndBitshift+0x160>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6593      	str	r3, [r2, #88]	; 0x58
 8003f46:	e005      	b.n	8003f54 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	40020010 	.word	0x40020010
 8003f68:	40020028 	.word	0x40020028
 8003f6c:	40020040 	.word	0x40020040
 8003f70:	40020058 	.word	0x40020058
 8003f74:	40020070 	.word	0x40020070
 8003f78:	40020088 	.word	0x40020088
 8003f7c:	400200a0 	.word	0x400200a0
 8003f80:	400200b8 	.word	0x400200b8
 8003f84:	40020410 	.word	0x40020410
 8003f88:	40020428 	.word	0x40020428
 8003f8c:	40020440 	.word	0x40020440
 8003f90:	40020458 	.word	0x40020458
 8003f94:	40020470 	.word	0x40020470
 8003f98:	40020488 	.word	0x40020488
 8003f9c:	400204a0 	.word	0x400204a0
 8003fa0:	400204b8 	.word	0x400204b8
 8003fa4:	aaaaaaab 	.word	0xaaaaaaab
 8003fa8:	08009664 	.word	0x08009664
 8003fac:	fffffc00 	.word	0xfffffc00

08003fb0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d120      	bne.n	8004006 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d858      	bhi.n	800407e <DMA_CheckFifoParam+0xce>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <DMA_CheckFifoParam+0x24>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	08003ff7 	.word	0x08003ff7
 8003fdc:	08003fe5 	.word	0x08003fe5
 8003fe0:	0800407f 	.word	0x0800407f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d048      	beq.n	8004082 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ff4:	e045      	b.n	8004082 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ffe:	d142      	bne.n	8004086 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004004:	e03f      	b.n	8004086 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800400e:	d123      	bne.n	8004058 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004014:	2b03      	cmp	r3, #3
 8004016:	d838      	bhi.n	800408a <DMA_CheckFifoParam+0xda>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <DMA_CheckFifoParam+0x70>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	08004031 	.word	0x08004031
 8004024:	08004037 	.word	0x08004037
 8004028:	08004031 	.word	0x08004031
 800402c:	08004049 	.word	0x08004049
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
        break;
 8004034:	e030      	b.n	8004098 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d025      	beq.n	800408e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004046:	e022      	b.n	800408e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004050:	d11f      	bne.n	8004092 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004056:	e01c      	b.n	8004092 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405c:	2b02      	cmp	r3, #2
 800405e:	d902      	bls.n	8004066 <DMA_CheckFifoParam+0xb6>
 8004060:	2b03      	cmp	r3, #3
 8004062:	d003      	beq.n	800406c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004064:	e018      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	73fb      	strb	r3, [r7, #15]
        break;
 800406a:	e015      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00e      	beq.n	8004096 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
    break;
 800407c:	e00b      	b.n	8004096 <DMA_CheckFifoParam+0xe6>
        break;
 800407e:	bf00      	nop
 8004080:	e00a      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
        break;
 8004082:	bf00      	nop
 8004084:	e008      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
        break;
 8004086:	bf00      	nop
 8004088:	e006      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
        break;
 800408a:	bf00      	nop
 800408c:	e004      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
        break;
 800408e:	bf00      	nop
 8004090:	e002      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
        break;
 8004092:	bf00      	nop
 8004094:	e000      	b.n	8004098 <DMA_CheckFifoParam+0xe8>
    break;
 8004096:	bf00      	nop
    }
  }

  return status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop

080040a8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a38      	ldr	r2, [pc, #224]	; (800419c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d022      	beq.n	8004106 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a36      	ldr	r2, [pc, #216]	; (80041a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d01d      	beq.n	8004106 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a35      	ldr	r2, [pc, #212]	; (80041a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d018      	beq.n	8004106 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a33      	ldr	r2, [pc, #204]	; (80041a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d013      	beq.n	8004106 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a32      	ldr	r2, [pc, #200]	; (80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d00e      	beq.n	8004106 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a30      	ldr	r2, [pc, #192]	; (80041b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d009      	beq.n	8004106 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a2f      	ldr	r2, [pc, #188]	; (80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d004      	beq.n	8004106 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a2d      	ldr	r2, [pc, #180]	; (80041b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d101      	bne.n	800410a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800410a:	2300      	movs	r3, #0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d01a      	beq.n	8004146 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	3b08      	subs	r3, #8
 8004118:	4a28      	ldr	r2, [pc, #160]	; (80041bc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	091b      	lsrs	r3, r3, #4
 8004120:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	461a      	mov	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a24      	ldr	r2, [pc, #144]	; (80041c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004134:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2201      	movs	r2, #1
 800413e:	409a      	lsls	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004144:	e024      	b.n	8004190 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	3b10      	subs	r3, #16
 800414e:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004150:	fba2 2303 	umull	r2, r3, r2, r3
 8004154:	091b      	lsrs	r3, r3, #4
 8004156:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4a1c      	ldr	r2, [pc, #112]	; (80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d806      	bhi.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4a1b      	ldr	r2, [pc, #108]	; (80041d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d902      	bls.n	800416e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3308      	adds	r3, #8
 800416c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4b18      	ldr	r3, [pc, #96]	; (80041d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	461a      	mov	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a16      	ldr	r2, [pc, #88]	; (80041d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004180:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 031f 	and.w	r3, r3, #31
 8004188:	2201      	movs	r2, #1
 800418a:	409a      	lsls	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	58025408 	.word	0x58025408
 80041a0:	5802541c 	.word	0x5802541c
 80041a4:	58025430 	.word	0x58025430
 80041a8:	58025444 	.word	0x58025444
 80041ac:	58025458 	.word	0x58025458
 80041b0:	5802546c 	.word	0x5802546c
 80041b4:	58025480 	.word	0x58025480
 80041b8:	58025494 	.word	0x58025494
 80041bc:	cccccccd 	.word	0xcccccccd
 80041c0:	16009600 	.word	0x16009600
 80041c4:	58025880 	.word	0x58025880
 80041c8:	aaaaaaab 	.word	0xaaaaaaab
 80041cc:	400204b8 	.word	0x400204b8
 80041d0:	4002040f 	.word	0x4002040f
 80041d4:	10008200 	.word	0x10008200
 80041d8:	40020880 	.word	0x40020880

080041dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d04a      	beq.n	8004288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d847      	bhi.n	8004288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a25      	ldr	r2, [pc, #148]	; (8004294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d022      	beq.n	8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a24      	ldr	r2, [pc, #144]	; (8004298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d01d      	beq.n	8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a22      	ldr	r2, [pc, #136]	; (800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d018      	beq.n	8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a21      	ldr	r2, [pc, #132]	; (80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00e      	beq.n	8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d009      	beq.n	8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1c      	ldr	r2, [pc, #112]	; (80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1b      	ldr	r2, [pc, #108]	; (80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d101      	bne.n	800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004248:	2301      	movs	r3, #1
 800424a:	e000      	b.n	800424e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800424c:	2300      	movs	r3, #0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004256:	4413      	add	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a15      	ldr	r2, [pc, #84]	; (80042b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004264:	671a      	str	r2, [r3, #112]	; 0x70
 8004266:	e009      	b.n	800427c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	461a      	mov	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a11      	ldr	r2, [pc, #68]	; (80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800427a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	3b01      	subs	r3, #1
 8004280:	2201      	movs	r2, #1
 8004282:	409a      	lsls	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	58025408 	.word	0x58025408
 8004298:	5802541c 	.word	0x5802541c
 800429c:	58025430 	.word	0x58025430
 80042a0:	58025444 	.word	0x58025444
 80042a4:	58025458 	.word	0x58025458
 80042a8:	5802546c 	.word	0x5802546c
 80042ac:	58025480 	.word	0x58025480
 80042b0:	58025494 	.word	0x58025494
 80042b4:	1600963f 	.word	0x1600963f
 80042b8:	58025940 	.word	0x58025940
 80042bc:	1000823f 	.word	0x1000823f
 80042c0:	40020940 	.word	0x40020940

080042c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0c6      	b.n	8004464 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7fe fcb6 	bl	8002c50 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2223      	movs	r2, #35	; 0x23
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ea:	4b60      	ldr	r3, [pc, #384]	; (800446c <HAL_ETH_Init+0x1a8>)
 80042ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042f0:	4a5e      	ldr	r2, [pc, #376]	; (800446c <HAL_ETH_Init+0x1a8>)
 80042f2:	f043 0302 	orr.w	r3, r3, #2
 80042f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80042fa:	4b5c      	ldr	r3, [pc, #368]	; (800446c <HAL_ETH_Init+0x1a8>)
 80042fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7a1b      	ldrb	r3, [r3, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004310:	2000      	movs	r0, #0
 8004312:	f7ff f8bb 	bl	800348c <HAL_SYSCFG_ETHInterfaceSelect>
 8004316:	e003      	b.n	8004320 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004318:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800431c:	f7ff f8b6 	bl	800348c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f042 0201 	orr.w	r2, r2, #1
 8004332:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004338:	f7ff f86c 	bl	8003414 <HAL_GetTick>
 800433c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800433e:	e00f      	b.n	8004360 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004340:	f7ff f868 	bl	8003414 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800434e:	d907      	bls.n	8004360 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2204      	movs	r2, #4
 8004354:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	22e0      	movs	r2, #224	; 0xe0
 800435a:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e081      	b.n	8004464 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1e6      	bne.n	8004340 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fac0 	bl	80048f8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004378:	f001 febe 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 800437c:	4603      	mov	r3, r0
 800437e:	4a3c      	ldr	r2, [pc, #240]	; (8004470 <HAL_ETH_Init+0x1ac>)
 8004380:	fba2 2303 	umull	r2, r3, r2, r3
 8004384:	0c9a      	lsrs	r2, r3, #18
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3a01      	subs	r2, #1
 800438c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fa13 	bl	80047bc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80043ac:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80043b0:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	22e0      	movs	r2, #224	; 0xe0
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e04a      	b.n	8004464 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	f241 1308 	movw	r3, #4360	; 0x1108
 80043d6:	4413      	add	r3, r2
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b26      	ldr	r3, [pc, #152]	; (8004474 <HAL_ETH_Init+0x1b0>)
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6952      	ldr	r2, [r2, #20]
 80043e2:	0052      	lsls	r2, r2, #1
 80043e4:	6879      	ldr	r1, [r7, #4]
 80043e6:	6809      	ldr	r1, [r1, #0]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80043ee:	440b      	add	r3, r1
 80043f0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fad8 	bl	80049a8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fb1c 	bl	8004a36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	3305      	adds	r3, #5
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	021a      	lsls	r2, r3, #8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	3304      	adds	r3, #4
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	4619      	mov	r1, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	3303      	adds	r3, #3
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	061a      	lsls	r2, r3, #24
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	3302      	adds	r3, #2
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	3301      	adds	r3, #1
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800443c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800444a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800444c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2210      	movs	r2, #16
 800445a:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2210      	movs	r2, #16
 8004460:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	58024400 	.word	0x58024400
 8004470:	431bde83 	.word	0x431bde83
 8004474:	ffff8001 	.word	0xffff8001

08004478 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800448a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	791b      	ldrb	r3, [r3, #4]
 8004490:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004492:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	7b1b      	ldrb	r3, [r3, #12]
 8004498:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800449a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	7b5b      	ldrb	r3, [r3, #13]
 80044a0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80044a2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	7b9b      	ldrb	r3, [r3, #14]
 80044a8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80044aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	7bdb      	ldrb	r3, [r3, #15]
 80044b0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80044b2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	7c12      	ldrb	r2, [r2, #16]
 80044b8:	2a00      	cmp	r2, #0
 80044ba:	d102      	bne.n	80044c2 <ETH_SetMACConfig+0x4a>
 80044bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80044c0:	e000      	b.n	80044c4 <ETH_SetMACConfig+0x4c>
 80044c2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80044c4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	7c52      	ldrb	r2, [r2, #17]
 80044ca:	2a00      	cmp	r2, #0
 80044cc:	d102      	bne.n	80044d4 <ETH_SetMACConfig+0x5c>
 80044ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80044d2:	e000      	b.n	80044d6 <ETH_SetMACConfig+0x5e>
 80044d4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80044d6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	7c9b      	ldrb	r3, [r3, #18]
 80044dc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80044de:	431a      	orrs	r2, r3
                                macconf->Speed |
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80044e4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80044ea:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	7f1b      	ldrb	r3, [r3, #28]
 80044f0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80044f2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	7f5b      	ldrb	r3, [r3, #29]
 80044f8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80044fa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	7f92      	ldrb	r2, [r2, #30]
 8004500:	2a00      	cmp	r2, #0
 8004502:	d102      	bne.n	800450a <ETH_SetMACConfig+0x92>
 8004504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004508:	e000      	b.n	800450c <ETH_SetMACConfig+0x94>
 800450a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800450c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	7fdb      	ldrb	r3, [r3, #31]
 8004512:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004514:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	f892 2020 	ldrb.w	r2, [r2, #32]
 800451c:	2a00      	cmp	r2, #0
 800451e:	d102      	bne.n	8004526 <ETH_SetMACConfig+0xae>
 8004520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004524:	e000      	b.n	8004528 <ETH_SetMACConfig+0xb0>
 8004526:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004528:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800452e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004536:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004538:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <ETH_SetMACConfig+0x22c>)
 800454a:	4013      	ands	r3, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	68f9      	ldr	r1, [r7, #12]
 8004552:	430b      	orrs	r3, r1
 8004554:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004562:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004564:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800456c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800456e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004576:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004578:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004580:	2a00      	cmp	r2, #0
 8004582:	d102      	bne.n	800458a <ETH_SetMACConfig+0x112>
 8004584:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004588:	e000      	b.n	800458c <ETH_SetMACConfig+0x114>
 800458a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800458c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	4b42      	ldr	r3, [pc, #264]	; (80046a8 <ETH_SetMACConfig+0x230>)
 800459e:	4013      	ands	r3, r2
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	6812      	ldr	r2, [r2, #0]
 80045a4:	68f9      	ldr	r1, [r7, #12]
 80045a6:	430b      	orrs	r3, r1
 80045a8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045b0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68da      	ldr	r2, [r3, #12]
 80045c0:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <ETH_SetMACConfig+0x234>)
 80045c2:	4013      	ands	r3, r2
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	68f9      	ldr	r1, [r7, #12]
 80045ca:	430b      	orrs	r3, r1
 80045cc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80045d4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80045da:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80045e2:	2a00      	cmp	r2, #0
 80045e4:	d101      	bne.n	80045ea <ETH_SetMACConfig+0x172>
 80045e6:	2280      	movs	r2, #128	; 0x80
 80045e8:	e000      	b.n	80045ec <ETH_SetMACConfig+0x174>
 80045ea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80045ec:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80045f4:	4313      	orrs	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045fe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004602:	4013      	ands	r3, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	68f9      	ldr	r1, [r7, #12]
 800460a:	430b      	orrs	r3, r1
 800460c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004614:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800461c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462a:	f023 0103 	bic.w	r1, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	430a      	orrs	r2, r1
 8004636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004642:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800465e:	2a00      	cmp	r2, #0
 8004660:	d101      	bne.n	8004666 <ETH_SetMACConfig+0x1ee>
 8004662:	2240      	movs	r2, #64	; 0x40
 8004664:	e000      	b.n	8004668 <ETH_SetMACConfig+0x1f0>
 8004666:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004668:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004670:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004672:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800467a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004688:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	430a      	orrs	r2, r1
 8004694:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	00048083 	.word	0x00048083
 80046a8:	c0f88000 	.word	0xc0f88000
 80046ac:	fffffef0 	.word	0xfffffef0

080046b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b38      	ldr	r3, [pc, #224]	; (80047a8 <ETH_SetDMAConfig+0xf8>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	6809      	ldr	r1, [r1, #0]
 80046d0:	431a      	orrs	r2, r3
 80046d2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80046d6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	791b      	ldrb	r3, [r3, #4]
 80046dc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80046e2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	7b1b      	ldrb	r3, [r3, #12]
 80046e8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	f241 0304 	movw	r3, #4100	; 0x1004
 80046f6:	4413      	add	r3, r2
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	4b2c      	ldr	r3, [pc, #176]	; (80047ac <ETH_SetDMAConfig+0xfc>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6811      	ldr	r1, [r2, #0]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	431a      	orrs	r2, r3
 8004706:	f241 0304 	movw	r3, #4100	; 0x1004
 800470a:	440b      	add	r3, r1
 800470c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	7b5b      	ldrb	r3, [r3, #13]
 8004712:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b22      	ldr	r3, [pc, #136]	; (80047b0 <ETH_SetDMAConfig+0x100>)
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6811      	ldr	r1, [r2, #0]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	431a      	orrs	r2, r3
 8004732:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004736:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	7d1b      	ldrb	r3, [r3, #20]
 8004740:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004742:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	7f5b      	ldrb	r3, [r3, #29]
 8004748:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	f241 1304 	movw	r3, #4356	; 0x1104
 8004756:	4413      	add	r3, r2
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <ETH_SetDMAConfig+0x104>)
 800475c:	4013      	ands	r3, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6811      	ldr	r1, [r2, #0]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	431a      	orrs	r2, r3
 8004766:	f241 1304 	movw	r3, #4356	; 0x1104
 800476a:	440b      	add	r3, r1
 800476c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	7f1b      	ldrb	r3, [r3, #28]
 8004772:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	f241 1308 	movw	r3, #4360	; 0x1108
 8004784:	4413      	add	r3, r2
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4b0b      	ldr	r3, [pc, #44]	; (80047b8 <ETH_SetDMAConfig+0x108>)
 800478a:	4013      	ands	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6811      	ldr	r1, [r2, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	431a      	orrs	r2, r3
 8004794:	f241 1308 	movw	r3, #4360	; 0x1108
 8004798:	440b      	add	r3, r1
 800479a:	601a      	str	r2, [r3, #0]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	ffff87fd 	.word	0xffff87fd
 80047ac:	ffff2ffe 	.word	0xffff2ffe
 80047b0:	fffec000 	.word	0xfffec000
 80047b4:	ffc0efef 	.word	0xffc0efef
 80047b8:	7fc0ffff 	.word	0x7fc0ffff

080047bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b0a4      	sub	sp, #144	; 0x90
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80047c4:	2301      	movs	r3, #1
 80047c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80047ca:	2300      	movs	r3, #0
 80047cc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80047e6:	2301      	movs	r3, #1
 80047e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80047f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047fc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004804:	2300      	movs	r3, #0
 8004806:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004808:	2300      	movs	r3, #0
 800480a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800480e:	2300      	movs	r3, #0
 8004810:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004814:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004818:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004820:	2300      	movs	r3, #0
 8004822:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800482a:	2300      	movs	r3, #0
 800482c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004830:	2300      	movs	r3, #0
 8004832:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004836:	2300      	movs	r3, #0
 8004838:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800483a:	2300      	movs	r3, #0
 800483c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800483e:	2300      	movs	r3, #0
 8004840:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004842:	2300      	movs	r3, #0
 8004844:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004848:	2300      	movs	r3, #0
 800484a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004854:	2320      	movs	r3, #32
 8004856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800485a:	2301      	movs	r3, #1
 800485c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004860:	2300      	movs	r3, #0
 8004862:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004866:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800486a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800486c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004870:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004872:	2300      	movs	r3, #0
 8004874:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004878:	2302      	movs	r3, #2
 800487a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800487e:	2300      	movs	r3, #0
 8004880:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800488a:	2300      	movs	r3, #0
 800488c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004896:	2300      	movs	r3, #0
 8004898:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800489a:	2301      	movs	r3, #1
 800489c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80048a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fde6 	bl	8004478 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80048b0:	2301      	movs	r3, #1
 80048b2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80048b4:	2300      	movs	r3, #0
 80048b6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80048be:	2300      	movs	r3, #0
 80048c0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80048c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048ca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80048d0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80048dc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80048e2:	f107 0308 	add.w	r3, r7, #8
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f7ff fee1 	bl	80046b0 <ETH_SetDMAConfig>
}
 80048ee:	bf00      	nop
 80048f0:	3790      	adds	r7, #144	; 0x90
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004908:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004910:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004912:	f001 fbf1 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 8004916:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d908      	bls.n	8004932 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d804      	bhi.n	8004932 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e027      	b.n	8004982 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d908      	bls.n	800494c <ETH_MAC_MDIO_ClkConfig+0x54>
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	4a17      	ldr	r2, [pc, #92]	; (800499c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d204      	bcs.n	800494c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	e01a      	b.n	8004982 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4a13      	ldr	r2, [pc, #76]	; (800499c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d303      	bcc.n	800495c <ETH_MAC_MDIO_ClkConfig+0x64>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	4a12      	ldr	r2, [pc, #72]	; (80049a0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d911      	bls.n	8004980 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4a10      	ldr	r2, [pc, #64]	; (80049a0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d908      	bls.n	8004976 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4a0f      	ldr	r2, [pc, #60]	; (80049a4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d804      	bhi.n	8004976 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	e005      	b.n	8004982 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e000      	b.n	8004982 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004980:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	01312cff 	.word	0x01312cff
 8004998:	02160ebf 	.word	0x02160ebf
 800499c:	03938700 	.word	0x03938700
 80049a0:	05f5e0ff 	.word	0x05f5e0ff
 80049a4:	08f0d17f 	.word	0x08f0d17f

080049a8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e01d      	b.n	80049f2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68d9      	ldr	r1, [r3, #12]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4613      	mov	r3, r2
 80049be:	005b      	lsls	r3, r3, #1
 80049c0:	4413      	add	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	440b      	add	r3, r1
 80049c6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2200      	movs	r2, #0
 80049d2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2200      	movs	r2, #0
 80049de:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80049e0:	68b9      	ldr	r1, [r7, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	3206      	adds	r2, #6
 80049e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b03      	cmp	r3, #3
 80049f6:	d9de      	bls.n	80049b6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	f241 132c 	movw	r3, #4396	; 0x112c
 8004a06:	4413      	add	r3, r2
 8004a08:	2203      	movs	r2, #3
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68d9      	ldr	r1, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	f241 1314 	movw	r3, #4372	; 0x1114
 8004a18:	4413      	add	r3, r2
 8004a1a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004a28:	601a      	str	r2, [r3, #0]
}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	e024      	b.n	8004a8e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6919      	ldr	r1, [r3, #16]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	440b      	add	r3, r1
 8004a54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	2200      	movs	r2, #0
 8004a66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2200      	movs	r2, #0
 8004a72:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	330a      	adds	r3, #10
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	440b      	add	r3, r1
 8004a86:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2b03      	cmp	r3, #3
 8004a92:	d9d7      	bls.n	8004a44 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	f241 1330 	movw	r3, #4400	; 0x1130
 8004aba:	4413      	add	r3, r2
 8004abc:	2203      	movs	r2, #3
 8004abe:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6919      	ldr	r1, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	f241 131c 	movw	r3, #4380	; 0x111c
 8004acc:	4413      	add	r3, r2
 8004ace:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	f241 1328 	movw	r3, #4392	; 0x1128
 8004ae0:	4413      	add	r3, r2
 8004ae2:	6019      	str	r1, [r3, #0]
}
 8004ae4:	bf00      	nop
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b089      	sub	sp, #36	; 0x24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004afe:	4b89      	ldr	r3, [pc, #548]	; (8004d24 <HAL_GPIO_Init+0x234>)
 8004b00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b02:	e194      	b.n	8004e2e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2101      	movs	r1, #1
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b10:	4013      	ands	r3, r2
 8004b12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 8186 	beq.w	8004e28 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d00b      	beq.n	8004b3c <HAL_GPIO_Init+0x4c>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d007      	beq.n	8004b3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b30:	2b11      	cmp	r3, #17
 8004b32:	d003      	beq.n	8004b3c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b12      	cmp	r3, #18
 8004b3a:	d130      	bne.n	8004b9e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	2203      	movs	r2, #3
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4013      	ands	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b72:	2201      	movs	r2, #1
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43db      	mvns	r3, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	091b      	lsrs	r3, r3, #4
 8004b88:	f003 0201 	and.w	r2, r3, #1
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	69ba      	ldr	r2, [r7, #24]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	2203      	movs	r2, #3
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	43db      	mvns	r3, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	005b      	lsls	r3, r3, #1
 8004bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc2:	69ba      	ldr	r2, [r7, #24]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_Init+0xee>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b12      	cmp	r3, #18
 8004bdc:	d123      	bne.n	8004c26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	08da      	lsrs	r2, r3, #3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3208      	adds	r2, #8
 8004be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	220f      	movs	r2, #15
 8004bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfa:	43db      	mvns	r3, r3
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	f003 0307 	and.w	r3, r3, #7
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	08da      	lsrs	r2, r3, #3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3208      	adds	r2, #8
 8004c20:	69b9      	ldr	r1, [r7, #24]
 8004c22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	2203      	movs	r2, #3
 8004c32:	fa02 f303 	lsl.w	r3, r2, r3
 8004c36:	43db      	mvns	r3, r3
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f003 0203 	and.w	r2, r3, #3
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 80e0 	beq.w	8004e28 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c68:	4b2f      	ldr	r3, [pc, #188]	; (8004d28 <HAL_GPIO_Init+0x238>)
 8004c6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c6e:	4a2e      	ldr	r2, [pc, #184]	; (8004d28 <HAL_GPIO_Init+0x238>)
 8004c70:	f043 0302 	orr.w	r3, r3, #2
 8004c74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c78:	4b2b      	ldr	r3, [pc, #172]	; (8004d28 <HAL_GPIO_Init+0x238>)
 8004c7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c86:	4a29      	ldr	r2, [pc, #164]	; (8004d2c <HAL_GPIO_Init+0x23c>)
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	089b      	lsrs	r3, r3, #2
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f003 0303 	and.w	r3, r3, #3
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	220f      	movs	r2, #15
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a20      	ldr	r2, [pc, #128]	; (8004d30 <HAL_GPIO_Init+0x240>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d052      	beq.n	8004d58 <HAL_GPIO_Init+0x268>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1f      	ldr	r2, [pc, #124]	; (8004d34 <HAL_GPIO_Init+0x244>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d031      	beq.n	8004d1e <HAL_GPIO_Init+0x22e>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a1e      	ldr	r2, [pc, #120]	; (8004d38 <HAL_GPIO_Init+0x248>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d02b      	beq.n	8004d1a <HAL_GPIO_Init+0x22a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a1d      	ldr	r2, [pc, #116]	; (8004d3c <HAL_GPIO_Init+0x24c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d025      	beq.n	8004d16 <HAL_GPIO_Init+0x226>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1c      	ldr	r2, [pc, #112]	; (8004d40 <HAL_GPIO_Init+0x250>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <HAL_GPIO_Init+0x222>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1b      	ldr	r2, [pc, #108]	; (8004d44 <HAL_GPIO_Init+0x254>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d019      	beq.n	8004d0e <HAL_GPIO_Init+0x21e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1a      	ldr	r2, [pc, #104]	; (8004d48 <HAL_GPIO_Init+0x258>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <HAL_GPIO_Init+0x21a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a19      	ldr	r2, [pc, #100]	; (8004d4c <HAL_GPIO_Init+0x25c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00d      	beq.n	8004d06 <HAL_GPIO_Init+0x216>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <HAL_GPIO_Init+0x260>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d007      	beq.n	8004d02 <HAL_GPIO_Init+0x212>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a17      	ldr	r2, [pc, #92]	; (8004d54 <HAL_GPIO_Init+0x264>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <HAL_GPIO_Init+0x20e>
 8004cfa:	2309      	movs	r3, #9
 8004cfc:	e02d      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004cfe:	230a      	movs	r3, #10
 8004d00:	e02b      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d02:	2308      	movs	r3, #8
 8004d04:	e029      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d06:	2307      	movs	r3, #7
 8004d08:	e027      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d0a:	2306      	movs	r3, #6
 8004d0c:	e025      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d0e:	2305      	movs	r3, #5
 8004d10:	e023      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d12:	2304      	movs	r3, #4
 8004d14:	e021      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d16:	2303      	movs	r3, #3
 8004d18:	e01f      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e01d      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e01b      	b.n	8004d5a <HAL_GPIO_Init+0x26a>
 8004d22:	bf00      	nop
 8004d24:	58000080 	.word	0x58000080
 8004d28:	58024400 	.word	0x58024400
 8004d2c:	58000400 	.word	0x58000400
 8004d30:	58020000 	.word	0x58020000
 8004d34:	58020400 	.word	0x58020400
 8004d38:	58020800 	.word	0x58020800
 8004d3c:	58020c00 	.word	0x58020c00
 8004d40:	58021000 	.word	0x58021000
 8004d44:	58021400 	.word	0x58021400
 8004d48:	58021800 	.word	0x58021800
 8004d4c:	58021c00 	.word	0x58021c00
 8004d50:	58022000 	.word	0x58022000
 8004d54:	58022400 	.word	0x58022400
 8004d58:	2300      	movs	r3, #0
 8004d5a:	69fa      	ldr	r2, [r7, #28]
 8004d5c:	f002 0203 	and.w	r2, r2, #3
 8004d60:	0092      	lsls	r2, r2, #2
 8004d62:	4093      	lsls	r3, r2
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d6a:	4938      	ldr	r1, [pc, #224]	; (8004e4c <HAL_GPIO_Init+0x35c>)
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	089b      	lsrs	r3, r3, #2
 8004d70:	3302      	adds	r3, #2
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4013      	ands	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004df2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	43db      	mvns	r3, r3
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	4013      	ands	r3, r2
 8004e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004e20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	fa22 f303 	lsr.w	r3, r2, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	f47f ae63 	bne.w	8004b04 <HAL_GPIO_Init+0x14>
  }
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	3724      	adds	r7, #36	; 0x24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	58000400 	.word	0x58000400

08004e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	807b      	strh	r3, [r7, #2]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e60:	787b      	ldrb	r3, [r7, #1]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e66:	887a      	ldrh	r2, [r7, #2]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e6c:	e003      	b.n	8004e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e6e:	887b      	ldrh	r3, [r7, #2]
 8004e70:	041a      	lsls	r2, r3, #16
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	619a      	str	r2, [r3, #24]
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695a      	ldr	r2, [r3, #20]
 8004e92:	887b      	ldrh	r3, [r7, #2]
 8004e94:	401a      	ands	r2, r3
 8004e96:	887b      	ldrh	r3, [r7, #2]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d104      	bne.n	8004ea6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e9c:	887b      	ldrh	r3, [r7, #2]
 8004e9e:	041a      	lsls	r2, r3, #16
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004ea4:	e002      	b.n	8004eac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004ea6:	887a      	ldrh	r2, [r7, #2]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	619a      	str	r2, [r3, #24]
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004ec0:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <HAL_HSEM_FastTake+0x2c>)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3320      	adds	r3, #32
 8004ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eca:	4a07      	ldr	r2, [pc, #28]	; (8004ee8 <HAL_HSEM_FastTake+0x30>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d101      	bne.n	8004ed4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e000      	b.n	8004ed6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop
 8004ee4:	58026400 	.word	0x58026400
 8004ee8:	80000300 	.word	0x80000300

08004eec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004ef6:	4906      	ldr	r1, [pc, #24]	; (8004f10 <HAL_HSEM_Release+0x24>)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	58026400 	.word	0x58026400

08004f14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f16:	b08f      	sub	sp, #60	; 0x3c
 8004f18:	af0a      	add	r7, sp, #40	; 0x28
 8004f1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e116      	b.n	8005154 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f7fe f801 	bl	8002f48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2203      	movs	r2, #3
 8004f4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d102      	bne.n	8004f60 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f003 ffef 	bl	8008f48 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	603b      	str	r3, [r7, #0]
 8004f70:	687e      	ldr	r6, [r7, #4]
 8004f72:	466d      	mov	r5, sp
 8004f74:	f106 0410 	add.w	r4, r6, #16
 8004f78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f80:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f84:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f88:	1d33      	adds	r3, r6, #4
 8004f8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f8c:	6838      	ldr	r0, [r7, #0]
 8004f8e:	f003 ff79 	bl	8008e84 <USB_CoreInit>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0d7      	b.n	8005154 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f003 ffdd 	bl	8008f6a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]
 8004fb4:	e04a      	b.n	800504c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fb6:	7bfa      	ldrb	r2, [r7, #15]
 8004fb8:	6879      	ldr	r1, [r7, #4]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	333d      	adds	r3, #61	; 0x3d
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004fca:	7bfa      	ldrb	r2, [r7, #15]
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	440b      	add	r3, r1
 8004fd8:	333c      	adds	r3, #60	; 0x3c
 8004fda:	7bfa      	ldrb	r2, [r7, #15]
 8004fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fde:	7bfa      	ldrb	r2, [r7, #15]
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	b298      	uxth	r0, r3
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	1a9b      	subs	r3, r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	3342      	adds	r3, #66	; 0x42
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ff6:	7bfa      	ldrb	r2, [r7, #15]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	333f      	adds	r3, #63	; 0x3f
 8005006:	2200      	movs	r2, #0
 8005008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800500a:	7bfa      	ldrb	r2, [r7, #15]
 800500c:	6879      	ldr	r1, [r7, #4]
 800500e:	4613      	mov	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	1a9b      	subs	r3, r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	440b      	add	r3, r1
 8005018:	3344      	adds	r3, #68	; 0x44
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800501e:	7bfa      	ldrb	r2, [r7, #15]
 8005020:	6879      	ldr	r1, [r7, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	1a9b      	subs	r3, r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3348      	adds	r3, #72	; 0x48
 800502e:	2200      	movs	r2, #0
 8005030:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005032:	7bfa      	ldrb	r2, [r7, #15]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	3350      	adds	r3, #80	; 0x50
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005046:	7bfb      	ldrb	r3, [r7, #15]
 8005048:	3301      	adds	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
 800504c:	7bfa      	ldrb	r2, [r7, #15]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	429a      	cmp	r2, r3
 8005054:	d3af      	bcc.n	8004fb6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]
 800505a:	e044      	b.n	80050e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800505c:	7bfa      	ldrb	r2, [r7, #15]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800506e:	2200      	movs	r2, #0
 8005070:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005072:	7bfa      	ldrb	r2, [r7, #15]
 8005074:	6879      	ldr	r1, [r7, #4]
 8005076:	4613      	mov	r3, r2
 8005078:	00db      	lsls	r3, r3, #3
 800507a:	1a9b      	subs	r3, r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	440b      	add	r3, r1
 8005080:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005084:	7bfa      	ldrb	r2, [r7, #15]
 8005086:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005088:	7bfa      	ldrb	r2, [r7, #15]
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	4613      	mov	r3, r2
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800509a:	2200      	movs	r2, #0
 800509c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800509e:	7bfa      	ldrb	r2, [r7, #15]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	00db      	lsls	r3, r3, #3
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050b4:	7bfa      	ldrb	r2, [r7, #15]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	1a9b      	subs	r3, r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80050ca:	7bfa      	ldrb	r2, [r7, #15]
 80050cc:	6879      	ldr	r1, [r7, #4]
 80050ce:	4613      	mov	r3, r2
 80050d0:	00db      	lsls	r3, r3, #3
 80050d2:	1a9b      	subs	r3, r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	440b      	add	r3, r1
 80050d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	3301      	adds	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
 80050e6:	7bfa      	ldrb	r2, [r7, #15]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d3b5      	bcc.n	800505c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	687e      	ldr	r6, [r7, #4]
 80050f8:	466d      	mov	r5, sp
 80050fa:	f106 0410 	add.w	r4, r6, #16
 80050fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005106:	e894 0003 	ldmia.w	r4, {r0, r1}
 800510a:	e885 0003 	stmia.w	r5, {r0, r1}
 800510e:	1d33      	adds	r3, r6, #4
 8005110:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005112:	6838      	ldr	r0, [r7, #0]
 8005114:	f003 ff54 	bl	8008fc0 <USB_DevInit>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d005      	beq.n	800512a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e014      	b.n	8005154 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	2b01      	cmp	r3, #1
 8005140:	d102      	bne.n	8005148 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f80a 	bl	800515c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f004 f8f6 	bl	800933e <USB_DevDisconnect>

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800515c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800518c:	4313      	orrs	r3, r2
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	10000003 	.word	0x10000003

080051a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80051ac:	4b29      	ldr	r3, [pc, #164]	; (8005254 <HAL_PWREx_ConfigSupply+0xb0>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	2b06      	cmp	r3, #6
 80051b6:	d00a      	beq.n	80051ce <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80051b8:	4b26      	ldr	r3, [pc, #152]	; (8005254 <HAL_PWREx_ConfigSupply+0xb0>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d001      	beq.n	80051ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e040      	b.n	800524c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	e03e      	b.n	800524c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80051ce:	4b21      	ldr	r3, [pc, #132]	; (8005254 <HAL_PWREx_ConfigSupply+0xb0>)
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80051d6:	491f      	ldr	r1, [pc, #124]	; (8005254 <HAL_PWREx_ConfigSupply+0xb0>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051de:	f7fe f919 	bl	8003414 <HAL_GetTick>
 80051e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051e4:	e009      	b.n	80051fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051e6:	f7fe f915 	bl	8003414 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051f4:	d901      	bls.n	80051fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e028      	b.n	800524c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051fa:	4b16      	ldr	r3, [pc, #88]	; (8005254 <HAL_PWREx_ConfigSupply+0xb0>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005206:	d1ee      	bne.n	80051e6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b1e      	cmp	r3, #30
 800520c:	d008      	beq.n	8005220 <HAL_PWREx_ConfigSupply+0x7c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b2e      	cmp	r3, #46	; 0x2e
 8005212:	d005      	beq.n	8005220 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b1d      	cmp	r3, #29
 8005218:	d002      	beq.n	8005220 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b2d      	cmp	r3, #45	; 0x2d
 800521e:	d114      	bne.n	800524a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005220:	f7fe f8f8 	bl	8003414 <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005226:	e009      	b.n	800523c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005228:	f7fe f8f4 	bl	8003414 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005236:	d901      	bls.n	800523c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e007      	b.n	800524c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <HAL_PWREx_ConfigSupply+0xb0>)
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005248:	d1ee      	bne.n	8005228 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	58024800 	.word	0x58024800

08005258 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a04      	ldr	r2, [pc, #16]	; (8005274 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005266:	60d3      	str	r3, [r2, #12]
}
 8005268:	bf00      	nop
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	58024800 	.word	0x58024800

08005278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b08c      	sub	sp, #48	; 0x30
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e3ff      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8087 	beq.w	80053a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005298:	4b99      	ldr	r3, [pc, #612]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052a2:	4b97      	ldr	r3, [pc, #604]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	2b10      	cmp	r3, #16
 80052ac:	d007      	beq.n	80052be <HAL_RCC_OscConfig+0x46>
 80052ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b0:	2b18      	cmp	r3, #24
 80052b2:	d110      	bne.n	80052d6 <HAL_RCC_OscConfig+0x5e>
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d10b      	bne.n	80052d6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052be:	4b90      	ldr	r3, [pc, #576]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d06c      	beq.n	80053a4 <HAL_RCC_OscConfig+0x12c>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d168      	bne.n	80053a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e3d9      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052de:	d106      	bne.n	80052ee <HAL_RCC_OscConfig+0x76>
 80052e0:	4b87      	ldr	r3, [pc, #540]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a86      	ldr	r2, [pc, #536]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	e02e      	b.n	800534c <HAL_RCC_OscConfig+0xd4>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10c      	bne.n	8005310 <HAL_RCC_OscConfig+0x98>
 80052f6:	4b82      	ldr	r3, [pc, #520]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a81      	ldr	r2, [pc, #516]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80052fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4b7f      	ldr	r3, [pc, #508]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a7e      	ldr	r2, [pc, #504]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e01d      	b.n	800534c <HAL_RCC_OscConfig+0xd4>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005318:	d10c      	bne.n	8005334 <HAL_RCC_OscConfig+0xbc>
 800531a:	4b79      	ldr	r3, [pc, #484]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a78      	ldr	r2, [pc, #480]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	4b76      	ldr	r3, [pc, #472]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a75      	ldr	r2, [pc, #468]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800532c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e00b      	b.n	800534c <HAL_RCC_OscConfig+0xd4>
 8005334:	4b72      	ldr	r3, [pc, #456]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a71      	ldr	r2, [pc, #452]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800533a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	4b6f      	ldr	r3, [pc, #444]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a6e      	ldr	r2, [pc, #440]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800534a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d013      	beq.n	800537c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fe f85e 	bl	8003414 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800535c:	f7fe f85a 	bl	8003414 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b64      	cmp	r3, #100	; 0x64
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e38d      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800536e:	4b64      	ldr	r3, [pc, #400]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0f0      	beq.n	800535c <HAL_RCC_OscConfig+0xe4>
 800537a:	e014      	b.n	80053a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fe f84a 	bl	8003414 <HAL_GetTick>
 8005380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005384:	f7fe f846 	bl	8003414 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	; 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e379      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005396:	4b5a      	ldr	r3, [pc, #360]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x10c>
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 80ae 	beq.w	8005510 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053b4:	4b52      	ldr	r3, [pc, #328]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053be:	4b50      	ldr	r3, [pc, #320]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80053c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d007      	beq.n	80053da <HAL_RCC_OscConfig+0x162>
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	2b18      	cmp	r3, #24
 80053ce:	d13a      	bne.n	8005446 <HAL_RCC_OscConfig+0x1ce>
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f003 0303 	and.w	r3, r3, #3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d135      	bne.n	8005446 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053da:	4b49      	ldr	r3, [pc, #292]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0304 	and.w	r3, r3, #4
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_RCC_OscConfig+0x17a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e34b      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f2:	f7fe f83f 	bl	8003474 <HAL_GetREVID>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d817      	bhi.n	8005430 <HAL_RCC_OscConfig+0x1b8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d108      	bne.n	800541a <HAL_RCC_OscConfig+0x1a2>
 8005408:	4b3d      	ldr	r3, [pc, #244]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005410:	4a3b      	ldr	r2, [pc, #236]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005412:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005416:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005418:	e07a      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800541a:	4b39      	ldr	r3, [pc, #228]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	031b      	lsls	r3, r3, #12
 8005428:	4935      	ldr	r1, [pc, #212]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800542a:	4313      	orrs	r3, r2
 800542c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800542e:	e06f      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005430:	4b33      	ldr	r3, [pc, #204]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	061b      	lsls	r3, r3, #24
 800543e:	4930      	ldr	r1, [pc, #192]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005440:	4313      	orrs	r3, r2
 8005442:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005444:	e064      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d045      	beq.n	80054da <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800544e:	4b2c      	ldr	r3, [pc, #176]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 0219 	bic.w	r2, r3, #25
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	4929      	ldr	r1, [pc, #164]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fd ffd8 	bl	8003414 <HAL_GetTick>
 8005464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005468:	f7fd ffd4 	bl	8003414 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e307      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800547a:	4b21      	ldr	r3, [pc, #132]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005486:	f7fd fff5 	bl	8003474 <HAL_GetREVID>
 800548a:	4603      	mov	r3, r0
 800548c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005490:	4293      	cmp	r3, r2
 8005492:	d817      	bhi.n	80054c4 <HAL_RCC_OscConfig+0x24c>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d108      	bne.n	80054ae <HAL_RCC_OscConfig+0x236>
 800549c:	4b18      	ldr	r3, [pc, #96]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054a4:	4a16      	ldr	r2, [pc, #88]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054aa:	6053      	str	r3, [r2, #4]
 80054ac:	e030      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
 80054ae:	4b14      	ldr	r3, [pc, #80]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	031b      	lsls	r3, r3, #12
 80054bc:	4910      	ldr	r1, [pc, #64]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	604b      	str	r3, [r1, #4]
 80054c2:	e025      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
 80054c4:	4b0e      	ldr	r3, [pc, #56]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	061b      	lsls	r3, r3, #24
 80054d2:	490b      	ldr	r1, [pc, #44]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
 80054d8:	e01a      	b.n	8005510 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a08      	ldr	r2, [pc, #32]	; (8005500 <HAL_RCC_OscConfig+0x288>)
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e6:	f7fd ff95 	bl	8003414 <HAL_GetTick>
 80054ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054ec:	e00a      	b.n	8005504 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ee:	f7fd ff91 	bl	8003414 <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d903      	bls.n	8005504 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e2c4      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
 8005500:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005504:	4ba4      	ldr	r3, [pc, #656]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1ee      	bne.n	80054ee <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 80a9 	beq.w	8005670 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800551e:	4b9e      	ldr	r3, [pc, #632]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005526:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005528:	4b9b      	ldr	r3, [pc, #620]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	2b08      	cmp	r3, #8
 8005532:	d007      	beq.n	8005544 <HAL_RCC_OscConfig+0x2cc>
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b18      	cmp	r3, #24
 8005538:	d13a      	bne.n	80055b0 <HAL_RCC_OscConfig+0x338>
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b01      	cmp	r3, #1
 8005542:	d135      	bne.n	80055b0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005544:	4b94      	ldr	r3, [pc, #592]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_RCC_OscConfig+0x2e4>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d001      	beq.n	800555c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e296      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800555c:	f7fd ff8a 	bl	8003474 <HAL_GetREVID>
 8005560:	4603      	mov	r3, r0
 8005562:	f241 0203 	movw	r2, #4099	; 0x1003
 8005566:	4293      	cmp	r3, r2
 8005568:	d817      	bhi.n	800559a <HAL_RCC_OscConfig+0x322>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	2b20      	cmp	r3, #32
 8005570:	d108      	bne.n	8005584 <HAL_RCC_OscConfig+0x30c>
 8005572:	4b89      	ldr	r3, [pc, #548]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800557a:	4a87      	ldr	r2, [pc, #540]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800557c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005580:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005582:	e075      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005584:	4b84      	ldr	r3, [pc, #528]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	069b      	lsls	r3, r3, #26
 8005592:	4981      	ldr	r1, [pc, #516]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005594:	4313      	orrs	r3, r2
 8005596:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005598:	e06a      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800559a:	4b7f      	ldr	r3, [pc, #508]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	061b      	lsls	r3, r3, #24
 80055a8:	497b      	ldr	r1, [pc, #492]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80055ae:	e05f      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d042      	beq.n	800563e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80055b8:	4b77      	ldr	r3, [pc, #476]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a76      	ldr	r2, [pc, #472]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80055be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fd ff26 	bl	8003414 <HAL_GetTick>
 80055c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80055cc:	f7fd ff22 	bl	8003414 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e255      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80055de:	4b6e      	ldr	r3, [pc, #440]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0f0      	beq.n	80055cc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055ea:	f7fd ff43 	bl	8003474 <HAL_GetREVID>
 80055ee:	4603      	mov	r3, r0
 80055f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d817      	bhi.n	8005628 <HAL_RCC_OscConfig+0x3b0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d108      	bne.n	8005612 <HAL_RCC_OscConfig+0x39a>
 8005600:	4b65      	ldr	r3, [pc, #404]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005608:	4a63      	ldr	r2, [pc, #396]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800560a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800560e:	6053      	str	r3, [r2, #4]
 8005610:	e02e      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
 8005612:	4b61      	ldr	r3, [pc, #388]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	069b      	lsls	r3, r3, #26
 8005620:	495d      	ldr	r1, [pc, #372]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005622:	4313      	orrs	r3, r2
 8005624:	604b      	str	r3, [r1, #4]
 8005626:	e023      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
 8005628:	4b5b      	ldr	r3, [pc, #364]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	061b      	lsls	r3, r3, #24
 8005636:	4958      	ldr	r1, [pc, #352]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005638:	4313      	orrs	r3, r2
 800563a:	60cb      	str	r3, [r1, #12]
 800563c:	e018      	b.n	8005670 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800563e:	4b56      	ldr	r3, [pc, #344]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a55      	ldr	r2, [pc, #340]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005644:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564a:	f7fd fee3 	bl	8003414 <HAL_GetTick>
 800564e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005650:	e008      	b.n	8005664 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005652:	f7fd fedf 	bl	8003414 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	2b02      	cmp	r3, #2
 800565e:	d901      	bls.n	8005664 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e212      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005664:	4b4c      	ldr	r3, [pc, #304]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f0      	bne.n	8005652 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d036      	beq.n	80056ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d019      	beq.n	80056b8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005684:	4b44      	ldr	r3, [pc, #272]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005688:	4a43      	ldr	r2, [pc, #268]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005690:	f7fd fec0 	bl	8003414 <HAL_GetTick>
 8005694:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005696:	e008      	b.n	80056aa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005698:	f7fd febc 	bl	8003414 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e1ef      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80056aa:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80056ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0x420>
 80056b6:	e018      	b.n	80056ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056b8:	4b37      	ldr	r3, [pc, #220]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80056ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056bc:	4a36      	ldr	r2, [pc, #216]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c4:	f7fd fea6 	bl	8003414 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056cc:	f7fd fea2 	bl	8003414 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e1d5      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80056de:	4b2e      	ldr	r3, [pc, #184]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 80056e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0320 	and.w	r3, r3, #32
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d036      	beq.n	8005764 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d019      	beq.n	8005732 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056fe:	4b26      	ldr	r3, [pc, #152]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a25      	ldr	r2, [pc, #148]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005704:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005708:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800570a:	f7fd fe83 	bl	8003414 <HAL_GetTick>
 800570e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005712:	f7fd fe7f 	bl	8003414 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e1b2      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005724:	4b1c      	ldr	r3, [pc, #112]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0f0      	beq.n	8005712 <HAL_RCC_OscConfig+0x49a>
 8005730:	e018      	b.n	8005764 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005732:	4b19      	ldr	r3, [pc, #100]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a18      	ldr	r2, [pc, #96]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 8005738:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800573c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800573e:	f7fd fe69 	bl	8003414 <HAL_GetTick>
 8005742:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005744:	e008      	b.n	8005758 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005746:	f7fd fe65 	bl	8003414 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e198      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005758:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <HAL_RCC_OscConfig+0x520>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1f0      	bne.n	8005746 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8085 	beq.w	800587c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005772:	4b0a      	ldr	r3, [pc, #40]	; (800579c <HAL_RCC_OscConfig+0x524>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <HAL_RCC_OscConfig+0x524>)
 8005778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800577e:	f7fd fe49 	bl	8003414 <HAL_GetTick>
 8005782:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005784:	e00c      	b.n	80057a0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005786:	f7fd fe45 	bl	8003414 <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b64      	cmp	r3, #100	; 0x64
 8005792:	d905      	bls.n	80057a0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e178      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
 8005798:	58024400 	.word	0x58024400
 800579c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057a0:	4b96      	ldr	r3, [pc, #600]	; (80059fc <HAL_RCC_OscConfig+0x784>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ec      	beq.n	8005786 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d106      	bne.n	80057c2 <HAL_RCC_OscConfig+0x54a>
 80057b4:	4b92      	ldr	r3, [pc, #584]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b8:	4a91      	ldr	r2, [pc, #580]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	6713      	str	r3, [r2, #112]	; 0x70
 80057c0:	e02d      	b.n	800581e <HAL_RCC_OscConfig+0x5a6>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10c      	bne.n	80057e4 <HAL_RCC_OscConfig+0x56c>
 80057ca:	4b8d      	ldr	r3, [pc, #564]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ce:	4a8c      	ldr	r2, [pc, #560]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	6713      	str	r3, [r2, #112]	; 0x70
 80057d6:	4b8a      	ldr	r3, [pc, #552]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057da:	4a89      	ldr	r2, [pc, #548]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057dc:	f023 0304 	bic.w	r3, r3, #4
 80057e0:	6713      	str	r3, [r2, #112]	; 0x70
 80057e2:	e01c      	b.n	800581e <HAL_RCC_OscConfig+0x5a6>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	2b05      	cmp	r3, #5
 80057ea:	d10c      	bne.n	8005806 <HAL_RCC_OscConfig+0x58e>
 80057ec:	4b84      	ldr	r3, [pc, #528]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f0:	4a83      	ldr	r2, [pc, #524]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057f2:	f043 0304 	orr.w	r3, r3, #4
 80057f6:	6713      	str	r3, [r2, #112]	; 0x70
 80057f8:	4b81      	ldr	r3, [pc, #516]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fc:	4a80      	ldr	r2, [pc, #512]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80057fe:	f043 0301 	orr.w	r3, r3, #1
 8005802:	6713      	str	r3, [r2, #112]	; 0x70
 8005804:	e00b      	b.n	800581e <HAL_RCC_OscConfig+0x5a6>
 8005806:	4b7e      	ldr	r3, [pc, #504]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800580a:	4a7d      	ldr	r2, [pc, #500]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800580c:	f023 0301 	bic.w	r3, r3, #1
 8005810:	6713      	str	r3, [r2, #112]	; 0x70
 8005812:	4b7b      	ldr	r3, [pc, #492]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4a7a      	ldr	r2, [pc, #488]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005818:	f023 0304 	bic.w	r3, r3, #4
 800581c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d015      	beq.n	8005852 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005826:	f7fd fdf5 	bl	8003414 <HAL_GetTick>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800582c:	e00a      	b.n	8005844 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800582e:	f7fd fdf1 	bl	8003414 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f241 3288 	movw	r2, #5000	; 0x1388
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e122      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005844:	4b6e      	ldr	r3, [pc, #440]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d0ee      	beq.n	800582e <HAL_RCC_OscConfig+0x5b6>
 8005850:	e014      	b.n	800587c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005852:	f7fd fddf 	bl	8003414 <HAL_GetTick>
 8005856:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005858:	e00a      	b.n	8005870 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800585a:	f7fd fddb 	bl	8003414 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	f241 3288 	movw	r2, #5000	; 0x1388
 8005868:	4293      	cmp	r3, r2
 800586a:	d901      	bls.n	8005870 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e10c      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005870:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005874:	f003 0302 	and.w	r3, r3, #2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1ee      	bne.n	800585a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8101 	beq.w	8005a88 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005886:	4b5e      	ldr	r3, [pc, #376]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800588e:	2b18      	cmp	r3, #24
 8005890:	f000 80bc 	beq.w	8005a0c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	2b02      	cmp	r3, #2
 800589a:	f040 8095 	bne.w	80059c8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589e:	4b58      	ldr	r3, [pc, #352]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a57      	ldr	r2, [pc, #348]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80058a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058aa:	f7fd fdb3 	bl	8003414 <HAL_GetTick>
 80058ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b2:	f7fd fdaf 	bl	8003414 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e0e2      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80058c4:	4b4e      	ldr	r3, [pc, #312]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058d0:	4b4b      	ldr	r3, [pc, #300]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80058d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058d4:	4b4b      	ldr	r3, [pc, #300]	; (8005a04 <HAL_RCC_OscConfig+0x78c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058e0:	0112      	lsls	r2, r2, #4
 80058e2:	430a      	orrs	r2, r1
 80058e4:	4946      	ldr	r1, [pc, #280]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	628b      	str	r3, [r1, #40]	; 0x28
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	3b01      	subs	r3, #1
 80058f0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f8:	3b01      	subs	r3, #1
 80058fa:	025b      	lsls	r3, r3, #9
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	3b01      	subs	r3, #1
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005912:	3b01      	subs	r3, #1
 8005914:	061b      	lsls	r3, r3, #24
 8005916:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800591a:	4939      	ldr	r1, [pc, #228]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800591c:	4313      	orrs	r3, r2
 800591e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005920:	4b37      	ldr	r3, [pc, #220]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	4a36      	ldr	r2, [pc, #216]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800592c:	4b34      	ldr	r3, [pc, #208]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800592e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005930:	4b35      	ldr	r3, [pc, #212]	; (8005a08 <HAL_RCC_OscConfig+0x790>)
 8005932:	4013      	ands	r3, r2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005938:	00d2      	lsls	r2, r2, #3
 800593a:	4931      	ldr	r1, [pc, #196]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800593c:	4313      	orrs	r3, r2
 800593e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005940:	4b2f      	ldr	r3, [pc, #188]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005944:	f023 020c 	bic.w	r2, r3, #12
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	492c      	ldr	r1, [pc, #176]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800594e:	4313      	orrs	r3, r2
 8005950:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005952:	4b2b      	ldr	r3, [pc, #172]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	f023 0202 	bic.w	r2, r3, #2
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	4928      	ldr	r1, [pc, #160]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005960:	4313      	orrs	r3, r2
 8005962:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005964:	4b26      	ldr	r3, [pc, #152]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	4a25      	ldr	r2, [pc, #148]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800596a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800596e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005970:	4b23      	ldr	r3, [pc, #140]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800597a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800597c:	4b20      	ldr	r3, [pc, #128]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005982:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005986:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005988:	4b1d      	ldr	r3, [pc, #116]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	4a1c      	ldr	r2, [pc, #112]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005994:	4b1a      	ldr	r3, [pc, #104]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a19      	ldr	r2, [pc, #100]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 800599a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800599e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fd fd38 	bl	8003414 <HAL_GetTick>
 80059a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059a8:	f7fd fd34 	bl	8003414 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e067      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059ba:	4b11      	ldr	r3, [pc, #68]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0f0      	beq.n	80059a8 <HAL_RCC_OscConfig+0x730>
 80059c6:	e05f      	b.n	8005a88 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c8:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a0c      	ldr	r2, [pc, #48]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80059ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d4:	f7fd fd1e 	bl	8003414 <HAL_GetTick>
 80059d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059dc:	f7fd fd1a 	bl	8003414 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e04d      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <HAL_RCC_OscConfig+0x788>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1f0      	bne.n	80059dc <HAL_RCC_OscConfig+0x764>
 80059fa:	e045      	b.n	8005a88 <HAL_RCC_OscConfig+0x810>
 80059fc:	58024800 	.word	0x58024800
 8005a00:	58024400 	.word	0x58024400
 8005a04:	fffffc0c 	.word	0xfffffc0c
 8005a08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005a0c:	4b21      	ldr	r3, [pc, #132]	; (8005a94 <HAL_RCC_OscConfig+0x81c>)
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a12:	4b20      	ldr	r3, [pc, #128]	; (8005a94 <HAL_RCC_OscConfig+0x81c>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d031      	beq.n	8005a84 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f003 0203 	and.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d12a      	bne.n	8005a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	091b      	lsrs	r3, r3, #4
 8005a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d122      	bne.n	8005a84 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d11a      	bne.n	8005a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	0a5b      	lsrs	r3, r3, #9
 8005a52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d111      	bne.n	8005a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	0c1b      	lsrs	r3, r3, #16
 8005a64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d108      	bne.n	8005a84 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	0e1b      	lsrs	r3, r3, #24
 8005a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d001      	beq.n	8005a88 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3730      	adds	r7, #48	; 0x30
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
 8005a92:	bf00      	nop
 8005a94:	58024400 	.word	0x58024400

08005a98 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e19c      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aac:	4b8a      	ldr	r3, [pc, #552]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 030f 	and.w	r3, r3, #15
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d910      	bls.n	8005adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4b87      	ldr	r3, [pc, #540]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 020f 	bic.w	r2, r3, #15
 8005ac2:	4985      	ldr	r1, [pc, #532]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b83      	ldr	r3, [pc, #524]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 030f 	and.w	r3, r3, #15
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e184      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d010      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	4b7b      	ldr	r3, [pc, #492]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d908      	bls.n	8005b0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005af8:	4b78      	ldr	r3, [pc, #480]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	4975      	ldr	r1, [pc, #468]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0308 	and.w	r3, r3, #8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d010      	beq.n	8005b38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	4b70      	ldr	r3, [pc, #448]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d908      	bls.n	8005b38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b26:	4b6d      	ldr	r3, [pc, #436]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	496a      	ldr	r1, [pc, #424]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d010      	beq.n	8005b66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	4b64      	ldr	r3, [pc, #400]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d908      	bls.n	8005b66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b54:	4b61      	ldr	r3, [pc, #388]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	495e      	ldr	r1, [pc, #376]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d010      	beq.n	8005b94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	69da      	ldr	r2, [r3, #28]
 8005b76:	4b59      	ldr	r3, [pc, #356]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d908      	bls.n	8005b94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b82:	4b56      	ldr	r3, [pc, #344]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	4953      	ldr	r1, [pc, #332]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0302 	and.w	r3, r3, #2
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d010      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	4b4d      	ldr	r3, [pc, #308]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 030f 	and.w	r3, r3, #15
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d908      	bls.n	8005bc2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb0:	4b4a      	ldr	r3, [pc, #296]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	f023 020f 	bic.w	r2, r3, #15
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	4947      	ldr	r1, [pc, #284]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d055      	beq.n	8005c7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005bce:	4b43      	ldr	r3, [pc, #268]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	4940      	ldr	r1, [pc, #256]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d107      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005be8:	4b3c      	ldr	r3, [pc, #240]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d121      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0f6      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d107      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005c00:	4b36      	ldr	r3, [pc, #216]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d115      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0ea      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d107      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005c18:	4b30      	ldr	r3, [pc, #192]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0de      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c28:	4b2c      	ldr	r3, [pc, #176]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0d6      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c38:	4b28      	ldr	r3, [pc, #160]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f023 0207 	bic.w	r2, r3, #7
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	4925      	ldr	r1, [pc, #148]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4a:	f7fd fbe3 	bl	8003414 <HAL_GetTick>
 8005c4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c50:	e00a      	b.n	8005c68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c52:	f7fd fbdf 	bl	8003414 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d901      	bls.n	8005c68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e0be      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c68:	4b1c      	ldr	r3, [pc, #112]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d1eb      	bne.n	8005c52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d010      	beq.n	8005ca8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f003 030f 	and.w	r3, r3, #15
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d208      	bcs.n	8005ca8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c96:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f023 020f 	bic.w	r2, r3, #15
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	490e      	ldr	r1, [pc, #56]	; (8005cdc <HAL_RCC_ClockConfig+0x244>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca8:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 030f 	and.w	r3, r3, #15
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d214      	bcs.n	8005ce0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb6:	4b08      	ldr	r3, [pc, #32]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f023 020f 	bic.w	r2, r3, #15
 8005cbe:	4906      	ldr	r1, [pc, #24]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc6:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <HAL_RCC_ClockConfig+0x240>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d005      	beq.n	8005ce0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e086      	b.n	8005de6 <HAL_RCC_ClockConfig+0x34e>
 8005cd8:	52002000 	.word	0x52002000
 8005cdc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d010      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	4b3f      	ldr	r3, [pc, #252]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d208      	bcs.n	8005d0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cfc:	4b3c      	ldr	r3, [pc, #240]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	4939      	ldr	r1, [pc, #228]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d010      	beq.n	8005d3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	4b34      	ldr	r3, [pc, #208]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d208      	bcs.n	8005d3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005d2a:	4b31      	ldr	r3, [pc, #196]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	492e      	ldr	r1, [pc, #184]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0310 	and.w	r3, r3, #16
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d010      	beq.n	8005d6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	699a      	ldr	r2, [r3, #24]
 8005d4c:	4b28      	ldr	r3, [pc, #160]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d208      	bcs.n	8005d6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d58:	4b25      	ldr	r3, [pc, #148]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	699b      	ldr	r3, [r3, #24]
 8005d64:	4922      	ldr	r1, [pc, #136]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d010      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	69da      	ldr	r2, [r3, #28]
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d208      	bcs.n	8005d98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d86:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	4917      	ldr	r1, [pc, #92]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d98:	f000 f834 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	0a1b      	lsrs	r3, r3, #8
 8005da4:	f003 030f 	and.w	r3, r3, #15
 8005da8:	4912      	ldr	r1, [pc, #72]	; (8005df4 <HAL_RCC_ClockConfig+0x35c>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	fa22 f303 	lsr.w	r3, r2, r3
 8005db4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005db6:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <HAL_RCC_ClockConfig+0x358>)
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	4a0d      	ldr	r2, [pc, #52]	; (8005df4 <HAL_RCC_ClockConfig+0x35c>)
 8005dc0:	5cd3      	ldrb	r3, [r2, r3]
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <HAL_RCC_ClockConfig+0x360>)
 8005dce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005dd0:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <HAL_RCC_ClockConfig+0x364>)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <HAL_RCC_ClockConfig+0x368>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fd f90c 	bl	8002ff8 <HAL_InitTick>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3718      	adds	r7, #24
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	58024400 	.word	0x58024400
 8005df4:	08009684 	.word	0x08009684
 8005df8:	2000080c 	.word	0x2000080c
 8005dfc:	20000808 	.word	0x20000808
 8005e00:	20000800 	.word	0x20000800

08005e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b089      	sub	sp, #36	; 0x24
 8005e08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e0a:	4bb3      	ldr	r3, [pc, #716]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e12:	2b18      	cmp	r3, #24
 8005e14:	f200 8155 	bhi.w	80060c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005e18:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1e:	bf00      	nop
 8005e20:	08005e85 	.word	0x08005e85
 8005e24:	080060c3 	.word	0x080060c3
 8005e28:	080060c3 	.word	0x080060c3
 8005e2c:	080060c3 	.word	0x080060c3
 8005e30:	080060c3 	.word	0x080060c3
 8005e34:	080060c3 	.word	0x080060c3
 8005e38:	080060c3 	.word	0x080060c3
 8005e3c:	080060c3 	.word	0x080060c3
 8005e40:	08005eab 	.word	0x08005eab
 8005e44:	080060c3 	.word	0x080060c3
 8005e48:	080060c3 	.word	0x080060c3
 8005e4c:	080060c3 	.word	0x080060c3
 8005e50:	080060c3 	.word	0x080060c3
 8005e54:	080060c3 	.word	0x080060c3
 8005e58:	080060c3 	.word	0x080060c3
 8005e5c:	080060c3 	.word	0x080060c3
 8005e60:	08005eb1 	.word	0x08005eb1
 8005e64:	080060c3 	.word	0x080060c3
 8005e68:	080060c3 	.word	0x080060c3
 8005e6c:	080060c3 	.word	0x080060c3
 8005e70:	080060c3 	.word	0x080060c3
 8005e74:	080060c3 	.word	0x080060c3
 8005e78:	080060c3 	.word	0x080060c3
 8005e7c:	080060c3 	.word	0x080060c3
 8005e80:	08005eb7 	.word	0x08005eb7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e84:	4b94      	ldr	r3, [pc, #592]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d009      	beq.n	8005ea4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e90:	4b91      	ldr	r3, [pc, #580]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	08db      	lsrs	r3, r3, #3
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	4a90      	ldr	r2, [pc, #576]	; (80060dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005ea2:	e111      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005ea4:	4b8d      	ldr	r3, [pc, #564]	; (80060dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ea6:	61bb      	str	r3, [r7, #24]
    break;
 8005ea8:	e10e      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005eaa:	4b8d      	ldr	r3, [pc, #564]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005eac:	61bb      	str	r3, [r7, #24]
    break;
 8005eae:	e10b      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005eb0:	4b8c      	ldr	r3, [pc, #560]	; (80060e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005eb2:	61bb      	str	r3, [r7, #24]
    break;
 8005eb4:	e108      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005eb6:	4b88      	ldr	r3, [pc, #544]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	f003 0303 	and.w	r3, r3, #3
 8005ebe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ec0:	4b85      	ldr	r3, [pc, #532]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	091b      	lsrs	r3, r3, #4
 8005ec6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005ecc:	4b82      	ldr	r3, [pc, #520]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005ed6:	4b80      	ldr	r3, [pc, #512]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eda:	08db      	lsrs	r3, r3, #3
 8005edc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	fb02 f303 	mul.w	r3, r2, r3
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 80e1 	beq.w	80060bc <HAL_RCC_GetSysClockFreq+0x2b8>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	f000 8083 	beq.w	8006008 <HAL_RCC_GetSysClockFreq+0x204>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	f200 80a1 	bhi.w	800604c <HAL_RCC_GetSysClockFreq+0x248>
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d003      	beq.n	8005f18 <HAL_RCC_GetSysClockFreq+0x114>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d056      	beq.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005f16:	e099      	b.n	800604c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f18:	4b6f      	ldr	r3, [pc, #444]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02d      	beq.n	8005f80 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f24:	4b6c      	ldr	r3, [pc, #432]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	08db      	lsrs	r3, r3, #3
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	4a6b      	ldr	r2, [pc, #428]	; (80060dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
 8005f34:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4e:	4b62      	ldr	r3, [pc, #392]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f62:	eddf 5a61 	vldr	s11, [pc, #388]	; 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f7e:	e087      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80060ec <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f92:	4b51      	ldr	r3, [pc, #324]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fa6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc2:	e065      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80060f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd6:	4b40      	ldr	r3, [pc, #256]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006006:	e043      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	ee07 3a90 	vmov	s15, r3
 800600e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006012:	eddf 6a38 	vldr	s13, [pc, #224]	; 80060f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601a:	4b2f      	ldr	r3, [pc, #188]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602a:	ed97 6a02 	vldr	s12, [r7, #8]
 800602e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800604a:	e021      	b.n	8006090 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	ee07 3a90 	vmov	s15, r3
 8006052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006056:	eddf 6a26 	vldr	s13, [pc, #152]	; 80060f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800605a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605e:	4b1e      	ldr	r3, [pc, #120]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006072:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80060e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800607a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800608a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800608e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006090:	4b11      	ldr	r3, [pc, #68]	; (80060d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	0a5b      	lsrs	r3, r3, #9
 8006096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800609a:	3301      	adds	r3, #1
 800609c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b4:	ee17 3a90 	vmov	r3, s15
 80060b8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80060ba:	e005      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80060bc:	2300      	movs	r3, #0
 80060be:	61bb      	str	r3, [r7, #24]
    break;
 80060c0:	e002      	b.n	80060c8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80060c2:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80060c4:	61bb      	str	r3, [r7, #24]
    break;
 80060c6:	bf00      	nop
  }

  return sysclockfreq;
 80060c8:	69bb      	ldr	r3, [r7, #24]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3724      	adds	r7, #36	; 0x24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	58024400 	.word	0x58024400
 80060dc:	03d09000 	.word	0x03d09000
 80060e0:	003d0900 	.word	0x003d0900
 80060e4:	007a1200 	.word	0x007a1200
 80060e8:	46000000 	.word	0x46000000
 80060ec:	4c742400 	.word	0x4c742400
 80060f0:	4a742400 	.word	0x4a742400
 80060f4:	4af42400 	.word	0x4af42400

080060f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060fe:	f7ff fe81 	bl	8005e04 <HAL_RCC_GetSysClockFreq>
 8006102:	4602      	mov	r2, r0
 8006104:	4b10      	ldr	r3, [pc, #64]	; (8006148 <HAL_RCC_GetHCLKFreq+0x50>)
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	0a1b      	lsrs	r3, r3, #8
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	490f      	ldr	r1, [pc, #60]	; (800614c <HAL_RCC_GetHCLKFreq+0x54>)
 8006110:	5ccb      	ldrb	r3, [r1, r3]
 8006112:	f003 031f 	and.w	r3, r3, #31
 8006116:	fa22 f303 	lsr.w	r3, r2, r3
 800611a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800611c:	4b0a      	ldr	r3, [pc, #40]	; (8006148 <HAL_RCC_GetHCLKFreq+0x50>)
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	4a09      	ldr	r2, [pc, #36]	; (800614c <HAL_RCC_GetHCLKFreq+0x54>)
 8006126:	5cd3      	ldrb	r3, [r2, r3]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	fa22 f303 	lsr.w	r3, r2, r3
 8006132:	4a07      	ldr	r2, [pc, #28]	; (8006150 <HAL_RCC_GetHCLKFreq+0x58>)
 8006134:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006136:	4a07      	ldr	r2, [pc, #28]	; (8006154 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800613c:	4b04      	ldr	r3, [pc, #16]	; (8006150 <HAL_RCC_GetHCLKFreq+0x58>)
 800613e:	681b      	ldr	r3, [r3, #0]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	58024400 	.word	0x58024400
 800614c:	08009684 	.word	0x08009684
 8006150:	2000080c 	.word	0x2000080c
 8006154:	20000808 	.word	0x20000808

08006158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800615c:	f7ff ffcc 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 8006160:	4602      	mov	r2, r0
 8006162:	4b06      	ldr	r3, [pc, #24]	; (800617c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006164:	69db      	ldr	r3, [r3, #28]
 8006166:	091b      	lsrs	r3, r3, #4
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	4904      	ldr	r1, [pc, #16]	; (8006180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800616e:	5ccb      	ldrb	r3, [r1, r3]
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006178:	4618      	mov	r0, r3
 800617a:	bd80      	pop	{r7, pc}
 800617c:	58024400 	.word	0x58024400
 8006180:	08009684 	.word	0x08009684

08006184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006188:	f7ff ffb6 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 800618c:	4602      	mov	r2, r0
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	4904      	ldr	r1, [pc, #16]	; (80061ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800619a:	5ccb      	ldrb	r3, [r1, r3]
 800619c:	f003 031f 	and.w	r3, r3, #31
 80061a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	58024400 	.word	0x58024400
 80061ac:	08009684 	.word	0x08009684

080061b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	223f      	movs	r2, #63	; 0x3f
 80061be:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80061c0:	4b1a      	ldr	r3, [pc, #104]	; (800622c <HAL_RCC_GetClockConfig+0x7c>)
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	f003 0207 	and.w	r2, r3, #7
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80061cc:	4b17      	ldr	r3, [pc, #92]	; (800622c <HAL_RCC_GetClockConfig+0x7c>)
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80061d8:	4b14      	ldr	r3, [pc, #80]	; (800622c <HAL_RCC_GetClockConfig+0x7c>)
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	f003 020f 	and.w	r2, r3, #15
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80061e4:	4b11      	ldr	r3, [pc, #68]	; (800622c <HAL_RCC_GetClockConfig+0x7c>)
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80061f0:	4b0e      	ldr	r3, [pc, #56]	; (800622c <HAL_RCC_GetClockConfig+0x7c>)
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80061fc:	4b0b      	ldr	r3, [pc, #44]	; (800622c <HAL_RCC_GetClockConfig+0x7c>)
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006208:	4b08      	ldr	r3, [pc, #32]	; (800622c <HAL_RCC_GetClockConfig+0x7c>)
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006214:	4b06      	ldr	r3, [pc, #24]	; (8006230 <HAL_RCC_GetClockConfig+0x80>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 020f 	and.w	r2, r3, #15
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	601a      	str	r2, [r3, #0]
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	58024400 	.word	0x58024400
 8006230:	52002000 	.word	0x52002000

08006234 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800623c:	2300      	movs	r3, #0
 800623e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006240:	2300      	movs	r3, #0
 8006242:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d03f      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006254:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006258:	d02a      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800625a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800625e:	d824      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006264:	d018      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006266:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800626a:	d81e      	bhi.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d003      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006274:	d007      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006276:	e018      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006278:	4bab      	ldr	r3, [pc, #684]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	4aaa      	ldr	r2, [pc, #680]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800627e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006282:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006284:	e015      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	3304      	adds	r3, #4
 800628a:	2102      	movs	r1, #2
 800628c:	4618      	mov	r0, r3
 800628e:	f001 f9bf 	bl	8007610 <RCCEx_PLL2_Config>
 8006292:	4603      	mov	r3, r0
 8006294:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006296:	e00c      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3324      	adds	r3, #36	; 0x24
 800629c:	2102      	movs	r1, #2
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 fa68 	bl	8007774 <RCCEx_PLL3_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80062a8:	e003      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	75fb      	strb	r3, [r7, #23]
      break;
 80062ae:	e000      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80062b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80062b8:	4b9b      	ldr	r3, [pc, #620]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c4:	4998      	ldr	r1, [pc, #608]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	650b      	str	r3, [r1, #80]	; 0x50
 80062ca:	e001      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062cc:	7dfb      	ldrb	r3, [r7, #23]
 80062ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d03d      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d826      	bhi.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80062e4:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80062e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ea:	bf00      	nop
 80062ec:	08006301 	.word	0x08006301
 80062f0:	0800630f 	.word	0x0800630f
 80062f4:	08006321 	.word	0x08006321
 80062f8:	08006339 	.word	0x08006339
 80062fc:	08006339 	.word	0x08006339
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006300:	4b89      	ldr	r3, [pc, #548]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	4a88      	ldr	r2, [pc, #544]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800630a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800630c:	e015      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3304      	adds	r3, #4
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f001 f97b 	bl	8007610 <RCCEx_PLL2_Config>
 800631a:	4603      	mov	r3, r0
 800631c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800631e:	e00c      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3324      	adds	r3, #36	; 0x24
 8006324:	2100      	movs	r1, #0
 8006326:	4618      	mov	r0, r3
 8006328:	f001 fa24 	bl	8007774 <RCCEx_PLL3_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006330:	e003      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	75fb      	strb	r3, [r7, #23]
      break;
 8006336:	e000      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800633a:	7dfb      	ldrb	r3, [r7, #23]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d109      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006340:	4b79      	ldr	r3, [pc, #484]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006344:	f023 0207 	bic.w	r2, r3, #7
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634c:	4976      	ldr	r1, [pc, #472]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800634e:	4313      	orrs	r3, r2
 8006350:	650b      	str	r3, [r1, #80]	; 0x50
 8006352:	e001      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006360:	2b00      	cmp	r3, #0
 8006362:	d042      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636c:	d02b      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800636e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006372:	d825      	bhi.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006374:	2bc0      	cmp	r3, #192	; 0xc0
 8006376:	d028      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006378:	2bc0      	cmp	r3, #192	; 0xc0
 800637a:	d821      	bhi.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800637c:	2b80      	cmp	r3, #128	; 0x80
 800637e:	d016      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006380:	2b80      	cmp	r3, #128	; 0x80
 8006382:	d81d      	bhi.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d007      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800638c:	e018      	b.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638e:	4b66      	ldr	r3, [pc, #408]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	4a65      	ldr	r2, [pc, #404]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006398:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800639a:	e017      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3304      	adds	r3, #4
 80063a0:	2100      	movs	r1, #0
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 f934 	bl	8007610 <RCCEx_PLL2_Config>
 80063a8:	4603      	mov	r3, r0
 80063aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063ac:	e00e      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3324      	adds	r3, #36	; 0x24
 80063b2:	2100      	movs	r1, #0
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 f9dd 	bl	8007774 <RCCEx_PLL3_Config>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80063be:	e005      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	75fb      	strb	r3, [r7, #23]
      break;
 80063c4:	e002      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80063c6:	bf00      	nop
 80063c8:	e000      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80063ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063cc:	7dfb      	ldrb	r3, [r7, #23]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80063d2:	4b55      	ldr	r3, [pc, #340]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063de:	4952      	ldr	r1, [pc, #328]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80063e0:	4313      	orrs	r3, r2
 80063e2:	650b      	str	r3, [r1, #80]	; 0x50
 80063e4:	e001      	b.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d049      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006400:	d030      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006402:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006406:	d82a      	bhi.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006408:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800640c:	d02c      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800640e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006412:	d824      	bhi.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006418:	d018      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800641a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800641e:	d81e      	bhi.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006424:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006428:	d007      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800642a:	e018      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800642c:	4b3e      	ldr	r3, [pc, #248]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	4a3d      	ldr	r2, [pc, #244]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006436:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006438:	e017      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3304      	adds	r3, #4
 800643e:	2100      	movs	r1, #0
 8006440:	4618      	mov	r0, r3
 8006442:	f001 f8e5 	bl	8007610 <RCCEx_PLL2_Config>
 8006446:	4603      	mov	r3, r0
 8006448:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800644a:	e00e      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	3324      	adds	r3, #36	; 0x24
 8006450:	2100      	movs	r1, #0
 8006452:	4618      	mov	r0, r3
 8006454:	f001 f98e 	bl	8007774 <RCCEx_PLL3_Config>
 8006458:	4603      	mov	r3, r0
 800645a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800645c:	e005      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	75fb      	strb	r3, [r7, #23]
      break;
 8006462:	e002      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006470:	4b2d      	ldr	r3, [pc, #180]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006474:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800647e:	492a      	ldr	r1, [pc, #168]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006480:	4313      	orrs	r3, r2
 8006482:	658b      	str	r3, [r1, #88]	; 0x58
 8006484:	e001      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006492:	2b00      	cmp	r3, #0
 8006494:	d04c      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800649c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064a0:	d030      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80064a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064a6:	d82a      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80064a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064ac:	d02c      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80064ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80064b2:	d824      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80064b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064b8:	d018      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80064ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064be:	d81e      	bhi.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80064c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064c8:	d007      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80064ca:	e018      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064cc:	4b16      	ldr	r3, [pc, #88]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	4a15      	ldr	r2, [pc, #84]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064d8:	e017      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3304      	adds	r3, #4
 80064de:	2100      	movs	r1, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 f895 	bl	8007610 <RCCEx_PLL2_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064ea:	e00e      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3324      	adds	r3, #36	; 0x24
 80064f0:	2100      	movs	r1, #0
 80064f2:	4618      	mov	r0, r3
 80064f4:	f001 f93e 	bl	8007774 <RCCEx_PLL3_Config>
 80064f8:	4603      	mov	r3, r0
 80064fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064fc:	e005      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
      break;
 8006502:	e002      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006504:	bf00      	nop
 8006506:	e000      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006508:	bf00      	nop
    }

    if(ret == HAL_OK)
 800650a:	7dfb      	ldrb	r3, [r7, #23]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10d      	bne.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006514:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800651e:	4902      	ldr	r1, [pc, #8]	; (8006528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006520:	4313      	orrs	r3, r2
 8006522:	658b      	str	r3, [r1, #88]	; 0x58
 8006524:	e004      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006526:	bf00      	nop
 8006528:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d032      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006540:	2b30      	cmp	r3, #48	; 0x30
 8006542:	d01c      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006544:	2b30      	cmp	r3, #48	; 0x30
 8006546:	d817      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006548:	2b20      	cmp	r3, #32
 800654a:	d00c      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800654c:	2b20      	cmp	r3, #32
 800654e:	d813      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d016      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006554:	2b10      	cmp	r3, #16
 8006556:	d10f      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006558:	4baf      	ldr	r3, [pc, #700]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	4aae      	ldr	r2, [pc, #696]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800655e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006562:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006564:	e00e      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	2102      	movs	r1, #2
 800656c:	4618      	mov	r0, r3
 800656e:	f001 f84f 	bl	8007610 <RCCEx_PLL2_Config>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006576:	e005      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	75fb      	strb	r3, [r7, #23]
      break;
 800657c:	e002      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d109      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800658a:	4ba3      	ldr	r3, [pc, #652]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800658c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800658e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006596:	49a0      	ldr	r1, [pc, #640]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006598:	4313      	orrs	r3, r2
 800659a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800659c:	e001      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659e:	7dfb      	ldrb	r3, [r7, #23]
 80065a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d047      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065b6:	d030      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80065b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065bc:	d82a      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80065be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065c2:	d02c      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80065c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80065c8:	d824      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80065ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ce:	d018      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80065d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d4:	d81e      	bhi.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80065da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065de:	d007      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80065e0:	e018      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e2:	4b8d      	ldr	r3, [pc, #564]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e6:	4a8c      	ldr	r2, [pc, #560]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80065e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80065ee:	e017      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3304      	adds	r3, #4
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 f80a 	bl	8007610 <RCCEx_PLL2_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006600:	e00e      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3324      	adds	r3, #36	; 0x24
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f001 f8b3 	bl	8007774 <RCCEx_PLL3_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006612:	e005      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	75fb      	strb	r3, [r7, #23]
      break;
 8006618:	e002      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800661a:	bf00      	nop
 800661c:	e000      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800661e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006620:	7dfb      	ldrb	r3, [r7, #23]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d109      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006626:	4b7c      	ldr	r3, [pc, #496]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800662a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006632:	4979      	ldr	r1, [pc, #484]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006634:	4313      	orrs	r3, r2
 8006636:	650b      	str	r3, [r1, #80]	; 0x50
 8006638:	e001      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	7dfb      	ldrb	r3, [r7, #23]
 800663c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d049      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800664e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006652:	d02e      	beq.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006658:	d828      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 800665a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800665e:	d02a      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006660:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006664:	d822      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800666a:	d026      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x486>
 800666c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006670:	d81c      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006676:	d010      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800667c:	d816      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d01d      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006686:	d111      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3304      	adds	r3, #4
 800668c:	2101      	movs	r1, #1
 800668e:	4618      	mov	r0, r3
 8006690:	f000 ffbe 	bl	8007610 <RCCEx_PLL2_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006698:	e012      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3324      	adds	r3, #36	; 0x24
 800669e:	2101      	movs	r1, #1
 80066a0:	4618      	mov	r0, r3
 80066a2:	f001 f867 	bl	8007774 <RCCEx_PLL3_Config>
 80066a6:	4603      	mov	r3, r0
 80066a8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80066aa:	e009      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	75fb      	strb	r3, [r7, #23]
      break;
 80066b0:	e006      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80066b2:	bf00      	nop
 80066b4:	e004      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80066b6:	bf00      	nop
 80066b8:	e002      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80066ba:	bf00      	nop
 80066bc:	e000      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80066be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80066c6:	4b54      	ldr	r3, [pc, #336]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d2:	4951      	ldr	r1, [pc, #324]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	650b      	str	r3, [r1, #80]	; 0x50
 80066d8:	e001      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066da:	7dfb      	ldrb	r3, [r7, #23]
 80066dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d04b      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066f4:	d02e      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80066f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066fa:	d828      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80066fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006700:	d02a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006702:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006706:	d822      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006708:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800670c:	d026      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800670e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006712:	d81c      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006718:	d010      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800671a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800671e:	d816      	bhi.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01d      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006724:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006728:	d111      	bne.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	3304      	adds	r3, #4
 800672e:	2101      	movs	r1, #1
 8006730:	4618      	mov	r0, r3
 8006732:	f000 ff6d 	bl	8007610 <RCCEx_PLL2_Config>
 8006736:	4603      	mov	r3, r0
 8006738:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800673a:	e012      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3324      	adds	r3, #36	; 0x24
 8006740:	2101      	movs	r1, #1
 8006742:	4618      	mov	r0, r3
 8006744:	f001 f816 	bl	8007774 <RCCEx_PLL3_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800674c:	e009      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	75fb      	strb	r3, [r7, #23]
      break;
 8006752:	e006      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006754:	bf00      	nop
 8006756:	e004      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006758:	bf00      	nop
 800675a:	e002      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800675c:	bf00      	nop
 800675e:	e000      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006768:	4b2b      	ldr	r3, [pc, #172]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800676a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006776:	4928      	ldr	r1, [pc, #160]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006778:	4313      	orrs	r3, r2
 800677a:	658b      	str	r3, [r1, #88]	; 0x58
 800677c:	e001      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677e:	7dfb      	ldrb	r3, [r7, #23]
 8006780:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d02f      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006796:	d00e      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800679c:	d814      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d015      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80067a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067a6:	d10f      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067a8:	4b1b      	ldr	r3, [pc, #108]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067b4:	e00c      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3304      	adds	r3, #4
 80067ba:	2101      	movs	r1, #1
 80067bc:	4618      	mov	r0, r3
 80067be:	f000 ff27 	bl	8007610 <RCCEx_PLL2_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80067c6:	e003      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
      break;
 80067cc:	e000      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80067ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d109      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067d6:	4b10      	ldr	r3, [pc, #64]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e2:	490d      	ldr	r1, [pc, #52]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	650b      	str	r3, [r1, #80]	; 0x50
 80067e8:	e001      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ea:	7dfb      	ldrb	r3, [r7, #23]
 80067ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d033      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d81c      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	08006843 	.word	0x08006843
 800680c:	0800681d 	.word	0x0800681d
 8006810:	0800682b 	.word	0x0800682b
 8006814:	08006843 	.word	0x08006843
 8006818:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800681c:	4bb8      	ldr	r3, [pc, #736]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	4ab7      	ldr	r2, [pc, #732]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006826:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006828:	e00c      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3304      	adds	r3, #4
 800682e:	2102      	movs	r1, #2
 8006830:	4618      	mov	r0, r3
 8006832:	f000 feed 	bl	8007610 <RCCEx_PLL2_Config>
 8006836:	4603      	mov	r3, r0
 8006838:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800683a:	e003      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	75fb      	strb	r3, [r7, #23]
      break;
 8006840:	e000      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006844:	7dfb      	ldrb	r3, [r7, #23]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d109      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800684a:	4bad      	ldr	r3, [pc, #692]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800684c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800684e:	f023 0203 	bic.w	r2, r3, #3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006856:	49aa      	ldr	r1, [pc, #680]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006858:	4313      	orrs	r3, r2
 800685a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800685c:	e001      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800685e:	7dfb      	ldrb	r3, [r7, #23]
 8006860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800686a:	2b00      	cmp	r3, #0
 800686c:	f000 8086 	beq.w	800697c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006870:	4ba4      	ldr	r3, [pc, #656]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4aa3      	ldr	r2, [pc, #652]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800687a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800687c:	f7fc fdca 	bl	8003414 <HAL_GetTick>
 8006880:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006882:	e009      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006884:	f7fc fdc6 	bl	8003414 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b64      	cmp	r3, #100	; 0x64
 8006890:	d902      	bls.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	75fb      	strb	r3, [r7, #23]
        break;
 8006896:	e005      	b.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006898:	4b9a      	ldr	r3, [pc, #616]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0ef      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d166      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80068aa:	4b95      	ldr	r3, [pc, #596]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068b4:	4053      	eors	r3, r2
 80068b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d013      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068be:	4b90      	ldr	r3, [pc, #576]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068c8:	4b8d      	ldr	r3, [pc, #564]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068cc:	4a8c      	ldr	r2, [pc, #560]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068d4:	4b8a      	ldr	r3, [pc, #552]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d8:	4a89      	ldr	r2, [pc, #548]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80068e0:	4a87      	ldr	r2, [pc, #540]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f0:	d115      	bne.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f2:	f7fc fd8f 	bl	8003414 <HAL_GetTick>
 80068f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80068f8:	e00b      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fa:	f7fc fd8b 	bl	8003414 <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	f241 3288 	movw	r2, #5000	; 0x1388
 8006908:	4293      	cmp	r3, r2
 800690a:	d902      	bls.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	75fb      	strb	r3, [r7, #23]
            break;
 8006910:	e005      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006912:	4b7b      	ldr	r3, [pc, #492]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0ed      	beq.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d126      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800692a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800692e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006932:	d10d      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006934:	4b72      	ldr	r3, [pc, #456]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006942:	0919      	lsrs	r1, r3, #4
 8006944:	4b70      	ldr	r3, [pc, #448]	; (8006b08 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006946:	400b      	ands	r3, r1
 8006948:	496d      	ldr	r1, [pc, #436]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800694a:	4313      	orrs	r3, r2
 800694c:	610b      	str	r3, [r1, #16]
 800694e:	e005      	b.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006950:	4b6b      	ldr	r3, [pc, #428]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	4a6a      	ldr	r2, [pc, #424]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006956:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800695a:	6113      	str	r3, [r2, #16]
 800695c:	4b68      	ldr	r3, [pc, #416]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800695e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800696a:	4965      	ldr	r1, [pc, #404]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800696c:	4313      	orrs	r3, r2
 800696e:	670b      	str	r3, [r1, #112]	; 0x70
 8006970:	e004      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006972:	7dfb      	ldrb	r3, [r7, #23]
 8006974:	75bb      	strb	r3, [r7, #22]
 8006976:	e001      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006978:	7dfb      	ldrb	r3, [r7, #23]
 800697a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d07e      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800698c:	2b28      	cmp	r3, #40	; 0x28
 800698e:	d867      	bhi.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	08006a67 	.word	0x08006a67
 800699c:	08006a61 	.word	0x08006a61
 80069a0:	08006a61 	.word	0x08006a61
 80069a4:	08006a61 	.word	0x08006a61
 80069a8:	08006a61 	.word	0x08006a61
 80069ac:	08006a61 	.word	0x08006a61
 80069b0:	08006a61 	.word	0x08006a61
 80069b4:	08006a61 	.word	0x08006a61
 80069b8:	08006a3d 	.word	0x08006a3d
 80069bc:	08006a61 	.word	0x08006a61
 80069c0:	08006a61 	.word	0x08006a61
 80069c4:	08006a61 	.word	0x08006a61
 80069c8:	08006a61 	.word	0x08006a61
 80069cc:	08006a61 	.word	0x08006a61
 80069d0:	08006a61 	.word	0x08006a61
 80069d4:	08006a61 	.word	0x08006a61
 80069d8:	08006a4f 	.word	0x08006a4f
 80069dc:	08006a61 	.word	0x08006a61
 80069e0:	08006a61 	.word	0x08006a61
 80069e4:	08006a61 	.word	0x08006a61
 80069e8:	08006a61 	.word	0x08006a61
 80069ec:	08006a61 	.word	0x08006a61
 80069f0:	08006a61 	.word	0x08006a61
 80069f4:	08006a61 	.word	0x08006a61
 80069f8:	08006a67 	.word	0x08006a67
 80069fc:	08006a61 	.word	0x08006a61
 8006a00:	08006a61 	.word	0x08006a61
 8006a04:	08006a61 	.word	0x08006a61
 8006a08:	08006a61 	.word	0x08006a61
 8006a0c:	08006a61 	.word	0x08006a61
 8006a10:	08006a61 	.word	0x08006a61
 8006a14:	08006a61 	.word	0x08006a61
 8006a18:	08006a67 	.word	0x08006a67
 8006a1c:	08006a61 	.word	0x08006a61
 8006a20:	08006a61 	.word	0x08006a61
 8006a24:	08006a61 	.word	0x08006a61
 8006a28:	08006a61 	.word	0x08006a61
 8006a2c:	08006a61 	.word	0x08006a61
 8006a30:	08006a61 	.word	0x08006a61
 8006a34:	08006a61 	.word	0x08006a61
 8006a38:	08006a67 	.word	0x08006a67
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	3304      	adds	r3, #4
 8006a40:	2101      	movs	r1, #1
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fde4 	bl	8007610 <RCCEx_PLL2_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a4c:	e00c      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3324      	adds	r3, #36	; 0x24
 8006a52:	2101      	movs	r1, #1
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fe8d 	bl	8007774 <RCCEx_PLL3_Config>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006a5e:	e003      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	75fb      	strb	r3, [r7, #23]
      break;
 8006a64:	e000      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a68:	7dfb      	ldrb	r3, [r7, #23]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006a6e:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a72:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a7a:	4921      	ldr	r1, [pc, #132]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	654b      	str	r3, [r1, #84]	; 0x54
 8006a80:	e001      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d03e      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	d820      	bhi.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006a9a:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006ae3 	.word	0x08006ae3
 8006aa4:	08006ab9 	.word	0x08006ab9
 8006aa8:	08006acb 	.word	0x08006acb
 8006aac:	08006ae3 	.word	0x08006ae3
 8006ab0:	08006ae3 	.word	0x08006ae3
 8006ab4:	08006ae3 	.word	0x08006ae3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	3304      	adds	r3, #4
 8006abc:	2101      	movs	r1, #1
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fda6 	bl	8007610 <RCCEx_PLL2_Config>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006ac8:	e00c      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	3324      	adds	r3, #36	; 0x24
 8006ace:	2101      	movs	r1, #1
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f000 fe4f 	bl	8007774 <RCCEx_PLL3_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006ada:	e003      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	75fb      	strb	r3, [r7, #23]
      break;
 8006ae0:	e000      	b.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006ae2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d110      	bne.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aee:	f023 0207 	bic.w	r2, r3, #7
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af6:	4902      	ldr	r1, [pc, #8]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	654b      	str	r3, [r1, #84]	; 0x54
 8006afc:	e008      	b.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006afe:	bf00      	nop
 8006b00:	58024400 	.word	0x58024400
 8006b04:	58024800 	.word	0x58024800
 8006b08:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0c:	7dfb      	ldrb	r3, [r7, #23]
 8006b0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d039      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d820      	bhi.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006b26:	a201      	add	r2, pc, #4	; (adr r2, 8006b2c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2c:	08006b6f 	.word	0x08006b6f
 8006b30:	08006b45 	.word	0x08006b45
 8006b34:	08006b57 	.word	0x08006b57
 8006b38:	08006b6f 	.word	0x08006b6f
 8006b3c:	08006b6f 	.word	0x08006b6f
 8006b40:	08006b6f 	.word	0x08006b6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	3304      	adds	r3, #4
 8006b48:	2101      	movs	r1, #1
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fd60 	bl	8007610 <RCCEx_PLL2_Config>
 8006b50:	4603      	mov	r3, r0
 8006b52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b54:	e00c      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	3324      	adds	r3, #36	; 0x24
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fe09 	bl	8007774 <RCCEx_PLL3_Config>
 8006b62:	4603      	mov	r3, r0
 8006b64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006b66:	e003      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6c:	e000      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006b6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10a      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b76:	4bb7      	ldr	r3, [pc, #732]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7a:	f023 0207 	bic.w	r2, r3, #7
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b84:	49b3      	ldr	r1, [pc, #716]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	658b      	str	r3, [r1, #88]	; 0x58
 8006b8a:	e001      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d04b      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ba6:	d02e      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006ba8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bac:	d828      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb2:	d02a      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bb8:	d822      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006bba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bbe:	d026      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006bc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006bc4:	d81c      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006bc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bca:	d010      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bd0:	d816      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d01d      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bda:	d111      	bne.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3304      	adds	r3, #4
 8006be0:	2100      	movs	r1, #0
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fd14 	bl	8007610 <RCCEx_PLL2_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bec:	e012      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3324      	adds	r3, #36	; 0x24
 8006bf2:	2102      	movs	r1, #2
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fdbd 	bl	8007774 <RCCEx_PLL3_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006bfe:	e009      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
      break;
 8006c04:	e006      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c06:	bf00      	nop
 8006c08:	e004      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c0a:	bf00      	nop
 8006c0c:	e002      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c0e:	bf00      	nop
 8006c10:	e000      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006c12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c1a:	4b8e      	ldr	r3, [pc, #568]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c28:	498a      	ldr	r1, [pc, #552]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	654b      	str	r3, [r1, #84]	; 0x54
 8006c2e:	e001      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d04b      	beq.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c46:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c4a:	d02e      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006c4c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c50:	d828      	bhi.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c56:	d02a      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c5c:	d822      	bhi.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c62:	d026      	beq.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006c64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c68:	d81c      	bhi.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c6e:	d010      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c74:	d816      	bhi.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d01d      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7e:	d111      	bne.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3304      	adds	r3, #4
 8006c84:	2100      	movs	r1, #0
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fcc2 	bl	8007610 <RCCEx_PLL2_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006c90:	e012      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3324      	adds	r3, #36	; 0x24
 8006c96:	2102      	movs	r1, #2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 fd6b 	bl	8007774 <RCCEx_PLL3_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006ca2:	e009      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca8:	e006      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006caa:	bf00      	nop
 8006cac:	e004      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006cae:	bf00      	nop
 8006cb0:	e002      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006cb2:	bf00      	nop
 8006cb4:	e000      	b.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cb8:	7dfb      	ldrb	r3, [r7, #23]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cbe:	4b65      	ldr	r3, [pc, #404]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ccc:	4961      	ldr	r1, [pc, #388]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	658b      	str	r3, [r1, #88]	; 0x58
 8006cd2:	e001      	b.n	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd4:	7dfb      	ldrb	r3, [r7, #23]
 8006cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d04b      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006cee:	d02e      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006cf0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006cf4:	d828      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cfa:	d02a      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006cfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d00:	d822      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d02:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d06:	d026      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006d08:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d0c:	d81c      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d12:	d010      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006d14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d18:	d816      	bhi.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d01d      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d22:	d111      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3304      	adds	r3, #4
 8006d28:	2100      	movs	r1, #0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fc70 	bl	8007610 <RCCEx_PLL2_Config>
 8006d30:	4603      	mov	r3, r0
 8006d32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d34:	e012      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3324      	adds	r3, #36	; 0x24
 8006d3a:	2102      	movs	r1, #2
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fd19 	bl	8007774 <RCCEx_PLL3_Config>
 8006d42:	4603      	mov	r3, r0
 8006d44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d46:	e009      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d4c:	e006      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d4e:	bf00      	nop
 8006d50:	e004      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d52:	bf00      	nop
 8006d54:	e002      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d56:	bf00      	nop
 8006d58:	e000      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d5c:	7dfb      	ldrb	r3, [r7, #23]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10a      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d62:	4b3c      	ldr	r3, [pc, #240]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d70:	4938      	ldr	r1, [pc, #224]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	658b      	str	r3, [r1, #88]	; 0x58
 8006d76:	e001      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01a      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d92:	d10a      	bne.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	3324      	adds	r3, #36	; 0x24
 8006d98:	2102      	movs	r1, #2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f000 fcea 	bl	8007774 <RCCEx_PLL3_Config>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006daa:	4b2a      	ldr	r3, [pc, #168]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006db8:	4926      	ldr	r1, [pc, #152]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0310 	and.w	r3, r3, #16
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01a      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dd4:	d10a      	bne.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3324      	adds	r3, #36	; 0x24
 8006dda:	2102      	movs	r1, #2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fcc9 	bl	8007774 <RCCEx_PLL3_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dec:	4b19      	ldr	r3, [pc, #100]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dfa:	4916      	ldr	r1, [pc, #88]	; (8006e54 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d036      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e16:	d01f      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006e18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e1c:	d817      	bhi.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d003      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e26:	d009      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006e28:	e011      	b.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	2100      	movs	r1, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fbed 	bl	8007610 <RCCEx_PLL2_Config>
 8006e36:	4603      	mov	r3, r0
 8006e38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e3a:	e00e      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3324      	adds	r3, #36	; 0x24
 8006e40:	2102      	movs	r1, #2
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fc96 	bl	8007774 <RCCEx_PLL3_Config>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e4c:	e005      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	75fb      	strb	r3, [r7, #23]
      break;
 8006e52:	e002      	b.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006e54:	58024400 	.word	0x58024400
      break;
 8006e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10a      	bne.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e60:	4b8b      	ldr	r3, [pc, #556]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e6e:	4988      	ldr	r1, [pc, #544]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	658b      	str	r3, [r1, #88]	; 0x58
 8006e74:	e001      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d033      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e90:	d01c      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8006e92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e96:	d816      	bhi.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8006e98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e9c:	d003      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8006e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ea2:	d007      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8006ea4:	e00f      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea6:	4b7a      	ldr	r3, [pc, #488]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eaa:	4a79      	ldr	r2, [pc, #484]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006eb2:	e00c      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3324      	adds	r3, #36	; 0x24
 8006eb8:	2101      	movs	r1, #1
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f000 fc5a 	bl	8007774 <RCCEx_PLL3_Config>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ec4:	e003      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eca:	e000      	b.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8006ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ed4:	4b6e      	ldr	r3, [pc, #440]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee2:	496b      	ldr	r1, [pc, #428]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ee8:	e001      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d029      	beq.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8006f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f06:	d007      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8006f08:	e00f      	b.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f0a:	4b61      	ldr	r3, [pc, #388]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	4a60      	ldr	r2, [pc, #384]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f16:	e00b      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	2102      	movs	r1, #2
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 fb76 	bl	8007610 <RCCEx_PLL2_Config>
 8006f24:	4603      	mov	r3, r0
 8006f26:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f28:	e002      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d109      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f36:	4b56      	ldr	r3, [pc, #344]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f42:	4953      	ldr	r1, [pc, #332]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006f44:	4313      	orrs	r3, r2
 8006f46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f48:	e001      	b.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4a:	7dfb      	ldrb	r3, [r7, #23]
 8006f4c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00a      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3324      	adds	r3, #36	; 0x24
 8006f5e:	2102      	movs	r1, #2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fc07 	bl	8007774 <RCCEx_PLL3_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d001      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d030      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f84:	d017      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8006f86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f8a:	d811      	bhi.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f90:	d013      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f96:	d80b      	bhi.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d010      	beq.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa0:	d106      	bne.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fa2:	4b3b      	ldr	r3, [pc, #236]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	4a3a      	ldr	r2, [pc, #232]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006fae:	e007      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb4:	e004      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006fb6:	bf00      	nop
 8006fb8:	e002      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006fba:	bf00      	nop
 8006fbc:	e000      	b.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8006fbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d109      	bne.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fc6:	4b32      	ldr	r3, [pc, #200]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd2:	492f      	ldr	r1, [pc, #188]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	654b      	str	r3, [r1, #84]	; 0x54
 8006fd8:	e001      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fda:	7dfb      	ldrb	r3, [r7, #23]
 8006fdc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d008      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006fea:	4b29      	ldr	r3, [pc, #164]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff6:	4926      	ldr	r1, [pc, #152]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d009      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007008:	4b21      	ldr	r3, [pc, #132]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007016:	491e      	ldr	r1, [pc, #120]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007018:	4313      	orrs	r3, r2
 800701a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d008      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007028:	4b19      	ldr	r3, [pc, #100]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800702a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800702c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007034:	4916      	ldr	r1, [pc, #88]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007036:	4313      	orrs	r3, r2
 8007038:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00d      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007046:	4b12      	ldr	r3, [pc, #72]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	4a11      	ldr	r2, [pc, #68]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800704c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007050:	6113      	str	r3, [r2, #16]
 8007052:	4b0f      	ldr	r3, [pc, #60]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007054:	691a      	ldr	r2, [r3, #16]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800705c:	490c      	ldr	r1, [pc, #48]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800705e:	4313      	orrs	r3, r2
 8007060:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	da08      	bge.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800706c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007076:	4906      	ldr	r1, [pc, #24]	; (8007090 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007078:	4313      	orrs	r3, r2
 800707a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800707c:	7dbb      	ldrb	r3, [r7, #22]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 8007082:	2300      	movs	r3, #0
 8007084:	e000      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
}
 8007088:	4618      	mov	r0, r3
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}
 8007090:	58024400 	.word	0x58024400

08007094 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007098:	f7ff f82e 	bl	80060f8 <HAL_RCC_GetHCLKFreq>
 800709c:	4602      	mov	r2, r0
 800709e:	4b06      	ldr	r3, [pc, #24]	; (80070b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	091b      	lsrs	r3, r3, #4
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	4904      	ldr	r1, [pc, #16]	; (80070bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80070aa:	5ccb      	ldrb	r3, [r1, r3]
 80070ac:	f003 031f 	and.w	r3, r3, #31
 80070b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	58024400 	.word	0x58024400
 80070bc:	08009684 	.word	0x08009684

080070c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b089      	sub	sp, #36	; 0x24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070c8:	4ba1      	ldr	r3, [pc, #644]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	f003 0303 	and.w	r3, r3, #3
 80070d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80070d2:	4b9f      	ldr	r3, [pc, #636]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	0b1b      	lsrs	r3, r3, #12
 80070d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80070de:	4b9c      	ldr	r3, [pc, #624]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070e2:	091b      	lsrs	r3, r3, #4
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80070ea:	4b99      	ldr	r3, [pc, #612]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ee:	08db      	lsrs	r3, r3, #3
 80070f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8111 	beq.w	8007330 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b02      	cmp	r3, #2
 8007112:	f000 8083 	beq.w	800721c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	2b02      	cmp	r3, #2
 800711a:	f200 80a1 	bhi.w	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d003      	beq.n	800712c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d056      	beq.n	80071d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800712a:	e099      	b.n	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800712c:	4b88      	ldr	r3, [pc, #544]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0320 	and.w	r3, r3, #32
 8007134:	2b00      	cmp	r3, #0
 8007136:	d02d      	beq.n	8007194 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007138:	4b85      	ldr	r3, [pc, #532]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	08db      	lsrs	r3, r3, #3
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	4a84      	ldr	r2, [pc, #528]	; (8007354 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007144:	fa22 f303 	lsr.w	r3, r2, r3
 8007148:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	ee07 3a90 	vmov	s15, r3
 8007150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007162:	4b7b      	ldr	r3, [pc, #492]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	ed97 6a03 	vldr	s12, [r7, #12]
 8007176:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800717a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007192:	e087      	b.n	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	ee07 3a90 	vmov	s15, r3
 800719a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800719e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800735c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80071a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071a6:	4b6a      	ldr	r3, [pc, #424]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071d6:	e065      	b.n	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ea:	4b59      	ldr	r3, [pc, #356]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f2:	ee07 3a90 	vmov	s15, r3
 80071f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80071fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800721a:	e043      	b.n	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007226:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800722a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800722e:	4b48      	ldr	r3, [pc, #288]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007236:	ee07 3a90 	vmov	s15, r3
 800723a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007242:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800725e:	e021      	b.n	80072a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800726e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007272:	4b37      	ldr	r3, [pc, #220]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007282:	ed97 6a03 	vldr	s12, [r7, #12]
 8007286:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800728a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800728e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800729a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800729e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80072a4:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a8:	0a5b      	lsrs	r3, r3, #9
 80072aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072be:	edd7 6a07 	vldr	s13, [r7, #28]
 80072c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ca:	ee17 2a90 	vmov	r2, s15
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80072d2:	4b1f      	ldr	r3, [pc, #124]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d6:	0c1b      	lsrs	r3, r3, #16
 80072d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f8:	ee17 2a90 	vmov	r2, s15
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007300:	4b13      	ldr	r3, [pc, #76]	; (8007350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007304:	0e1b      	lsrs	r3, r3, #24
 8007306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800731a:	edd7 6a07 	vldr	s13, [r7, #28]
 800731e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007326:	ee17 2a90 	vmov	r2, s15
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800732e:	e008      	b.n	8007342 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	609a      	str	r2, [r3, #8]
}
 8007342:	bf00      	nop
 8007344:	3724      	adds	r7, #36	; 0x24
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	58024400 	.word	0x58024400
 8007354:	03d09000 	.word	0x03d09000
 8007358:	46000000 	.word	0x46000000
 800735c:	4c742400 	.word	0x4c742400
 8007360:	4a742400 	.word	0x4a742400
 8007364:	4af42400 	.word	0x4af42400

08007368 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007368:	b480      	push	{r7}
 800736a:	b089      	sub	sp, #36	; 0x24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007370:	4ba1      	ldr	r3, [pc, #644]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800737a:	4b9f      	ldr	r3, [pc, #636]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	0d1b      	lsrs	r3, r3, #20
 8007380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007384:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007386:	4b9c      	ldr	r3, [pc, #624]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	0a1b      	lsrs	r3, r3, #8
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007392:	4b99      	ldr	r3, [pc, #612]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	08db      	lsrs	r3, r3, #3
 8007398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 8111 	beq.w	80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	f000 8083 	beq.w	80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	f200 80a1 	bhi.w	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d056      	beq.n	8007480 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80073d2:	e099      	b.n	8007508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073d4:	4b88      	ldr	r3, [pc, #544]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d02d      	beq.n	800743c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073e0:	4b85      	ldr	r3, [pc, #532]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	08db      	lsrs	r3, r3, #3
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	4a84      	ldr	r2, [pc, #528]	; (80075fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073ec:	fa22 f303 	lsr.w	r3, r2, r3
 80073f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	ee07 3a90 	vmov	s15, r3
 80073f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b7b      	ldr	r3, [pc, #492]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800740c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800743a:	e087      	b.n	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007604 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744e:	4b6a      	ldr	r3, [pc, #424]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007462:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800747e:	e065      	b.n	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800748e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007492:	4b59      	ldr	r3, [pc, #356]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074c2:	e043      	b.n	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800760c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80074d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d6:	4b48      	ldr	r3, [pc, #288]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007506:	e021      	b.n	800754c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751a:	4b37      	ldr	r3, [pc, #220]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752a:	ed97 6a03 	vldr	s12, [r7, #12]
 800752e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800754a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800754c:	4b2a      	ldr	r3, [pc, #168]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	0a5b      	lsrs	r3, r3, #9
 8007552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007566:	edd7 6a07 	vldr	s13, [r7, #28]
 800756a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007572:	ee17 2a90 	vmov	r2, s15
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800757a:	4b1f      	ldr	r3, [pc, #124]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007584:	ee07 3a90 	vmov	s15, r3
 8007588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007594:	edd7 6a07 	vldr	s13, [r7, #28]
 8007598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a0:	ee17 2a90 	vmov	r2, s15
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80075a8:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	0e1b      	lsrs	r3, r3, #24
 80075ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ce:	ee17 2a90 	vmov	r2, s15
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80075d6:	e008      	b.n	80075ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]
}
 80075ea:	bf00      	nop
 80075ec:	3724      	adds	r7, #36	; 0x24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	58024400 	.word	0x58024400
 80075fc:	03d09000 	.word	0x03d09000
 8007600:	46000000 	.word	0x46000000
 8007604:	4c742400 	.word	0x4c742400
 8007608:	4a742400 	.word	0x4a742400
 800760c:	4af42400 	.word	0x4af42400

08007610 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800761a:	2300      	movs	r3, #0
 800761c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800761e:	4b53      	ldr	r3, [pc, #332]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b03      	cmp	r3, #3
 8007628:	d101      	bne.n	800762e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e099      	b.n	8007762 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800762e:	4b4f      	ldr	r3, [pc, #316]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a4e      	ldr	r2, [pc, #312]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007634:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800763a:	f7fb feeb 	bl	8003414 <HAL_GetTick>
 800763e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007640:	e008      	b.n	8007654 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007642:	f7fb fee7 	bl	8003414 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e086      	b.n	8007762 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007654:	4b45      	ldr	r3, [pc, #276]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f0      	bne.n	8007642 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007660:	4b42      	ldr	r3, [pc, #264]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007664:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	031b      	lsls	r3, r3, #12
 800766e:	493f      	ldr	r1, [pc, #252]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007670:	4313      	orrs	r3, r2
 8007672:	628b      	str	r3, [r1, #40]	; 0x28
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	3b01      	subs	r3, #1
 800767a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	3b01      	subs	r3, #1
 8007684:	025b      	lsls	r3, r3, #9
 8007686:	b29b      	uxth	r3, r3
 8007688:	431a      	orrs	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	3b01      	subs	r3, #1
 8007690:	041b      	lsls	r3, r3, #16
 8007692:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007696:	431a      	orrs	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	3b01      	subs	r3, #1
 800769e:	061b      	lsls	r3, r3, #24
 80076a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076a4:	4931      	ldr	r1, [pc, #196]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80076aa:	4b30      	ldr	r3, [pc, #192]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	492d      	ldr	r1, [pc, #180]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80076bc:	4b2b      	ldr	r3, [pc, #172]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	f023 0220 	bic.w	r2, r3, #32
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	4928      	ldr	r1, [pc, #160]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80076ce:	4b27      	ldr	r3, [pc, #156]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	4a26      	ldr	r2, [pc, #152]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076d4:	f023 0310 	bic.w	r3, r3, #16
 80076d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80076da:	4b24      	ldr	r3, [pc, #144]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <RCCEx_PLL2_Config+0x160>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	69d2      	ldr	r2, [r2, #28]
 80076e6:	00d2      	lsls	r2, r2, #3
 80076e8:	4920      	ldr	r1, [pc, #128]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80076ee:	4b1f      	ldr	r3, [pc, #124]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	4a1e      	ldr	r2, [pc, #120]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 80076f4:	f043 0310 	orr.w	r3, r3, #16
 80076f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007700:	4b1a      	ldr	r3, [pc, #104]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	4a19      	ldr	r2, [pc, #100]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800770a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800770c:	e00f      	b.n	800772e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d106      	bne.n	8007722 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007714:	4b15      	ldr	r3, [pc, #84]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007718:	4a14      	ldr	r2, [pc, #80]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 800771a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800771e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007720:	e005      	b.n	800772e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007722:	4b12      	ldr	r3, [pc, #72]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007726:	4a11      	ldr	r2, [pc, #68]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800772c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800772e:	4b0f      	ldr	r3, [pc, #60]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a0e      	ldr	r2, [pc, #56]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800773a:	f7fb fe6b 	bl	8003414 <HAL_GetTick>
 800773e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007740:	e008      	b.n	8007754 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007742:	f7fb fe67 	bl	8003414 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e006      	b.n	8007762 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <RCCEx_PLL2_Config+0x15c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0f0      	beq.n	8007742 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	58024400 	.word	0x58024400
 8007770:	ffff0007 	.word	0xffff0007

08007774 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007782:	4b53      	ldr	r3, [pc, #332]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	2b03      	cmp	r3, #3
 800778c:	d101      	bne.n	8007792 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e099      	b.n	80078c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007792:	4b4f      	ldr	r3, [pc, #316]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a4e      	ldr	r2, [pc, #312]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800779c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800779e:	f7fb fe39 	bl	8003414 <HAL_GetTick>
 80077a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077a4:	e008      	b.n	80077b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80077a6:	f7fb fe35 	bl	8003414 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e086      	b.n	80078c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077b8:	4b45      	ldr	r3, [pc, #276]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f0      	bne.n	80077a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80077c4:	4b42      	ldr	r3, [pc, #264]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 80077c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	051b      	lsls	r3, r3, #20
 80077d2:	493f      	ldr	r1, [pc, #252]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	628b      	str	r3, [r1, #40]	; 0x28
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	3b01      	subs	r3, #1
 80077de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	3b01      	subs	r3, #1
 80077e8:	025b      	lsls	r3, r3, #9
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	041b      	lsls	r3, r3, #16
 80077f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077fa:	431a      	orrs	r2, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	3b01      	subs	r3, #1
 8007802:	061b      	lsls	r3, r3, #24
 8007804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007808:	4931      	ldr	r1, [pc, #196]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800780a:	4313      	orrs	r3, r2
 800780c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800780e:	4b30      	ldr	r3, [pc, #192]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	492d      	ldr	r1, [pc, #180]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800781c:	4313      	orrs	r3, r2
 800781e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007820:	4b2b      	ldr	r3, [pc, #172]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	4928      	ldr	r1, [pc, #160]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800782e:	4313      	orrs	r3, r2
 8007830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007832:	4b27      	ldr	r3, [pc, #156]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007836:	4a26      	ldr	r2, [pc, #152]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800783c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800783e:	4b24      	ldr	r3, [pc, #144]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007842:	4b24      	ldr	r3, [pc, #144]	; (80078d4 <RCCEx_PLL3_Config+0x160>)
 8007844:	4013      	ands	r3, r2
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	69d2      	ldr	r2, [r2, #28]
 800784a:	00d2      	lsls	r2, r2, #3
 800784c:	4920      	ldr	r1, [pc, #128]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800784e:	4313      	orrs	r3, r2
 8007850:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007852:	4b1f      	ldr	r3, [pc, #124]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007856:	4a1e      	ldr	r2, [pc, #120]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800785c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d106      	bne.n	8007872 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007864:	4b1a      	ldr	r3, [pc, #104]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007868:	4a19      	ldr	r2, [pc, #100]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800786a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800786e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007870:	e00f      	b.n	8007892 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d106      	bne.n	8007886 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007878:	4b15      	ldr	r3, [pc, #84]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800787a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787c:	4a14      	ldr	r2, [pc, #80]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800787e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007884:	e005      	b.n	8007892 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007886:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788a:	4a11      	ldr	r2, [pc, #68]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 800788c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a0e      	ldr	r2, [pc, #56]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 8007898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800789c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800789e:	f7fb fdb9 	bl	8003414 <HAL_GetTick>
 80078a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078a4:	e008      	b.n	80078b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078a6:	f7fb fdb5 	bl	8003414 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d901      	bls.n	80078b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e006      	b.n	80078c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80078b8:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <RCCEx_PLL3_Config+0x15c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0f0      	beq.n	80078a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	58024400 	.word	0x58024400
 80078d4:	ffff0007 	.word	0xffff0007

080078d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e049      	b.n	800797e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f841 	bl	8007986 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	3304      	adds	r3, #4
 8007914:	4619      	mov	r1, r3
 8007916:	4610      	mov	r0, r2
 8007918:	f000 f9be 	bl	8007c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d001      	beq.n	80079b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e021      	b.n	80079f8 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2202      	movs	r2, #2
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0201 	orr.w	r2, r2, #1
 80079ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	689a      	ldr	r2, [r3, #8]
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <HAL_TIM_Base_Start_IT+0x68>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2b06      	cmp	r3, #6
 80079dc:	d00b      	beq.n	80079f6 <HAL_TIM_Base_Start_IT+0x5a>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e4:	d007      	beq.n	80079f6 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0201 	orr.w	r2, r2, #1
 80079f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3714      	adds	r7, #20
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	00010007 	.word	0x00010007

08007a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	f003 0302 	and.w	r3, r3, #2
 8007a1a:	2b02      	cmp	r3, #2
 8007a1c:	d122      	bne.n	8007a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d11b      	bne.n	8007a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f06f 0202 	mvn.w	r2, #2
 8007a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f905 	bl	8007c5a <HAL_TIM_IC_CaptureCallback>
 8007a50:	e005      	b.n	8007a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f8f7 	bl	8007c46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f908 	bl	8007c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2200      	movs	r2, #0
 8007a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b04      	cmp	r3, #4
 8007a70:	d122      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d11b      	bne.n	8007ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f06f 0204 	mvn.w	r2, #4
 8007a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2202      	movs	r2, #2
 8007a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f8db 	bl	8007c5a <HAL_TIM_IC_CaptureCallback>
 8007aa4:	e005      	b.n	8007ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f8cd 	bl	8007c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f8de 	bl	8007c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b08      	cmp	r3, #8
 8007ac4:	d122      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68db      	ldr	r3, [r3, #12]
 8007acc:	f003 0308 	and.w	r3, r3, #8
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	d11b      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f06f 0208 	mvn.w	r2, #8
 8007adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2204      	movs	r2, #4
 8007ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	69db      	ldr	r3, [r3, #28]
 8007aea:	f003 0303 	and.w	r3, r3, #3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d003      	beq.n	8007afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f8b1 	bl	8007c5a <HAL_TIM_IC_CaptureCallback>
 8007af8:	e005      	b.n	8007b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f8a3 	bl	8007c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f8b4 	bl	8007c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f003 0310 	and.w	r3, r3, #16
 8007b16:	2b10      	cmp	r3, #16
 8007b18:	d122      	bne.n	8007b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d11b      	bne.n	8007b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f06f 0210 	mvn.w	r2, #16
 8007b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2208      	movs	r2, #8
 8007b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f887 	bl	8007c5a <HAL_TIM_IC_CaptureCallback>
 8007b4c:	e005      	b.n	8007b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f879 	bl	8007c46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f88a 	bl	8007c6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d10e      	bne.n	8007b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d107      	bne.n	8007b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f06f 0201 	mvn.w	r2, #1
 8007b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7fb f830 	bl	8002bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b96:	2b80      	cmp	r3, #128	; 0x80
 8007b98:	d10e      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ba4:	2b80      	cmp	r3, #128	; 0x80
 8007ba6:	d107      	bne.n	8007bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f914 	bl	8007de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc6:	d10e      	bne.n	8007be6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bd2:	2b80      	cmp	r3, #128	; 0x80
 8007bd4:	d107      	bne.n	8007be6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f907 	bl	8007df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b40      	cmp	r3, #64	; 0x40
 8007bf2:	d10e      	bne.n	8007c12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	d107      	bne.n	8007c12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f838 	bl	8007c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	691b      	ldr	r3, [r3, #16]
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b20      	cmp	r3, #32
 8007c1e:	d10e      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f003 0320 	and.w	r3, r3, #32
 8007c2a:	2b20      	cmp	r3, #32
 8007c2c:	d107      	bne.n	8007c3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f06f 0220 	mvn.w	r2, #32
 8007c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f8c7 	bl	8007dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c4e:	bf00      	nop
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c62:	bf00      	nop
 8007c64:	370c      	adds	r7, #12
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr

08007c6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b083      	sub	sp, #12
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c76:	bf00      	nop
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c8a:	bf00      	nop
 8007c8c:	370c      	adds	r7, #12
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
	...

08007c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a40      	ldr	r2, [pc, #256]	; (8007dac <TIM_Base_SetConfig+0x114>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d013      	beq.n	8007cd8 <TIM_Base_SetConfig+0x40>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb6:	d00f      	beq.n	8007cd8 <TIM_Base_SetConfig+0x40>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a3d      	ldr	r2, [pc, #244]	; (8007db0 <TIM_Base_SetConfig+0x118>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d00b      	beq.n	8007cd8 <TIM_Base_SetConfig+0x40>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a3c      	ldr	r2, [pc, #240]	; (8007db4 <TIM_Base_SetConfig+0x11c>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d007      	beq.n	8007cd8 <TIM_Base_SetConfig+0x40>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a3b      	ldr	r2, [pc, #236]	; (8007db8 <TIM_Base_SetConfig+0x120>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d003      	beq.n	8007cd8 <TIM_Base_SetConfig+0x40>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a3a      	ldr	r2, [pc, #232]	; (8007dbc <TIM_Base_SetConfig+0x124>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d108      	bne.n	8007cea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a2f      	ldr	r2, [pc, #188]	; (8007dac <TIM_Base_SetConfig+0x114>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01f      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cf8:	d01b      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4a2c      	ldr	r2, [pc, #176]	; (8007db0 <TIM_Base_SetConfig+0x118>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d017      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	4a2b      	ldr	r2, [pc, #172]	; (8007db4 <TIM_Base_SetConfig+0x11c>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d013      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4a2a      	ldr	r2, [pc, #168]	; (8007db8 <TIM_Base_SetConfig+0x120>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d00f      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a29      	ldr	r2, [pc, #164]	; (8007dbc <TIM_Base_SetConfig+0x124>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d00b      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a28      	ldr	r2, [pc, #160]	; (8007dc0 <TIM_Base_SetConfig+0x128>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d007      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	4a27      	ldr	r2, [pc, #156]	; (8007dc4 <TIM_Base_SetConfig+0x12c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d003      	beq.n	8007d32 <TIM_Base_SetConfig+0x9a>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4a26      	ldr	r2, [pc, #152]	; (8007dc8 <TIM_Base_SetConfig+0x130>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d108      	bne.n	8007d44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	695b      	ldr	r3, [r3, #20]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	689a      	ldr	r2, [r3, #8]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	4a10      	ldr	r2, [pc, #64]	; (8007dac <TIM_Base_SetConfig+0x114>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00f      	beq.n	8007d90 <TIM_Base_SetConfig+0xf8>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a12      	ldr	r2, [pc, #72]	; (8007dbc <TIM_Base_SetConfig+0x124>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d00b      	beq.n	8007d90 <TIM_Base_SetConfig+0xf8>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	4a11      	ldr	r2, [pc, #68]	; (8007dc0 <TIM_Base_SetConfig+0x128>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d007      	beq.n	8007d90 <TIM_Base_SetConfig+0xf8>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	4a10      	ldr	r2, [pc, #64]	; (8007dc4 <TIM_Base_SetConfig+0x12c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d003      	beq.n	8007d90 <TIM_Base_SetConfig+0xf8>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a0f      	ldr	r2, [pc, #60]	; (8007dc8 <TIM_Base_SetConfig+0x130>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d103      	bne.n	8007d98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	691a      	ldr	r2, [r3, #16]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	615a      	str	r2, [r3, #20]
}
 8007d9e:	bf00      	nop
 8007da0:	3714      	adds	r7, #20
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	40010000 	.word	0x40010000
 8007db0:	40000400 	.word	0x40000400
 8007db4:	40000800 	.word	0x40000800
 8007db8:	40000c00 	.word	0x40000c00
 8007dbc:	40010400 	.word	0x40010400
 8007dc0:	40014000 	.word	0x40014000
 8007dc4:	40014400 	.word	0x40014400
 8007dc8:	40014800 	.word	0x40014800

08007dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr

08007df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e042      	b.n	8007ea0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d106      	bne.n	8007e32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7fa ffdd 	bl	8002dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2224      	movs	r2, #36	; 0x24
 8007e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f022 0201 	bic.w	r2, r2, #1
 8007e48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 f82c 	bl	8007ea8 <UART_SetConfig>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e022      	b.n	8007ea0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 fd86 	bl	8008974 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689a      	ldr	r2, [r3, #8]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681a      	ldr	r2, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f042 0201 	orr.w	r2, r2, #1
 8007e96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fe0d 	bl	8008ab8 <UART_CheckIdleState>
 8007e9e:	4603      	mov	r3, r0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea8:	b5b0      	push	{r4, r5, r7, lr}
 8007eaa:	b08e      	sub	sp, #56	; 0x38
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	69db      	ldr	r3, [r3, #28]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	4bc0      	ldr	r3, [pc, #768]	; (80081e0 <UART_SetConfig+0x338>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ee8:	430b      	orrs	r3, r1
 8007eea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68da      	ldr	r2, [r3, #12]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4ab5      	ldr	r2, [pc, #724]	; (80081e4 <UART_SetConfig+0x33c>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	4bb1      	ldr	r3, [pc, #708]	; (80081e8 <UART_SetConfig+0x340>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f36:	f023 010f 	bic.w	r1, r3, #15
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4aa8      	ldr	r2, [pc, #672]	; (80081ec <UART_SetConfig+0x344>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d177      	bne.n	8008040 <UART_SetConfig+0x198>
 8007f50:	4ba7      	ldr	r3, [pc, #668]	; (80081f0 <UART_SetConfig+0x348>)
 8007f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f58:	2b28      	cmp	r3, #40	; 0x28
 8007f5a:	d86d      	bhi.n	8008038 <UART_SetConfig+0x190>
 8007f5c:	a201      	add	r2, pc, #4	; (adr r2, 8007f64 <UART_SetConfig+0xbc>)
 8007f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f62:	bf00      	nop
 8007f64:	08008009 	.word	0x08008009
 8007f68:	08008039 	.word	0x08008039
 8007f6c:	08008039 	.word	0x08008039
 8007f70:	08008039 	.word	0x08008039
 8007f74:	08008039 	.word	0x08008039
 8007f78:	08008039 	.word	0x08008039
 8007f7c:	08008039 	.word	0x08008039
 8007f80:	08008039 	.word	0x08008039
 8007f84:	08008011 	.word	0x08008011
 8007f88:	08008039 	.word	0x08008039
 8007f8c:	08008039 	.word	0x08008039
 8007f90:	08008039 	.word	0x08008039
 8007f94:	08008039 	.word	0x08008039
 8007f98:	08008039 	.word	0x08008039
 8007f9c:	08008039 	.word	0x08008039
 8007fa0:	08008039 	.word	0x08008039
 8007fa4:	08008019 	.word	0x08008019
 8007fa8:	08008039 	.word	0x08008039
 8007fac:	08008039 	.word	0x08008039
 8007fb0:	08008039 	.word	0x08008039
 8007fb4:	08008039 	.word	0x08008039
 8007fb8:	08008039 	.word	0x08008039
 8007fbc:	08008039 	.word	0x08008039
 8007fc0:	08008039 	.word	0x08008039
 8007fc4:	08008021 	.word	0x08008021
 8007fc8:	08008039 	.word	0x08008039
 8007fcc:	08008039 	.word	0x08008039
 8007fd0:	08008039 	.word	0x08008039
 8007fd4:	08008039 	.word	0x08008039
 8007fd8:	08008039 	.word	0x08008039
 8007fdc:	08008039 	.word	0x08008039
 8007fe0:	08008039 	.word	0x08008039
 8007fe4:	08008029 	.word	0x08008029
 8007fe8:	08008039 	.word	0x08008039
 8007fec:	08008039 	.word	0x08008039
 8007ff0:	08008039 	.word	0x08008039
 8007ff4:	08008039 	.word	0x08008039
 8007ff8:	08008039 	.word	0x08008039
 8007ffc:	08008039 	.word	0x08008039
 8008000:	08008039 	.word	0x08008039
 8008004:	08008031 	.word	0x08008031
 8008008:	2301      	movs	r3, #1
 800800a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800800e:	e222      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008010:	2304      	movs	r3, #4
 8008012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008016:	e21e      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008018:	2308      	movs	r3, #8
 800801a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800801e:	e21a      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008020:	2310      	movs	r3, #16
 8008022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008026:	e216      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008028:	2320      	movs	r3, #32
 800802a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800802e:	e212      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008030:	2340      	movs	r3, #64	; 0x40
 8008032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008036:	e20e      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008038:	2380      	movs	r3, #128	; 0x80
 800803a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800803e:	e20a      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a6b      	ldr	r2, [pc, #428]	; (80081f4 <UART_SetConfig+0x34c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d130      	bne.n	80080ac <UART_SetConfig+0x204>
 800804a:	4b69      	ldr	r3, [pc, #420]	; (80081f0 <UART_SetConfig+0x348>)
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	f003 0307 	and.w	r3, r3, #7
 8008052:	2b05      	cmp	r3, #5
 8008054:	d826      	bhi.n	80080a4 <UART_SetConfig+0x1fc>
 8008056:	a201      	add	r2, pc, #4	; (adr r2, 800805c <UART_SetConfig+0x1b4>)
 8008058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800805c:	08008075 	.word	0x08008075
 8008060:	0800807d 	.word	0x0800807d
 8008064:	08008085 	.word	0x08008085
 8008068:	0800808d 	.word	0x0800808d
 800806c:	08008095 	.word	0x08008095
 8008070:	0800809d 	.word	0x0800809d
 8008074:	2300      	movs	r3, #0
 8008076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800807a:	e1ec      	b.n	8008456 <UART_SetConfig+0x5ae>
 800807c:	2304      	movs	r3, #4
 800807e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008082:	e1e8      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008084:	2308      	movs	r3, #8
 8008086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800808a:	e1e4      	b.n	8008456 <UART_SetConfig+0x5ae>
 800808c:	2310      	movs	r3, #16
 800808e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008092:	e1e0      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008094:	2320      	movs	r3, #32
 8008096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800809a:	e1dc      	b.n	8008456 <UART_SetConfig+0x5ae>
 800809c:	2340      	movs	r3, #64	; 0x40
 800809e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080a2:	e1d8      	b.n	8008456 <UART_SetConfig+0x5ae>
 80080a4:	2380      	movs	r3, #128	; 0x80
 80080a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080aa:	e1d4      	b.n	8008456 <UART_SetConfig+0x5ae>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a51      	ldr	r2, [pc, #324]	; (80081f8 <UART_SetConfig+0x350>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d130      	bne.n	8008118 <UART_SetConfig+0x270>
 80080b6:	4b4e      	ldr	r3, [pc, #312]	; (80081f0 <UART_SetConfig+0x348>)
 80080b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ba:	f003 0307 	and.w	r3, r3, #7
 80080be:	2b05      	cmp	r3, #5
 80080c0:	d826      	bhi.n	8008110 <UART_SetConfig+0x268>
 80080c2:	a201      	add	r2, pc, #4	; (adr r2, 80080c8 <UART_SetConfig+0x220>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080e1 	.word	0x080080e1
 80080cc:	080080e9 	.word	0x080080e9
 80080d0:	080080f1 	.word	0x080080f1
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	08008101 	.word	0x08008101
 80080dc:	08008109 	.word	0x08008109
 80080e0:	2300      	movs	r3, #0
 80080e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080e6:	e1b6      	b.n	8008456 <UART_SetConfig+0x5ae>
 80080e8:	2304      	movs	r3, #4
 80080ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080ee:	e1b2      	b.n	8008456 <UART_SetConfig+0x5ae>
 80080f0:	2308      	movs	r3, #8
 80080f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080f6:	e1ae      	b.n	8008456 <UART_SetConfig+0x5ae>
 80080f8:	2310      	movs	r3, #16
 80080fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80080fe:	e1aa      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008100:	2320      	movs	r3, #32
 8008102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008106:	e1a6      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008108:	2340      	movs	r3, #64	; 0x40
 800810a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800810e:	e1a2      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008110:	2380      	movs	r3, #128	; 0x80
 8008112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008116:	e19e      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a37      	ldr	r2, [pc, #220]	; (80081fc <UART_SetConfig+0x354>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d130      	bne.n	8008184 <UART_SetConfig+0x2dc>
 8008122:	4b33      	ldr	r3, [pc, #204]	; (80081f0 <UART_SetConfig+0x348>)
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	2b05      	cmp	r3, #5
 800812c:	d826      	bhi.n	800817c <UART_SetConfig+0x2d4>
 800812e:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <UART_SetConfig+0x28c>)
 8008130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008134:	0800814d 	.word	0x0800814d
 8008138:	08008155 	.word	0x08008155
 800813c:	0800815d 	.word	0x0800815d
 8008140:	08008165 	.word	0x08008165
 8008144:	0800816d 	.word	0x0800816d
 8008148:	08008175 	.word	0x08008175
 800814c:	2300      	movs	r3, #0
 800814e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008152:	e180      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008154:	2304      	movs	r3, #4
 8008156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800815a:	e17c      	b.n	8008456 <UART_SetConfig+0x5ae>
 800815c:	2308      	movs	r3, #8
 800815e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008162:	e178      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008164:	2310      	movs	r3, #16
 8008166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800816a:	e174      	b.n	8008456 <UART_SetConfig+0x5ae>
 800816c:	2320      	movs	r3, #32
 800816e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008172:	e170      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008174:	2340      	movs	r3, #64	; 0x40
 8008176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800817a:	e16c      	b.n	8008456 <UART_SetConfig+0x5ae>
 800817c:	2380      	movs	r3, #128	; 0x80
 800817e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008182:	e168      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1d      	ldr	r2, [pc, #116]	; (8008200 <UART_SetConfig+0x358>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d142      	bne.n	8008214 <UART_SetConfig+0x36c>
 800818e:	4b18      	ldr	r3, [pc, #96]	; (80081f0 <UART_SetConfig+0x348>)
 8008190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008192:	f003 0307 	and.w	r3, r3, #7
 8008196:	2b05      	cmp	r3, #5
 8008198:	d838      	bhi.n	800820c <UART_SetConfig+0x364>
 800819a:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <UART_SetConfig+0x2f8>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	080081b9 	.word	0x080081b9
 80081a4:	080081c1 	.word	0x080081c1
 80081a8:	080081c9 	.word	0x080081c9
 80081ac:	080081d1 	.word	0x080081d1
 80081b0:	080081d9 	.word	0x080081d9
 80081b4:	08008205 	.word	0x08008205
 80081b8:	2300      	movs	r3, #0
 80081ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081be:	e14a      	b.n	8008456 <UART_SetConfig+0x5ae>
 80081c0:	2304      	movs	r3, #4
 80081c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081c6:	e146      	b.n	8008456 <UART_SetConfig+0x5ae>
 80081c8:	2308      	movs	r3, #8
 80081ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ce:	e142      	b.n	8008456 <UART_SetConfig+0x5ae>
 80081d0:	2310      	movs	r3, #16
 80081d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d6:	e13e      	b.n	8008456 <UART_SetConfig+0x5ae>
 80081d8:	2320      	movs	r3, #32
 80081da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081de:	e13a      	b.n	8008456 <UART_SetConfig+0x5ae>
 80081e0:	cfff69f3 	.word	0xcfff69f3
 80081e4:	58000c00 	.word	0x58000c00
 80081e8:	11fff4ff 	.word	0x11fff4ff
 80081ec:	40011000 	.word	0x40011000
 80081f0:	58024400 	.word	0x58024400
 80081f4:	40004400 	.word	0x40004400
 80081f8:	40004800 	.word	0x40004800
 80081fc:	40004c00 	.word	0x40004c00
 8008200:	40005000 	.word	0x40005000
 8008204:	2340      	movs	r3, #64	; 0x40
 8008206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800820a:	e124      	b.n	8008456 <UART_SetConfig+0x5ae>
 800820c:	2380      	movs	r3, #128	; 0x80
 800820e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008212:	e120      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4acc      	ldr	r2, [pc, #816]	; (800854c <UART_SetConfig+0x6a4>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d176      	bne.n	800830c <UART_SetConfig+0x464>
 800821e:	4bcc      	ldr	r3, [pc, #816]	; (8008550 <UART_SetConfig+0x6a8>)
 8008220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008226:	2b28      	cmp	r3, #40	; 0x28
 8008228:	d86c      	bhi.n	8008304 <UART_SetConfig+0x45c>
 800822a:	a201      	add	r2, pc, #4	; (adr r2, 8008230 <UART_SetConfig+0x388>)
 800822c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008230:	080082d5 	.word	0x080082d5
 8008234:	08008305 	.word	0x08008305
 8008238:	08008305 	.word	0x08008305
 800823c:	08008305 	.word	0x08008305
 8008240:	08008305 	.word	0x08008305
 8008244:	08008305 	.word	0x08008305
 8008248:	08008305 	.word	0x08008305
 800824c:	08008305 	.word	0x08008305
 8008250:	080082dd 	.word	0x080082dd
 8008254:	08008305 	.word	0x08008305
 8008258:	08008305 	.word	0x08008305
 800825c:	08008305 	.word	0x08008305
 8008260:	08008305 	.word	0x08008305
 8008264:	08008305 	.word	0x08008305
 8008268:	08008305 	.word	0x08008305
 800826c:	08008305 	.word	0x08008305
 8008270:	080082e5 	.word	0x080082e5
 8008274:	08008305 	.word	0x08008305
 8008278:	08008305 	.word	0x08008305
 800827c:	08008305 	.word	0x08008305
 8008280:	08008305 	.word	0x08008305
 8008284:	08008305 	.word	0x08008305
 8008288:	08008305 	.word	0x08008305
 800828c:	08008305 	.word	0x08008305
 8008290:	080082ed 	.word	0x080082ed
 8008294:	08008305 	.word	0x08008305
 8008298:	08008305 	.word	0x08008305
 800829c:	08008305 	.word	0x08008305
 80082a0:	08008305 	.word	0x08008305
 80082a4:	08008305 	.word	0x08008305
 80082a8:	08008305 	.word	0x08008305
 80082ac:	08008305 	.word	0x08008305
 80082b0:	080082f5 	.word	0x080082f5
 80082b4:	08008305 	.word	0x08008305
 80082b8:	08008305 	.word	0x08008305
 80082bc:	08008305 	.word	0x08008305
 80082c0:	08008305 	.word	0x08008305
 80082c4:	08008305 	.word	0x08008305
 80082c8:	08008305 	.word	0x08008305
 80082cc:	08008305 	.word	0x08008305
 80082d0:	080082fd 	.word	0x080082fd
 80082d4:	2301      	movs	r3, #1
 80082d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082da:	e0bc      	b.n	8008456 <UART_SetConfig+0x5ae>
 80082dc:	2304      	movs	r3, #4
 80082de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082e2:	e0b8      	b.n	8008456 <UART_SetConfig+0x5ae>
 80082e4:	2308      	movs	r3, #8
 80082e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ea:	e0b4      	b.n	8008456 <UART_SetConfig+0x5ae>
 80082ec:	2310      	movs	r3, #16
 80082ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082f2:	e0b0      	b.n	8008456 <UART_SetConfig+0x5ae>
 80082f4:	2320      	movs	r3, #32
 80082f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082fa:	e0ac      	b.n	8008456 <UART_SetConfig+0x5ae>
 80082fc:	2340      	movs	r3, #64	; 0x40
 80082fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008302:	e0a8      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008304:	2380      	movs	r3, #128	; 0x80
 8008306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800830a:	e0a4      	b.n	8008456 <UART_SetConfig+0x5ae>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a90      	ldr	r2, [pc, #576]	; (8008554 <UART_SetConfig+0x6ac>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d130      	bne.n	8008378 <UART_SetConfig+0x4d0>
 8008316:	4b8e      	ldr	r3, [pc, #568]	; (8008550 <UART_SetConfig+0x6a8>)
 8008318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831a:	f003 0307 	and.w	r3, r3, #7
 800831e:	2b05      	cmp	r3, #5
 8008320:	d826      	bhi.n	8008370 <UART_SetConfig+0x4c8>
 8008322:	a201      	add	r2, pc, #4	; (adr r2, 8008328 <UART_SetConfig+0x480>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008341 	.word	0x08008341
 800832c:	08008349 	.word	0x08008349
 8008330:	08008351 	.word	0x08008351
 8008334:	08008359 	.word	0x08008359
 8008338:	08008361 	.word	0x08008361
 800833c:	08008369 	.word	0x08008369
 8008340:	2300      	movs	r3, #0
 8008342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008346:	e086      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008348:	2304      	movs	r3, #4
 800834a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800834e:	e082      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008350:	2308      	movs	r3, #8
 8008352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008356:	e07e      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008358:	2310      	movs	r3, #16
 800835a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800835e:	e07a      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008360:	2320      	movs	r3, #32
 8008362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008366:	e076      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008368:	2340      	movs	r3, #64	; 0x40
 800836a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800836e:	e072      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008370:	2380      	movs	r3, #128	; 0x80
 8008372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008376:	e06e      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a76      	ldr	r2, [pc, #472]	; (8008558 <UART_SetConfig+0x6b0>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d130      	bne.n	80083e4 <UART_SetConfig+0x53c>
 8008382:	4b73      	ldr	r3, [pc, #460]	; (8008550 <UART_SetConfig+0x6a8>)
 8008384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b05      	cmp	r3, #5
 800838c:	d826      	bhi.n	80083dc <UART_SetConfig+0x534>
 800838e:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <UART_SetConfig+0x4ec>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	080083ad 	.word	0x080083ad
 8008398:	080083b5 	.word	0x080083b5
 800839c:	080083bd 	.word	0x080083bd
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083cd 	.word	0x080083cd
 80083a8:	080083d5 	.word	0x080083d5
 80083ac:	2300      	movs	r3, #0
 80083ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083b2:	e050      	b.n	8008456 <UART_SetConfig+0x5ae>
 80083b4:	2304      	movs	r3, #4
 80083b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ba:	e04c      	b.n	8008456 <UART_SetConfig+0x5ae>
 80083bc:	2308      	movs	r3, #8
 80083be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083c2:	e048      	b.n	8008456 <UART_SetConfig+0x5ae>
 80083c4:	2310      	movs	r3, #16
 80083c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ca:	e044      	b.n	8008456 <UART_SetConfig+0x5ae>
 80083cc:	2320      	movs	r3, #32
 80083ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083d2:	e040      	b.n	8008456 <UART_SetConfig+0x5ae>
 80083d4:	2340      	movs	r3, #64	; 0x40
 80083d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083da:	e03c      	b.n	8008456 <UART_SetConfig+0x5ae>
 80083dc:	2380      	movs	r3, #128	; 0x80
 80083de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083e2:	e038      	b.n	8008456 <UART_SetConfig+0x5ae>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a5c      	ldr	r2, [pc, #368]	; (800855c <UART_SetConfig+0x6b4>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d130      	bne.n	8008450 <UART_SetConfig+0x5a8>
 80083ee:	4b58      	ldr	r3, [pc, #352]	; (8008550 <UART_SetConfig+0x6a8>)
 80083f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	d826      	bhi.n	8008448 <UART_SetConfig+0x5a0>
 80083fa:	a201      	add	r2, pc, #4	; (adr r2, 8008400 <UART_SetConfig+0x558>)
 80083fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008400:	08008419 	.word	0x08008419
 8008404:	08008421 	.word	0x08008421
 8008408:	08008429 	.word	0x08008429
 800840c:	08008431 	.word	0x08008431
 8008410:	08008439 	.word	0x08008439
 8008414:	08008441 	.word	0x08008441
 8008418:	2302      	movs	r3, #2
 800841a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800841e:	e01a      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008420:	2304      	movs	r3, #4
 8008422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008426:	e016      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008428:	2308      	movs	r3, #8
 800842a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800842e:	e012      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008430:	2310      	movs	r3, #16
 8008432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008436:	e00e      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008438:	2320      	movs	r3, #32
 800843a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800843e:	e00a      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008440:	2340      	movs	r3, #64	; 0x40
 8008442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008446:	e006      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008448:	2380      	movs	r3, #128	; 0x80
 800844a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800844e:	e002      	b.n	8008456 <UART_SetConfig+0x5ae>
 8008450:	2380      	movs	r3, #128	; 0x80
 8008452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a40      	ldr	r2, [pc, #256]	; (800855c <UART_SetConfig+0x6b4>)
 800845c:	4293      	cmp	r3, r2
 800845e:	f040 80ef 	bne.w	8008640 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008466:	2b20      	cmp	r3, #32
 8008468:	dc46      	bgt.n	80084f8 <UART_SetConfig+0x650>
 800846a:	2b02      	cmp	r3, #2
 800846c:	f2c0 8081 	blt.w	8008572 <UART_SetConfig+0x6ca>
 8008470:	3b02      	subs	r3, #2
 8008472:	2b1e      	cmp	r3, #30
 8008474:	d87d      	bhi.n	8008572 <UART_SetConfig+0x6ca>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <UART_SetConfig+0x5d4>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084ff 	.word	0x080084ff
 8008480:	08008573 	.word	0x08008573
 8008484:	08008507 	.word	0x08008507
 8008488:	08008573 	.word	0x08008573
 800848c:	08008573 	.word	0x08008573
 8008490:	08008573 	.word	0x08008573
 8008494:	08008517 	.word	0x08008517
 8008498:	08008573 	.word	0x08008573
 800849c:	08008573 	.word	0x08008573
 80084a0:	08008573 	.word	0x08008573
 80084a4:	08008573 	.word	0x08008573
 80084a8:	08008573 	.word	0x08008573
 80084ac:	08008573 	.word	0x08008573
 80084b0:	08008573 	.word	0x08008573
 80084b4:	08008527 	.word	0x08008527
 80084b8:	08008573 	.word	0x08008573
 80084bc:	08008573 	.word	0x08008573
 80084c0:	08008573 	.word	0x08008573
 80084c4:	08008573 	.word	0x08008573
 80084c8:	08008573 	.word	0x08008573
 80084cc:	08008573 	.word	0x08008573
 80084d0:	08008573 	.word	0x08008573
 80084d4:	08008573 	.word	0x08008573
 80084d8:	08008573 	.word	0x08008573
 80084dc:	08008573 	.word	0x08008573
 80084e0:	08008573 	.word	0x08008573
 80084e4:	08008573 	.word	0x08008573
 80084e8:	08008573 	.word	0x08008573
 80084ec:	08008573 	.word	0x08008573
 80084f0:	08008573 	.word	0x08008573
 80084f4:	08008565 	.word	0x08008565
 80084f8:	2b40      	cmp	r3, #64	; 0x40
 80084fa:	d036      	beq.n	800856a <UART_SetConfig+0x6c2>
 80084fc:	e039      	b.n	8008572 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80084fe:	f7fe fdc9 	bl	8007094 <HAL_RCCEx_GetD3PCLK1Freq>
 8008502:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008504:	e03b      	b.n	800857e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008506:	f107 0314 	add.w	r3, r7, #20
 800850a:	4618      	mov	r0, r3
 800850c:	f7fe fdd8 	bl	80070c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008514:	e033      	b.n	800857e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008516:	f107 0308 	add.w	r3, r7, #8
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe ff24 	bl	8007368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008524:	e02b      	b.n	800857e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008526:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <UART_SetConfig+0x6a8>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d009      	beq.n	8008546 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008532:	4b07      	ldr	r3, [pc, #28]	; (8008550 <UART_SetConfig+0x6a8>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	08db      	lsrs	r3, r3, #3
 8008538:	f003 0303 	and.w	r3, r3, #3
 800853c:	4a08      	ldr	r2, [pc, #32]	; (8008560 <UART_SetConfig+0x6b8>)
 800853e:	fa22 f303 	lsr.w	r3, r2, r3
 8008542:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008544:	e01b      	b.n	800857e <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 8008546:	4b06      	ldr	r3, [pc, #24]	; (8008560 <UART_SetConfig+0x6b8>)
 8008548:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800854a:	e018      	b.n	800857e <UART_SetConfig+0x6d6>
 800854c:	40011400 	.word	0x40011400
 8008550:	58024400 	.word	0x58024400
 8008554:	40007800 	.word	0x40007800
 8008558:	40007c00 	.word	0x40007c00
 800855c:	58000c00 	.word	0x58000c00
 8008560:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008564:	4bc4      	ldr	r3, [pc, #784]	; (8008878 <UART_SetConfig+0x9d0>)
 8008566:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008568:	e009      	b.n	800857e <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800856a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800856e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008570:	e005      	b.n	800857e <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800857c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 81da 	beq.w	800893a <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	4abc      	ldr	r2, [pc, #752]	; (800887c <UART_SetConfig+0x9d4>)
 800858c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008590:	461a      	mov	r2, r3
 8008592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008594:	fbb3 f3f2 	udiv	r3, r3, r2
 8008598:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	4613      	mov	r3, r2
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	4413      	add	r3, r2
 80085a4:	6a3a      	ldr	r2, [r7, #32]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d305      	bcc.n	80085b6 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085b0:	6a3a      	ldr	r2, [r7, #32]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d903      	bls.n	80085be <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80085bc:	e1bd      	b.n	800893a <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c0:	4618      	mov	r0, r3
 80085c2:	f04f 0100 	mov.w	r1, #0
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	4aac      	ldr	r2, [pc, #688]	; (800887c <UART_SetConfig+0x9d4>)
 80085cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	f04f 0300 	mov.w	r3, #0
 80085d6:	f7f9 fe5b 	bl	8002290 <__aeabi_uldivmod>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4610      	mov	r0, r2
 80085e0:	4619      	mov	r1, r3
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	020b      	lsls	r3, r1, #8
 80085ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085f0:	0202      	lsls	r2, r0, #8
 80085f2:	6879      	ldr	r1, [r7, #4]
 80085f4:	6849      	ldr	r1, [r1, #4]
 80085f6:	0849      	lsrs	r1, r1, #1
 80085f8:	4608      	mov	r0, r1
 80085fa:	f04f 0100 	mov.w	r1, #0
 80085fe:	1814      	adds	r4, r2, r0
 8008600:	eb43 0501 	adc.w	r5, r3, r1
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	461a      	mov	r2, r3
 800860a:	f04f 0300 	mov.w	r3, #0
 800860e:	4620      	mov	r0, r4
 8008610:	4629      	mov	r1, r5
 8008612:	f7f9 fe3d 	bl	8002290 <__aeabi_uldivmod>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4613      	mov	r3, r2
 800861c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800861e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008620:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008624:	d308      	bcc.n	8008638 <UART_SetConfig+0x790>
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800862c:	d204      	bcs.n	8008638 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008634:	60da      	str	r2, [r3, #12]
 8008636:	e180      	b.n	800893a <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800863e:	e17c      	b.n	800893a <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008648:	f040 80bf 	bne.w	80087ca <UART_SetConfig+0x922>
  {
    switch (clocksource)
 800864c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008650:	2b20      	cmp	r3, #32
 8008652:	dc49      	bgt.n	80086e8 <UART_SetConfig+0x840>
 8008654:	2b00      	cmp	r3, #0
 8008656:	db7c      	blt.n	8008752 <UART_SetConfig+0x8aa>
 8008658:	2b20      	cmp	r3, #32
 800865a:	d87a      	bhi.n	8008752 <UART_SetConfig+0x8aa>
 800865c:	a201      	add	r2, pc, #4	; (adr r2, 8008664 <UART_SetConfig+0x7bc>)
 800865e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008662:	bf00      	nop
 8008664:	080086ef 	.word	0x080086ef
 8008668:	080086f7 	.word	0x080086f7
 800866c:	08008753 	.word	0x08008753
 8008670:	08008753 	.word	0x08008753
 8008674:	080086ff 	.word	0x080086ff
 8008678:	08008753 	.word	0x08008753
 800867c:	08008753 	.word	0x08008753
 8008680:	08008753 	.word	0x08008753
 8008684:	0800870f 	.word	0x0800870f
 8008688:	08008753 	.word	0x08008753
 800868c:	08008753 	.word	0x08008753
 8008690:	08008753 	.word	0x08008753
 8008694:	08008753 	.word	0x08008753
 8008698:	08008753 	.word	0x08008753
 800869c:	08008753 	.word	0x08008753
 80086a0:	08008753 	.word	0x08008753
 80086a4:	0800871f 	.word	0x0800871f
 80086a8:	08008753 	.word	0x08008753
 80086ac:	08008753 	.word	0x08008753
 80086b0:	08008753 	.word	0x08008753
 80086b4:	08008753 	.word	0x08008753
 80086b8:	08008753 	.word	0x08008753
 80086bc:	08008753 	.word	0x08008753
 80086c0:	08008753 	.word	0x08008753
 80086c4:	08008753 	.word	0x08008753
 80086c8:	08008753 	.word	0x08008753
 80086cc:	08008753 	.word	0x08008753
 80086d0:	08008753 	.word	0x08008753
 80086d4:	08008753 	.word	0x08008753
 80086d8:	08008753 	.word	0x08008753
 80086dc:	08008753 	.word	0x08008753
 80086e0:	08008753 	.word	0x08008753
 80086e4:	08008745 	.word	0x08008745
 80086e8:	2b40      	cmp	r3, #64	; 0x40
 80086ea:	d02e      	beq.n	800874a <UART_SetConfig+0x8a2>
 80086ec:	e031      	b.n	8008752 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086ee:	f7fd fd33 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 80086f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80086f4:	e033      	b.n	800875e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086f6:	f7fd fd45 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 80086fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80086fc:	e02f      	b.n	800875e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086fe:	f107 0314 	add.w	r3, r7, #20
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe fcdc 	bl	80070c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800870c:	e027      	b.n	800875e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800870e:	f107 0308 	add.w	r3, r7, #8
 8008712:	4618      	mov	r0, r3
 8008714:	f7fe fe28 	bl	8007368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800871c:	e01f      	b.n	800875e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800871e:	4b58      	ldr	r3, [pc, #352]	; (8008880 <UART_SetConfig+0x9d8>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0320 	and.w	r3, r3, #32
 8008726:	2b00      	cmp	r3, #0
 8008728:	d009      	beq.n	800873e <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800872a:	4b55      	ldr	r3, [pc, #340]	; (8008880 <UART_SetConfig+0x9d8>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	08db      	lsrs	r3, r3, #3
 8008730:	f003 0303 	and.w	r3, r3, #3
 8008734:	4a53      	ldr	r2, [pc, #332]	; (8008884 <UART_SetConfig+0x9dc>)
 8008736:	fa22 f303 	lsr.w	r3, r2, r3
 800873a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800873c:	e00f      	b.n	800875e <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 800873e:	4b51      	ldr	r3, [pc, #324]	; (8008884 <UART_SetConfig+0x9dc>)
 8008740:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008742:	e00c      	b.n	800875e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008744:	4b4c      	ldr	r3, [pc, #304]	; (8008878 <UART_SetConfig+0x9d0>)
 8008746:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008748:	e009      	b.n	800875e <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800874a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800874e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008750:	e005      	b.n	800875e <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800875c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	2b00      	cmp	r3, #0
 8008762:	f000 80ea 	beq.w	800893a <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	4a44      	ldr	r2, [pc, #272]	; (800887c <UART_SetConfig+0x9d4>)
 800876c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008770:	461a      	mov	r2, r3
 8008772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008774:	fbb3 f3f2 	udiv	r3, r3, r2
 8008778:	005a      	lsls	r2, r3, #1
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	085b      	lsrs	r3, r3, #1
 8008780:	441a      	add	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	fbb2 f3f3 	udiv	r3, r2, r3
 800878a:	b29b      	uxth	r3, r3
 800878c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008790:	2b0f      	cmp	r3, #15
 8008792:	d916      	bls.n	80087c2 <UART_SetConfig+0x91a>
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800879a:	d212      	bcs.n	80087c2 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	b29b      	uxth	r3, r3
 80087a0:	f023 030f 	bic.w	r3, r3, #15
 80087a4:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	085b      	lsrs	r3, r3, #1
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	f003 0307 	and.w	r3, r3, #7
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087b4:	4313      	orrs	r3, r2
 80087b6:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80087be:	60da      	str	r2, [r3, #12]
 80087c0:	e0bb      	b.n	800893a <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80087c8:	e0b7      	b.n	800893a <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	dc4a      	bgt.n	8008868 <UART_SetConfig+0x9c0>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f2c0 8086 	blt.w	80088e4 <UART_SetConfig+0xa3c>
 80087d8:	2b20      	cmp	r3, #32
 80087da:	f200 8083 	bhi.w	80088e4 <UART_SetConfig+0xa3c>
 80087de:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <UART_SetConfig+0x93c>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	0800886f 	.word	0x0800886f
 80087e8:	08008889 	.word	0x08008889
 80087ec:	080088e5 	.word	0x080088e5
 80087f0:	080088e5 	.word	0x080088e5
 80087f4:	08008891 	.word	0x08008891
 80087f8:	080088e5 	.word	0x080088e5
 80087fc:	080088e5 	.word	0x080088e5
 8008800:	080088e5 	.word	0x080088e5
 8008804:	080088a1 	.word	0x080088a1
 8008808:	080088e5 	.word	0x080088e5
 800880c:	080088e5 	.word	0x080088e5
 8008810:	080088e5 	.word	0x080088e5
 8008814:	080088e5 	.word	0x080088e5
 8008818:	080088e5 	.word	0x080088e5
 800881c:	080088e5 	.word	0x080088e5
 8008820:	080088e5 	.word	0x080088e5
 8008824:	080088b1 	.word	0x080088b1
 8008828:	080088e5 	.word	0x080088e5
 800882c:	080088e5 	.word	0x080088e5
 8008830:	080088e5 	.word	0x080088e5
 8008834:	080088e5 	.word	0x080088e5
 8008838:	080088e5 	.word	0x080088e5
 800883c:	080088e5 	.word	0x080088e5
 8008840:	080088e5 	.word	0x080088e5
 8008844:	080088e5 	.word	0x080088e5
 8008848:	080088e5 	.word	0x080088e5
 800884c:	080088e5 	.word	0x080088e5
 8008850:	080088e5 	.word	0x080088e5
 8008854:	080088e5 	.word	0x080088e5
 8008858:	080088e5 	.word	0x080088e5
 800885c:	080088e5 	.word	0x080088e5
 8008860:	080088e5 	.word	0x080088e5
 8008864:	080088d7 	.word	0x080088d7
 8008868:	2b40      	cmp	r3, #64	; 0x40
 800886a:	d037      	beq.n	80088dc <UART_SetConfig+0xa34>
 800886c:	e03a      	b.n	80088e4 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800886e:	f7fd fc73 	bl	8006158 <HAL_RCC_GetPCLK1Freq>
 8008872:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008874:	e03c      	b.n	80088f0 <UART_SetConfig+0xa48>
 8008876:	bf00      	nop
 8008878:	003d0900 	.word	0x003d0900
 800887c:	0800966c 	.word	0x0800966c
 8008880:	58024400 	.word	0x58024400
 8008884:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008888:	f7fd fc7c 	bl	8006184 <HAL_RCC_GetPCLK2Freq>
 800888c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800888e:	e02f      	b.n	80088f0 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008890:	f107 0314 	add.w	r3, r7, #20
 8008894:	4618      	mov	r0, r3
 8008896:	f7fe fc13 	bl	80070c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800889e:	e027      	b.n	80088f0 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088a0:	f107 0308 	add.w	r3, r7, #8
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe fd5f 	bl	8007368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088ae:	e01f      	b.n	80088f0 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088b0:	4b2c      	ldr	r3, [pc, #176]	; (8008964 <UART_SetConfig+0xabc>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0320 	and.w	r3, r3, #32
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d009      	beq.n	80088d0 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088bc:	4b29      	ldr	r3, [pc, #164]	; (8008964 <UART_SetConfig+0xabc>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	08db      	lsrs	r3, r3, #3
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	4a28      	ldr	r2, [pc, #160]	; (8008968 <UART_SetConfig+0xac0>)
 80088c8:	fa22 f303 	lsr.w	r3, r2, r3
 80088cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088ce:	e00f      	b.n	80088f0 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 80088d0:	4b25      	ldr	r3, [pc, #148]	; (8008968 <UART_SetConfig+0xac0>)
 80088d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088d4:	e00c      	b.n	80088f0 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088d6:	4b25      	ldr	r3, [pc, #148]	; (800896c <UART_SetConfig+0xac4>)
 80088d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088da:	e009      	b.n	80088f0 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088e2:	e005      	b.n	80088f0 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80088ee:	bf00      	nop
    }

    if (pclk != 0U)
 80088f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d021      	beq.n	800893a <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	4a1d      	ldr	r2, [pc, #116]	; (8008970 <UART_SetConfig+0xac8>)
 80088fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008900:	461a      	mov	r2, r3
 8008902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008904:	fbb3 f2f2 	udiv	r2, r3, r2
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	085b      	lsrs	r3, r3, #1
 800890e:	441a      	add	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	fbb2 f3f3 	udiv	r3, r2, r3
 8008918:	b29b      	uxth	r3, r3
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	2b0f      	cmp	r3, #15
 8008920:	d908      	bls.n	8008934 <UART_SetConfig+0xa8c>
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008928:	d204      	bcs.n	8008934 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008930:	60da      	str	r2, [r3, #12]
 8008932:	e002      	b.n	800893a <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008956:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800895a:	4618      	mov	r0, r3
 800895c:	3738      	adds	r7, #56	; 0x38
 800895e:	46bd      	mov	sp, r7
 8008960:	bdb0      	pop	{r4, r5, r7, pc}
 8008962:	bf00      	nop
 8008964:	58024400 	.word	0x58024400
 8008968:	03d09000 	.word	0x03d09000
 800896c:	003d0900 	.word	0x003d0900
 8008970:	0800966c 	.word	0x0800966c

08008974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a2:	f003 0302 	and.w	r3, r3, #2
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00a      	beq.n	8008a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2a:	f003 0320 	and.w	r3, r3, #32
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01a      	beq.n	8008a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a72:	d10a      	bne.n	8008a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	605a      	str	r2, [r3, #4]
  }
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b086      	sub	sp, #24
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008ac8:	f7fa fca4 	bl	8003414 <HAL_GetTick>
 8008acc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0308 	and.w	r3, r3, #8
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d10e      	bne.n	8008afa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008adc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f82c 	bl	8008b48 <UART_WaitOnFlagUntilTimeout>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008af6:	2303      	movs	r3, #3
 8008af8:	e022      	b.n	8008b40 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b04      	cmp	r3, #4
 8008b06:	d10e      	bne.n	8008b26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f816 	bl	8008b48 <UART_WaitOnFlagUntilTimeout>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e00c      	b.n	8008b40 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	603b      	str	r3, [r7, #0]
 8008b54:	4613      	mov	r3, r2
 8008b56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b58:	e062      	b.n	8008c20 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b60:	d05e      	beq.n	8008c20 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b62:	f7fa fc57 	bl	8003414 <HAL_GetTick>
 8008b66:	4602      	mov	r2, r0
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d302      	bcc.n	8008b78 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d11d      	bne.n	8008bb4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008b86:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689a      	ldr	r2, [r3, #8]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 0201 	bic.w	r2, r2, #1
 8008b96:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e045      	b.n	8008c40 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f003 0304 	and.w	r3, r3, #4
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d02e      	beq.n	8008c20 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd0:	d126      	bne.n	8008c20 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bda:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008bea:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0201 	bic.w	r2, r2, #1
 8008bfa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2220      	movs	r2, #32
 8008c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2220      	movs	r2, #32
 8008c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e00f      	b.n	8008c40 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	69da      	ldr	r2, [r3, #28]
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	4013      	ands	r3, r2
 8008c2a:	68ba      	ldr	r2, [r7, #8]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	bf0c      	ite	eq
 8008c30:	2301      	moveq	r3, #1
 8008c32:	2300      	movne	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	461a      	mov	r2, r3
 8008c38:	79fb      	ldrb	r3, [r7, #7]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d08d      	beq.n	8008b5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c3e:	2300      	movs	r3, #0
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d101      	bne.n	8008c5e <HAL_UARTEx_DisableFifoMode+0x16>
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	e027      	b.n	8008cae <HAL_UARTEx_DisableFifoMode+0x66>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2224      	movs	r2, #36	; 0x24
 8008c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0201 	bic.w	r2, r2, #1
 8008c84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr

08008cba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b084      	sub	sp, #16
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
 8008cc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d101      	bne.n	8008cd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008cce:	2302      	movs	r3, #2
 8008cd0:	e02d      	b.n	8008d2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2224      	movs	r2, #36	; 0x24
 8008cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 0201 	bic.w	r2, r2, #1
 8008cf8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f850 	bl	8008db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b084      	sub	sp, #16
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d101      	bne.n	8008d4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	e02d      	b.n	8008daa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2224      	movs	r2, #36	; 0x24
 8008d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 0201 	bic.w	r2, r2, #1
 8008d74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	683a      	ldr	r2, [r7, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f000 f812 	bl	8008db4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b089      	sub	sp, #36	; 0x24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008dbc:	4a2f      	ldr	r2, [pc, #188]	; (8008e7c <UARTEx_SetNbDataToProcess+0xc8>)
 8008dbe:	f107 0314 	add.w	r3, r7, #20
 8008dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dc6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008dca:	4a2d      	ldr	r2, [pc, #180]	; (8008e80 <UARTEx_SetNbDataToProcess+0xcc>)
 8008dcc:	f107 030c 	add.w	r3, r7, #12
 8008dd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dd4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d108      	bne.n	8008df2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008df0:	e03d      	b.n	8008e6e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008df2:	2310      	movs	r3, #16
 8008df4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008df6:	2310      	movs	r3, #16
 8008df8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	689b      	ldr	r3, [r3, #8]
 8008e00:	0e5b      	lsrs	r3, r3, #25
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 0307 	and.w	r3, r3, #7
 8008e08:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	0f5b      	lsrs	r3, r3, #29
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	f003 0307 	and.w	r3, r3, #7
 8008e18:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008e1a:	7fbb      	ldrb	r3, [r7, #30]
 8008e1c:	7f3a      	ldrb	r2, [r7, #28]
 8008e1e:	f107 0120 	add.w	r1, r7, #32
 8008e22:	440a      	add	r2, r1
 8008e24:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008e28:	fb02 f303 	mul.w	r3, r2, r3
 8008e2c:	7f3a      	ldrb	r2, [r7, #28]
 8008e2e:	f107 0120 	add.w	r1, r7, #32
 8008e32:	440a      	add	r2, r1
 8008e34:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008e38:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008e44:	7ffb      	ldrb	r3, [r7, #31]
 8008e46:	7f7a      	ldrb	r2, [r7, #29]
 8008e48:	f107 0120 	add.w	r1, r7, #32
 8008e4c:	440a      	add	r2, r1
 8008e4e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
 8008e56:	7f7a      	ldrb	r2, [r7, #29]
 8008e58:	f107 0120 	add.w	r1, r7, #32
 8008e5c:	440a      	add	r2, r1
 8008e5e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008e62:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008e6e:	bf00      	nop
 8008e70:	3724      	adds	r7, #36	; 0x24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	0800957c 	.word	0x0800957c
 8008e80:	08009584 	.word	0x08009584

08008e84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e84:	b084      	sub	sp, #16
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b084      	sub	sp, #16
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	f107 001c 	add.w	r0, r7, #28
 8008e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d120      	bne.n	8008ede <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	68da      	ldr	r2, [r3, #12]
 8008eac:	4b25      	ldr	r3, [pc, #148]	; (8008f44 <USB_CoreInit+0xc0>)
 8008eae:	4013      	ands	r3, r2
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d105      	bne.n	8008ed2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f000 fa4c 	bl	8009370 <USB_CoreReset>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	73fb      	strb	r3, [r7, #15]
 8008edc:	e01a      	b.n	8008f14 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	68db      	ldr	r3, [r3, #12]
 8008ee2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fa40 	bl	8009370 <USB_CoreReset>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d106      	bne.n	8008f08 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	639a      	str	r2, [r3, #56]	; 0x38
 8008f06:	e005      	b.n	8008f14 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d10b      	bne.n	8008f32 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	f043 0206 	orr.w	r2, r3, #6
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f043 0220 	orr.w	r2, r3, #32
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3710      	adds	r7, #16
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f3e:	b004      	add	sp, #16
 8008f40:	4770      	bx	lr
 8008f42:	bf00      	nop
 8008f44:	ffbdffbf 	.word	0xffbdffbf

08008f48 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f023 0201 	bic.w	r2, r3, #1
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	370c      	adds	r7, #12
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f82:	78fb      	ldrb	r3, [r7, #3]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d106      	bne.n	8008f96 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	60da      	str	r2, [r3, #12]
 8008f94:	e00b      	b.n	8008fae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f96:	78fb      	ldrb	r3, [r7, #3]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d106      	bne.n	8008faa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60da      	str	r2, [r3, #12]
 8008fa8:	e001      	b.n	8008fae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e003      	b.n	8008fb6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008fae:	2032      	movs	r0, #50	; 0x32
 8008fb0:	f7fa fa3c 	bl	800342c <HAL_Delay>

  return HAL_OK;
 8008fb4:	2300      	movs	r3, #0
}
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fc0:	b084      	sub	sp, #16
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b086      	sub	sp, #24
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
 8008fca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008fce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008fda:	2300      	movs	r3, #0
 8008fdc:	613b      	str	r3, [r7, #16]
 8008fde:	e009      	b.n	8008ff4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	3340      	adds	r3, #64	; 0x40
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4413      	add	r3, r2
 8008fea:	2200      	movs	r2, #0
 8008fec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	613b      	str	r3, [r7, #16]
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	2b0e      	cmp	r3, #14
 8008ff8:	d9f2      	bls.n	8008fe0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d11c      	bne.n	800903a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800900e:	f043 0302 	orr.w	r3, r3, #2
 8009012:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009018:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	e005      	b.n	8009046 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800904c:	461a      	mov	r2, r3
 800904e:	2300      	movs	r3, #0
 8009050:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009058:	4619      	mov	r1, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009060:	461a      	mov	r2, r3
 8009062:	680b      	ldr	r3, [r1, #0]
 8009064:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009068:	2b01      	cmp	r3, #1
 800906a:	d10c      	bne.n	8009086 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906e:	2b00      	cmp	r3, #0
 8009070:	d104      	bne.n	800907c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009072:	2100      	movs	r1, #0
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 f949 	bl	800930c <USB_SetDevSpeed>
 800907a:	e008      	b.n	800908e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800907c:	2101      	movs	r1, #1
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 f944 	bl	800930c <USB_SetDevSpeed>
 8009084:	e003      	b.n	800908e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009086:	2103      	movs	r1, #3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f93f 	bl	800930c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800908e:	2110      	movs	r1, #16
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f8f3 	bl	800927c <USB_FlushTxFifo>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f911 	bl	80092c8 <USB_FlushRxFifo>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090b6:	461a      	mov	r2, r3
 80090b8:	2300      	movs	r3, #0
 80090ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c2:	461a      	mov	r2, r3
 80090c4:	2300      	movs	r3, #0
 80090c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ce:	461a      	mov	r2, r3
 80090d0:	2300      	movs	r3, #0
 80090d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090d4:	2300      	movs	r3, #0
 80090d6:	613b      	str	r3, [r7, #16]
 80090d8:	e043      	b.n	8009162 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090f0:	d118      	bne.n	8009124 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009104:	461a      	mov	r2, r3
 8009106:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	e013      	b.n	8009136 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800911a:	461a      	mov	r2, r3
 800911c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009120:	6013      	str	r3, [r2, #0]
 8009122:	e008      	b.n	8009136 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	015a      	lsls	r2, r3, #5
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	4413      	add	r3, r2
 800912c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009130:	461a      	mov	r2, r3
 8009132:	2300      	movs	r3, #0
 8009134:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009142:	461a      	mov	r2, r3
 8009144:	2300      	movs	r3, #0
 8009146:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009154:	461a      	mov	r2, r3
 8009156:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800915a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	3301      	adds	r3, #1
 8009160:	613b      	str	r3, [r7, #16]
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	429a      	cmp	r2, r3
 8009168:	d3b7      	bcc.n	80090da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800916a:	2300      	movs	r3, #0
 800916c:	613b      	str	r3, [r7, #16]
 800916e:	e043      	b.n	80091f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	015a      	lsls	r2, r3, #5
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	4413      	add	r3, r2
 8009178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009186:	d118      	bne.n	80091ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d10a      	bne.n	80091a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4413      	add	r3, r2
 8009196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800919a:	461a      	mov	r2, r3
 800919c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	e013      	b.n	80091cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b0:	461a      	mov	r2, r3
 80091b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	e008      	b.n	80091cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c6:	461a      	mov	r2, r3
 80091c8:	2300      	movs	r3, #0
 80091ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d8:	461a      	mov	r2, r3
 80091da:	2300      	movs	r3, #0
 80091dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ea:	461a      	mov	r2, r3
 80091ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	3301      	adds	r3, #1
 80091f6:	613b      	str	r3, [r7, #16]
 80091f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091fa:	693a      	ldr	r2, [r7, #16]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d3b7      	bcc.n	8009170 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800920e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009212:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009220:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	2b00      	cmp	r3, #0
 8009226:	d105      	bne.n	8009234 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f043 0210 	orr.w	r2, r3, #16
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	699a      	ldr	r2, [r3, #24]
 8009238:	4b0e      	ldr	r3, [pc, #56]	; (8009274 <USB_DevInit+0x2b4>)
 800923a:	4313      	orrs	r3, r2
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009242:	2b00      	cmp	r3, #0
 8009244:	d005      	beq.n	8009252 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	699b      	ldr	r3, [r3, #24]
 800924a:	f043 0208 	orr.w	r2, r3, #8
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009254:	2b01      	cmp	r3, #1
 8009256:	d105      	bne.n	8009264 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	699a      	ldr	r2, [r3, #24]
 800925c:	4b06      	ldr	r3, [pc, #24]	; (8009278 <USB_DevInit+0x2b8>)
 800925e:	4313      	orrs	r3, r2
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009264:	7dfb      	ldrb	r3, [r7, #23]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009270:	b004      	add	sp, #16
 8009272:	4770      	bx	lr
 8009274:	803c3800 	.word	0x803c3800
 8009278:	40000004 	.word	0x40000004

0800927c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009286:	2300      	movs	r3, #0
 8009288:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	019b      	lsls	r3, r3, #6
 800928e:	f043 0220 	orr.w	r2, r3, #32
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3301      	adds	r3, #1
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4a09      	ldr	r2, [pc, #36]	; (80092c4 <USB_FlushTxFifo+0x48>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d901      	bls.n	80092a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e006      	b.n	80092b6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	f003 0320 	and.w	r3, r3, #32
 80092b0:	2b20      	cmp	r3, #32
 80092b2:	d0f0      	beq.n	8009296 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	00030d40 	.word	0x00030d40

080092c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2210      	movs	r2, #16
 80092d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3301      	adds	r3, #1
 80092de:	60fb      	str	r3, [r7, #12]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a09      	ldr	r2, [pc, #36]	; (8009308 <USB_FlushRxFifo+0x40>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d901      	bls.n	80092ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e006      	b.n	80092fa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f003 0310 	and.w	r3, r3, #16
 80092f4:	2b10      	cmp	r3, #16
 80092f6:	d0f0      	beq.n	80092da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	00030d40 	.word	0x00030d40

0800930c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800930c:	b480      	push	{r7}
 800930e:	b085      	sub	sp, #20
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	68f9      	ldr	r1, [r7, #12]
 8009328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800932c:	4313      	orrs	r3, r2
 800932e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b084      	sub	sp, #16
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009358:	f043 0302 	orr.w	r3, r3, #2
 800935c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800935e:	2003      	movs	r0, #3
 8009360:	f7fa f864 	bl	800342c <HAL_Delay>

  return HAL_OK;
 8009364:	2300      	movs	r3, #0
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3301      	adds	r3, #1
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	4a13      	ldr	r2, [pc, #76]	; (80093d4 <USB_CoreReset+0x64>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d901      	bls.n	800938e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800938a:	2303      	movs	r3, #3
 800938c:	e01b      	b.n	80093c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	daf2      	bge.n	800937c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009396:	2300      	movs	r3, #0
 8009398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	f043 0201 	orr.w	r2, r3, #1
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3301      	adds	r3, #1
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4a09      	ldr	r2, [pc, #36]	; (80093d4 <USB_CoreReset+0x64>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d901      	bls.n	80093b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e006      	b.n	80093c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d0f0      	beq.n	80093a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	00030d40 	.word	0x00030d40

080093d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80093dc:	4b3f      	ldr	r3, [pc, #252]	; (80094dc <SystemInit+0x104>)
 80093de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093e2:	4a3e      	ldr	r2, [pc, #248]	; (80094dc <SystemInit+0x104>)
 80093e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80093e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80093ec:	4b3b      	ldr	r3, [pc, #236]	; (80094dc <SystemInit+0x104>)
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	4a3a      	ldr	r2, [pc, #232]	; (80094dc <SystemInit+0x104>)
 80093f2:	f043 0310 	orr.w	r3, r3, #16
 80093f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80093f8:	4b39      	ldr	r3, [pc, #228]	; (80094e0 <SystemInit+0x108>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 030f 	and.w	r3, r3, #15
 8009400:	2b06      	cmp	r3, #6
 8009402:	d807      	bhi.n	8009414 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8009404:	4b36      	ldr	r3, [pc, #216]	; (80094e0 <SystemInit+0x108>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f023 030f 	bic.w	r3, r3, #15
 800940c:	4a34      	ldr	r2, [pc, #208]	; (80094e0 <SystemInit+0x108>)
 800940e:	f043 0307 	orr.w	r3, r3, #7
 8009412:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8009414:	4b33      	ldr	r3, [pc, #204]	; (80094e4 <SystemInit+0x10c>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a32      	ldr	r2, [pc, #200]	; (80094e4 <SystemInit+0x10c>)
 800941a:	f043 0301 	orr.w	r3, r3, #1
 800941e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009420:	4b30      	ldr	r3, [pc, #192]	; (80094e4 <SystemInit+0x10c>)
 8009422:	2200      	movs	r2, #0
 8009424:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8009426:	4b2f      	ldr	r3, [pc, #188]	; (80094e4 <SystemInit+0x10c>)
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	492e      	ldr	r1, [pc, #184]	; (80094e4 <SystemInit+0x10c>)
 800942c:	4b2e      	ldr	r3, [pc, #184]	; (80094e8 <SystemInit+0x110>)
 800942e:	4013      	ands	r3, r2
 8009430:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009432:	4b2b      	ldr	r3, [pc, #172]	; (80094e0 <SystemInit+0x108>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0308 	and.w	r3, r3, #8
 800943a:	2b00      	cmp	r3, #0
 800943c:	d007      	beq.n	800944e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800943e:	4b28      	ldr	r3, [pc, #160]	; (80094e0 <SystemInit+0x108>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f023 030f 	bic.w	r3, r3, #15
 8009446:	4a26      	ldr	r2, [pc, #152]	; (80094e0 <SystemInit+0x108>)
 8009448:	f043 0307 	orr.w	r3, r3, #7
 800944c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800944e:	4b25      	ldr	r3, [pc, #148]	; (80094e4 <SystemInit+0x10c>)
 8009450:	2200      	movs	r2, #0
 8009452:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8009454:	4b23      	ldr	r3, [pc, #140]	; (80094e4 <SystemInit+0x10c>)
 8009456:	2200      	movs	r2, #0
 8009458:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800945a:	4b22      	ldr	r3, [pc, #136]	; (80094e4 <SystemInit+0x10c>)
 800945c:	2200      	movs	r2, #0
 800945e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8009460:	4b20      	ldr	r3, [pc, #128]	; (80094e4 <SystemInit+0x10c>)
 8009462:	4a22      	ldr	r2, [pc, #136]	; (80094ec <SystemInit+0x114>)
 8009464:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009466:	4b1f      	ldr	r3, [pc, #124]	; (80094e4 <SystemInit+0x10c>)
 8009468:	4a21      	ldr	r2, [pc, #132]	; (80094f0 <SystemInit+0x118>)
 800946a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800946c:	4b1d      	ldr	r3, [pc, #116]	; (80094e4 <SystemInit+0x10c>)
 800946e:	4a21      	ldr	r2, [pc, #132]	; (80094f4 <SystemInit+0x11c>)
 8009470:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8009472:	4b1c      	ldr	r3, [pc, #112]	; (80094e4 <SystemInit+0x10c>)
 8009474:	2200      	movs	r2, #0
 8009476:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009478:	4b1a      	ldr	r3, [pc, #104]	; (80094e4 <SystemInit+0x10c>)
 800947a:	4a1e      	ldr	r2, [pc, #120]	; (80094f4 <SystemInit+0x11c>)
 800947c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800947e:	4b19      	ldr	r3, [pc, #100]	; (80094e4 <SystemInit+0x10c>)
 8009480:	2200      	movs	r2, #0
 8009482:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009484:	4b17      	ldr	r3, [pc, #92]	; (80094e4 <SystemInit+0x10c>)
 8009486:	4a1b      	ldr	r2, [pc, #108]	; (80094f4 <SystemInit+0x11c>)
 8009488:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800948a:	4b16      	ldr	r3, [pc, #88]	; (80094e4 <SystemInit+0x10c>)
 800948c:	2200      	movs	r2, #0
 800948e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009490:	4b14      	ldr	r3, [pc, #80]	; (80094e4 <SystemInit+0x10c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a13      	ldr	r2, [pc, #76]	; (80094e4 <SystemInit+0x10c>)
 8009496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800949a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800949c:	4b11      	ldr	r3, [pc, #68]	; (80094e4 <SystemInit+0x10c>)
 800949e:	2200      	movs	r2, #0
 80094a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80094a2:	4b15      	ldr	r3, [pc, #84]	; (80094f8 <SystemInit+0x120>)
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	4a14      	ldr	r2, [pc, #80]	; (80094f8 <SystemInit+0x120>)
 80094a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80094ae:	4b13      	ldr	r3, [pc, #76]	; (80094fc <SystemInit+0x124>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	4b13      	ldr	r3, [pc, #76]	; (8009500 <SystemInit+0x128>)
 80094b4:	4013      	ands	r3, r2
 80094b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ba:	d202      	bcs.n	80094c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80094bc:	4b11      	ldr	r3, [pc, #68]	; (8009504 <SystemInit+0x12c>)
 80094be:	2201      	movs	r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80094c2:	4b11      	ldr	r3, [pc, #68]	; (8009508 <SystemInit+0x130>)
 80094c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80094c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80094ca:	4b04      	ldr	r3, [pc, #16]	; (80094dc <SystemInit+0x104>)
 80094cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80094d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80094d2:	bf00      	nop
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	e000ed00 	.word	0xe000ed00
 80094e0:	52002000 	.word	0x52002000
 80094e4:	58024400 	.word	0x58024400
 80094e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80094ec:	02020200 	.word	0x02020200
 80094f0:	01ff0000 	.word	0x01ff0000
 80094f4:	01010280 	.word	0x01010280
 80094f8:	580000c0 	.word	0x580000c0
 80094fc:	5c001000 	.word	0x5c001000
 8009500:	ffff0000 	.word	0xffff0000
 8009504:	51008108 	.word	0x51008108
 8009508:	52004000 	.word	0x52004000

0800950c <__libc_init_array>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	4d0d      	ldr	r5, [pc, #52]	; (8009544 <__libc_init_array+0x38>)
 8009510:	4c0d      	ldr	r4, [pc, #52]	; (8009548 <__libc_init_array+0x3c>)
 8009512:	1b64      	subs	r4, r4, r5
 8009514:	10a4      	asrs	r4, r4, #2
 8009516:	2600      	movs	r6, #0
 8009518:	42a6      	cmp	r6, r4
 800951a:	d109      	bne.n	8009530 <__libc_init_array+0x24>
 800951c:	4d0b      	ldr	r5, [pc, #44]	; (800954c <__libc_init_array+0x40>)
 800951e:	4c0c      	ldr	r4, [pc, #48]	; (8009550 <__libc_init_array+0x44>)
 8009520:	f000 f820 	bl	8009564 <_init>
 8009524:	1b64      	subs	r4, r4, r5
 8009526:	10a4      	asrs	r4, r4, #2
 8009528:	2600      	movs	r6, #0
 800952a:	42a6      	cmp	r6, r4
 800952c:	d105      	bne.n	800953a <__libc_init_array+0x2e>
 800952e:	bd70      	pop	{r4, r5, r6, pc}
 8009530:	f855 3b04 	ldr.w	r3, [r5], #4
 8009534:	4798      	blx	r3
 8009536:	3601      	adds	r6, #1
 8009538:	e7ee      	b.n	8009518 <__libc_init_array+0xc>
 800953a:	f855 3b04 	ldr.w	r3, [r5], #4
 800953e:	4798      	blx	r3
 8009540:	3601      	adds	r6, #1
 8009542:	e7f2      	b.n	800952a <__libc_init_array+0x1e>
 8009544:	0800969c 	.word	0x0800969c
 8009548:	0800969c 	.word	0x0800969c
 800954c:	0800969c 	.word	0x0800969c
 8009550:	080096a0 	.word	0x080096a0

08009554 <memset>:
 8009554:	4402      	add	r2, r0
 8009556:	4603      	mov	r3, r0
 8009558:	4293      	cmp	r3, r2
 800955a:	d100      	bne.n	800955e <memset+0xa>
 800955c:	4770      	bx	lr
 800955e:	f803 1b01 	strb.w	r1, [r3], #1
 8009562:	e7f9      	b.n	8009558 <memset+0x4>

08009564 <_init>:
 8009564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009566:	bf00      	nop
 8009568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956a:	bc08      	pop	{r3}
 800956c:	469e      	mov	lr, r3
 800956e:	4770      	bx	lr

08009570 <_fini>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	bf00      	nop
 8009574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009576:	bc08      	pop	{r3}
 8009578:	469e      	mov	lr, r3
 800957a:	4770      	bx	lr
