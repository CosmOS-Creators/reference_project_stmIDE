
../../../../../../Cosmos/generated/build/system/CM7/bin/CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .program_default_CM7_section_init 00000008  20000c00  08000298  00010c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .program_default_CM7_section_noInit 00000000  20000c08  20000c08  000518d0  2**0
                  CONTENTS
  3 .program_blinking_led_CM7_section_init 00000008  20001000  080002a0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .program_blinking_led_CM7_section_noInit 00000000  20001008  20001008  000518d0  2**0
                  CONTENTS
  5 .program_default_CM4_section_init 00000004  10000c00  080002a8  00020c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .program_default_CM4_section_noInit 00000000  10000c04  10000c04  000518d0  2**0
                  CONTENTS
  7 .program_blinking_led_CM4_section_init 00000004  10001000  080002ac  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .program_blinking_led_CM4_section_noInit 00000000  10001004  10001004  000518d0  2**0
                  CONTENTS
  9 .os_section_consts 00000800  38000000  080002b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .os_section_vars 00000400  38008000  08000ab0  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .os_section_funcs 00001584  08000eb0  08000eb0  00040eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         000072e4  08002434  08002434  00042434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .rodata       00000118  08009718  08009718  00049718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .ARM          00000008  08009830  08009830  00049830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .init_array   00000004  08009838  08009838  00049838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .fini_array   00000004  0800983c  0800983c  0004983c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .data         00000010  20001800  08009840  00051800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .RxDecripSection 00000060  20001810  08009850  00051810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .TxDecripSection 00000060  20001870  080098b0  00051870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .bss          00000694  200018d0  08009910  000518d0  2**2
                  ALLOC
 21 .ARM.attributes 0000002e  00000000  00000000  000518d0  2**0
                  CONTENTS, READONLY
 22 .debug_line   0002e15d  00000000  00000000  000518fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_info   00042c33  00000000  00000000  0007fa5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_abbrev 000084b5  00000000  00000000  000c268e  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_aranges 00001cd0  00000000  00000000  000cab48  2**3
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    0019327e  00000000  00000000  000cc818  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_ranges 00001828  00000000  00000000  0025fa98  2**3
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_macro  00042767  00000000  00000000  002612c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .comment      00000079  00000000  00000000  002a3a27  2**0
                  CONTENTS, READONLY
 30 .debug_frame  00006b38  00000000  00000000  002a3aa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .os_section_funcs:

08000eb0 <buffer_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_readArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b092      	sub	sp, #72	; 0x48
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
    CosmOS_BufferStateType bufferState;


    if ( buffer IS_EQUAL_TO NULL )
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d103      	bne.n	8000eca <buffer_readArray+0x1a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_IS_NULL_POINTER;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000ec8:	e046      	b.n	8000f58 <buffer_readArray+0xa8>
        CosmOS_CoreVariableType * coreVar;
        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * readPermission;


        osVar = os_getOsVar();
 8000eca:	f000 fad9 	bl	8001480 <os_getOsVar>
 8000ece:	63f8      	str	r0, [r7, #60]	; 0x3c
  * @return CosmOS_CoreVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_CoreVariableType * CILcore_getCoreVar(void)
{
    uint32_t result;
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8000ed0:	464b      	mov	r3, r9
 8000ed2:	617b      	str	r3, [r7, #20]
    return (CosmOS_CoreVariableType *)result;
 8000ed4:	697b      	ldr	r3, [r7, #20]
        coreVar = CILcore_getCoreVar();
 8000ed6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * os_getOsBufferVar(CosmOS_OsVariableType * osVar, BitWidthType bufferId)
{
    return (&(osVar->bufferVars[bufferId]));
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	4413      	add	r3, r2

        bufferVar = os_getOsBufferVar( osVar, id );
 8000eea:	637b      	str	r3, [r7, #52]	; 0x34
 8000eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eee:	623b      	str	r3, [r7, #32]
  *
  * @return CosmOS_PermissionsConfigurationType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_PermissionsConfigurationType * buffer_getBufferReadPermission(CosmOS_BufferVariableType * bufferVar)
{
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->readPermission);
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	68db      	ldr	r3, [r3, #12]

        readPermission = buffer_getBufferReadPermission( bufferVar );
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
        accessState = permission_tryAccess( readPermission, coreVar );
 8000ef8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000efc:	f000 faea 	bl	80014d4 <permission_tryAccess>
 8000f00:	62f8      	str	r0, [r7, #44]	; 0x2c

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8000f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f04:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000f08:	d103      	bne.n	8000f12 <buffer_readArray+0x62>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000f10:	e022      	b.n	8000f58 <buffer_readArray+0xa8>
 8000f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f14:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getFullCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return (bufferVar->fullCells);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	68db      	ldr	r3, [r3, #12]
        else
        {
            BitWidthType fullCellsNum;


            fullCellsNum = buffer_getFullCellsNum( bufferVar );
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28

            if ( fullCellsNum >= size)
 8000f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d316      	bcc.n	8000f52 <buffer_readArray+0xa2>
                BitWidthType userBufferIndex;

                unsigned char * userBuffer;


                userBuffer = buffer;
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
                userBufferIndex = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	643b      	str	r3, [r7, #64]	; 0x40

                while ( ( userBufferIndex < size ) )
 8000f2c:	e00c      	b.n	8000f48 <buffer_readArray+0x98>
                {
                    bufferState = buffer_pull( bufferVar, ( userBuffer + userBufferIndex ) );
 8000f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f32:	4413      	add	r3, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f38:	f000 f873 	bl	8001022 <buffer_pull>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    userBufferIndex++;
 8000f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f44:	3301      	adds	r3, #1
 8000f46:	643b      	str	r3, [r7, #64]	; 0x40
                while ( ( userBufferIndex < size ) )
 8000f48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d3ee      	bcc.n	8000f2e <buffer_readArray+0x7e>
 8000f50:	e002      	b.n	8000f58 <buffer_readArray+0xa8>
                }
            }
            else
            {
                bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM;
 8000f52:	2306      	movs	r3, #6
 8000f54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8000f58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3748      	adds	r7, #72	; 0x48
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <buffer_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_writeArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b092      	sub	sp, #72	; 0x48
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
    CosmOS_BufferStateType bufferState;


    if ( buffer IS_EQUAL_TO NULL )
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d103      	bne.n	8000f7e <buffer_writeArray+0x1a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_IS_NULL_POINTER;
 8000f76:	2304      	movs	r3, #4
 8000f78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000f7c:	e04b      	b.n	8001016 <buffer_writeArray+0xb2>
        CosmOS_CoreVariableType * coreVar;
        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * writePermission;


        osVar = os_getOsVar();
 8000f7e:	f000 fa7f 	bl	8001480 <os_getOsVar>
 8000f82:	63f8      	str	r0, [r7, #60]	; 0x3c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8000f84:	464b      	mov	r3, r9
 8000f86:	617b      	str	r3, [r7, #20]
    return (CosmOS_CoreVariableType *)result;
 8000f88:	697b      	ldr	r3, [r7, #20]
        coreVar = CILcore_getCoreVar();
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f8e:	61fb      	str	r3, [r7, #28]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	61bb      	str	r3, [r7, #24]
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	011b      	lsls	r3, r3, #4
 8000f9c:	4413      	add	r3, r2

        bufferVar = os_getOsBufferVar( osVar, id );
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8000fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa2:	623b      	str	r3, [r7, #32]
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->writePermission);
 8000fa4:	6a3b      	ldr	r3, [r7, #32]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	691b      	ldr	r3, [r3, #16]

        writePermission = buffer_getBufferWritePermission( bufferVar );
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
        accessState = permission_tryAccess( writePermission, coreVar );
 8000fac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000fae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000fb0:	f000 fa90 	bl	80014d4 <permission_tryAccess>
 8000fb4:	62f8      	str	r0, [r7, #44]	; 0x2c

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8000fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb8:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000fbc:	d103      	bne.n	8000fc6 <buffer_writeArray+0x62>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000fc4:	e027      	b.n	8001016 <buffer_writeArray+0xb2>
 8000fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fc8:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getEmptyCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return ((bufferVar->cfg->size) - (bufferVar->fullCells));
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
        else
        {
            BitWidthType emptyCellsNum;


            emptyCellsNum = buffer_getEmptyCellsNum( bufferVar );
 8000fd6:	62bb      	str	r3, [r7, #40]	; 0x28

            if ( emptyCellsNum >= size)
 8000fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d317      	bcc.n	8001010 <buffer_writeArray+0xac>
                BitWidthType userBufferIndex;

                unsigned char * userBuffer;


                userBuffer = buffer;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
                userBufferIndex = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40

                while ( ( userBufferIndex < size ) )
 8000fe8:	e00d      	b.n	8001006 <buffer_writeArray+0xa2>
                {
                    bufferState = buffer_push( bufferVar, *( userBuffer + userBufferIndex ) );
 8000fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ff6:	f000 f84e 	bl	8001096 <buffer_push>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                    userBufferIndex++;
 8001000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001002:	3301      	adds	r3, #1
 8001004:	643b      	str	r3, [r7, #64]	; 0x40
                while ( ( userBufferIndex < size ) )
 8001006:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	429a      	cmp	r2, r3
 800100c:	d3ed      	bcc.n	8000fea <buffer_writeArray+0x86>
 800100e:	e002      	b.n	8001016 <buffer_writeArray+0xb2>
                }
            }
            else
            {
                bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS;
 8001010:	2305      	movs	r3, #5
 8001012:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8001016:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800101a:	4618      	mov	r0, r3
 800101c:	3748      	adds	r7, #72	; 0x48
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <buffer_pull>:
{
 8001022:	b480      	push	{r7}
 8001024:	b089      	sub	sp, #36	; 0x24
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8001042:	61bb      	str	r3, [r7, #24]
    *data = *( osBuffer + bufferVar->tail );
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4413      	add	r3, r2
 800104c:	781a      	ldrb	r2, [r3, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells--;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	1e5a      	subs	r2, r3, #1
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	60da      	str	r2, [r3, #12]
    bufferVar->tail = ( ( bufferVar->tail + 1 ) % bufferSize );
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	3301      	adds	r3, #1
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	fbb3 f2f2 	udiv	r2, r3, r2
 8001068:	69f9      	ldr	r1, [r7, #28]
 800106a:	fb01 f202 	mul.w	r2, r1, r2
 800106e:	1a9a      	subs	r2, r3, r2
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isEmpty(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT(bufferVar->fullCells) ? BUFFER_STATE_ENUM__EMPTY : BUFFER_STATE_ENUM__OK);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	bf0c      	ite	eq
 8001080:	2301      	moveq	r3, #1
 8001082:	2300      	movne	r3, #0
 8001084:	b2db      	uxtb	r3, r3
    bufferState = buffer_isEmpty( bufferVar );
 8001086:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8001088:	7dfb      	ldrb	r3, [r7, #23]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <buffer_push>:
{
 8001096:	b480      	push	{r7}
 8001098:	b089      	sub	sp, #36	; 0x24
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	70fb      	strb	r3, [r7, #3]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 80010b8:	61bb      	str	r3, [r7, #24]
    *( osBuffer + bufferVar->head ) = data;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4413      	add	r3, r2
 80010c2:	78fa      	ldrb	r2, [r7, #3]
 80010c4:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells++;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	60da      	str	r2, [r3, #12]
    bufferVar->head = ( ( bufferVar->head + 1 ) % bufferSize );
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	3301      	adds	r3, #1
 80010d6:	69fa      	ldr	r2, [r7, #28]
 80010d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80010dc:	69f9      	ldr	r1, [r7, #28]
 80010de:	fb01 f202 	mul.w	r2, r1, r2
 80010e2:	1a9a      	subs	r2, r3, r2
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isFull(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT((bufferVar->cfg->size) ^ (bufferVar->fullCells)) ? \
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	68db      	ldr	r3, [r3, #12]
    BUFFER_STATE_ENUM__FULL : BUFFER_STATE_ENUM__OK);
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d101      	bne.n	80010fe <buffer_push+0x68>
 80010fa:	2302      	movs	r3, #2
 80010fc:	e000      	b.n	8001100 <buffer_push+0x6a>
 80010fe:	2300      	movs	r3, #0
    bufferState = buffer_isFull( bufferVar );
 8001100:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8001102:	7dfb      	ldrb	r3, [r7, #23]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3724      	adds	r7, #36	; 0x24
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <bufferDouble_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_readArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	; 0x38
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 800111e:	f000 f9af 	bl	8001480 <os_getOsVar>
 8001122:	6338      	str	r0, [r7, #48]	; 0x30
 8001124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001126:	623b      	str	r3, [r7, #32]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferDoubleVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferDoubleVariableType * os_getOsBufferDoubleVar(CosmOS_OsVariableType * osVar, BitWidthType bufferDoubleId)
{
    return (&(osVar->bufferDoubleVars[bufferDoubleId]));
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	68d9      	ldr	r1, [r3, #12]
 8001130:	69fa      	ldr	r2, [r7, #28]
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 800113e:	78fb      	ldrb	r3, [r7, #3]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <bufferDouble_readArray+0x3a>
 8001144:	2b01      	cmp	r3, #1
 8001146:	d00b      	beq.n	8001160 <bufferDouble_readArray+0x50>
        }

        default :
        {
            /* PANIC */
            break;
 8001148:	e015      	b.n	8001176 <bufferDouble_readArray+0x66>
 800114a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114c:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * bufferDouble_getBufferDoubleUserBuffer(CosmOS_BufferDoubleVariableType * bufferDoubleVar)
{
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 800115c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800115e:	e00a      	b.n	8001176 <bufferDouble_readArray+0x66>
 8001160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001162:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8001172:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8001174:	bf00      	nop
 8001176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001178:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->id);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_readArray( bufferId, buffer, size );
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001188:	f7ff fe92 	bl	8000eb0 <buffer_readArray>
 800118c:	4603      	mov	r3, r0
 800118e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8001192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001196:	4618      	mov	r0, r3
 8001198:	3738      	adds	r7, #56	; 0x38
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <bufferDouble_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_writeArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b08e      	sub	sp, #56	; 0x38
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 80011ac:	f000 f968 	bl	8001480 <os_getOsVar>
 80011b0:	6338      	str	r0, [r7, #48]	; 0x30
 80011b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b4:	623b      	str	r3, [r7, #32]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	6a3b      	ldr	r3, [r7, #32]
 80011bc:	68d9      	ldr	r1, [r3, #12]
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d002      	beq.n	80011d8 <bufferDouble_writeArray+0x3a>
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d00b      	beq.n	80011ee <bufferDouble_writeArray+0x50>
        }

        default :
        {
            /* PANIC */
            break;
 80011d6:	e015      	b.n	8001204 <bufferDouble_writeArray+0x66>
 80011d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011da:	61bb      	str	r3, [r7, #24]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 80011ea:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80011ec:	e00a      	b.n	8001204 <bufferDouble_writeArray+0x66>
 80011ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f0:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8001200:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8001202:	bf00      	nop
 8001204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_writeArray( bufferId, buffer, size );
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	68b9      	ldr	r1, [r7, #8]
 8001214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001216:	f7ff fea5 	bl	8000f64 <buffer_writeArray>
 800121a:	4603      	mov	r3, r0
 800121c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8001220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001224:	4618      	mov	r0, r3
 8001226:	3738      	adds	r7, #56	; 0x38
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <core_getCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_CoreVariableType * core_getCoreVar(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8001232:	464b      	mov	r3, r9
 8001234:	607b      	str	r3, [r7, #4]
    return (CosmOS_CoreVariableType *)result;
 8001236:	687b      	ldr	r3, [r7, #4]
    return CILcore_getCoreVar();
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <core_setSchedulableIntoCurrentContext>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void core_setSchedulableIntoCurrentContext(CosmOS_CoreVariableType * coreVar, CosmOS_SchedulableVariableType * schedulableVar)
{
 8001244:	b480      	push	{r7}
 8001246:	b08d      	sub	sp, #52	; 0x34
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	60fb      	str	r3, [r7, #12]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType schedulable_getProgramId(CosmOS_SchedulableVariableType * schedulable)
{
    return (schedulable->cfg->programId);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699b      	ldr	r3, [r3, #24]
    BitWidthType programId;

    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulableVar );
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001260:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_ProgramVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ProgramVariableType * core_getCoreProgramVar(CosmOS_CoreVariableType * core, BitWidthType programIterator)
{
    return (&(core->programVars[programIterator]));
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	68d9      	ldr	r1, [r3, #12]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	440b      	add	r3, r1
    programVar = core_getCoreProgramVar( coreVar, programId );
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	61bb      	str	r3, [r7, #24]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreProgramInExecution(CosmOS_CoreVariableType * core, CosmOS_ProgramVariableType * programInExecutionParam)
{
    core->programInExecution = programInExecutionParam;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	609a      	str	r2, [r3, #8]
}
 8001282:	bf00      	nop
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	623b      	str	r3, [r7, #32]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreSchedulableInExecution(CosmOS_CoreVariableType * core, CosmOS_SchedulableVariableType * schedulableInExecutionParam)
{
    core->schedulableInExecution = schedulableInExecutionParam;
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	6a3a      	ldr	r2, [r7, #32]
 8001290:	605a      	str	r2, [r3, #4]
}
 8001292:	bf00      	nop

    core_setCoreProgramInExecution( coreVar, programVar );
    core_setCoreSchedulableInExecution( coreVar, schedulableVar );
}
 8001294:	bf00      	nop
 8001296:	3734      	adds	r7, #52	; 0x34
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <coreSync_getBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_getBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b096      	sub	sp, #88	; 0x58
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
    return (&(core->barrierVars[barrierId]));
 80012b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
    CosmOS_BarrierVariableType * barrierVar;

    volatile CosmOS_BarrierStateType barrierState;


    barrierVar = core_getBarrierVar( coreVar, barrierId );
 80012bc:	653b      	str	r3, [r7, #80]	; 0x50
 80012be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
 80012c2:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void coreSync_setBarrierState(CosmOS_BarrierVariableType * barrier, CosmOS_BarrierStateType barrierStateParam)
{
    barrier->barrierState = barrierStateParam;
 80012c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012cc:	601a      	str	r2, [r3, #0]
}
 80012ce:	bf00      	nop
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__REACHED);

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    osVar = os_getOsVar();
 80012d0:	f000 f8d6 	bl	8001480 <os_getOsVar>
 80012d4:	64f8      	str	r0, [r7, #76]	; 0x4c
 80012d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d8:	637b      	str	r3, [r7, #52]	; 0x34
    return (osVar->cfg->numberOfCores);
 80012da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 80012e0:	64bb      	str	r3, [r7, #72]	; 0x48

    numberOfSynchronizedCores = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	657b      	str	r3, [r7, #84]	; 0x54
 80012e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012ec:	63bb      	str	r3, [r7, #56]	; 0x38
    return (&(osVar->coreVars[coreId]));
 80012ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	015b      	lsls	r3, r3, #5
 80012f6:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, numberOfSynchronizedCores );
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	647b      	str	r3, [r7, #68]	; 0x44
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	643b      	str	r3, [r7, #64]	; 0x40
 8001302:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001304:	695a      	ldr	r2, [r3, #20]
 8001306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
    barrierVar = core_getBarrierVar( coreVar, barrierId );
 800130c:	653b      	str	r3, [r7, #80]	; 0x50

    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 800130e:	e026      	b.n	800135e <coreSync_getBarrier+0xbe>
 8001310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001312:	623b      	str	r3, [r7, #32]
    return (barrier->barrierState);
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	681b      	ldr	r3, [r3, #0]
    {
        barrierState = coreSync_getBarrierState( barrierVar );
 8001318:	60fb      	str	r3, [r7, #12]

        if ( ( barrierState IS_EQUAL_TO BARRIER_STATE_ENUM__REACHED ) )
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8001320:	d11d      	bne.n	800135e <coreSync_getBarrier+0xbe>
        {
            numberOfSynchronizedCores++;
 8001322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001324:	3301      	adds	r3, #1
 8001326:	657b      	str	r3, [r7, #84]	; 0x54

            coreVar = os_getCoreVar( osVar, ( numberOfSynchronizedCores % numberOfCores ) );
 8001328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800132c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001330:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001332:	fb01 f202 	mul.w	r2, r1, r2
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800133a:	617a      	str	r2, [r7, #20]
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	015b      	lsls	r3, r3, #5
 8001346:	4413      	add	r3, r2
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
            barrierVar = core_getBarrierVar( coreVar, barrierId );
 800135c:	653b      	str	r3, [r7, #80]	; 0x50
    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 800135e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001362:	429a      	cmp	r2, r3
 8001364:	d1d4      	bne.n	8001310 <coreSync_getBarrier+0x70>
        }
    }
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	3758      	adds	r7, #88	; 0x58
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <coreSync_reactivateBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_reactivateBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	; 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
    CosmOS_BarrierVariableType * barrierVar;

    cosmosAssert( barrierId IS_EQUAL_TO SCHEDULERS_SYNC_ID );
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	2b03      	cmp	r3, #3
 800137e:	bf0c      	ite	eq
 8001380:	2301      	moveq	r3, #1
 8001382:	2300      	movne	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	60bb      	str	r3, [r7, #8]
    }
    else
    {

    }
}
 8001388:	bf00      	nop
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2

    barrierVar = core_getBarrierVar( coreVar, barrierId );
 800139c:	61fb      	str	r3, [r7, #28]
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	61bb      	str	r3, [r7, #24]
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
    barrier->barrierState = barrierStateParam;
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	bf00      	nop
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__ACTIVATED );

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */
}
 80013ae:	bf00      	nop
 80013b0:	3724      	adds	r7, #36	; 0x24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <deviceIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void deviceIO_togglePin(BitWidthType id, void *GPIOx, BitWidthType GPIO_Pin)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b084      	sub	sp, #16
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
    CILGPIO_togglePin( GPIOx, GPIO_Pin );
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	68b8      	ldr	r0, [r7, #8]
 80013ca:	f000 fd70 	bl	8001eae <CILGPIO_togglePin>
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <memoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_init(void)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
    CILmemoryProtection_init();
 80013da:	f000 fd77 	bl	8001ecc <CILmemoryProtection_init>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <memoryProtection_setMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_setMemoryProtection(CosmOS_CoreVariableType * core,CosmOS_SchedulableVariableType  * schedulable)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b096      	sub	sp, #88	; 0x58
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulable );
 80013f6:	657b      	str	r3, [r7, #84]	; 0x54
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013fe:	613b      	str	r3, [r7, #16]
    return (&(core->programVars[programIterator]));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	68d9      	ldr	r1, [r3, #12]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
    programVar = core_getCoreProgramVar( core, programId );
 8001410:	653b      	str	r3, [r7, #80]	; 0x50
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	61bb      	str	r3, [r7, #24]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]

    stack = schedulable_getStack( schedulable );
 800141c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800141e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackLowAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackLowAddress);
 8001426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001428:	685b      	ldr	r3, [r3, #4]
    stackLowAddress = stack_getStackLowAddress( stack );
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
 800142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142e:	623b      	str	r3, [r7, #32]
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackHighAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackHighAddress);
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 8001434:	61fb      	str	r3, [r7, #28]
    CILmemoryProtection_setStackOverflowProtection( stackLowAddress, stackHighAddress );
 8001436:	69f9      	ldr	r1, [r7, #28]
 8001438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800143a:	f000 fe47 	bl	80020cc <CILmemoryProtection_setStackOverflowProtection>
}
 800143e:	bf00      	nop
 8001440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48
 8001444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001446:	647b      	str	r3, [r7, #68]	; 0x44
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemorySize(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemorySize);
 8001448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68db      	ldr	r3, [r3, #12]
    size = program_getProgramMemorySize( program );
 800144e:	643b      	str	r3, [r7, #64]	; 0x40
 8001450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryLowAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryLowAddress);
 8001454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	691b      	ldr	r3, [r3, #16]
    lowAddress = program_getProgramMemoryLowAddress( program );
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
 800145c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryHighAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryHighAddress);
 8001460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	695b      	ldr	r3, [r3, #20]
    highAddress = program_getProgramMemoryHighAddress( program );
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
    if ( size )
 8001468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <memoryProtection_setMemoryProtection+0x94>
        CILmemoryProtection_setProgramMemoryProtection( lowAddress, highAddress );
 800146e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001470:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001472:	f000 fe87 	bl	8002184 <CILmemoryProtection_setProgramMemoryProtection>
}
 8001476:	bf00      	nop

    memoryProtection_setStackOverflowProtection( stack );
    memoryProtection_setProgramMemoryProtection( programVar );
}
 8001478:	bf00      	nop
 800147a:	3758      	adds	r7, #88	; 0x58
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <os_getOsVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_OsVariableType * os_getOsVar(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
    return &OsVar;
 8001484:	4b02      	ldr	r3, [pc, #8]	; (8001490 <os_getOsVar+0x10>)
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	380080fc 	.word	0x380080fc

08001494 <os_start>:
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    scheduler_start();
 8001498:	f000 fa3b 	bl	8001912 <scheduler_start>
};
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <osInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osInit_init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_OsVariableType * osVar;

    switchMemoryProtection_init();
 80014a6:	f7ff ff96 	bl	80013d6 <memoryProtection_init>

    osVar = os_getOsVar();
 80014aa:	f7ff ffe9 	bl	8001480 <os_getOsVar>
 80014ae:	6078      	str	r0, [r7, #4]

    CILcore_setCoreVar(osVar);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fcd6 	bl	8001e62 <CILcore_setCoreVar>

    coreVar = core_getCoreVar();
 80014b6:	f7ff feb9 	bl	800122c <core_getCoreVar>
 80014ba:	6038      	str	r0, [r7, #0]

    stackInit_init( coreVar );
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f000 fbd4 	bl	8001c6a <stackInit_init>

    //init MPU
    //init DMA to buffers
    //Maybe better have here CILmicroInit()

    coreSync_getBarrier( coreVar, OS_INIT_ID );
 80014c2:	2100      	movs	r1, #0
 80014c4:	6838      	ldr	r0, [r7, #0]
 80014c6:	f7ff feeb 	bl	80012a0 <coreSync_getBarrier>

};
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <permission_tryAccess>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_AccessStateType permission_tryAccess(CosmOS_PermissionsConfigurationType * permission,CosmOS_CoreVariableType * coreVar)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	60bb      	str	r3, [r7, #8]
    return (core->schedulableInExecution);
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	685b      	ldr	r3, [r3, #4]
    CosmOS_AccessStateType accessState;

    CosmOS_SchedulableVariableType * schedulableVar;

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 80014e6:	61fb      	str	r3, [r7, #28]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	613b      	str	r3, [r7, #16]
    cosmosAssert( IS_NOT( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] & \
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	491b      	ldr	r1, [pc, #108]	; (8001568 <permission_tryAccess+0x94>)
 80014fc:	5ccb      	ldrb	r3, [r1, r3]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	4816      	ldr	r0, [pc, #88]	; (8001568 <permission_tryAccess+0x94>)
 8001510:	5cc3      	ldrb	r3, [r0, r3]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	440b      	add	r3, r1
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4013      	ands	r3, r2
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf0c      	ite	eq
 800151e:	2301      	moveq	r3, #1
 8001520:	2300      	movne	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	bf00      	nop
    return ((( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] >> schedulableVar->cfg->id ) & BITLOCK_MASK ) ? \
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	490d      	ldr	r1, [pc, #52]	; (8001568 <permission_tryAccess+0x94>)
 8001534:	5ccb      	ldrb	r3, [r1, r3]
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	fa22 f303 	lsr.w	r3, r2, r3
 8001546:	f003 0301 	and.w	r3, r3, #1
            ACCESS_STATE_ENUM__ALLOWED : ACCESS_STATE_ENUM__DENIED );
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <permission_tryAccess+0x7e>
 800154e:	2300      	movs	r3, #0
 8001550:	e001      	b.n	8001556 <permission_tryAccess+0x82>
 8001552:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    accessState = permission_trySchedulableAccess( permission, schedulableVar );
 8001556:	61bb      	str	r3, [r7, #24]

    return accessState;
 8001558:	69bb      	ldr	r3, [r7, #24]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	38000074 	.word	0x38000074

0800156c <schedulable_setExecutionStateToFinished>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void schedulable_setExecutionStateToFinished(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8001572:	f7ff fe5b 	bl	800122c <core_getCoreVar>
 8001576:	6178      	str	r0, [r7, #20]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	2302      	movs	r3, #2
 8001588:	72fb      	strb	r3, [r7, #11]
  *
  * @return CosmOS_SchedulableStateType
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setState(CosmOS_SchedulableVariableType * schedulable, CosmOS_SchedulableStateType stateParam)
{
    schedulable->state = stateParam;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	7afa      	ldrb	r2, [r7, #11]
 800158e:	711a      	strb	r2, [r3, #4]
}
 8001590:	bf00      	nop

    schedulable_setState( schedulableVar, SCHEDULABLE_INSTANCE_ENUM__EXECUTED );
};
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <scheduler_performanceScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_performanceScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks)
{
 800159a:	b480      	push	{r7}
 800159c:	b093      	sub	sp, #76	; 0x4c
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	613b      	str	r3, [r7, #16]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType scheduler_getSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler)
{
    return (scheduler->threadListIterator);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	68db      	ldr	r3, [r3, #12]
        threadListElementsNum;

    CosmOS_ThreadVariableType *threadVar;


    threadListIterator = scheduler_getSchedulerThreadListIterator(schedulerVar);
 80015b0:	647b      	str	r3, [r7, #68]	; 0x44
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	617b      	str	r3, [r7, #20]
    return (scheduler->cfg->threadListElementsNum);
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	695b      	ldr	r3, [r3, #20]
    threadListElementsNum = scheduler_getSchedulerThreadListElementsNum(schedulerVar);
 80015bc:	643b      	str	r3, [r7, #64]	; 0x40

    cosmosAssert(threadListIterator < threadListElementsNum);
 80015be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80015c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015c2:	429a      	cmp	r2, r3
 80015c4:	bf34      	ite	cc
 80015c6:	2301      	movcc	r3, #1
 80015c8:	2300      	movcs	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	61bb      	str	r3, [r7, #24]
 80015ce:	bf00      	nop
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	623b      	str	r3, [r7, #32]
 80015d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015d6:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * scheduler_getSchedulerThreadListThreadVar(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIterator)
{
    return (CosmOS_ThreadVariableType *)(scheduler->cfg->threadList[threadListIterator].threadVar);
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	681b      	ldr	r3, [r3, #0]

    threadVar = scheduler_getSchedulerThreadListThreadVar(schedulerVar, threadListIterator);
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * thread_getThreadSchedulable(CosmOS_ThreadVariableType * thread)
{
    return (CosmOS_SchedulableVariableType *)(thread->schedulable);
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = thread_getThreadSchedulable(threadVar);
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = schedulable_getStackPointer(*schedulableVar);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
    return (schedulable->stackPointer);
 80015fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	601a      	str	r2, [r3, #0]

    threadListIterator = ((threadListIterator + 1) % threadListElementsNum);
 8001602:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001604:	3301      	adds	r3, #1
 8001606:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001608:	fbb3 f2f2 	udiv	r2, r3, r2
 800160c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800160e:	fb01 f202 	mul.w	r2, r1, r2
 8001612:	1a9b      	subs	r3, r3, r2
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	633b      	str	r3, [r7, #48]	; 0x30
 800161a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIteratorParam)
{
    scheduler->threadListIterator = threadListIteratorParam;
 800161e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001620:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001622:	60da      	str	r2, [r3, #12]
}
 8001624:	bf00      	nop
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->preemptTick);
 800162a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
    scheduler_setSchedulerThreadListIterator(schedulerVar, threadListIterator);

    preemptTick = scheduler_getSchedulerPreemptTick(schedulerVar);
 8001630:	63bb      	str	r3, [r7, #56]	; 0x38
    *timerTicks = preemptTick;
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001636:	601a      	str	r2, [r3, #0]
}
 8001638:	bf00      	nop
 800163a:	374c      	adds	r7, #76	; 0x4c
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <scheduler_classicScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_classicScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks, BitWidthType startTick, BitWidthType currentTick)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	617b      	str	r3, [r7, #20]
    return (CosmOS_TaskVariableType *)(scheduler->cfg->idleTaskVar);
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    CosmOS_TaskVariableType * taskVar;


    taskVar = scheduler_getSchedulerIdleTaskVar( schedulerVar );
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * task_getTaskSchedulable(CosmOS_TaskVariableType * task)
{
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = task_getTaskSchedulable( taskVar );
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fad5 	bl	8001c1e <stackInit_schedulableStackInit>
 8001674:	4602      	mov	r2, r0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	601a      	str	r2, [r3, #0]

    if ( startTick < currentTick )
 800167a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167e:	429a      	cmp	r2, r3
 8001680:	d207      	bcs.n	8001692 <scheduler_classicScheduling+0x4e>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->lastToFirstTaskTicks);
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	699a      	ldr	r2, [r3, #24]
    {
        *timerTicks = scheduler_getSchedulerLastToFirstTaskTicks( schedulerVar );
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *timerTicks = startTick - currentTick;
    }
}
 8001690:	e004      	b.n	800169c <scheduler_classicScheduling+0x58>
        *timerTicks = startTick - currentTick;
 8001692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	1ad2      	subs	r2, r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <scheduler_scheduleNextInstance>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType scheduler_scheduleNextInstance(StackPointerType stackPointer)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0b4      	sub	sp, #208	; 0xd0
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;
    CosmOS_SchedulableVariableType * priorSchedulableVar;


    coreVar = core_getCoreVar();
 80016ac:	f7ff fdbe 	bl	800122c <core_getCoreVar>
 80016b0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 80016b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return (core->schedulerVar);
 80016bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80016c0:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 80016c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80016c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80016ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (core->schedulableInExecution);
 80016ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016d2:	685b      	ldr	r3, [r3, #4]
    priorSchedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 80016d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80016d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->cfg->hyperTick);
 80016e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 80016e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80016ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80016f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->schedulerState);
 80016f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016f8:	7c1b      	ldrb	r3, [r3, #16]
    schedulerState = scheduler_getSchedulerState( schedulerVar );
 80016fa:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 80016fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (scheduler->currentTick);
 8001706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800170a:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 800170c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001714:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->scheduleTableIterator);
 8001718:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800171c:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->cfg->scheduleTableElementsNum);
 8001728:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8001730:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    if ( scheduleTableElementsNum )
 8001734:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d01c      	beq.n	8001776 <scheduler_scheduleNextInstance+0xd2>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001742:	429a      	cmp	r2, r3
 8001744:	bf8c      	ite	hi
 8001746:	2301      	movhi	r3, #1
 8001748:	2300      	movls	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001750:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001758:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800175c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8001760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	4413      	add	r3, r2
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    }

    //this should be moved to the sysTick interrupt with higher priority to have faster response - without else, that should stay here
    if ( schedulerState IS_EQUAL_TO SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK )
 8001776:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <scheduler_scheduleNextInstance+0xea>
 800177e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001782:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (schedulable->state);
 8001784:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001786:	791b      	ldrb	r3, [r3, #4]
    {
        CosmOS_SchedulableStateType schedulableState;

        schedulableState = schedulable_getState( priorSchedulableVar );
 8001788:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 800178c:	e008      	b.n	80017a0 <scheduler_scheduleNextInstance+0xfc>
 800178e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001792:	67bb      	str	r3, [r7, #120]	; 0x78
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	677b      	str	r3, [r7, #116]	; 0x74
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setStackPointer(CosmOS_SchedulableVariableType * schedulable, StackPointerType stackPointerParam)
{
    schedulable->stackPointer = stackPointerParam;
 8001798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800179a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800179c:	609a      	str	r2, [r3, #8]
}
 800179e:	bf00      	nop
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_setStackPointer( priorSchedulableVar, stackPointer );
    }

    if ( scheduleTableElementsNum AND startTick IS_EQUAL_TO currentTick )
 80017a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d060      	beq.n	800186a <scheduler_scheduleNextInstance+0x1c6>
 80017a8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80017ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d15a      	bne.n	800186a <scheduler_scheduleNextInstance+0x1c6>
 80017b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80017b8:	673b      	str	r3, [r7, #112]	; 0x70
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017c0:	f107 0310 	add.w	r3, r7, #16
 80017c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80017c6:	f107 0318 	add.w	r3, r7, #24
 80017ca:	667b      	str	r3, [r7, #100]	; 0x64
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	663b      	str	r3, [r7, #96]	; 0x60
 80017d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 80017d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80017de:	65ba      	str	r2, [r7, #88]	; 0x58
 80017e0:	657b      	str	r3, [r7, #84]	; 0x54
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 80017e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	653b      	str	r3, [r7, #80]	; 0x50
 80017f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80017f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80017f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017f8:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 80017fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80017fc:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 80017fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fa0b 	bl	8001c1e <stackInit_schedulableStackInit>
 8001808:	4602      	mov	r2, r0
 800180a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800180c:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 800180e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	64bb      	str	r3, [r7, #72]	; 0x48
 8001814:	2301      	movs	r3, #1
 8001816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    schedulable->state = stateParam;
 800181a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800181c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001820:	711a      	strb	r2, [r3, #4]
}
 8001822:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8001824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800182c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001830:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001832:	fb01 f202 	mul.w	r2, r1, r2
 8001836:	1a9a      	subs	r2, r3, r2
 8001838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800183a:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 800183c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001842:	643a      	str	r2, [r7, #64]	; 0x40
 8001844:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8001846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001848:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800184a:	609a      	str	r2, [r3, #8]
}
 800184c:	bf00      	nop
 800184e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
    return (task->cfg->wcet);
 8001852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
    *timerTicks = wcet;
 800185a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800185c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800185e:	601a      	str	r2, [r3, #0]
}
 8001860:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8001862:	2301      	movs	r3, #1
 8001864:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8001868:	e00c      	b.n	8001884 <scheduler_scheduleNextInstance+0x1e0>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 800186a:	f107 0318 	add.w	r3, r7, #24
 800186e:	f107 0210 	add.w	r2, r7, #16
 8001872:	f107 010c 	add.w	r1, r7, #12
 8001876:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800187a:	f7ff fe8e 	bl	800159a <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 800187e:	2302      	movs	r3, #2
 8001880:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	623a      	str	r2, [r7, #32]
 800188a:	61fb      	str	r3, [r7, #28]
    schedulable->stackPointer = stackPointerParam;
 800188c:	6a3b      	ldr	r3, [r7, #32]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	609a      	str	r2, [r3, #8]
}
 8001892:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4619      	mov	r1, r3
 8001898:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800189c:	f7ff fcd2 	bl	8001244 <core_setSchedulableIntoCurrentContext>
 80018a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018a6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_SchedulerStateType schedulerStateParam)
{
    scheduler->schedulerState = schedulerStateParam;
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80018b4:	741a      	strb	r2, [r3, #16]
}
 80018b6:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    currentTick = ( ( currentTick + timerTicks ) % hyperTick );
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018c4:	4413      	add	r3, r2
 80018c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80018ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80018ce:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80018d2:	fb01 f202 	mul.w	r2, r1, r2
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
 80018e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    scheduler->currentTick = currentTickParam;
 80018e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ec:	605a      	str	r2, [r3, #4]
}
 80018ee:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4619      	mov	r1, r3
 80018f4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80018f8:	f7ff fd73 	bl	80013e2 <memoryProtection_setMemoryProtection>

    CILsysTimer_setTicks( timerTicks, schedulersSyncState );
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fd5e 	bl	80023c4 <CILsysTimer_setTicks>

    return stackPointerRetVal;
 8001908:	693b      	ldr	r3, [r7, #16]
};
 800190a:	4618      	mov	r0, r3
 800190c:	37d0      	adds	r7, #208	; 0xd0
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <scheduler_start>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_start(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b0aa      	sub	sp, #168	; 0xa8
 8001916:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8001918:	f7ff fc88 	bl	800122c <core_getCoreVar>
 800191c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8001920:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001924:	677b      	str	r3, [r7, #116]	; 0x74
    return (core->schedulerVar);
 8001926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001928:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 800192a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800192e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001932:	67bb      	str	r3, [r7, #120]	; 0x78
    return (scheduler->cfg->hyperTick);
 8001934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 800193a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800193e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001942:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (scheduler->currentTick);
 8001944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001946:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8001948:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800194c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (scheduler->scheduleTableIterator);
 8001954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001958:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTableElementsNum);
 8001964:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 800196c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if ( scheduleTableElementsNum )
 8001970:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d017      	beq.n	80019a8 <scheduler_start+0x96>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800197e:	429a      	cmp	r2, r3
 8001980:	bf8c      	ite	hi
 8001982:	2301      	movhi	r3, #1
 8001984:	2300      	movls	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	66bb      	str	r3, [r7, #104]	; 0x68
 800198a:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001992:	673a      	str	r2, [r7, #112]	; 0x70
 8001994:	66fb      	str	r3, [r7, #108]	; 0x6c
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8001996:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }

    if ( scheduleTableElementsNum AND (startTick IS_EQUAL_TO currentTick) )
 80019a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d05e      	beq.n	8001a6e <scheduler_start+0x15c>
 80019b0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80019b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d158      	bne.n	8001a6e <scheduler_start+0x15c>
 80019bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019c0:	667b      	str	r3, [r7, #100]	; 0x64
 80019c2:	463b      	mov	r3, r7
 80019c4:	663b      	str	r3, [r7, #96]	; 0x60
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	657b      	str	r3, [r7, #84]	; 0x54
 80019d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019da:	653b      	str	r3, [r7, #80]	; 0x50
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 80019dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80019e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80019e4:	64bb      	str	r3, [r7, #72]	; 0x48
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 80019e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4413      	add	r3, r2
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	647b      	str	r3, [r7, #68]	; 0x44
 80019f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019f8:	643b      	str	r3, [r7, #64]	; 0x40
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 80019fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019fc:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 80019fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a00:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8001a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f909 	bl	8001c1e <stackInit_schedulableStackInit>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a10:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 8001a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    schedulable->state = stateParam;
 8001a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a20:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8001a24:	711a      	strb	r2, [r3, #4]
}
 8001a26:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8001a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a30:	fbb3 f2f2 	udiv	r2, r3, r2
 8001a34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001a36:	fb01 f202 	mul.w	r2, r1, r2
 8001a3a:	1a9a      	subs	r2, r3, r2
 8001a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3e:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8001a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001a46:	637a      	str	r2, [r7, #52]	; 0x34
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8001a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a4e:	609a      	str	r2, [r3, #8]
}
 8001a50:	bf00      	nop
 8001a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (task->cfg->wcet);
 8001a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    *timerTicks = wcet;
 8001a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a62:	601a      	str	r2, [r3, #0]
}
 8001a64:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8001a66:	2301      	movs	r3, #1
 8001a68:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8001a6c:	e00b      	b.n	8001a86 <scheduler_start+0x174>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	f107 0208 	add.w	r2, r7, #8
 8001a76:	4639      	mov	r1, r7
 8001a78:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001a7c:	f7ff fd8d 	bl	800159a <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8001a80:	2302      	movs	r3, #2
 8001a82:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	617a      	str	r2, [r7, #20]
 8001a8c:	613b      	str	r3, [r7, #16]
    schedulable->stackPointer = stackPointerParam;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]
}
 8001a94:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001a9e:	f7ff fbd1 	bl	8001244 <core_setSchedulableIntoCurrentContext>
 8001aa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aa6:	61fb      	str	r3, [r7, #28]
 8001aa8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001aac:	76fb      	strb	r3, [r7, #27]
    scheduler->schedulerState = schedulerStateParam;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	7efa      	ldrb	r2, [r7, #27]
 8001ab2:	741a      	strb	r2, [r3, #16]
}
 8001ab4:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    currentTick = ( currentTick + timerTicks ) % hyperTick;
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ac2:	4413      	add	r3, r2
 8001ac4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ac8:	fbb3 f2f2 	udiv	r2, r3, r2
 8001acc:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001ad0:	fb01 f202 	mul.w	r2, r1, r2
 8001ad4:	1a9b      	subs	r3, r3, r2
 8001ad6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ada:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ae4:	623b      	str	r3, [r7, #32]
    scheduler->currentTick = currentTickParam;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	6a3a      	ldr	r2, [r7, #32]
 8001aea:	605a      	str	r2, [r3, #4]
}
 8001aec:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar , schedulableVar );
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001af6:	f7ff fc74 	bl	80013e2 <memoryProtection_setMemoryProtection>

    CILsysTimer_setTicks( timerTicks, schedulersSyncState );
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 fc5f 	bl	80023c4 <CILsysTimer_setTicks>

    CILstack_setStackPointer( stackPointerRetVal );
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 fbda 	bl	80022c2 <CILstack_setStackPointer>
};
 8001b0e:	bf00      	nop
 8001b10:	37a8      	adds	r7, #168	; 0xa8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <schedulerSync_sync>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SchedulerSyncStateType schedulerSync_sync(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_CoreVariableType * coreVar, BitWidthType currentTick, BitWidthType hyperTick)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b096      	sub	sp, #88	; 0x58
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	603b      	str	r3, [r7, #0]

    CosmOS_BooleanType syncInitState;

    CosmOS_SchedulerSyncStateType schedulerState = SCHEDULER_SYNC_STATE_ENUM__NOT_IN_SYNC;
 8001b24:	2300      	movs	r3, #0
 8001b26:	657b      	str	r3, [r7, #84]	; 0x54
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->syncInitState);
 8001b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b2e:	7e1b      	ldrb	r3, [r3, #24]


    syncInitState = scheduler_getSchedulerSyncInitState( schedulerVar );
 8001b30:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    if ( __COSMOS_UNLIKELY( syncInitState IS_EQUAL_TO False ) )
 8001b34:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf0c      	ite	eq
 8001b3c:	2301      	moveq	r3, #1
 8001b3e:	2300      	movne	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d030      	beq.n	8001ba8 <schedulerSync_sync+0x92>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->firstSyncTaskStartTick);
 8001b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
    {
        BitWidthType firstSyncTaskStartTick;


        firstSyncTaskStartTick = scheduler_getSchedulerFirstSyncTaskStartTick( schedulerVar );
 8001b50:	647b      	str	r3, [r7, #68]	; 0x44

        if ( firstSyncTaskStartTick IS_EQUAL_TO currentTick )
 8001b52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d150      	bne.n	8001bfc <schedulerSync_sync+0xe6>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	623b      	str	r3, [r7, #32]
    return (scheduler->cfg->syncTicks);
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks,
                          nextTick;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8001b64:	643b      	str	r3, [r7, #64]	; 0x40

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b6a:	4413      	add	r3, r2
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	fb01 f202 	mul.w	r2, r1, r2
 8001b78:	1a9b      	subs	r3, r3, r2
 8001b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b82:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerNextSyncTick(CosmOS_SchedulerVariableType * scheduler, BitWidthType paramNextSyncTick)
{
    scheduler->nextSyncTick = paramNextSyncTick;
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b88:	615a      	str	r2, [r3, #20]
}
 8001b8a:	bf00      	nop
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerSyncInitState(CosmOS_SchedulerVariableType * scheduler, CosmOS_BooleanType paramSyncInitState)
{
    scheduler->syncInitState = paramSyncInitState;
 8001b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b98:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001b9c:	761a      	strb	r2, [r3, #24]
}
 8001b9e:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            scheduler_setSchedulerSyncInitState( schedulerVar, True );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8001ba0:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8001ba4:	657b      	str	r3, [r7, #84]	; 0x54
 8001ba6:	e029      	b.n	8001bfc <schedulerSync_sync+0xe6>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	61fb      	str	r3, [r7, #28]
    return (scheduler->nextSyncTick);
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	695b      	ldr	r3, [r3, #20]
    else
    {
        BitWidthType nextTick;


        nextTick = scheduler_getSchedulerNextSyncTick( schedulerVar );
 8001bb0:	64fb      	str	r3, [r7, #76]	; 0x4c

        if ( __COSMOS_UNLIKELY( nextTick IS_EQUAL_TO currentTick ) )
 8001bb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	bf0c      	ite	eq
 8001bba:	2301      	moveq	r3, #1
 8001bbc:	2300      	movne	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d01b      	beq.n	8001bfc <schedulerSync_sync+0xe6>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->syncTicks);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8001bce:	64bb      	str	r3, [r7, #72]	; 0x48

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bd4:	4413      	add	r3, r2
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	fbb3 f2f2 	udiv	r2, r3, r2
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	fb01 f202 	mul.w	r2, r1, r2
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bec:	617b      	str	r3, [r7, #20]
    scheduler->nextSyncTick = paramNextSyncTick;
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	615a      	str	r2, [r3, #20]
}
 8001bf4:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8001bf6:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8001bfa:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    if ( schedulerState IS_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 8001bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bfe:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8001c02:	d107      	bne.n	8001c14 <schedulerSync_sync+0xfe>
    {
        coreSync_getBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8001c04:	2103      	movs	r1, #3
 8001c06:	68b8      	ldr	r0, [r7, #8]
 8001c08:	f7ff fb4a 	bl	80012a0 <coreSync_getBarrier>
        coreSync_reactivateBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8001c0c:	2103      	movs	r1, #3
 8001c0e:	68b8      	ldr	r0, [r7, #8]
 8001c10:	f7ff fbae 	bl	8001370 <coreSync_reactivateBarrier>
    }

    return schedulerState;
 8001c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
};
 8001c16:	4618      	mov	r0, r3
 8001c18:	3758      	adds	r7, #88	; 0x58
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <stackInit_schedulableStackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType stackInit_schedulableStackInit(CosmOS_SchedulableVariableType  * schedulable)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b08c      	sub	sp, #48	; 0x30
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	60fb      	str	r3, [r7, #12]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
    StackPointerType stackPointer;

    CosmOS_StackConfigurationType * stack;


    stack = schedulable_getStack( schedulable );
 8001c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	613b      	str	r3, [r7, #16]
    return (schedulable->cfg->handler);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
    handler = schedulable_getHandler( schedulable );
 8001c3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	617b      	str	r3, [r7, #20]
    return (stack->stackLowAddress);
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	685b      	ldr	r3, [r3, #4]

    stackLowAddress = stack_getStackLowAddress( stack );
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c4a:	61bb      	str	r3, [r7, #24]
    return (stack->stackHighAddress);
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 8001c50:	623b      	str	r3, [r7, #32]

    stackPointer = CILstack_stackInit( stackLowAddress, stackHighAddress, (BitWidthType)handler );
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	461a      	mov	r2, r3
 8001c56:	6a39      	ldr	r1, [r7, #32]
 8001c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c5a:	f000 faef 	bl	800223c <CILstack_stackInit>
 8001c5e:	61f8      	str	r0, [r7, #28]

    return stackPointer;
 8001c60:	69fb      	ldr	r3, [r7, #28]
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3730      	adds	r7, #48	; 0x30
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <stackInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void stackInit_init(CosmOS_CoreVariableType * coreVar)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b094      	sub	sp, #80	; 0x50
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->cfg->numberOfPrograms);
 8001c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
                  stackPointerRetVal;

    CosmOS_ThreadVariableType * threadVar;
    CosmOS_ProgramVariableType * programVar;

    numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 8001c7c:	647b      	str	r3, [r7, #68]	; 0x44

    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8001c7e:	2300      	movs	r3, #0
 8001c80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c82:	e03a      	b.n	8001cfa <stackInit_init+0x90>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
 8001c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c8a:	623b      	str	r3, [r7, #32]
    return (&(core->programVars[programIterator]));
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	68d9      	ldr	r1, [r3, #12]
 8001c90:	6a3a      	ldr	r2, [r7, #32]
 8001c92:	4613      	mov	r3, r2
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
    {
        programVar = core_getCoreProgramVar( coreVar, programIterator );
 8001c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8001c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->numberOfThreads);
 8001ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
        numberOfThreads = program_getProgramNumberOfThreads( programVar );
 8001ca8:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8001caa:	2300      	movs	r3, #0
 8001cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cae:	e01d      	b.n	8001cec <stackInit_init+0x82>
 8001cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cb6:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * program_getProgramThread(CosmOS_ProgramVariableType * program, BitWidthType threadIterator)
{
    return (&(program->threadVars[threadIterator]));
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
        {
            CosmOS_SchedulableVariableType * schedulableVar;


            threadVar = program_getProgramThread( programVar, threadIterator );
 8001cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	685b      	ldr	r3, [r3, #4]
            schedulableVar = thread_getThreadSchedulable( threadVar );
 8001ccc:	637b      	str	r3, [r7, #52]	; 0x34

            stackPointerRetVal = stackInit_schedulableStackInit( schedulableVar );
 8001cce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001cd0:	f7ff ffa5 	bl	8001c1e <stackInit_schedulableStackInit>
 8001cd4:	6338      	str	r0, [r7, #48]	; 0x30
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd8:	61fb      	str	r3, [r7, #28]
 8001cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cdc:	61bb      	str	r3, [r7, #24]
    schedulable->stackPointer = stackPointerParam;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	609a      	str	r2, [r3, #8]
}
 8001ce4:	bf00      	nop
        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8001ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ce8:	3301      	adds	r3, #1
 8001cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001cee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d3dd      	bcc.n	8001cb0 <stackInit_init+0x46>
    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8001cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3c0      	bcc.n	8001c84 <stackInit_init+0x1a>
            schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
        }
    }
}
 8001d02:	bf00      	nop
 8001d04:	bf00      	nop
 8001d06:	3750      	adds	r7, #80	; 0x50
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <sysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysCalls_os(BitWidthType id)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    CILsysCalls_os( id );
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fb39 	bl	800238c <CILsysCalls_os>
};
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <sysCalls_readWrite>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_readWrite(BitWidthType id, void * entity, BitWidthType size)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_readWrite( id, entity, size );
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 fb35 	bl	80023a2 <CILsysCalls_readWrite>
 8001d38:	6178      	str	r0, [r7, #20]

    return returnValue;
 8001d3a:	697b      	ldr	r3, [r7, #20]
};
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <sysJobs_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysJobs_dispatcher(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b096      	sub	sp, #88	; 0x58
 8001d48:	af00      	add	r7, sp, #0

    CosmOS_CoreVariableType * coreVar;
    CosmOS_SysJobsVariableType * sysJobsVar;


    coreVar = core_getCoreVar();
 8001d4a:	f7ff fa6f 	bl	800122c <core_getCoreVar>
 8001d4e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
    return (core->sysJobs);
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	69db      	ldr	r3, [r3, #28]
    sysJobsVar = core_getCoreOsSysJobs( coreVar );
 8001d58:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs)
{
    return (sysJobs->currentTick);
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	685b      	ldr	r3, [r3, #4]

    sysJobsCurrentTick = sysJobs_getSysJobsCurrentTick( sysJobsVar );
 8001d62:	647b      	str	r3, [r7, #68]	; 0x44
 8001d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (sysJobs->cfg->numOfGroups);
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
    numOfGroups = sysJobs_getSysJobsNumOfGroups( sysJobsVar );
 8001d6e:	643b      	str	r3, [r7, #64]	; 0x40

    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8001d70:	2300      	movs	r3, #0
 8001d72:	657b      	str	r3, [r7, #84]	; 0x54
 8001d74:	e049      	b.n	8001e0a <sysJobs_dispatcher+0xc6>
 8001d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7c:	61fb      	str	r3, [r7, #28]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsGroupTickMultiplicator(CosmOS_SysJobsVariableType * sysJobs, BitWidthType groupId)
{
    return (sysJobs->cfg->groups[groupId].tickMultiplicator);
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6819      	ldr	r1, [r3, #0]
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	689b      	ldr	r3, [r3, #8]
    {
        BitWidthType  groupTickMultiplicator;


        groupTickMultiplicator = sysJobs_getSysJobsGroupTickMultiplicator( sysJobsVar, groupIterator );
 8001d92:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( IS_NOT( sysJobsCurrentTick % groupTickMultiplicator ) )
 8001d94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d98:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d9e:	fb01 f202 	mul.w	r2, r1, r2
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d12d      	bne.n	8001e04 <sysJobs_dispatcher+0xc0>
 8001da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dae:	60fb      	str	r3, [r7, #12]
    return (CosmOS_GenericVoidType *)(sysJobs->cfg->groups[groupId].handlers);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6819      	ldr	r1, [r3, #0]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4613      	mov	r3, r2
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	681b      	ldr	r3, [r3, #0]
        {
            BitWidthType numOfHandlers;
            CosmOS_GenericVoidType * handlers;


            handlers = sysJobs_getSysJobsGroupHandlers( sysJobsVar, groupIterator );
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dcc:	617b      	str	r3, [r7, #20]
    return (sysJobs->cfg->groups[groupId].numOfHandlers);
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6819      	ldr	r1, [r3, #0]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	440b      	add	r3, r1
 8001de0:	685b      	ldr	r3, [r3, #4]
            numOfHandlers = sysJobs_getSysJobsGroupNumOfHandlers( sysJobsVar, groupIterator );
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30

            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 8001de4:	2300      	movs	r3, #0
 8001de6:	653b      	str	r3, [r7, #80]	; 0x50
 8001de8:	e008      	b.n	8001dfc <sysJobs_dispatcher+0xb8>
            {
                handlers[handlerIterator]();
 8001dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df0:	4413      	add	r3, r2
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4798      	blx	r3
            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 8001df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df8:	3301      	adds	r3, #1
 8001dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8001dfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d3f2      	bcc.n	8001dea <sysJobs_dispatcher+0xa6>
    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8001e04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e06:	3301      	adds	r3, #1
 8001e08:	657b      	str	r3, [r7, #84]	; 0x54
 8001e0a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d3b1      	bcc.n	8001d76 <sysJobs_dispatcher+0x32>
 8001e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e14:	603b      	str	r3, [r7, #0]
    return (sysJobs->cfg->hyperTick);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
            }
        }
    }

    hyperTick = sysJobs_getSysJobsHyperTick( sysJobsVar );
 8001e1c:	63fb      	str	r3, [r7, #60]	; 0x3c

    sysJobsCurrentTick = ( ( sysJobsCurrentTick + 1 ) % hyperTick );
 8001e1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e20:	3301      	adds	r3, #1
 8001e22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e24:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e2a:	fb01 f202 	mul.w	r2, r1, r2
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	647b      	str	r3, [r7, #68]	; 0x44
 8001e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e38:	607b      	str	r3, [r7, #4]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void sysJobs_setSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs, BitWidthType currentTickParam)
{
    sysJobs->currentTick = currentTickParam;
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	605a      	str	r2, [r3, #4]
}
 8001e40:	bf00      	nop
    sysJobs_setSysJobsCurrentTick( sysJobsVar, sysJobsCurrentTick );

};
 8001e42:	bf00      	nop
 8001e44:	3758      	adds	r7, #88	; 0x58
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <CILcore_getCoreId>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILcore_getCoreId(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	af00      	add	r7, sp, #0
    return (HAL_GetCurrentCPUID() == CM7_CPUID) ? CORE_0_ID : CORE_1_ID;
 8001e4e:	f001 fd5b 	bl	8003908 <HAL_GetCurrentCPUID>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	bf14      	ite	ne
 8001e58:	2301      	movne	r3, #1
 8001e5a:	2300      	moveq	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <CILcore_setCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILcore_setCoreVar(CosmOS_OsVariableType * osVar)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b08a      	sub	sp, #40	; 0x28
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
    BitWidthType coreId,
                numberOfCores;

    CosmOS_CoreVariableType * coreVar;

    coreId = CILcore_getCoreId();
 8001e6a:	f7ff ffee 	bl	8001e4a <CILcore_getCoreId>
 8001e6e:	6278      	str	r0, [r7, #36]	; 0x24
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfCores);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 8001e7a:	623b      	str	r3, [r7, #32]

    cosmosAssert( coreId < numberOfCores );
 8001e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	bf34      	ite	cc
 8001e84:	2301      	movcc	r3, #1
 8001e86:	2300      	movcs	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	bf00      	nop
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	61bb      	str	r3, [r7, #24]
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	617b      	str	r3, [r7, #20]
    return (&(osVar->coreVars[coreId]));
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	015b      	lsls	r3, r3, #5
 8001e9e:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, coreId );
 8001ea0:	61fb      	str	r3, [r7, #28]

    //must be changed, not valid for all compilers
    __asm volatile("MOV R9,%[coreVariable]" : [coreVariable] "=r" (coreVar));
 8001ea2:	4699      	mov	r9, r3
 8001ea4:	61fb      	str	r3, [r7, #28]
}
 8001ea6:	bf00      	nop
 8001ea8:	3728      	adds	r7, #40	; 0x28
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <CILGPIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILGPIO_togglePin(void *GPIOx, BitWidthType GPIO_Pin)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin( GPIOx, (uint16_t)GPIO_Pin );
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f003 f8ad 	bl	800501e <HAL_GPIO_TogglePin>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <CILmemoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	; 0x28
 8001ed0:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	60da      	str	r2, [r3, #12]
    BitWidthType core,
                 address;

    core = CILcore_getCoreId();
 8001ede:	f7ff ffb4 	bl	8001e4a <CILcore_getCoreId>
 8001ee2:	6238      	str	r0, [r7, #32]

    HAL_MPU_Disable();
 8001ee4:	f001 fc94 	bl	8003810 <HAL_MPU_Disable>

    if( core IS_EQUAL_TO CORE_0_ID){
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11e      	bne.n	8001f2c <CILmemoryProtection_init+0x60>

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 8001ef6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001efa:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8001efc:	2314      	movs	r3, #20
 8001efe:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 8001f00:	2300      	movs	r3, #0
 8001f02:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8001f08:	2306      	movs	r3, #6
 8001f0a:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f10:	2301      	movs	r3, #1
 8001f12:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]

        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f1c:	463b      	mov	r3, r7
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f001 fcae 	bl	8003880 <HAL_MPU_ConfigRegion>

        address = 0x20000000;
 8001f24:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2a:	e01d      	b.n	8001f68 <CILmemoryProtection_init+0x9c>

    }
    else
    {

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 8001f34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f38:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8001f3a:	2314      	movs	r3, #20
 8001f3c:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8001f46:	2306      	movs	r3, #6
 8001f48:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]

        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f5a:	463b      	mov	r3, r7
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f001 fc8f 	bl	8003880 <HAL_MPU_ConfigRegion>

        address = 0x10000000;
 8001f62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24

    }

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = address;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8001f74:	2310      	movs	r3, #16
 8001f76:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8001f80:	2302      	movs	r3, #2
 8001f82:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f94:	463b      	mov	r3, r7
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 fc72 	bl	8003880 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress =  (BitWidthType)_s_os_section_consts;
 8001fa4:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <CILmemoryProtection_init+0x1e8>)
 8001fa6:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8001fa8:	4a43      	ldr	r2, [pc, #268]	; (80020b8 <CILmemoryProtection_init+0x1ec>)
 8001faa:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <CILmemoryProtection_init+0x1e8>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 1;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	085b      	lsrs	r3, r3, #1
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 2;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 4;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 8;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 16;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	0c1b      	lsrs	r3, r3, #16
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	617b      	str	r3, [r7, #20]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	4a35      	ldr	r2, [pc, #212]	; (80020bc <CILmemoryProtection_init+0x1f0>)
 8001fe6:	fb02 f303 	mul.w	r3, r2, r3
 8001fea:	0edb      	lsrs	r3, r3, #27
 8001fec:	4a34      	ldr	r2, [pc, #208]	; (80020c0 <CILmemoryProtection_init+0x1f4>)
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	613b      	str	r3, [r7, #16]
    return (result-1);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002000:	2301      	movs	r3, #1
 8002002:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8002004:	2306      	movs	r3, #6
 8002006:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002008:	2301      	movs	r3, #1
 800200a:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800200c:	2301      	movs	r3, #1
 800200e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002010:	2301      	movs	r3, #1
 8002012:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002018:	463b      	mov	r3, r7
 800201a:	4618      	mov	r0, r3
 800201c:	f001 fc30 	bl	8003880 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002020:	2301      	movs	r3, #1
 8002022:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8002024:	2303      	movs	r3, #3
 8002026:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_os_section_vars;
 8002028:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <CILmemoryProtection_init+0x1f8>)
 800202a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 800202c:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <CILmemoryProtection_init+0x1fc>)
 800202e:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <CILmemoryProtection_init+0x1f8>)
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	085b      	lsrs	r3, r3, #1
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	4313      	orrs	r3, r2
 800203c:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	089b      	lsrs	r3, r3, #2
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	4313      	orrs	r3, r2
 8002046:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	69fa      	ldr	r2, [r7, #28]
 800204e:	4313      	orrs	r3, r2
 8002050:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	0a1b      	lsrs	r3, r3, #8
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	4313      	orrs	r3, r2
 800205a:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	4313      	orrs	r3, r2
 8002064:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <CILmemoryProtection_init+0x1f0>)
 800206a:	fb02 f303 	mul.w	r3, r2, r3
 800206e:	0edb      	lsrs	r3, r3, #27
 8002070:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <CILmemoryProtection_init+0x1f4>)
 8002072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002076:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 800207c:	b2db      	uxtb	r3, r3
 800207e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8002080:	2300      	movs	r3, #0
 8002082:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002084:	2301      	movs	r3, #1
 8002086:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8002088:	2302      	movs	r3, #2
 800208a:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800208c:	2301      	movs	r3, #1
 800208e:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002090:	2301      	movs	r3, #1
 8002092:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002094:	2301      	movs	r3, #1
 8002096:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800209c:	463b      	mov	r3, r7
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 fbee 	bl	8003880 <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 80020a4:	2006      	movs	r0, #6
 80020a6:	f001 fbcb 	bl	8003840 <HAL_MPU_Enable>

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	; 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	38000000 	.word	0x38000000
 80020b8:	38000800 	.word	0x38000800
 80020bc:	07c4acdd 	.word	0x07c4acdd
 80020c0:	08009780 	.word	0x08009780
 80020c4:	38008000 	.word	0x38008000
 80020c8:	38008400 	.word	0x38008400

080020cc <CILmemoryProtection_setStackOverflowProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setStackOverflowProtection(AddressType stackLowAddress, AddressType stackHighAddress)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b088      	sub	sp, #32
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80020d6:	f107 0308 	add.w	r3, r7, #8
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 80020e4:	f001 fb94 	bl	8003810 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80020e8:	2301      	movs	r3, #1
 80020ea:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 80020ec:	2307      	movs	r3, #7
 80020ee:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (stackLowAddress);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	085b      	lsrs	r3, r3, #1
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	4313      	orrs	r3, r2
 8002104:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	4313      	orrs	r3, r2
 800210e:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	091b      	lsrs	r3, r3, #4
 8002114:	69fa      	ldr	r2, [r7, #28]
 8002116:	4313      	orrs	r3, r2
 8002118:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	4313      	orrs	r3, r2
 8002122:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	0c1b      	lsrs	r3, r3, #16
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	4313      	orrs	r3, r2
 800212c:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	4a12      	ldr	r2, [pc, #72]	; (800217c <CILmemoryProtection_setStackOverflowProtection+0xb0>)
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	0edb      	lsrs	r3, r3, #27
 8002138:	4a11      	ldr	r2, [pc, #68]	; (8002180 <CILmemoryProtection_setStackOverflowProtection+0xb4>)
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8002144:	b2db      	uxtb	r3, r3
 8002146:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8002148:	2300      	movs	r3, #0
 800214a:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800214c:	2301      	movs	r3, #1
 800214e:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002150:	2303      	movs	r3, #3
 8002152:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002158:	2301      	movs	r3, #1
 800215a:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800215c:	2301      	movs	r3, #1
 800215e:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002160:	2301      	movs	r3, #1
 8002162:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002164:	f107 0308 	add.w	r3, r7, #8
 8002168:	4618      	mov	r0, r3
 800216a:	f001 fb89 	bl	8003880 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 800216e:	2006      	movs	r0, #6
 8002170:	f001 fb66 	bl	8003840 <HAL_MPU_Enable>
}
 8002174:	bf00      	nop
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	07c4acdd 	.word	0x07c4acdd
 8002180:	08009780 	.word	0x08009780

08002184 <CILmemoryProtection_setProgramMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setProgramMemoryProtection(AddressType lowAddress, AddressType highAddress)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b088      	sub	sp, #32
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800218e:	f107 0308 	add.w	r3, r7, #8
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 800219c:	f001 fb38 	bl	8003810 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80021a0:	2301      	movs	r3, #1
 80021a2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 80021a4:	2306      	movs	r3, #6
 80021a6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	085b      	lsrs	r3, r3, #1
 80021b8:	69fa      	ldr	r2, [r7, #28]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	69fa      	ldr	r2, [r7, #28]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	0c1b      	lsrs	r3, r3, #16
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	4a12      	ldr	r2, [pc, #72]	; (8002234 <CILmemoryProtection_setProgramMemoryProtection+0xb0>)
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	0edb      	lsrs	r3, r3, #27
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <CILmemoryProtection_setProgramMemoryProtection+0xb4>)
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	61bb      	str	r3, [r7, #24]
    return (result-1);
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8002200:	2300      	movs	r3, #0
 8002202:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002204:	2301      	movs	r3, #1
 8002206:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002208:	2303      	movs	r3, #3
 800220a:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002210:	2301      	movs	r3, #1
 8002212:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002214:	2301      	movs	r3, #1
 8002216:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002218:	2301      	movs	r3, #1
 800221a:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800221c:	f107 0308 	add.w	r3, r7, #8
 8002220:	4618      	mov	r0, r3
 8002222:	f001 fb2d 	bl	8003880 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8002226:	2006      	movs	r0, #6
 8002228:	f001 fb0a 	bl	8003840 <HAL_MPU_Enable>
}
 800222c:	bf00      	nop
 800222e:	3720      	adds	r7, #32
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	07c4acdd 	.word	0x07c4acdd
 8002238:	08009780 	.word	0x08009780

0800223c <CILstack_stackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType CILstack_stackInit(AddressType stackLowAddress, AddressType stackHighAddress, AddressType handlerAddress)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
    CosmOS_StackType *stack = ( CosmOS_StackType* )( stackHighAddress - (AddressType)sizeof(CosmOS_StackType) );
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3b40      	subs	r3, #64	; 0x40
 800224c:	617b      	str	r3, [r7, #20]

    stack->XPSR  = 0x01000000;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c
    stack->PC    = handlerAddress;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	639a      	str	r2, [r3, #56]	; 0x38
    stack->LR    = 0xFFFFFFFD;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f06f 0202 	mvn.w	r2, #2
 8002262:	635a      	str	r2, [r3, #52]	; 0x34
    stack->R12   = 0;
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
    stack->R3    = 0;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2200      	movs	r2, #0
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
    stack->R2    = 0;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2200      	movs	r2, #0
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
    stack->R1    = 0;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2200      	movs	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	; 0x24
    stack->R0    = 0;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2200      	movs	r2, #0
 8002280:	621a      	str	r2, [r3, #32]
    stack->R14   = 0xFFFFFFFD;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	f06f 0202 	mvn.w	r2, #2
 8002288:	61da      	str	r2, [r3, #28]
    stack->R11   = 0;
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2200      	movs	r2, #0
 800228e:	619a      	str	r2, [r3, #24]
    stack->R10   = 0;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2200      	movs	r2, #0
 8002294:	615a      	str	r2, [r3, #20]
    stack->R8    = 0;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
    stack->R7    = 0;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
    stack->R6    = 0;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
    stack->R5    = 0;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2200      	movs	r2, #0
 80022ac:	605a      	str	r2, [r3, #4]
    stack->R4    = 0;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

    return (StackPointerType)(&(stack->R4));
 80022b4:	697b      	ldr	r3, [r7, #20]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	371c      	adds	r7, #28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <CILstack_setStackPointer>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION __NAKED void CILstack_setStackPointer(AddressType address)
{
    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 80022c2:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
	  __asm volatile ("MSR PSP,R0");
 80022c6:	f380 8809 	msr	PSP, r0
    __asm volatile ("MOV R0, #0x3");
 80022ca:	f04f 0003 	mov.w	r0, #3
    __asm volatile ("MSR CONTROL, R0");
 80022ce:	f380 8814 	msr	CONTROL, r0
    __asm volatile ("ISB");
 80022d2:	f3bf 8f6f 	isb	sy
    __asm volatile ("BX R14");
 80022d6:	4770      	bx	lr
}
 80022d8:	bf00      	nop

080022da <CILsysCalls_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_dispatcher(BitWidthType *sp)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b08e      	sub	sp, #56	; 0x38
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
    CosmOS_GenericVoidType sysCall;
    CosmOS_OsVariableType * osVar;
    CosmOS_RoutesConfigurationType * routeVar;


    uint8_t *pc = (uint8_t*)(sp[6]);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3318      	adds	r3, #24
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	633b      	str	r3, [r7, #48]	; 0x30

    pc-=2;
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	3b02      	subs	r3, #2
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30

    osVar = os_getOsVar();
 80022f0:	f7ff f8c6 	bl	8001480 <os_getOsVar>
 80022f4:	62f8      	str	r0, [r7, #44]	; 0x2c

    uint8_t sysCallId = *pc;
 80022f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	60bb      	str	r3, [r7, #8]
    return (CosmOS_RoutesConfigurationType *)(osVar->cfg->route);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	691b      	ldr	r3, [r3, #16]

    routeVar = os_getOsRoutes( osVar );
 8002308:	627b      	str	r3, [r7, #36]	; 0x24

    sysCall = route_getRoutesFunc( routeVar, sp[0] );
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002310:	613a      	str	r2, [r7, #16]
 8002312:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_GenericVoidType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_GenericVoidType route_getRoutesFunc(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (CosmOS_GenericVoidType)(route->routeFunc[route->routeIdToFunc[callId]]);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	623b      	str	r3, [r7, #32]
    entityId = route_getRoutesEntityId( routeVar, sp[0] );
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002332:	61ba      	str	r2, [r7, #24]
 8002334:	617b      	str	r3, [r7, #20]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType route_getRoutesEntityId(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (route->routeIdToEntity[callId]);
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	61fb      	str	r3, [r7, #28]

    switch ( sysCallId )
 8002344:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002348:	2b02      	cmp	r3, #2
 800234a:	d015      	beq.n	8002378 <CILsysCalls_dispatcher+0x9e>
 800234c:	2b02      	cmp	r3, #2
 800234e:	dc15      	bgt.n	800237c <CILsysCalls_dispatcher+0xa2>
 8002350:	2b00      	cmp	r3, #0
 8002352:	d002      	beq.n	800235a <CILsysCalls_dispatcher+0x80>
 8002354:	2b01      	cmp	r3, #1
 8002356:	d003      	beq.n	8002360 <CILsysCalls_dispatcher+0x86>
        }

        default :
        {
            /* PANIC */
            break;
 8002358:	e010      	b.n	800237c <CILsysCalls_dispatcher+0xa2>
            sysCall();
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	4798      	blx	r3
            break;
 800235e:	e00e      	b.n	800237e <CILsysCalls_dispatcher+0xa4>
            returnValue = ((CosmOS_GenericBitWidthRWType)sysCall)(entityId, (void *)sp[1], sp[2]);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3304      	adds	r3, #4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3308      	adds	r3, #8
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	69f8      	ldr	r0, [r7, #28]
 8002372:	4798      	blx	r3
 8002374:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8002376:	e002      	b.n	800237e <CILsysCalls_dispatcher+0xa4>
            break;
 8002378:	bf00      	nop
 800237a:	e000      	b.n	800237e <CILsysCalls_dispatcher+0xa4>
            break;
 800237c:	bf00      	nop
        }
    }

    sp[0] = returnValue;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002382:	601a      	str	r2, [r3, #0]
}
 8002384:	bf00      	nop
 8002386:	3738      	adds	r7, #56	; 0x38
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <CILsysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_os(BitWidthType id)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    __asm volatile("SVC #0");
 8002394:	df00      	svc	0
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <CILsysCalls_readWrite>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_readWrite(BitWidthType id, void * entity, BitWidthType num)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b087      	sub	sp, #28
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #1");
 80023ae:	df01      	svc	1
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 80023b0:	4603      	mov	r3, r0
 80023b2:	617b      	str	r3, [r7, #20]

    return returnValue;
 80023b4:	697b      	ldr	r3, [r7, #20]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <CILsysTimer_setTicks>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_setTicks(BitWidthType ticks, CosmOS_SchedulerSyncStateType schedulersSyncState)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
    if( schedulersSyncState IS_NOT_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 80023d4:	d010      	beq.n	80023f8 <CILsysTimer_setTicks+0x34>
    {
        BitWidthType delay;
        delay = SysTick->LOAD - SysTick->VAL;
 80023d6:	4b12      	ldr	r3, [pc, #72]	; (8002420 <CILsysTimer_setTicks+0x5c>)
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <CILsysTimer_setTicks+0x5c>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	60fb      	str	r3, [r7, #12]

        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)-delay) - 1UL);         /* set reload register */
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80023e8:	fb02 f203 	mul.w	r2, r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <CILsysTimer_setTicks+0x5c>)
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6053      	str	r3, [r2, #4]
 80023f6:	e007      	b.n	8002408 <CILsysTimer_setTicks+0x44>
    }
    else
    {
        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)) - 1UL);               /* set reload register */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	4a07      	ldr	r2, [pc, #28]	; (8002420 <CILsysTimer_setTicks+0x5c>)
 8002404:	3b01      	subs	r3, #1
 8002406:	6053      	str	r3, [r2, #4]
    }

    SysTick->VAL   = 0UL;                                                     /* Load the SysTick Counter Value */
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <CILsysTimer_setTicks+0x5c>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800240e:	4b04      	ldr	r3, [pc, #16]	; (8002420 <CILsysTimer_setTicks+0x5c>)
 8002410:	2207      	movs	r2, #7
 8002412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                                   /* Enable SysTick IRQ and SysTick Timer */
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000e010 	.word	0xe000e010

08002424 <CILuart_sysJob>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILuart_sysJob()
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0

    //TX SIDE
    //check where is DMA and switch it if its buffer is empty
    //check if user is in red zone, if yes check if DMA is on the same buffer, then switch to the other
    //HAL_UART_Receive_DMA()
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

Disassembly of section .text:

08002434 <__do_global_dtors_aux>:
 8002434:	b510      	push	{r4, lr}
 8002436:	4c05      	ldr	r4, [pc, #20]	; (800244c <__do_global_dtors_aux+0x18>)
 8002438:	7823      	ldrb	r3, [r4, #0]
 800243a:	b933      	cbnz	r3, 800244a <__do_global_dtors_aux+0x16>
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <__do_global_dtors_aux+0x1c>)
 800243e:	b113      	cbz	r3, 8002446 <__do_global_dtors_aux+0x12>
 8002440:	4804      	ldr	r0, [pc, #16]	; (8002454 <__do_global_dtors_aux+0x20>)
 8002442:	f3af 8000 	nop.w
 8002446:	2301      	movs	r3, #1
 8002448:	7023      	strb	r3, [r4, #0]
 800244a:	bd10      	pop	{r4, pc}
 800244c:	200018d0 	.word	0x200018d0
 8002450:	00000000 	.word	0x00000000
 8002454:	08009700 	.word	0x08009700

08002458 <frame_dummy>:
 8002458:	b508      	push	{r3, lr}
 800245a:	4b03      	ldr	r3, [pc, #12]	; (8002468 <frame_dummy+0x10>)
 800245c:	b11b      	cbz	r3, 8002466 <frame_dummy+0xe>
 800245e:	4903      	ldr	r1, [pc, #12]	; (800246c <frame_dummy+0x14>)
 8002460:	4803      	ldr	r0, [pc, #12]	; (8002470 <frame_dummy+0x18>)
 8002462:	f3af 8000 	nop.w
 8002466:	bd08      	pop	{r3, pc}
 8002468:	00000000 	.word	0x00000000
 800246c:	200018d4 	.word	0x200018d4
 8002470:	08009700 	.word	0x08009700

08002474 <__aeabi_uldivmod>:
 8002474:	b953      	cbnz	r3, 800248c <__aeabi_uldivmod+0x18>
 8002476:	b94a      	cbnz	r2, 800248c <__aeabi_uldivmod+0x18>
 8002478:	2900      	cmp	r1, #0
 800247a:	bf08      	it	eq
 800247c:	2800      	cmpeq	r0, #0
 800247e:	bf1c      	itt	ne
 8002480:	f04f 31ff 	movne.w	r1, #4294967295
 8002484:	f04f 30ff 	movne.w	r0, #4294967295
 8002488:	f000 b96e 	b.w	8002768 <__aeabi_idiv0>
 800248c:	f1ad 0c08 	sub.w	ip, sp, #8
 8002490:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002494:	f000 f806 	bl	80024a4 <__udivmoddi4>
 8002498:	f8dd e004 	ldr.w	lr, [sp, #4]
 800249c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80024a0:	b004      	add	sp, #16
 80024a2:	4770      	bx	lr

080024a4 <__udivmoddi4>:
 80024a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024a8:	9d08      	ldr	r5, [sp, #32]
 80024aa:	4604      	mov	r4, r0
 80024ac:	468c      	mov	ip, r1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 8083 	bne.w	80025ba <__udivmoddi4+0x116>
 80024b4:	428a      	cmp	r2, r1
 80024b6:	4617      	mov	r7, r2
 80024b8:	d947      	bls.n	800254a <__udivmoddi4+0xa6>
 80024ba:	fab2 f282 	clz	r2, r2
 80024be:	b142      	cbz	r2, 80024d2 <__udivmoddi4+0x2e>
 80024c0:	f1c2 0020 	rsb	r0, r2, #32
 80024c4:	fa24 f000 	lsr.w	r0, r4, r0
 80024c8:	4091      	lsls	r1, r2
 80024ca:	4097      	lsls	r7, r2
 80024cc:	ea40 0c01 	orr.w	ip, r0, r1
 80024d0:	4094      	lsls	r4, r2
 80024d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80024d6:	0c23      	lsrs	r3, r4, #16
 80024d8:	fbbc f6f8 	udiv	r6, ip, r8
 80024dc:	fa1f fe87 	uxth.w	lr, r7
 80024e0:	fb08 c116 	mls	r1, r8, r6, ip
 80024e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80024e8:	fb06 f10e 	mul.w	r1, r6, lr
 80024ec:	4299      	cmp	r1, r3
 80024ee:	d909      	bls.n	8002504 <__udivmoddi4+0x60>
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80024f6:	f080 8119 	bcs.w	800272c <__udivmoddi4+0x288>
 80024fa:	4299      	cmp	r1, r3
 80024fc:	f240 8116 	bls.w	800272c <__udivmoddi4+0x288>
 8002500:	3e02      	subs	r6, #2
 8002502:	443b      	add	r3, r7
 8002504:	1a5b      	subs	r3, r3, r1
 8002506:	b2a4      	uxth	r4, r4
 8002508:	fbb3 f0f8 	udiv	r0, r3, r8
 800250c:	fb08 3310 	mls	r3, r8, r0, r3
 8002510:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002514:	fb00 fe0e 	mul.w	lr, r0, lr
 8002518:	45a6      	cmp	lr, r4
 800251a:	d909      	bls.n	8002530 <__udivmoddi4+0x8c>
 800251c:	193c      	adds	r4, r7, r4
 800251e:	f100 33ff 	add.w	r3, r0, #4294967295
 8002522:	f080 8105 	bcs.w	8002730 <__udivmoddi4+0x28c>
 8002526:	45a6      	cmp	lr, r4
 8002528:	f240 8102 	bls.w	8002730 <__udivmoddi4+0x28c>
 800252c:	3802      	subs	r0, #2
 800252e:	443c      	add	r4, r7
 8002530:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002534:	eba4 040e 	sub.w	r4, r4, lr
 8002538:	2600      	movs	r6, #0
 800253a:	b11d      	cbz	r5, 8002544 <__udivmoddi4+0xa0>
 800253c:	40d4      	lsrs	r4, r2
 800253e:	2300      	movs	r3, #0
 8002540:	e9c5 4300 	strd	r4, r3, [r5]
 8002544:	4631      	mov	r1, r6
 8002546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800254a:	b902      	cbnz	r2, 800254e <__udivmoddi4+0xaa>
 800254c:	deff      	udf	#255	; 0xff
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	2a00      	cmp	r2, #0
 8002554:	d150      	bne.n	80025f8 <__udivmoddi4+0x154>
 8002556:	1bcb      	subs	r3, r1, r7
 8002558:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800255c:	fa1f f887 	uxth.w	r8, r7
 8002560:	2601      	movs	r6, #1
 8002562:	fbb3 fcfe 	udiv	ip, r3, lr
 8002566:	0c21      	lsrs	r1, r4, #16
 8002568:	fb0e 331c 	mls	r3, lr, ip, r3
 800256c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002570:	fb08 f30c 	mul.w	r3, r8, ip
 8002574:	428b      	cmp	r3, r1
 8002576:	d907      	bls.n	8002588 <__udivmoddi4+0xe4>
 8002578:	1879      	adds	r1, r7, r1
 800257a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800257e:	d202      	bcs.n	8002586 <__udivmoddi4+0xe2>
 8002580:	428b      	cmp	r3, r1
 8002582:	f200 80e9 	bhi.w	8002758 <__udivmoddi4+0x2b4>
 8002586:	4684      	mov	ip, r0
 8002588:	1ac9      	subs	r1, r1, r3
 800258a:	b2a3      	uxth	r3, r4
 800258c:	fbb1 f0fe 	udiv	r0, r1, lr
 8002590:	fb0e 1110 	mls	r1, lr, r0, r1
 8002594:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8002598:	fb08 f800 	mul.w	r8, r8, r0
 800259c:	45a0      	cmp	r8, r4
 800259e:	d907      	bls.n	80025b0 <__udivmoddi4+0x10c>
 80025a0:	193c      	adds	r4, r7, r4
 80025a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80025a6:	d202      	bcs.n	80025ae <__udivmoddi4+0x10a>
 80025a8:	45a0      	cmp	r8, r4
 80025aa:	f200 80d9 	bhi.w	8002760 <__udivmoddi4+0x2bc>
 80025ae:	4618      	mov	r0, r3
 80025b0:	eba4 0408 	sub.w	r4, r4, r8
 80025b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80025b8:	e7bf      	b.n	800253a <__udivmoddi4+0x96>
 80025ba:	428b      	cmp	r3, r1
 80025bc:	d909      	bls.n	80025d2 <__udivmoddi4+0x12e>
 80025be:	2d00      	cmp	r5, #0
 80025c0:	f000 80b1 	beq.w	8002726 <__udivmoddi4+0x282>
 80025c4:	2600      	movs	r6, #0
 80025c6:	e9c5 0100 	strd	r0, r1, [r5]
 80025ca:	4630      	mov	r0, r6
 80025cc:	4631      	mov	r1, r6
 80025ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025d2:	fab3 f683 	clz	r6, r3
 80025d6:	2e00      	cmp	r6, #0
 80025d8:	d14a      	bne.n	8002670 <__udivmoddi4+0x1cc>
 80025da:	428b      	cmp	r3, r1
 80025dc:	d302      	bcc.n	80025e4 <__udivmoddi4+0x140>
 80025de:	4282      	cmp	r2, r0
 80025e0:	f200 80b8 	bhi.w	8002754 <__udivmoddi4+0x2b0>
 80025e4:	1a84      	subs	r4, r0, r2
 80025e6:	eb61 0103 	sbc.w	r1, r1, r3
 80025ea:	2001      	movs	r0, #1
 80025ec:	468c      	mov	ip, r1
 80025ee:	2d00      	cmp	r5, #0
 80025f0:	d0a8      	beq.n	8002544 <__udivmoddi4+0xa0>
 80025f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80025f6:	e7a5      	b.n	8002544 <__udivmoddi4+0xa0>
 80025f8:	f1c2 0320 	rsb	r3, r2, #32
 80025fc:	fa20 f603 	lsr.w	r6, r0, r3
 8002600:	4097      	lsls	r7, r2
 8002602:	fa01 f002 	lsl.w	r0, r1, r2
 8002606:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800260a:	40d9      	lsrs	r1, r3
 800260c:	4330      	orrs	r0, r6
 800260e:	0c03      	lsrs	r3, r0, #16
 8002610:	fbb1 f6fe 	udiv	r6, r1, lr
 8002614:	fa1f f887 	uxth.w	r8, r7
 8002618:	fb0e 1116 	mls	r1, lr, r6, r1
 800261c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002620:	fb06 f108 	mul.w	r1, r6, r8
 8002624:	4299      	cmp	r1, r3
 8002626:	fa04 f402 	lsl.w	r4, r4, r2
 800262a:	d909      	bls.n	8002640 <__udivmoddi4+0x19c>
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	f106 3cff 	add.w	ip, r6, #4294967295
 8002632:	f080 808d 	bcs.w	8002750 <__udivmoddi4+0x2ac>
 8002636:	4299      	cmp	r1, r3
 8002638:	f240 808a 	bls.w	8002750 <__udivmoddi4+0x2ac>
 800263c:	3e02      	subs	r6, #2
 800263e:	443b      	add	r3, r7
 8002640:	1a5b      	subs	r3, r3, r1
 8002642:	b281      	uxth	r1, r0
 8002644:	fbb3 f0fe 	udiv	r0, r3, lr
 8002648:	fb0e 3310 	mls	r3, lr, r0, r3
 800264c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002650:	fb00 f308 	mul.w	r3, r0, r8
 8002654:	428b      	cmp	r3, r1
 8002656:	d907      	bls.n	8002668 <__udivmoddi4+0x1c4>
 8002658:	1879      	adds	r1, r7, r1
 800265a:	f100 3cff 	add.w	ip, r0, #4294967295
 800265e:	d273      	bcs.n	8002748 <__udivmoddi4+0x2a4>
 8002660:	428b      	cmp	r3, r1
 8002662:	d971      	bls.n	8002748 <__udivmoddi4+0x2a4>
 8002664:	3802      	subs	r0, #2
 8002666:	4439      	add	r1, r7
 8002668:	1acb      	subs	r3, r1, r3
 800266a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800266e:	e778      	b.n	8002562 <__udivmoddi4+0xbe>
 8002670:	f1c6 0c20 	rsb	ip, r6, #32
 8002674:	fa03 f406 	lsl.w	r4, r3, r6
 8002678:	fa22 f30c 	lsr.w	r3, r2, ip
 800267c:	431c      	orrs	r4, r3
 800267e:	fa20 f70c 	lsr.w	r7, r0, ip
 8002682:	fa01 f306 	lsl.w	r3, r1, r6
 8002686:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800268a:	fa21 f10c 	lsr.w	r1, r1, ip
 800268e:	431f      	orrs	r7, r3
 8002690:	0c3b      	lsrs	r3, r7, #16
 8002692:	fbb1 f9fe 	udiv	r9, r1, lr
 8002696:	fa1f f884 	uxth.w	r8, r4
 800269a:	fb0e 1119 	mls	r1, lr, r9, r1
 800269e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80026a2:	fb09 fa08 	mul.w	sl, r9, r8
 80026a6:	458a      	cmp	sl, r1
 80026a8:	fa02 f206 	lsl.w	r2, r2, r6
 80026ac:	fa00 f306 	lsl.w	r3, r0, r6
 80026b0:	d908      	bls.n	80026c4 <__udivmoddi4+0x220>
 80026b2:	1861      	adds	r1, r4, r1
 80026b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80026b8:	d248      	bcs.n	800274c <__udivmoddi4+0x2a8>
 80026ba:	458a      	cmp	sl, r1
 80026bc:	d946      	bls.n	800274c <__udivmoddi4+0x2a8>
 80026be:	f1a9 0902 	sub.w	r9, r9, #2
 80026c2:	4421      	add	r1, r4
 80026c4:	eba1 010a 	sub.w	r1, r1, sl
 80026c8:	b2bf      	uxth	r7, r7
 80026ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80026ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80026d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80026d6:	fb00 f808 	mul.w	r8, r0, r8
 80026da:	45b8      	cmp	r8, r7
 80026dc:	d907      	bls.n	80026ee <__udivmoddi4+0x24a>
 80026de:	19e7      	adds	r7, r4, r7
 80026e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80026e4:	d22e      	bcs.n	8002744 <__udivmoddi4+0x2a0>
 80026e6:	45b8      	cmp	r8, r7
 80026e8:	d92c      	bls.n	8002744 <__udivmoddi4+0x2a0>
 80026ea:	3802      	subs	r0, #2
 80026ec:	4427      	add	r7, r4
 80026ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80026f2:	eba7 0708 	sub.w	r7, r7, r8
 80026f6:	fba0 8902 	umull	r8, r9, r0, r2
 80026fa:	454f      	cmp	r7, r9
 80026fc:	46c6      	mov	lr, r8
 80026fe:	4649      	mov	r1, r9
 8002700:	d31a      	bcc.n	8002738 <__udivmoddi4+0x294>
 8002702:	d017      	beq.n	8002734 <__udivmoddi4+0x290>
 8002704:	b15d      	cbz	r5, 800271e <__udivmoddi4+0x27a>
 8002706:	ebb3 020e 	subs.w	r2, r3, lr
 800270a:	eb67 0701 	sbc.w	r7, r7, r1
 800270e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8002712:	40f2      	lsrs	r2, r6
 8002714:	ea4c 0202 	orr.w	r2, ip, r2
 8002718:	40f7      	lsrs	r7, r6
 800271a:	e9c5 2700 	strd	r2, r7, [r5]
 800271e:	2600      	movs	r6, #0
 8002720:	4631      	mov	r1, r6
 8002722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002726:	462e      	mov	r6, r5
 8002728:	4628      	mov	r0, r5
 800272a:	e70b      	b.n	8002544 <__udivmoddi4+0xa0>
 800272c:	4606      	mov	r6, r0
 800272e:	e6e9      	b.n	8002504 <__udivmoddi4+0x60>
 8002730:	4618      	mov	r0, r3
 8002732:	e6fd      	b.n	8002530 <__udivmoddi4+0x8c>
 8002734:	4543      	cmp	r3, r8
 8002736:	d2e5      	bcs.n	8002704 <__udivmoddi4+0x260>
 8002738:	ebb8 0e02 	subs.w	lr, r8, r2
 800273c:	eb69 0104 	sbc.w	r1, r9, r4
 8002740:	3801      	subs	r0, #1
 8002742:	e7df      	b.n	8002704 <__udivmoddi4+0x260>
 8002744:	4608      	mov	r0, r1
 8002746:	e7d2      	b.n	80026ee <__udivmoddi4+0x24a>
 8002748:	4660      	mov	r0, ip
 800274a:	e78d      	b.n	8002668 <__udivmoddi4+0x1c4>
 800274c:	4681      	mov	r9, r0
 800274e:	e7b9      	b.n	80026c4 <__udivmoddi4+0x220>
 8002750:	4666      	mov	r6, ip
 8002752:	e775      	b.n	8002640 <__udivmoddi4+0x19c>
 8002754:	4630      	mov	r0, r6
 8002756:	e74a      	b.n	80025ee <__udivmoddi4+0x14a>
 8002758:	f1ac 0c02 	sub.w	ip, ip, #2
 800275c:	4439      	add	r1, r7
 800275e:	e713      	b.n	8002588 <__udivmoddi4+0xe4>
 8002760:	3802      	subs	r0, #2
 8002762:	443c      	add	r4, r7
 8002764:	e724      	b.n	80025b0 <__udivmoddi4+0x10c>
 8002766:	bf00      	nop

08002768 <__aeabi_idiv0>:
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop

0800276c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800276c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027a4 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002770:	f006 ff00 	bl	8009574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002774:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002776:	e003      	b.n	8002780 <LoopCopyDataInit>

08002778 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002778:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800277a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800277c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800277e:	3104      	adds	r1, #4

08002780 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002780:	480a      	ldr	r0, [pc, #40]	; (80027ac <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8002782:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8002784:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002786:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002788:	d3f6      	bcc.n	8002778 <CopyDataInit>
  ldr  r2, =_sbss
 800278a:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 800278c:	e002      	b.n	8002794 <LoopFillZerobss>

0800278e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800278e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002790:	f842 3b04 	str.w	r3, [r2], #4

08002794 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002794:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8002796:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002798:	d3f9      	bcc.n	800278e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800279a:	f006 ff85 	bl	80096a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800279e:	f000 f839 	bl	8002814 <main>
  bx  lr    
 80027a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027a8:	08009840 	.word	0x08009840
  ldr  r0, =_sdata
 80027ac:	20001800 	.word	0x20001800
  ldr  r3, =_edata
 80027b0:	20001810 	.word	0x20001810
  ldr  r2, =_sbss
 80027b4:	200018d0 	.word	0x200018d0
  ldr  r3, = _ebss
 80027b8:	20001f64 	.word	0x20001f64

080027bc <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027bc:	e7fe      	b.n	80027bc <ADC3_IRQHandler>
	...

080027c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	db0a      	blt.n	80027ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	490c      	ldr	r1, [pc, #48]	; (800280c <__NVIC_SetPriority+0x4c>)
 80027da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	440b      	add	r3, r1
 80027e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e8:	e00a      	b.n	8002800 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	4908      	ldr	r1, [pc, #32]	; (8002810 <__NVIC_SetPriority+0x50>)
 80027f0:	88fb      	ldrh	r3, [r7, #6]
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3b04      	subs	r3, #4
 80027f8:	0112      	lsls	r2, r2, #4
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	440b      	add	r3, r1
 80027fe:	761a      	strb	r2, [r3, #24]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000e100 	.word	0xe000e100
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800281a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800281e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8002820:	bf00      	nop
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <main+0xe0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <main+0x24>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	1e5a      	subs	r2, r3, #1
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	dcf4      	bgt.n	8002822 <main+0xe>
  if ( timeout < 0 )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	da01      	bge.n	8002842 <main+0x2e>
  {
  Error_Handler();
 800283e:	f000 fad9 	bl	8002df4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002842:	f000 fe65 	bl	8003510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002846:	f000 f857 	bl	80028f8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <main+0xe0>)
 800284c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002850:	4a28      	ldr	r2, [pc, #160]	; (80028f4 <main+0xe0>)
 8002852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002856:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800285a:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <main+0xe0>)
 800285c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002864:	603b      	str	r3, [r7, #0]
 8002866:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8002868:	2000      	movs	r0, #0
 800286a:	f002 fbf3 	bl	8005054 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800286e:	2100      	movs	r1, #0
 8002870:	2000      	movs	r0, #0
 8002872:	f002 fc09 	bl	8005088 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8002876:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800287a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800287c:	bf00      	nop
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <main+0xe0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <main+0x80>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1e5a      	subs	r2, r3, #1
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	dcf4      	bgt.n	800287e <main+0x6a>
if ( timeout < 0 )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	da01      	bge.n	800289e <main+0x8a>
{
Error_Handler();
 800289a:	f000 faab 	bl	8002df4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800289e:	f000 f9e1 	bl	8002c64 <MX_GPIO_Init>
  MX_DMA_Init();
 80028a2:	f000 f9b7 	bl	8002c14 <MX_DMA_Init>
  MX_ETH_Init();
 80028a6:	f000 f8e5 	bl	8002a74 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80028aa:	f000 f935 	bl	8002b18 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80028ae:	f000 f97f 	bl	8002bb0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  SET_BIT(RCC->D3AMR, RCC_D3AMR_SRAM4AMEN);
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <main+0xe0>)
 80028b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028b8:	4a0e      	ldr	r2, [pc, #56]	; (80028f4 <main+0xe0>)
 80028ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028be:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	NVIC_SetPriority(SVCall_IRQn,3);
 80028c2:	2103      	movs	r1, #3
 80028c4:	f06f 0004 	mvn.w	r0, #4
 80028c8:	f7ff ff7a 	bl	80027c0 <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn,4);
 80028cc:	2104      	movs	r1, #4
 80028ce:	f06f 0001 	mvn.w	r0, #1
 80028d2:	f7ff ff75 	bl	80027c0 <__NVIC_SetPriority>
  NVIC_SetPriority (SysTick_IRQn, 0);         /* set Priority for Systick Interrupt */
 80028d6:	2100      	movs	r1, #0
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f7ff ff70 	bl	80027c0 <__NVIC_SetPriority>
    cosmosApi_boot();
 80028e0:	f000 fcfc 	bl	80032dc <osBoot_boot>
	cosmosApi_osInit_init();
 80028e4:	2007      	movs	r0, #7
 80028e6:	f7ff fa11 	bl	8001d0c <sysCalls_os>
	cosmosApi_os_start();
 80028ea:	2008      	movs	r0, #8
 80028ec:	f7ff fa0e 	bl	8001d0c <sysCalls_os>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80028f0:	e7fe      	b.n	80028f0 <main+0xdc>
 80028f2:	bf00      	nop
 80028f4:	58024400 	.word	0x58024400

080028f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b0cc      	sub	sp, #304	; 0x130
 80028fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002902:	224c      	movs	r2, #76	; 0x4c
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f006 fef2 	bl	80096f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800290c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002910:	2220      	movs	r2, #32
 8002912:	2100      	movs	r1, #0
 8002914:	4618      	mov	r0, r3
 8002916:	f006 feeb 	bl	80096f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800291a:	f107 0308 	add.w	r3, r7, #8
 800291e:	4618      	mov	r0, r3
 8002920:	23bc      	movs	r3, #188	; 0xbc
 8002922:	461a      	mov	r2, r3
 8002924:	2100      	movs	r1, #0
 8002926:	f006 fee3 	bl	80096f0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800292a:	2004      	movs	r0, #4
 800292c:	f002 fd08 	bl	8005340 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <SystemClock_Config+0x170>)
 8002938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293a:	4a4b      	ldr	r2, [pc, #300]	; (8002a68 <SystemClock_Config+0x170>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002942:	4b49      	ldr	r3, [pc, #292]	; (8002a68 <SystemClock_Config+0x170>)
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	f003 0201 	and.w	r2, r3, #1
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <SystemClock_Config+0x174>)
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002956:	4a45      	ldr	r2, [pc, #276]	; (8002a6c <SystemClock_Config+0x174>)
 8002958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800295c:	6193      	str	r3, [r2, #24]
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <SystemClock_Config+0x174>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	1d3b      	adds	r3, r7, #4
 800296c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800296e:	bf00      	nop
 8002970:	4b3e      	ldr	r3, [pc, #248]	; (8002a6c <SystemClock_Config+0x174>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297c:	d1f8      	bne.n	8002970 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800297e:	2321      	movs	r3, #33	; 0x21
 8002980:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002984:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002988:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800298c:	2301      	movs	r3, #1
 800298e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002992:	2302      	movs	r3, #2
 8002994:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002998:	2302      	movs	r3, #2
 800299a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800299e:	2301      	movs	r3, #1
 80029a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 25;
 80029a4:	2319      	movs	r3, #25
 80029a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80029aa:	2302      	movs	r3, #2
 80029ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80029b0:	2304      	movs	r3, #4
 80029b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80029b6:	2302      	movs	r3, #2
 80029b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80029bc:	230c      	movs	r3, #12
 80029be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80029c2:	2300      	movs	r3, #0
 80029c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ce:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029d2:	4618      	mov	r0, r3
 80029d4:	f002 fd1e 	bl	8005414 <HAL_RCC_OscConfig>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80029de:	f000 fa09 	bl	8002df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029e2:	233f      	movs	r3, #63	; 0x3f
 80029e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029e8:	2303      	movs	r3, #3
 80029ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a12:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002a16:	2101      	movs	r1, #1
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f003 f90b 	bl	8005c34 <HAL_RCC_ClockConfig>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <SystemClock_Config+0x130>
  {
    Error_Handler();
 8002a24:	f000 f9e6 	bl	8002df4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8002a28:	f107 0308 	add.w	r3, r7, #8
 8002a2c:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <SystemClock_Config+0x178>)
 8002a2e:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	2200      	movs	r2, #0
 8002a36:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002a38:	f107 0308 	add.w	r3, r7, #8
 8002a3c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8002a40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a44:	f107 0308 	add.w	r3, r7, #8
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fcc1 	bl	80063d0 <HAL_RCCEx_PeriphCLKConfig>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8002a54:	f000 f9ce 	bl	8002df4 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8002a58:	f002 fccc 	bl	80053f4 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8002a5c:	bf00      	nop
 8002a5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	58000400 	.word	0x58000400
 8002a6c:	58024800 	.word	0x58024800
 8002a70:	00040002 	.word	0x00040002

08002a74 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002a78:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <MX_ETH_Init+0x90>)
 8002a7a:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <MX_ETH_Init+0x94>)
 8002a7c:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8002a7e:	4b21      	ldr	r3, [pc, #132]	; (8002b04 <MX_ETH_Init+0x90>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8002a86:	4b1f      	ldr	r3, [pc, #124]	; (8002b04 <MX_ETH_Init+0x90>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8002a90:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <MX_ETH_Init+0x90>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	3302      	adds	r3, #2
 8002a96:	22e1      	movs	r2, #225	; 0xe1
 8002a98:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8002a9a:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <MX_ETH_Init+0x90>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	3303      	adds	r3, #3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <MX_ETH_Init+0x90>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2200      	movs	r2, #0
 8002aac:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <MX_ETH_Init+0x90>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	3305      	adds	r3, #5
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <MX_ETH_Init+0x90>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <MX_ETH_Init+0x90>)
 8002ac0:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <MX_ETH_Init+0x98>)
 8002ac2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <MX_ETH_Init+0x90>)
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <MX_ETH_Init+0x9c>)
 8002ac8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <MX_ETH_Init+0x90>)
 8002acc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002ad0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002ad2:	480c      	ldr	r0, [pc, #48]	; (8002b04 <MX_ETH_Init+0x90>)
 8002ad4:	f001 fcc4 	bl	8004460 <HAL_ETH_Init>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8002ade:	f000 f989 	bl	8002df4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002ae2:	2234      	movs	r2, #52	; 0x34
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	480b      	ldr	r0, [pc, #44]	; (8002b14 <MX_ETH_Init+0xa0>)
 8002ae8:	f006 fe02 	bl	80096f0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <MX_ETH_Init+0xa0>)
 8002aee:	2221      	movs	r2, #33	; 0x21
 8002af0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <MX_ETH_Init+0xa0>)
 8002af4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002af8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <MX_ETH_Init+0xa0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20001e70 	.word	0x20001e70
 8002b08:	40028000 	.word	0x40028000
 8002b0c:	20001870 	.word	0x20001870
 8002b10:	20001810 	.word	0x20001810
 8002b14:	20001ee0 	.word	0x20001ee0

08002b18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b1e:	4a23      	ldr	r2, [pc, #140]	; (8002bac <MX_USART3_UART_Init+0x94>)
 8002b20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b30:	4b1d      	ldr	r3, [pc, #116]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b3e:	220c      	movs	r2, #12
 8002b40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b48:	4b17      	ldr	r3, [pc, #92]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b4e:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b54:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b60:	4811      	ldr	r0, [pc, #68]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b62:	f005 fa1f 	bl	8007fa4 <HAL_UART_Init>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002b6c:	f000 f942 	bl	8002df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b70:	2100      	movs	r1, #0
 8002b72:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b74:	f006 f96f 	bl	8008e56 <HAL_UARTEx_SetTxFifoThreshold>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002b7e:	f000 f939 	bl	8002df4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b82:	2100      	movs	r1, #0
 8002b84:	4808      	ldr	r0, [pc, #32]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b86:	f006 f9a4 	bl	8008ed2 <HAL_UARTEx_SetRxFifoThreshold>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002b90:	f000 f930 	bl	8002df4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002b94:	4804      	ldr	r0, [pc, #16]	; (8002ba8 <MX_USART3_UART_Init+0x90>)
 8002b96:	f006 f925 	bl	8008de4 <HAL_UARTEx_DisableFifoMode>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ba0:	f000 f928 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20001964 	.word	0x20001964
 8002bac:	40004800 	.word	0x40004800

08002bb0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002bb4:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bb6:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bbc:	2209      	movs	r2, #9
 8002bbe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002bc6:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002bcc:	4b0f      	ldr	r3, [pc, #60]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bce:	2202      	movs	r2, #2
 8002bd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002bd2:	4b0e      	ldr	r3, [pc, #56]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002bde:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002be4:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002bea:	4b08      	ldr	r3, [pc, #32]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002bf6:	4805      	ldr	r0, [pc, #20]	; (8002c0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002bf8:	f002 fa5a 	bl	80050b0 <HAL_PCD_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002c02:	f000 f8f7 	bl	8002df4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002c06:	bf00      	nop
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	200019f0 	.word	0x200019f0
 8002c10:	40080000 	.word	0x40080000

08002c14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <MX_DMA_Init+0x4c>)
 8002c1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c20:	4a0f      	ldr	r2, [pc, #60]	; (8002c60 <MX_DMA_Init+0x4c>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <MX_DMA_Init+0x4c>)
 8002c2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c30:	f003 0301 	and.w	r3, r3, #1
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	200b      	movs	r0, #11
 8002c3e:	f000 fdbf 	bl	80037c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c42:	200b      	movs	r0, #11
 8002c44:	f000 fdd6 	bl	80037f4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	200c      	movs	r0, #12
 8002c4e:	f000 fdb7 	bl	80037c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002c52:	200c      	movs	r0, #12
 8002c54:	f000 fdce 	bl	80037f4 <HAL_NVIC_EnableIRQ>

}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	58024400 	.word	0x58024400

08002c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c7a:	4b52      	ldr	r3, [pc, #328]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c80:	4a50      	ldr	r2, [pc, #320]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002c82:	f043 0304 	orr.w	r3, r3, #4
 8002c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c8a:	4b4e      	ldr	r3, [pc, #312]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	623b      	str	r3, [r7, #32]
 8002c96:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c98:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9e:	4a49      	ldr	r2, [pc, #292]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca8:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb6:	4b43      	ldr	r3, [pc, #268]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbc:	4a41      	ldr	r2, [pc, #260]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cd4:	4b3b      	ldr	r3, [pc, #236]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cda:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002cdc:	f043 0320 	orr.w	r3, r3, #32
 8002ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ce4:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf2:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf8:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d02:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d10:	4b2c      	ldr	r3, [pc, #176]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d16:	4a2b      	ldr	r2, [pc, #172]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002d18:	f043 0308 	orr.w	r3, r3, #8
 8002d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d20:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d2e:	4b25      	ldr	r3, [pc, #148]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d34:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002d36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3e:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d52:	4a1c      	ldr	r2, [pc, #112]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002d54:	f043 0310 	orr.w	r3, r3, #16
 8002d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d5c:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <MX_GPIO_Init+0x160>)
 8002d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	607b      	str	r3, [r7, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d70:	4815      	ldr	r0, [pc, #84]	; (8002dc8 <MX_GPIO_Init+0x164>)
 8002d72:	f002 f93b 	bl	8004fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002d76:	2200      	movs	r2, #0
 8002d78:	2102      	movs	r1, #2
 8002d7a:	4814      	ldr	r0, [pc, #80]	; (8002dcc <MX_GPIO_Init+0x168>)
 8002d7c:	f002 f936 	bl	8004fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d86:	2301      	movs	r3, #1
 8002d88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d96:	4619      	mov	r1, r3
 8002d98:	480b      	ldr	r0, [pc, #44]	; (8002dc8 <MX_GPIO_Init+0x164>)
 8002d9a:	f001 ff77 	bl	8004c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002da2:	2301      	movs	r3, #1
 8002da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002daa:	2303      	movs	r3, #3
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db2:	4619      	mov	r1, r3
 8002db4:	4805      	ldr	r0, [pc, #20]	; (8002dcc <MX_GPIO_Init+0x168>)
 8002db6:	f001 ff69 	bl	8004c8c <HAL_GPIO_Init>

}
 8002dba:	bf00      	nop
 8002dbc:	3738      	adds	r7, #56	; 0x38
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	58024400 	.word	0x58024400
 8002dc8:	58021400 	.word	0x58021400
 8002dcc:	58021000 	.word	0x58021000

08002dd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d101      	bne.n	8002de6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002de2:	f000 fbd1 	bl	8003588 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40010000 	.word	0x40010000

08002df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002df8:	b672      	cpsid	i
}
 8002dfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002dfc:	e7fe      	b.n	8002dfc <Error_Handler+0x8>
	...

08002e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e06:	4b0a      	ldr	r3, [pc, #40]	; (8002e30 <HAL_MspInit+0x30>)
 8002e08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e0c:	4a08      	ldr	r2, [pc, #32]	; (8002e30 <HAL_MspInit+0x30>)
 8002e0e:	f043 0302 	orr.w	r3, r3, #2
 8002e12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_MspInit+0x30>)
 8002e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	607b      	str	r3, [r7, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	58024400 	.word	0x58024400

08002e34 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08e      	sub	sp, #56	; 0x38
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a59      	ldr	r2, [pc, #356]	; (8002fb8 <HAL_ETH_MspInit+0x184>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	f040 80ab 	bne.w	8002fae <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002e5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e5e:	4a57      	ldr	r2, [pc, #348]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e64:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e68:	4b54      	ldr	r3, [pc, #336]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002e6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002e76:	4b51      	ldr	r3, [pc, #324]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e7c:	4a4f      	ldr	r2, [pc, #316]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e86:	4b4d      	ldr	r3, [pc, #308]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e90:	61fb      	str	r3, [r7, #28]
 8002e92:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002e94:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e9a:	4a48      	ldr	r2, [pc, #288]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ea0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002ea4:	4b45      	ldr	r3, [pc, #276]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002ea6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	61bb      	str	r3, [r7, #24]
 8002eb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002eb2:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eb8:	4a40      	ldr	r2, [pc, #256]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002eba:	f043 0304 	orr.w	r3, r3, #4
 8002ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ec2:	4b3e      	ldr	r3, [pc, #248]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	617b      	str	r3, [r7, #20]
 8002ece:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed0:	4b3a      	ldr	r3, [pc, #232]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed6:	4a39      	ldr	r2, [pc, #228]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ee0:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef4:	4a31      	ldr	r2, [pc, #196]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002efe:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f12:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f1c:	4b27      	ldr	r3, [pc, #156]	; (8002fbc <HAL_ETH_MspInit+0x188>)
 8002f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002f2a:	2332      	movs	r3, #50	; 0x32
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f36:	2300      	movs	r3, #0
 8002f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f3a:	230b      	movs	r3, #11
 8002f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f42:	4619      	mov	r1, r3
 8002f44:	481e      	ldr	r0, [pc, #120]	; (8002fc0 <HAL_ETH_MspInit+0x18c>)
 8002f46:	f001 fea1 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002f4a:	2386      	movs	r3, #134	; 0x86
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	2300      	movs	r3, #0
 8002f58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f5a:	230b      	movs	r3, #11
 8002f5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f62:	4619      	mov	r1, r3
 8002f64:	4817      	ldr	r0, [pc, #92]	; (8002fc4 <HAL_ETH_MspInit+0x190>)
 8002f66:	f001 fe91 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f7c:	230b      	movs	r3, #11
 8002f7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f84:	4619      	mov	r1, r3
 8002f86:	4810      	ldr	r0, [pc, #64]	; (8002fc8 <HAL_ETH_MspInit+0x194>)
 8002f88:	f001 fe80 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002f8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002f9e:	230b      	movs	r3, #11
 8002fa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4808      	ldr	r0, [pc, #32]	; (8002fcc <HAL_ETH_MspInit+0x198>)
 8002faa:	f001 fe6f 	bl	8004c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002fae:	bf00      	nop
 8002fb0:	3738      	adds	r7, #56	; 0x38
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	40028000 	.word	0x40028000
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	58020800 	.word	0x58020800
 8002fc4:	58020000 	.word	0x58020000
 8002fc8:	58020400 	.word	0x58020400
 8002fcc:	58021800 	.word	0x58021800

08002fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	; 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a48      	ldr	r2, [pc, #288]	; (8003110 <HAL_UART_MspInit+0x140>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	f040 8089 	bne.w	8003106 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ff4:	4b47      	ldr	r3, [pc, #284]	; (8003114 <HAL_UART_MspInit+0x144>)
 8002ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ffa:	4a46      	ldr	r2, [pc, #280]	; (8003114 <HAL_UART_MspInit+0x144>)
 8002ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003000:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003004:	4b43      	ldr	r3, [pc, #268]	; (8003114 <HAL_UART_MspInit+0x144>)
 8003006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800300a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003012:	4b40      	ldr	r3, [pc, #256]	; (8003114 <HAL_UART_MspInit+0x144>)
 8003014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003018:	4a3e      	ldr	r2, [pc, #248]	; (8003114 <HAL_UART_MspInit+0x144>)
 800301a:	f043 0308 	orr.w	r3, r3, #8
 800301e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003022:	4b3c      	ldr	r3, [pc, #240]	; (8003114 <HAL_UART_MspInit+0x144>)
 8003024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003030:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003036:	2302      	movs	r3, #2
 8003038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303a:	2300      	movs	r3, #0
 800303c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303e:	2300      	movs	r3, #0
 8003040:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003042:	2307      	movs	r3, #7
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003046:	f107 0314 	add.w	r3, r7, #20
 800304a:	4619      	mov	r1, r3
 800304c:	4832      	ldr	r0, [pc, #200]	; (8003118 <HAL_UART_MspInit+0x148>)
 800304e:	f001 fe1d 	bl	8004c8c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8003052:	4b32      	ldr	r3, [pc, #200]	; (800311c <HAL_UART_MspInit+0x14c>)
 8003054:	4a32      	ldr	r2, [pc, #200]	; (8003120 <HAL_UART_MspInit+0x150>)
 8003056:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003058:	4b30      	ldr	r3, [pc, #192]	; (800311c <HAL_UART_MspInit+0x14c>)
 800305a:	222d      	movs	r2, #45	; 0x2d
 800305c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800305e:	4b2f      	ldr	r3, [pc, #188]	; (800311c <HAL_UART_MspInit+0x14c>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003064:	4b2d      	ldr	r3, [pc, #180]	; (800311c <HAL_UART_MspInit+0x14c>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800306a:	4b2c      	ldr	r3, [pc, #176]	; (800311c <HAL_UART_MspInit+0x14c>)
 800306c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003070:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003072:	4b2a      	ldr	r3, [pc, #168]	; (800311c <HAL_UART_MspInit+0x14c>)
 8003074:	2200      	movs	r2, #0
 8003076:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003078:	4b28      	ldr	r3, [pc, #160]	; (800311c <HAL_UART_MspInit+0x14c>)
 800307a:	2200      	movs	r2, #0
 800307c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800307e:	4b27      	ldr	r3, [pc, #156]	; (800311c <HAL_UART_MspInit+0x14c>)
 8003080:	2200      	movs	r2, #0
 8003082:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_UART_MspInit+0x14c>)
 8003086:	2200      	movs	r2, #0
 8003088:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800308a:	4b24      	ldr	r3, [pc, #144]	; (800311c <HAL_UART_MspInit+0x14c>)
 800308c:	2200      	movs	r2, #0
 800308e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003090:	4822      	ldr	r0, [pc, #136]	; (800311c <HAL_UART_MspInit+0x14c>)
 8003092:	f000 fc4d 	bl	8003930 <HAL_DMA_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800309c:	f7ff feaa 	bl	8002df4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a1e      	ldr	r2, [pc, #120]	; (800311c <HAL_UART_MspInit+0x14c>)
 80030a4:	679a      	str	r2, [r3, #120]	; 0x78
 80030a6:	4a1d      	ldr	r2, [pc, #116]	; (800311c <HAL_UART_MspInit+0x14c>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030ae:	4a1e      	ldr	r2, [pc, #120]	; (8003128 <HAL_UART_MspInit+0x158>)
 80030b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030b4:	222e      	movs	r2, #46	; 0x2e
 80030b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030b8:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030ba:	2240      	movs	r2, #64	; 0x40
 80030bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030be:	4b19      	ldr	r3, [pc, #100]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030cc:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80030ea:	480e      	ldr	r0, [pc, #56]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030ec:	f000 fc20 	bl	8003930 <HAL_DMA_Init>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80030f6:	f7ff fe7d 	bl	8002df4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a09      	ldr	r2, [pc, #36]	; (8003124 <HAL_UART_MspInit+0x154>)
 80030fe:	675a      	str	r2, [r3, #116]	; 0x74
 8003100:	4a08      	ldr	r2, [pc, #32]	; (8003124 <HAL_UART_MspInit+0x154>)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003106:	bf00      	nop
 8003108:	3728      	adds	r7, #40	; 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40004800 	.word	0x40004800
 8003114:	58024400 	.word	0x58024400
 8003118:	58020c00 	.word	0x58020c00
 800311c:	200018ec 	.word	0x200018ec
 8003120:	40020010 	.word	0x40020010
 8003124:	20001df8 	.word	0x20001df8
 8003128:	40020028 	.word	0x40020028

0800312c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_PCD_MspInit+0xa4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d13b      	bne.n	80031c6 <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	4b21      	ldr	r3, [pc, #132]	; (80031d4 <HAL_PCD_MspInit+0xa8>)
 8003150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003154:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <HAL_PCD_MspInit+0xa8>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800315e:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_PCD_MspInit+0xa8>)
 8003160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800316c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800317e:	230a      	movs	r3, #10
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	4813      	ldr	r0, [pc, #76]	; (80031d8 <HAL_PCD_MspInit+0xac>)
 800318a:	f001 fd7f 	bl	8004c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800318e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003194:	2300      	movs	r3, #0
 8003196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003198:	2300      	movs	r3, #0
 800319a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	4619      	mov	r1, r3
 80031a2:	480d      	ldr	r0, [pc, #52]	; (80031d8 <HAL_PCD_MspInit+0xac>)
 80031a4:	f001 fd72 	bl	8004c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <HAL_PCD_MspInit+0xa8>)
 80031aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031ae:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_PCD_MspInit+0xa8>)
 80031b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <HAL_PCD_MspInit+0xa8>)
 80031ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80031be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80031c6:	bf00      	nop
 80031c8:	3728      	adds	r7, #40	; 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40080000 	.word	0x40080000
 80031d4:	58024400 	.word	0x58024400
 80031d8:	58020000 	.word	0x58020000

080031dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	; 0x38
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b0f      	cmp	r3, #15
 80031e8:	d842      	bhi.n	8003270 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80031ea:	2200      	movs	r2, #0
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	2019      	movs	r0, #25
 80031f0:	f000 fae6 	bl	80037c0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031f4:	2019      	movs	r0, #25
 80031f6:	f000 fafd 	bl	80037f4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80031fa:	4a23      	ldr	r2, [pc, #140]	; (8003288 <HAL_InitTick+0xac>)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003200:	4b22      	ldr	r3, [pc, #136]	; (800328c <HAL_InitTick+0xb0>)
 8003202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <HAL_InitTick+0xb0>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003210:	4b1e      	ldr	r3, [pc, #120]	; (800328c <HAL_InitTick+0xb0>)
 8003212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	60bb      	str	r3, [r7, #8]
 800321c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800321e:	f107 020c 	add.w	r2, r7, #12
 8003222:	f107 0310 	add.w	r3, r7, #16
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f003 f88f 	bl	800634c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800322e:	f003 f877 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 8003232:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003236:	4a16      	ldr	r2, [pc, #88]	; (8003290 <HAL_InitTick+0xb4>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0c9b      	lsrs	r3, r3, #18
 800323e:	3b01      	subs	r3, #1
 8003240:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_InitTick+0xb8>)
 8003244:	4a14      	ldr	r2, [pc, #80]	; (8003298 <HAL_InitTick+0xbc>)
 8003246:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003248:	4b12      	ldr	r3, [pc, #72]	; (8003294 <HAL_InitTick+0xb8>)
 800324a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800324e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003250:	4a10      	ldr	r2, [pc, #64]	; (8003294 <HAL_InitTick+0xb8>)
 8003252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003254:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003256:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <HAL_InitTick+0xb8>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <HAL_InitTick+0xb8>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003262:	480c      	ldr	r0, [pc, #48]	; (8003294 <HAL_InitTick+0xb8>)
 8003264:	f004 fc06 	bl	8007a74 <HAL_TIM_Base_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d107      	bne.n	800327e <HAL_InitTick+0xa2>
 800326e:	e001      	b.n	8003274 <HAL_InitTick+0x98>
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e005      	b.n	8003280 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003274:	4807      	ldr	r0, [pc, #28]	; (8003294 <HAL_InitTick+0xb8>)
 8003276:	f004 fc5f 	bl	8007b38 <HAL_TIM_Base_Start_IT>
 800327a:	4603      	mov	r3, r0
 800327c:	e000      	b.n	8003280 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
}
 8003280:	4618      	mov	r0, r3
 8003282:	3738      	adds	r7, #56	; 0x38
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20001800 	.word	0x20001800
 800328c:	58024400 	.word	0x58024400
 8003290:	431bde83 	.word	0x431bde83
 8003294:	20001f14 	.word	0x20001f14
 8003298:	40010000 	.word	0x40010000

0800329c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032a0:	e7fe      	b.n	80032a0 <NMI_Handler+0x4>

080032a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032a2:	b480      	push	{r7}
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032a6:	e7fe      	b.n	80032a6 <HardFault_Handler+0x4>

080032a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032ac:	e7fe      	b.n	80032ac <MemManage_Handler+0x4>

080032ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032b2:	e7fe      	b.n	80032b2 <BusFault_Handler+0x4>

080032b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032b8:	e7fe      	b.n	80032b8 <UsageFault_Handler+0x4>

080032ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80032cc:	4802      	ldr	r0, [pc, #8]	; (80032d8 <TIM1_UP_IRQHandler+0x10>)
 80032ce:	f004 fc69 	bl	8007ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20001f14 	.word	0x20001f14

080032dc <osBoot_boot>:
  * @param[in]  none
  *
  * @return none
********************************************************************************/
void osBoot_boot(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08c      	sub	sp, #48	; 0x30
 80032e0:	af00      	add	r7, sp, #0
    BitWidthType  coreId,
                  programSectionsNumber;

    CosmOS_ProgramSectionConfigurationType * programSections;

    coreId = CILcore_getCoreId();
 80032e2:	f7fe fdb2 	bl	8001e4a <CILcore_getCoreId>
 80032e6:	62b8      	str	r0, [r7, #40]	; 0x28

    programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 80032e8:	4a29      	ldr	r2, [pc, #164]	; (8003390 <osBoot_boot+0xb4>)
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
    programSectionsNumber = bootSections[coreId].programSectionsNumber;
 80032f2:	4a27      	ldr	r2, [pc, #156]	; (8003390 <osBoot_boot+0xb4>)
 80032f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	4413      	add	r3, r2
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	623b      	str	r3, [r7, #32]


    for (BitWidthType i=0; i < programSectionsNumber; i++)
 80032fe:	2300      	movs	r3, #0
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003302:	e03c      	b.n	800337e <osBoot_boot+0xa2>
    {
        osBoot_bootSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 8003304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	461a      	mov	r2, r3
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	4413      	add	r3, r2
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	461a      	mov	r2, r3
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	4413      	add	r3, r2
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	461a      	mov	r2, r3
 8003334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003336:	4413      	add	r3, r2
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	61f8      	str	r0, [r7, #28]
 800333c:	61b9      	str	r1, [r7, #24]
 800333e:	617b      	str	r3, [r7, #20]
    BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	613b      	str	r3, [r7, #16]
	  unsigned char *pDst = sectionStart;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	60fb      	str	r3, [r7, #12]
	  unsigned char *pSrc = sectionStartInFlash;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	60bb      	str	r3, [r7, #8]
	  for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8003350:	2300      	movs	r3, #0
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	e00a      	b.n	800336c <osBoot_boot+0x90>
	  	  *pDst++=*pSrc++;
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	1c53      	adds	r3, r2, #1
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1c59      	adds	r1, r3, #1
 8003360:	60f9      	str	r1, [r7, #12]
 8003362:	7812      	ldrb	r2, [r2, #0]
 8003364:	701a      	strb	r2, [r3, #0]
	  for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3301      	adds	r3, #1
 800336a:	607b      	str	r3, [r7, #4]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	429a      	cmp	r2, r3
 8003374:	d3ef      	bcc.n	8003356 <osBoot_boot+0x7a>
}
 8003376:	bf00      	nop
    for (BitWidthType i=0; i < programSectionsNumber; i++)
 8003378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337a:	3301      	adds	r3, #1
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	429a      	cmp	r2, r3
 8003384:	d3be      	bcc.n	8003304 <osBoot_boot+0x28>
    }
};
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	3730      	adds	r7, #48	; 0x30
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	08009770 	.word	0x08009770

08003394 <Idle_CM7>:
  * *************************************************************************//**
  * @addtogroup General_schedulableCfg_h General
  * @ingroup Apis_schedulableCfg_h
  * @{
********************************************************************************/
__WEAK void Idle_CM7(void){};
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <Idle_CM4>:
__WEAK void sysJobs_CM7(void){};
__WEAK void Task_0_Core_0_Handler(void){};
__WEAK void Idle_CM4(void){};
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	bf00      	nop
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <IdleThread_CM7>:
__WEAK void sysJobs_CM4(void){};
__WEAK void Task_0_Core_1_Handler(void){};
__WEAK void IdleThread_CM7(void){};
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <IdleThread_CM4>:
__WEAK void IdleThread_CM4(void){};
 80033be:	b480      	push	{r7}
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	bf00      	nop
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <wrapped_Idle_CM7>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/

void wrapped_Idle_CM7(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	af00      	add	r7, sp, #0
    Idle_CM7();
 80033d0:	f7ff ffe0 	bl	8003394 <Idle_CM7>
    for(;;);
 80033d4:	e7fe      	b.n	80033d4 <wrapped_Idle_CM7+0x8>

080033d6 <wrapped_sysJobs_CM7>:
};
void wrapped_sysJobs_CM7(void)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 80033da:	200a      	movs	r0, #10
 80033dc:	f7fe fc96 	bl	8001d0c <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80033e0:	2009      	movs	r0, #9
 80033e2:	f7fe fc93 	bl	8001d0c <sysCalls_os>
    for(;;);
 80033e6:	e7fe      	b.n	80033e6 <wrapped_sysJobs_CM7+0x10>

080033e8 <wrapped_Task_0_Core_0_Handler>:
};
void wrapped_Task_0_Core_0_Handler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
    Task_0_Core_0_Handler();
 80033ec:	f000 f874 	bl	80034d8 <Task_0_Core_0_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80033f0:	2009      	movs	r0, #9
 80033f2:	f7fe fc8b 	bl	8001d0c <sysCalls_os>
    for(;;);
 80033f6:	e7fe      	b.n	80033f6 <wrapped_Task_0_Core_0_Handler+0xe>

080033f8 <wrapped_Idle_CM4>:
};
void wrapped_Idle_CM4(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
    Idle_CM4();
 80033fc:	f7ff ffd1 	bl	80033a2 <Idle_CM4>
    for(;;);
 8003400:	e7fe      	b.n	8003400 <wrapped_Idle_CM4+0x8>

08003402 <wrapped_sysJobs_CM4>:
};
void wrapped_sysJobs_CM4(void)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 8003406:	200a      	movs	r0, #10
 8003408:	f7fe fc80 	bl	8001d0c <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 800340c:	2009      	movs	r0, #9
 800340e:	f7fe fc7d 	bl	8001d0c <sysCalls_os>
    for(;;);
 8003412:	e7fe      	b.n	8003412 <wrapped_sysJobs_CM4+0x10>

08003414 <wrapped_Task_0_Core_1_Handler>:
};
void wrapped_Task_0_Core_1_Handler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
    Task_0_Core_1_Handler();
 8003418:	f000 f844 	bl	80034a4 <Task_0_Core_1_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 800341c:	2009      	movs	r0, #9
 800341e:	f7fe fc75 	bl	8001d0c <sysCalls_os>
    for(;;);
 8003422:	e7fe      	b.n	8003422 <wrapped_Task_0_Core_1_Handler+0xe>

08003424 <wrapped_IdleThread_CM7>:
};
void wrapped_IdleThread_CM7(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM7();
 8003428:	f7ff ffc2 	bl	80033b0 <IdleThread_CM7>
 800342c:	e7fc      	b.n	8003428 <wrapped_IdleThread_CM7+0x4>

0800342e <wrapped_IdleThread_CM4>:
    }
};
void wrapped_IdleThread_CM4(void)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM4();
 8003432:	f7ff ffc4 	bl	80033be <IdleThread_CM4>
 8003436:	e7fc      	b.n	8003432 <wrapped_IdleThread_CM4+0x4>

08003438 <PendSV_Handler>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/
__NAKED void PendSV_Handler(void)
{
    __asm volatile ("MRS R0,PSP");
 8003438:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("ISB");
 800343c:	f3bf 8f6f 	isb	sy

    __asm volatile ("TST R14, #16");
 8003440:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 8003444:	bf08      	it	eq
    __asm volatile ("VSTMDBEQ R0!,{S16-S31}"); /* If fp is true save floating point registers on stack */
 8003446:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    __asm volatile ("STMDB R0!,{R4-R8,R10,R11,R14}");
 800344a:	e920 4df0 	stmdb	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}

    __asm volatile ("BL scheduler_scheduleNextInstance");
 800344e:	f7fe f929 	bl	80016a4 <scheduler_scheduleNextInstance>
    __asm volatile ("ISB");
 8003452:	f3bf 8f6f 	isb	sy

    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8003456:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
    __asm volatile ("TST R14, #16");
 800345a:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 800345e:	bf08      	it	eq
    __asm volatile ("VLDMIAEQ R0!,{S16-S31}"); /* If fp is true restore floating point registers on stack */
 8003460:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    __asm volatile ("MSR PSP,R0");
 8003464:	f380 8809 	msr	PSP, r0
    __asm volatile ("ISB");
 8003468:	f3bf 8f6f 	isb	sy

    __asm volatile ("BX R14");
 800346c:	4770      	bx	lr
}
 800346e:	bf00      	nop

08003470 <SysTick_Handler>:

void SysTick_Handler(){
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <SysTick_Handler+0x1c>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a04      	ldr	r2, [pc, #16]	; (800348c <SysTick_Handler+0x1c>)
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347e:	6053      	str	r3, [r2, #4]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <SVC_Handler>:

__NAKED void SVC_Handler( void )
{
    __asm volatile ("TST LR, #4");
 8003490:	f01e 0f04 	tst.w	lr, #4
    __asm volatile ("ITE EQ");
 8003494:	bf0c      	ite	eq
    __asm volatile ("MRSEQ r0, MSP");
 8003496:	f3ef 8008 	mrseq	r0, MSP
    __asm volatile ("MRSNE r0, PSP");
 800349a:	f3ef 8009 	mrsne	r0, PSP
    __asm volatile ( "B CILsysCalls_dispatcher");
 800349e:	f7fe bf1c 	b.w	80022da <CILsysCalls_dispatcher>
}
 80034a2:	bf00      	nop

080034a4 <Task_0_Core_1_Handler>:
** Program ID macro = PROGRAM_1_CORE_1_ID
** WCET macro = TASK_0_PROGRAM_1_CORE_1_WCET
** Period of task in ticks = 50
********************************************************************************/
void Task_0_Core_1_Handler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_1_Handler
********************************************************************************/
if (counter_cm4 > 100)
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <Task_0_Core_1_Handler+0x2c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b64      	cmp	r3, #100	; 0x64
 80034ae:	dd08      	ble.n	80034c2 <Task_0_Core_1_Handler+0x1e>
{
    counter_cm4 = 0;
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <Task_0_Core_1_Handler+0x2c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOB, GPIO_PIN_0); //GREEN LED
 80034b6:	2201      	movs	r2, #1
 80034b8:	4906      	ldr	r1, [pc, #24]	; (80034d4 <Task_0_Core_1_Handler+0x30>)
 80034ba:	2006      	movs	r0, #6
 80034bc:	f7fe fc31 	bl	8001d22 <sysCalls_readWrite>
}
/********************************************************************************
** stop_name =Task_0_Core_1_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 80034c0:	e004      	b.n	80034cc <Task_0_Core_1_Handler+0x28>
    counter_cm4++;
 80034c2:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <Task_0_Core_1_Handler+0x2c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	3301      	adds	r3, #1
 80034c8:	4a01      	ldr	r2, [pc, #4]	; (80034d0 <Task_0_Core_1_Handler+0x2c>)
 80034ca:	6013      	str	r3, [r2, #0]
};
 80034cc:	bf00      	nop
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	10001000 	.word	0x10001000
 80034d4:	58020400 	.word	0x58020400

080034d8 <Task_0_Core_0_Handler>:
** Program ID macro = PROGRAM_1_CORE_0_ID
** WCET macro = TASK_0_PROGRAM_1_CORE_0_WCET
** Period of task in ticks = 50
********************************************************************************/
void Task_0_Core_0_Handler(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_0_Handler
********************************************************************************/
if (counter > 100)
 80034dc:	4b0a      	ldr	r3, [pc, #40]	; (8003508 <Task_0_Core_0_Handler+0x30>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b64      	cmp	r3, #100	; 0x64
 80034e2:	dd08      	ble.n	80034f6 <Task_0_Core_0_Handler+0x1e>
{
    counter = 0;
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <Task_0_Core_0_Handler+0x30>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOE, GPIO_PIN_1); //ORANGE LED
 80034ea:	2202      	movs	r2, #2
 80034ec:	4907      	ldr	r1, [pc, #28]	; (800350c <Task_0_Core_0_Handler+0x34>)
 80034ee:	2006      	movs	r0, #6
 80034f0:	f7fe fc17 	bl	8001d22 <sysCalls_readWrite>
 80034f4:	e004      	b.n	8003500 <Task_0_Core_0_Handler+0x28>
}
else
{
    counter++;
 80034f6:	4b04      	ldr	r3, [pc, #16]	; (8003508 <Task_0_Core_0_Handler+0x30>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3301      	adds	r3, #1
 80034fc:	4a02      	ldr	r2, [pc, #8]	; (8003508 <Task_0_Core_0_Handler+0x30>)
 80034fe:	6013      	str	r3, [r2, #0]
}
__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 8003500:	ee20 0a20 	vmul.f32	s0, s0, s1
/********************************************************************************
** stop_name =Task_0_Core_0_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8003504:	bf00      	nop
 8003506:	bd80      	pop	{r7, pc}
 8003508:	20001000 	.word	0x20001000
 800350c:	58021000 	.word	0x58021000

08003510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003516:	2003      	movs	r0, #3
 8003518:	f000 f947 	bl	80037aa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800351c:	f002 fd40 	bl	8005fa0 <HAL_RCC_GetSysClockFreq>
 8003520:	4602      	mov	r2, r0
 8003522:	4b15      	ldr	r3, [pc, #84]	; (8003578 <HAL_Init+0x68>)
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	0a1b      	lsrs	r3, r3, #8
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	4913      	ldr	r1, [pc, #76]	; (800357c <HAL_Init+0x6c>)
 800352e:	5ccb      	ldrb	r3, [r1, r3]
 8003530:	f003 031f 	and.w	r3, r3, #31
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
 8003538:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <HAL_Init+0x68>)
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_Init+0x6c>)
 8003544:	5cd3      	ldrb	r3, [r2, r3]
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	fa22 f303 	lsr.w	r3, r2, r3
 8003550:	4a0b      	ldr	r2, [pc, #44]	; (8003580 <HAL_Init+0x70>)
 8003552:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003554:	4a0b      	ldr	r2, [pc, #44]	; (8003584 <HAL_Init+0x74>)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800355a:	2000      	movs	r0, #0
 800355c:	f7ff fe3e 	bl	80031dc <HAL_InitTick>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e002      	b.n	8003570 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800356a:	f7ff fc49 	bl	8002e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}
 8003578:	58024400 	.word	0x58024400
 800357c:	08009820 	.word	0x08009820
 8003580:	2000180c 	.word	0x2000180c
 8003584:	20001808 	.word	0x20001808

08003588 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800358c:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_IncTick+0x20>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_IncTick+0x24>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4413      	add	r3, r2
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_IncTick+0x24>)
 800359a:	6013      	str	r3, [r2, #0]
}
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	20001804 	.word	0x20001804
 80035ac:	20001f60 	.word	0x20001f60

080035b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return uwTick;
 80035b4:	4b03      	ldr	r3, [pc, #12]	; (80035c4 <HAL_GetTick+0x14>)
 80035b6:	681b      	ldr	r3, [r3, #0]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	20001f60 	.word	0x20001f60

080035c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80035d0:	f7ff ffee 	bl	80035b0 <HAL_GetTick>
 80035d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d005      	beq.n	80035ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <HAL_Delay+0x44>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	461a      	mov	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4413      	add	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ee:	bf00      	nop
 80035f0:	f7ff ffde 	bl	80035b0 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d8f7      	bhi.n	80035f0 <HAL_Delay+0x28>
  {
  }
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	20001804 	.word	0x20001804

08003610 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_GetREVID+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	0c1b      	lsrs	r3, r3, #16
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	5c001000 	.word	0x5c001000

08003628 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003638:	4904      	ldr	r1, [pc, #16]	; (800364c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4313      	orrs	r3, r2
 800363e:	604b      	str	r3, [r1, #4]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	58000400 	.word	0x58000400

08003650 <__NVIC_SetPriorityGrouping>:
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <__NVIC_SetPriorityGrouping+0x40>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800366c:	4013      	ands	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003678:	4b06      	ldr	r3, [pc, #24]	; (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 800367a:	4313      	orrs	r3, r2
 800367c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367e:	4a04      	ldr	r2, [pc, #16]	; (8003690 <__NVIC_SetPriorityGrouping+0x40>)
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	60d3      	str	r3, [r2, #12]
}
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	e000ed00 	.word	0xe000ed00
 8003694:	05fa0000 	.word	0x05fa0000

08003698 <__NVIC_GetPriorityGrouping>:
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <__NVIC_GetPriorityGrouping+0x18>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 0307 	and.w	r3, r3, #7
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <__NVIC_EnableIRQ>:
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	db0b      	blt.n	80036de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c6:	88fb      	ldrh	r3, [r7, #6]
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	4907      	ldr	r1, [pc, #28]	; (80036ec <__NVIC_EnableIRQ+0x38>)
 80036ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2001      	movs	r0, #1
 80036d6:	fa00 f202 	lsl.w	r2, r0, r2
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000e100 	.word	0xe000e100

080036f0 <__NVIC_SetPriority>:
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003700:	2b00      	cmp	r3, #0
 8003702:	db0a      	blt.n	800371a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	b2da      	uxtb	r2, r3
 8003708:	490c      	ldr	r1, [pc, #48]	; (800373c <__NVIC_SetPriority+0x4c>)
 800370a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800370e:	0112      	lsls	r2, r2, #4
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	440b      	add	r3, r1
 8003714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003718:	e00a      	b.n	8003730 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4908      	ldr	r1, [pc, #32]	; (8003740 <__NVIC_SetPriority+0x50>)
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	3b04      	subs	r3, #4
 8003728:	0112      	lsls	r2, r2, #4
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	440b      	add	r3, r1
 800372e:	761a      	strb	r2, [r3, #24]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000e100 	.word	0xe000e100
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f1c3 0307 	rsb	r3, r3, #7
 800375e:	2b04      	cmp	r3, #4
 8003760:	bf28      	it	cs
 8003762:	2304      	movcs	r3, #4
 8003764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3304      	adds	r3, #4
 800376a:	2b06      	cmp	r3, #6
 800376c:	d902      	bls.n	8003774 <NVIC_EncodePriority+0x30>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3b03      	subs	r3, #3
 8003772:	e000      	b.n	8003776 <NVIC_EncodePriority+0x32>
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43da      	mvns	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	401a      	ands	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800378c:	f04f 31ff 	mov.w	r1, #4294967295
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	43d9      	mvns	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	4313      	orrs	r3, r2
         );
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3724      	adds	r7, #36	; 0x24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b082      	sub	sp, #8
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7ff ff4c 	bl	8003650 <__NVIC_SetPriorityGrouping>
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037ce:	f7ff ff63 	bl	8003698 <__NVIC_GetPriorityGrouping>
 80037d2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	68b9      	ldr	r1, [r7, #8]
 80037d8:	6978      	ldr	r0, [r7, #20]
 80037da:	f7ff ffb3 	bl	8003744 <NVIC_EncodePriority>
 80037de:	4602      	mov	r2, r0
 80037e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037e4:	4611      	mov	r1, r2
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff ff82 	bl	80036f0 <__NVIC_SetPriority>
}
 80037ec:	bf00      	nop
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ff56 	bl	80036b4 <__NVIC_EnableIRQ>
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003814:	f3bf 8f5f 	dmb	sy
}
 8003818:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800381a:	4b07      	ldr	r3, [pc, #28]	; (8003838 <HAL_MPU_Disable+0x28>)
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	4a06      	ldr	r2, [pc, #24]	; (8003838 <HAL_MPU_Disable+0x28>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003824:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003826:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_MPU_Disable+0x2c>)
 8003828:	2200      	movs	r2, #0
 800382a:	605a      	str	r2, [r3, #4]
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000ed00 	.word	0xe000ed00
 800383c:	e000ed90 	.word	0xe000ed90

08003840 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003848:	4a0b      	ldr	r2, [pc, #44]	; (8003878 <HAL_MPU_Enable+0x38>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <HAL_MPU_Enable+0x3c>)
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <HAL_MPU_Enable+0x3c>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800385e:	f3bf 8f4f 	dsb	sy
}
 8003862:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003864:	f3bf 8f6f 	isb	sy
}
 8003868:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	e000ed90 	.word	0xe000ed90
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	785a      	ldrb	r2, [r3, #1]
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_MPU_ConfigRegion+0x84>)
 800388e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d029      	beq.n	80038ec <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003898:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <HAL_MPU_ConfigRegion+0x84>)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	7b1b      	ldrb	r3, [r3, #12]
 80038a4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	7adb      	ldrb	r3, [r3, #11]
 80038aa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038ac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7a9b      	ldrb	r3, [r3, #10]
 80038b2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80038b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	7b5b      	ldrb	r3, [r3, #13]
 80038ba:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80038bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7b9b      	ldrb	r3, [r3, #14]
 80038c2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80038c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7bdb      	ldrb	r3, [r3, #15]
 80038ca:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80038cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7a5b      	ldrb	r3, [r3, #9]
 80038d2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80038d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	7a1b      	ldrb	r3, [r3, #8]
 80038da:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80038dc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	7812      	ldrb	r2, [r2, #0]
 80038e2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038e4:	4a07      	ldr	r2, [pc, #28]	; (8003904 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80038e6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80038e8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80038ea:	e005      	b.n	80038f8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80038ec:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_MPU_ConfigRegion+0x84>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80038f2:	4b04      	ldr	r3, [pc, #16]	; (8003904 <HAL_MPU_ConfigRegion+0x84>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed90 	.word	0xe000ed90

08003908 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800390c:	4b07      	ldr	r3, [pc, #28]	; (800392c <HAL_GetCurrentCPUID+0x24>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	2b07      	cmp	r3, #7
 8003918:	d101      	bne.n	800391e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800391a:	2303      	movs	r3, #3
 800391c:	e000      	b.n	8003920 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800391e:	2301      	movs	r3, #1
  }
}
 8003920:	4618      	mov	r0, r3
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003938:	f7ff fe3a 	bl	80035b0 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e316      	b.n	8003f76 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a66      	ldr	r2, [pc, #408]	; (8003ae8 <HAL_DMA_Init+0x1b8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d04a      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a65      	ldr	r2, [pc, #404]	; (8003aec <HAL_DMA_Init+0x1bc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d045      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a63      	ldr	r2, [pc, #396]	; (8003af0 <HAL_DMA_Init+0x1c0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d040      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a62      	ldr	r2, [pc, #392]	; (8003af4 <HAL_DMA_Init+0x1c4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d03b      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a60      	ldr	r2, [pc, #384]	; (8003af8 <HAL_DMA_Init+0x1c8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d036      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a5f      	ldr	r2, [pc, #380]	; (8003afc <HAL_DMA_Init+0x1cc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d031      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a5d      	ldr	r2, [pc, #372]	; (8003b00 <HAL_DMA_Init+0x1d0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02c      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a5c      	ldr	r2, [pc, #368]	; (8003b04 <HAL_DMA_Init+0x1d4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d027      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a5a      	ldr	r2, [pc, #360]	; (8003b08 <HAL_DMA_Init+0x1d8>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d022      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a59      	ldr	r2, [pc, #356]	; (8003b0c <HAL_DMA_Init+0x1dc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d01d      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a57      	ldr	r2, [pc, #348]	; (8003b10 <HAL_DMA_Init+0x1e0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d018      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a56      	ldr	r2, [pc, #344]	; (8003b14 <HAL_DMA_Init+0x1e4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d013      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a54      	ldr	r2, [pc, #336]	; (8003b18 <HAL_DMA_Init+0x1e8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00e      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a53      	ldr	r2, [pc, #332]	; (8003b1c <HAL_DMA_Init+0x1ec>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a51      	ldr	r2, [pc, #324]	; (8003b20 <HAL_DMA_Init+0x1f0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <HAL_DMA_Init+0xb8>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a50      	ldr	r2, [pc, #320]	; (8003b24 <HAL_DMA_Init+0x1f4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d101      	bne.n	80039ec <HAL_DMA_Init+0xbc>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <HAL_DMA_Init+0xbe>
 80039ec:	2300      	movs	r3, #0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 813b 	beq.w	8003c6a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a37      	ldr	r2, [pc, #220]	; (8003ae8 <HAL_DMA_Init+0x1b8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d04a      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a36      	ldr	r2, [pc, #216]	; (8003aec <HAL_DMA_Init+0x1bc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d045      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a34      	ldr	r2, [pc, #208]	; (8003af0 <HAL_DMA_Init+0x1c0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d040      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <HAL_DMA_Init+0x1c4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d03b      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a31      	ldr	r2, [pc, #196]	; (8003af8 <HAL_DMA_Init+0x1c8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d036      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a30      	ldr	r2, [pc, #192]	; (8003afc <HAL_DMA_Init+0x1cc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d031      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2e      	ldr	r2, [pc, #184]	; (8003b00 <HAL_DMA_Init+0x1d0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d02c      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a2d      	ldr	r2, [pc, #180]	; (8003b04 <HAL_DMA_Init+0x1d4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d027      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2b      	ldr	r2, [pc, #172]	; (8003b08 <HAL_DMA_Init+0x1d8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d022      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2a      	ldr	r2, [pc, #168]	; (8003b0c <HAL_DMA_Init+0x1dc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d01d      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <HAL_DMA_Init+0x1e0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d018      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a27      	ldr	r2, [pc, #156]	; (8003b14 <HAL_DMA_Init+0x1e4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a25      	ldr	r2, [pc, #148]	; (8003b18 <HAL_DMA_Init+0x1e8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00e      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <HAL_DMA_Init+0x1ec>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d009      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a22      	ldr	r2, [pc, #136]	; (8003b20 <HAL_DMA_Init+0x1f0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_DMA_Init+0x174>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a21      	ldr	r2, [pc, #132]	; (8003b24 <HAL_DMA_Init+0x1f4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d108      	bne.n	8003ab6 <HAL_DMA_Init+0x186>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e007      	b.n	8003ac6 <HAL_DMA_Init+0x196>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003ac6:	e02f      	b.n	8003b28 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ac8:	f7ff fd72 	bl	80035b0 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b05      	cmp	r3, #5
 8003ad4:	d928      	bls.n	8003b28 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2203      	movs	r2, #3
 8003ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e246      	b.n	8003f76 <HAL_DMA_Init+0x646>
 8003ae8:	40020010 	.word	0x40020010
 8003aec:	40020028 	.word	0x40020028
 8003af0:	40020040 	.word	0x40020040
 8003af4:	40020058 	.word	0x40020058
 8003af8:	40020070 	.word	0x40020070
 8003afc:	40020088 	.word	0x40020088
 8003b00:	400200a0 	.word	0x400200a0
 8003b04:	400200b8 	.word	0x400200b8
 8003b08:	40020410 	.word	0x40020410
 8003b0c:	40020428 	.word	0x40020428
 8003b10:	40020440 	.word	0x40020440
 8003b14:	40020458 	.word	0x40020458
 8003b18:	40020470 	.word	0x40020470
 8003b1c:	40020488 	.word	0x40020488
 8003b20:	400204a0 	.word	0x400204a0
 8003b24:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1c8      	bne.n	8003ac8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4b83      	ldr	r3, [pc, #524]	; (8003d50 <HAL_DMA_Init+0x420>)
 8003b42:	4013      	ands	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003b4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b66:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d107      	bne.n	8003b8c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b84:	4313      	orrs	r3, r2
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003b8c:	4b71      	ldr	r3, [pc, #452]	; (8003d54 <HAL_DMA_Init+0x424>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	4b71      	ldr	r3, [pc, #452]	; (8003d58 <HAL_DMA_Init+0x428>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b98:	d328      	bcc.n	8003bec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b28      	cmp	r3, #40	; 0x28
 8003ba0:	d903      	bls.n	8003baa <HAL_DMA_Init+0x27a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b2e      	cmp	r3, #46	; 0x2e
 8003ba8:	d917      	bls.n	8003bda <HAL_DMA_Init+0x2aa>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2b3e      	cmp	r3, #62	; 0x3e
 8003bb0:	d903      	bls.n	8003bba <HAL_DMA_Init+0x28a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b42      	cmp	r3, #66	; 0x42
 8003bb8:	d90f      	bls.n	8003bda <HAL_DMA_Init+0x2aa>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	2b46      	cmp	r3, #70	; 0x46
 8003bc0:	d903      	bls.n	8003bca <HAL_DMA_Init+0x29a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b48      	cmp	r3, #72	; 0x48
 8003bc8:	d907      	bls.n	8003bda <HAL_DMA_Init+0x2aa>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b4e      	cmp	r3, #78	; 0x4e
 8003bd0:	d905      	bls.n	8003bde <HAL_DMA_Init+0x2ae>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b52      	cmp	r3, #82	; 0x52
 8003bd8:	d801      	bhi.n	8003bde <HAL_DMA_Init+0x2ae>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e000      	b.n	8003be0 <HAL_DMA_Init+0x2b0>
 8003bde:	2300      	movs	r3, #0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f023 0307 	bic.w	r3, r3, #7
 8003c02:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d117      	bne.n	8003c46 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00e      	beq.n	8003c46 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fa8f 	bl	800414c <DMA_CheckFifoParam>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2240      	movs	r2, #64	; 0x40
 8003c38:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e197      	b.n	8003f76 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f9ca 	bl	8003fe8 <DMA_CalcBaseAndBitshift>
 8003c54:	4603      	mov	r3, r0
 8003c56:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c5c:	f003 031f 	and.w	r3, r3, #31
 8003c60:	223f      	movs	r2, #63	; 0x3f
 8003c62:	409a      	lsls	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	609a      	str	r2, [r3, #8]
 8003c68:	e0cd      	b.n	8003e06 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a3b      	ldr	r2, [pc, #236]	; (8003d5c <HAL_DMA_Init+0x42c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d022      	beq.n	8003cba <HAL_DMA_Init+0x38a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a39      	ldr	r2, [pc, #228]	; (8003d60 <HAL_DMA_Init+0x430>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d01d      	beq.n	8003cba <HAL_DMA_Init+0x38a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a38      	ldr	r2, [pc, #224]	; (8003d64 <HAL_DMA_Init+0x434>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d018      	beq.n	8003cba <HAL_DMA_Init+0x38a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a36      	ldr	r2, [pc, #216]	; (8003d68 <HAL_DMA_Init+0x438>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_DMA_Init+0x38a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a35      	ldr	r2, [pc, #212]	; (8003d6c <HAL_DMA_Init+0x43c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00e      	beq.n	8003cba <HAL_DMA_Init+0x38a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a33      	ldr	r2, [pc, #204]	; (8003d70 <HAL_DMA_Init+0x440>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d009      	beq.n	8003cba <HAL_DMA_Init+0x38a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a32      	ldr	r2, [pc, #200]	; (8003d74 <HAL_DMA_Init+0x444>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d004      	beq.n	8003cba <HAL_DMA_Init+0x38a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a30      	ldr	r2, [pc, #192]	; (8003d78 <HAL_DMA_Init+0x448>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_DMA_Init+0x38e>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_DMA_Init+0x390>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8097 	beq.w	8003df4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <HAL_DMA_Init+0x42c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d021      	beq.n	8003d14 <HAL_DMA_Init+0x3e4>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a22      	ldr	r2, [pc, #136]	; (8003d60 <HAL_DMA_Init+0x430>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01c      	beq.n	8003d14 <HAL_DMA_Init+0x3e4>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a21      	ldr	r2, [pc, #132]	; (8003d64 <HAL_DMA_Init+0x434>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d017      	beq.n	8003d14 <HAL_DMA_Init+0x3e4>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <HAL_DMA_Init+0x438>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d012      	beq.n	8003d14 <HAL_DMA_Init+0x3e4>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <HAL_DMA_Init+0x43c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00d      	beq.n	8003d14 <HAL_DMA_Init+0x3e4>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1c      	ldr	r2, [pc, #112]	; (8003d70 <HAL_DMA_Init+0x440>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d008      	beq.n	8003d14 <HAL_DMA_Init+0x3e4>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <HAL_DMA_Init+0x444>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d003      	beq.n	8003d14 <HAL_DMA_Init+0x3e4>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <HAL_DMA_Init+0x448>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2202      	movs	r2, #2
 8003d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4b12      	ldr	r3, [pc, #72]	; (8003d7c <HAL_DMA_Init+0x44c>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d020      	beq.n	8003d80 <HAL_DMA_Init+0x450>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d102      	bne.n	8003d4c <HAL_DMA_Init+0x41c>
 8003d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d4a:	e01a      	b.n	8003d82 <HAL_DMA_Init+0x452>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e018      	b.n	8003d82 <HAL_DMA_Init+0x452>
 8003d50:	fe10803f 	.word	0xfe10803f
 8003d54:	5c001000 	.word	0x5c001000
 8003d58:	ffff0000 	.word	0xffff0000
 8003d5c:	58025408 	.word	0x58025408
 8003d60:	5802541c 	.word	0x5802541c
 8003d64:	58025430 	.word	0x58025430
 8003d68:	58025444 	.word	0x58025444
 8003d6c:	58025458 	.word	0x58025458
 8003d70:	5802546c 	.word	0x5802546c
 8003d74:	58025480 	.word	0x58025480
 8003d78:	58025494 	.word	0x58025494
 8003d7c:	fffe000f 	.word	0xfffe000f
 8003d80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68d2      	ldr	r2, [r2, #12]
 8003d86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003d88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003d90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003d98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003da0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003da8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003db0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4b6e      	ldr	r3, [pc, #440]	; (8003f80 <HAL_DMA_Init+0x650>)
 8003dc8:	4413      	add	r3, r2
 8003dca:	4a6e      	ldr	r2, [pc, #440]	; (8003f84 <HAL_DMA_Init+0x654>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	009a      	lsls	r2, r3, #2
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f905 	bl	8003fe8 <DMA_CalcBaseAndBitshift>
 8003dde:	4603      	mov	r3, r0
 8003de0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	2201      	movs	r2, #1
 8003dec:	409a      	lsls	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	e008      	b.n	8003e06 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2240      	movs	r2, #64	; 0x40
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e0b7      	b.n	8003f76 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a5f      	ldr	r2, [pc, #380]	; (8003f88 <HAL_DMA_Init+0x658>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d072      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a5d      	ldr	r2, [pc, #372]	; (8003f8c <HAL_DMA_Init+0x65c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d06d      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a5c      	ldr	r2, [pc, #368]	; (8003f90 <HAL_DMA_Init+0x660>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d068      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a5a      	ldr	r2, [pc, #360]	; (8003f94 <HAL_DMA_Init+0x664>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d063      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a59      	ldr	r2, [pc, #356]	; (8003f98 <HAL_DMA_Init+0x668>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d05e      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a57      	ldr	r2, [pc, #348]	; (8003f9c <HAL_DMA_Init+0x66c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d059      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a56      	ldr	r2, [pc, #344]	; (8003fa0 <HAL_DMA_Init+0x670>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d054      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a54      	ldr	r2, [pc, #336]	; (8003fa4 <HAL_DMA_Init+0x674>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d04f      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a53      	ldr	r2, [pc, #332]	; (8003fa8 <HAL_DMA_Init+0x678>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d04a      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a51      	ldr	r2, [pc, #324]	; (8003fac <HAL_DMA_Init+0x67c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d045      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a50      	ldr	r2, [pc, #320]	; (8003fb0 <HAL_DMA_Init+0x680>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d040      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a4e      	ldr	r2, [pc, #312]	; (8003fb4 <HAL_DMA_Init+0x684>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d03b      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a4d      	ldr	r2, [pc, #308]	; (8003fb8 <HAL_DMA_Init+0x688>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d036      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4b      	ldr	r2, [pc, #300]	; (8003fbc <HAL_DMA_Init+0x68c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d031      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a4a      	ldr	r2, [pc, #296]	; (8003fc0 <HAL_DMA_Init+0x690>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d02c      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a48      	ldr	r2, [pc, #288]	; (8003fc4 <HAL_DMA_Init+0x694>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d027      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a47      	ldr	r2, [pc, #284]	; (8003fc8 <HAL_DMA_Init+0x698>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d022      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a45      	ldr	r2, [pc, #276]	; (8003fcc <HAL_DMA_Init+0x69c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d01d      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a44      	ldr	r2, [pc, #272]	; (8003fd0 <HAL_DMA_Init+0x6a0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d018      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a42      	ldr	r2, [pc, #264]	; (8003fd4 <HAL_DMA_Init+0x6a4>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a41      	ldr	r2, [pc, #260]	; (8003fd8 <HAL_DMA_Init+0x6a8>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a3f      	ldr	r2, [pc, #252]	; (8003fdc <HAL_DMA_Init+0x6ac>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d009      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a3e      	ldr	r2, [pc, #248]	; (8003fe0 <HAL_DMA_Init+0x6b0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d004      	beq.n	8003ef6 <HAL_DMA_Init+0x5c6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <HAL_DMA_Init+0x6b4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d101      	bne.n	8003efa <HAL_DMA_Init+0x5ca>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <HAL_DMA_Init+0x5cc>
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d032      	beq.n	8003f66 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f99f 	bl	8004244 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b80      	cmp	r3, #128	; 0x80
 8003f0c:	d102      	bne.n	8003f14 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1c:	b2d2      	uxtb	r2, r2
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003f28:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d010      	beq.n	8003f54 <HAL_DMA_Init+0x624>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d80c      	bhi.n	8003f54 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa1c 	bl	8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	e008      	b.n	8003f66 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	a7fdabf8 	.word	0xa7fdabf8
 8003f84:	cccccccd 	.word	0xcccccccd
 8003f88:	40020010 	.word	0x40020010
 8003f8c:	40020028 	.word	0x40020028
 8003f90:	40020040 	.word	0x40020040
 8003f94:	40020058 	.word	0x40020058
 8003f98:	40020070 	.word	0x40020070
 8003f9c:	40020088 	.word	0x40020088
 8003fa0:	400200a0 	.word	0x400200a0
 8003fa4:	400200b8 	.word	0x400200b8
 8003fa8:	40020410 	.word	0x40020410
 8003fac:	40020428 	.word	0x40020428
 8003fb0:	40020440 	.word	0x40020440
 8003fb4:	40020458 	.word	0x40020458
 8003fb8:	40020470 	.word	0x40020470
 8003fbc:	40020488 	.word	0x40020488
 8003fc0:	400204a0 	.word	0x400204a0
 8003fc4:	400204b8 	.word	0x400204b8
 8003fc8:	58025408 	.word	0x58025408
 8003fcc:	5802541c 	.word	0x5802541c
 8003fd0:	58025430 	.word	0x58025430
 8003fd4:	58025444 	.word	0x58025444
 8003fd8:	58025458 	.word	0x58025458
 8003fdc:	5802546c 	.word	0x5802546c
 8003fe0:	58025480 	.word	0x58025480
 8003fe4:	58025494 	.word	0x58025494

08003fe8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a42      	ldr	r2, [pc, #264]	; (8004100 <DMA_CalcBaseAndBitshift+0x118>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d04a      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a41      	ldr	r2, [pc, #260]	; (8004104 <DMA_CalcBaseAndBitshift+0x11c>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d045      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a3f      	ldr	r2, [pc, #252]	; (8004108 <DMA_CalcBaseAndBitshift+0x120>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d040      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a3e      	ldr	r2, [pc, #248]	; (800410c <DMA_CalcBaseAndBitshift+0x124>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d03b      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a3c      	ldr	r2, [pc, #240]	; (8004110 <DMA_CalcBaseAndBitshift+0x128>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d036      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a3b      	ldr	r2, [pc, #236]	; (8004114 <DMA_CalcBaseAndBitshift+0x12c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d031      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a39      	ldr	r2, [pc, #228]	; (8004118 <DMA_CalcBaseAndBitshift+0x130>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d02c      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a38      	ldr	r2, [pc, #224]	; (800411c <DMA_CalcBaseAndBitshift+0x134>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d027      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a36      	ldr	r2, [pc, #216]	; (8004120 <DMA_CalcBaseAndBitshift+0x138>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d022      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a35      	ldr	r2, [pc, #212]	; (8004124 <DMA_CalcBaseAndBitshift+0x13c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d01d      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a33      	ldr	r2, [pc, #204]	; (8004128 <DMA_CalcBaseAndBitshift+0x140>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a32      	ldr	r2, [pc, #200]	; (800412c <DMA_CalcBaseAndBitshift+0x144>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a30      	ldr	r2, [pc, #192]	; (8004130 <DMA_CalcBaseAndBitshift+0x148>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2f      	ldr	r2, [pc, #188]	; (8004134 <DMA_CalcBaseAndBitshift+0x14c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a2d      	ldr	r2, [pc, #180]	; (8004138 <DMA_CalcBaseAndBitshift+0x150>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <DMA_CalcBaseAndBitshift+0xa8>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a2c      	ldr	r2, [pc, #176]	; (800413c <DMA_CalcBaseAndBitshift+0x154>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d101      	bne.n	8004094 <DMA_CalcBaseAndBitshift+0xac>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <DMA_CalcBaseAndBitshift+0xae>
 8004094:	2300      	movs	r3, #0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d024      	beq.n	80040e4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	3b10      	subs	r3, #16
 80040a2:	4a27      	ldr	r2, [pc, #156]	; (8004140 <DMA_CalcBaseAndBitshift+0x158>)
 80040a4:	fba2 2303 	umull	r2, r3, r2, r3
 80040a8:	091b      	lsrs	r3, r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	4a24      	ldr	r2, [pc, #144]	; (8004144 <DMA_CalcBaseAndBitshift+0x15c>)
 80040b4:	5cd3      	ldrb	r3, [r2, r3]
 80040b6:	461a      	mov	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d908      	bls.n	80040d4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	461a      	mov	r2, r3
 80040c8:	4b1f      	ldr	r3, [pc, #124]	; (8004148 <DMA_CalcBaseAndBitshift+0x160>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	1d1a      	adds	r2, r3, #4
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	659a      	str	r2, [r3, #88]	; 0x58
 80040d2:	e00d      	b.n	80040f0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	461a      	mov	r2, r3
 80040da:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <DMA_CalcBaseAndBitshift+0x160>)
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6593      	str	r3, [r2, #88]	; 0x58
 80040e2:	e005      	b.n	80040f0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	40020010 	.word	0x40020010
 8004104:	40020028 	.word	0x40020028
 8004108:	40020040 	.word	0x40020040
 800410c:	40020058 	.word	0x40020058
 8004110:	40020070 	.word	0x40020070
 8004114:	40020088 	.word	0x40020088
 8004118:	400200a0 	.word	0x400200a0
 800411c:	400200b8 	.word	0x400200b8
 8004120:	40020410 	.word	0x40020410
 8004124:	40020428 	.word	0x40020428
 8004128:	40020440 	.word	0x40020440
 800412c:	40020458 	.word	0x40020458
 8004130:	40020470 	.word	0x40020470
 8004134:	40020488 	.word	0x40020488
 8004138:	400204a0 	.word	0x400204a0
 800413c:	400204b8 	.word	0x400204b8
 8004140:	aaaaaaab 	.word	0xaaaaaaab
 8004144:	08009800 	.word	0x08009800
 8004148:	fffffc00 	.word	0xfffffc00

0800414c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004154:	2300      	movs	r3, #0
 8004156:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d120      	bne.n	80041a2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004164:	2b03      	cmp	r3, #3
 8004166:	d858      	bhi.n	800421a <DMA_CheckFifoParam+0xce>
 8004168:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <DMA_CheckFifoParam+0x24>)
 800416a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800416e:	bf00      	nop
 8004170:	08004181 	.word	0x08004181
 8004174:	08004193 	.word	0x08004193
 8004178:	08004181 	.word	0x08004181
 800417c:	0800421b 	.word	0x0800421b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d048      	beq.n	800421e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004190:	e045      	b.n	800421e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800419a:	d142      	bne.n	8004222 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041a0:	e03f      	b.n	8004222 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041aa:	d123      	bne.n	80041f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d838      	bhi.n	8004226 <DMA_CheckFifoParam+0xda>
 80041b4:	a201      	add	r2, pc, #4	; (adr r2, 80041bc <DMA_CheckFifoParam+0x70>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041d3 	.word	0x080041d3
 80041c4:	080041cd 	.word	0x080041cd
 80041c8:	080041e5 	.word	0x080041e5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
        break;
 80041d0:	e030      	b.n	8004234 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d025      	beq.n	800422a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041e2:	e022      	b.n	800422a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041ec:	d11f      	bne.n	800422e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041f2:	e01c      	b.n	800422e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d902      	bls.n	8004202 <DMA_CheckFifoParam+0xb6>
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d003      	beq.n	8004208 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004200:	e018      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	73fb      	strb	r3, [r7, #15]
        break;
 8004206:	e015      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00e      	beq.n	8004232 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
    break;
 8004218:	e00b      	b.n	8004232 <DMA_CheckFifoParam+0xe6>
        break;
 800421a:	bf00      	nop
 800421c:	e00a      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        break;
 800421e:	bf00      	nop
 8004220:	e008      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        break;
 8004222:	bf00      	nop
 8004224:	e006      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        break;
 8004226:	bf00      	nop
 8004228:	e004      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
        break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <DMA_CheckFifoParam+0xe8>
    break;
 8004232:	bf00      	nop
    }
  }

  return status;
 8004234:	7bfb      	ldrb	r3, [r7, #15]
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop

08004244 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a38      	ldr	r2, [pc, #224]	; (8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d022      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a36      	ldr	r2, [pc, #216]	; (800433c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01d      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a35      	ldr	r2, [pc, #212]	; (8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d018      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a33      	ldr	r2, [pc, #204]	; (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d013      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a32      	ldr	r2, [pc, #200]	; (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00e      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a30      	ldr	r2, [pc, #192]	; (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a2f      	ldr	r2, [pc, #188]	; (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01a      	beq.n	80042e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	3b08      	subs	r3, #8
 80042b4:	4a28      	ldr	r2, [pc, #160]	; (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80042b6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4b26      	ldr	r3, [pc, #152]	; (800435c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042c2:	4413      	add	r3, r2
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	461a      	mov	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a24      	ldr	r2, [pc, #144]	; (8004360 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042d0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f003 031f 	and.w	r3, r3, #31
 80042d8:	2201      	movs	r2, #1
 80042da:	409a      	lsls	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042e0:	e024      	b.n	800432c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	3b10      	subs	r3, #16
 80042ea:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	091b      	lsrs	r3, r3, #4
 80042f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4a1c      	ldr	r2, [pc, #112]	; (8004368 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d806      	bhi.n	800430a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4a1b      	ldr	r2, [pc, #108]	; (800436c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d902      	bls.n	800430a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3308      	adds	r3, #8
 8004308:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800430e:	4413      	add	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	461a      	mov	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a16      	ldr	r2, [pc, #88]	; (8004374 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800431c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	2201      	movs	r2, #1
 8004326:	409a      	lsls	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	58025408 	.word	0x58025408
 800433c:	5802541c 	.word	0x5802541c
 8004340:	58025430 	.word	0x58025430
 8004344:	58025444 	.word	0x58025444
 8004348:	58025458 	.word	0x58025458
 800434c:	5802546c 	.word	0x5802546c
 8004350:	58025480 	.word	0x58025480
 8004354:	58025494 	.word	0x58025494
 8004358:	cccccccd 	.word	0xcccccccd
 800435c:	16009600 	.word	0x16009600
 8004360:	58025880 	.word	0x58025880
 8004364:	aaaaaaab 	.word	0xaaaaaaab
 8004368:	400204b8 	.word	0x400204b8
 800436c:	4002040f 	.word	0x4002040f
 8004370:	10008200 	.word	0x10008200
 8004374:	40020880 	.word	0x40020880

08004378 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d04a      	beq.n	8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b08      	cmp	r3, #8
 8004392:	d847      	bhi.n	8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a25      	ldr	r2, [pc, #148]	; (8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d022      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a24      	ldr	r2, [pc, #144]	; (8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d01d      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a22      	ldr	r2, [pc, #136]	; (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d018      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a21      	ldr	r2, [pc, #132]	; (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d013      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d009      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1c      	ldr	r2, [pc, #112]	; (8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d004      	beq.n	80043e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1b      	ldr	r2, [pc, #108]	; (800444c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d101      	bne.n	80043e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043e8:	2300      	movs	r3, #0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4b17      	ldr	r3, [pc, #92]	; (8004450 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	461a      	mov	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004400:	671a      	str	r2, [r3, #112]	; 0x70
 8004402:	e009      	b.n	8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	461a      	mov	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a11      	ldr	r2, [pc, #68]	; (800445c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004416:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	3b01      	subs	r3, #1
 800441c:	2201      	movs	r2, #1
 800441e:	409a      	lsls	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	58025408 	.word	0x58025408
 8004434:	5802541c 	.word	0x5802541c
 8004438:	58025430 	.word	0x58025430
 800443c:	58025444 	.word	0x58025444
 8004440:	58025458 	.word	0x58025458
 8004444:	5802546c 	.word	0x5802546c
 8004448:	58025480 	.word	0x58025480
 800444c:	58025494 	.word	0x58025494
 8004450:	1600963f 	.word	0x1600963f
 8004454:	58025940 	.word	0x58025940
 8004458:	1000823f 	.word	0x1000823f
 800445c:	40020940 	.word	0x40020940

08004460 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e0c6      	b.n	8004600 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fe fcda 	bl	8002e34 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2223      	movs	r2, #35	; 0x23
 8004484:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004486:	4b60      	ldr	r3, [pc, #384]	; (8004608 <HAL_ETH_Init+0x1a8>)
 8004488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800448c:	4a5e      	ldr	r2, [pc, #376]	; (8004608 <HAL_ETH_Init+0x1a8>)
 800448e:	f043 0302 	orr.w	r3, r3, #2
 8004492:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004496:	4b5c      	ldr	r3, [pc, #368]	; (8004608 <HAL_ETH_Init+0x1a8>)
 8004498:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	60bb      	str	r3, [r7, #8]
 80044a2:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7a1b      	ldrb	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d103      	bne.n	80044b4 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80044ac:	2000      	movs	r0, #0
 80044ae:	f7ff f8bb 	bl	8003628 <HAL_SYSCFG_ETHInterfaceSelect>
 80044b2:	e003      	b.n	80044bc <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80044b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80044b8:	f7ff f8b6 	bl	8003628 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044d4:	f7ff f86c 	bl	80035b0 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80044da:	e00f      	b.n	80044fc <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80044dc:	f7ff f868 	bl	80035b0 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044ea:	d907      	bls.n	80044fc <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2204      	movs	r2, #4
 80044f0:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	22e0      	movs	r2, #224	; 0xe0
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e081      	b.n	8004600 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1e6      	bne.n	80044dc <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fac0 	bl	8004a94 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004514:	f001 febe 	bl	8006294 <HAL_RCC_GetHCLKFreq>
 8004518:	4603      	mov	r3, r0
 800451a:	4a3c      	ldr	r2, [pc, #240]	; (800460c <HAL_ETH_Init+0x1ac>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	0c9a      	lsrs	r2, r3, #18
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3a01      	subs	r2, #1
 8004528:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fa13 	bl	8004958 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004548:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800454c:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	22e0      	movs	r2, #224	; 0xe0
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e04a      	b.n	8004600 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004572:	4413      	add	r3, r2
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	4b26      	ldr	r3, [pc, #152]	; (8004610 <HAL_ETH_Init+0x1b0>)
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6952      	ldr	r2, [r2, #20]
 800457e:	0052      	lsls	r2, r2, #1
 8004580:	6879      	ldr	r1, [r7, #4]
 8004582:	6809      	ldr	r1, [r1, #0]
 8004584:	431a      	orrs	r2, r3
 8004586:	f241 1308 	movw	r3, #4360	; 0x1108
 800458a:	440b      	add	r3, r1
 800458c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fad8 	bl	8004b44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fb1c 	bl	8004bd2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	3305      	adds	r3, #5
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	021a      	lsls	r2, r3, #8
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	3304      	adds	r3, #4
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	4619      	mov	r1, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	3303      	adds	r3, #3
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	061a      	lsls	r2, r3, #24
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	3302      	adds	r3, #2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	041b      	lsls	r3, r3, #16
 80045cc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	3301      	adds	r3, #1
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80045d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80045e6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80045e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2210      	movs	r2, #16
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2210      	movs	r2, #16
 80045fc:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	58024400 	.word	0x58024400
 800460c:	431bde83 	.word	0x431bde83
 8004610:	ffff8001 	.word	0xffff8001

08004614 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004626:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	791b      	ldrb	r3, [r3, #4]
 800462c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800462e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	7b1b      	ldrb	r3, [r3, #12]
 8004634:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004636:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	7b5b      	ldrb	r3, [r3, #13]
 800463c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800463e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	7b9b      	ldrb	r3, [r3, #14]
 8004644:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004646:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	7bdb      	ldrb	r3, [r3, #15]
 800464c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800464e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	7c12      	ldrb	r2, [r2, #16]
 8004654:	2a00      	cmp	r2, #0
 8004656:	d102      	bne.n	800465e <ETH_SetMACConfig+0x4a>
 8004658:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800465c:	e000      	b.n	8004660 <ETH_SetMACConfig+0x4c>
 800465e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004660:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	7c52      	ldrb	r2, [r2, #17]
 8004666:	2a00      	cmp	r2, #0
 8004668:	d102      	bne.n	8004670 <ETH_SetMACConfig+0x5c>
 800466a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800466e:	e000      	b.n	8004672 <ETH_SetMACConfig+0x5e>
 8004670:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004672:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	7c9b      	ldrb	r3, [r3, #18]
 8004678:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800467a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004680:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004686:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	7f1b      	ldrb	r3, [r3, #28]
 800468c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800468e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	7f5b      	ldrb	r3, [r3, #29]
 8004694:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004696:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	7f92      	ldrb	r2, [r2, #30]
 800469c:	2a00      	cmp	r2, #0
 800469e:	d102      	bne.n	80046a6 <ETH_SetMACConfig+0x92>
 80046a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046a4:	e000      	b.n	80046a8 <ETH_SetMACConfig+0x94>
 80046a6:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80046a8:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	7fdb      	ldrb	r3, [r3, #31]
 80046ae:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80046b0:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80046b8:	2a00      	cmp	r2, #0
 80046ba:	d102      	bne.n	80046c2 <ETH_SetMACConfig+0xae>
 80046bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046c0:	e000      	b.n	80046c4 <ETH_SetMACConfig+0xb0>
 80046c2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80046c4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80046ca:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80046d4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	4b56      	ldr	r3, [pc, #344]	; (8004840 <ETH_SetMACConfig+0x22c>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	68f9      	ldr	r1, [r7, #12]
 80046ee:	430b      	orrs	r3, r1
 80046f0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046fe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004700:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004708:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800470a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004712:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004714:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800471c:	2a00      	cmp	r2, #0
 800471e:	d102      	bne.n	8004726 <ETH_SetMACConfig+0x112>
 8004720:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004724:	e000      	b.n	8004728 <ETH_SetMACConfig+0x114>
 8004726:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004728:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	4b42      	ldr	r3, [pc, #264]	; (8004844 <ETH_SetMACConfig+0x230>)
 800473a:	4013      	ands	r3, r2
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	68f9      	ldr	r1, [r7, #12]
 8004742:	430b      	orrs	r3, r1
 8004744:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800474c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	4b3a      	ldr	r3, [pc, #232]	; (8004848 <ETH_SetMACConfig+0x234>)
 800475e:	4013      	ands	r3, r2
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	68f9      	ldr	r1, [r7, #12]
 8004766:	430b      	orrs	r3, r1
 8004768:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004770:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004776:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004778:	683a      	ldr	r2, [r7, #0]
 800477a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800477e:	2a00      	cmp	r2, #0
 8004780:	d101      	bne.n	8004786 <ETH_SetMACConfig+0x172>
 8004782:	2280      	movs	r2, #128	; 0x80
 8004784:	e000      	b.n	8004788 <ETH_SetMACConfig+0x174>
 8004786:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004788:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800479a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800479e:	4013      	ands	r3, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6812      	ldr	r2, [r2, #0]
 80047a4:	68f9      	ldr	r1, [r7, #12]
 80047a6:	430b      	orrs	r3, r1
 80047a8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80047b0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80047b8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	f023 0103 	bic.w	r1, r3, #3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80047de:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80047f4:	683a      	ldr	r2, [r7, #0]
 80047f6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80047fa:	2a00      	cmp	r2, #0
 80047fc:	d101      	bne.n	8004802 <ETH_SetMACConfig+0x1ee>
 80047fe:	2240      	movs	r2, #64	; 0x40
 8004800:	e000      	b.n	8004804 <ETH_SetMACConfig+0x1f0>
 8004802:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004804:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800480c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800480e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004816:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004824:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	430a      	orrs	r2, r1
 8004830:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	00048083 	.word	0x00048083
 8004844:	c0f88000 	.word	0xc0f88000
 8004848:	fffffef0 	.word	0xfffffef0

0800484c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	4b38      	ldr	r3, [pc, #224]	; (8004944 <ETH_SetDMAConfig+0xf8>)
 8004862:	4013      	ands	r3, r2
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	6809      	ldr	r1, [r1, #0]
 800486c:	431a      	orrs	r2, r3
 800486e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004872:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	791b      	ldrb	r3, [r3, #4]
 8004878:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800487e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	7b1b      	ldrb	r3, [r3, #12]
 8004884:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	f241 0304 	movw	r3, #4100	; 0x1004
 8004892:	4413      	add	r3, r2
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b2c      	ldr	r3, [pc, #176]	; (8004948 <ETH_SetDMAConfig+0xfc>)
 8004898:	4013      	ands	r3, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	6811      	ldr	r1, [r2, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	431a      	orrs	r2, r3
 80048a2:	f241 0304 	movw	r3, #4100	; 0x1004
 80048a6:	440b      	add	r3, r1
 80048a8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	7b5b      	ldrb	r3, [r3, #13]
 80048ae:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80048b4:	4313      	orrs	r3, r2
 80048b6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b22      	ldr	r3, [pc, #136]	; (800494c <ETH_SetDMAConfig+0x100>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6811      	ldr	r1, [r2, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	431a      	orrs	r2, r3
 80048ce:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80048d2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	7d1b      	ldrb	r3, [r3, #20]
 80048dc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80048de:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	7f5b      	ldrb	r3, [r3, #29]
 80048e4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	f241 1304 	movw	r3, #4356	; 0x1104
 80048f2:	4413      	add	r3, r2
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b16      	ldr	r3, [pc, #88]	; (8004950 <ETH_SetDMAConfig+0x104>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6811      	ldr	r1, [r2, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	431a      	orrs	r2, r3
 8004902:	f241 1304 	movw	r3, #4356	; 0x1104
 8004906:	440b      	add	r3, r1
 8004908:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	7f1b      	ldrb	r3, [r3, #28]
 800490e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004914:	4313      	orrs	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004920:	4413      	add	r3, r2
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <ETH_SetDMAConfig+0x108>)
 8004926:	4013      	ands	r3, r2
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	6811      	ldr	r1, [r2, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	431a      	orrs	r2, r3
 8004930:	f241 1308 	movw	r3, #4360	; 0x1108
 8004934:	440b      	add	r3, r1
 8004936:	601a      	str	r2, [r3, #0]
}
 8004938:	bf00      	nop
 800493a:	3714      	adds	r7, #20
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr
 8004944:	ffff87fd 	.word	0xffff87fd
 8004948:	ffff2ffe 	.word	0xffff2ffe
 800494c:	fffec000 	.word	0xfffec000
 8004950:	ffc0efef 	.word	0xffc0efef
 8004954:	7fc0ffff 	.word	0x7fc0ffff

08004958 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b0a4      	sub	sp, #144	; 0x90
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004960:	2301      	movs	r3, #1
 8004962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004966:	2300      	movs	r3, #0
 8004968:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800496a:	2300      	movs	r3, #0
 800496c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004970:	2300      	movs	r3, #0
 8004972:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004988:	2300      	movs	r3, #0
 800498a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004998:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800499a:	2300      	movs	r3, #0
 800499c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80049a0:	2300      	movs	r3, #0
 80049a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80049a4:	2300      	movs	r3, #0
 80049a6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80049b0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80049b4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80049bc:	2300      	movs	r3, #0
 80049be:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80049d2:	2300      	movs	r3, #0
 80049d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80049da:	2300      	movs	r3, #0
 80049dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80049de:	2300      	movs	r3, #0
 80049e0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80049ea:	2301      	movs	r3, #1
 80049ec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80049f0:	2320      	movs	r3, #32
 80049f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80049f6:	2301      	movs	r3, #1
 80049f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004a02:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004a08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a0c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004a14:	2302      	movs	r3, #2
 8004a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004a32:	2300      	movs	r3, #0
 8004a34:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a40:	4619      	mov	r1, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff fde6 	bl	8004614 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004a78:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004a7e:	f107 0308 	add.w	r3, r7, #8
 8004a82:	4619      	mov	r1, r3
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff fee1 	bl	800484c <ETH_SetDMAConfig>
}
 8004a8a:	bf00      	nop
 8004a8c:	3790      	adds	r7, #144	; 0x90
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004aa4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004aac:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004aae:	f001 fbf1 	bl	8006294 <HAL_RCC_GetHCLKFreq>
 8004ab2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4a1e      	ldr	r2, [pc, #120]	; (8004b30 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d908      	bls.n	8004ace <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d804      	bhi.n	8004ace <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	e027      	b.n	8004b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d908      	bls.n	8004ae8 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d204      	bcs.n	8004ae8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e01a      	b.n	8004b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d303      	bcc.n	8004af8 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d911      	bls.n	8004b1c <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4a10      	ldr	r2, [pc, #64]	; (8004b3c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d908      	bls.n	8004b12 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4a0f      	ldr	r2, [pc, #60]	; (8004b40 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d804      	bhi.n	8004b12 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	e005      	b.n	8004b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	e000      	b.n	8004b1e <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004b1c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004b28:	bf00      	nop
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	01312cff 	.word	0x01312cff
 8004b34:	02160ebf 	.word	0x02160ebf
 8004b38:	03938700 	.word	0x03938700
 8004b3c:	05f5e0ff 	.word	0x05f5e0ff
 8004b40:	08f0d17f 	.word	0x08f0d17f

08004b44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]
 8004b50:	e01d      	b.n	8004b8e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68d9      	ldr	r1, [r3, #12]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4413      	add	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	440b      	add	r3, r1
 8004b62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	3206      	adds	r2, #6
 8004b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d9de      	bls.n	8004b52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	f241 132c 	movw	r3, #4396	; 0x112c
 8004ba2:	4413      	add	r3, r2
 8004ba4:	2203      	movs	r2, #3
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68d9      	ldr	r1, [r3, #12]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	f241 1314 	movw	r3, #4372	; 0x1114
 8004bb4:	4413      	add	r3, r2
 8004bb6:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68da      	ldr	r2, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004bc4:	601a      	str	r2, [r3, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	e024      	b.n	8004c2a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6919      	ldr	r1, [r3, #16]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4613      	mov	r3, r2
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	4413      	add	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	440b      	add	r3, r1
 8004bf0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2200      	movs	r2, #0
 8004c02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2200      	movs	r2, #0
 8004c08:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2200      	movs	r2, #0
 8004c14:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	330a      	adds	r3, #10
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3301      	adds	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d9d7      	bls.n	8004be0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	f241 1330 	movw	r3, #4400	; 0x1130
 8004c56:	4413      	add	r3, r2
 8004c58:	2203      	movs	r2, #3
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6919      	ldr	r1, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	f241 131c 	movw	r3, #4380	; 0x111c
 8004c68:	4413      	add	r3, r2
 8004c6a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	f241 1328 	movw	r3, #4392	; 0x1128
 8004c7c:	4413      	add	r3, r2
 8004c7e:	6019      	str	r1, [r3, #0]
}
 8004c80:	bf00      	nop
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b089      	sub	sp, #36	; 0x24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004c9a:	4b89      	ldr	r3, [pc, #548]	; (8004ec0 <HAL_GPIO_Init+0x234>)
 8004c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c9e:	e194      	b.n	8004fca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cac:	4013      	ands	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8186 	beq.w	8004fc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_GPIO_Init+0x4c>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d007      	beq.n	8004cd8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ccc:	2b11      	cmp	r3, #17
 8004cce:	d003      	beq.n	8004cd8 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	2b12      	cmp	r3, #18
 8004cd6:	d130      	bne.n	8004d3a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	2203      	movs	r2, #3
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	005b      	lsls	r3, r3, #1
 8004cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d0e:	2201      	movs	r2, #1
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	fa02 f303 	lsl.w	r3, r2, r3
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	091b      	lsrs	r3, r3, #4
 8004d24:	f003 0201 	and.w	r2, r3, #1
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	2203      	movs	r2, #3
 8004d46:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4a:	43db      	mvns	r3, r3
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d003      	beq.n	8004d7a <HAL_GPIO_Init+0xee>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b12      	cmp	r3, #18
 8004d78:	d123      	bne.n	8004dc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	08da      	lsrs	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3208      	adds	r2, #8
 8004d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f003 0307 	and.w	r3, r3, #7
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	220f      	movs	r2, #15
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	08da      	lsrs	r2, r3, #3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3208      	adds	r2, #8
 8004dbc:	69b9      	ldr	r1, [r7, #24]
 8004dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	2203      	movs	r2, #3
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43db      	mvns	r3, r3
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f003 0203 	and.w	r2, r3, #3
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80e0 	beq.w	8004fc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e04:	4b2f      	ldr	r3, [pc, #188]	; (8004ec4 <HAL_GPIO_Init+0x238>)
 8004e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e0a:	4a2e      	ldr	r2, [pc, #184]	; (8004ec4 <HAL_GPIO_Init+0x238>)
 8004e0c:	f043 0302 	orr.w	r3, r3, #2
 8004e10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004e14:	4b2b      	ldr	r3, [pc, #172]	; (8004ec4 <HAL_GPIO_Init+0x238>)
 8004e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e22:	4a29      	ldr	r2, [pc, #164]	; (8004ec8 <HAL_GPIO_Init+0x23c>)
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	089b      	lsrs	r3, r3, #2
 8004e28:	3302      	adds	r3, #2
 8004e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 0303 	and.w	r3, r3, #3
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	220f      	movs	r2, #15
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	43db      	mvns	r3, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4013      	ands	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a20      	ldr	r2, [pc, #128]	; (8004ecc <HAL_GPIO_Init+0x240>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d052      	beq.n	8004ef4 <HAL_GPIO_Init+0x268>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a1f      	ldr	r2, [pc, #124]	; (8004ed0 <HAL_GPIO_Init+0x244>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d031      	beq.n	8004eba <HAL_GPIO_Init+0x22e>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a1e      	ldr	r2, [pc, #120]	; (8004ed4 <HAL_GPIO_Init+0x248>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d02b      	beq.n	8004eb6 <HAL_GPIO_Init+0x22a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <HAL_GPIO_Init+0x24c>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d025      	beq.n	8004eb2 <HAL_GPIO_Init+0x226>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <HAL_GPIO_Init+0x250>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d01f      	beq.n	8004eae <HAL_GPIO_Init+0x222>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <HAL_GPIO_Init+0x254>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d019      	beq.n	8004eaa <HAL_GPIO_Init+0x21e>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <HAL_GPIO_Init+0x258>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d013      	beq.n	8004ea6 <HAL_GPIO_Init+0x21a>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a19      	ldr	r2, [pc, #100]	; (8004ee8 <HAL_GPIO_Init+0x25c>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d00d      	beq.n	8004ea2 <HAL_GPIO_Init+0x216>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a18      	ldr	r2, [pc, #96]	; (8004eec <HAL_GPIO_Init+0x260>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d007      	beq.n	8004e9e <HAL_GPIO_Init+0x212>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <HAL_GPIO_Init+0x264>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d101      	bne.n	8004e9a <HAL_GPIO_Init+0x20e>
 8004e96:	2309      	movs	r3, #9
 8004e98:	e02d      	b.n	8004ef6 <HAL_GPIO_Init+0x26a>
 8004e9a:	230a      	movs	r3, #10
 8004e9c:	e02b      	b.n	8004ef6 <HAL_GPIO_Init+0x26a>
 8004e9e:	2308      	movs	r3, #8
 8004ea0:	e029      	b.n	8004ef6 <HAL_GPIO_Init+0x26a>
 8004ea2:	2307      	movs	r3, #7
 8004ea4:	e027      	b.n	8004ef6 <HAL_GPIO_Init+0x26a>
 8004ea6:	2306      	movs	r3, #6
 8004ea8:	e025      	b.n	8004ef6 <HAL_GPIO_Init+0x26a>
 8004eaa:	2305      	movs	r3, #5
 8004eac:	e023      	b.n	8004ef6 <HAL_GPIO_Init+0x26a>
 8004eae:	2304      	movs	r3, #4
 8004eb0:	e021      	b.n	8004ef6 <HAL_GPIO_Init+0x26a>
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e01f      	b.n	8004ef6 <HAL_GPIO_Init+0x26a>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e01d      	b.n	8004ef6 <HAL_GPIO_Init+0x26a>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e01b      	b.n	8004ef6 <HAL_GPIO_Init+0x26a>
 8004ebe:	bf00      	nop
 8004ec0:	58000080 	.word	0x58000080
 8004ec4:	58024400 	.word	0x58024400
 8004ec8:	58000400 	.word	0x58000400
 8004ecc:	58020000 	.word	0x58020000
 8004ed0:	58020400 	.word	0x58020400
 8004ed4:	58020800 	.word	0x58020800
 8004ed8:	58020c00 	.word	0x58020c00
 8004edc:	58021000 	.word	0x58021000
 8004ee0:	58021400 	.word	0x58021400
 8004ee4:	58021800 	.word	0x58021800
 8004ee8:	58021c00 	.word	0x58021c00
 8004eec:	58022000 	.word	0x58022000
 8004ef0:	58022400 	.word	0x58022400
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	f002 0203 	and.w	r2, r2, #3
 8004efc:	0092      	lsls	r2, r2, #2
 8004efe:	4093      	lsls	r3, r2
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f06:	4938      	ldr	r1, [pc, #224]	; (8004fe8 <HAL_GPIO_Init+0x35c>)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	4013      	ands	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d003      	beq.n	8004f38 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	69ba      	ldr	r2, [r7, #24]
 8004f3c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	43db      	mvns	r3, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d003      	beq.n	8004f62 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004f8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	43db      	mvns	r3, r3
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d003      	beq.n	8004fbc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004fbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f47f ae63 	bne.w	8004ca0 <HAL_GPIO_Init+0x14>
  }
}
 8004fda:	bf00      	nop
 8004fdc:	bf00      	nop
 8004fde:	3724      	adds	r7, #36	; 0x24
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	58000400 	.word	0x58000400

08004fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	807b      	strh	r3, [r7, #2]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ffc:	787b      	ldrb	r3, [r7, #1]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d003      	beq.n	800500a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005002:	887a      	ldrh	r2, [r7, #2]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005008:	e003      	b.n	8005012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800500a:	887b      	ldrh	r3, [r7, #2]
 800500c:	041a      	lsls	r2, r3, #16
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	619a      	str	r2, [r3, #24]
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	460b      	mov	r3, r1
 8005028:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	887b      	ldrh	r3, [r7, #2]
 8005030:	401a      	ands	r2, r3
 8005032:	887b      	ldrh	r3, [r7, #2]
 8005034:	429a      	cmp	r2, r3
 8005036:	d104      	bne.n	8005042 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005038:	887b      	ldrh	r3, [r7, #2]
 800503a:	041a      	lsls	r2, r3, #16
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005040:	e002      	b.n	8005048 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005042:	887a      	ldrh	r2, [r7, #2]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	619a      	str	r2, [r3, #24]
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800505c:	4a08      	ldr	r2, [pc, #32]	; (8005080 <HAL_HSEM_FastTake+0x2c>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3320      	adds	r3, #32
 8005062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005066:	4a07      	ldr	r2, [pc, #28]	; (8005084 <HAL_HSEM_FastTake+0x30>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d101      	bne.n	8005070 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800506c:	2300      	movs	r3, #0
 800506e:	e000      	b.n	8005072 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	58026400 	.word	0x58026400
 8005084:	80000300 	.word	0x80000300

08005088 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005092:	4906      	ldr	r1, [pc, #24]	; (80050ac <HAL_HSEM_Release+0x24>)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr
 80050ac:	58026400 	.word	0x58026400

080050b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80050b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050b2:	b08f      	sub	sp, #60	; 0x3c
 80050b4:	af0a      	add	r7, sp, #40	; 0x28
 80050b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e116      	b.n	80052f0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d106      	bne.n	80050e2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7fe f825 	bl	800312c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2203      	movs	r2, #3
 80050e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d102      	bne.n	80050fc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4618      	mov	r0, r3
 8005102:	f003 ffef 	bl	80090e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	603b      	str	r3, [r7, #0]
 800510c:	687e      	ldr	r6, [r7, #4]
 800510e:	466d      	mov	r5, sp
 8005110:	f106 0410 	add.w	r4, r6, #16
 8005114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800511a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800511c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005120:	e885 0003 	stmia.w	r5, {r0, r1}
 8005124:	1d33      	adds	r3, r6, #4
 8005126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005128:	6838      	ldr	r0, [r7, #0]
 800512a:	f003 ff79 	bl	8009020 <USB_CoreInit>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0d7      	b.n	80052f0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2100      	movs	r1, #0
 8005146:	4618      	mov	r0, r3
 8005148:	f003 ffdd 	bl	8009106 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800514c:	2300      	movs	r3, #0
 800514e:	73fb      	strb	r3, [r7, #15]
 8005150:	e04a      	b.n	80051e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005152:	7bfa      	ldrb	r2, [r7, #15]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	333d      	adds	r3, #61	; 0x3d
 8005162:	2201      	movs	r2, #1
 8005164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005166:	7bfa      	ldrb	r2, [r7, #15]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	1a9b      	subs	r3, r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	333c      	adds	r3, #60	; 0x3c
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800517a:	7bfa      	ldrb	r2, [r7, #15]
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	b298      	uxth	r0, r3
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	1a9b      	subs	r3, r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3342      	adds	r3, #66	; 0x42
 800518e:	4602      	mov	r2, r0
 8005190:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005192:	7bfa      	ldrb	r2, [r7, #15]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	333f      	adds	r3, #63	; 0x3f
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	1a9b      	subs	r3, r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	3344      	adds	r3, #68	; 0x44
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80051ba:	7bfa      	ldrb	r2, [r7, #15]
 80051bc:	6879      	ldr	r1, [r7, #4]
 80051be:	4613      	mov	r3, r2
 80051c0:	00db      	lsls	r3, r3, #3
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	3348      	adds	r3, #72	; 0x48
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051ce:	7bfa      	ldrb	r2, [r7, #15]
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	4613      	mov	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	440b      	add	r3, r1
 80051dc:	3350      	adds	r3, #80	; 0x50
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	3301      	adds	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
 80051e8:	7bfa      	ldrb	r2, [r7, #15]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d3af      	bcc.n	8005152 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
 80051f6:	e044      	b.n	8005282 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051f8:	7bfa      	ldrb	r2, [r7, #15]
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	4613      	mov	r3, r2
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	1a9b      	subs	r3, r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	440b      	add	r3, r1
 8005206:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	6879      	ldr	r1, [r7, #4]
 8005212:	4613      	mov	r3, r2
 8005214:	00db      	lsls	r3, r3, #3
 8005216:	1a9b      	subs	r3, r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	440b      	add	r3, r1
 800521c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005220:	7bfa      	ldrb	r2, [r7, #15]
 8005222:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800523a:	7bfa      	ldrb	r2, [r7, #15]
 800523c:	6879      	ldr	r1, [r7, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	440b      	add	r3, r1
 8005248:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	1a9b      	subs	r3, r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005266:	7bfa      	ldrb	r2, [r7, #15]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	3301      	adds	r3, #1
 8005280:	73fb      	strb	r3, [r7, #15]
 8005282:	7bfa      	ldrb	r2, [r7, #15]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	429a      	cmp	r2, r3
 800528a:	d3b5      	bcc.n	80051f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	687e      	ldr	r6, [r7, #4]
 8005294:	466d      	mov	r5, sp
 8005296:	f106 0410 	add.w	r4, r6, #16
 800529a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800529c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800529e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80052aa:	1d33      	adds	r3, r6, #4
 80052ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052ae:	6838      	ldr	r0, [r7, #0]
 80052b0:	f003 ff54 	bl	800915c <USB_DevInit>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d005      	beq.n	80052c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2202      	movs	r2, #2
 80052be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e014      	b.n	80052f0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d102      	bne.n	80052e4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f80a 	bl	80052f8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f004 f8f6 	bl	80094da <USB_DevDisconnect>

  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_PCDEx_ActivateLPM+0x44>)
 8005328:	4313      	orrs	r3, r2
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	10000003 	.word	0x10000003

08005340 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005348:	4b29      	ldr	r3, [pc, #164]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	2b06      	cmp	r3, #6
 8005352:	d00a      	beq.n	800536a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005354:	4b26      	ldr	r3, [pc, #152]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	429a      	cmp	r2, r3
 8005360:	d001      	beq.n	8005366 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e040      	b.n	80053e8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005366:	2300      	movs	r3, #0
 8005368:	e03e      	b.n	80053e8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800536a:	4b21      	ldr	r3, [pc, #132]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005372:	491f      	ldr	r1, [pc, #124]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4313      	orrs	r3, r2
 8005378:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800537a:	f7fe f919 	bl	80035b0 <HAL_GetTick>
 800537e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005380:	e009      	b.n	8005396 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005382:	f7fe f915 	bl	80035b0 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005390:	d901      	bls.n	8005396 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e028      	b.n	80053e8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005396:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800539e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a2:	d1ee      	bne.n	8005382 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b1e      	cmp	r3, #30
 80053a8:	d008      	beq.n	80053bc <HAL_PWREx_ConfigSupply+0x7c>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b2e      	cmp	r3, #46	; 0x2e
 80053ae:	d005      	beq.n	80053bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b1d      	cmp	r3, #29
 80053b4:	d002      	beq.n	80053bc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b2d      	cmp	r3, #45	; 0x2d
 80053ba:	d114      	bne.n	80053e6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80053bc:	f7fe f8f8 	bl	80035b0 <HAL_GetTick>
 80053c0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80053c2:	e009      	b.n	80053d8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80053c4:	f7fe f8f4 	bl	80035b0 <HAL_GetTick>
 80053c8:	4602      	mov	r2, r0
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053d2:	d901      	bls.n	80053d8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e007      	b.n	80053e8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <HAL_PWREx_ConfigSupply+0xb0>)
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d1ee      	bne.n	80053c4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	58024800 	.word	0x58024800

080053f4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80053f4:	b480      	push	{r7}
 80053f6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80053fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005402:	60d3      	str	r3, [r2, #12]
}
 8005404:	bf00      	nop
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	58024800 	.word	0x58024800

08005414 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e3ff      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 8087 	beq.w	8005542 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005434:	4b99      	ldr	r3, [pc, #612]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800543c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800543e:	4b97      	ldr	r3, [pc, #604]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005446:	2b10      	cmp	r3, #16
 8005448:	d007      	beq.n	800545a <HAL_RCC_OscConfig+0x46>
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	2b18      	cmp	r3, #24
 800544e:	d110      	bne.n	8005472 <HAL_RCC_OscConfig+0x5e>
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	2b02      	cmp	r3, #2
 8005458:	d10b      	bne.n	8005472 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545a:	4b90      	ldr	r3, [pc, #576]	; (800569c <HAL_RCC_OscConfig+0x288>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d06c      	beq.n	8005540 <HAL_RCC_OscConfig+0x12c>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d168      	bne.n	8005540 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e3d9      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547a:	d106      	bne.n	800548a <HAL_RCC_OscConfig+0x76>
 800547c:	4b87      	ldr	r3, [pc, #540]	; (800569c <HAL_RCC_OscConfig+0x288>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a86      	ldr	r2, [pc, #536]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005486:	6013      	str	r3, [r2, #0]
 8005488:	e02e      	b.n	80054e8 <HAL_RCC_OscConfig+0xd4>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10c      	bne.n	80054ac <HAL_RCC_OscConfig+0x98>
 8005492:	4b82      	ldr	r3, [pc, #520]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a81      	ldr	r2, [pc, #516]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	4b7f      	ldr	r3, [pc, #508]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a7e      	ldr	r2, [pc, #504]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80054a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054a8:	6013      	str	r3, [r2, #0]
 80054aa:	e01d      	b.n	80054e8 <HAL_RCC_OscConfig+0xd4>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054b4:	d10c      	bne.n	80054d0 <HAL_RCC_OscConfig+0xbc>
 80054b6:	4b79      	ldr	r3, [pc, #484]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a78      	ldr	r2, [pc, #480]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80054bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	4b76      	ldr	r3, [pc, #472]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a75      	ldr	r2, [pc, #468]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80054c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	e00b      	b.n	80054e8 <HAL_RCC_OscConfig+0xd4>
 80054d0:	4b72      	ldr	r3, [pc, #456]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a71      	ldr	r2, [pc, #452]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80054d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	4b6f      	ldr	r3, [pc, #444]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a6e      	ldr	r2, [pc, #440]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80054e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d013      	beq.n	8005518 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fe f85e 	bl	80035b0 <HAL_GetTick>
 80054f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054f8:	f7fe f85a 	bl	80035b0 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b64      	cmp	r3, #100	; 0x64
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e38d      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800550a:	4b64      	ldr	r3, [pc, #400]	; (800569c <HAL_RCC_OscConfig+0x288>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0f0      	beq.n	80054f8 <HAL_RCC_OscConfig+0xe4>
 8005516:	e014      	b.n	8005542 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005518:	f7fe f84a 	bl	80035b0 <HAL_GetTick>
 800551c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005520:	f7fe f846 	bl	80035b0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b64      	cmp	r3, #100	; 0x64
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e379      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005532:	4b5a      	ldr	r3, [pc, #360]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x10c>
 800553e:	e000      	b.n	8005542 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 80ae 	beq.w	80056ac <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005550:	4b52      	ldr	r3, [pc, #328]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005558:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800555a:	4b50      	ldr	r3, [pc, #320]	; (800569c <HAL_RCC_OscConfig+0x288>)
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d007      	beq.n	8005576 <HAL_RCC_OscConfig+0x162>
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	2b18      	cmp	r3, #24
 800556a:	d13a      	bne.n	80055e2 <HAL_RCC_OscConfig+0x1ce>
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d135      	bne.n	80055e2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005576:	4b49      	ldr	r3, [pc, #292]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d005      	beq.n	800558e <HAL_RCC_OscConfig+0x17a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e34b      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558e:	f7fe f83f 	bl	8003610 <HAL_GetREVID>
 8005592:	4603      	mov	r3, r0
 8005594:	f241 0203 	movw	r2, #4099	; 0x1003
 8005598:	4293      	cmp	r3, r2
 800559a:	d817      	bhi.n	80055cc <HAL_RCC_OscConfig+0x1b8>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d108      	bne.n	80055b6 <HAL_RCC_OscConfig+0x1a2>
 80055a4:	4b3d      	ldr	r3, [pc, #244]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055ac:	4a3b      	ldr	r2, [pc, #236]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80055ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055b4:	e07a      	b.n	80056ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b6:	4b39      	ldr	r3, [pc, #228]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	031b      	lsls	r3, r3, #12
 80055c4:	4935      	ldr	r1, [pc, #212]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055ca:	e06f      	b.n	80056ac <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055cc:	4b33      	ldr	r3, [pc, #204]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	061b      	lsls	r3, r3, #24
 80055da:	4930      	ldr	r1, [pc, #192]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055e0:	e064      	b.n	80056ac <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d045      	beq.n	8005676 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80055ea:	4b2c      	ldr	r3, [pc, #176]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f023 0219 	bic.w	r2, r3, #25
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	4929      	ldr	r1, [pc, #164]	; (800569c <HAL_RCC_OscConfig+0x288>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055fc:	f7fd ffd8 	bl	80035b0 <HAL_GetTick>
 8005600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005602:	e008      	b.n	8005616 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005604:	f7fd ffd4 	bl	80035b0 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d901      	bls.n	8005616 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e307      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005616:	4b21      	ldr	r3, [pc, #132]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0f0      	beq.n	8005604 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005622:	f7fd fff5 	bl	8003610 <HAL_GetREVID>
 8005626:	4603      	mov	r3, r0
 8005628:	f241 0203 	movw	r2, #4099	; 0x1003
 800562c:	4293      	cmp	r3, r2
 800562e:	d817      	bhi.n	8005660 <HAL_RCC_OscConfig+0x24c>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	2b40      	cmp	r3, #64	; 0x40
 8005636:	d108      	bne.n	800564a <HAL_RCC_OscConfig+0x236>
 8005638:	4b18      	ldr	r3, [pc, #96]	; (800569c <HAL_RCC_OscConfig+0x288>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005640:	4a16      	ldr	r2, [pc, #88]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005646:	6053      	str	r3, [r2, #4]
 8005648:	e030      	b.n	80056ac <HAL_RCC_OscConfig+0x298>
 800564a:	4b14      	ldr	r3, [pc, #80]	; (800569c <HAL_RCC_OscConfig+0x288>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	031b      	lsls	r3, r3, #12
 8005658:	4910      	ldr	r1, [pc, #64]	; (800569c <HAL_RCC_OscConfig+0x288>)
 800565a:	4313      	orrs	r3, r2
 800565c:	604b      	str	r3, [r1, #4]
 800565e:	e025      	b.n	80056ac <HAL_RCC_OscConfig+0x298>
 8005660:	4b0e      	ldr	r3, [pc, #56]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	061b      	lsls	r3, r3, #24
 800566e:	490b      	ldr	r1, [pc, #44]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005670:	4313      	orrs	r3, r2
 8005672:	604b      	str	r3, [r1, #4]
 8005674:	e01a      	b.n	80056ac <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <HAL_RCC_OscConfig+0x288>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a08      	ldr	r2, [pc, #32]	; (800569c <HAL_RCC_OscConfig+0x288>)
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005682:	f7fd ff95 	bl	80035b0 <HAL_GetTick>
 8005686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005688:	e00a      	b.n	80056a0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800568a:	f7fd ff91 	bl	80035b0 <HAL_GetTick>
 800568e:	4602      	mov	r2, r0
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	1ad3      	subs	r3, r2, r3
 8005694:	2b02      	cmp	r3, #2
 8005696:	d903      	bls.n	80056a0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e2c4      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
 800569c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80056a0:	4ba4      	ldr	r3, [pc, #656]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1ee      	bne.n	800568a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0310 	and.w	r3, r3, #16
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 80a9 	beq.w	800580c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ba:	4b9e      	ldr	r3, [pc, #632]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056c4:	4b9b      	ldr	r3, [pc, #620]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d007      	beq.n	80056e0 <HAL_RCC_OscConfig+0x2cc>
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b18      	cmp	r3, #24
 80056d4:	d13a      	bne.n	800574c <HAL_RCC_OscConfig+0x338>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d135      	bne.n	800574c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056e0:	4b94      	ldr	r3, [pc, #592]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d005      	beq.n	80056f8 <HAL_RCC_OscConfig+0x2e4>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	2b80      	cmp	r3, #128	; 0x80
 80056f2:	d001      	beq.n	80056f8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e296      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056f8:	f7fd ff8a 	bl	8003610 <HAL_GetREVID>
 80056fc:	4603      	mov	r3, r0
 80056fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8005702:	4293      	cmp	r3, r2
 8005704:	d817      	bhi.n	8005736 <HAL_RCC_OscConfig+0x322>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	2b20      	cmp	r3, #32
 800570c:	d108      	bne.n	8005720 <HAL_RCC_OscConfig+0x30c>
 800570e:	4b89      	ldr	r3, [pc, #548]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005716:	4a87      	ldr	r2, [pc, #540]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800571c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800571e:	e075      	b.n	800580c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005720:	4b84      	ldr	r3, [pc, #528]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a1b      	ldr	r3, [r3, #32]
 800572c:	069b      	lsls	r3, r3, #26
 800572e:	4981      	ldr	r1, [pc, #516]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005730:	4313      	orrs	r3, r2
 8005732:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005734:	e06a      	b.n	800580c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005736:	4b7f      	ldr	r3, [pc, #508]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	061b      	lsls	r3, r3, #24
 8005744:	497b      	ldr	r1, [pc, #492]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005746:	4313      	orrs	r3, r2
 8005748:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800574a:	e05f      	b.n	800580c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	69db      	ldr	r3, [r3, #28]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d042      	beq.n	80057da <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005754:	4b77      	ldr	r3, [pc, #476]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a76      	ldr	r2, [pc, #472]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 800575a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800575e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fd ff26 	bl	80035b0 <HAL_GetTick>
 8005764:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005768:	f7fd ff22 	bl	80035b0 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e255      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800577a:	4b6e      	ldr	r3, [pc, #440]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f0      	beq.n	8005768 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005786:	f7fd ff43 	bl	8003610 <HAL_GetREVID>
 800578a:	4603      	mov	r3, r0
 800578c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005790:	4293      	cmp	r3, r2
 8005792:	d817      	bhi.n	80057c4 <HAL_RCC_OscConfig+0x3b0>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	2b20      	cmp	r3, #32
 800579a:	d108      	bne.n	80057ae <HAL_RCC_OscConfig+0x39a>
 800579c:	4b65      	ldr	r3, [pc, #404]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80057a4:	4a63      	ldr	r2, [pc, #396]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80057a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057aa:	6053      	str	r3, [r2, #4]
 80057ac:	e02e      	b.n	800580c <HAL_RCC_OscConfig+0x3f8>
 80057ae:	4b61      	ldr	r3, [pc, #388]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	069b      	lsls	r3, r3, #26
 80057bc:	495d      	ldr	r1, [pc, #372]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	604b      	str	r3, [r1, #4]
 80057c2:	e023      	b.n	800580c <HAL_RCC_OscConfig+0x3f8>
 80057c4:	4b5b      	ldr	r3, [pc, #364]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	061b      	lsls	r3, r3, #24
 80057d2:	4958      	ldr	r1, [pc, #352]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60cb      	str	r3, [r1, #12]
 80057d8:	e018      	b.n	800580c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80057da:	4b56      	ldr	r3, [pc, #344]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a55      	ldr	r2, [pc, #340]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80057e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e6:	f7fd fee3 	bl	80035b0 <HAL_GetTick>
 80057ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80057ec:	e008      	b.n	8005800 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80057ee:	f7fd fedf 	bl	80035b0 <HAL_GetTick>
 80057f2:	4602      	mov	r2, r0
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d901      	bls.n	8005800 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e212      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005800:	4b4c      	ldr	r3, [pc, #304]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1f0      	bne.n	80057ee <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d036      	beq.n	8005886 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d019      	beq.n	8005854 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005820:	4b44      	ldr	r3, [pc, #272]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005824:	4a43      	ldr	r2, [pc, #268]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800582c:	f7fd fec0 	bl	80035b0 <HAL_GetTick>
 8005830:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005834:	f7fd febc 	bl	80035b0 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e1ef      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005846:	4b3b      	ldr	r3, [pc, #236]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0f0      	beq.n	8005834 <HAL_RCC_OscConfig+0x420>
 8005852:	e018      	b.n	8005886 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005854:	4b37      	ldr	r3, [pc, #220]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 8005856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005858:	4a36      	ldr	r2, [pc, #216]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005860:	f7fd fea6 	bl	80035b0 <HAL_GetTick>
 8005864:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005868:	f7fd fea2 	bl	80035b0 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e1d5      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800587a:	4b2e      	ldr	r3, [pc, #184]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 800587c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0320 	and.w	r3, r3, #32
 800588e:	2b00      	cmp	r3, #0
 8005890:	d036      	beq.n	8005900 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d019      	beq.n	80058ce <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800589a:	4b26      	ldr	r3, [pc, #152]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a25      	ldr	r2, [pc, #148]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80058a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058a6:	f7fd fe83 	bl	80035b0 <HAL_GetTick>
 80058aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058ac:	e008      	b.n	80058c0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058ae:	f7fd fe7f 	bl	80035b0 <HAL_GetTick>
 80058b2:	4602      	mov	r2, r0
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	1ad3      	subs	r3, r2, r3
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d901      	bls.n	80058c0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e1b2      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80058c0:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0f0      	beq.n	80058ae <HAL_RCC_OscConfig+0x49a>
 80058cc:	e018      	b.n	8005900 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80058ce:	4b19      	ldr	r3, [pc, #100]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a18      	ldr	r2, [pc, #96]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80058d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80058da:	f7fd fe69 	bl	80035b0 <HAL_GetTick>
 80058de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80058e2:	f7fd fe65 	bl	80035b0 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e198      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80058f4:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <HAL_RCC_OscConfig+0x520>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f0      	bne.n	80058e2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 8085 	beq.w	8005a18 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <HAL_RCC_OscConfig+0x524>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a09      	ldr	r2, [pc, #36]	; (8005938 <HAL_RCC_OscConfig+0x524>)
 8005914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005918:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800591a:	f7fd fe49 	bl	80035b0 <HAL_GetTick>
 800591e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005920:	e00c      	b.n	800593c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005922:	f7fd fe45 	bl	80035b0 <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	2b64      	cmp	r3, #100	; 0x64
 800592e:	d905      	bls.n	800593c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e178      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
 8005934:	58024400 	.word	0x58024400
 8005938:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800593c:	4b96      	ldr	r3, [pc, #600]	; (8005b98 <HAL_RCC_OscConfig+0x784>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005944:	2b00      	cmp	r3, #0
 8005946:	d0ec      	beq.n	8005922 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d106      	bne.n	800595e <HAL_RCC_OscConfig+0x54a>
 8005950:	4b92      	ldr	r3, [pc, #584]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	4a91      	ldr	r2, [pc, #580]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005956:	f043 0301 	orr.w	r3, r3, #1
 800595a:	6713      	str	r3, [r2, #112]	; 0x70
 800595c:	e02d      	b.n	80059ba <HAL_RCC_OscConfig+0x5a6>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10c      	bne.n	8005980 <HAL_RCC_OscConfig+0x56c>
 8005966:	4b8d      	ldr	r3, [pc, #564]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596a:	4a8c      	ldr	r2, [pc, #560]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	6713      	str	r3, [r2, #112]	; 0x70
 8005972:	4b8a      	ldr	r3, [pc, #552]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005976:	4a89      	ldr	r2, [pc, #548]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005978:	f023 0304 	bic.w	r3, r3, #4
 800597c:	6713      	str	r3, [r2, #112]	; 0x70
 800597e:	e01c      	b.n	80059ba <HAL_RCC_OscConfig+0x5a6>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	2b05      	cmp	r3, #5
 8005986:	d10c      	bne.n	80059a2 <HAL_RCC_OscConfig+0x58e>
 8005988:	4b84      	ldr	r3, [pc, #528]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 800598a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598c:	4a83      	ldr	r2, [pc, #524]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	6713      	str	r3, [r2, #112]	; 0x70
 8005994:	4b81      	ldr	r3, [pc, #516]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005998:	4a80      	ldr	r2, [pc, #512]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	6713      	str	r3, [r2, #112]	; 0x70
 80059a0:	e00b      	b.n	80059ba <HAL_RCC_OscConfig+0x5a6>
 80059a2:	4b7e      	ldr	r3, [pc, #504]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a6:	4a7d      	ldr	r2, [pc, #500]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 80059a8:	f023 0301 	bic.w	r3, r3, #1
 80059ac:	6713      	str	r3, [r2, #112]	; 0x70
 80059ae:	4b7b      	ldr	r3, [pc, #492]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 80059b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b2:	4a7a      	ldr	r2, [pc, #488]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 80059b4:	f023 0304 	bic.w	r3, r3, #4
 80059b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d015      	beq.n	80059ee <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c2:	f7fd fdf5 	bl	80035b0 <HAL_GetTick>
 80059c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059c8:	e00a      	b.n	80059e0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059ca:	f7fd fdf1 	bl	80035b0 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e122      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059e0:	4b6e      	ldr	r3, [pc, #440]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 80059e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d0ee      	beq.n	80059ca <HAL_RCC_OscConfig+0x5b6>
 80059ec:	e014      	b.n	8005a18 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ee:	f7fd fddf 	bl	80035b0 <HAL_GetTick>
 80059f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80059f4:	e00a      	b.n	8005a0c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059f6:	f7fd fddb 	bl	80035b0 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e10c      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005a0c:	4b63      	ldr	r3, [pc, #396]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1ee      	bne.n	80059f6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 8101 	beq.w	8005c24 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005a22:	4b5e      	ldr	r3, [pc, #376]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a2a:	2b18      	cmp	r3, #24
 8005a2c:	f000 80bc 	beq.w	8005ba8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	f040 8095 	bne.w	8005b64 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3a:	4b58      	ldr	r3, [pc, #352]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a57      	ldr	r2, [pc, #348]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fd fdb3 	bl	80035b0 <HAL_GetTick>
 8005a4a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a4e:	f7fd fdaf 	bl	80035b0 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0e2      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005a60:	4b4e      	ldr	r3, [pc, #312]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1f0      	bne.n	8005a4e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a6c:	4b4b      	ldr	r3, [pc, #300]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a70:	4b4b      	ldr	r3, [pc, #300]	; (8005ba0 <HAL_RCC_OscConfig+0x78c>)
 8005a72:	4013      	ands	r3, r2
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a7c:	0112      	lsls	r2, r2, #4
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	4946      	ldr	r1, [pc, #280]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	628b      	str	r3, [r1, #40]	; 0x28
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	3b01      	subs	r3, #1
 8005a96:	025b      	lsls	r3, r3, #9
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	041b      	lsls	r3, r3, #16
 8005aa4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	061b      	lsls	r3, r3, #24
 8005ab2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005ab6:	4939      	ldr	r1, [pc, #228]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005abc:	4b37      	ldr	r3, [pc, #220]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	4a36      	ldr	r2, [pc, #216]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ac8:	4b34      	ldr	r3, [pc, #208]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005acc:	4b35      	ldr	r3, [pc, #212]	; (8005ba4 <HAL_RCC_OscConfig+0x790>)
 8005ace:	4013      	ands	r3, r2
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ad4:	00d2      	lsls	r2, r2, #3
 8005ad6:	4931      	ldr	r1, [pc, #196]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005adc:	4b2f      	ldr	r3, [pc, #188]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	f023 020c 	bic.w	r2, r3, #12
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	492c      	ldr	r1, [pc, #176]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005aee:	4b2b      	ldr	r3, [pc, #172]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	f023 0202 	bic.w	r2, r3, #2
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afa:	4928      	ldr	r1, [pc, #160]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b00:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b04:	4a25      	ldr	r2, [pc, #148]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b0c:	4b23      	ldr	r3, [pc, #140]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005b18:	4b20      	ldr	r3, [pc, #128]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005b24:	4b1d      	ldr	r3, [pc, #116]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b30:	4b1a      	ldr	r3, [pc, #104]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a19      	ldr	r2, [pc, #100]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fd fd38 	bl	80035b0 <HAL_GetTick>
 8005b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fd fd34 	bl	80035b0 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e067      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b56:	4b11      	ldr	r3, [pc, #68]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x730>
 8005b62:	e05f      	b.n	8005c24 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a0c      	ldr	r2, [pc, #48]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b70:	f7fd fd1e 	bl	80035b0 <HAL_GetTick>
 8005b74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b78:	f7fd fd1a 	bl	80035b0 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e04d      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b8a:	4b04      	ldr	r3, [pc, #16]	; (8005b9c <HAL_RCC_OscConfig+0x788>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1f0      	bne.n	8005b78 <HAL_RCC_OscConfig+0x764>
 8005b96:	e045      	b.n	8005c24 <HAL_RCC_OscConfig+0x810>
 8005b98:	58024800 	.word	0x58024800
 8005b9c:	58024400 	.word	0x58024400
 8005ba0:	fffffc0c 	.word	0xfffffc0c
 8005ba4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ba8:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <HAL_RCC_OscConfig+0x81c>)
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005bae:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <HAL_RCC_OscConfig+0x81c>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d031      	beq.n	8005c20 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	f003 0203 	and.w	r2, r3, #3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d12a      	bne.n	8005c20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d122      	bne.n	8005c20 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d11a      	bne.n	8005c20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	0a5b      	lsrs	r3, r3, #9
 8005bee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d111      	bne.n	8005c20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	0c1b      	lsrs	r3, r3, #16
 8005c00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d108      	bne.n	8005c20 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	0e1b      	lsrs	r3, r3, #24
 8005c12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d001      	beq.n	8005c24 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3730      	adds	r7, #48	; 0x30
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	58024400 	.word	0x58024400

08005c34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e19c      	b.n	8005f82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c48:	4b8a      	ldr	r3, [pc, #552]	; (8005e74 <HAL_RCC_ClockConfig+0x240>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d910      	bls.n	8005c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c56:	4b87      	ldr	r3, [pc, #540]	; (8005e74 <HAL_RCC_ClockConfig+0x240>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f023 020f 	bic.w	r2, r3, #15
 8005c5e:	4985      	ldr	r1, [pc, #532]	; (8005e74 <HAL_RCC_ClockConfig+0x240>)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c66:	4b83      	ldr	r3, [pc, #524]	; (8005e74 <HAL_RCC_ClockConfig+0x240>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	e184      	b.n	8005f82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d010      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	4b7b      	ldr	r3, [pc, #492]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d908      	bls.n	8005ca6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c94:	4b78      	ldr	r3, [pc, #480]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	4975      	ldr	r1, [pc, #468]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d010      	beq.n	8005cd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	695a      	ldr	r2, [r3, #20]
 8005cb6:	4b70      	ldr	r3, [pc, #448]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d908      	bls.n	8005cd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cc2:	4b6d      	ldr	r3, [pc, #436]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	496a      	ldr	r1, [pc, #424]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0310 	and.w	r3, r3, #16
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d010      	beq.n	8005d02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699a      	ldr	r2, [r3, #24]
 8005ce4:	4b64      	ldr	r3, [pc, #400]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d908      	bls.n	8005d02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005cf0:	4b61      	ldr	r3, [pc, #388]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	495e      	ldr	r1, [pc, #376]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d010      	beq.n	8005d30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69da      	ldr	r2, [r3, #28]
 8005d12:	4b59      	ldr	r3, [pc, #356]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d908      	bls.n	8005d30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d1e:	4b56      	ldr	r3, [pc, #344]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	4953      	ldr	r1, [pc, #332]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d010      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	68da      	ldr	r2, [r3, #12]
 8005d40:	4b4d      	ldr	r3, [pc, #308]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005d42:	699b      	ldr	r3, [r3, #24]
 8005d44:	f003 030f 	and.w	r3, r3, #15
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d908      	bls.n	8005d5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d4c:	4b4a      	ldr	r3, [pc, #296]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005d4e:	699b      	ldr	r3, [r3, #24]
 8005d50:	f023 020f 	bic.w	r2, r3, #15
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4947      	ldr	r1, [pc, #284]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0301 	and.w	r3, r3, #1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d055      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005d6a:	4b43      	ldr	r3, [pc, #268]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	4940      	ldr	r1, [pc, #256]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	2b02      	cmp	r3, #2
 8005d82:	d107      	bne.n	8005d94 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d84:	4b3c      	ldr	r3, [pc, #240]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d121      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e0f6      	b.n	8005f82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	2b03      	cmp	r3, #3
 8005d9a:	d107      	bne.n	8005dac <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d9c:	4b36      	ldr	r3, [pc, #216]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d115      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e0ea      	b.n	8005f82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d107      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005db4:	4b30      	ldr	r3, [pc, #192]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d109      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0de      	b.n	8005f82 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dc4:	4b2c      	ldr	r3, [pc, #176]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e0d6      	b.n	8005f82 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dd4:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f023 0207 	bic.w	r2, r3, #7
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4925      	ldr	r1, [pc, #148]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de6:	f7fd fbe3 	bl	80035b0 <HAL_GetTick>
 8005dea:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dec:	e00a      	b.n	8005e04 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dee:	f7fd fbdf 	bl	80035b0 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e0be      	b.n	8005f82 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e04:	4b1c      	ldr	r3, [pc, #112]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	00db      	lsls	r3, r3, #3
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d1eb      	bne.n	8005dee <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d010      	beq.n	8005e44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f003 030f 	and.w	r3, r3, #15
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d208      	bcs.n	8005e44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e32:	4b11      	ldr	r3, [pc, #68]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	f023 020f 	bic.w	r2, r3, #15
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	490e      	ldr	r1, [pc, #56]	; (8005e78 <HAL_RCC_ClockConfig+0x244>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <HAL_RCC_ClockConfig+0x240>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d214      	bcs.n	8005e7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e52:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <HAL_RCC_ClockConfig+0x240>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f023 020f 	bic.w	r2, r3, #15
 8005e5a:	4906      	ldr	r1, [pc, #24]	; (8005e74 <HAL_RCC_ClockConfig+0x240>)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e62:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <HAL_RCC_ClockConfig+0x240>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	683a      	ldr	r2, [r7, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d005      	beq.n	8005e7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e086      	b.n	8005f82 <HAL_RCC_ClockConfig+0x34e>
 8005e74:	52002000 	.word	0x52002000
 8005e78:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d010      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	4b3f      	ldr	r3, [pc, #252]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d208      	bcs.n	8005eaa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e98:	4b3c      	ldr	r3, [pc, #240]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	4939      	ldr	r1, [pc, #228]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d010      	beq.n	8005ed8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695a      	ldr	r2, [r3, #20]
 8005eba:	4b34      	ldr	r3, [pc, #208]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d208      	bcs.n	8005ed8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ec6:	4b31      	ldr	r3, [pc, #196]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	492e      	ldr	r1, [pc, #184]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d010      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	4b28      	ldr	r3, [pc, #160]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d208      	bcs.n	8005f06 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ef4:	4b25      	ldr	r3, [pc, #148]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005ef6:	69db      	ldr	r3, [r3, #28]
 8005ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	4922      	ldr	r1, [pc, #136]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d010      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69da      	ldr	r2, [r3, #28]
 8005f16:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005f18:	6a1b      	ldr	r3, [r3, #32]
 8005f1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d208      	bcs.n	8005f34 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f22:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	4917      	ldr	r1, [pc, #92]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005f34:	f000 f834 	bl	8005fa0 <HAL_RCC_GetSysClockFreq>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	4b14      	ldr	r3, [pc, #80]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	0a1b      	lsrs	r3, r3, #8
 8005f40:	f003 030f 	and.w	r3, r3, #15
 8005f44:	4912      	ldr	r1, [pc, #72]	; (8005f90 <HAL_RCC_ClockConfig+0x35c>)
 8005f46:	5ccb      	ldrb	r3, [r1, r3]
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f52:	4b0e      	ldr	r3, [pc, #56]	; (8005f8c <HAL_RCC_ClockConfig+0x358>)
 8005f54:	699b      	ldr	r3, [r3, #24]
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	4a0d      	ldr	r2, [pc, #52]	; (8005f90 <HAL_RCC_ClockConfig+0x35c>)
 8005f5c:	5cd3      	ldrb	r3, [r2, r3]
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	fa22 f303 	lsr.w	r3, r2, r3
 8005f68:	4a0a      	ldr	r2, [pc, #40]	; (8005f94 <HAL_RCC_ClockConfig+0x360>)
 8005f6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f6c:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <HAL_RCC_ClockConfig+0x364>)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005f72:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <HAL_RCC_ClockConfig+0x368>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fd f930 	bl	80031dc <HAL_InitTick>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3718      	adds	r7, #24
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	58024400 	.word	0x58024400
 8005f90:	08009820 	.word	0x08009820
 8005f94:	2000180c 	.word	0x2000180c
 8005f98:	20001808 	.word	0x20001808
 8005f9c:	20001800 	.word	0x20001800

08005fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b089      	sub	sp, #36	; 0x24
 8005fa4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fa6:	4bb3      	ldr	r3, [pc, #716]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fae:	2b18      	cmp	r3, #24
 8005fb0:	f200 8155 	bhi.w	800625e <HAL_RCC_GetSysClockFreq+0x2be>
 8005fb4:	a201      	add	r2, pc, #4	; (adr r2, 8005fbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8005fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fba:	bf00      	nop
 8005fbc:	08006021 	.word	0x08006021
 8005fc0:	0800625f 	.word	0x0800625f
 8005fc4:	0800625f 	.word	0x0800625f
 8005fc8:	0800625f 	.word	0x0800625f
 8005fcc:	0800625f 	.word	0x0800625f
 8005fd0:	0800625f 	.word	0x0800625f
 8005fd4:	0800625f 	.word	0x0800625f
 8005fd8:	0800625f 	.word	0x0800625f
 8005fdc:	08006047 	.word	0x08006047
 8005fe0:	0800625f 	.word	0x0800625f
 8005fe4:	0800625f 	.word	0x0800625f
 8005fe8:	0800625f 	.word	0x0800625f
 8005fec:	0800625f 	.word	0x0800625f
 8005ff0:	0800625f 	.word	0x0800625f
 8005ff4:	0800625f 	.word	0x0800625f
 8005ff8:	0800625f 	.word	0x0800625f
 8005ffc:	0800604d 	.word	0x0800604d
 8006000:	0800625f 	.word	0x0800625f
 8006004:	0800625f 	.word	0x0800625f
 8006008:	0800625f 	.word	0x0800625f
 800600c:	0800625f 	.word	0x0800625f
 8006010:	0800625f 	.word	0x0800625f
 8006014:	0800625f 	.word	0x0800625f
 8006018:	0800625f 	.word	0x0800625f
 800601c:	08006053 	.word	0x08006053
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006020:	4b94      	ldr	r3, [pc, #592]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b00      	cmp	r3, #0
 800602a:	d009      	beq.n	8006040 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800602c:	4b91      	ldr	r3, [pc, #580]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	08db      	lsrs	r3, r3, #3
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	4a90      	ldr	r2, [pc, #576]	; (8006278 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006038:	fa22 f303 	lsr.w	r3, r2, r3
 800603c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800603e:	e111      	b.n	8006264 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006040:	4b8d      	ldr	r3, [pc, #564]	; (8006278 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006042:	61bb      	str	r3, [r7, #24]
    break;
 8006044:	e10e      	b.n	8006264 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006046:	4b8d      	ldr	r3, [pc, #564]	; (800627c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006048:	61bb      	str	r3, [r7, #24]
    break;
 800604a:	e10b      	b.n	8006264 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800604c:	4b8c      	ldr	r3, [pc, #560]	; (8006280 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800604e:	61bb      	str	r3, [r7, #24]
    break;
 8006050:	e108      	b.n	8006264 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006052:	4b88      	ldr	r3, [pc, #544]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006056:	f003 0303 	and.w	r3, r3, #3
 800605a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800605c:	4b85      	ldr	r3, [pc, #532]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	091b      	lsrs	r3, r3, #4
 8006062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006066:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006068:	4b82      	ldr	r3, [pc, #520]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	f003 0301 	and.w	r3, r3, #1
 8006070:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006072:	4b80      	ldr	r3, [pc, #512]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006076:	08db      	lsrs	r3, r3, #3
 8006078:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	fb02 f303 	mul.w	r3, r2, r3
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 80e1 	beq.w	8006258 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b02      	cmp	r3, #2
 800609a:	f000 8083 	beq.w	80061a4 <HAL_RCC_GetSysClockFreq+0x204>
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	f200 80a1 	bhi.w	80061e8 <HAL_RCC_GetSysClockFreq+0x248>
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <HAL_RCC_GetSysClockFreq+0x114>
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d056      	beq.n	8006160 <HAL_RCC_GetSysClockFreq+0x1c0>
 80060b2:	e099      	b.n	80061e8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060b4:	4b6f      	ldr	r3, [pc, #444]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d02d      	beq.n	800611c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80060c0:	4b6c      	ldr	r3, [pc, #432]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	08db      	lsrs	r3, r3, #3
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	4a6b      	ldr	r2, [pc, #428]	; (8006278 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80060cc:	fa22 f303 	lsr.w	r3, r2, r3
 80060d0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	ee07 3a90 	vmov	s15, r3
 80060d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ea:	4b62      	ldr	r3, [pc, #392]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80060fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006284 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006102:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006106:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800610e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006116:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800611a:	e087      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006288 <HAL_RCC_GetSysClockFreq+0x2e8>
 800612a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612e:	4b51      	ldr	r3, [pc, #324]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800613e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006142:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006284 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006146:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800614e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006152:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800615e:	e065      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800628c <HAL_RCC_GetSysClockFreq+0x2ec>
 800616e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006172:	4b40      	ldr	r3, [pc, #256]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006182:	ed97 6a02 	vldr	s12, [r7, #8]
 8006186:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006284 <HAL_RCC_GetSysClockFreq+0x2e4>
 800618a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800618e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006192:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006196:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a2:	e043      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006290 <HAL_RCC_GetSysClockFreq+0x2f0>
 80061b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061b6:	4b2f      	ldr	r3, [pc, #188]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006284 <HAL_RCC_GetSysClockFreq+0x2e4>
 80061ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061e6:	e021      	b.n	800622c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	ee07 3a90 	vmov	s15, r3
 80061ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800628c <HAL_RCC_GetSysClockFreq+0x2ec>
 80061f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061fa:	4b1e      	ldr	r3, [pc, #120]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006202:	ee07 3a90 	vmov	s15, r3
 8006206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800620a:	ed97 6a02 	vldr	s12, [r7, #8]
 800620e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006284 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800621a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800621e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006226:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800622a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800622c:	4b11      	ldr	r3, [pc, #68]	; (8006274 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800622e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006230:	0a5b      	lsrs	r3, r3, #9
 8006232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006236:	3301      	adds	r3, #1
 8006238:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006244:	edd7 6a07 	vldr	s13, [r7, #28]
 8006248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006250:	ee17 3a90 	vmov	r3, s15
 8006254:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006256:	e005      	b.n	8006264 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	61bb      	str	r3, [r7, #24]
    break;
 800625c:	e002      	b.n	8006264 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800625e:	4b07      	ldr	r3, [pc, #28]	; (800627c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006260:	61bb      	str	r3, [r7, #24]
    break;
 8006262:	bf00      	nop
  }

  return sysclockfreq;
 8006264:	69bb      	ldr	r3, [r7, #24]
}
 8006266:	4618      	mov	r0, r3
 8006268:	3724      	adds	r7, #36	; 0x24
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	58024400 	.word	0x58024400
 8006278:	03d09000 	.word	0x03d09000
 800627c:	003d0900 	.word	0x003d0900
 8006280:	007a1200 	.word	0x007a1200
 8006284:	46000000 	.word	0x46000000
 8006288:	4c742400 	.word	0x4c742400
 800628c:	4a742400 	.word	0x4a742400
 8006290:	4af42400 	.word	0x4af42400

08006294 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800629a:	f7ff fe81 	bl	8005fa0 <HAL_RCC_GetSysClockFreq>
 800629e:	4602      	mov	r2, r0
 80062a0:	4b10      	ldr	r3, [pc, #64]	; (80062e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	0a1b      	lsrs	r3, r3, #8
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	490f      	ldr	r1, [pc, #60]	; (80062e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80062ac:	5ccb      	ldrb	r3, [r1, r3]
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	fa22 f303 	lsr.w	r3, r2, r3
 80062b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062b8:	4b0a      	ldr	r3, [pc, #40]	; (80062e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	f003 030f 	and.w	r3, r3, #15
 80062c0:	4a09      	ldr	r2, [pc, #36]	; (80062e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80062c2:	5cd3      	ldrb	r3, [r2, r3]
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	fa22 f303 	lsr.w	r3, r2, r3
 80062ce:	4a07      	ldr	r2, [pc, #28]	; (80062ec <HAL_RCC_GetHCLKFreq+0x58>)
 80062d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062d2:	4a07      	ldr	r2, [pc, #28]	; (80062f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80062d8:	4b04      	ldr	r3, [pc, #16]	; (80062ec <HAL_RCC_GetHCLKFreq+0x58>)
 80062da:	681b      	ldr	r3, [r3, #0]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	58024400 	.word	0x58024400
 80062e8:	08009820 	.word	0x08009820
 80062ec:	2000180c 	.word	0x2000180c
 80062f0:	20001808 	.word	0x20001808

080062f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80062f8:	f7ff ffcc 	bl	8006294 <HAL_RCC_GetHCLKFreq>
 80062fc:	4602      	mov	r2, r0
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	091b      	lsrs	r3, r3, #4
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	4904      	ldr	r1, [pc, #16]	; (800631c <HAL_RCC_GetPCLK1Freq+0x28>)
 800630a:	5ccb      	ldrb	r3, [r1, r3]
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006314:	4618      	mov	r0, r3
 8006316:	bd80      	pop	{r7, pc}
 8006318:	58024400 	.word	0x58024400
 800631c:	08009820 	.word	0x08009820

08006320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006324:	f7ff ffb6 	bl	8006294 <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	0a1b      	lsrs	r3, r3, #8
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4904      	ldr	r1, [pc, #16]	; (8006348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd80      	pop	{r7, pc}
 8006344:	58024400 	.word	0x58024400
 8006348:	08009820 	.word	0x08009820

0800634c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	223f      	movs	r2, #63	; 0x3f
 800635a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800635c:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <HAL_RCC_GetClockConfig+0x7c>)
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	f003 0207 	and.w	r2, r3, #7
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006368:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <HAL_RCC_GetClockConfig+0x7c>)
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006374:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <HAL_RCC_GetClockConfig+0x7c>)
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f003 020f 	and.w	r2, r3, #15
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006380:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <HAL_RCC_GetClockConfig+0x7c>)
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800638c:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <HAL_RCC_GetClockConfig+0x7c>)
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <HAL_RCC_GetClockConfig+0x7c>)
 800639a:	69db      	ldr	r3, [r3, #28]
 800639c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80063a4:	4b08      	ldr	r3, [pc, #32]	; (80063c8 <HAL_RCC_GetClockConfig+0x7c>)
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063b0:	4b06      	ldr	r3, [pc, #24]	; (80063cc <HAL_RCC_GetClockConfig+0x80>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 020f 	and.w	r2, r3, #15
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	601a      	str	r2, [r3, #0]
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	58024400 	.word	0x58024400
 80063cc:	52002000 	.word	0x52002000

080063d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063d8:	2300      	movs	r3, #0
 80063da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063dc:	2300      	movs	r3, #0
 80063de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d03f      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063f4:	d02a      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80063f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063fa:	d824      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80063fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006400:	d018      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006402:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006406:	d81e      	bhi.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800640c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006410:	d007      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006412:	e018      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006414:	4bab      	ldr	r3, [pc, #684]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006418:	4aaa      	ldr	r2, [pc, #680]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800641a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800641e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006420:	e015      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3304      	adds	r3, #4
 8006426:	2102      	movs	r1, #2
 8006428:	4618      	mov	r0, r3
 800642a:	f001 f9bf 	bl	80077ac <RCCEx_PLL2_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006432:	e00c      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3324      	adds	r3, #36	; 0x24
 8006438:	2102      	movs	r1, #2
 800643a:	4618      	mov	r0, r3
 800643c:	f001 fa68 	bl	8007910 <RCCEx_PLL3_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006444:	e003      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
      break;
 800644a:	e000      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800644c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800644e:	7dfb      	ldrb	r3, [r7, #23]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d109      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006454:	4b9b      	ldr	r3, [pc, #620]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006456:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006460:	4998      	ldr	r1, [pc, #608]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006462:	4313      	orrs	r3, r2
 8006464:	650b      	str	r3, [r1, #80]	; 0x50
 8006466:	e001      	b.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d03d      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647c:	2b04      	cmp	r3, #4
 800647e:	d826      	bhi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	0800649d 	.word	0x0800649d
 800648c:	080064ab 	.word	0x080064ab
 8006490:	080064bd 	.word	0x080064bd
 8006494:	080064d5 	.word	0x080064d5
 8006498:	080064d5 	.word	0x080064d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800649c:	4b89      	ldr	r3, [pc, #548]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a0:	4a88      	ldr	r2, [pc, #544]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064a8:	e015      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3304      	adds	r3, #4
 80064ae:	2100      	movs	r1, #0
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 f97b 	bl	80077ac <RCCEx_PLL2_Config>
 80064b6:	4603      	mov	r3, r0
 80064b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064ba:	e00c      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3324      	adds	r3, #36	; 0x24
 80064c0:	2100      	movs	r1, #0
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 fa24 	bl	8007910 <RCCEx_PLL3_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064cc:	e003      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	75fb      	strb	r3, [r7, #23]
      break;
 80064d2:	e000      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80064d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d109      	bne.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064dc:	4b79      	ldr	r3, [pc, #484]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064e0:	f023 0207 	bic.w	r2, r3, #7
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e8:	4976      	ldr	r1, [pc, #472]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	650b      	str	r3, [r1, #80]	; 0x50
 80064ee:	e001      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d042      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006508:	d02b      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800650a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800650e:	d825      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006510:	2bc0      	cmp	r3, #192	; 0xc0
 8006512:	d028      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006514:	2bc0      	cmp	r3, #192	; 0xc0
 8006516:	d821      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006518:	2b80      	cmp	r3, #128	; 0x80
 800651a:	d016      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800651c:	2b80      	cmp	r3, #128	; 0x80
 800651e:	d81d      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d002      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006524:	2b40      	cmp	r3, #64	; 0x40
 8006526:	d007      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006528:	e018      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800652a:	4b66      	ldr	r3, [pc, #408]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	4a65      	ldr	r2, [pc, #404]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006534:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006536:	e017      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3304      	adds	r3, #4
 800653c:	2100      	movs	r1, #0
 800653e:	4618      	mov	r0, r3
 8006540:	f001 f934 	bl	80077ac <RCCEx_PLL2_Config>
 8006544:	4603      	mov	r3, r0
 8006546:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006548:	e00e      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3324      	adds	r3, #36	; 0x24
 800654e:	2100      	movs	r1, #0
 8006550:	4618      	mov	r0, r3
 8006552:	f001 f9dd 	bl	8007910 <RCCEx_PLL3_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800655a:	e005      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	75fb      	strb	r3, [r7, #23]
      break;
 8006560:	e002      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006562:	bf00      	nop
 8006564:	e000      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006568:	7dfb      	ldrb	r3, [r7, #23]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d109      	bne.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800656e:	4b55      	ldr	r3, [pc, #340]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006572:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657a:	4952      	ldr	r1, [pc, #328]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800657c:	4313      	orrs	r3, r2
 800657e:	650b      	str	r3, [r1, #80]	; 0x50
 8006580:	e001      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800658e:	2b00      	cmp	r3, #0
 8006590:	d049      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006598:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800659c:	d030      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800659e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065a2:	d82a      	bhi.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80065a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065a8:	d02c      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80065aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80065ae:	d824      	bhi.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80065b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065b4:	d018      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80065b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065ba:	d81e      	bhi.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80065c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065c4:	d007      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80065c6:	e018      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c8:	4b3e      	ldr	r3, [pc, #248]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065cc:	4a3d      	ldr	r2, [pc, #244]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80065ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065d4:	e017      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	3304      	adds	r3, #4
 80065da:	2100      	movs	r1, #0
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 f8e5 	bl	80077ac <RCCEx_PLL2_Config>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80065e6:	e00e      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3324      	adds	r3, #36	; 0x24
 80065ec:	2100      	movs	r1, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 f98e 	bl	8007910 <RCCEx_PLL3_Config>
 80065f4:	4603      	mov	r3, r0
 80065f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80065f8:	e005      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	75fb      	strb	r3, [r7, #23]
      break;
 80065fe:	e002      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006600:	bf00      	nop
 8006602:	e000      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10a      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800660c:	4b2d      	ldr	r3, [pc, #180]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800660e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006610:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800661a:	492a      	ldr	r1, [pc, #168]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800661c:	4313      	orrs	r3, r2
 800661e:	658b      	str	r3, [r1, #88]	; 0x58
 8006620:	e001      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800662e:	2b00      	cmp	r3, #0
 8006630:	d04c      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006638:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800663c:	d030      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800663e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006642:	d82a      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006644:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006648:	d02c      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800664a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800664e:	d824      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006654:	d018      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800665a:	d81e      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006664:	d007      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006666:	e018      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006668:	4b16      	ldr	r3, [pc, #88]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	4a15      	ldr	r2, [pc, #84]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800666e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006672:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006674:	e017      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3304      	adds	r3, #4
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f001 f895 	bl	80077ac <RCCEx_PLL2_Config>
 8006682:	4603      	mov	r3, r0
 8006684:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006686:	e00e      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3324      	adds	r3, #36	; 0x24
 800668c:	2100      	movs	r1, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f001 f93e 	bl	8007910 <RCCEx_PLL3_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006698:	e005      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
      break;
 800669e:	e002      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80066a0:	bf00      	nop
 80066a2:	e000      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80066a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10d      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066ba:	4902      	ldr	r1, [pc, #8]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	658b      	str	r3, [r1, #88]	; 0x58
 80066c0:	e004      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80066c2:	bf00      	nop
 80066c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c8:	7dfb      	ldrb	r3, [r7, #23]
 80066ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d032      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066dc:	2b30      	cmp	r3, #48	; 0x30
 80066de:	d01c      	beq.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80066e0:	2b30      	cmp	r3, #48	; 0x30
 80066e2:	d817      	bhi.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	d00c      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d813      	bhi.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d016      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80066f0:	2b10      	cmp	r3, #16
 80066f2:	d10f      	bne.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066f4:	4baf      	ldr	r3, [pc, #700]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f8:	4aae      	ldr	r2, [pc, #696]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80066fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006700:	e00e      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3304      	adds	r3, #4
 8006706:	2102      	movs	r1, #2
 8006708:	4618      	mov	r0, r3
 800670a:	f001 f84f 	bl	80077ac <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006712:	e005      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	75fb      	strb	r3, [r7, #23]
      break;
 8006718:	e002      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800671a:	bf00      	nop
 800671c:	e000      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800671e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d109      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006726:	4ba3      	ldr	r3, [pc, #652]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800672a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006732:	49a0      	ldr	r1, [pc, #640]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006734:	4313      	orrs	r3, r2
 8006736:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006738:	e001      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d047      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800674e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006752:	d030      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006758:	d82a      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800675a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800675e:	d02c      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006760:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006764:	d824      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676a:	d018      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800676c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006770:	d81e      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677a:	d007      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800677c:	e018      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800677e:	4b8d      	ldr	r3, [pc, #564]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	4a8c      	ldr	r2, [pc, #560]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006788:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800678a:	e017      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	3304      	adds	r3, #4
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f001 f80a 	bl	80077ac <RCCEx_PLL2_Config>
 8006798:	4603      	mov	r3, r0
 800679a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800679c:	e00e      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	2100      	movs	r1, #0
 80067a4:	4618      	mov	r0, r3
 80067a6:	f001 f8b3 	bl	8007910 <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80067ae:	e005      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	75fb      	strb	r3, [r7, #23]
      break;
 80067b4:	e002      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80067b6:	bf00      	nop
 80067b8:	e000      	b.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80067ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d109      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80067c2:	4b7c      	ldr	r3, [pc, #496]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067c6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ce:	4979      	ldr	r1, [pc, #484]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80067d0:	4313      	orrs	r3, r2
 80067d2:	650b      	str	r3, [r1, #80]	; 0x50
 80067d4:	e001      	b.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d6:	7dfb      	ldrb	r3, [r7, #23]
 80067d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d049      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067ee:	d02e      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80067f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067f4:	d828      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80067f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80067fa:	d02a      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80067fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006800:	d822      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006802:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006806:	d026      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006808:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800680c:	d81c      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800680e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006812:	d010      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006818:	d816      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d01d      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800681e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006822:	d111      	bne.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3304      	adds	r3, #4
 8006828:	2101      	movs	r1, #1
 800682a:	4618      	mov	r0, r3
 800682c:	f000 ffbe 	bl	80077ac <RCCEx_PLL2_Config>
 8006830:	4603      	mov	r3, r0
 8006832:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006834:	e012      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3324      	adds	r3, #36	; 0x24
 800683a:	2101      	movs	r1, #1
 800683c:	4618      	mov	r0, r3
 800683e:	f001 f867 	bl	8007910 <RCCEx_PLL3_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006846:	e009      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	75fb      	strb	r3, [r7, #23]
      break;
 800684c:	e006      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800684e:	bf00      	nop
 8006850:	e004      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006852:	bf00      	nop
 8006854:	e002      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006856:	bf00      	nop
 8006858:	e000      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800685a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006862:	4b54      	ldr	r3, [pc, #336]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006866:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686e:	4951      	ldr	r1, [pc, #324]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006870:	4313      	orrs	r3, r2
 8006872:	650b      	str	r3, [r1, #80]	; 0x50
 8006874:	e001      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d04b      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800688c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006890:	d02e      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006892:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006896:	d828      	bhi.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800689c:	d02a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800689e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068a2:	d822      	bhi.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80068a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068a8:	d026      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80068aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80068ae:	d81c      	bhi.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80068b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068b4:	d010      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80068b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ba:	d816      	bhi.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01d      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80068c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068c4:	d111      	bne.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3304      	adds	r3, #4
 80068ca:	2101      	movs	r1, #1
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 ff6d 	bl	80077ac <RCCEx_PLL2_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80068d6:	e012      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3324      	adds	r3, #36	; 0x24
 80068dc:	2101      	movs	r1, #1
 80068de:	4618      	mov	r0, r3
 80068e0:	f001 f816 	bl	8007910 <RCCEx_PLL3_Config>
 80068e4:	4603      	mov	r3, r0
 80068e6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80068e8:	e009      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	75fb      	strb	r3, [r7, #23]
      break;
 80068ee:	e006      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80068f0:	bf00      	nop
 80068f2:	e004      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80068f4:	bf00      	nop
 80068f6:	e002      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80068f8:	bf00      	nop
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80068fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10a      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006904:	4b2b      	ldr	r3, [pc, #172]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006908:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006912:	4928      	ldr	r1, [pc, #160]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006914:	4313      	orrs	r3, r2
 8006916:	658b      	str	r3, [r1, #88]	; 0x58
 8006918:	e001      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800691a:	7dfb      	ldrb	r3, [r7, #23]
 800691c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d02f      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800692e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006932:	d00e      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006934:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006938:	d814      	bhi.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800693a:	2b00      	cmp	r3, #0
 800693c:	d015      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800693e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006942:	d10f      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006944:	4b1b      	ldr	r3, [pc, #108]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006948:	4a1a      	ldr	r2, [pc, #104]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800694a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800694e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006950:	e00c      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	3304      	adds	r3, #4
 8006956:	2101      	movs	r1, #1
 8006958:	4618      	mov	r0, r3
 800695a:	f000 ff27 	bl	80077ac <RCCEx_PLL2_Config>
 800695e:	4603      	mov	r3, r0
 8006960:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006962:	e003      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	75fb      	strb	r3, [r7, #23]
      break;
 8006968:	e000      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800696a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800696c:	7dfb      	ldrb	r3, [r7, #23]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006972:	4b10      	ldr	r3, [pc, #64]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006976:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800697e:	490d      	ldr	r1, [pc, #52]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006980:	4313      	orrs	r3, r2
 8006982:	650b      	str	r3, [r1, #80]	; 0x50
 8006984:	e001      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d033      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699a:	2b03      	cmp	r3, #3
 800699c:	d81c      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800699e:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	080069df 	.word	0x080069df
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	080069c7 	.word	0x080069c7
 80069b0:	080069df 	.word	0x080069df
 80069b4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069b8:	4bb8      	ldr	r3, [pc, #736]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	4ab7      	ldr	r2, [pc, #732]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80069c4:	e00c      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3304      	adds	r3, #4
 80069ca:	2102      	movs	r1, #2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 feed 	bl	80077ac <RCCEx_PLL2_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80069d6:	e003      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
      break;
 80069dc:	e000      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80069de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80069e6:	4bad      	ldr	r3, [pc, #692]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ea:	f023 0203 	bic.w	r2, r3, #3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	49aa      	ldr	r1, [pc, #680]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80069f8:	e001      	b.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
 80069fc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	f000 8086 	beq.w	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a0c:	4ba4      	ldr	r3, [pc, #656]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4aa3      	ldr	r2, [pc, #652]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a18:	f7fc fdca 	bl	80035b0 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a1e:	e009      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a20:	f7fc fdc6 	bl	80035b0 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b64      	cmp	r3, #100	; 0x64
 8006a2c:	d902      	bls.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	75fb      	strb	r3, [r7, #23]
        break;
 8006a32:	e005      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a34:	4b9a      	ldr	r3, [pc, #616]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0ef      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d166      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006a46:	4b95      	ldr	r3, [pc, #596]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a50:	4053      	eors	r3, r2
 8006a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d013      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006a5a:	4b90      	ldr	r3, [pc, #576]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a62:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a64:	4b8d      	ldr	r3, [pc, #564]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a68:	4a8c      	ldr	r2, [pc, #560]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a6e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a70:	4b8a      	ldr	r3, [pc, #552]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a74:	4a89      	ldr	r2, [pc, #548]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a7a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006a7c:	4a87      	ldr	r2, [pc, #540]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8c:	d115      	bne.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a8e:	f7fc fd8f 	bl	80035b0 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006a94:	e00b      	b.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a96:	f7fc fd8b 	bl	80035b0 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d902      	bls.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	75fb      	strb	r3, [r7, #23]
            break;
 8006aac:	e005      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006aae:	4b7b      	ldr	r3, [pc, #492]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0ed      	beq.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d126      	bne.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ace:	d10d      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006ad0:	4b72      	ldr	r3, [pc, #456]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ad2:	691b      	ldr	r3, [r3, #16]
 8006ad4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006ade:	0919      	lsrs	r1, r3, #4
 8006ae0:	4b70      	ldr	r3, [pc, #448]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8006ae2:	400b      	ands	r3, r1
 8006ae4:	496d      	ldr	r1, [pc, #436]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	610b      	str	r3, [r1, #16]
 8006aea:	e005      	b.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006aec:	4b6b      	ldr	r3, [pc, #428]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	4a6a      	ldr	r2, [pc, #424]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006af2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006af6:	6113      	str	r3, [r2, #16]
 8006af8:	4b68      	ldr	r3, [pc, #416]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006afa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006b02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b06:	4965      	ldr	r1, [pc, #404]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	670b      	str	r3, [r1, #112]	; 0x70
 8006b0c:	e004      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	75bb      	strb	r3, [r7, #22]
 8006b12:	e001      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d07e      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b28:	2b28      	cmp	r3, #40	; 0x28
 8006b2a:	d867      	bhi.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006c03 	.word	0x08006c03
 8006b38:	08006bfd 	.word	0x08006bfd
 8006b3c:	08006bfd 	.word	0x08006bfd
 8006b40:	08006bfd 	.word	0x08006bfd
 8006b44:	08006bfd 	.word	0x08006bfd
 8006b48:	08006bfd 	.word	0x08006bfd
 8006b4c:	08006bfd 	.word	0x08006bfd
 8006b50:	08006bfd 	.word	0x08006bfd
 8006b54:	08006bd9 	.word	0x08006bd9
 8006b58:	08006bfd 	.word	0x08006bfd
 8006b5c:	08006bfd 	.word	0x08006bfd
 8006b60:	08006bfd 	.word	0x08006bfd
 8006b64:	08006bfd 	.word	0x08006bfd
 8006b68:	08006bfd 	.word	0x08006bfd
 8006b6c:	08006bfd 	.word	0x08006bfd
 8006b70:	08006bfd 	.word	0x08006bfd
 8006b74:	08006beb 	.word	0x08006beb
 8006b78:	08006bfd 	.word	0x08006bfd
 8006b7c:	08006bfd 	.word	0x08006bfd
 8006b80:	08006bfd 	.word	0x08006bfd
 8006b84:	08006bfd 	.word	0x08006bfd
 8006b88:	08006bfd 	.word	0x08006bfd
 8006b8c:	08006bfd 	.word	0x08006bfd
 8006b90:	08006bfd 	.word	0x08006bfd
 8006b94:	08006c03 	.word	0x08006c03
 8006b98:	08006bfd 	.word	0x08006bfd
 8006b9c:	08006bfd 	.word	0x08006bfd
 8006ba0:	08006bfd 	.word	0x08006bfd
 8006ba4:	08006bfd 	.word	0x08006bfd
 8006ba8:	08006bfd 	.word	0x08006bfd
 8006bac:	08006bfd 	.word	0x08006bfd
 8006bb0:	08006bfd 	.word	0x08006bfd
 8006bb4:	08006c03 	.word	0x08006c03
 8006bb8:	08006bfd 	.word	0x08006bfd
 8006bbc:	08006bfd 	.word	0x08006bfd
 8006bc0:	08006bfd 	.word	0x08006bfd
 8006bc4:	08006bfd 	.word	0x08006bfd
 8006bc8:	08006bfd 	.word	0x08006bfd
 8006bcc:	08006bfd 	.word	0x08006bfd
 8006bd0:	08006bfd 	.word	0x08006bfd
 8006bd4:	08006c03 	.word	0x08006c03
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	2101      	movs	r1, #1
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fde4 	bl	80077ac <RCCEx_PLL2_Config>
 8006be4:	4603      	mov	r3, r0
 8006be6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006be8:	e00c      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3324      	adds	r3, #36	; 0x24
 8006bee:	2101      	movs	r1, #1
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fe8d 	bl	8007910 <RCCEx_PLL3_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006bfa:	e003      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8006c00:	e000      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8006c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c04:	7dfb      	ldrb	r3, [r7, #23]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006c0a:	4b24      	ldr	r3, [pc, #144]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c16:	4921      	ldr	r1, [pc, #132]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	654b      	str	r3, [r1, #84]	; 0x54
 8006c1c:	e001      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d03e      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d820      	bhi.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8006c36:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8006c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3c:	08006c7f 	.word	0x08006c7f
 8006c40:	08006c55 	.word	0x08006c55
 8006c44:	08006c67 	.word	0x08006c67
 8006c48:	08006c7f 	.word	0x08006c7f
 8006c4c:	08006c7f 	.word	0x08006c7f
 8006c50:	08006c7f 	.word	0x08006c7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	2101      	movs	r1, #1
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fda6 	bl	80077ac <RCCEx_PLL2_Config>
 8006c60:	4603      	mov	r3, r0
 8006c62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c64:	e00c      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	3324      	adds	r3, #36	; 0x24
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fe4f 	bl	8007910 <RCCEx_PLL3_Config>
 8006c72:	4603      	mov	r3, r0
 8006c74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006c76:	e003      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c7c:	e000      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8006c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c80:	7dfb      	ldrb	r3, [r7, #23]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d110      	bne.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006c86:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8a:	f023 0207 	bic.w	r2, r3, #7
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c92:	4902      	ldr	r1, [pc, #8]	; (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006c94:	4313      	orrs	r3, r2
 8006c96:	654b      	str	r3, [r1, #84]	; 0x54
 8006c98:	e008      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8006c9a:	bf00      	nop
 8006c9c:	58024400 	.word	0x58024400
 8006ca0:	58024800 	.word	0x58024800
 8006ca4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d039      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbe:	2b05      	cmp	r3, #5
 8006cc0:	d820      	bhi.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006cc2:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006d0b 	.word	0x08006d0b
 8006ccc:	08006ce1 	.word	0x08006ce1
 8006cd0:	08006cf3 	.word	0x08006cf3
 8006cd4:	08006d0b 	.word	0x08006d0b
 8006cd8:	08006d0b 	.word	0x08006d0b
 8006cdc:	08006d0b 	.word	0x08006d0b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	2101      	movs	r1, #1
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fd60 	bl	80077ac <RCCEx_PLL2_Config>
 8006cec:	4603      	mov	r3, r0
 8006cee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006cf0:	e00c      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	3324      	adds	r3, #36	; 0x24
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 fe09 	bl	8007910 <RCCEx_PLL3_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006d02:	e003      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	75fb      	strb	r3, [r7, #23]
      break;
 8006d08:	e000      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8006d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10a      	bne.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d12:	4bb7      	ldr	r3, [pc, #732]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d16:	f023 0207 	bic.w	r2, r3, #7
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d20:	49b3      	ldr	r1, [pc, #716]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	658b      	str	r3, [r1, #88]	; 0x58
 8006d26:	e001      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
 8006d2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0320 	and.w	r3, r3, #32
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d04b      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d42:	d02e      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8006d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d48:	d828      	bhi.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4e:	d02a      	beq.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d54:	d822      	bhi.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006d56:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d5a:	d026      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006d5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d60:	d81c      	bhi.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006d62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d66:	d010      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8006d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d6c:	d816      	bhi.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01d      	beq.n	8006dae <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d76:	d111      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fd14 	bl	80077ac <RCCEx_PLL2_Config>
 8006d84:	4603      	mov	r3, r0
 8006d86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d88:	e012      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3324      	adds	r3, #36	; 0x24
 8006d8e:	2102      	movs	r1, #2
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fdbd 	bl	8007910 <RCCEx_PLL3_Config>
 8006d96:	4603      	mov	r3, r0
 8006d98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006d9a:	e009      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006da0:	e006      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006da2:	bf00      	nop
 8006da4:	e004      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006da6:	bf00      	nop
 8006da8:	e002      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006daa:	bf00      	nop
 8006dac:	e000      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8006dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006db0:	7dfb      	ldrb	r3, [r7, #23]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006db6:	4b8e      	ldr	r3, [pc, #568]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dc4:	498a      	ldr	r1, [pc, #552]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	654b      	str	r3, [r1, #84]	; 0x54
 8006dca:	e001      	b.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d04b      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006de2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006de6:	d02e      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8006de8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006dec:	d828      	bhi.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df2:	d02a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df8:	d822      	bhi.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006dfa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dfe:	d026      	beq.n	8006e4e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e04:	d81c      	bhi.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e0a:	d010      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8006e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e10:	d816      	bhi.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d01d      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e1a:	d111      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3304      	adds	r3, #4
 8006e20:	2100      	movs	r1, #0
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 fcc2 	bl	80077ac <RCCEx_PLL2_Config>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006e2c:	e012      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3324      	adds	r3, #36	; 0x24
 8006e32:	2102      	movs	r1, #2
 8006e34:	4618      	mov	r0, r3
 8006e36:	f000 fd6b 	bl	8007910 <RCCEx_PLL3_Config>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006e3e:	e009      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	75fb      	strb	r3, [r7, #23]
      break;
 8006e44:	e006      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006e46:	bf00      	nop
 8006e48:	e004      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006e4a:	bf00      	nop
 8006e4c:	e002      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006e4e:	bf00      	nop
 8006e50:	e000      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8006e52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e54:	7dfb      	ldrb	r3, [r7, #23]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10a      	bne.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006e5a:	4b65      	ldr	r3, [pc, #404]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e68:	4961      	ldr	r1, [pc, #388]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	658b      	str	r3, [r1, #88]	; 0x58
 8006e6e:	e001      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d04b      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e8a:	d02e      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8006e8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006e90:	d828      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e96:	d02a      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8006e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e9c:	d822      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006e9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ea2:	d026      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006ea4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ea8:	d81c      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eae:	d010      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006eb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb4:	d816      	bhi.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d01d      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ebe:	d111      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	3304      	adds	r3, #4
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fc70 	bl	80077ac <RCCEx_PLL2_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ed0:	e012      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3324      	adds	r3, #36	; 0x24
 8006ed6:	2102      	movs	r1, #2
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fd19 	bl	8007910 <RCCEx_PLL3_Config>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ee2:	e009      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ee8:	e006      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006eea:	bf00      	nop
 8006eec:	e004      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006eee:	bf00      	nop
 8006ef0:	e002      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8006ef6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006efe:	4b3c      	ldr	r3, [pc, #240]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f0c:	4938      	ldr	r1, [pc, #224]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	658b      	str	r3, [r1, #88]	; 0x58
 8006f12:	e001      	b.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
 8006f16:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d01a      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f2e:	d10a      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3324      	adds	r3, #36	; 0x24
 8006f34:	2102      	movs	r1, #2
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fcea 	bl	8007910 <RCCEx_PLL3_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006f46:	4b2a      	ldr	r3, [pc, #168]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f54:	4926      	ldr	r1, [pc, #152]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d01a      	beq.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f70:	d10a      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3324      	adds	r3, #36	; 0x24
 8006f76:	2102      	movs	r1, #2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f000 fcc9 	bl	8007910 <RCCEx_PLL3_Config>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006f88:	4b19      	ldr	r3, [pc, #100]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f96:	4916      	ldr	r1, [pc, #88]	; (8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d036      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006fae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb2:	d01f      	beq.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fb8:	d817      	bhi.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8006fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc2:	d009      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006fc4:	e011      	b.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fbed 	bl	80077ac <RCCEx_PLL2_Config>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006fd6:	e00e      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3324      	adds	r3, #36	; 0x24
 8006fdc:	2102      	movs	r1, #2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fc96 	bl	8007910 <RCCEx_PLL3_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006fe8:	e005      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	75fb      	strb	r3, [r7, #23]
      break;
 8006fee:	e002      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8006ff0:	58024400 	.word	0x58024400
      break;
 8006ff4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff6:	7dfb      	ldrb	r3, [r7, #23]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ffc:	4b8b      	ldr	r3, [pc, #556]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8006ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007000:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800700a:	4988      	ldr	r1, [pc, #544]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800700c:	4313      	orrs	r3, r2
 800700e:	658b      	str	r3, [r1, #88]	; 0x58
 8007010:	e001      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800701e:	2b00      	cmp	r3, #0
 8007020:	d033      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007028:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800702c:	d01c      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800702e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007032:	d816      	bhi.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007034:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007038:	d003      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800703a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800703e:	d007      	beq.n	8007050 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007040:	e00f      	b.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007042:	4b7a      	ldr	r3, [pc, #488]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007046:	4a79      	ldr	r2, [pc, #484]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800704c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800704e:	e00c      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3324      	adds	r3, #36	; 0x24
 8007054:	2101      	movs	r1, #1
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fc5a 	bl	8007910 <RCCEx_PLL3_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007060:	e003      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	75fb      	strb	r3, [r7, #23]
      break;
 8007066:	e000      	b.n	800706a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007068:	bf00      	nop
    }

    if(ret == HAL_OK)
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d10a      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007070:	4b6e      	ldr	r3, [pc, #440]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007074:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800707e:	496b      	ldr	r1, [pc, #428]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007080:	4313      	orrs	r3, r2
 8007082:	654b      	str	r3, [r1, #84]	; 0x54
 8007084:	e001      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d029      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800709e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a2:	d007      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80070a4:	e00f      	b.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070a6:	4b61      	ldr	r3, [pc, #388]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	4a60      	ldr	r2, [pc, #384]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80070ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80070b2:	e00b      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	3304      	adds	r3, #4
 80070b8:	2102      	movs	r1, #2
 80070ba:	4618      	mov	r0, r3
 80070bc:	f000 fb76 	bl	80077ac <RCCEx_PLL2_Config>
 80070c0:	4603      	mov	r3, r0
 80070c2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80070c4:	e002      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	75fb      	strb	r3, [r7, #23]
      break;
 80070ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070cc:	7dfb      	ldrb	r3, [r7, #23]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d109      	bne.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80070d2:	4b56      	ldr	r3, [pc, #344]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80070d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070de:	4953      	ldr	r1, [pc, #332]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80070e4:	e001      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070e6:	7dfb      	ldrb	r3, [r7, #23]
 80070e8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	3324      	adds	r3, #36	; 0x24
 80070fa:	2102      	movs	r1, #2
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fc07 	bl	8007910 <RCCEx_PLL3_Config>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d030      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800711c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007120:	d017      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007122:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007126:	d811      	bhi.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800712c:	d013      	beq.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800712e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007132:	d80b      	bhi.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007134:	2b00      	cmp	r3, #0
 8007136:	d010      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800713c:	d106      	bne.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800713e:	4b3b      	ldr	r3, [pc, #236]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	4a3a      	ldr	r2, [pc, #232]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007148:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800714a:	e007      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	75fb      	strb	r3, [r7, #23]
      break;
 8007150:	e004      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007152:	bf00      	nop
 8007154:	e002      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007156:	bf00      	nop
 8007158:	e000      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800715a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007162:	4b32      	ldr	r3, [pc, #200]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800716e:	492f      	ldr	r1, [pc, #188]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007170:	4313      	orrs	r3, r2
 8007172:	654b      	str	r3, [r1, #84]	; 0x54
 8007174:	e001      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d008      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007186:	4b29      	ldr	r3, [pc, #164]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800718a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007192:	4926      	ldr	r1, [pc, #152]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007194:	4313      	orrs	r3, r2
 8007196:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d009      	beq.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80071a4:	4b21      	ldr	r3, [pc, #132]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80071b2:	491e      	ldr	r1, [pc, #120]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d008      	beq.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80071c4:	4b19      	ldr	r3, [pc, #100]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80071c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071d0:	4916      	ldr	r1, [pc, #88]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00d      	beq.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071e2:	4b12      	ldr	r3, [pc, #72]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80071e4:	691b      	ldr	r3, [r3, #16]
 80071e6:	4a11      	ldr	r2, [pc, #68]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80071e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071ec:	6113      	str	r3, [r2, #16]
 80071ee:	4b0f      	ldr	r3, [pc, #60]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80071f0:	691a      	ldr	r2, [r3, #16]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80071f8:	490c      	ldr	r1, [pc, #48]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80071fa:	4313      	orrs	r3, r2
 80071fc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	da08      	bge.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007206:	4b09      	ldr	r3, [pc, #36]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007212:	4906      	ldr	r1, [pc, #24]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8007214:	4313      	orrs	r3, r2
 8007216:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8007218:	7dbb      	ldrb	r3, [r7, #22]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d101      	bne.n	8007222 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 800721e:	2300      	movs	r3, #0
 8007220:	e000      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
}
 8007224:	4618      	mov	r0, r3
 8007226:	3718      	adds	r7, #24
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	58024400 	.word	0x58024400

08007230 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007234:	f7ff f82e 	bl	8006294 <HAL_RCC_GetHCLKFreq>
 8007238:	4602      	mov	r2, r0
 800723a:	4b06      	ldr	r3, [pc, #24]	; (8007254 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	091b      	lsrs	r3, r3, #4
 8007240:	f003 0307 	and.w	r3, r3, #7
 8007244:	4904      	ldr	r1, [pc, #16]	; (8007258 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007246:	5ccb      	ldrb	r3, [r1, r3]
 8007248:	f003 031f 	and.w	r3, r3, #31
 800724c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007250:	4618      	mov	r0, r3
 8007252:	bd80      	pop	{r7, pc}
 8007254:	58024400 	.word	0x58024400
 8007258:	08009820 	.word	0x08009820

0800725c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007264:	4ba1      	ldr	r3, [pc, #644]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007268:	f003 0303 	and.w	r3, r3, #3
 800726c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800726e:	4b9f      	ldr	r3, [pc, #636]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	0b1b      	lsrs	r3, r3, #12
 8007274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007278:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800727a:	4b9c      	ldr	r3, [pc, #624]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	091b      	lsrs	r3, r3, #4
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007286:	4b99      	ldr	r3, [pc, #612]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	08db      	lsrs	r3, r3, #3
 800728c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	fb02 f303 	mul.w	r3, r2, r3
 8007296:	ee07 3a90 	vmov	s15, r3
 800729a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800729e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8111 	beq.w	80074cc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	f000 8083 	beq.w	80073b8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	f200 80a1 	bhi.w	80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d003      	beq.n	80072c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d056      	beq.n	8007374 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80072c6:	e099      	b.n	80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072c8:	4b88      	ldr	r3, [pc, #544]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0320 	and.w	r3, r3, #32
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d02d      	beq.n	8007330 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072d4:	4b85      	ldr	r3, [pc, #532]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	08db      	lsrs	r3, r3, #3
 80072da:	f003 0303 	and.w	r3, r3, #3
 80072de:	4a84      	ldr	r2, [pc, #528]	; (80074f0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80072e0:	fa22 f303 	lsr.w	r3, r2, r3
 80072e4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	ee07 3a90 	vmov	s15, r3
 80072ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072fe:	4b7b      	ldr	r3, [pc, #492]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007306:	ee07 3a90 	vmov	s15, r3
 800730a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800730e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007312:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800731e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800732e:	e087      	b.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	ee07 3a90 	vmov	s15, r3
 8007336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074f8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800733e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007342:	4b6a      	ldr	r3, [pc, #424]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007352:	ed97 6a03 	vldr	s12, [r7, #12]
 8007356:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800735a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800735e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800736e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007372:	e065      	b.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	ee07 3a90 	vmov	s15, r3
 800737a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007386:	4b59      	ldr	r3, [pc, #356]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800738e:	ee07 3a90 	vmov	s15, r3
 8007392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007396:	ed97 6a03 	vldr	s12, [r7, #12]
 800739a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800739e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073b6:	e043      	b.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	ee07 3a90 	vmov	s15, r3
 80073be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007500 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80073c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073ca:	4b48      	ldr	r3, [pc, #288]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d2:	ee07 3a90 	vmov	s15, r3
 80073d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073da:	ed97 6a03 	vldr	s12, [r7, #12]
 80073de:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80073e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073fa:	e021      	b.n	8007440 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800740a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740e:	4b37      	ldr	r3, [pc, #220]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007416:	ee07 3a90 	vmov	s15, r3
 800741a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007422:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074f4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800742a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800743a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800743e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007440:	4b2a      	ldr	r3, [pc, #168]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007444:	0a5b      	lsrs	r3, r3, #9
 8007446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800744a:	ee07 3a90 	vmov	s15, r3
 800744e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800745a:	edd7 6a07 	vldr	s13, [r7, #28]
 800745e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007466:	ee17 2a90 	vmov	r2, s15
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800746e:	4b1f      	ldr	r3, [pc, #124]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	0c1b      	lsrs	r3, r3, #16
 8007474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007478:	ee07 3a90 	vmov	s15, r3
 800747c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007484:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007488:	edd7 6a07 	vldr	s13, [r7, #28]
 800748c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007494:	ee17 2a90 	vmov	r2, s15
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800749c:	4b13      	ldr	r3, [pc, #76]	; (80074ec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800749e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a0:	0e1b      	lsrs	r3, r3, #24
 80074a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074c2:	ee17 2a90 	vmov	r2, s15
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80074ca:	e008      	b.n	80074de <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	609a      	str	r2, [r3, #8]
}
 80074de:	bf00      	nop
 80074e0:	3724      	adds	r7, #36	; 0x24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	58024400 	.word	0x58024400
 80074f0:	03d09000 	.word	0x03d09000
 80074f4:	46000000 	.word	0x46000000
 80074f8:	4c742400 	.word	0x4c742400
 80074fc:	4a742400 	.word	0x4a742400
 8007500:	4af42400 	.word	0x4af42400

08007504 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007504:	b480      	push	{r7}
 8007506:	b089      	sub	sp, #36	; 0x24
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800750c:	4ba1      	ldr	r3, [pc, #644]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800750e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007510:	f003 0303 	and.w	r3, r3, #3
 8007514:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007516:	4b9f      	ldr	r3, [pc, #636]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	0d1b      	lsrs	r3, r3, #20
 800751c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007520:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007522:	4b9c      	ldr	r3, [pc, #624]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	0a1b      	lsrs	r3, r3, #8
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800752e:	4b99      	ldr	r3, [pc, #612]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007532:	08db      	lsrs	r3, r3, #3
 8007534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	fb02 f303 	mul.w	r3, r2, r3
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007546:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8111 	beq.w	8007774 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	2b02      	cmp	r3, #2
 8007556:	f000 8083 	beq.w	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b02      	cmp	r3, #2
 800755e:	f200 80a1 	bhi.w	80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d056      	beq.n	800761c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800756e:	e099      	b.n	80076a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007570:	4b88      	ldr	r3, [pc, #544]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02d      	beq.n	80075d8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800757c:	4b85      	ldr	r3, [pc, #532]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	08db      	lsrs	r3, r3, #3
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	4a84      	ldr	r2, [pc, #528]	; (8007798 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007588:	fa22 f303 	lsr.w	r3, r2, r3
 800758c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	ee07 3a90 	vmov	s15, r3
 8007594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	ee07 3a90 	vmov	s15, r3
 800759e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a6:	4b7b      	ldr	r3, [pc, #492]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ba:	eddf 5a78 	vldr	s11, [pc, #480]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80075d6:	e087      	b.n	80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077a0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80075e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ea:	4b6a      	ldr	r3, [pc, #424]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800761a:	e065      	b.n	80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007626:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800762a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762e:	4b59      	ldr	r3, [pc, #356]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007636:	ee07 3a90 	vmov	s15, r3
 800763a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007642:	eddf 5a56 	vldr	s11, [pc, #344]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800765e:	e043      	b.n	80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800766e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007672:	4b48      	ldr	r3, [pc, #288]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007682:	ed97 6a03 	vldr	s12, [r7, #12]
 8007686:	eddf 5a45 	vldr	s11, [pc, #276]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800768a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800769a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076a2:	e021      	b.n	80076e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80076b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b6:	4b37      	ldr	r3, [pc, #220]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80076ca:	eddf 5a34 	vldr	s11, [pc, #208]	; 800779c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076e6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80076e8:	4b2a      	ldr	r3, [pc, #168]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ec:	0a5b      	lsrs	r3, r3, #9
 80076ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f2:	ee07 3a90 	vmov	s15, r3
 80076f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007702:	edd7 6a07 	vldr	s13, [r7, #28]
 8007706:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800770e:	ee17 2a90 	vmov	r2, s15
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007716:	4b1f      	ldr	r3, [pc, #124]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771a:	0c1b      	lsrs	r3, r3, #16
 800771c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800772c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007730:	edd7 6a07 	vldr	s13, [r7, #28]
 8007734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800773c:	ee17 2a90 	vmov	r2, s15
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007744:	4b13      	ldr	r3, [pc, #76]	; (8007794 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	0e1b      	lsrs	r3, r3, #24
 800774a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800774e:	ee07 3a90 	vmov	s15, r3
 8007752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800775a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800775e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800776a:	ee17 2a90 	vmov	r2, s15
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007772:	e008      	b.n	8007786 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	609a      	str	r2, [r3, #8]
}
 8007786:	bf00      	nop
 8007788:	3724      	adds	r7, #36	; 0x24
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	58024400 	.word	0x58024400
 8007798:	03d09000 	.word	0x03d09000
 800779c:	46000000 	.word	0x46000000
 80077a0:	4c742400 	.word	0x4c742400
 80077a4:	4a742400 	.word	0x4a742400
 80077a8:	4af42400 	.word	0x4af42400

080077ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80077ba:	4b53      	ldr	r3, [pc, #332]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d101      	bne.n	80077ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e099      	b.n	80078fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80077ca:	4b4f      	ldr	r3, [pc, #316]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a4e      	ldr	r2, [pc, #312]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077d6:	f7fb feeb 	bl	80035b0 <HAL_GetTick>
 80077da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077dc:	e008      	b.n	80077f0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80077de:	f7fb fee7 	bl	80035b0 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b02      	cmp	r3, #2
 80077ea:	d901      	bls.n	80077f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e086      	b.n	80078fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077f0:	4b45      	ldr	r3, [pc, #276]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f0      	bne.n	80077de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077fc:	4b42      	ldr	r3, [pc, #264]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80077fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007800:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	031b      	lsls	r3, r3, #12
 800780a:	493f      	ldr	r1, [pc, #252]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 800780c:	4313      	orrs	r3, r2
 800780e:	628b      	str	r3, [r1, #40]	; 0x28
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	3b01      	subs	r3, #1
 8007816:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	3b01      	subs	r3, #1
 8007820:	025b      	lsls	r3, r3, #9
 8007822:	b29b      	uxth	r3, r3
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	3b01      	subs	r3, #1
 800782c:	041b      	lsls	r3, r3, #16
 800782e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	3b01      	subs	r3, #1
 800783a:	061b      	lsls	r3, r3, #24
 800783c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007840:	4931      	ldr	r1, [pc, #196]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007842:	4313      	orrs	r3, r2
 8007844:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007846:	4b30      	ldr	r3, [pc, #192]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	492d      	ldr	r1, [pc, #180]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007854:	4313      	orrs	r3, r2
 8007856:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007858:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 800785a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785c:	f023 0220 	bic.w	r2, r3, #32
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	4928      	ldr	r1, [pc, #160]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007866:	4313      	orrs	r3, r2
 8007868:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800786a:	4b27      	ldr	r3, [pc, #156]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	4a26      	ldr	r2, [pc, #152]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007870:	f023 0310 	bic.w	r3, r3, #16
 8007874:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007876:	4b24      	ldr	r3, [pc, #144]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800787a:	4b24      	ldr	r3, [pc, #144]	; (800790c <RCCEx_PLL2_Config+0x160>)
 800787c:	4013      	ands	r3, r2
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	69d2      	ldr	r2, [r2, #28]
 8007882:	00d2      	lsls	r2, r2, #3
 8007884:	4920      	ldr	r1, [pc, #128]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007886:	4313      	orrs	r3, r2
 8007888:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800788a:	4b1f      	ldr	r3, [pc, #124]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	4a1e      	ldr	r2, [pc, #120]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 8007890:	f043 0310 	orr.w	r3, r3, #16
 8007894:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d106      	bne.n	80078aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800789c:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a19      	ldr	r2, [pc, #100]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078a8:	e00f      	b.n	80078ca <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d106      	bne.n	80078be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80078b0:	4b15      	ldr	r3, [pc, #84]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	4a14      	ldr	r2, [pc, #80]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80078bc:	e005      	b.n	80078ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	4a11      	ldr	r2, [pc, #68]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80078ca:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a0e      	ldr	r2, [pc, #56]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d6:	f7fb fe6b 	bl	80035b0 <HAL_GetTick>
 80078da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078dc:	e008      	b.n	80078f0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80078de:	f7fb fe67 	bl	80035b0 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	d901      	bls.n	80078f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e006      	b.n	80078fe <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078f0:	4b05      	ldr	r3, [pc, #20]	; (8007908 <RCCEx_PLL2_Config+0x15c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d0f0      	beq.n	80078de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	58024400 	.word	0x58024400
 800790c:	ffff0007 	.word	0xffff0007

08007910 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b084      	sub	sp, #16
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800791e:	4b53      	ldr	r3, [pc, #332]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007922:	f003 0303 	and.w	r3, r3, #3
 8007926:	2b03      	cmp	r3, #3
 8007928:	d101      	bne.n	800792e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e099      	b.n	8007a62 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800792e:	4b4f      	ldr	r3, [pc, #316]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a4e      	ldr	r2, [pc, #312]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793a:	f7fb fe39 	bl	80035b0 <HAL_GetTick>
 800793e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007940:	e008      	b.n	8007954 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007942:	f7fb fe35 	bl	80035b0 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b02      	cmp	r3, #2
 800794e:	d901      	bls.n	8007954 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e086      	b.n	8007a62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007954:	4b45      	ldr	r3, [pc, #276]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1f0      	bne.n	8007942 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007960:	4b42      	ldr	r3, [pc, #264]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	051b      	lsls	r3, r3, #20
 800796e:	493f      	ldr	r1, [pc, #252]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007970:	4313      	orrs	r3, r2
 8007972:	628b      	str	r3, [r1, #40]	; 0x28
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	3b01      	subs	r3, #1
 800797a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	3b01      	subs	r3, #1
 8007984:	025b      	lsls	r3, r3, #9
 8007986:	b29b      	uxth	r3, r3
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	3b01      	subs	r3, #1
 8007990:	041b      	lsls	r3, r3, #16
 8007992:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	3b01      	subs	r3, #1
 800799e:	061b      	lsls	r3, r3, #24
 80079a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079a4:	4931      	ldr	r1, [pc, #196]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80079aa:	4b30      	ldr	r3, [pc, #192]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	492d      	ldr	r1, [pc, #180]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80079bc:	4b2b      	ldr	r3, [pc, #172]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	4928      	ldr	r1, [pc, #160]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079ce:	4b27      	ldr	r3, [pc, #156]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	4a26      	ldr	r2, [pc, #152]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079da:	4b24      	ldr	r3, [pc, #144]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079de:	4b24      	ldr	r3, [pc, #144]	; (8007a70 <RCCEx_PLL3_Config+0x160>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	69d2      	ldr	r2, [r2, #28]
 80079e6:	00d2      	lsls	r2, r2, #3
 80079e8:	4920      	ldr	r1, [pc, #128]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079ea:	4313      	orrs	r3, r2
 80079ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079ee:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f2:	4a1e      	ldr	r2, [pc, #120]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 80079f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a04:	4a19      	ldr	r2, [pc, #100]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a0c:	e00f      	b.n	8007a2e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d106      	bne.n	8007a22 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007a14:	4b15      	ldr	r3, [pc, #84]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a18:	4a14      	ldr	r2, [pc, #80]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007a1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a20:	e005      	b.n	8007a2e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007a22:	4b12      	ldr	r3, [pc, #72]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	4a11      	ldr	r2, [pc, #68]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a2e:	4b0f      	ldr	r3, [pc, #60]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a0e      	ldr	r2, [pc, #56]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a3a:	f7fb fdb9 	bl	80035b0 <HAL_GetTick>
 8007a3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a40:	e008      	b.n	8007a54 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007a42:	f7fb fdb5 	bl	80035b0 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d901      	bls.n	8007a54 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e006      	b.n	8007a62 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <RCCEx_PLL3_Config+0x15c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d0f0      	beq.n	8007a42 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	58024400 	.word	0x58024400
 8007a70:	ffff0007 	.word	0xffff0007

08007a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e049      	b.n	8007b1a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d106      	bne.n	8007aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f841 	bl	8007b22 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	f000 f9be 	bl	8007e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b18:	2300      	movs	r3, #0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007b22:	b480      	push	{r7}
 8007b24:	b083      	sub	sp, #12
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
	...

08007b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d001      	beq.n	8007b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e021      	b.n	8007b94 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68da      	ldr	r2, [r3, #12]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f042 0201 	orr.w	r2, r2, #1
 8007b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	4b0c      	ldr	r3, [pc, #48]	; (8007ba0 <HAL_TIM_Base_Start_IT+0x68>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b06      	cmp	r3, #6
 8007b78:	d00b      	beq.n	8007b92 <HAL_TIM_Base_Start_IT+0x5a>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b80:	d007      	beq.n	8007b92 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0201 	orr.w	r2, r2, #1
 8007b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	00010007 	.word	0x00010007

08007ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d122      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d11b      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f06f 0202 	mvn.w	r2, #2
 8007bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f905 	bl	8007df6 <HAL_TIM_IC_CaptureCallback>
 8007bec:	e005      	b.n	8007bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8f7 	bl	8007de2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f908 	bl	8007e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d122      	bne.n	8007c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d11b      	bne.n	8007c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f06f 0204 	mvn.w	r2, #4
 8007c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 f8db 	bl	8007df6 <HAL_TIM_IC_CaptureCallback>
 8007c40:	e005      	b.n	8007c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 f8cd 	bl	8007de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f8de 	bl	8007e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	d122      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d11b      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f06f 0208 	mvn.w	r2, #8
 8007c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2204      	movs	r2, #4
 8007c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f8b1 	bl	8007df6 <HAL_TIM_IC_CaptureCallback>
 8007c94:	e005      	b.n	8007ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f8a3 	bl	8007de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 f8b4 	bl	8007e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b10      	cmp	r3, #16
 8007cb4:	d122      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b10      	cmp	r3, #16
 8007cc2:	d11b      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f06f 0210 	mvn.w	r2, #16
 8007ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f887 	bl	8007df6 <HAL_TIM_IC_CaptureCallback>
 8007ce8:	e005      	b.n	8007cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f879 	bl	8007de2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f88a 	bl	8007e0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d10e      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d107      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0201 	mvn.w	r2, #1
 8007d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7fb f854 	bl	8002dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	2b80      	cmp	r3, #128	; 0x80
 8007d34:	d10e      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d40:	2b80      	cmp	r3, #128	; 0x80
 8007d42:	d107      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f914 	bl	8007f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d62:	d10e      	bne.n	8007d82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6e:	2b80      	cmp	r3, #128	; 0x80
 8007d70:	d107      	bne.n	8007d82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f907 	bl	8007f90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8c:	2b40      	cmp	r3, #64	; 0x40
 8007d8e:	d10e      	bne.n	8007dae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b40      	cmp	r3, #64	; 0x40
 8007d9c:	d107      	bne.n	8007dae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f838 	bl	8007e1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	f003 0320 	and.w	r3, r3, #32
 8007db8:	2b20      	cmp	r3, #32
 8007dba:	d10e      	bne.n	8007dda <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f003 0320 	and.w	r3, r3, #32
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	d107      	bne.n	8007dda <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f06f 0220 	mvn.w	r2, #32
 8007dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 f8c7 	bl	8007f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dda:	bf00      	nop
 8007ddc:	3708      	adds	r7, #8
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007df6:	b480      	push	{r7}
 8007df8:	b083      	sub	sp, #12
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dfe:	bf00      	nop
 8007e00:	370c      	adds	r7, #12
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b083      	sub	sp, #12
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e12:	bf00      	nop
 8007e14:	370c      	adds	r7, #12
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b083      	sub	sp, #12
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e26:	bf00      	nop
 8007e28:	370c      	adds	r7, #12
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
	...

08007e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a40      	ldr	r2, [pc, #256]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d013      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e52:	d00f      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a3d      	ldr	r2, [pc, #244]	; (8007f4c <TIM_Base_SetConfig+0x118>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00b      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a3c      	ldr	r2, [pc, #240]	; (8007f50 <TIM_Base_SetConfig+0x11c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d007      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a3b      	ldr	r2, [pc, #236]	; (8007f54 <TIM_Base_SetConfig+0x120>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d003      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a3a      	ldr	r2, [pc, #232]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d108      	bne.n	8007e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2f      	ldr	r2, [pc, #188]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d01f      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e94:	d01b      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <TIM_Base_SetConfig+0x118>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d017      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a2b      	ldr	r2, [pc, #172]	; (8007f50 <TIM_Base_SetConfig+0x11c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d013      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a2a      	ldr	r2, [pc, #168]	; (8007f54 <TIM_Base_SetConfig+0x120>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00f      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a29      	ldr	r2, [pc, #164]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d00b      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a28      	ldr	r2, [pc, #160]	; (8007f5c <TIM_Base_SetConfig+0x128>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d007      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a27      	ldr	r2, [pc, #156]	; (8007f60 <TIM_Base_SetConfig+0x12c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d003      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <TIM_Base_SetConfig+0x130>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d108      	bne.n	8007ee0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a10      	ldr	r2, [pc, #64]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00f      	beq.n	8007f2c <TIM_Base_SetConfig+0xf8>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a12      	ldr	r2, [pc, #72]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00b      	beq.n	8007f2c <TIM_Base_SetConfig+0xf8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a11      	ldr	r2, [pc, #68]	; (8007f5c <TIM_Base_SetConfig+0x128>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d007      	beq.n	8007f2c <TIM_Base_SetConfig+0xf8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a10      	ldr	r2, [pc, #64]	; (8007f60 <TIM_Base_SetConfig+0x12c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_Base_SetConfig+0xf8>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a0f      	ldr	r2, [pc, #60]	; (8007f64 <TIM_Base_SetConfig+0x130>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d103      	bne.n	8007f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	615a      	str	r2, [r3, #20]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40014400 	.word	0x40014400
 8007f64:	40014800 	.word	0x40014800

08007f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e042      	b.n	800803c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d106      	bne.n	8007fce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f7fb f801 	bl	8002fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2224      	movs	r2, #36	; 0x24
 8007fd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0201 	bic.w	r2, r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f82c 	bl	8008044 <UART_SetConfig>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d101      	bne.n	8007ff6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e022      	b.n	800803c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fd86 	bl	8008b10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	685a      	ldr	r2, [r3, #4]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0201 	orr.w	r2, r2, #1
 8008032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fe0d 	bl	8008c54 <UART_CheckIdleState>
 800803a:	4603      	mov	r3, r0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008044:	b5b0      	push	{r4, r5, r7, lr}
 8008046:	b08e      	sub	sp, #56	; 0x38
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	689a      	ldr	r2, [r3, #8]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	431a      	orrs	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	431a      	orrs	r2, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69db      	ldr	r3, [r3, #28]
 8008066:	4313      	orrs	r3, r2
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800806e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008070:	4313      	orrs	r3, r2
 8008072:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	4bc0      	ldr	r3, [pc, #768]	; (800837c <UART_SetConfig+0x338>)
 800807c:	4013      	ands	r3, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6812      	ldr	r2, [r2, #0]
 8008082:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008084:	430b      	orrs	r3, r1
 8008086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4ab5      	ldr	r2, [pc, #724]	; (8008380 <UART_SetConfig+0x33c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d004      	beq.n	80080b8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080b4:	4313      	orrs	r3, r2
 80080b6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	689a      	ldr	r2, [r3, #8]
 80080be:	4bb1      	ldr	r3, [pc, #708]	; (8008384 <UART_SetConfig+0x340>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	6812      	ldr	r2, [r2, #0]
 80080c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80080c8:	430b      	orrs	r3, r1
 80080ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d2:	f023 010f 	bic.w	r1, r3, #15
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	430a      	orrs	r2, r1
 80080e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4aa8      	ldr	r2, [pc, #672]	; (8008388 <UART_SetConfig+0x344>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d177      	bne.n	80081dc <UART_SetConfig+0x198>
 80080ec:	4ba7      	ldr	r3, [pc, #668]	; (800838c <UART_SetConfig+0x348>)
 80080ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080f4:	2b28      	cmp	r3, #40	; 0x28
 80080f6:	d86d      	bhi.n	80081d4 <UART_SetConfig+0x190>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <UART_SetConfig+0xbc>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	080081a5 	.word	0x080081a5
 8008104:	080081d5 	.word	0x080081d5
 8008108:	080081d5 	.word	0x080081d5
 800810c:	080081d5 	.word	0x080081d5
 8008110:	080081d5 	.word	0x080081d5
 8008114:	080081d5 	.word	0x080081d5
 8008118:	080081d5 	.word	0x080081d5
 800811c:	080081d5 	.word	0x080081d5
 8008120:	080081ad 	.word	0x080081ad
 8008124:	080081d5 	.word	0x080081d5
 8008128:	080081d5 	.word	0x080081d5
 800812c:	080081d5 	.word	0x080081d5
 8008130:	080081d5 	.word	0x080081d5
 8008134:	080081d5 	.word	0x080081d5
 8008138:	080081d5 	.word	0x080081d5
 800813c:	080081d5 	.word	0x080081d5
 8008140:	080081b5 	.word	0x080081b5
 8008144:	080081d5 	.word	0x080081d5
 8008148:	080081d5 	.word	0x080081d5
 800814c:	080081d5 	.word	0x080081d5
 8008150:	080081d5 	.word	0x080081d5
 8008154:	080081d5 	.word	0x080081d5
 8008158:	080081d5 	.word	0x080081d5
 800815c:	080081d5 	.word	0x080081d5
 8008160:	080081bd 	.word	0x080081bd
 8008164:	080081d5 	.word	0x080081d5
 8008168:	080081d5 	.word	0x080081d5
 800816c:	080081d5 	.word	0x080081d5
 8008170:	080081d5 	.word	0x080081d5
 8008174:	080081d5 	.word	0x080081d5
 8008178:	080081d5 	.word	0x080081d5
 800817c:	080081d5 	.word	0x080081d5
 8008180:	080081c5 	.word	0x080081c5
 8008184:	080081d5 	.word	0x080081d5
 8008188:	080081d5 	.word	0x080081d5
 800818c:	080081d5 	.word	0x080081d5
 8008190:	080081d5 	.word	0x080081d5
 8008194:	080081d5 	.word	0x080081d5
 8008198:	080081d5 	.word	0x080081d5
 800819c:	080081d5 	.word	0x080081d5
 80081a0:	080081cd 	.word	0x080081cd
 80081a4:	2301      	movs	r3, #1
 80081a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081aa:	e222      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80081ac:	2304      	movs	r3, #4
 80081ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081b2:	e21e      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80081b4:	2308      	movs	r3, #8
 80081b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ba:	e21a      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80081bc:	2310      	movs	r3, #16
 80081be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081c2:	e216      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80081c4:	2320      	movs	r3, #32
 80081c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081ca:	e212      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80081cc:	2340      	movs	r3, #64	; 0x40
 80081ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d2:	e20e      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80081d4:	2380      	movs	r3, #128	; 0x80
 80081d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081da:	e20a      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a6b      	ldr	r2, [pc, #428]	; (8008390 <UART_SetConfig+0x34c>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d130      	bne.n	8008248 <UART_SetConfig+0x204>
 80081e6:	4b69      	ldr	r3, [pc, #420]	; (800838c <UART_SetConfig+0x348>)
 80081e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ea:	f003 0307 	and.w	r3, r3, #7
 80081ee:	2b05      	cmp	r3, #5
 80081f0:	d826      	bhi.n	8008240 <UART_SetConfig+0x1fc>
 80081f2:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <UART_SetConfig+0x1b4>)
 80081f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f8:	08008211 	.word	0x08008211
 80081fc:	08008219 	.word	0x08008219
 8008200:	08008221 	.word	0x08008221
 8008204:	08008229 	.word	0x08008229
 8008208:	08008231 	.word	0x08008231
 800820c:	08008239 	.word	0x08008239
 8008210:	2300      	movs	r3, #0
 8008212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008216:	e1ec      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008218:	2304      	movs	r3, #4
 800821a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800821e:	e1e8      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008220:	2308      	movs	r3, #8
 8008222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008226:	e1e4      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008228:	2310      	movs	r3, #16
 800822a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800822e:	e1e0      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008230:	2320      	movs	r3, #32
 8008232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008236:	e1dc      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008238:	2340      	movs	r3, #64	; 0x40
 800823a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800823e:	e1d8      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008240:	2380      	movs	r3, #128	; 0x80
 8008242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008246:	e1d4      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a51      	ldr	r2, [pc, #324]	; (8008394 <UART_SetConfig+0x350>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d130      	bne.n	80082b4 <UART_SetConfig+0x270>
 8008252:	4b4e      	ldr	r3, [pc, #312]	; (800838c <UART_SetConfig+0x348>)
 8008254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008256:	f003 0307 	and.w	r3, r3, #7
 800825a:	2b05      	cmp	r3, #5
 800825c:	d826      	bhi.n	80082ac <UART_SetConfig+0x268>
 800825e:	a201      	add	r2, pc, #4	; (adr r2, 8008264 <UART_SetConfig+0x220>)
 8008260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008264:	0800827d 	.word	0x0800827d
 8008268:	08008285 	.word	0x08008285
 800826c:	0800828d 	.word	0x0800828d
 8008270:	08008295 	.word	0x08008295
 8008274:	0800829d 	.word	0x0800829d
 8008278:	080082a5 	.word	0x080082a5
 800827c:	2300      	movs	r3, #0
 800827e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008282:	e1b6      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008284:	2304      	movs	r3, #4
 8008286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800828a:	e1b2      	b.n	80085f2 <UART_SetConfig+0x5ae>
 800828c:	2308      	movs	r3, #8
 800828e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008292:	e1ae      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008294:	2310      	movs	r3, #16
 8008296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800829a:	e1aa      	b.n	80085f2 <UART_SetConfig+0x5ae>
 800829c:	2320      	movs	r3, #32
 800829e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082a2:	e1a6      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80082a4:	2340      	movs	r3, #64	; 0x40
 80082a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082aa:	e1a2      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80082ac:	2380      	movs	r3, #128	; 0x80
 80082ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082b2:	e19e      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a37      	ldr	r2, [pc, #220]	; (8008398 <UART_SetConfig+0x354>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d130      	bne.n	8008320 <UART_SetConfig+0x2dc>
 80082be:	4b33      	ldr	r3, [pc, #204]	; (800838c <UART_SetConfig+0x348>)
 80082c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c2:	f003 0307 	and.w	r3, r3, #7
 80082c6:	2b05      	cmp	r3, #5
 80082c8:	d826      	bhi.n	8008318 <UART_SetConfig+0x2d4>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <UART_SetConfig+0x28c>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	080082e9 	.word	0x080082e9
 80082d4:	080082f1 	.word	0x080082f1
 80082d8:	080082f9 	.word	0x080082f9
 80082dc:	08008301 	.word	0x08008301
 80082e0:	08008309 	.word	0x08008309
 80082e4:	08008311 	.word	0x08008311
 80082e8:	2300      	movs	r3, #0
 80082ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082ee:	e180      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80082f0:	2304      	movs	r3, #4
 80082f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082f6:	e17c      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80082f8:	2308      	movs	r3, #8
 80082fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80082fe:	e178      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008300:	2310      	movs	r3, #16
 8008302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008306:	e174      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008308:	2320      	movs	r3, #32
 800830a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800830e:	e170      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008310:	2340      	movs	r3, #64	; 0x40
 8008312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008316:	e16c      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008318:	2380      	movs	r3, #128	; 0x80
 800831a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800831e:	e168      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a1d      	ldr	r2, [pc, #116]	; (800839c <UART_SetConfig+0x358>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d142      	bne.n	80083b0 <UART_SetConfig+0x36c>
 800832a:	4b18      	ldr	r3, [pc, #96]	; (800838c <UART_SetConfig+0x348>)
 800832c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	2b05      	cmp	r3, #5
 8008334:	d838      	bhi.n	80083a8 <UART_SetConfig+0x364>
 8008336:	a201      	add	r2, pc, #4	; (adr r2, 800833c <UART_SetConfig+0x2f8>)
 8008338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833c:	08008355 	.word	0x08008355
 8008340:	0800835d 	.word	0x0800835d
 8008344:	08008365 	.word	0x08008365
 8008348:	0800836d 	.word	0x0800836d
 800834c:	08008375 	.word	0x08008375
 8008350:	080083a1 	.word	0x080083a1
 8008354:	2300      	movs	r3, #0
 8008356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800835a:	e14a      	b.n	80085f2 <UART_SetConfig+0x5ae>
 800835c:	2304      	movs	r3, #4
 800835e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008362:	e146      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008364:	2308      	movs	r3, #8
 8008366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800836a:	e142      	b.n	80085f2 <UART_SetConfig+0x5ae>
 800836c:	2310      	movs	r3, #16
 800836e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008372:	e13e      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008374:	2320      	movs	r3, #32
 8008376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800837a:	e13a      	b.n	80085f2 <UART_SetConfig+0x5ae>
 800837c:	cfff69f3 	.word	0xcfff69f3
 8008380:	58000c00 	.word	0x58000c00
 8008384:	11fff4ff 	.word	0x11fff4ff
 8008388:	40011000 	.word	0x40011000
 800838c:	58024400 	.word	0x58024400
 8008390:	40004400 	.word	0x40004400
 8008394:	40004800 	.word	0x40004800
 8008398:	40004c00 	.word	0x40004c00
 800839c:	40005000 	.word	0x40005000
 80083a0:	2340      	movs	r3, #64	; 0x40
 80083a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083a6:	e124      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80083a8:	2380      	movs	r3, #128	; 0x80
 80083aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80083ae:	e120      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4acc      	ldr	r2, [pc, #816]	; (80086e8 <UART_SetConfig+0x6a4>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d176      	bne.n	80084a8 <UART_SetConfig+0x464>
 80083ba:	4bcc      	ldr	r3, [pc, #816]	; (80086ec <UART_SetConfig+0x6a8>)
 80083bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083c2:	2b28      	cmp	r3, #40	; 0x28
 80083c4:	d86c      	bhi.n	80084a0 <UART_SetConfig+0x45c>
 80083c6:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <UART_SetConfig+0x388>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	08008471 	.word	0x08008471
 80083d0:	080084a1 	.word	0x080084a1
 80083d4:	080084a1 	.word	0x080084a1
 80083d8:	080084a1 	.word	0x080084a1
 80083dc:	080084a1 	.word	0x080084a1
 80083e0:	080084a1 	.word	0x080084a1
 80083e4:	080084a1 	.word	0x080084a1
 80083e8:	080084a1 	.word	0x080084a1
 80083ec:	08008479 	.word	0x08008479
 80083f0:	080084a1 	.word	0x080084a1
 80083f4:	080084a1 	.word	0x080084a1
 80083f8:	080084a1 	.word	0x080084a1
 80083fc:	080084a1 	.word	0x080084a1
 8008400:	080084a1 	.word	0x080084a1
 8008404:	080084a1 	.word	0x080084a1
 8008408:	080084a1 	.word	0x080084a1
 800840c:	08008481 	.word	0x08008481
 8008410:	080084a1 	.word	0x080084a1
 8008414:	080084a1 	.word	0x080084a1
 8008418:	080084a1 	.word	0x080084a1
 800841c:	080084a1 	.word	0x080084a1
 8008420:	080084a1 	.word	0x080084a1
 8008424:	080084a1 	.word	0x080084a1
 8008428:	080084a1 	.word	0x080084a1
 800842c:	08008489 	.word	0x08008489
 8008430:	080084a1 	.word	0x080084a1
 8008434:	080084a1 	.word	0x080084a1
 8008438:	080084a1 	.word	0x080084a1
 800843c:	080084a1 	.word	0x080084a1
 8008440:	080084a1 	.word	0x080084a1
 8008444:	080084a1 	.word	0x080084a1
 8008448:	080084a1 	.word	0x080084a1
 800844c:	08008491 	.word	0x08008491
 8008450:	080084a1 	.word	0x080084a1
 8008454:	080084a1 	.word	0x080084a1
 8008458:	080084a1 	.word	0x080084a1
 800845c:	080084a1 	.word	0x080084a1
 8008460:	080084a1 	.word	0x080084a1
 8008464:	080084a1 	.word	0x080084a1
 8008468:	080084a1 	.word	0x080084a1
 800846c:	08008499 	.word	0x08008499
 8008470:	2301      	movs	r3, #1
 8008472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008476:	e0bc      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008478:	2304      	movs	r3, #4
 800847a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800847e:	e0b8      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008480:	2308      	movs	r3, #8
 8008482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008486:	e0b4      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008488:	2310      	movs	r3, #16
 800848a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800848e:	e0b0      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008490:	2320      	movs	r3, #32
 8008492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008496:	e0ac      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008498:	2340      	movs	r3, #64	; 0x40
 800849a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800849e:	e0a8      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80084a0:	2380      	movs	r3, #128	; 0x80
 80084a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084a6:	e0a4      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a90      	ldr	r2, [pc, #576]	; (80086f0 <UART_SetConfig+0x6ac>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d130      	bne.n	8008514 <UART_SetConfig+0x4d0>
 80084b2:	4b8e      	ldr	r3, [pc, #568]	; (80086ec <UART_SetConfig+0x6a8>)
 80084b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	d826      	bhi.n	800850c <UART_SetConfig+0x4c8>
 80084be:	a201      	add	r2, pc, #4	; (adr r2, 80084c4 <UART_SetConfig+0x480>)
 80084c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c4:	080084dd 	.word	0x080084dd
 80084c8:	080084e5 	.word	0x080084e5
 80084cc:	080084ed 	.word	0x080084ed
 80084d0:	080084f5 	.word	0x080084f5
 80084d4:	080084fd 	.word	0x080084fd
 80084d8:	08008505 	.word	0x08008505
 80084dc:	2300      	movs	r3, #0
 80084de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084e2:	e086      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80084e4:	2304      	movs	r3, #4
 80084e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084ea:	e082      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80084ec:	2308      	movs	r3, #8
 80084ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084f2:	e07e      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80084f4:	2310      	movs	r3, #16
 80084f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80084fa:	e07a      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80084fc:	2320      	movs	r3, #32
 80084fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008502:	e076      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008504:	2340      	movs	r3, #64	; 0x40
 8008506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800850a:	e072      	b.n	80085f2 <UART_SetConfig+0x5ae>
 800850c:	2380      	movs	r3, #128	; 0x80
 800850e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008512:	e06e      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a76      	ldr	r2, [pc, #472]	; (80086f4 <UART_SetConfig+0x6b0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d130      	bne.n	8008580 <UART_SetConfig+0x53c>
 800851e:	4b73      	ldr	r3, [pc, #460]	; (80086ec <UART_SetConfig+0x6a8>)
 8008520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	2b05      	cmp	r3, #5
 8008528:	d826      	bhi.n	8008578 <UART_SetConfig+0x534>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <UART_SetConfig+0x4ec>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	08008549 	.word	0x08008549
 8008534:	08008551 	.word	0x08008551
 8008538:	08008559 	.word	0x08008559
 800853c:	08008561 	.word	0x08008561
 8008540:	08008569 	.word	0x08008569
 8008544:	08008571 	.word	0x08008571
 8008548:	2300      	movs	r3, #0
 800854a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800854e:	e050      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008550:	2304      	movs	r3, #4
 8008552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008556:	e04c      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008558:	2308      	movs	r3, #8
 800855a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800855e:	e048      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008560:	2310      	movs	r3, #16
 8008562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008566:	e044      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008568:	2320      	movs	r3, #32
 800856a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800856e:	e040      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008570:	2340      	movs	r3, #64	; 0x40
 8008572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008576:	e03c      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008578:	2380      	movs	r3, #128	; 0x80
 800857a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800857e:	e038      	b.n	80085f2 <UART_SetConfig+0x5ae>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a5c      	ldr	r2, [pc, #368]	; (80086f8 <UART_SetConfig+0x6b4>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d130      	bne.n	80085ec <UART_SetConfig+0x5a8>
 800858a:	4b58      	ldr	r3, [pc, #352]	; (80086ec <UART_SetConfig+0x6a8>)
 800858c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800858e:	f003 0307 	and.w	r3, r3, #7
 8008592:	2b05      	cmp	r3, #5
 8008594:	d826      	bhi.n	80085e4 <UART_SetConfig+0x5a0>
 8008596:	a201      	add	r2, pc, #4	; (adr r2, 800859c <UART_SetConfig+0x558>)
 8008598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859c:	080085b5 	.word	0x080085b5
 80085a0:	080085bd 	.word	0x080085bd
 80085a4:	080085c5 	.word	0x080085c5
 80085a8:	080085cd 	.word	0x080085cd
 80085ac:	080085d5 	.word	0x080085d5
 80085b0:	080085dd 	.word	0x080085dd
 80085b4:	2302      	movs	r3, #2
 80085b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ba:	e01a      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80085bc:	2304      	movs	r3, #4
 80085be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085c2:	e016      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80085c4:	2308      	movs	r3, #8
 80085c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ca:	e012      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80085cc:	2310      	movs	r3, #16
 80085ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085d2:	e00e      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80085d4:	2320      	movs	r3, #32
 80085d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085da:	e00a      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80085dc:	2340      	movs	r3, #64	; 0x40
 80085de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085e2:	e006      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80085e4:	2380      	movs	r3, #128	; 0x80
 80085e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80085ea:	e002      	b.n	80085f2 <UART_SetConfig+0x5ae>
 80085ec:	2380      	movs	r3, #128	; 0x80
 80085ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a40      	ldr	r2, [pc, #256]	; (80086f8 <UART_SetConfig+0x6b4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	f040 80ef 	bne.w	80087dc <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008602:	2b20      	cmp	r3, #32
 8008604:	dc46      	bgt.n	8008694 <UART_SetConfig+0x650>
 8008606:	2b02      	cmp	r3, #2
 8008608:	f2c0 8081 	blt.w	800870e <UART_SetConfig+0x6ca>
 800860c:	3b02      	subs	r3, #2
 800860e:	2b1e      	cmp	r3, #30
 8008610:	d87d      	bhi.n	800870e <UART_SetConfig+0x6ca>
 8008612:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <UART_SetConfig+0x5d4>)
 8008614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008618:	0800869b 	.word	0x0800869b
 800861c:	0800870f 	.word	0x0800870f
 8008620:	080086a3 	.word	0x080086a3
 8008624:	0800870f 	.word	0x0800870f
 8008628:	0800870f 	.word	0x0800870f
 800862c:	0800870f 	.word	0x0800870f
 8008630:	080086b3 	.word	0x080086b3
 8008634:	0800870f 	.word	0x0800870f
 8008638:	0800870f 	.word	0x0800870f
 800863c:	0800870f 	.word	0x0800870f
 8008640:	0800870f 	.word	0x0800870f
 8008644:	0800870f 	.word	0x0800870f
 8008648:	0800870f 	.word	0x0800870f
 800864c:	0800870f 	.word	0x0800870f
 8008650:	080086c3 	.word	0x080086c3
 8008654:	0800870f 	.word	0x0800870f
 8008658:	0800870f 	.word	0x0800870f
 800865c:	0800870f 	.word	0x0800870f
 8008660:	0800870f 	.word	0x0800870f
 8008664:	0800870f 	.word	0x0800870f
 8008668:	0800870f 	.word	0x0800870f
 800866c:	0800870f 	.word	0x0800870f
 8008670:	0800870f 	.word	0x0800870f
 8008674:	0800870f 	.word	0x0800870f
 8008678:	0800870f 	.word	0x0800870f
 800867c:	0800870f 	.word	0x0800870f
 8008680:	0800870f 	.word	0x0800870f
 8008684:	0800870f 	.word	0x0800870f
 8008688:	0800870f 	.word	0x0800870f
 800868c:	0800870f 	.word	0x0800870f
 8008690:	08008701 	.word	0x08008701
 8008694:	2b40      	cmp	r3, #64	; 0x40
 8008696:	d036      	beq.n	8008706 <UART_SetConfig+0x6c2>
 8008698:	e039      	b.n	800870e <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800869a:	f7fe fdc9 	bl	8007230 <HAL_RCCEx_GetD3PCLK1Freq>
 800869e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80086a0:	e03b      	b.n	800871a <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086a2:	f107 0314 	add.w	r3, r7, #20
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fe fdd8 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086b0:	e033      	b.n	800871a <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086b2:	f107 0308 	add.w	r3, r7, #8
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe ff24 	bl	8007504 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086c0:	e02b      	b.n	800871a <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086c2:	4b0a      	ldr	r3, [pc, #40]	; (80086ec <UART_SetConfig+0x6a8>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0320 	and.w	r3, r3, #32
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d009      	beq.n	80086e2 <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80086ce:	4b07      	ldr	r3, [pc, #28]	; (80086ec <UART_SetConfig+0x6a8>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	08db      	lsrs	r3, r3, #3
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	4a08      	ldr	r2, [pc, #32]	; (80086fc <UART_SetConfig+0x6b8>)
 80086da:	fa22 f303 	lsr.w	r3, r2, r3
 80086de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086e0:	e01b      	b.n	800871a <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 80086e2:	4b06      	ldr	r3, [pc, #24]	; (80086fc <UART_SetConfig+0x6b8>)
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80086e6:	e018      	b.n	800871a <UART_SetConfig+0x6d6>
 80086e8:	40011400 	.word	0x40011400
 80086ec:	58024400 	.word	0x58024400
 80086f0:	40007800 	.word	0x40007800
 80086f4:	40007c00 	.word	0x40007c00
 80086f8:	58000c00 	.word	0x58000c00
 80086fc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008700:	4bc4      	ldr	r3, [pc, #784]	; (8008a14 <UART_SetConfig+0x9d0>)
 8008702:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008704:	e009      	b.n	800871a <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800870a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800870c:	e005      	b.n	800871a <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008718:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 81da 	beq.w	8008ad6 <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008726:	4abc      	ldr	r2, [pc, #752]	; (8008a18 <UART_SetConfig+0x9d4>)
 8008728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800872c:	461a      	mov	r2, r3
 800872e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008730:	fbb3 f3f2 	udiv	r3, r3, r2
 8008734:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	4613      	mov	r3, r2
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	4413      	add	r3, r2
 8008740:	6a3a      	ldr	r2, [r7, #32]
 8008742:	429a      	cmp	r2, r3
 8008744:	d305      	bcc.n	8008752 <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800874c:	6a3a      	ldr	r2, [r7, #32]
 800874e:	429a      	cmp	r2, r3
 8008750:	d903      	bls.n	800875a <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008758:	e1bd      	b.n	8008ad6 <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800875a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800875c:	4618      	mov	r0, r3
 800875e:	f04f 0100 	mov.w	r1, #0
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	4aac      	ldr	r2, [pc, #688]	; (8008a18 <UART_SetConfig+0x9d4>)
 8008768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800876c:	b29a      	uxth	r2, r3
 800876e:	f04f 0300 	mov.w	r3, #0
 8008772:	f7f9 fe7f 	bl	8002474 <__aeabi_uldivmod>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4610      	mov	r0, r2
 800877c:	4619      	mov	r1, r3
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	f04f 0300 	mov.w	r3, #0
 8008786:	020b      	lsls	r3, r1, #8
 8008788:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800878c:	0202      	lsls	r2, r0, #8
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	6849      	ldr	r1, [r1, #4]
 8008792:	0849      	lsrs	r1, r1, #1
 8008794:	4608      	mov	r0, r1
 8008796:	f04f 0100 	mov.w	r1, #0
 800879a:	1814      	adds	r4, r2, r0
 800879c:	eb43 0501 	adc.w	r5, r3, r1
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	461a      	mov	r2, r3
 80087a6:	f04f 0300 	mov.w	r3, #0
 80087aa:	4620      	mov	r0, r4
 80087ac:	4629      	mov	r1, r5
 80087ae:	f7f9 fe61 	bl	8002474 <__aeabi_uldivmod>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	4613      	mov	r3, r2
 80087b8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087c0:	d308      	bcc.n	80087d4 <UART_SetConfig+0x790>
 80087c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087c8:	d204      	bcs.n	80087d4 <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087d0:	60da      	str	r2, [r3, #12]
 80087d2:	e180      	b.n	8008ad6 <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80087da:	e17c      	b.n	8008ad6 <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087e4:	f040 80bf 	bne.w	8008966 <UART_SetConfig+0x922>
  {
    switch (clocksource)
 80087e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80087ec:	2b20      	cmp	r3, #32
 80087ee:	dc49      	bgt.n	8008884 <UART_SetConfig+0x840>
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	db7c      	blt.n	80088ee <UART_SetConfig+0x8aa>
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	d87a      	bhi.n	80088ee <UART_SetConfig+0x8aa>
 80087f8:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <UART_SetConfig+0x7bc>)
 80087fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fe:	bf00      	nop
 8008800:	0800888b 	.word	0x0800888b
 8008804:	08008893 	.word	0x08008893
 8008808:	080088ef 	.word	0x080088ef
 800880c:	080088ef 	.word	0x080088ef
 8008810:	0800889b 	.word	0x0800889b
 8008814:	080088ef 	.word	0x080088ef
 8008818:	080088ef 	.word	0x080088ef
 800881c:	080088ef 	.word	0x080088ef
 8008820:	080088ab 	.word	0x080088ab
 8008824:	080088ef 	.word	0x080088ef
 8008828:	080088ef 	.word	0x080088ef
 800882c:	080088ef 	.word	0x080088ef
 8008830:	080088ef 	.word	0x080088ef
 8008834:	080088ef 	.word	0x080088ef
 8008838:	080088ef 	.word	0x080088ef
 800883c:	080088ef 	.word	0x080088ef
 8008840:	080088bb 	.word	0x080088bb
 8008844:	080088ef 	.word	0x080088ef
 8008848:	080088ef 	.word	0x080088ef
 800884c:	080088ef 	.word	0x080088ef
 8008850:	080088ef 	.word	0x080088ef
 8008854:	080088ef 	.word	0x080088ef
 8008858:	080088ef 	.word	0x080088ef
 800885c:	080088ef 	.word	0x080088ef
 8008860:	080088ef 	.word	0x080088ef
 8008864:	080088ef 	.word	0x080088ef
 8008868:	080088ef 	.word	0x080088ef
 800886c:	080088ef 	.word	0x080088ef
 8008870:	080088ef 	.word	0x080088ef
 8008874:	080088ef 	.word	0x080088ef
 8008878:	080088ef 	.word	0x080088ef
 800887c:	080088ef 	.word	0x080088ef
 8008880:	080088e1 	.word	0x080088e1
 8008884:	2b40      	cmp	r3, #64	; 0x40
 8008886:	d02e      	beq.n	80088e6 <UART_SetConfig+0x8a2>
 8008888:	e031      	b.n	80088ee <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800888a:	f7fd fd33 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 800888e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008890:	e033      	b.n	80088fa <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008892:	f7fd fd45 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 8008896:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008898:	e02f      	b.n	80088fa <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800889a:	f107 0314 	add.w	r3, r7, #20
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fe fcdc 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088a8:	e027      	b.n	80088fa <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088aa:	f107 0308 	add.w	r3, r7, #8
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fe28 	bl	8007504 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088b8:	e01f      	b.n	80088fa <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ba:	4b58      	ldr	r3, [pc, #352]	; (8008a1c <UART_SetConfig+0x9d8>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088c6:	4b55      	ldr	r3, [pc, #340]	; (8008a1c <UART_SetConfig+0x9d8>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	08db      	lsrs	r3, r3, #3
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	4a53      	ldr	r2, [pc, #332]	; (8008a20 <UART_SetConfig+0x9dc>)
 80088d2:	fa22 f303 	lsr.w	r3, r2, r3
 80088d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088d8:	e00f      	b.n	80088fa <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 80088da:	4b51      	ldr	r3, [pc, #324]	; (8008a20 <UART_SetConfig+0x9dc>)
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088de:	e00c      	b.n	80088fa <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088e0:	4b4c      	ldr	r3, [pc, #304]	; (8008a14 <UART_SetConfig+0x9d0>)
 80088e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088e4:	e009      	b.n	80088fa <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80088ec:	e005      	b.n	80088fa <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 80088ee:	2300      	movs	r3, #0
 80088f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80088f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 80ea 	beq.w	8008ad6 <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	4a44      	ldr	r2, [pc, #272]	; (8008a18 <UART_SetConfig+0x9d4>)
 8008908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800890c:	461a      	mov	r2, r3
 800890e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008910:	fbb3 f3f2 	udiv	r3, r3, r2
 8008914:	005a      	lsls	r2, r3, #1
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	085b      	lsrs	r3, r3, #1
 800891c:	441a      	add	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	fbb2 f3f3 	udiv	r3, r2, r3
 8008926:	b29b      	uxth	r3, r3
 8008928:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800892a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892c:	2b0f      	cmp	r3, #15
 800892e:	d916      	bls.n	800895e <UART_SetConfig+0x91a>
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008936:	d212      	bcs.n	800895e <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	b29b      	uxth	r3, r3
 800893c:	f023 030f 	bic.w	r3, r3, #15
 8008940:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008944:	085b      	lsrs	r3, r3, #1
 8008946:	b29b      	uxth	r3, r3
 8008948:	f003 0307 	and.w	r3, r3, #7
 800894c:	b29a      	uxth	r2, r3
 800894e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008950:	4313      	orrs	r3, r2
 8008952:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800895a:	60da      	str	r2, [r3, #12]
 800895c:	e0bb      	b.n	8008ad6 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008964:	e0b7      	b.n	8008ad6 <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008966:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800896a:	2b20      	cmp	r3, #32
 800896c:	dc4a      	bgt.n	8008a04 <UART_SetConfig+0x9c0>
 800896e:	2b00      	cmp	r3, #0
 8008970:	f2c0 8086 	blt.w	8008a80 <UART_SetConfig+0xa3c>
 8008974:	2b20      	cmp	r3, #32
 8008976:	f200 8083 	bhi.w	8008a80 <UART_SetConfig+0xa3c>
 800897a:	a201      	add	r2, pc, #4	; (adr r2, 8008980 <UART_SetConfig+0x93c>)
 800897c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008980:	08008a0b 	.word	0x08008a0b
 8008984:	08008a25 	.word	0x08008a25
 8008988:	08008a81 	.word	0x08008a81
 800898c:	08008a81 	.word	0x08008a81
 8008990:	08008a2d 	.word	0x08008a2d
 8008994:	08008a81 	.word	0x08008a81
 8008998:	08008a81 	.word	0x08008a81
 800899c:	08008a81 	.word	0x08008a81
 80089a0:	08008a3d 	.word	0x08008a3d
 80089a4:	08008a81 	.word	0x08008a81
 80089a8:	08008a81 	.word	0x08008a81
 80089ac:	08008a81 	.word	0x08008a81
 80089b0:	08008a81 	.word	0x08008a81
 80089b4:	08008a81 	.word	0x08008a81
 80089b8:	08008a81 	.word	0x08008a81
 80089bc:	08008a81 	.word	0x08008a81
 80089c0:	08008a4d 	.word	0x08008a4d
 80089c4:	08008a81 	.word	0x08008a81
 80089c8:	08008a81 	.word	0x08008a81
 80089cc:	08008a81 	.word	0x08008a81
 80089d0:	08008a81 	.word	0x08008a81
 80089d4:	08008a81 	.word	0x08008a81
 80089d8:	08008a81 	.word	0x08008a81
 80089dc:	08008a81 	.word	0x08008a81
 80089e0:	08008a81 	.word	0x08008a81
 80089e4:	08008a81 	.word	0x08008a81
 80089e8:	08008a81 	.word	0x08008a81
 80089ec:	08008a81 	.word	0x08008a81
 80089f0:	08008a81 	.word	0x08008a81
 80089f4:	08008a81 	.word	0x08008a81
 80089f8:	08008a81 	.word	0x08008a81
 80089fc:	08008a81 	.word	0x08008a81
 8008a00:	08008a73 	.word	0x08008a73
 8008a04:	2b40      	cmp	r3, #64	; 0x40
 8008a06:	d037      	beq.n	8008a78 <UART_SetConfig+0xa34>
 8008a08:	e03a      	b.n	8008a80 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a0a:	f7fd fc73 	bl	80062f4 <HAL_RCC_GetPCLK1Freq>
 8008a0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a10:	e03c      	b.n	8008a8c <UART_SetConfig+0xa48>
 8008a12:	bf00      	nop
 8008a14:	003d0900 	.word	0x003d0900
 8008a18:	08009808 	.word	0x08009808
 8008a1c:	58024400 	.word	0x58024400
 8008a20:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a24:	f7fd fc7c 	bl	8006320 <HAL_RCC_GetPCLK2Freq>
 8008a28:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8008a2a:	e02f      	b.n	8008a8c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a2c:	f107 0314 	add.w	r3, r7, #20
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fc13 	bl	800725c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a3a:	e027      	b.n	8008a8c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a3c:	f107 0308 	add.w	r3, r7, #8
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe fd5f 	bl	8007504 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a4a:	e01f      	b.n	8008a8c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a4c:	4b2c      	ldr	r3, [pc, #176]	; (8008b00 <UART_SetConfig+0xabc>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0320 	and.w	r3, r3, #32
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d009      	beq.n	8008a6c <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a58:	4b29      	ldr	r3, [pc, #164]	; (8008b00 <UART_SetConfig+0xabc>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	08db      	lsrs	r3, r3, #3
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	4a28      	ldr	r2, [pc, #160]	; (8008b04 <UART_SetConfig+0xac0>)
 8008a64:	fa22 f303 	lsr.w	r3, r2, r3
 8008a68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a6a:	e00f      	b.n	8008a8c <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 8008a6c:	4b25      	ldr	r3, [pc, #148]	; (8008b04 <UART_SetConfig+0xac0>)
 8008a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a70:	e00c      	b.n	8008a8c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a72:	4b25      	ldr	r3, [pc, #148]	; (8008b08 <UART_SetConfig+0xac4>)
 8008a74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a76:	e009      	b.n	8008a8c <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008a7e:	e005      	b.n	8008a8c <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 8008a80:	2300      	movs	r3, #0
 8008a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8008a8a:	bf00      	nop
    }

    if (pclk != 0U)
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d021      	beq.n	8008ad6 <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	4a1d      	ldr	r2, [pc, #116]	; (8008b0c <UART_SetConfig+0xac8>)
 8008a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa0:	fbb3 f2f2 	udiv	r2, r3, r2
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	085b      	lsrs	r3, r3, #1
 8008aaa:	441a      	add	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	2b0f      	cmp	r3, #15
 8008abc:	d908      	bls.n	8008ad0 <UART_SetConfig+0xa8c>
 8008abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac4:	d204      	bcs.n	8008ad0 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008acc:	60da      	str	r2, [r3, #12]
 8008ace:	e002      	b.n	8008ad6 <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8008af2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3738      	adds	r7, #56	; 0x38
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bdb0      	pop	{r4, r5, r7, pc}
 8008afe:	bf00      	nop
 8008b00:	58024400 	.word	0x58024400
 8008b04:	03d09000 	.word	0x03d09000
 8008b08:	003d0900 	.word	0x003d0900
 8008b0c:	08009808 	.word	0x08009808

08008b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b083      	sub	sp, #12
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00a      	beq.n	8008b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00a      	beq.n	8008b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b82:	f003 0308 	and.w	r3, r3, #8
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00a      	beq.n	8008ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	430a      	orrs	r2, r1
 8008b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba4:	f003 0310 	and.w	r3, r3, #16
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00a      	beq.n	8008bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	430a      	orrs	r2, r1
 8008bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00a      	beq.n	8008be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d01a      	beq.n	8008c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c0e:	d10a      	bne.n	8008c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	605a      	str	r2, [r3, #4]
  }
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af02      	add	r7, sp, #8
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008c64:	f7fa fca4 	bl	80035b0 <HAL_GetTick>
 8008c68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0308 	and.w	r3, r3, #8
 8008c74:	2b08      	cmp	r3, #8
 8008c76:	d10e      	bne.n	8008c96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f82c 	bl	8008ce4 <UART_WaitOnFlagUntilTimeout>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e022      	b.n	8008cdc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f003 0304 	and.w	r3, r3, #4
 8008ca0:	2b04      	cmp	r3, #4
 8008ca2:	d10e      	bne.n	8008cc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ca4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f816 	bl	8008ce4 <UART_WaitOnFlagUntilTimeout>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e00c      	b.n	8008cdc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2220      	movs	r2, #32
 8008cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2220      	movs	r2, #32
 8008cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	603b      	str	r3, [r7, #0]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cf4:	e062      	b.n	8008dbc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfc:	d05e      	beq.n	8008dbc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cfe:	f7fa fc57 	bl	80035b0 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d302      	bcc.n	8008d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d11d      	bne.n	8008d50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d22:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689a      	ldr	r2, [r3, #8]
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f022 0201 	bic.w	r2, r2, #1
 8008d32:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2220      	movs	r2, #32
 8008d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e045      	b.n	8008ddc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0304 	and.w	r3, r3, #4
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d02e      	beq.n	8008dbc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	69db      	ldr	r3, [r3, #28]
 8008d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d6c:	d126      	bne.n	8008dbc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d76:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d86:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0201 	bic.w	r2, r2, #1
 8008d96:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2220      	movs	r2, #32
 8008da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2220      	movs	r2, #32
 8008dac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e00f      	b.n	8008ddc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	69da      	ldr	r2, [r3, #28]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	bf0c      	ite	eq
 8008dcc:	2301      	moveq	r3, #1
 8008dce:	2300      	movne	r3, #0
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d08d      	beq.n	8008cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dda:	2300      	movs	r3, #0
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d101      	bne.n	8008dfa <HAL_UARTEx_DisableFifoMode+0x16>
 8008df6:	2302      	movs	r3, #2
 8008df8:	e027      	b.n	8008e4a <HAL_UARTEx_DisableFifoMode+0x66>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2224      	movs	r2, #36	; 0x24
 8008e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f022 0201 	bic.w	r2, r2, #1
 8008e20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2220      	movs	r2, #32
 8008e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3714      	adds	r7, #20
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d101      	bne.n	8008e6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e6a:	2302      	movs	r3, #2
 8008e6c:	e02d      	b.n	8008eca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2224      	movs	r2, #36	; 0x24
 8008e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f022 0201 	bic.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	683a      	ldr	r2, [r7, #0]
 8008ea6:	430a      	orrs	r2, r1
 8008ea8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f850 	bl	8008f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68fa      	ldr	r2, [r7, #12]
 8008eb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008ec8:	2300      	movs	r3, #0
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}

08008ed2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ed2:	b580      	push	{r7, lr}
 8008ed4:	b084      	sub	sp, #16
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d101      	bne.n	8008eea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ee6:	2302      	movs	r3, #2
 8008ee8:	e02d      	b.n	8008f46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2201      	movs	r2, #1
 8008eee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2224      	movs	r2, #36	; 0x24
 8008ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0201 	bic.w	r2, r2, #1
 8008f10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f812 	bl	8008f50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2220      	movs	r2, #32
 8008f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
	...

08008f50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b089      	sub	sp, #36	; 0x24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8008f58:	4a2f      	ldr	r2, [pc, #188]	; (8009018 <UARTEx_SetNbDataToProcess+0xc8>)
 8008f5a:	f107 0314 	add.w	r3, r7, #20
 8008f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f62:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8008f66:	4a2d      	ldr	r2, [pc, #180]	; (800901c <UARTEx_SetNbDataToProcess+0xcc>)
 8008f68:	f107 030c 	add.w	r3, r7, #12
 8008f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008f70:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d108      	bne.n	8008f8e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f8c:	e03d      	b.n	800900a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f8e:	2310      	movs	r3, #16
 8008f90:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f92:	2310      	movs	r3, #16
 8008f94:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	0e5b      	lsrs	r3, r3, #25
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	f003 0307 	and.w	r3, r3, #7
 8008fa4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	0f5b      	lsrs	r3, r3, #29
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	f003 0307 	and.w	r3, r3, #7
 8008fb4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008fb6:	7fbb      	ldrb	r3, [r7, #30]
 8008fb8:	7f3a      	ldrb	r2, [r7, #28]
 8008fba:	f107 0120 	add.w	r1, r7, #32
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008fc4:	fb02 f303 	mul.w	r3, r2, r3
 8008fc8:	7f3a      	ldrb	r2, [r7, #28]
 8008fca:	f107 0120 	add.w	r1, r7, #32
 8008fce:	440a      	add	r2, r1
 8008fd0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008fd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8008fe0:	7ffb      	ldrb	r3, [r7, #31]
 8008fe2:	7f7a      	ldrb	r2, [r7, #29]
 8008fe4:	f107 0120 	add.w	r1, r7, #32
 8008fe8:	440a      	add	r2, r1
 8008fea:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008fee:	fb02 f303 	mul.w	r3, r2, r3
 8008ff2:	7f7a      	ldrb	r2, [r7, #29]
 8008ff4:	f107 0120 	add.w	r1, r7, #32
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008ffe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009002:	b29a      	uxth	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800900a:	bf00      	nop
 800900c:	3724      	adds	r7, #36	; 0x24
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	08009718 	.word	0x08009718
 800901c:	08009720 	.word	0x08009720

08009020 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009020:	b084      	sub	sp, #16
 8009022:	b580      	push	{r7, lr}
 8009024:	b084      	sub	sp, #16
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	f107 001c 	add.w	r0, r7, #28
 800902e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	2b01      	cmp	r3, #1
 8009036:	d120      	bne.n	800907a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68da      	ldr	r2, [r3, #12]
 8009048:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <USB_CoreInit+0xc0>)
 800904a:	4013      	ands	r3, r2
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800905c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800905e:	2b01      	cmp	r3, #1
 8009060:	d105      	bne.n	800906e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fa4c 	bl	800950c <USB_CoreReset>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]
 8009078:	e01a      	b.n	80090b0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa40 	bl	800950c <USB_CoreReset>
 800908c:	4603      	mov	r3, r0
 800908e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800909a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38
 80090a2:	e005      	b.n	80090b0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d10b      	bne.n	80090ce <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	f043 0206 	orr.w	r2, r3, #6
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f043 0220 	orr.w	r2, r3, #32
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80090ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090da:	b004      	add	sp, #16
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	ffbdffbf 	.word	0xffbdffbf

080090e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	f023 0201 	bic.w	r2, r3, #1
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090f8:	2300      	movs	r3, #0
}
 80090fa:	4618      	mov	r0, r3
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009106:	b580      	push	{r7, lr}
 8009108:	b082      	sub	sp, #8
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
 800910e:	460b      	mov	r3, r1
 8009110:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800911e:	78fb      	ldrb	r3, [r7, #3]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d106      	bne.n	8009132 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60da      	str	r2, [r3, #12]
 8009130:	e00b      	b.n	800914a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	60da      	str	r2, [r3, #12]
 8009144:	e001      	b.n	800914a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e003      	b.n	8009152 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800914a:	2032      	movs	r0, #50	; 0x32
 800914c:	f7fa fa3c 	bl	80035c8 <HAL_Delay>

  return HAL_OK;
 8009150:	2300      	movs	r3, #0
}
 8009152:	4618      	mov	r0, r3
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
	...

0800915c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800915c:	b084      	sub	sp, #16
 800915e:	b580      	push	{r7, lr}
 8009160:	b086      	sub	sp, #24
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800916a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009176:	2300      	movs	r3, #0
 8009178:	613b      	str	r3, [r7, #16]
 800917a:	e009      	b.n	8009190 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	3340      	adds	r3, #64	; 0x40
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	2200      	movs	r2, #0
 8009188:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	3301      	adds	r3, #1
 800918e:	613b      	str	r3, [r7, #16]
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	2b0e      	cmp	r3, #14
 8009194:	d9f2      	bls.n	800917c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009198:	2b00      	cmp	r3, #0
 800919a:	d11c      	bne.n	80091d6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091aa:	f043 0302 	orr.w	r3, r3, #2
 80091ae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e005      	b.n	80091e2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091e8:	461a      	mov	r2, r3
 80091ea:	2300      	movs	r3, #0
 80091ec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f4:	4619      	mov	r1, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fc:	461a      	mov	r2, r3
 80091fe:	680b      	ldr	r3, [r1, #0]
 8009200:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009204:	2b01      	cmp	r3, #1
 8009206:	d10c      	bne.n	8009222 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800920a:	2b00      	cmp	r3, #0
 800920c:	d104      	bne.n	8009218 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800920e:	2100      	movs	r1, #0
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 f949 	bl	80094a8 <USB_SetDevSpeed>
 8009216:	e008      	b.n	800922a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009218:	2101      	movs	r1, #1
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f944 	bl	80094a8 <USB_SetDevSpeed>
 8009220:	e003      	b.n	800922a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009222:	2103      	movs	r1, #3
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f93f 	bl	80094a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800922a:	2110      	movs	r1, #16
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f8f3 	bl	8009418 <USB_FlushTxFifo>
 8009232:	4603      	mov	r3, r0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d001      	beq.n	800923c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f911 	bl	8009464 <USB_FlushRxFifo>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d001      	beq.n	800924c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009252:	461a      	mov	r2, r3
 8009254:	2300      	movs	r3, #0
 8009256:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800925e:	461a      	mov	r2, r3
 8009260:	2300      	movs	r3, #0
 8009262:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926a:	461a      	mov	r2, r3
 800926c:	2300      	movs	r3, #0
 800926e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009270:	2300      	movs	r3, #0
 8009272:	613b      	str	r3, [r7, #16]
 8009274:	e043      	b.n	80092fe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009288:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800928c:	d118      	bne.n	80092c0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	015a      	lsls	r2, r3, #5
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	4413      	add	r3, r2
 800929c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a0:	461a      	mov	r2, r3
 80092a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80092a6:	6013      	str	r3, [r2, #0]
 80092a8:	e013      	b.n	80092d2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	015a      	lsls	r2, r3, #5
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4413      	add	r3, r2
 80092b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b6:	461a      	mov	r2, r3
 80092b8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80092bc:	6013      	str	r3, [r2, #0]
 80092be:	e008      	b.n	80092d2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092cc:	461a      	mov	r2, r3
 80092ce:	2300      	movs	r3, #0
 80092d0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092de:	461a      	mov	r2, r3
 80092e0:	2300      	movs	r3, #0
 80092e2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f0:	461a      	mov	r2, r3
 80092f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80092f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	3301      	adds	r3, #1
 80092fc:	613b      	str	r3, [r7, #16]
 80092fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	429a      	cmp	r2, r3
 8009304:	d3b7      	bcc.n	8009276 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009306:	2300      	movs	r3, #0
 8009308:	613b      	str	r3, [r7, #16]
 800930a:	e043      	b.n	8009394 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800931e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009322:	d118      	bne.n	8009356 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10a      	bne.n	8009340 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	015a      	lsls	r2, r3, #5
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	4413      	add	r3, r2
 8009332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009336:	461a      	mov	r2, r3
 8009338:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	e013      	b.n	8009368 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934c:	461a      	mov	r2, r3
 800934e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009352:	6013      	str	r3, [r2, #0]
 8009354:	e008      	b.n	8009368 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4413      	add	r3, r2
 800935e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009362:	461a      	mov	r2, r3
 8009364:	2300      	movs	r3, #0
 8009366:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009374:	461a      	mov	r2, r3
 8009376:	2300      	movs	r3, #0
 8009378:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	4413      	add	r3, r2
 8009382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009386:	461a      	mov	r2, r3
 8009388:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800938c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	3301      	adds	r3, #1
 8009392:	613b      	str	r3, [r7, #16]
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	693a      	ldr	r2, [r7, #16]
 8009398:	429a      	cmp	r2, r3
 800939a:	d3b7      	bcc.n	800930c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093ae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80093bc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d105      	bne.n	80093d0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	699b      	ldr	r3, [r3, #24]
 80093c8:	f043 0210 	orr.w	r2, r3, #16
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	699a      	ldr	r2, [r3, #24]
 80093d4:	4b0e      	ldr	r3, [pc, #56]	; (8009410 <USB_DevInit+0x2b4>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80093dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d005      	beq.n	80093ee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	f043 0208 	orr.w	r2, r3, #8
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80093ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d105      	bne.n	8009400 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	699a      	ldr	r2, [r3, #24]
 80093f8:	4b06      	ldr	r3, [pc, #24]	; (8009414 <USB_DevInit+0x2b8>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	687a      	ldr	r2, [r7, #4]
 80093fe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009400:	7dfb      	ldrb	r3, [r7, #23]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800940c:	b004      	add	sp, #16
 800940e:	4770      	bx	lr
 8009410:	803c3800 	.word	0x803c3800
 8009414:	40000004 	.word	0x40000004

08009418 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009418:	b480      	push	{r7}
 800941a:	b085      	sub	sp, #20
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	019b      	lsls	r3, r3, #6
 800942a:	f043 0220 	orr.w	r2, r3, #32
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	3301      	adds	r3, #1
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	4a09      	ldr	r2, [pc, #36]	; (8009460 <USB_FlushTxFifo+0x48>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d901      	bls.n	8009444 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009440:	2303      	movs	r3, #3
 8009442:	e006      	b.n	8009452 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	691b      	ldr	r3, [r3, #16]
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b20      	cmp	r3, #32
 800944e:	d0f0      	beq.n	8009432 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	00030d40 	.word	0x00030d40

08009464 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2210      	movs	r2, #16
 8009474:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3301      	adds	r3, #1
 800947a:	60fb      	str	r3, [r7, #12]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	4a09      	ldr	r2, [pc, #36]	; (80094a4 <USB_FlushRxFifo+0x40>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d901      	bls.n	8009488 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009484:	2303      	movs	r3, #3
 8009486:	e006      	b.n	8009496 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0310 	and.w	r3, r3, #16
 8009490:	2b10      	cmp	r3, #16
 8009492:	d0f0      	beq.n	8009476 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr
 80094a2:	bf00      	nop
 80094a4:	00030d40 	.word	0x00030d40

080094a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	460b      	mov	r3, r1
 80094b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	68f9      	ldr	r1, [r7, #12]
 80094c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094c8:	4313      	orrs	r3, r2
 80094ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80094cc:	2300      	movs	r3, #0
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3714      	adds	r7, #20
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094f4:	f043 0302 	orr.w	r3, r3, #2
 80094f8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80094fa:	2003      	movs	r0, #3
 80094fc:	f7fa f864 	bl	80035c8 <HAL_Delay>

  return HAL_OK;
 8009500:	2300      	movs	r3, #0
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
	...

0800950c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	3301      	adds	r3, #1
 800951c:	60fb      	str	r3, [r7, #12]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4a13      	ldr	r2, [pc, #76]	; (8009570 <USB_CoreReset+0x64>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d901      	bls.n	800952a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009526:	2303      	movs	r3, #3
 8009528:	e01b      	b.n	8009562 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	2b00      	cmp	r3, #0
 8009530:	daf2      	bge.n	8009518 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009532:	2300      	movs	r3, #0
 8009534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	f043 0201 	orr.w	r2, r3, #1
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	3301      	adds	r3, #1
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4a09      	ldr	r2, [pc, #36]	; (8009570 <USB_CoreReset+0x64>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d901      	bls.n	8009554 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e006      	b.n	8009562 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	691b      	ldr	r3, [r3, #16]
 8009558:	f003 0301 	and.w	r3, r3, #1
 800955c:	2b01      	cmp	r3, #1
 800955e:	d0f0      	beq.n	8009542 <USB_CoreReset+0x36>

  return HAL_OK;
 8009560:	2300      	movs	r3, #0
}
 8009562:	4618      	mov	r0, r3
 8009564:	3714      	adds	r7, #20
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	00030d40 	.word	0x00030d40

08009574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009574:	b480      	push	{r7}
 8009576:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009578:	4b3f      	ldr	r3, [pc, #252]	; (8009678 <SystemInit+0x104>)
 800957a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800957e:	4a3e      	ldr	r2, [pc, #248]	; (8009678 <SystemInit+0x104>)
 8009580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009584:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8009588:	4b3b      	ldr	r3, [pc, #236]	; (8009678 <SystemInit+0x104>)
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	4a3a      	ldr	r2, [pc, #232]	; (8009678 <SystemInit+0x104>)
 800958e:	f043 0310 	orr.w	r3, r3, #16
 8009592:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8009594:	4b39      	ldr	r3, [pc, #228]	; (800967c <SystemInit+0x108>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f003 030f 	and.w	r3, r3, #15
 800959c:	2b06      	cmp	r3, #6
 800959e:	d807      	bhi.n	80095b0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80095a0:	4b36      	ldr	r3, [pc, #216]	; (800967c <SystemInit+0x108>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f023 030f 	bic.w	r3, r3, #15
 80095a8:	4a34      	ldr	r2, [pc, #208]	; (800967c <SystemInit+0x108>)
 80095aa:	f043 0307 	orr.w	r3, r3, #7
 80095ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80095b0:	4b33      	ldr	r3, [pc, #204]	; (8009680 <SystemInit+0x10c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a32      	ldr	r2, [pc, #200]	; (8009680 <SystemInit+0x10c>)
 80095b6:	f043 0301 	orr.w	r3, r3, #1
 80095ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80095bc:	4b30      	ldr	r3, [pc, #192]	; (8009680 <SystemInit+0x10c>)
 80095be:	2200      	movs	r2, #0
 80095c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80095c2:	4b2f      	ldr	r3, [pc, #188]	; (8009680 <SystemInit+0x10c>)
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	492e      	ldr	r1, [pc, #184]	; (8009680 <SystemInit+0x10c>)
 80095c8:	4b2e      	ldr	r3, [pc, #184]	; (8009684 <SystemInit+0x110>)
 80095ca:	4013      	ands	r3, r2
 80095cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80095ce:	4b2b      	ldr	r3, [pc, #172]	; (800967c <SystemInit+0x108>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0308 	and.w	r3, r3, #8
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d007      	beq.n	80095ea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80095da:	4b28      	ldr	r3, [pc, #160]	; (800967c <SystemInit+0x108>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f023 030f 	bic.w	r3, r3, #15
 80095e2:	4a26      	ldr	r2, [pc, #152]	; (800967c <SystemInit+0x108>)
 80095e4:	f043 0307 	orr.w	r3, r3, #7
 80095e8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80095ea:	4b25      	ldr	r3, [pc, #148]	; (8009680 <SystemInit+0x10c>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80095f0:	4b23      	ldr	r3, [pc, #140]	; (8009680 <SystemInit+0x10c>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80095f6:	4b22      	ldr	r3, [pc, #136]	; (8009680 <SystemInit+0x10c>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80095fc:	4b20      	ldr	r3, [pc, #128]	; (8009680 <SystemInit+0x10c>)
 80095fe:	4a22      	ldr	r2, [pc, #136]	; (8009688 <SystemInit+0x114>)
 8009600:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8009602:	4b1f      	ldr	r3, [pc, #124]	; (8009680 <SystemInit+0x10c>)
 8009604:	4a21      	ldr	r2, [pc, #132]	; (800968c <SystemInit+0x118>)
 8009606:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8009608:	4b1d      	ldr	r3, [pc, #116]	; (8009680 <SystemInit+0x10c>)
 800960a:	4a21      	ldr	r2, [pc, #132]	; (8009690 <SystemInit+0x11c>)
 800960c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800960e:	4b1c      	ldr	r3, [pc, #112]	; (8009680 <SystemInit+0x10c>)
 8009610:	2200      	movs	r2, #0
 8009612:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8009614:	4b1a      	ldr	r3, [pc, #104]	; (8009680 <SystemInit+0x10c>)
 8009616:	4a1e      	ldr	r2, [pc, #120]	; (8009690 <SystemInit+0x11c>)
 8009618:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800961a:	4b19      	ldr	r3, [pc, #100]	; (8009680 <SystemInit+0x10c>)
 800961c:	2200      	movs	r2, #0
 800961e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009620:	4b17      	ldr	r3, [pc, #92]	; (8009680 <SystemInit+0x10c>)
 8009622:	4a1b      	ldr	r2, [pc, #108]	; (8009690 <SystemInit+0x11c>)
 8009624:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009626:	4b16      	ldr	r3, [pc, #88]	; (8009680 <SystemInit+0x10c>)
 8009628:	2200      	movs	r2, #0
 800962a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800962c:	4b14      	ldr	r3, [pc, #80]	; (8009680 <SystemInit+0x10c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a13      	ldr	r2, [pc, #76]	; (8009680 <SystemInit+0x10c>)
 8009632:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009636:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009638:	4b11      	ldr	r3, [pc, #68]	; (8009680 <SystemInit+0x10c>)
 800963a:	2200      	movs	r2, #0
 800963c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800963e:	4b15      	ldr	r3, [pc, #84]	; (8009694 <SystemInit+0x120>)
 8009640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009642:	4a14      	ldr	r2, [pc, #80]	; (8009694 <SystemInit+0x120>)
 8009644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009648:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800964a:	4b13      	ldr	r3, [pc, #76]	; (8009698 <SystemInit+0x124>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	4b13      	ldr	r3, [pc, #76]	; (800969c <SystemInit+0x128>)
 8009650:	4013      	ands	r3, r2
 8009652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009656:	d202      	bcs.n	800965e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8009658:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <SystemInit+0x12c>)
 800965a:	2201      	movs	r2, #1
 800965c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800965e:	4b11      	ldr	r3, [pc, #68]	; (80096a4 <SystemInit+0x130>)
 8009660:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009664:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8009666:	4b04      	ldr	r3, [pc, #16]	; (8009678 <SystemInit+0x104>)
 8009668:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800966c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800966e:	bf00      	nop
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	e000ed00 	.word	0xe000ed00
 800967c:	52002000 	.word	0x52002000
 8009680:	58024400 	.word	0x58024400
 8009684:	eaf6ed7f 	.word	0xeaf6ed7f
 8009688:	02020200 	.word	0x02020200
 800968c:	01ff0000 	.word	0x01ff0000
 8009690:	01010280 	.word	0x01010280
 8009694:	580000c0 	.word	0x580000c0
 8009698:	5c001000 	.word	0x5c001000
 800969c:	ffff0000 	.word	0xffff0000
 80096a0:	51008108 	.word	0x51008108
 80096a4:	52004000 	.word	0x52004000

080096a8 <__libc_init_array>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	4d0d      	ldr	r5, [pc, #52]	; (80096e0 <__libc_init_array+0x38>)
 80096ac:	4c0d      	ldr	r4, [pc, #52]	; (80096e4 <__libc_init_array+0x3c>)
 80096ae:	1b64      	subs	r4, r4, r5
 80096b0:	10a4      	asrs	r4, r4, #2
 80096b2:	2600      	movs	r6, #0
 80096b4:	42a6      	cmp	r6, r4
 80096b6:	d109      	bne.n	80096cc <__libc_init_array+0x24>
 80096b8:	4d0b      	ldr	r5, [pc, #44]	; (80096e8 <__libc_init_array+0x40>)
 80096ba:	4c0c      	ldr	r4, [pc, #48]	; (80096ec <__libc_init_array+0x44>)
 80096bc:	f000 f820 	bl	8009700 <_init>
 80096c0:	1b64      	subs	r4, r4, r5
 80096c2:	10a4      	asrs	r4, r4, #2
 80096c4:	2600      	movs	r6, #0
 80096c6:	42a6      	cmp	r6, r4
 80096c8:	d105      	bne.n	80096d6 <__libc_init_array+0x2e>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d0:	4798      	blx	r3
 80096d2:	3601      	adds	r6, #1
 80096d4:	e7ee      	b.n	80096b4 <__libc_init_array+0xc>
 80096d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096da:	4798      	blx	r3
 80096dc:	3601      	adds	r6, #1
 80096de:	e7f2      	b.n	80096c6 <__libc_init_array+0x1e>
 80096e0:	08009838 	.word	0x08009838
 80096e4:	08009838 	.word	0x08009838
 80096e8:	08009838 	.word	0x08009838
 80096ec:	0800983c 	.word	0x0800983c

080096f0 <memset>:
 80096f0:	4402      	add	r2, r0
 80096f2:	4603      	mov	r3, r0
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d100      	bne.n	80096fa <memset+0xa>
 80096f8:	4770      	bx	lr
 80096fa:	f803 1b01 	strb.w	r1, [r3], #1
 80096fe:	e7f9      	b.n	80096f4 <memset+0x4>

08009700 <_init>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	bf00      	nop
 8009704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009706:	bc08      	pop	{r3}
 8009708:	469e      	mov	lr, r3
 800970a:	4770      	bx	lr

0800970c <_fini>:
 800970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970e:	bf00      	nop
 8009710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009712:	bc08      	pop	{r3}
 8009714:	469e      	mov	lr, r3
 8009716:	4770      	bx	lr
