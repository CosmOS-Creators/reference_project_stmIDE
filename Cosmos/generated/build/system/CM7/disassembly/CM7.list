
../../../../../../Cosmos/generated/build/system/CM7/bin/CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .program_default_CM7_section_init 00000000  20001000  20001000  0006f9fc  2**0
                  CONTENTS
  2 .program_default_CM7_section_noInit 00000000  20001000  20001000  0006f9fc  2**0
                  CONTENTS
  3 .program_blinking_led_CM7_section_init 00000008  20001400  08000298  00011400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .program_blinking_led_CM7_section_noInit 00000000  20001408  20001408  0006f9fc  2**0
                  CONTENTS
  5 .program_default_CM4_section_init 00000000  10001000  10001000  0006f9fc  2**0
                  CONTENTS
  6 .program_default_CM4_section_noInit 00000000  10001000  10001000  0006f9fc  2**0
                  CONTENTS
  7 .program_blinking_led_CM4_section_init 00000008  10001400  080002a0  00021400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .program_blinking_led_CM4_section_noInit 00000000  10001408  10001408  0006f9fc  2**0
                  CONTENTS
  9 .os_section_consts 00000800  38000000  080002a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .os_section_vars 00000400  38008000  08000aa8  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .os_section_funcs 00001cc0  08000ea8  08000ea8  00040ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .application_section_funcs_CM7 00000178  080ff800  080ff800  0005f800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .application_section_funcs_CM4 000001fc  081ff800  081ff800  0006f800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text         00008390  08002b68  08002b68  00042b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       00000098  0800aef8  0800aef8  0004aef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .ARM.extab    00000030  0800af90  0800af90  0004af90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .ARM          000000e0  0800afc0  0800afc0  0004afc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000004  0800b0a0  0800b0a0  0004b0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000004  0800b0a4  0800b0a4  0004b0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .data         00000074  20001800  0800b0a8  00051800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .RxDecripSection 00000060  20001874  0800b11c  00051874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .TxDecripSection 00000060  200018d4  0800b17c  000518d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          000006cc  20001934  0800b1dc  00051934  2**2
                  ALLOC
 24 .ARM.attributes 0000002e  00000000  00000000  0006f9fc  2**0
                  CONTENTS, READONLY
 25 .debug_line   00031120  00000000  00000000  0006fa2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_info   00049ae5  00000000  00000000  000a0b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_abbrev 00008e40  00000000  00000000  000ea62f  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_aranges 00001e78  00000000  00000000  000f3470  2**3
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_str    00197e18  00000000  00000000  000f52e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_ranges 00001980  00000000  00000000  0028d100  2**3
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_macro  000462ab  00000000  00000000  0028ea80  2**0
                  CONTENTS, READONLY, DEBUGGING
 32 .comment      00000079  00000000  00000000  002d4d2b  2**0
                  CONTENTS, READONLY
 33 .debug_frame  000070a4  00000000  00000000  002d4da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 34 .stabstr      00000076  00000000  00000000  002dbe48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .os_section_funcs:

08000ea8 <buffer_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_readArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b098      	sub	sp, #96	; 0x60
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8000eb4:	f000 fbde 	bl	8001674 <os_getOsVar>
 8000eb8:	64f8      	str	r0, [r7, #76]	; 0x4c
  * @return CosmOS_CoreVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_CoreVariableType * CILcore_getCoreVar(void)
{
    uint32_t result;
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8000eba:	464b      	mov	r3, r9
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8000ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8000ec0:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68b9      	ldr	r1, [r7, #8]
 8000ec6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000ec8:	f000 fb84 	bl	80015d4 <memoryProtection_isMemoryRegionProtected>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8000ed2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <buffer_readArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8000eda:	2305      	movs	r3, #5
 8000edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000ee0:	e06a      	b.n	8000fb8 <buffer_readArray+0x110>
 8000ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ee4:	623b      	str	r3, [r7, #32]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * os_getOsBufferVar(CosmOS_OsVariableType * osVar, BitWidthType bufferId)
{
    return (&(osVar->bufferVars[bufferId]));
 8000eea:	6a3b      	ldr	r3, [r7, #32]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	011b      	lsls	r3, r3, #4
 8000ef2:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * readPermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8000ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8000ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_PermissionsConfigurationType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_PermissionsConfigurationType * buffer_getBufferReadPermission(CosmOS_BufferVariableType * bufferVar)
{
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->readPermission);
 8000efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68db      	ldr	r3, [r3, #12]

        readPermission = buffer_getBufferReadPermission( bufferVar );
 8000f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( readPermission, coreVar );
 8000f02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000f04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f06:	f000 fc67 	bl	80017d8 <permission_tryAccess>
 8000f0a:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8000f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f0e:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8000f12:	d103      	bne.n	8000f1c <buffer_readArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000f1a:	e04d      	b.n	8000fb8 <buffer_readArray+0x110>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f1c:	b672      	cpsid	i
}
 8000f1e:	bf00      	nop
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void CILinterrupt_disableInterrupts(void)
{
		__disable_irq();
}
 8000f20:	bf00      	nop
 8000f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f24:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 8000f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d00b      	beq.n	8000f4c <buffer_readArray+0xa4>
 8000f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f36:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 8000f3e:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 8000f40:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000f42:	f001 f880 	bl	8002046 <spinlock_trySpinlock>
 8000f46:	4603      	mov	r3, r0
 8000f48:	657b      	str	r3, [r7, #84]	; 0x54
 8000f4a:	e001      	b.n	8000f50 <buffer_readArray+0xa8>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8000f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d12a      	bne.n	8000fac <buffer_readArray+0x104>
 8000f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f58:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getFullCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return (bufferVar->fullCells);
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	68db      	ldr	r3, [r3, #12]
			{
				fullCellsNum = buffer_getFullCellsNum( bufferVar );
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30

				if ( fullCellsNum >= size)
 8000f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d316      	bcc.n	8000f96 <buffer_readArray+0xee>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8000f70:	e00c      	b.n	8000f8c <buffer_readArray+0xe4>
					{
						bufferState = buffer_pull( bufferVar, ( userBuffer + userBufferIndex ) );
 8000f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f76:	4413      	add	r3, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000f7c:	f000 f8b5 	bl	80010ea <buffer_pull>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 8000f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000f88:	3301      	adds	r3, #1
 8000f8a:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 8000f8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d3ee      	bcc.n	8000f72 <buffer_readArray+0xca>
 8000f94:	e002      	b.n	8000f9c <buffer_readArray+0xf4>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM;
 8000f96:	2307      	movs	r3, #7
 8000f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 8000f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d007      	beq.n	8000fb2 <buffer_readArray+0x10a>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 8000fa2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000fa4:	f001 f88a 	bl	80020bc <spinlock_releaseSpinlock>
 8000fa8:	6578      	str	r0, [r7, #84]	; 0x54
 8000faa:	e002      	b.n	8000fb2 <buffer_readArray+0x10a>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 8000fac:	2304      	movs	r3, #4
 8000fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 8000fb2:	b662      	cpsie	i
}
 8000fb4:	bf00      	nop
}
 8000fb6:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8000fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3760      	adds	r7, #96	; 0x60
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <buffer_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_writeArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b098      	sub	sp, #96	; 0x60
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8000fd0:	f000 fb50 	bl	8001674 <os_getOsVar>
 8000fd4:	64f8      	str	r0, [r7, #76]	; 0x4c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8000fd6:	464b      	mov	r3, r9
 8000fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8000fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8000fdc:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000fe4:	f000 faf6 	bl	80015d4 <memoryProtection_isMemoryRegionProtected>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8000fee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <buffer_writeArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000ffc:	e06f      	b.n	80010de <buffer_writeArray+0x11a>
 8000ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001000:	623b      	str	r3, [r7, #32]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * writePermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8001010:	643b      	str	r3, [r7, #64]	; 0x40
 8001012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->writePermission);
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	691b      	ldr	r3, [r3, #16]

        writePermission = buffer_getBufferWritePermission( bufferVar );
 800101c:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( writePermission, coreVar );
 800101e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001020:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001022:	f000 fbd9 	bl	80017d8 <permission_tryAccess>
 8001026:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8001028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800102a:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 800102e:	d103      	bne.n	8001038 <buffer_writeArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8001030:	2303      	movs	r3, #3
 8001032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001036:	e052      	b.n	80010de <buffer_writeArray+0x11a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
}
 800103c:	bf00      	nop
 800103e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001040:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8001048:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 800104a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00b      	beq.n	8001068 <buffer_writeArray+0xa4>
 8001050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001052:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 800105a:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 800105c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800105e:	f000 fff2 	bl	8002046 <spinlock_trySpinlock>
 8001062:	4603      	mov	r3, r0
 8001064:	657b      	str	r3, [r7, #84]	; 0x54
 8001066:	e001      	b.n	800106c <buffer_writeArray+0xa8>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8001068:	2302      	movs	r3, #2
 800106a:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 800106c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800106e:	2b02      	cmp	r3, #2
 8001070:	d12f      	bne.n	80010d2 <buffer_writeArray+0x10e>
 8001072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001074:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getEmptyCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return ((bufferVar->cfg->size) - (bufferVar->fullCells));
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	1ad3      	subs	r3, r2, r3
			{
				emptyCellsNum = buffer_getEmptyCellsNum( bufferVar );
 8001082:	633b      	str	r3, [r7, #48]	; 0x30

				if ( emptyCellsNum >= size)
 8001084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	d317      	bcc.n	80010bc <buffer_writeArray+0xf8>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8001094:	e00d      	b.n	80010b2 <buffer_writeArray+0xee>
					{
            	        bufferState = buffer_push( bufferVar, *( userBuffer + userBufferIndex ) );
 8001096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800109a:	4413      	add	r3, r2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80010a2:	f000 f85c 	bl	800115e <buffer_push>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 80010ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ae:	3301      	adds	r3, #1
 80010b0:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 80010b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3ed      	bcc.n	8001096 <buffer_writeArray+0xd2>
 80010ba:	e002      	b.n	80010c2 <buffer_writeArray+0xfe>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS;
 80010bc:	2306      	movs	r3, #6
 80010be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 80010c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d007      	beq.n	80010d8 <buffer_writeArray+0x114>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 80010c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80010ca:	f000 fff7 	bl	80020bc <spinlock_releaseSpinlock>
 80010ce:	6578      	str	r0, [r7, #84]	; 0x54
 80010d0:	e002      	b.n	80010d8 <buffer_writeArray+0x114>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 80010d2:	2304      	movs	r3, #4
 80010d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 80010d8:	b662      	cpsie	i
}
 80010da:	bf00      	nop
}
 80010dc:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 80010de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3760      	adds	r7, #96	; 0x60
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <buffer_pull>:
{
 80010ea:	b480      	push	{r7}
 80010ec:	b089      	sub	sp, #36	; 0x24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	6039      	str	r1, [r7, #0]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 800110a:	61bb      	str	r3, [r7, #24]
    *data = *( osBuffer + bufferVar->tail );
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4413      	add	r3, r2
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells--;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	60da      	str	r2, [r3, #12]
    bufferVar->tail = ( ( bufferVar->tail + 1 ) % bufferSize );
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	3301      	adds	r3, #1
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001130:	69f9      	ldr	r1, [r7, #28]
 8001132:	fb01 f202 	mul.w	r2, r1, r2
 8001136:	1a9a      	subs	r2, r3, r2
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isEmpty(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT(bufferVar->fullCells) ? BUFFER_STATE_ENUM__EMPTY : BUFFER_STATE_ENUM__OK);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
    bufferState = buffer_isEmpty( bufferVar );
 800114e:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8001150:	7dfb      	ldrb	r3, [r7, #23]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3724      	adds	r7, #36	; 0x24
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <buffer_push>:
{
 800115e:	b480      	push	{r7}
 8001160:	b089      	sub	sp, #36	; 0x24
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	70fb      	strb	r3, [r7, #3]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8001180:	61bb      	str	r3, [r7, #24]
    *( osBuffer + bufferVar->head ) = data;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4413      	add	r3, r2
 800118a:	78fa      	ldrb	r2, [r7, #3]
 800118c:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells++;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	60da      	str	r2, [r3, #12]
    bufferVar->head = ( ( bufferVar->head + 1 ) % bufferSize );
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	3301      	adds	r3, #1
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80011a4:	69f9      	ldr	r1, [r7, #28]
 80011a6:	fb01 f202 	mul.w	r2, r1, r2
 80011aa:	1a9a      	subs	r2, r3, r2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isFull(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT((bufferVar->cfg->size) ^ (bufferVar->fullCells)) ? \
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	68db      	ldr	r3, [r3, #12]
    BUFFER_STATE_ENUM__FULL : BUFFER_STATE_ENUM__OK);
 80011be:	429a      	cmp	r2, r3
 80011c0:	d101      	bne.n	80011c6 <buffer_push+0x68>
 80011c2:	2302      	movs	r3, #2
 80011c4:	e000      	b.n	80011c8 <buffer_push+0x6a>
 80011c6:	2300      	movs	r3, #0
    bufferState = buffer_isFull( bufferVar );
 80011c8:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3724      	adds	r7, #36	; 0x24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <bufferDouble_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_readArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08e      	sub	sp, #56	; 0x38
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
 80011e4:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 80011e6:	f000 fa45 	bl	8001674 <os_getOsVar>
 80011ea:	6338      	str	r0, [r7, #48]	; 0x30
 80011ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ee:	623b      	str	r3, [r7, #32]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferDoubleVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferDoubleVariableType * os_getOsBufferDoubleVar(CosmOS_OsVariableType * osVar, BitWidthType bufferDoubleId)
{
    return (&(osVar->bufferDoubleVars[bufferDoubleId]));
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	68d9      	ldr	r1, [r3, #12]
 80011f8:	69fa      	ldr	r2, [r7, #28]
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d002      	beq.n	8001212 <bufferDouble_readArray+0x3a>
 800120c:	2b01      	cmp	r3, #1
 800120e:	d00b      	beq.n	8001228 <bufferDouble_readArray+0x50>
 8001210:	e015      	b.n	800123e <bufferDouble_readArray+0x66>
 8001212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001214:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * bufferDouble_getBufferDoubleUserBuffer(CosmOS_BufferDoubleVariableType * bufferDoubleVar)
{
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
    {
        case BUFFER_DOUBLE_ACCESS_ENUM__USER :
        {
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8001226:	e00d      	b.n	8001244 <bufferDouble_readArray+0x6c>
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
        }

        case BUFFER_DOUBLE_ACCESS_ENUM__KERNEL :
        {
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800123c:	e002      	b.n	8001244 <bufferDouble_readArray+0x6c>
        }

        default :
        {
            os_kernelPanic();
 800123e:	f000 fa23 	bl	8001688 <os_kernelPanic>
            break;
 8001242:	bf00      	nop
 8001244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001246:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->id);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_readArray( bufferId, buffer, size );
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	68b9      	ldr	r1, [r7, #8]
 8001254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001256:	f7ff fe27 	bl	8000ea8 <buffer_readArray>
 800125a:	4603      	mov	r3, r0
 800125c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8001260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001264:	4618      	mov	r0, r3
 8001266:	3738      	adds	r7, #56	; 0x38
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <bufferDouble_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_writeArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08e      	sub	sp, #56	; 0x38
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 800127a:	f000 f9fb 	bl	8001674 <os_getOsVar>
 800127e:	6338      	str	r0, [r7, #48]	; 0x30
 8001280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001282:	623b      	str	r3, [r7, #32]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	61fb      	str	r3, [r7, #28]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	68d9      	ldr	r1, [r3, #12]
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 800129a:	78fb      	ldrb	r3, [r7, #3]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <bufferDouble_writeArray+0x3a>
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d00b      	beq.n	80012bc <bufferDouble_writeArray+0x50>
 80012a4:	e015      	b.n	80012d2 <bufferDouble_writeArray+0x66>
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	61bb      	str	r3, [r7, #24]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
    {
        case BUFFER_DOUBLE_ACCESS_ENUM__USER :
        {
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80012ba:	e00d      	b.n	80012d8 <bufferDouble_writeArray+0x6c>
 80012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012be:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
        }

        case BUFFER_DOUBLE_ACCESS_ENUM__KERNEL :
        {
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 80012ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80012d0:	e002      	b.n	80012d8 <bufferDouble_writeArray+0x6c>
        }

        default :
        {
            os_kernelPanic();
 80012d2:	f000 f9d9 	bl	8001688 <os_kernelPanic>
            break;
 80012d6:	bf00      	nop
 80012d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_writeArray( bufferId, buffer, size );
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	68b9      	ldr	r1, [r7, #8]
 80012e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80012ea:	f7ff fe6b 	bl	8000fc4 <buffer_writeArray>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 80012f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3738      	adds	r7, #56	; 0x38
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <core_getCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_CoreVariableType * core_getCoreVar(void)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8001306:	464b      	mov	r3, r9
 8001308:	607b      	str	r3, [r7, #4]
    return (CosmOS_CoreVariableType *)result;
 800130a:	687b      	ldr	r3, [r7, #4]
    return CILcore_getCoreVar();
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <core_setSchedulableIntoCurrentContext>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void core_setSchedulableIntoCurrentContext(CosmOS_CoreVariableType * coreVar, CosmOS_SchedulableVariableType * schedulableVar)
{
 8001318:	b480      	push	{r7}
 800131a:	b08d      	sub	sp, #52	; 0x34
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	60fb      	str	r3, [r7, #12]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType schedulable_getProgramId(CosmOS_SchedulableVariableType * schedulable)
{
    return (schedulable->cfg->programId);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	699b      	ldr	r3, [r3, #24]
    BitWidthType programId;

    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulableVar );
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001334:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_ProgramVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ProgramVariableType * core_getCoreProgramVar(CosmOS_CoreVariableType * core, BitWidthType programIterator)
{
    return (&(core->programVars[programIterator]));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	68da      	ldr	r2, [r3, #12]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	4413      	add	r3, r2
    programVar = core_getCoreProgramVar( coreVar, programId );
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001348:	61bb      	str	r3, [r7, #24]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreProgramInExecution(CosmOS_CoreVariableType * core, CosmOS_ProgramVariableType * programInExecutionParam)
{
    core->programInExecution = programInExecutionParam;
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	609a      	str	r2, [r3, #8]
}
 8001350:	bf00      	nop
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	623b      	str	r3, [r7, #32]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreSchedulableInExecution(CosmOS_CoreVariableType * core, CosmOS_SchedulableVariableType * schedulableInExecutionParam)
{
    core->schedulableInExecution = schedulableInExecutionParam;
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	6a3a      	ldr	r2, [r7, #32]
 800135e:	605a      	str	r2, [r3, #4]
}
 8001360:	bf00      	nop

    core_setCoreProgramInExecution( coreVar, programVar );
    core_setCoreSchedulableInExecution( coreVar, schedulableVar );
}
 8001362:	bf00      	nop
 8001364:	3734      	adds	r7, #52	; 0x34
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <coreSync_getBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_getBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b096      	sub	sp, #88	; 0x58
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    return (&(core->barrierVars[barrierId]));
 8001380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
	CosmOS_BarrierVariableType * barrierVar;

	volatile CosmOS_BarrierStateType barrierState;


	barrierVar = core_getBarrierVar( coreVar, barrierId );
 800138a:	653b      	str	r3, [r7, #80]	; 0x50
 800138c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800138e:	633b      	str	r3, [r7, #48]	; 0x30
 8001390:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void coreSync_setBarrierState(CosmOS_BarrierVariableType * barrier, CosmOS_BarrierStateType barrierStateParam)
{
    barrier->barrierState = barrierStateParam;
 8001396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	bf00      	nop
	coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__REACHED);

	/* MEMORY BARRIER HAS TO BE IMPLEMENTED */

	osVar = os_getOsVar();
 800139e:	f000 f969 	bl	8001674 <os_getOsVar>
 80013a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80013a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
    return (osVar->cfg->numberOfCores);
 80013a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
	numberOfCores = os_getOsNumberOfCores( osVar );
 80013ae:	64bb      	str	r3, [r7, #72]	; 0x48

	numberOfSynchronizedCores = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	657b      	str	r3, [r7, #84]	; 0x54
 80013b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013ba:	63bb      	str	r3, [r7, #56]	; 0x38
    return (&(osVar->coreVars[coreId]));
 80013bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c2:	015b      	lsls	r3, r3, #5
 80013c4:	4413      	add	r3, r2

	coreVar = os_getCoreVar( osVar, numberOfSynchronizedCores );
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	647b      	str	r3, [r7, #68]	; 0x44
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	643b      	str	r3, [r7, #64]	; 0x40
 80013d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d2:	695a      	ldr	r2, [r3, #20]
 80013d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
	barrierVar = core_getBarrierVar( coreVar, barrierId );
 80013da:	653b      	str	r3, [r7, #80]	; 0x50

	while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 80013dc:	e026      	b.n	800142c <coreSync_getBarrier+0xbe>
 80013de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013e0:	623b      	str	r3, [r7, #32]
    return (barrier->barrierState);
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	681b      	ldr	r3, [r3, #0]
	{
		barrierState = coreSync_getBarrierState( barrierVar );
 80013e6:	60fb      	str	r3, [r7, #12]

		if ( ( barrierState IS_EQUAL_TO BARRIER_STATE_ENUM__REACHED ) )
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 80013ee:	d11d      	bne.n	800142c <coreSync_getBarrier+0xbe>
		{
			numberOfSynchronizedCores++;
 80013f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f2:	3301      	adds	r3, #1
 80013f4:	657b      	str	r3, [r7, #84]	; 0x54

			coreVar = os_getCoreVar( osVar, ( numberOfSynchronizedCores % numberOfCores ) );
 80013f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80013fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80013fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001400:	fb01 f202 	mul.w	r2, r1, r2
 8001404:	1a9b      	subs	r3, r3, r2
 8001406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001408:	617a      	str	r2, [r7, #20]
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	015b      	lsls	r3, r3, #5
 8001414:	4413      	add	r3, r2
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	695a      	ldr	r2, [r3, #20]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
			barrierVar = core_getBarrierVar( coreVar, barrierId );
 800142a:	653b      	str	r3, [r7, #80]	; 0x50
	while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 800142c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800142e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001430:	429a      	cmp	r2, r3
 8001432:	d1d4      	bne.n	80013de <coreSync_getBarrier+0x70>
		}
	}
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3758      	adds	r7, #88	; 0x58
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <coreSync_reactivateBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_reactivateBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b088      	sub	sp, #32
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
	CosmOS_BarrierVariableType * barrierVar;

	cosmosAssert( barrierId IS_EQUAL_TO SCHEDULERS_SYNC_ID );
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	2b03      	cmp	r3, #3
 800144c:	bf0c      	ite	eq
 800144e:	2301      	moveq	r3, #1
 8001450:	2300      	movne	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	60bb      	str	r3, [r7, #8]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void cosmosAssert(BitWidthType result)
{
    if ( IS_NOT( result ) )
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <coreSync_reactivateBarrier+0x22>
		{
        os_kernelPanic();
 800145c:	f000 f914 	bl	8001688 <os_kernelPanic>
    }
}
 8001460:	bf00      	nop
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2

	barrierVar = core_getBarrierVar( coreVar, barrierId );
 8001474:	61fb      	str	r3, [r7, #28]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	61bb      	str	r3, [r7, #24]
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
    barrier->barrierState = barrierStateParam;
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	601a      	str	r2, [r3, #0]
}
 8001484:	bf00      	nop
	coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__ACTIVATED );

	/* MEMORY BARRIER HAS TO BE IMPLEMENTED */
}
 8001486:	bf00      	nop
 8001488:	3720      	adds	r7, #32
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <deviceIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void deviceIO_togglePin(BitWidthType id, void *GPIOx, BitWidthType GPIO_Pin)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b084      	sub	sp, #16
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
    CILGPIO_togglePin( GPIOx, GPIO_Pin );
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	68b8      	ldr	r0, [r7, #8]
 800149e:	f000 ffa3 	bl	80023e8 <CILGPIO_togglePin>

	__SUPRESS_UNUSED_VAR(id);
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <memoryManager_heapInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryManager_heapInit(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b088      	sub	sp, #32
 80014ae:	af00      	add	r7, sp, #0

	CosmOS_CoreVariableType * coreVar;
	CosmOS_ProgramVariableType * programVars;
	CosmOS_MallocVariableType * currentMallocVar;

	coreVar = core_getCoreVar();
 80014b0:	f7ff ff26 	bl	8001300 <core_getCoreVar>
 80014b4:	61b8      	str	r0, [r7, #24]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	607b      	str	r3, [r7, #4]
    return (core->programVars);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]

	programVars = core_getCoreProgramVars( coreVar );
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	60bb      	str	r3, [r7, #8]
    return (core->cfg->numberOfPrograms);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
	numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 80014ca:	613b      	str	r3, [r7, #16]

	for (BitWidthType i = 0; i < numberOfPrograms; i++)
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	e01a      	b.n	8001508 <memoryManager_heapInit+0x5e>
	{
		if (programVars[i].cfg->programHeapSize)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	4413      	add	r3, r2
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00f      	beq.n	8001502 <memoryManager_heapInit+0x58>
		{
			currentMallocVar = (CosmOS_MallocVariableType *)programVars[i].cfg->programHeapLowAddress;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	4413      	add	r3, r2
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	69db      	ldr	r3, [r3, #28]
 80014ee:	60fb      	str	r3, [r7, #12]

			currentMallocVar->prior = NULL;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
			currentMallocVar->next = NULL;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2200      	movs	r2, #0
 80014fa:	605a      	str	r2, [r3, #4]
			currentMallocVar->size = (BitWidthType)ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType));
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	220c      	movs	r2, #12
 8001500:	609a      	str	r2, [r3, #8]
	for (BitWidthType i = 0; i < numberOfPrograms; i++)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3301      	adds	r3, #1
 8001506:	61fb      	str	r3, [r7, #28]
 8001508:	69fa      	ldr	r2, [r7, #28]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	429a      	cmp	r2, r3
 800150e:	d3e0      	bcc.n	80014d2 <memoryManager_heapInit+0x28>
		}
	}
}
 8001510:	bf00      	nop
 8001512:	bf00      	nop
 8001514:	3720      	adds	r7, #32
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <memoryProtection_init>:
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_init(AddressType codeMemoryHighAddress,\
												AddressType codeMemoryLowAddress, \
												AddressType stackMemoryHighAddress, \
												AddressType stackMemoryLowAddress)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	60f8      	str	r0, [r7, #12]
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	603b      	str	r3, [r7, #0]
    CILmemoryProtection_init(codeMemoryHighAddress,codeMemoryLowAddress,
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 ff6a 	bl	8002408 <CILmemoryProtection_init>
							stackMemoryHighAddress,stackMemoryLowAddress);
}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <memoryProtection_setMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_setMemoryProtection(CosmOS_CoreVariableType * core,CosmOS_SchedulableVariableType  * schedulable)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b096      	sub	sp, #88	; 0x58
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	699b      	ldr	r3, [r3, #24]

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulable );
 8001550:	657b      	str	r3, [r7, #84]	; 0x54
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001558:	613b      	str	r3, [r7, #16]
    return (&(core->programVars[programIterator]));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	68da      	ldr	r2, [r3, #12]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	4413      	add	r3, r2
    programVar = core_getCoreProgramVar( core, programId );
 8001564:	653b      	str	r3, [r7, #80]	; 0x50
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	61bb      	str	r3, [r7, #24]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]

    stack = schedulable_getStack( schedulable );
 8001570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackLowAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackLowAddress);
 800157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157c:	685b      	ldr	r3, [r3, #4]
    lowAddress = stack_getStackLowAddress( stack );
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	623b      	str	r3, [r7, #32]
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackHighAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackHighAddress);
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	689b      	ldr	r3, [r3, #8]
    highAddress = stack_getStackHighAddress( stack );
 8001588:	61fb      	str	r3, [r7, #28]
    CILmemoryProtection_setStackOverflowProtection( lowAddress, highAddress );
 800158a:	69f9      	ldr	r1, [r7, #28]
 800158c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800158e:	f001 f8b1 	bl	80026f4 <CILmemoryProtection_setStackOverflowProtection>
}
 8001592:	bf00      	nop
 8001594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001596:	64bb      	str	r3, [r7, #72]	; 0x48
 8001598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800159a:	647b      	str	r3, [r7, #68]	; 0x44
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemorySize(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemorySize);
 800159c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
    size = program_getProgramMemorySize( program );
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
 80015a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryLowAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryLowAddress);
 80015a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
    lowAddress = program_getProgramMemoryLowAddress( program );
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80015b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryHighAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryHighAddress);
 80015b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
    highAddress = program_getProgramMemoryHighAddress( program );
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
    if ( size )
 80015bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <memoryProtection_setMemoryProtection+0x8e>
        CILmemoryProtection_setProgramMemoryProtection( lowAddress, highAddress );
 80015c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80015c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80015c6:	f001 f8f1 	bl	80027ac <CILmemoryProtection_setProgramMemoryProtection>
}
 80015ca:	bf00      	nop

    memoryProtection_setStackOverflowProtection( stack );
    memoryProtection_setProgramMemoryProtection( programVar );
}
 80015cc:	bf00      	nop
 80015ce:	3758      	adds	r7, #88	; 0x58
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <memoryProtection_isMemoryRegionProtected>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BooleanType memoryProtection_isMemoryRegionProtected(CosmOS_CoreVariableType * core, void * regionLowAddressPointer, BitWidthType size)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b097      	sub	sp, #92	; 0x5c
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
				programLowAddress,
				programHighAddress,
				regionLowAddress,
				regionHighAddress;

	CosmOS_BooleanType isMemoryRegionProtected = True;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;
	CosmOS_SchedulableVariableType * schedulable;

	regionLowAddress = (AddressType)regionLowAddressPointer;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	653b      	str	r3, [r7, #80]	; 0x50
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	617b      	str	r3, [r7, #20]
    return (core->programInExecution);
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	689b      	ldr	r3, [r3, #8]

    programVar = core_getCoreProgramInExecution( core );
 80015f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	61bb      	str	r3, [r7, #24]
    return (core->schedulableInExecution);
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	685b      	ldr	r3, [r3, #4]
	schedulable = core_getCoreSchedulableInCurrentContext( core );
 80015fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80015fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
    stack = schedulable_getStack( schedulable );
 8001608:	647b      	str	r3, [r7, #68]	; 0x44
 800160a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160c:	623b      	str	r3, [r7, #32]
    return (stack->stackLowAddress);
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	685b      	ldr	r3, [r3, #4]

	stackLowAddress = stack_getStackLowAddress( stack );
 8001612:	643b      	str	r3, [r7, #64]	; 0x40
 8001614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
    return (stack->stackHighAddress);
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 800161c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800161e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001620:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->programMemoryLowAddress);
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	691b      	ldr	r3, [r3, #16]

    programLowAddress = program_getProgramMemoryLowAddress( programVar );
 8001628:	63bb      	str	r3, [r7, #56]	; 0x38
 800162a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800162c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (program->cfg->programMemoryHighAddress);
 800162e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	695b      	ldr	r3, [r3, #20]
    programHighAddress = program_getProgramMemoryHighAddress( programVar );
 8001634:	637b      	str	r3, [r7, #52]	; 0x34

	regionHighAddress = regionLowAddress + (AddressType)size;
 8001636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	633b      	str	r3, [r7, #48]	; 0x30

	if (((regionHighAddress < stackHighAddress) && (regionLowAddress > stackLowAddress)) || \
 800163e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001642:	429a      	cmp	r2, r3
 8001644:	d203      	bcs.n	800164e <memoryProtection_isMemoryRegionProtected+0x7a>
 8001646:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800164a:	429a      	cmp	r2, r3
 800164c:	d807      	bhi.n	800165e <memoryProtection_isMemoryRegionProtected+0x8a>
 800164e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001652:	429a      	cmp	r2, r3
 8001654:	d206      	bcs.n	8001664 <memoryProtection_isMemoryRegionProtected+0x90>
		((regionHighAddress < programHighAddress) && (regionLowAddress > programLowAddress)))
 8001656:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800165a:	429a      	cmp	r2, r3
 800165c:	d902      	bls.n	8001664 <memoryProtection_isMemoryRegionProtected+0x90>
	{
		isMemoryRegionProtected = False;
 800165e:	2300      	movs	r3, #0
 8001660:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	return isMemoryRegionProtected;
 8001664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8001668:	4618      	mov	r0, r3
 800166a:	375c      	adds	r7, #92	; 0x5c
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <os_getOsVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_OsVariableType * os_getOsVar(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
    return &OsVar;
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <os_getOsVar+0x10>)
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	380080fc 	.word	0x380080fc

08001688 <os_kernelPanic>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_kernelPanic(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
	CosmOS_CoreVariableType * coreVar;


	coreVar = core_getCoreVar();
 800168e:	f7ff fe37 	bl	8001300 <core_getCoreVar>
 8001692:	6078      	str	r0, [r7, #4]
    coreVar->cfg->kernelPanicHook();
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	4798      	blx	r3

	for(;;);
 800169c:	e7fe      	b.n	800169c <os_kernelPanic+0x14>

0800169e <os_start>:
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
    scheduler_start();
 80016a6:	f000 fac6 	bl	8001c36 <scheduler_start>
};
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop

080016b4 <osBoot_bootValidate>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osBoot_bootValidate(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b08c      	sub	sp, #48	; 0x30
 80016b8:	af00      	add	r7, sp, #0
	BitWidthType  coreId,
					programSectionsNumber;

	CosmOS_ProgramSectionConfigurationType * programSections;

	coreId = CILcore_getCoreId();
 80016ba:	f000 fe5e 	bl	800237a <CILcore_getCoreId>
 80016be:	62b8      	str	r0, [r7, #40]	; 0x28

	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 80016c0:	4a2f      	ldr	r2, [pc, #188]	; (8001780 <osBoot_bootValidate+0xcc>)
 80016c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 80016ca:	4a2d      	ldr	r2, [pc, #180]	; (8001780 <osBoot_bootValidate+0xcc>)
 80016cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	623b      	str	r3, [r7, #32]


	for (BitWidthType i=0; i < programSectionsNumber; i++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016da:	e048      	b.n	800176e <osBoot_bootValidate+0xba>
	{
		osBoot_validateSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 80016dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	461a      	mov	r2, r3
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	4413      	add	r3, r2
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	461a      	mov	r2, r3
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	4413      	add	r3, r2
 80016fe:	6859      	ldr	r1, [r3, #4]
 8001700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	461a      	mov	r2, r3
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	4413      	add	r3, r2
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	61f8      	str	r0, [r7, #28]
 8001714:	61b9      	str	r1, [r7, #24]
 8001716:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8001728:	2300      	movs	r3, #0
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	e016      	b.n	800175c <osBoot_bootValidate+0xa8>
		cosmosAssert( (*pDst++) IS_EQUAL_TO (*pSrc++) );
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	60fa      	str	r2, [r7, #12]
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1c59      	adds	r1, r3, #1
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	603b      	str	r3, [r7, #0]
    if ( IS_NOT( result ) )
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d101      	bne.n	8001754 <osBoot_bootValidate+0xa0>
        os_kernelPanic();
 8001750:	f7ff ff9a 	bl	8001688 <os_kernelPanic>
}
 8001754:	bf00      	nop
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3301      	adds	r3, #1
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	429a      	cmp	r2, r3
 8001764:	d3e3      	bcc.n	800172e <osBoot_bootValidate+0x7a>
}
 8001766:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8001768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800176a:	3301      	adds	r3, #1
 800176c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800176e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001770:	6a3b      	ldr	r3, [r7, #32]
 8001772:	429a      	cmp	r2, r3
 8001774:	d3b2      	bcc.n	80016dc <osBoot_bootValidate+0x28>
	}
};
 8001776:	bf00      	nop
 8001778:	bf00      	nop
 800177a:	3730      	adds	r7, #48	; 0x30
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	0800af50 	.word	0x0800af50

08001784 <osInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osInit_init(BitWidthType entityId)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
    CosmOS_CoreVariableType * coreVar;
    CosmOS_OsVariableType * osVar;
	//TODO check if the os sections were booted and init and start was not called yet

	osVar = os_getOsVar();
 800178c:	f7ff ff72 	bl	8001674 <os_getOsVar>
 8001790:	60f8      	str	r0, [r7, #12]

	CILcore_setCoreVar(osVar);
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fdfd 	bl	8002392 <CILcore_setCoreVar>

    coreVar = core_getCoreVar();
 8001798:	f7ff fdb2 	bl	8001300 <core_getCoreVar>
 800179c:	60b8      	str	r0, [r7, #8]

    switchMemoryProtection_init(coreVar->cfg->codeMemoryHighAddress, \
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6a18      	ldr	r0, [r3, #32]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69d9      	ldr	r1, [r3, #28]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	699a      	ldr	r2, [r3, #24]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f7ff feb0 	bl	800151a <memoryProtection_init>
								coreVar->cfg->codeMemoryLowAddress, \
								coreVar->cfg->stackMemoryHighAddress, \
								coreVar->cfg->stackMemoryLowAddress );
	osBoot_bootValidate();
 80017ba:	f7ff ff7b 	bl	80016b4 <osBoot_bootValidate>

    stackInit_init( coreVar );
 80017be:	68b8      	ldr	r0, [r7, #8]
 80017c0:	f000 fcd1 	bl	8002166 <stackInit_init>

	memoryManager_heapInit();
 80017c4:	f7ff fe71 	bl	80014aa <memoryManager_heapInit>

    coreSync_getBarrier( coreVar, OS_INIT_ID );
 80017c8:	2100      	movs	r1, #0
 80017ca:	68b8      	ldr	r0, [r7, #8]
 80017cc:	f7ff fdcf 	bl	800136e <coreSync_getBarrier>

	__SUPRESS_UNUSED_VAR(entityId);

};
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <permission_tryAccess>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_AccessStateType permission_tryAccess(CosmOS_PermissionsConfigurationType * permission,CosmOS_CoreVariableType * coreVar)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	685b      	ldr	r3, [r3, #4]
    CosmOS_AccessStateType accessState;

    CosmOS_SchedulableVariableType * schedulableVar;

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 80017ea:	61fb      	str	r3, [r7, #28]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	613b      	str	r3, [r7, #16]
    cosmosAssert( IS_NOT( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] & \
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	491c      	ldr	r1, [pc, #112]	; (8001870 <permission_tryAccess+0x98>)
 8001800:	5ccb      	ldrb	r3, [r1, r3]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	4817      	ldr	r0, [pc, #92]	; (8001870 <permission_tryAccess+0x98>)
 8001814:	5cc3      	ldrb	r3, [r0, r3]
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4013      	ands	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf0c      	ite	eq
 8001822:	2301      	moveq	r3, #1
 8001824:	2300      	movne	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <permission_tryAccess+0x5c>
        os_kernelPanic();
 8001830:	f7ff ff2a 	bl	8001688 <os_kernelPanic>
}
 8001834:	bf00      	nop
    return ((( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] >> schedulableVar->cfg->id ) & BITLOCK_MASK ) ? \
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	490b      	ldr	r1, [pc, #44]	; (8001870 <permission_tryAccess+0x98>)
 8001842:	5ccb      	ldrb	r3, [r1, r3]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	fa22 f303 	lsr.w	r3, r2, r3
 8001854:	f003 0301 	and.w	r3, r3, #1
            ACCESS_STATE_ENUM__ALLOWED : ACCESS_STATE_ENUM__DENIED );
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <permission_tryAccess+0x88>
 800185c:	2300      	movs	r3, #0
 800185e:	e001      	b.n	8001864 <permission_tryAccess+0x8c>
 8001860:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    accessState = permission_trySchedulableAccess( permission, schedulableVar );
 8001864:	61bb      	str	r3, [r7, #24]

    return accessState;
 8001866:	69bb      	ldr	r3, [r7, #24]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3720      	adds	r7, #32
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	380000c0 	.word	0x380000c0

08001874 <schedulable_setExecutionStateToFinished>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void schedulable_setExecutionStateToFinished(BitWidthType entityId)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 800187c:	f7ff fd40 	bl	8001300 <core_getCoreVar>
 8001880:	61f8      	str	r0, [r7, #28]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	2302      	movs	r3, #2
 8001892:	74fb      	strb	r3, [r7, #19]
  *
  * @return CosmOS_SchedulableStateType
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setState(CosmOS_SchedulableVariableType * schedulable, CosmOS_SchedulableStateType stateParam)
{
    schedulable->state = stateParam;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	7cfa      	ldrb	r2, [r7, #19]
 8001898:	711a      	strb	r2, [r3, #4]
}
 800189a:	bf00      	nop

    schedulable_setState( schedulableVar, SCHEDULABLE_INSTANCE_ENUM__EXECUTED );

	__SUPRESS_UNUSED_VAR(entityId);
};
 800189c:	bf00      	nop
 800189e:	3720      	adds	r7, #32
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <scheduler_performanceScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_performanceScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b092      	sub	sp, #72	; 0x48
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	613b      	str	r3, [r7, #16]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType scheduler_getSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler)
{
    return (scheduler->threadListIterator);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	68db      	ldr	r3, [r3, #12]
        threadListElementsNum;

    CosmOS_ThreadVariableType *threadVar;


    threadListIterator = scheduler_getSchedulerThreadListIterator(schedulerVar);
 80018ba:	647b      	str	r3, [r7, #68]	; 0x44
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	617b      	str	r3, [r7, #20]
    return (scheduler->cfg->threadListElementsNum);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
    threadListElementsNum = scheduler_getSchedulerThreadListElementsNum(schedulerVar);
 80018c6:	643b      	str	r3, [r7, #64]	; 0x40

    cosmosAssert(threadListIterator < threadListElementsNum);
 80018c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018cc:	429a      	cmp	r2, r3
 80018ce:	bf34      	ite	cc
 80018d0:	2301      	movcc	r3, #1
 80018d2:	2300      	movcs	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	61bb      	str	r3, [r7, #24]
    if ( IS_NOT( result ) )
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <scheduler_performanceScheduling+0x3e>
        os_kernelPanic();
 80018de:	f7ff fed3 	bl	8001688 <os_kernelPanic>
}
 80018e2:	bf00      	nop
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	623b      	str	r3, [r7, #32]
 80018e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018ea:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * scheduler_getSchedulerThreadListThreadVar(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIterator)
{
    return (CosmOS_ThreadVariableType *)(scheduler->cfg->threadList[threadListIterator].threadVar);
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	681b      	ldr	r3, [r3, #0]

    threadVar = scheduler_getSchedulerThreadListThreadVar(schedulerVar, threadListIterator);
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * thread_getThreadSchedulable(CosmOS_ThreadVariableType * thread)
{
    return (CosmOS_SchedulableVariableType *)(thread->schedulable);
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = thread_getThreadSchedulable(threadVar);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = schedulable_getStackPointer(*schedulableVar);
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
    return (schedulable->stackPointer);
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	601a      	str	r2, [r3, #0]

    threadListIterator = ((threadListIterator + 1) % threadListElementsNum);
 8001916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001918:	3301      	adds	r3, #1
 800191a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800191c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001920:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001922:	fb01 f202 	mul.w	r2, r1, r2
 8001926:	1a9b      	subs	r3, r3, r2
 8001928:	647b      	str	r3, [r7, #68]	; 0x44
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	633b      	str	r3, [r7, #48]	; 0x30
 800192e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIteratorParam)
{
    scheduler->threadListIterator = threadListIteratorParam;
 8001932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001936:	60da      	str	r2, [r3, #12]
}
 8001938:	bf00      	nop
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->preemptTick);
 800193e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
    scheduler_setSchedulerThreadListIterator(schedulerVar, threadListIterator);

    preemptTick = scheduler_getSchedulerPreemptTick(schedulerVar);
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
    *timerTicks = preemptTick;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800194a:	601a      	str	r2, [r3, #0]
}
 800194c:	bf00      	nop
 800194e:	3748      	adds	r7, #72	; 0x48
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <scheduler_classicScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_classicScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks, BitWidthType startTick, BitWidthType currentTick)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	617b      	str	r3, [r7, #20]
    return (CosmOS_TaskVariableType *)(scheduler->cfg->idleTaskVar);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    CosmOS_TaskVariableType * taskVar;


    taskVar = scheduler_getSchedulerIdleTaskVar( schedulerVar );
 800196c:	61fb      	str	r3, [r7, #28]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * task_getTaskSchedulable(CosmOS_TaskVariableType * task)
{
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = task_getTaskSchedulable( taskVar );
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fbcb 	bl	800211a <stackInit_schedulableStackInit>
 8001984:	4602      	mov	r2, r0
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	601a      	str	r2, [r3, #0]

    if ( startTick < currentTick )
 800198a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800198c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800198e:	429a      	cmp	r2, r3
 8001990:	d207      	bcs.n	80019a2 <scheduler_classicScheduling+0x4e>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->lastToFirstTaskTicks);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	699a      	ldr	r2, [r3, #24]
    {
        *timerTicks = scheduler_getSchedulerLastToFirstTaskTicks( schedulerVar );
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *timerTicks = startTick - currentTick;
    }
}
 80019a0:	e004      	b.n	80019ac <scheduler_classicScheduling+0x58>
        *timerTicks = startTick - currentTick;
 80019a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a6:	1ad2      	subs	r2, r2, r3
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	601a      	str	r2, [r3, #0]
}
 80019ac:	bf00      	nop
 80019ae:	3720      	adds	r7, #32
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <scheduler_scheduleNextInstance>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType scheduler_scheduleNextInstance(StackPointerType stackPointer)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b0b6      	sub	sp, #216	; 0xd8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;
    CosmOS_SchedulableVariableType * priorSchedulableVar;


    coreVar = core_getCoreVar();
 80019bc:	f7ff fca0 	bl	8001300 <core_getCoreVar>
 80019c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80019c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (core->schedulerVar);
 80019cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019d0:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 80019d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80019d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80019da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return (core->schedulableInExecution);
 80019de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019e2:	685b      	ldr	r3, [r3, #4]
    priorSchedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 80019e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80019e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80019ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (scheduler->cfg->hyperTick);
 80019f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 80019f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80019fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a00:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->schedulerState);
 8001a04:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a08:	7c1b      	ldrb	r3, [r3, #16]
    schedulerState = scheduler_getSchedulerState( schedulerVar );
 8001a0a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->currentTick);
 8001a16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a1a:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8001a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001a20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (scheduler->scheduleTableIterator);
 8001a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a2c:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->cfg->scheduleTableElementsNum);
 8001a38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8001a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8001a52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    //TODO: this should be moved to the sysTick interrupt with higher priority to have faster response - without else, that should stay here
    if ( schedulerState IS_EQUAL_TO SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK )
 8001a68:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d109      	bne.n	8001a84 <scheduler_scheduleNextInstance+0xd0>
 8001a70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (schedulable->state);
 8001a78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a7c:	791b      	ldrb	r3, [r3, #4]
    {
        CosmOS_SchedulableStateType schedulableState;

        schedulableState = schedulable_getState( priorSchedulableVar );
 8001a7e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8001a82:	e00a      	b.n	8001a9a <scheduler_scheduleNextInstance+0xe6>
 8001a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	67fb      	str	r3, [r7, #124]	; 0x7c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setStackPointer(CosmOS_SchedulableVariableType * schedulable, StackPointerType stackPointerParam)
{
    schedulable->stackPointer = stackPointerParam;
 8001a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001a96:	609a      	str	r2, [r3, #8]
}
 8001a98:	bf00      	nop
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_setStackPointer( priorSchedulableVar, stackPointer );
    }

    if ( scheduleTableElementsNum AND startTick IS_EQUAL_TO currentTick )
 8001a9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d060      	beq.n	8001b64 <scheduler_scheduleNextInstance+0x1b0>
 8001aa2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d15a      	bne.n	8001b64 <scheduler_scheduleNextInstance+0x1b0>
 8001aae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ab2:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	677b      	str	r3, [r7, #116]	; 0x74
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	673b      	str	r3, [r7, #112]	; 0x70
 8001ac0:	f107 0318 	add.w	r3, r7, #24
 8001ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8001acc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ad0:	667b      	str	r3, [r7, #100]	; 0x64
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8001ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001ad8:	663a      	str	r2, [r7, #96]	; 0x60
 8001ada:	65fb      	str	r3, [r7, #92]	; 0x5c
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8001adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	65bb      	str	r3, [r7, #88]	; 0x58
 8001aec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aee:	657b      	str	r3, [r7, #84]	; 0x54
 8001af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af2:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8001af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af6:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8001af8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 fb0c 	bl	800211a <stackInit_schedulableStackInit>
 8001b02:	4602      	mov	r2, r0
 8001b04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b06:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 8001b08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	653b      	str	r3, [r7, #80]	; 0x50
 8001b0e:	2301      	movs	r3, #1
 8001b10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    schedulable->state = stateParam;
 8001b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b16:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001b1a:	711a      	strb	r2, [r3, #4]
}
 8001b1c:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8001b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001b26:	fbb3 f2f2 	udiv	r2, r3, r2
 8001b2a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001b2c:	fb01 f202 	mul.w	r2, r1, r2
 8001b30:	1a9a      	subs	r2, r3, r2
 8001b32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b34:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8001b36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001b3c:	64ba      	str	r2, [r7, #72]	; 0x48
 8001b3e:	647b      	str	r3, [r7, #68]	; 0x44
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8001b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b44:	609a      	str	r2, [r3, #8]
}
 8001b46:	bf00      	nop
 8001b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b4a:	643b      	str	r3, [r7, #64]	; 0x40
    return (task->cfg->wcet);
 8001b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8001b52:	63fb      	str	r3, [r7, #60]	; 0x3c
    *timerTicks = wcet;
 8001b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001b56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b58:	601a      	str	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,\
										&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001b62:	e00c      	b.n	8001b7e <scheduler_scheduleNextInstance+0x1ca>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 8001b64:	f107 0318 	add.w	r3, r7, #24
 8001b68:	f107 0210 	add.w	r2, r7, #16
 8001b6c:	f107 010c 	add.w	r1, r7, #12
 8001b70:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001b74:	f7ff fe96 	bl	80018a4 <scheduler_performanceScheduling>
												&stackPointerRetVal, &timerTicks );
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling( schedulerVar, &schedulableVar,\
											&stackPointerRetVal, &timerTicks, startTick, currentTick );

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
    schedulable->stackPointer = stackPointerParam;
 8001b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b8a:	609a      	str	r2, [r3, #8]
}
 8001b8c:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4619      	mov	r1, r3
 8001b92:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001b96:	f7ff fbbf 	bl	8001318 <core_setSchedulableIntoCurrentContext>
 8001b9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8001ba4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_SchedulerStateType schedulerStateParam)
{
    scheduler->schedulerState = schedulerStateParam;
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001baa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001bae:	741a      	strb	r2, [r3, #16]
}
 8001bb0:	bf00      	nop
 8001bb2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->cfg->maxTimerTick);
 8001bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24

    scheduler_setSchedulerState( schedulerVar, schedulerState );

	maxTimerTick = scheduler_getSchedulerMaxTimerTick( schedulerVar );
 8001bbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ( maxTimerTick < timerTicks )
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d202      	bcs.n	8001bd2 <scheduler_scheduleNextInstance+0x21e>
	{
		timerTicks = maxTimerTick;
 8001bcc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bd0:	61bb      	str	r3, [r7, #24]
	}

    currentTick = ( ( currentTick + timerTicks ) % hyperTick );
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bd8:	4413      	add	r3, r2
 8001bda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8001be2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001be6:	fb01 f202 	mul.w	r2, r1, r2
 8001bea:	1a9b      	subs	r3, r3, r2
 8001bec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001bfa:	61fb      	str	r3, [r7, #28]
    scheduler->currentTick = currentTickParam;
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	69fa      	ldr	r2, [r7, #28]
 8001c00:	605a      	str	r2, [r3, #4]
}
 8001c02:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4619      	mov	r1, r3
 8001c08:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8001c0c:	f7ff fc96 	bl	800153c <memoryProtection_setMemoryProtection>
 8001c10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    return (scheduler->cfg->timerTickCount);
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28

	timerTickCount = scheduler_getSchedulerTimerTickCount( schedulerVar );
 8001c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    CILsysTimer_setTicks( timerTicks, timerTickCount );
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 ff72 	bl	8002b10 <CILsysTimer_setTicks>

    return stackPointerRetVal;
 8001c2c:	693b      	ldr	r3, [r7, #16]
};
 8001c2e:	4618      	mov	r0, r3
 8001c30:	37d8      	adds	r7, #216	; 0xd8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <scheduler_start>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_start(void)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b0b0      	sub	sp, #192	; 0xc0
 8001c3a:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8001c3c:	f7ff fb60 	bl	8001300 <core_getCoreVar>
 8001c40:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
 8001c44:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (core->schedulerVar);
 8001c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c50:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8001c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return (scheduler->cfg->hyperTick);
 8001c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8001c66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001c6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (scheduler->currentTick);
 8001c72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c76:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8001c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->scheduleTableIterator);
 8001c84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c88:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->cfg->scheduleTableElementsNum);
 8001c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8001c9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    if ( scheduleTableElementsNum )
 8001ca0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d020      	beq.n	8001cea <scheduler_start+0xb4>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	bf8c      	ite	hi
 8001cb2:	2301      	movhi	r3, #1
 8001cb4:	2300      	movls	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if ( IS_NOT( result ) )
 8001cba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <scheduler_start+0x8e>
        os_kernelPanic();
 8001cc0:	f7ff fce2 	bl	8001688 <os_kernelPanic>
}
 8001cc4:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001ccc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8001cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    }

    if ( scheduleTableElementsNum AND (startTick IS_EQUAL_TO currentTick) )
 8001cea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d05f      	beq.n	8001db2 <scheduler_start+0x17c>
 8001cf2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cf6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d159      	bne.n	8001db2 <scheduler_start+0x17c>
 8001cfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001d02:	67bb      	str	r3, [r7, #120]	; 0x78
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	677b      	str	r3, [r7, #116]	; 0x74
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	673b      	str	r3, [r7, #112]	; 0x70
 8001d0e:	f107 0310 	add.w	r3, r7, #16
 8001d12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d1e:	667b      	str	r3, [r7, #100]	; 0x64
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8001d20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d26:	663a      	str	r2, [r7, #96]	; 0x60
 8001d28:	65fb      	str	r3, [r7, #92]	; 0x5c
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8001d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	4413      	add	r3, r2
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d3c:	657b      	str	r3, [r7, #84]	; 0x54
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8001d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d40:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8001d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d44:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8001d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f9e5 	bl	800211a <stackInit_schedulableStackInit>
 8001d50:	4602      	mov	r2, r0
 8001d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d54:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 8001d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	653b      	str	r3, [r7, #80]	; 0x50
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    schedulable->state = stateParam;
 8001d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d64:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001d68:	711a      	strb	r2, [r3, #4]
}
 8001d6a:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8001d6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001d74:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d78:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d7a:	fb01 f202 	mul.w	r2, r1, r2
 8001d7e:	1a9a      	subs	r2, r3, r2
 8001d80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d82:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8001d84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001d8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8001d8c:	647b      	str	r3, [r7, #68]	; 0x44
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8001d8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d92:	609a      	str	r2, [r3, #8]
}
 8001d94:	bf00      	nop
 8001d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d98:	643b      	str	r3, [r7, #64]	; 0x40
    return (task->cfg->wcet);
 8001d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8001da0:	63fb      	str	r3, [r7, #60]	; 0x3c
    *timerTicks = wcet;
 8001da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001da4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001da6:	601a      	str	r2, [r3, #0]
}
 8001da8:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,\
											&scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
 8001db0:	e00b      	b.n	8001dca <scheduler_start+0x194>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	f107 020c 	add.w	r2, r7, #12
 8001dba:	1d39      	adds	r1, r7, #4
 8001dbc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8001dc0:	f7ff fd70 	bl	80018a4 <scheduler_performanceScheduling>
												&stackPointerRetVal, &timerTicks );
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling( schedulerVar, &schedulableVar,\
											&stackPointerRetVal, &timerTicks, startTick, currentTick );

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    schedulable->stackPointer = stackPointerParam;
 8001dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001dd6:	609a      	str	r2, [r3, #8]
}
 8001dd8:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001de2:	f7ff fa99 	bl	8001318 <core_setSchedulableIntoCurrentContext>
 8001de6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001dea:	637b      	str	r3, [r7, #52]	; 0x34
 8001dec:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001df0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    scheduler->schedulerState = schedulerStateParam;
 8001df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df6:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001dfa:	741a      	strb	r2, [r3, #16]
}
 8001dfc:	bf00      	nop
 8001dfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->cfg->maxTimerTick);
 8001e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24

    scheduler_setSchedulerState( schedulerVar, schedulerState );

	maxTimerTick = scheduler_getSchedulerMaxTimerTick( schedulerVar );
 8001e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if ( maxTimerTick < timerTicks )
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d202      	bcs.n	8001e1e <scheduler_start+0x1e8>
	{
		timerTicks = maxTimerTick;
 8001e18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e1c:	613b      	str	r3, [r7, #16]
	}

    currentTick = ( currentTick + timerTicks ) % hyperTick;
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e24:	4413      	add	r3, r2
 8001e26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001e2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8001e2e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001e32:	fb01 f202 	mul.w	r2, r1, r2
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001e3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e46:	617b      	str	r3, [r7, #20]
    scheduler->currentTick = currentTickParam;
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	605a      	str	r2, [r3, #4]
}
 8001e4e:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar , schedulableVar );
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4619      	mov	r1, r3
 8001e54:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8001e58:	f7ff fb70 	bl	800153c <memoryProtection_setMemoryProtection>
 8001e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e60:	623b      	str	r3, [r7, #32]
 8001e62:	2302      	movs	r3, #2
 8001e64:	77fb      	strb	r3, [r7, #31]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreOsState(CosmOS_CoreVariableType * core, CosmOS_OsState osStateParam)
{
    core->osState = osStateParam;
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	7ffa      	ldrb	r2, [r7, #31]
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    return (scheduler->cfg->timerTickCount);
 8001e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28

	core_setCoreOsState( coreVar, OS_STATE_ENUM__STARTED );

	timerTickCount = scheduler_getSchedulerTimerTickCount( schedulerVar );
 8001e7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    CILsysTimer_startTimer( timerTicks, timerTickCount );
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fe29 	bl	8002adc <CILsysTimer_startTimer>

    CILstack_setStackPointer( stackPointerRetVal );
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f000 fd77 	bl	8002980 <CILstack_setStackPointer>
};
 8001e92:	bf00      	nop
 8001e94:	37c0      	adds	r7, #192	; 0xc0
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <schedulerSync_sync>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SchedulerSyncStateType schedulerSync_sync(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_CoreVariableType * coreVar, BitWidthType currentTick, BitWidthType hyperTick)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b096      	sub	sp, #88	; 0x58
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	603b      	str	r3, [r7, #0]

    CosmOS_BooleanType syncInitState;

    CosmOS_SchedulerSyncStateType schedulerState = SCHEDULER_SYNC_STATE_ENUM__NOT_IN_SYNC;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->syncInitState);
 8001eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001eb2:	7e1b      	ldrb	r3, [r3, #24]


    syncInitState = scheduler_getSchedulerSyncInitState( schedulerVar );
 8001eb4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    if ( __COSMOS_UNLIKELY( syncInitState IS_EQUAL_TO False ) )
 8001eb8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d030      	beq.n	8001f2c <schedulerSync_sync+0x92>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->firstSyncTaskStartTick);
 8001ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
    {
        BitWidthType firstSyncTaskStartTick;


        firstSyncTaskStartTick = scheduler_getSchedulerFirstSyncTaskStartTick( schedulerVar );
 8001ed4:	647b      	str	r3, [r7, #68]	; 0x44

        if ( firstSyncTaskStartTick IS_EQUAL_TO currentTick )
 8001ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d150      	bne.n	8001f80 <schedulerSync_sync+0xe6>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	623b      	str	r3, [r7, #32]
    return (scheduler->cfg->syncTicks);
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks,
                          nextTick;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8001ee8:	643b      	str	r3, [r7, #64]	; 0x40

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eee:	4413      	add	r3, r2
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	fbb3 f2f2 	udiv	r2, r3, r2
 8001ef6:	6839      	ldr	r1, [r7, #0]
 8001ef8:	fb01 f202 	mul.w	r2, r1, r2
 8001efc:	1a9b      	subs	r3, r3, r2
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerNextSyncTick(CosmOS_SchedulerVariableType * scheduler, BitWidthType paramNextSyncTick)
{
    scheduler->nextSyncTick = paramNextSyncTick;
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0c:	615a      	str	r2, [r3, #20]
}
 8001f0e:	bf00      	nop
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	633b      	str	r3, [r7, #48]	; 0x30
 8001f14:	2301      	movs	r3, #1
 8001f16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerSyncInitState(CosmOS_SchedulerVariableType * scheduler, CosmOS_BooleanType paramSyncInitState)
{
    scheduler->syncInitState = paramSyncInitState;
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001f20:	761a      	strb	r2, [r3, #24]
}
 8001f22:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            scheduler_setSchedulerSyncInitState( schedulerVar, True );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8001f24:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8001f28:	657b      	str	r3, [r7, #84]	; 0x54
 8001f2a:	e029      	b.n	8001f80 <schedulerSync_sync+0xe6>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	61fb      	str	r3, [r7, #28]
    return (scheduler->nextSyncTick);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	695b      	ldr	r3, [r3, #20]
    else
    {
        BitWidthType nextTick;


        nextTick = scheduler_getSchedulerNextSyncTick( schedulerVar );
 8001f34:	64fb      	str	r3, [r7, #76]	; 0x4c

        if ( __COSMOS_UNLIKELY( nextTick IS_EQUAL_TO currentTick ) )
 8001f36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <schedulerSync_sync+0xe6>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->syncTicks);
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8001f52:	64bb      	str	r3, [r7, #72]	; 0x48

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f58:	4413      	add	r3, r2
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f60:	6839      	ldr	r1, [r7, #0]
 8001f62:	fb01 f202 	mul.w	r2, r1, r2
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
 8001f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f70:	617b      	str	r3, [r7, #20]
    scheduler->nextSyncTick = paramNextSyncTick;
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	615a      	str	r2, [r3, #20]
}
 8001f78:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8001f7a:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8001f7e:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    if ( schedulerState IS_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 8001f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f82:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8001f86:	d107      	bne.n	8001f98 <schedulerSync_sync+0xfe>
    {
        coreSync_getBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8001f88:	2103      	movs	r1, #3
 8001f8a:	68b8      	ldr	r0, [r7, #8]
 8001f8c:	f7ff f9ef 	bl	800136e <coreSync_getBarrier>
        coreSync_reactivateBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8001f90:	2103      	movs	r1, #3
 8001f92:	68b8      	ldr	r0, [r7, #8]
 8001f94:	f7ff fa53 	bl	800143e <coreSync_reactivateBarrier>
    }

    return schedulerState;
 8001f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
};
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3758      	adds	r7, #88	; 0x58
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <spinlock_getSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_getSpinlock(BitWidthType id)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b090      	sub	sp, #64	; 0x40
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 8001faa:	f7ff fb63 	bl	8001674 <os_getOsVar>
 8001fae:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8001fb0:	464b      	mov	r3, r9
 8001fb2:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 8001fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fba:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	bf34      	ite	cc
 8001fcc:	2301      	movcc	r3, #1
 8001fce:	2300      	movcs	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <spinlock_getSpinlock+0x3c>
        os_kernelPanic();
 8001fda:	f7ff fb55 	bl	8001688 <os_kernelPanic>
}
 8001fde:	bf00      	nop
 8001fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe2:	61fb      	str	r3, [r7, #28]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SpinlockVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SpinlockVariableType * os_getOsSpinlockVar(CosmOS_OsVariableType * osVar, BitWidthType spinlockId)
{
    return (&(osVar->spinlockVars[spinlockId]));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	691a      	ldr	r2, [r3, #16]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8001ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ffa:	623b      	str	r3, [r7, #32]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType spinlock_willCauseDeadlock(CosmOS_CoreVariableType * coreVar, CosmOS_SpinlockVariableType * spinlockVar)
{
    return ((spinlockVar->spinlock IS_EQUAL_TO (BitWidthType)SPINLOCK_STATE_ENUM__OCCUPIED)\
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	681b      	ldr	r3, [r3, #0]
			AND (coreVar->schedulableInExecution IS_EQUAL_TO spinlockVar->schedulableOwner)) ? True : False;
 8002000:	2b01      	cmp	r3, #1
 8002002:	d107      	bne.n	8002014 <spinlock_getSpinlock+0x72>
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	685a      	ldr	r2, [r3, #4]
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d101      	bne.n	8002014 <spinlock_getSpinlock+0x72>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <spinlock_getSpinlock+0x74>
 8002014:	2300      	movs	r3, #0
 8002016:	b2db      	uxtb	r3, r3

	willCauseDeadlock = spinlock_willCauseDeadlock(coreVar, spinlockVar);
 8002018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if( willCauseDeadlock )
 800201c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <spinlock_getSpinlock+0x88>
	{
		spinlockState = SPINLOCK_STATE_ENUM__ERROR;
 8002024:	23ff      	movs	r3, #255	; 0xff
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002028:	e008      	b.n	800203c <spinlock_getSpinlock+0x9a>
	}
	else
	{
		spinlockState = CILspinlock_getSpinlock( &(spinlockVar->spinlock) );
 800202a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fc19 	bl	8002864 <CILspinlock_getSpinlock>
 8002032:	63f8      	str	r0, [r7, #60]	; 0x3c
		spinlockVar->schedulableOwner = coreVar->schedulableInExecution;
 8002034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	605a      	str	r2, [r3, #4]
	}

    return spinlockState;
 800203c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800203e:	4618      	mov	r0, r3
 8002040:	3740      	adds	r7, #64	; 0x40
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <spinlock_trySpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType spinlock_trySpinlock(BitWidthType id)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b08c      	sub	sp, #48	; 0x30
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 800204e:	f7ff fb11 	bl	8001674 <os_getOsVar>
 8002052:	62f8      	str	r0, [r7, #44]	; 0x2c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8002054:	464b      	mov	r3, r9
 8002056:	60bb      	str	r3, [r7, #8]
    return (CosmOS_CoreVariableType *)result;
 8002058:	68bb      	ldr	r3, [r7, #8]
    coreVar = CILcore_getCoreVar();
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
 800205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205e:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfSpinlocks);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 8002066:	627b      	str	r3, [r7, #36]	; 0x24

	cosmosAssert( id < numberOfSpinlocks );
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	429a      	cmp	r2, r3
 800206e:	bf34      	ite	cc
 8002070:	2301      	movcc	r3, #1
 8002072:	2300      	movcs	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	613b      	str	r3, [r7, #16]
    if ( IS_NOT( result ) )
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <spinlock_trySpinlock+0x3c>
        os_kernelPanic();
 800207e:	f7ff fb03 	bl	8001688 <os_kernelPanic>
}
 8002082:	bf00      	nop
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	61bb      	str	r3, [r7, #24]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	617b      	str	r3, [r7, #20]
    return (&(osVar->spinlockVars[spinlockId]));
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	691a      	ldr	r2, [r3, #16]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8002096:	623b      	str	r3, [r7, #32]

	spinlockState = CILspinlock_trySpinlock( &(spinlockVar->spinlock) );
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	4618      	mov	r0, r3
 800209c:	f000 fbfb 	bl	8002896 <CILspinlock_trySpinlock>
 80020a0:	61f8      	str	r0, [r7, #28]

	if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d103      	bne.n	80020b0 <spinlock_trySpinlock+0x6a>
	{
		spinlockVar->schedulableOwner = coreVar->schedulableInExecution;
 80020a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	605a      	str	r2, [r3, #4]
	}

    return spinlockState;
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	b2db      	uxtb	r3, r3
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3730      	adds	r7, #48	; 0x30
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <spinlock_releaseSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_releaseSpinlock(BitWidthType id)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	CosmOS_OsVariableType * osVar;
	CosmOS_SpinlockVariableType * spinlockVar;

    osVar = os_getOsVar();
 80020c4:	f7ff fad6 	bl	8001674 <os_getOsVar>
 80020c8:	6278      	str	r0, [r7, #36]	; 0x24
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	60bb      	str	r3, [r7, #8]
    return (osVar->cfg->numberOfSpinlocks);
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 80020d4:	623b      	str	r3, [r7, #32]

	cosmosAssert( id < numberOfSpinlocks );
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	429a      	cmp	r2, r3
 80020dc:	bf34      	ite	cc
 80020de:	2301      	movcc	r3, #1
 80020e0:	2300      	movcs	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <spinlock_releaseSpinlock+0x34>
        os_kernelPanic();
 80020ec:	f7ff facc 	bl	8001688 <os_kernelPanic>
}
 80020f0:	bf00      	nop
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	613b      	str	r3, [r7, #16]
    return (&(osVar->spinlockVars[spinlockId]));
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8002104:	61fb      	str	r3, [r7, #28]

	spinlockState = CILspinlock_releaseSpinlock( &(spinlockVar->spinlock) );
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	4618      	mov	r0, r3
 800210a:	f000 fbdd 	bl	80028c8 <CILspinlock_releaseSpinlock>
 800210e:	61b8      	str	r0, [r7, #24]

	return spinlockState;
 8002110:	69bb      	ldr	r3, [r7, #24]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3728      	adds	r7, #40	; 0x28
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <stackInit_schedulableStackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType stackInit_schedulableStackInit(CosmOS_SchedulableVariableType  * schedulable)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b08c      	sub	sp, #48	; 0x30
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	60fb      	str	r3, [r7, #12]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
    StackPointerType stackPointer;

    CosmOS_StackConfigurationType * stack;


    stack = schedulable_getStack( schedulable );
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	613b      	str	r3, [r7, #16]
    return (schedulable->cfg->handler);
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
    handler = schedulable_getHandler( schedulable );
 8002138:	62bb      	str	r3, [r7, #40]	; 0x28
 800213a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213c:	617b      	str	r3, [r7, #20]
    return (stack->stackLowAddress);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	685b      	ldr	r3, [r3, #4]

    stackLowAddress = stack_getStackLowAddress( stack );
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002146:	61bb      	str	r3, [r7, #24]
    return (stack->stackHighAddress);
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 800214c:	623b      	str	r3, [r7, #32]

    stackPointer = CILstack_stackInit( stackLowAddress, stackHighAddress, (BitWidthType)handler );
 800214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002150:	461a      	mov	r2, r3
 8002152:	6a39      	ldr	r1, [r7, #32]
 8002154:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002156:	f000 fbd0 	bl	80028fa <CILstack_stackInit>
 800215a:	61f8      	str	r0, [r7, #28]

    return stackPointer;
 800215c:	69fb      	ldr	r3, [r7, #28]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3730      	adds	r7, #48	; 0x30
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <stackInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void stackInit_init(CosmOS_CoreVariableType * coreVar)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b094      	sub	sp, #80	; 0x50
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->cfg->numberOfPrograms);
 8002172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
                  stackPointerRetVal;

    CosmOS_ThreadVariableType * threadVar;
    CosmOS_ProgramVariableType * programVar;

    numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 8002178:	647b      	str	r3, [r7, #68]	; 0x44

    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 800217a:	2300      	movs	r3, #0
 800217c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800217e:	e037      	b.n	80021f0 <stackInit_init+0x8a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
 8002184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002186:	623b      	str	r3, [r7, #32]
    return (&(core->programVars[programIterator]));
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	4413      	add	r3, r2
    {
        programVar = core_getCoreProgramVar( coreVar, programIterator );
 8002192:	643b      	str	r3, [r7, #64]	; 0x40
 8002194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->numberOfThreads);
 8002198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	689b      	ldr	r3, [r3, #8]
        numberOfThreads = program_getProgramNumberOfThreads( programVar );
 800219e:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 80021a0:	2300      	movs	r3, #0
 80021a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80021a4:	e01d      	b.n	80021e2 <stackInit_init+0x7c>
 80021a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ac:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * program_getProgramThread(CosmOS_ProgramVariableType * program, BitWidthType threadIterator)
{
    return (&(program->threadVars[threadIterator]));
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
        {
            CosmOS_SchedulableVariableType * schedulableVar;


            threadVar = program_getProgramThread( programVar, threadIterator );
 80021b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80021ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	685b      	ldr	r3, [r3, #4]
            schedulableVar = thread_getThreadSchedulable( threadVar );
 80021c2:	637b      	str	r3, [r7, #52]	; 0x34

            stackPointerRetVal = stackInit_schedulableStackInit( schedulableVar );
 80021c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80021c6:	f7ff ffa8 	bl	800211a <stackInit_schedulableStackInit>
 80021ca:	6338      	str	r0, [r7, #48]	; 0x30
 80021cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d2:	61bb      	str	r3, [r7, #24]
    schedulable->stackPointer = stackPointerParam;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	609a      	str	r2, [r3, #8]
}
 80021da:	bf00      	nop
        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 80021dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021de:	3301      	adds	r3, #1
 80021e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80021e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d3dd      	bcc.n	80021a6 <stackInit_init+0x40>
    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 80021ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ec:	3301      	adds	r3, #1
 80021ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d3c3      	bcc.n	8002180 <stackInit_init+0x1a>
            schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
        }
    }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3750      	adds	r7, #80	; 0x50
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <sysCalls_bitWidthType_ret_void>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysCalls_bitWidthType_ret_void(BitWidthType id)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
    CILsysCalls_bitWidthType_ret_void( id );
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fc2e 	bl	8002a6c <CILsysCalls_bitWidthType_ret_void>
};
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <sysCalls_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_ret_bitWidthType(BitWidthType id)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_ret_bitWidthType( id );
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 fc2e 	bl	8002a82 <CILsysCalls_bitWidthType_ret_bitWidthType>
 8002226:	60f8      	str	r0, [r7, #12]

    return returnValue;
 8002228:	68fb      	ldr	r3, [r7, #12]
};
 800222a:	4618      	mov	r0, r3
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_bitWidthType_ret_bitWidthType(BitWidthType id, BitWidthType arg)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType( id, arg );
 800223c:	6839      	ldr	r1, [r7, #0]
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fc2d 	bl	8002a9e <CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
 8002244:	60f8      	str	r0, [r7, #12]

    return returnValue;
 8002246:	68fb      	ldr	r3, [r7, #12]
};
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType(BitWidthType id, void * ptr, BitWidthType arg)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType( id, ptr, arg );
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fc2b 	bl	8002abc <CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 8002266:	6178      	str	r0, [r7, #20]

    return returnValue;
 8002268:	697b      	ldr	r3, [r7, #20]
};
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <sysJobs_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysJobs_dispatcher(BitWidthType entityId)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b098      	sub	sp, #96	; 0x60
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]

    CosmOS_CoreVariableType * coreVar;
    CosmOS_SysJobsVariableType * sysJobsVar;


    coreVar = core_getCoreVar();
 800227a:	f7ff f841 	bl	8001300 <core_getCoreVar>
 800227e:	6578      	str	r0, [r7, #84]	; 0x54
 8002280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->sysJobs);
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002286:	69db      	ldr	r3, [r3, #28]
    sysJobsVar = core_getCoreOsSysJobs( coreVar );
 8002288:	653b      	str	r3, [r7, #80]	; 0x50
 800228a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800228c:	633b      	str	r3, [r7, #48]	; 0x30
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs)
{
    return (sysJobs->currentTick);
 800228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002290:	685b      	ldr	r3, [r3, #4]

    sysJobsCurrentTick = sysJobs_getSysJobsCurrentTick( sysJobsVar );
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002294:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
    return (sysJobs->cfg->numOfGroups);
 8002298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
    numOfGroups = sysJobs_getSysJobsNumOfGroups( sysJobsVar );
 800229e:	64bb      	str	r3, [r7, #72]	; 0x48

    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 80022a0:	2300      	movs	r3, #0
 80022a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022a4:	e049      	b.n	800233a <sysJobs_dispatcher+0xc8>
 80022a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80022aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsGroupTickMultiplicator(CosmOS_SysJobsVariableType * sysJobs, BitWidthType groupId)
{
    return (sysJobs->cfg->groups[groupId].tickMultiplicator);
 80022ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	689b      	ldr	r3, [r3, #8]
    {
        BitWidthType  groupTickMultiplicator;


        groupTickMultiplicator = sysJobs_getSysJobsGroupTickMultiplicator( sysJobsVar, groupIterator );
 80022c2:	643b      	str	r3, [r7, #64]	; 0x40

        if ( IS_NOT( sysJobsCurrentTick % groupTickMultiplicator ) )
 80022c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80022c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80022cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80022ce:	fb01 f202 	mul.w	r2, r1, r2
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d12d      	bne.n	8002334 <sysJobs_dispatcher+0xc2>
 80022d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022de:	617b      	str	r3, [r7, #20]
    return (CosmOS_GenericVoidType *)(sysJobs->cfg->groups[groupId].handlers);
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	681b      	ldr	r3, [r3, #0]
        {
            BitWidthType numOfHandlers;
            CosmOS_GenericVoidType * handlers;


            handlers = sysJobs_getSysJobsGroupHandlers( sysJobsVar, groupIterator );
 80022f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022fc:	61fb      	str	r3, [r7, #28]
    return (sysJobs->cfg->groups[groupId].numOfHandlers);
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6819      	ldr	r1, [r3, #0]
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	685b      	ldr	r3, [r3, #4]
            numOfHandlers = sysJobs_getSysJobsGroupNumOfHandlers( sysJobsVar, groupIterator );
 8002312:	63bb      	str	r3, [r7, #56]	; 0x38

            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 8002314:	2300      	movs	r3, #0
 8002316:	65bb      	str	r3, [r7, #88]	; 0x58
 8002318:	e008      	b.n	800232c <sysJobs_dispatcher+0xba>
            {
                handlers[handlerIterator]();
 800231a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002320:	4413      	add	r3, r2
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4798      	blx	r3
            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 8002326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002328:	3301      	adds	r3, #1
 800232a:	65bb      	str	r3, [r7, #88]	; 0x58
 800232c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800232e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002330:	429a      	cmp	r2, r3
 8002332:	d3f2      	bcc.n	800231a <sysJobs_dispatcher+0xa8>
    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8002334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002336:	3301      	adds	r3, #1
 8002338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800233a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800233c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233e:	429a      	cmp	r2, r3
 8002340:	d3b1      	bcc.n	80022a6 <sysJobs_dispatcher+0x34>
 8002342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002344:	60bb      	str	r3, [r7, #8]
    return (sysJobs->cfg->hyperTick);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
            }
        }
    }

    hyperTick = sysJobs_getSysJobsHyperTick( sysJobsVar );
 800234c:	647b      	str	r3, [r7, #68]	; 0x44

    sysJobsCurrentTick = ( ( sysJobsCurrentTick + 1 ) % hyperTick );
 800234e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002350:	3301      	adds	r3, #1
 8002352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002354:	fbb3 f2f2 	udiv	r2, r3, r2
 8002358:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800235a:	fb01 f202 	mul.w	r2, r1, r2
 800235e:	1a9b      	subs	r3, r3, r2
 8002360:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002368:	60fb      	str	r3, [r7, #12]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void sysJobs_setSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs, BitWidthType currentTickParam)
{
    sysJobs->currentTick = currentTickParam;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	605a      	str	r2, [r3, #4]
}
 8002370:	bf00      	nop
    sysJobs_setSysJobsCurrentTick( sysJobsVar, sysJobsCurrentTick );

	__SUPRESS_UNUSED_VAR(entityId);

};
 8002372:	bf00      	nop
 8002374:	3760      	adds	r7, #96	; 0x60
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <CILcore_getCoreId>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILcore_getCoreId(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
    return (HAL_GetCurrentCPUID() == CM7_CPUID) ? CORE_0_ID : CORE_1_ID;
 800237e:	f002 fe27 	bl	8004fd0 <HAL_GetCurrentCPUID>
 8002382:	4603      	mov	r3, r0
 8002384:	2b03      	cmp	r3, #3
 8002386:	bf14      	ite	ne
 8002388:	2301      	movne	r3, #1
 800238a:	2300      	moveq	r3, #0
 800238c:	b2db      	uxtb	r3, r3
}
 800238e:	4618      	mov	r0, r3
 8002390:	bd80      	pop	{r7, pc}

08002392 <CILcore_setCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILcore_setCoreVar(CosmOS_OsVariableType * osVar)
{
 8002392:	b580      	push	{r7, lr}
 8002394:	b08a      	sub	sp, #40	; 0x28
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
    BitWidthType coreId,
                numberOfCores;

    CosmOS_CoreVariableType * coreVar;

    coreId = CILcore_getCoreId();
 800239a:	f7ff ffee 	bl	800237a <CILcore_getCoreId>
 800239e:	6278      	str	r0, [r7, #36]	; 0x24
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfCores);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 80023aa:	623b      	str	r3, [r7, #32]

    cosmosAssert( coreId < numberOfCores );
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	bf34      	ite	cc
 80023b4:	2301      	movcc	r3, #1
 80023b6:	2300      	movcs	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	613b      	str	r3, [r7, #16]
    if ( IS_NOT( result ) )
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <CILcore_setCoreVar+0x34>
        os_kernelPanic();
 80023c2:	f7ff f961 	bl	8001688 <os_kernelPanic>
}
 80023c6:	bf00      	nop
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	617b      	str	r3, [r7, #20]
    return (&(osVar->coreVars[coreId]));
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	015b      	lsls	r3, r3, #5
 80023d8:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, coreId );
 80023da:	61fb      	str	r3, [r7, #28]

    //must be changed, not valid for all compilers
    __asm volatile("MOV R9,%[coreVariable]" : [coreVariable] "=r" (coreVar));
 80023dc:	4699      	mov	r9, r3
 80023de:	61fb      	str	r3, [r7, #28]
}
 80023e0:	bf00      	nop
 80023e2:	3728      	adds	r7, #40	; 0x28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <CILGPIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILGPIO_togglePin(void *GPIOx, BitWidthType GPIO_Pin)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin( GPIOx, (uint16_t)GPIO_Pin );
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	4619      	mov	r1, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f004 f974 	bl	80066e6 <HAL_GPIO_TogglePin>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <CILmemoryProtection_init>:
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_init(AddressType codeMemoryHighAddress,\
												AddressType codeMemoryLowAddress, \
												AddressType stackMemoryHighAddress, \
												AddressType stackMemoryLowAddress)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b092      	sub	sp, #72	; 0x48
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002416:	f107 0310 	add.w	r3, r7, #16
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
 8002420:	609a      	str	r2, [r3, #8]
 8002422:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8002424:	f002 fd58 	bl	8004ed8 <HAL_MPU_Disable>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002428:	2301      	movs	r3, #1
 800242a:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800242c:	2300      	movs	r3, #0
 800242e:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = codeMemoryLowAddress;
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( codeMemoryHighAddress - codeMemoryLowAddress )));
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 1;
 800243c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243e:	085b      	lsrs	r3, r3, #1
 8002440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002442:	4313      	orrs	r3, r2
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 2;
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	4313      	orrs	r3, r2
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 4;
 8002450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002452:	091b      	lsrs	r3, r3, #4
 8002454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002456:	4313      	orrs	r3, r2
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 8;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002460:	4313      	orrs	r3, r2
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 16;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	0c1b      	lsrs	r3, r3, #16
 8002468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246a:	4313      	orrs	r3, r2
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	4a98      	ldr	r2, [pc, #608]	; (80026d4 <CILmemoryProtection_init+0x2cc>)
 8002472:	fb02 f303 	mul.w	r3, r2, r3
 8002476:	0edb      	lsrs	r3, r3, #27
 8002478:	4a97      	ldr	r2, [pc, #604]	; (80026d8 <CILmemoryProtection_init+0x2d0>)
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	623b      	str	r3, [r7, #32]
    return (result-1);
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( codeMemoryHighAddress - codeMemoryLowAddress )));
 8002484:	b2db      	uxtb	r3, r3
 8002486:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8002488:	2300      	movs	r3, #0
 800248a:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800248c:	2301      	movs	r3, #1
 800248e:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8002490:	2306      	movs	r3, #6
 8002492:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002498:	2301      	movs	r3, #1
 800249a:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800249c:	2301      	movs	r3, #1
 800249e:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80024a0:	2301      	movs	r3, #1
 80024a2:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4618      	mov	r0, r3
 80024aa:	f002 fd4d 	bl	8004f48 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80024ae:	2301      	movs	r3, #1
 80024b0:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80024b2:	2301      	movs	r3, #1
 80024b4:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = stackMemoryLowAddress;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( stackMemoryHighAddress - stackMemoryLowAddress )));
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 1;
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c8:	4313      	orrs	r3, r2
 80024ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 2;
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	089b      	lsrs	r3, r3, #2
 80024d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d2:	4313      	orrs	r3, r2
 80024d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 4;
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024dc:	4313      	orrs	r3, r2
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 8;
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e6:	4313      	orrs	r3, r2
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 16;
 80024ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f0:	4313      	orrs	r3, r2
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 80024f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f6:	4a77      	ldr	r2, [pc, #476]	; (80026d4 <CILmemoryProtection_init+0x2cc>)
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
 80024fc:	0edb      	lsrs	r3, r3, #27
 80024fe:	4a76      	ldr	r2, [pc, #472]	; (80026d8 <CILmemoryProtection_init+0x2d0>)
 8002500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
    return (result-1);
 8002506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002508:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( stackMemoryHighAddress - stackMemoryLowAddress )));
 800250a:	b2db      	uxtb	r3, r3
 800250c:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 800250e:	2300      	movs	r3, #0
 8002510:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002512:	2301      	movs	r3, #1
 8002514:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8002516:	2302      	movs	r3, #2
 8002518:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800251e:	2301      	movs	r3, #1
 8002520:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002522:	2301      	movs	r3, #1
 8002524:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002526:	2301      	movs	r3, #1
 8002528:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800252a:	f107 0310 	add.w	r3, r7, #16
 800252e:	4618      	mov	r0, r3
 8002530:	f002 fd0a 	bl	8004f48 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002534:	2301      	movs	r3, #1
 8002536:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002538:	2302      	movs	r3, #2
 800253a:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress =  (BitWidthType)_s_os_section_consts;
 800253c:	4b67      	ldr	r3, [pc, #412]	; (80026dc <CILmemoryProtection_init+0x2d4>)
 800253e:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8002540:	4a67      	ldr	r2, [pc, #412]	; (80026e0 <CILmemoryProtection_init+0x2d8>)
 8002542:	4b66      	ldr	r3, [pc, #408]	; (80026dc <CILmemoryProtection_init+0x2d4>)
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 1;
 8002548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254a:	085b      	lsrs	r3, r3, #1
 800254c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254e:	4313      	orrs	r3, r2
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 2;
 8002552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002558:	4313      	orrs	r3, r2
 800255a:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 4;
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	091b      	lsrs	r3, r3, #4
 8002560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002562:	4313      	orrs	r3, r2
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 8;
 8002566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800256c:	4313      	orrs	r3, r2
 800256e:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 16;
 8002570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002572:	0c1b      	lsrs	r3, r3, #16
 8002574:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002576:	4313      	orrs	r3, r2
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 800257a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800257c:	4a55      	ldr	r2, [pc, #340]	; (80026d4 <CILmemoryProtection_init+0x2cc>)
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	0edb      	lsrs	r3, r3, #27
 8002584:	4a54      	ldr	r2, [pc, #336]	; (80026d8 <CILmemoryProtection_init+0x2d0>)
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	633b      	str	r3, [r7, #48]	; 0x30
    return (result-1);
 800258c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258e:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8002590:	b2db      	uxtb	r3, r3
 8002592:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8002594:	2300      	movs	r3, #0
 8002596:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002598:	2301      	movs	r3, #1
 800259a:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 800259c:	2306      	movs	r3, #6
 800259e:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80025a8:	2301      	movs	r3, #1
 80025aa:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80025ac:	2301      	movs	r3, #1
 80025ae:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80025b0:	f107 0310 	add.w	r3, r7, #16
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 fcc7 	bl	8004f48 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80025ba:	2301      	movs	r3, #1
 80025bc:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80025be:	2303      	movs	r3, #3
 80025c0:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_os_section_vars;
 80025c2:	4b48      	ldr	r3, [pc, #288]	; (80026e4 <CILmemoryProtection_init+0x2dc>)
 80025c4:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 80025c6:	4a48      	ldr	r2, [pc, #288]	; (80026e8 <CILmemoryProtection_init+0x2e0>)
 80025c8:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <CILmemoryProtection_init+0x2dc>)
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 1;
 80025ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025d4:	4313      	orrs	r3, r2
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 2;
 80025d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025de:	4313      	orrs	r3, r2
 80025e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 4;
 80025e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025e8:	4313      	orrs	r3, r2
 80025ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 8;
 80025ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025f2:	4313      	orrs	r3, r2
 80025f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 16;
 80025f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f8:	0c1b      	lsrs	r3, r3, #16
 80025fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025fc:	4313      	orrs	r3, r2
 80025fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8002600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002602:	4a34      	ldr	r2, [pc, #208]	; (80026d4 <CILmemoryProtection_init+0x2cc>)
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	0edb      	lsrs	r3, r3, #27
 800260a:	4a33      	ldr	r2, [pc, #204]	; (80026d8 <CILmemoryProtection_init+0x2d0>)
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	63bb      	str	r3, [r7, #56]	; 0x38
    return (result-1);
 8002612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002614:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8002616:	b2db      	uxtb	r3, r3
 8002618:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 800261a:	2300      	movs	r3, #0
 800261c:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800261e:	2301      	movs	r3, #1
 8002620:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8002622:	2302      	movs	r3, #2
 8002624:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800262a:	2301      	movs	r3, #1
 800262c:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800262e:	2301      	movs	r3, #1
 8002630:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002632:	2301      	movs	r3, #1
 8002634:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002636:	f107 0310 	add.w	r3, r7, #16
 800263a:	4618      	mov	r0, r3
 800263c:	f002 fc84 	bl	8004f48 <HAL_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002640:	2301      	movs	r3, #1
 8002642:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8002644:	2304      	movs	r3, #4
 8002646:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_unprotected_section;
 8002648:	4b28      	ldr	r3, [pc, #160]	; (80026ec <CILmemoryProtection_init+0x2e4>)
 800264a:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_unprotected_section - _s_unprotected_section )));
 800264c:	4a28      	ldr	r2, [pc, #160]	; (80026f0 <CILmemoryProtection_init+0x2e8>)
 800264e:	4b27      	ldr	r3, [pc, #156]	; (80026ec <CILmemoryProtection_init+0x2e4>)
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	647b      	str	r3, [r7, #68]	; 0x44
    size |= size >> 1;
 8002654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800265a:	4313      	orrs	r3, r2
 800265c:	647b      	str	r3, [r7, #68]	; 0x44
    size |= size >> 2;
 800265e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002664:	4313      	orrs	r3, r2
 8002666:	647b      	str	r3, [r7, #68]	; 0x44
    size |= size >> 4;
 8002668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266a:	091b      	lsrs	r3, r3, #4
 800266c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800266e:	4313      	orrs	r3, r2
 8002670:	647b      	str	r3, [r7, #68]	; 0x44
    size |= size >> 8;
 8002672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002678:	4313      	orrs	r3, r2
 800267a:	647b      	str	r3, [r7, #68]	; 0x44
    size |= size >> 16;
 800267c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267e:	0c1b      	lsrs	r3, r3, #16
 8002680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002682:	4313      	orrs	r3, r2
 8002684:	647b      	str	r3, [r7, #68]	; 0x44
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8002686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002688:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <CILmemoryProtection_init+0x2cc>)
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	0edb      	lsrs	r3, r3, #27
 8002690:	4a11      	ldr	r2, [pc, #68]	; (80026d8 <CILmemoryProtection_init+0x2d0>)
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	643b      	str	r3, [r7, #64]	; 0x40
    return (result-1);
 8002698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800269a:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_unprotected_section - _s_unprotected_section )));
 800269c:	b2db      	uxtb	r3, r3
 800269e:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80026a0:	2300      	movs	r3, #0
 80026a2:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80026a4:	2301      	movs	r3, #1
 80026a6:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80026a8:	2303      	movs	r3, #3
 80026aa:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80026ac:	2300      	movs	r3, #0
 80026ae:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 80026b8:	2301      	movs	r3, #1
 80026ba:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80026bc:	f107 0310 	add.w	r3, r7, #16
 80026c0:	4618      	mov	r0, r3
 80026c2:	f002 fc41 	bl	8004f48 <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 80026c6:	2006      	movs	r0, #6
 80026c8:	f002 fc1e 	bl	8004f08 <HAL_MPU_Enable>

}
 80026cc:	bf00      	nop
 80026ce:	3748      	adds	r7, #72	; 0x48
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	07c4acdd 	.word	0x07c4acdd
 80026d8:	380005f4 	.word	0x380005f4
 80026dc:	38000000 	.word	0x38000000
 80026e0:	38000800 	.word	0x38000800
 80026e4:	38008000 	.word	0x38008000
 80026e8:	38008400 	.word	0x38008400
 80026ec:	20001800 	.word	0x20001800
 80026f0:	20002000 	.word	0x20002000

080026f4 <CILmemoryProtection_setStackOverflowProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setStackOverflowProtection(AddressType stackLowAddress, AddressType stackHighAddress)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80026fe:	f107 0308 	add.w	r3, r7, #8
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 800270c:	f002 fbe4 	bl	8004ed8 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002710:	2301      	movs	r3, #1
 8002712:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 8002714:	2307      	movs	r3, #7
 8002716:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (stackLowAddress);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	61fb      	str	r3, [r7, #28]
    size |= size >> 1;
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	4313      	orrs	r3, r2
 800272c:	61fb      	str	r3, [r7, #28]
    size |= size >> 2;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	4313      	orrs	r3, r2
 8002736:	61fb      	str	r3, [r7, #28]
    size |= size >> 4;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	69fa      	ldr	r2, [r7, #28]
 800273e:	4313      	orrs	r3, r2
 8002740:	61fb      	str	r3, [r7, #28]
    size |= size >> 8;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	0a1b      	lsrs	r3, r3, #8
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	4313      	orrs	r3, r2
 800274a:	61fb      	str	r3, [r7, #28]
    size |= size >> 16;
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	0c1b      	lsrs	r3, r3, #16
 8002750:	69fa      	ldr	r2, [r7, #28]
 8002752:	4313      	orrs	r3, r2
 8002754:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <CILmemoryProtection_setStackOverflowProtection+0xb0>)
 800275a:	fb02 f303 	mul.w	r3, r2, r3
 800275e:	0edb      	lsrs	r3, r3, #27
 8002760:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <CILmemoryProtection_setStackOverflowProtection+0xb4>)
 8002762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002766:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 800276c:	b2db      	uxtb	r3, r3
 800276e:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8002770:	2300      	movs	r3, #0
 8002772:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002774:	2301      	movs	r3, #1
 8002776:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002778:	2303      	movs	r3, #3
 800277a:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002780:	2301      	movs	r3, #1
 8002782:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002784:	2301      	movs	r3, #1
 8002786:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002788:	2301      	movs	r3, #1
 800278a:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800278c:	f107 0308 	add.w	r3, r7, #8
 8002790:	4618      	mov	r0, r3
 8002792:	f002 fbd9 	bl	8004f48 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8002796:	2006      	movs	r0, #6
 8002798:	f002 fbb6 	bl	8004f08 <HAL_MPU_Enable>
}
 800279c:	bf00      	nop
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	07c4acdd 	.word	0x07c4acdd
 80027a8:	380005f4 	.word	0x380005f4

080027ac <CILmemoryProtection_setProgramMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setProgramMemoryProtection(AddressType lowAddress, AddressType highAddress)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
 80027c0:	609a      	str	r2, [r3, #8]
 80027c2:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 80027c4:	f002 fb88 	bl	8004ed8 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027c8:	2301      	movs	r3, #1
 80027ca:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 80027cc:	2306      	movs	r3, #6
 80027ce:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	61fb      	str	r3, [r7, #28]
    size |= size >> 1;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61fb      	str	r3, [r7, #28]
    size |= size >> 2;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	69fa      	ldr	r2, [r7, #28]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	61fb      	str	r3, [r7, #28]
    size |= size >> 4;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	091b      	lsrs	r3, r3, #4
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61fb      	str	r3, [r7, #28]
    size |= size >> 8;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	4313      	orrs	r3, r2
 8002802:	61fb      	str	r3, [r7, #28]
    size |= size >> 16;
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	0c1b      	lsrs	r3, r3, #16
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	4313      	orrs	r3, r2
 800280c:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	4a12      	ldr	r2, [pc, #72]	; (800285c <CILmemoryProtection_setProgramMemoryProtection+0xb0>)
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	0edb      	lsrs	r3, r3, #27
 8002818:	4a11      	ldr	r2, [pc, #68]	; (8002860 <CILmemoryProtection_setProgramMemoryProtection+0xb4>)
 800281a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281e:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8002824:	b2db      	uxtb	r3, r3
 8002826:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8002828:	2300      	movs	r3, #0
 800282a:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800282c:	2301      	movs	r3, #1
 800282e:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002830:	2303      	movs	r3, #3
 8002832:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002834:	2300      	movs	r3, #0
 8002836:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002838:	2301      	movs	r3, #1
 800283a:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800283c:	2301      	movs	r3, #1
 800283e:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8002840:	2301      	movs	r3, #1
 8002842:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002844:	f107 0308 	add.w	r3, r7, #8
 8002848:	4618      	mov	r0, r3
 800284a:	f002 fb7d 	bl	8004f48 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 800284e:	2006      	movs	r0, #6
 8002850:	f002 fb5a 	bl	8004f08 <HAL_MPU_Enable>
}
 8002854:	bf00      	nop
 8002856:	3720      	adds	r7, #32
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	07c4acdd 	.word	0x07c4acdd
 8002860:	380005f4 	.word	0x380005f4

08002864 <CILspinlock_getSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_getSpinlock(AddressType * spinlockPointer)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	__asm volatile("MOV R1, #0x1");
 800286c:	f04f 0101 	mov.w	r1, #1

08002870 <tryLock>:
    __asm volatile("tryLock:");
	__asm volatile("LDREXH R3, [R0]");
 8002870:	e8d0 3f5f 	ldrexh	r3, [r0]
	__asm volatile("CMP R3, #0");
 8002874:	2b00      	cmp	r3, #0
	__asm volatile("ITT EQ");
 8002876:	bf04      	itt	eq
	__asm volatile("STREXHEQ R3, R1, [R0]");
 8002878:	e8c0 1f53 	strexheq	r3, r1, [r0]
	__asm volatile("CMPEQ R3, #0");
 800287c:	2b00      	cmpeq	r3, #0
	__asm volatile("ITE EQ");
 800287e:	bf0c      	ite	eq
	__asm volatile("MOVEQ R1, #0x2");
 8002880:	2102      	moveq	r1, #2
	__asm volatile("BNE tryLock");
 8002882:	e7f5      	bne.n	8002870 <tryLock>
    __asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
 8002884:	460b      	mov	r3, r1
 8002886:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(spinlockPointer);
    return spinlockState;
 8002888:	68fb      	ldr	r3, [r7, #12]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <CILspinlock_trySpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_trySpinlock(AddressType * spinlockPointer)
{
 8002896:	b480      	push	{r7}
 8002898:	b085      	sub	sp, #20
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	__asm volatile("MOV R1, #0x1");
 800289e:	f04f 0101 	mov.w	r1, #1
	__asm volatile("LDREXH R3, [R0]");
 80028a2:	e8d0 3f5f 	ldrexh	r3, [r0]
	__asm volatile("CMP R3, #0");
 80028a6:	2b00      	cmp	r3, #0
	__asm volatile("ITT EQ");
 80028a8:	bf04      	itt	eq
	__asm volatile("STREXHEQ R3, R1, [R0]");
 80028aa:	e8c0 1f53 	strexheq	r3, r1, [r0]
	__asm volatile("CMPEQ R3, #0");
 80028ae:	2b00      	cmpeq	r3, #0
	__asm volatile("ITE NE");
 80028b0:	bf14      	ite	ne
	__asm volatile("MOVNE R1, #0x1");
 80028b2:	2101      	movne	r1, #1
	__asm volatile("MOVEQ R1, #0x2");
 80028b4:	2102      	moveq	r1, #2
	__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
 80028b6:	460b      	mov	r3, r1
 80028b8:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(spinlockPointer);
    return spinlockState;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3714      	adds	r7, #20
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <CILspinlock_releaseSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_releaseSpinlock(AddressType * spinlockPointer)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	__asm volatile("MOV R1, #0x0");
 80028d0:	f04f 0100 	mov.w	r1, #0

080028d4 <tryUnlock>:
    __asm volatile("tryUnlock:");
	__asm volatile("LDREXH R3, [R0]");
 80028d4:	e8d0 3f5f 	ldrexh	r3, [r0]
	__asm volatile("CMP R3, #1");
 80028d8:	2b01      	cmp	r3, #1
	__asm volatile("ITTE EQ");
 80028da:	bf06      	itte	eq
	__asm volatile("STREXHEQ R3, R1, [R0]");
 80028dc:	e8c0 1f53 	strexheq	r3, r1, [r0]
	__asm volatile("CMPEQ R3, #0");
 80028e0:	2b00      	cmpeq	r3, #0
	__asm volatile("BNE released");
 80028e2:	e001      	bne.n	80028e8 <released>
	__asm volatile("IT NE");
 80028e4:	bf18      	it	ne
	__asm volatile("BNE tryUnlock");
 80028e6:	e7f5      	bne.n	80028d4 <tryUnlock>

080028e8 <released>:
	__asm volatile("released:");
    __asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
 80028e8:	460b      	mov	r3, r1
 80028ea:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(spinlockPointer);
    return spinlockState;
 80028ec:	68fb      	ldr	r3, [r7, #12]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <CILstack_stackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType CILstack_stackInit(AddressType stackLowAddress, AddressType stackHighAddress, AddressType handlerAddress)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b087      	sub	sp, #28
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
    CosmOS_StackType *stack = ( CosmOS_StackType* )( stackHighAddress - (AddressType)sizeof(CosmOS_StackType) );
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3b40      	subs	r3, #64	; 0x40
 800290a:	617b      	str	r3, [r7, #20]

    stack->XPSR  = 0x01000000;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002912:	63da      	str	r2, [r3, #60]	; 0x3c
    stack->PC    = handlerAddress;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	639a      	str	r2, [r3, #56]	; 0x38
    stack->LR    = 0xFFFFFFFD;
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	f06f 0202 	mvn.w	r2, #2
 8002920:	635a      	str	r2, [r3, #52]	; 0x34
    stack->R12   = 0;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
    stack->R3    = 0;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2200      	movs	r2, #0
 800292c:	62da      	str	r2, [r3, #44]	; 0x2c
    stack->R2    = 0;
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
    stack->R1    = 0;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2200      	movs	r2, #0
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
    stack->R0    = 0;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	2200      	movs	r2, #0
 800293e:	621a      	str	r2, [r3, #32]
    stack->R14   = 0xFFFFFFFD;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f06f 0202 	mvn.w	r2, #2
 8002946:	61da      	str	r2, [r3, #28]
    stack->R11   = 0;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2200      	movs	r2, #0
 800294c:	619a      	str	r2, [r3, #24]
    stack->R10   = 0;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2200      	movs	r2, #0
 8002952:	615a      	str	r2, [r3, #20]
    stack->R8    = 0;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
    stack->R7    = 0;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
    stack->R6    = 0;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
    stack->R5    = 0;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2200      	movs	r2, #0
 800296a:	605a      	str	r2, [r3, #4]
    stack->R4    = 0;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]

	__SUPRESS_UNUSED_VAR(stackLowAddress);
    return (StackPointerType)(&(stack->R4));
 8002972:	697b      	ldr	r3, [r7, #20]
}
 8002974:	4618      	mov	r0, r3
 8002976:	371c      	adds	r7, #28
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <CILstack_setStackPointer>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION __NAKED void CILstack_setStackPointer(AddressType address)
{
    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8002980:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
	__asm volatile ("MSR PSP,R0");
 8002984:	f380 8809 	msr	PSP, r0
    __asm volatile ("MOV R0, #0x3");
 8002988:	f04f 0003 	mov.w	r0, #3
    __asm volatile ("MSR CONTROL, R0");
 800298c:	f380 8814 	msr	CONTROL, r0
    __asm volatile ("ISB");
 8002990:	f3bf 8f6f 	isb	sy
    __asm volatile ("BX R14");
 8002994:	4770      	bx	lr

	__SUPRESS_UNUSED_VAR(address);
}
 8002996:	bf00      	nop

08002998 <CILsysCalls_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_dispatcher(BitWidthType *sp)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	; 0x38
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
    CosmOS_GenericVoidType sysCall;
    CosmOS_OsVariableType * osVar;
    CosmOS_RoutesConfigurationType * routeVar;


    uint8_t *pc = (uint8_t*)(sp[6]);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3318      	adds	r3, #24
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	633b      	str	r3, [r7, #48]	; 0x30

    pc-=2;
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	3b02      	subs	r3, #2
 80029ac:	633b      	str	r3, [r7, #48]	; 0x30

    osVar = os_getOsVar();
 80029ae:	f7fe fe61 	bl	8001674 <os_getOsVar>
 80029b2:	62f8      	str	r0, [r7, #44]	; 0x2c

    uint8_t sysCallId = *pc;
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80029bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029be:	60bb      	str	r3, [r7, #8]
    return (CosmOS_RoutesConfigurationType *)(osVar->cfg->route);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]

    routeVar = os_getOsRoutes( osVar );
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24

    sysCall = route_getRoutesFunc( routeVar, sp[0] );
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ce:	613a      	str	r2, [r7, #16]
 80029d0:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_GenericVoidType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_GenericVoidType route_getRoutesFunc(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (CosmOS_GenericVoidType)(route->routeFunc[route->routeIdToFunc[callId]]);
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	6859      	ldr	r1, [r3, #4]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	623b      	str	r3, [r7, #32]
    entityId = route_getRoutesEntityId( routeVar, sp[0] );
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f0:	61ba      	str	r2, [r7, #24]
 80029f2:	617b      	str	r3, [r7, #20]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType route_getRoutesEntityId(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (route->routeIdToEntity[callId]);
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61fb      	str	r3, [r7, #28]

    switch ( sysCallId )
 8002a02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d828      	bhi.n	8002a5c <CILsysCalls_dispatcher+0xc4>
 8002a0a:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <CILsysCalls_dispatcher+0x78>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a21 	.word	0x08002a21
 8002a14:	08002a29 	.word	0x08002a29
 8002a18:	08002a33 	.word	0x08002a33
 8002a1c:	08002a45 	.word	0x08002a45
    {
        case 0 :
        {
            ((CosmOS_Generic_bitWidthType_ret_void)sysCall)(entityId);
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	69f8      	ldr	r0, [r7, #28]
 8002a24:	4798      	blx	r3
            break;
 8002a26:	e01a      	b.n	8002a5e <CILsysCalls_dispatcher+0xc6>
        }

		case 1 :
        {
            returnValue = ((CosmOS_Generic_bitWidthType_ret_bitWidthType)sysCall)(entityId);
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	69f8      	ldr	r0, [r7, #28]
 8002a2c:	4798      	blx	r3
 8002a2e:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8002a30:	e015      	b.n	8002a5e <CILsysCalls_dispatcher+0xc6>
        }

        case 2 :
        {
            returnValue = ((CosmOS_Generic_bitWidthType_bitWidthType_ret_bitWidthType)sysCall)(entityId, (BitWidthType)sp[1]);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	6a3b      	ldr	r3, [r7, #32]
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	69f8      	ldr	r0, [r7, #28]
 8002a3e:	4798      	blx	r3
 8002a40:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8002a42:	e00c      	b.n	8002a5e <CILsysCalls_dispatcher+0xc6>
        }

        case 3 :
        {
			returnValue = ((CosmOS_Generic_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType)sysCall)(entityId, (void *)sp[1], sp[2]);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3308      	adds	r3, #8
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	69f8      	ldr	r0, [r7, #28]
 8002a56:	4798      	blx	r3
 8002a58:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8002a5a:	e000      	b.n	8002a5e <CILsysCalls_dispatcher+0xc6>
        }

        default :
        {
            /* PANIC */
            break;
 8002a5c:	bf00      	nop
        }
    }

    sp[0] = returnValue;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a62:	601a      	str	r2, [r3, #0]
}
 8002a64:	bf00      	nop
 8002a66:	3738      	adds	r7, #56	; 0x38
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <CILsysCalls_bitWidthType_ret_void>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_bitWidthType_ret_void(BitWidthType id)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
    __asm volatile("SVC #0");
 8002a74:	df00      	svc	0

	__SUPRESS_UNUSED_VAR(id);
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <CILsysCalls_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_ret_bitWidthType(BitWidthType id)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b085      	sub	sp, #20
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #1");
 8002a8a:	df01      	svc	1
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
    return returnValue;
 8002a90:	68fb      	ldr	r3, [r7, #12]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3714      	adds	r7, #20
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType(BitWidthType id, BitWidthType arg)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b085      	sub	sp, #20
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    __asm volatile("SVC #2");
 8002aa8:	df02      	svc	2
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8002aaa:	4603      	mov	r3, r0
 8002aac:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(arg);
    return returnValue;
 8002aae:	68fb      	ldr	r3, [r7, #12]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType(BitWidthType id, void * ptr, BitWidthType arg)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #3");
 8002ac8:	df03      	svc	3
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8002aca:	4603      	mov	r3, r0
 8002acc:	617b      	str	r3, [r7, #20]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(ptr);
	__SUPRESS_UNUSED_VAR(arg);
    return returnValue;
 8002ace:	697b      	ldr	r3, [r7, #20]
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	371c      	adds	r7, #28
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <CILsysTimer_startTimer>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_startTimer(BitWidthType ticks, BitWidthType timerTickCount)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]

	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)) - 1UL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	fb02 f303 	mul.w	r3, r2, r3
 8002aee:	4a07      	ldr	r2, [pc, #28]	; (8002b0c <CILsysTimer_startTimer+0x30>)
 8002af0:	3b01      	subs	r3, #1
 8002af2:	6053      	str	r3, [r2, #4]
	SysTick->VAL   = 0UL;
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <CILsysTimer_startTimer+0x30>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = 	SysTick_CTRL_CLKSOURCE_Msk |
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <CILsysTimer_startTimer+0x30>)
 8002afc:	2207      	movs	r2, #7
 8002afe:	601a      	str	r2, [r3, #0]
						SysTick_CTRL_TICKINT_Msk   |
						SysTick_CTRL_ENABLE_Msk;
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e010 	.word	0xe000e010

08002b10 <CILsysTimer_setTicks>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_setTicks(BitWidthType ticks, BitWidthType timerTickCount)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
	SysTick->CTRL = 0;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <CILsysTimer_setTicks+0x44>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)-\
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	fb02 f203 	mul.w	r2, r2, r3
								(SysTick->LOAD - SysTick->VAL)) - 1UL);
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <CILsysTimer_setTicks+0x44>)
 8002b2a:	6899      	ldr	r1, [r3, #8]
 8002b2c:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <CILsysTimer_setTicks+0x44>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	1acb      	subs	r3, r1, r3
	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)-\
 8002b32:	4413      	add	r3, r2
 8002b34:	4a07      	ldr	r2, [pc, #28]	; (8002b54 <CILsysTimer_setTicks+0x44>)
 8002b36:	3b01      	subs	r3, #1
 8002b38:	6053      	str	r3, [r2, #4]

	SysTick->VAL   = 0UL;
 8002b3a:	4b06      	ldr	r3, [pc, #24]	; (8002b54 <CILsysTimer_setTicks+0x44>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = 	SysTick_CTRL_CLKSOURCE_Msk |
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <CILsysTimer_setTicks+0x44>)
 8002b42:	2207      	movs	r2, #7
 8002b44:	601a      	str	r2, [r3, #0]
						SysTick_CTRL_TICKINT_Msk   |
						SysTick_CTRL_ENABLE_Msk;
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	e000e010 	.word	0xe000e010

08002b58 <CILuart_sysJob>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILuart_sysJob()
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0

    //TX SIDE
    //check where is DMA and switch it if its buffer is empty
    //check if user is in red zone, if yes check if DMA is on the same buffer, then switch to the other
    //HAL_UART_Receive_DMA()
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

Disassembly of section .application_section_funcs_CM7:

080ff800 <Idle_CM7>:
  * @{
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 80ff800:	b480      	push	{r7}
 80ff802:	af00      	add	r7, sp, #0
 80ff804:	bf00      	nop
 80ff806:	46bd      	mov	sp, r7
 80ff808:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff80c:	4770      	bx	lr

080ff80e <wrapped_Idle_CM7>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Idle_CM7(void)
{
 80ff80e:	b580      	push	{r7, lr}
 80ff810:	af00      	add	r7, sp, #0
    Idle_CM7();
 80ff812:	f7ff fff5 	bl	80ff800 <Idle_CM7>
    for(;;);
 80ff816:	e7fe      	b.n	80ff816 <wrapped_Idle_CM7+0x8>

080ff818 <sysJobs_CM7>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 80ff818:	b480      	push	{r7}
 80ff81a:	af00      	add	r7, sp, #0
 80ff81c:	bf00      	nop
 80ff81e:	46bd      	mov	sp, r7
 80ff820:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff824:	4770      	bx	lr

080ff826 <wrapped_sysJobs_CM7>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_sysJobs_CM7(void)
{
 80ff826:	b580      	push	{r7, lr}
 80ff828:	af00      	add	r7, sp, #0
    sysCalls_bitWidthType_ret_void(SYSCALL_SYSJOBS_DISPATCHER);
 80ff82a:	201c      	movs	r0, #28
 80ff82c:	f702 fce9 	bl	8002202 <sysCalls_bitWidthType_ret_void>
    sysCalls_bitWidthType_ret_void(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80ff830:	201b      	movs	r0, #27
 80ff832:	f702 fce6 	bl	8002202 <sysCalls_bitWidthType_ret_void>
    for(;;);
 80ff836:	e7fe      	b.n	80ff836 <wrapped_sysJobs_CM7+0x10>
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 80ff838:	b480      	push	{r7}
 80ff83a:	af00      	add	r7, sp, #0
 80ff83c:	bf00      	nop
 80ff83e:	46bd      	mov	sp, r7
 80ff840:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff844:	4770      	bx	lr

080ff846 <wrapped_Task_0_Core_0_Handler>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Task_0_Core_0_Handler(void)
{
 80ff846:	b580      	push	{r7, lr}
 80ff848:	af00      	add	r7, sp, #0
    Task_0_Core_0_Handler();
 80ff84a:	f000 f869 	bl	80ff920 <Task_0_Core_0_Handler>
    sysCalls_bitWidthType_ret_void(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 80ff84e:	201b      	movs	r0, #27
 80ff850:	f702 fcd7 	bl	8002202 <sysCalls_bitWidthType_ret_void>
    for(;;);
 80ff854:	e7fe      	b.n	80ff854 <wrapped_Task_0_Core_0_Handler+0xe>

080ff856 <IdleThread_CM7>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM4)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 80ff856:	b480      	push	{r7}
 80ff858:	af00      	add	r7, sp, #0
 80ff85a:	bf00      	nop
 80ff85c:	46bd      	mov	sp, r7
 80ff85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff862:	4770      	bx	lr

080ff864 <wrapped_IdleThread_CM7>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_IdleThread_CM7(void)
{
 80ff864:	b580      	push	{r7, lr}
 80ff866:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM7();
 80ff868:	f7ff fff5 	bl	80ff856 <IdleThread_CM7>
 80ff86c:	e7fc      	b.n	80ff868 <wrapped_IdleThread_CM7+0x4>
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 80ff86e:	b480      	push	{r7}
 80ff870:	af00      	add	r7, sp, #0
 80ff872:	bf00      	nop
 80ff874:	46bd      	mov	sp, r7
 80ff876:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff87a:	4770      	bx	lr

080ff87c <wrapped_Thread_Core_0>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Thread_Core_0(void)
{
 80ff87c:	b580      	push	{r7, lr}
 80ff87e:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        Thread_Core_0();
 80ff880:	f000 f872 	bl	80ff968 <Thread_Core_0>
 80ff884:	e7fc      	b.n	80ff880 <wrapped_Thread_Core_0+0x4>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 80ff886:	b480      	push	{r7}
 80ff888:	af00      	add	r7, sp, #0
 80ff88a:	bf00      	nop
 80ff88c:	46bd      	mov	sp, r7
 80ff88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff892:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 80ff894:	b480      	push	{r7}
 80ff896:	af00      	add	r7, sp, #0
 80ff898:	bf00      	nop
 80ff89a:	46bd      	mov	sp, r7
 80ff89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff8a0:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 80ff8a2:	b480      	push	{r7}
 80ff8a4:	af00      	add	r7, sp, #0
 80ff8a6:	bf00      	nop
 80ff8a8:	46bd      	mov	sp, r7
 80ff8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff8ae:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 80ff8b0:	b480      	push	{r7}
 80ff8b2:	af00      	add	r7, sp, #0
 80ff8b4:	bf00      	nop
 80ff8b6:	46bd      	mov	sp, r7
 80ff8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff8bc:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 80ff8be:	b480      	push	{r7}
 80ff8c0:	af00      	add	r7, sp, #0
 80ff8c2:	bf00      	nop
 80ff8c4:	46bd      	mov	sp, r7
 80ff8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff8ca:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 80ff8cc:	b480      	push	{r7}
 80ff8ce:	af00      	add	r7, sp, #0
 80ff8d0:	bf00      	nop
 80ff8d2:	46bd      	mov	sp, r7
 80ff8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff8d8:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 80ff8da:	b480      	push	{r7}
 80ff8dc:	af00      	add	r7, sp, #0
 80ff8de:	bf00      	nop
 80ff8e0:	46bd      	mov	sp, r7
 80ff8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff8e6:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 80ff8e8:	b480      	push	{r7}
 80ff8ea:	af00      	add	r7, sp, #0
 80ff8ec:	bf00      	nop
 80ff8ee:	46bd      	mov	sp, r7
 80ff8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff8f4:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 80ff8f6:	b480      	push	{r7}
 80ff8f8:	af00      	add	r7, sp, #0
 80ff8fa:	bf00      	nop
 80ff8fc:	46bd      	mov	sp, r7
 80ff8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff902:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 80ff904:	b480      	push	{r7}
 80ff906:	af00      	add	r7, sp, #0
 80ff908:	bf00      	nop
 80ff90a:	46bd      	mov	sp, r7
 80ff90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff910:	4770      	bx	lr

080ff912 <userKernelPanicHook_CM7>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void userKernelPanicHook_CM7(void)
{
 80ff912:	b480      	push	{r7}
 80ff914:	af00      	add	r7, sp, #0

/********************************************************************************
** stop_name =userKernelPanicHook_CM7.cfunc
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 80ff916:	bf00      	nop
 80ff918:	46bd      	mov	sp, r7
 80ff91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff91e:	4770      	bx	lr

080ff920 <Task_0_Core_0_Handler>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void Task_0_Core_0_Handler(void)
{
 80ff920:	b580      	push	{r7, lr}
 80ff922:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_0_Handler
********************************************************************************/
cosmosApi_deviceIO_togglePin(GPIOF, GPIO_PIN_11); //Timing measurement with logic analyzer, pls dont remove
 80ff924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80ff928:	490c      	ldr	r1, [pc, #48]	; (80ff95c <Task_0_Core_0_Handler+0x3c>)
 80ff92a:	2018      	movs	r0, #24
 80ff92c:	f702 fc90 	bl	8002250 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
if (counter > 100)
 80ff930:	4b0b      	ldr	r3, [pc, #44]	; (80ff960 <Task_0_Core_0_Handler+0x40>)
 80ff932:	681b      	ldr	r3, [r3, #0]
 80ff934:	2b64      	cmp	r3, #100	; 0x64
 80ff936:	dd08      	ble.n	80ff94a <Task_0_Core_0_Handler+0x2a>
{
	counter = 0;
 80ff938:	4b09      	ldr	r3, [pc, #36]	; (80ff960 <Task_0_Core_0_Handler+0x40>)
 80ff93a:	2200      	movs	r2, #0
 80ff93c:	601a      	str	r2, [r3, #0]
	cosmosApi_deviceIO_togglePin(GPIOE, GPIO_PIN_1); //ORANGE LED
 80ff93e:	2202      	movs	r2, #2
 80ff940:	4908      	ldr	r1, [pc, #32]	; (80ff964 <Task_0_Core_0_Handler+0x44>)
 80ff942:	2018      	movs	r0, #24
 80ff944:	f702 fc84 	bl	8002250 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 80ff948:	e004      	b.n	80ff954 <Task_0_Core_0_Handler+0x34>
	// cosmosApi_release_spinlock_uart_buffer_read();

}
else
{
    counter++;
 80ff94a:	4b05      	ldr	r3, [pc, #20]	; (80ff960 <Task_0_Core_0_Handler+0x40>)
 80ff94c:	681b      	ldr	r3, [r3, #0]
 80ff94e:	3301      	adds	r3, #1
 80ff950:	4a03      	ldr	r2, [pc, #12]	; (80ff960 <Task_0_Core_0_Handler+0x40>)
 80ff952:	6013      	str	r3, [r2, #0]
}
__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 80ff954:	ee20 0a20 	vmul.f32	s0, s0, s1
/********************************************************************************
** stop_name =Task_0_Core_0_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 80ff958:	bf00      	nop
 80ff95a:	bd80      	pop	{r7, pc}
 80ff95c:	58021400 	.word	0x58021400
 80ff960:	20001400 	.word	0x20001400
 80ff964:	58021000 	.word	0x58021000

080ff968 <Thread_Core_0>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void Thread_Core_0(void)
{
 80ff968:	b480      	push	{r7}
 80ff96a:	af00      	add	r7, sp, #0
	//delete integerPointer;
/********************************************************************************
** stop_name =Thread_Core_0
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 80ff96c:	bf00      	nop
 80ff96e:	46bd      	mov	sp, r7
 80ff970:	f85d 7b04 	ldr.w	r7, [sp], #4
 80ff974:	4770      	bx	lr
 80ff976:	bf00      	nop

Disassembly of section .application_section_funcs_CM4:

081ff800 <Idle_CM4>:
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 81ff800:	b480      	push	{r7}
 81ff802:	af00      	add	r7, sp, #0
 81ff804:	bf00      	nop
 81ff806:	46bd      	mov	sp, r7
 81ff808:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff80c:	4770      	bx	lr

081ff80e <wrapped_Idle_CM4>:
{
 81ff80e:	b580      	push	{r7, lr}
 81ff810:	af00      	add	r7, sp, #0
    Idle_CM4();
 81ff812:	f7ff fff5 	bl	81ff800 <Idle_CM4>
    for(;;);
 81ff816:	e7fe      	b.n	81ff816 <wrapped_Idle_CM4+0x8>

081ff818 <sysJobs_CM4>:
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 81ff818:	b480      	push	{r7}
 81ff81a:	af00      	add	r7, sp, #0
 81ff81c:	bf00      	nop
 81ff81e:	46bd      	mov	sp, r7
 81ff820:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff824:	4770      	bx	lr

081ff826 <wrapped_sysJobs_CM4>:
{
 81ff826:	b580      	push	{r7, lr}
 81ff828:	af00      	add	r7, sp, #0
    sysCalls_bitWidthType_ret_void(SYSCALL_SYSJOBS_DISPATCHER);
 81ff82a:	201c      	movs	r0, #28
 81ff82c:	f602 fce9 	bl	8002202 <sysCalls_bitWidthType_ret_void>
    sysCalls_bitWidthType_ret_void(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 81ff830:	201b      	movs	r0, #27
 81ff832:	f602 fce6 	bl	8002202 <sysCalls_bitWidthType_ret_void>
    for(;;);
 81ff836:	e7fe      	b.n	81ff836 <wrapped_sysJobs_CM4+0x10>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 81ff838:	b480      	push	{r7}
 81ff83a:	af00      	add	r7, sp, #0
 81ff83c:	bf00      	nop
 81ff83e:	46bd      	mov	sp, r7
 81ff840:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff844:	4770      	bx	lr

081ff846 <wrapped_Task_0_Core_1_Handler>:
{
 81ff846:	b580      	push	{r7, lr}
 81ff848:	af00      	add	r7, sp, #0
    Task_0_Core_1_Handler();
 81ff84a:	f000 f869 	bl	81ff920 <Task_0_Core_1_Handler>
    sysCalls_bitWidthType_ret_void(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 81ff84e:	201b      	movs	r0, #27
 81ff850:	f602 fcd7 	bl	8002202 <sysCalls_bitWidthType_ret_void>
    for(;;);
 81ff854:	e7fe      	b.n	81ff854 <wrapped_Task_0_Core_1_Handler+0xe>

081ff856 <IdleThread_CM4>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 81ff856:	b480      	push	{r7}
 81ff858:	af00      	add	r7, sp, #0
 81ff85a:	bf00      	nop
 81ff85c:	46bd      	mov	sp, r7
 81ff85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff862:	4770      	bx	lr

081ff864 <wrapped_IdleThread_CM4>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void wrapped_IdleThread_CM4(void)
{
 81ff864:	b580      	push	{r7, lr}
 81ff866:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM4();
 81ff868:	f7ff fff5 	bl	81ff856 <IdleThread_CM4>
 81ff86c:	e7fc      	b.n	81ff868 <wrapped_IdleThread_CM4+0x4>
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM4)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 81ff86e:	b480      	push	{r7}
 81ff870:	af00      	add	r7, sp, #0
 81ff872:	bf00      	nop
 81ff874:	46bd      	mov	sp, r7
 81ff876:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff87a:	4770      	bx	lr

081ff87c <wrapped_Thread_Core_1>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void wrapped_Thread_Core_1(void)
{
 81ff87c:	b580      	push	{r7, lr}
 81ff87e:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        Thread_Core_1();
 81ff880:	f000 f898 	bl	81ff9b4 <Thread_Core_1>
 81ff884:	e7fc      	b.n	81ff880 <wrapped_Thread_Core_1+0x4>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 81ff886:	b480      	push	{r7}
 81ff888:	af00      	add	r7, sp, #0
 81ff88a:	bf00      	nop
 81ff88c:	46bd      	mov	sp, r7
 81ff88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff892:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 81ff894:	b480      	push	{r7}
 81ff896:	af00      	add	r7, sp, #0
 81ff898:	bf00      	nop
 81ff89a:	46bd      	mov	sp, r7
 81ff89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff8a0:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 81ff8a2:	b480      	push	{r7}
 81ff8a4:	af00      	add	r7, sp, #0
 81ff8a6:	bf00      	nop
 81ff8a8:	46bd      	mov	sp, r7
 81ff8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff8ae:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 81ff8b0:	b480      	push	{r7}
 81ff8b2:	af00      	add	r7, sp, #0
 81ff8b4:	bf00      	nop
 81ff8b6:	46bd      	mov	sp, r7
 81ff8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff8bc:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 81ff8be:	b480      	push	{r7}
 81ff8c0:	af00      	add	r7, sp, #0
 81ff8c2:	bf00      	nop
 81ff8c4:	46bd      	mov	sp, r7
 81ff8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff8ca:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 81ff8cc:	b480      	push	{r7}
 81ff8ce:	af00      	add	r7, sp, #0
 81ff8d0:	bf00      	nop
 81ff8d2:	46bd      	mov	sp, r7
 81ff8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff8d8:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 81ff8da:	b480      	push	{r7}
 81ff8dc:	af00      	add	r7, sp, #0
 81ff8de:	bf00      	nop
 81ff8e0:	46bd      	mov	sp, r7
 81ff8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff8e6:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 81ff8e8:	b480      	push	{r7}
 81ff8ea:	af00      	add	r7, sp, #0
 81ff8ec:	bf00      	nop
 81ff8ee:	46bd      	mov	sp, r7
 81ff8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff8f4:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 81ff8f6:	b480      	push	{r7}
 81ff8f8:	af00      	add	r7, sp, #0
 81ff8fa:	bf00      	nop
 81ff8fc:	46bd      	mov	sp, r7
 81ff8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff902:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 81ff904:	b480      	push	{r7}
 81ff906:	af00      	add	r7, sp, #0
 81ff908:	bf00      	nop
 81ff90a:	46bd      	mov	sp, r7
 81ff90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff910:	4770      	bx	lr

081ff912 <userKernelPanicHook_CM4>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void userKernelPanicHook_CM4(void)
{
 81ff912:	b480      	push	{r7}
 81ff914:	af00      	add	r7, sp, #0

/********************************************************************************
** stop_name =userKernelPanicHook_CM4.cfunc
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 81ff916:	bf00      	nop
 81ff918:	46bd      	mov	sp, r7
 81ff91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 81ff91e:	4770      	bx	lr

081ff920 <Task_0_Core_1_Handler>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Task_0_Core_1_Handler(void)
{
 81ff920:	b580      	push	{r7, lr}
 81ff922:	b082      	sub	sp, #8
 81ff924:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_1_Handler
********************************************************************************/
cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 81ff926:	2210      	movs	r2, #16
 81ff928:	491e      	ldr	r1, [pc, #120]	; (81ff9a4 <Task_0_Core_1_Handler+0x84>)
 81ff92a:	2018      	movs	r0, #24
 81ff92c:	f602 fc90 	bl	8002250 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
if (counter_cm4 > 100)
 81ff930:	4b1d      	ldr	r3, [pc, #116]	; (81ff9a8 <Task_0_Core_1_Handler+0x88>)
 81ff932:	681b      	ldr	r3, [r3, #0]
 81ff934:	2b64      	cmp	r3, #100	; 0x64
 81ff936:	dd26      	ble.n	81ff986 <Task_0_Core_1_Handler+0x66>
{
	CosmOS_SpinlockStateType spinlockState;
	CosmOS_BufferStateType bufferState;


	bufferReader_cm4 = 100;
 81ff938:	4b1c      	ldr	r3, [pc, #112]	; (81ff9ac <Task_0_Core_1_Handler+0x8c>)
 81ff93a:	2264      	movs	r2, #100	; 0x64
 81ff93c:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_write_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 81ff93e:	2204      	movs	r2, #4
 81ff940:	491a      	ldr	r1, [pc, #104]	; (81ff9ac <Task_0_Core_1_Handler+0x8c>)
 81ff942:	2017      	movs	r0, #23
 81ff944:	f602 fc84 	bl	8002250 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 81ff948:	4603      	mov	r3, r0
 81ff94a:	71fb      	strb	r3, [r7, #7]

	bufferReader_cm4 = 0;
 81ff94c:	4b17      	ldr	r3, [pc, #92]	; (81ff9ac <Task_0_Core_1_Handler+0x8c>)
 81ff94e:	2200      	movs	r2, #0
 81ff950:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_read_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 81ff952:	2204      	movs	r2, #4
 81ff954:	4915      	ldr	r1, [pc, #84]	; (81ff9ac <Task_0_Core_1_Handler+0x8c>)
 81ff956:	2016      	movs	r0, #22
 81ff958:	f602 fc7a 	bl	8002250 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 81ff95c:	4603      	mov	r3, r0
 81ff95e:	71fb      	strb	r3, [r7, #7]

	spinlockState = cosmosApi_try_spinlock_uart_buffer_read();
 81ff960:	2001      	movs	r0, #1
 81ff962:	f602 fc59 	bl	8002218 <sysCalls_bitWidthType_ret_bitWidthType>
 81ff966:	4603      	mov	r3, r0
 81ff968:	603b      	str	r3, [r7, #0]
	//spinlockState = cosmosApi_get_spinlock_uart_buffer_read();

	spinlockState = cosmosApi_release_spinlock_uart_buffer_read();
 81ff96a:	2002      	movs	r0, #2
 81ff96c:	f602 fc54 	bl	8002218 <sysCalls_bitWidthType_ret_bitWidthType>
 81ff970:	4603      	mov	r3, r0
 81ff972:	603b      	str	r3, [r7, #0]

	counter_cm4 = 0;
 81ff974:	4b0c      	ldr	r3, [pc, #48]	; (81ff9a8 <Task_0_Core_1_Handler+0x88>)
 81ff976:	2200      	movs	r2, #0
 81ff978:	601a      	str	r2, [r3, #0]
	cosmosApi_deviceIO_togglePin(GPIOB, GPIO_PIN_0); //GREEN LED
 81ff97a:	2201      	movs	r2, #1
 81ff97c:	490c      	ldr	r1, [pc, #48]	; (81ff9b0 <Task_0_Core_1_Handler+0x90>)
 81ff97e:	2018      	movs	r0, #24
 81ff980:	f602 fc66 	bl	8002250 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 81ff984:	e004      	b.n	81ff990 <Task_0_Core_1_Handler+0x70>
	__SUPRESS_UNUSED_VAR(spinlockState);
	__SUPRESS_UNUSED_VAR(bufferState);
}
else
{
	counter_cm4++;
 81ff986:	4b08      	ldr	r3, [pc, #32]	; (81ff9a8 <Task_0_Core_1_Handler+0x88>)
 81ff988:	681b      	ldr	r3, [r3, #0]
 81ff98a:	3301      	adds	r3, #1
 81ff98c:	4a06      	ldr	r2, [pc, #24]	; (81ff9a8 <Task_0_Core_1_Handler+0x88>)
 81ff98e:	6013      	str	r3, [r2, #0]
}
cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 81ff990:	2210      	movs	r2, #16
 81ff992:	4904      	ldr	r1, [pc, #16]	; (81ff9a4 <Task_0_Core_1_Handler+0x84>)
 81ff994:	2018      	movs	r0, #24
 81ff996:	f602 fc5b 	bl	8002250 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
/********************************************************************************
** stop_name =Task_0_Core_1_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 81ff99a:	bf00      	nop
 81ff99c:	3708      	adds	r7, #8
 81ff99e:	46bd      	mov	sp, r7
 81ff9a0:	bd80      	pop	{r7, pc}
 81ff9a2:	bf00      	nop
 81ff9a4:	58020000 	.word	0x58020000
 81ff9a8:	10001400 	.word	0x10001400
 81ff9ac:	10001404 	.word	0x10001404
 81ff9b0:	58020400 	.word	0x58020400

081ff9b4 <Thread_Core_1>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Thread_Core_1(void)
{
 81ff9b4:	b580      	push	{r7, lr}
 81ff9b6:	b082      	sub	sp, #8
 81ff9b8:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Thread_Core_1
********************************************************************************/
	int *integerPointer = new int(100);
 81ff9ba:	2004      	movs	r0, #4
 81ff9bc:	f60b f9d8 	bl	800ad70 <_Znwj>
 81ff9c0:	4603      	mov	r3, r0
 81ff9c2:	2264      	movs	r2, #100	; 0x64
 81ff9c4:	601a      	str	r2, [r3, #0]
 81ff9c6:	607b      	str	r3, [r7, #4]

	int *integerPointer2 = new int(100);
 81ff9c8:	2004      	movs	r0, #4
 81ff9ca:	f60b f9d1 	bl	800ad70 <_Znwj>
 81ff9ce:	4603      	mov	r3, r0
 81ff9d0:	2264      	movs	r2, #100	; 0x64
 81ff9d2:	601a      	str	r2, [r3, #0]
 81ff9d4:	603b      	str	r3, [r7, #0]

	delete integerPointer;
 81ff9d6:	687b      	ldr	r3, [r7, #4]
 81ff9d8:	2b00      	cmp	r3, #0
 81ff9da:	d003      	beq.n	81ff9e4 <Thread_Core_1+0x30>
 81ff9dc:	2104      	movs	r1, #4
 81ff9de:	4618      	mov	r0, r3
 81ff9e0:	f60b f9da 	bl	800ad98 <_ZdlPvj>
	delete integerPointer2;
 81ff9e4:	683b      	ldr	r3, [r7, #0]
 81ff9e6:	2b00      	cmp	r3, #0
 81ff9e8:	d003      	beq.n	81ff9f2 <Thread_Core_1+0x3e>
 81ff9ea:	2104      	movs	r1, #4
 81ff9ec:	4618      	mov	r0, r3
 81ff9ee:	f60b f9d3 	bl	800ad98 <_ZdlPvj>
/********************************************************************************
** stop_name =Thread_Core_1
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 81ff9f2:	bf00      	nop
 81ff9f4:	3708      	adds	r7, #8
 81ff9f6:	46bd      	mov	sp, r7
 81ff9f8:	bd80      	pop	{r7, pc}
 81ff9fa:	bf00      	nop

Disassembly of section .text:

08002b68 <__do_global_dtors_aux>:
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	4c05      	ldr	r4, [pc, #20]	; (8002b80 <__do_global_dtors_aux+0x18>)
 8002b6c:	7823      	ldrb	r3, [r4, #0]
 8002b6e:	b933      	cbnz	r3, 8002b7e <__do_global_dtors_aux+0x16>
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <__do_global_dtors_aux+0x1c>)
 8002b72:	b113      	cbz	r3, 8002b7a <__do_global_dtors_aux+0x12>
 8002b74:	4804      	ldr	r0, [pc, #16]	; (8002b88 <__do_global_dtors_aux+0x20>)
 8002b76:	f3af 8000 	nop.w
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	7023      	strb	r3, [r4, #0]
 8002b7e:	bd10      	pop	{r4, pc}
 8002b80:	20001934 	.word	0x20001934
 8002b84:	00000000 	.word	0x00000000
 8002b88:	0800aee0 	.word	0x0800aee0

08002b8c <frame_dummy>:
 8002b8c:	b508      	push	{r3, lr}
 8002b8e:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <frame_dummy+0x10>)
 8002b90:	b11b      	cbz	r3, 8002b9a <frame_dummy+0xe>
 8002b92:	4903      	ldr	r1, [pc, #12]	; (8002ba0 <frame_dummy+0x14>)
 8002b94:	4803      	ldr	r0, [pc, #12]	; (8002ba4 <frame_dummy+0x18>)
 8002b96:	f3af 8000 	nop.w
 8002b9a:	bd08      	pop	{r3, pc}
 8002b9c:	00000000 	.word	0x00000000
 8002ba0:	20001938 	.word	0x20001938
 8002ba4:	0800aee0 	.word	0x0800aee0

08002ba8 <__aeabi_uldivmod>:
 8002ba8:	b953      	cbnz	r3, 8002bc0 <__aeabi_uldivmod+0x18>
 8002baa:	b94a      	cbnz	r2, 8002bc0 <__aeabi_uldivmod+0x18>
 8002bac:	2900      	cmp	r1, #0
 8002bae:	bf08      	it	eq
 8002bb0:	2800      	cmpeq	r0, #0
 8002bb2:	bf1c      	itt	ne
 8002bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8002bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8002bbc:	f001 b8c0 	b.w	8003d40 <__aeabi_idiv0>
 8002bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8002bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002bc8:	f000 f806 	bl	8002bd8 <__udivmoddi4>
 8002bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002bd4:	b004      	add	sp, #16
 8002bd6:	4770      	bx	lr

08002bd8 <__udivmoddi4>:
 8002bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bdc:	9d08      	ldr	r5, [sp, #32]
 8002bde:	4604      	mov	r4, r0
 8002be0:	468c      	mov	ip, r1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 8083 	bne.w	8002cee <__udivmoddi4+0x116>
 8002be8:	428a      	cmp	r2, r1
 8002bea:	4617      	mov	r7, r2
 8002bec:	d947      	bls.n	8002c7e <__udivmoddi4+0xa6>
 8002bee:	fab2 f282 	clz	r2, r2
 8002bf2:	b142      	cbz	r2, 8002c06 <__udivmoddi4+0x2e>
 8002bf4:	f1c2 0020 	rsb	r0, r2, #32
 8002bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8002bfc:	4091      	lsls	r1, r2
 8002bfe:	4097      	lsls	r7, r2
 8002c00:	ea40 0c01 	orr.w	ip, r0, r1
 8002c04:	4094      	lsls	r4, r2
 8002c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8002c0a:	0c23      	lsrs	r3, r4, #16
 8002c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8002c10:	fa1f fe87 	uxth.w	lr, r7
 8002c14:	fb08 c116 	mls	r1, r8, r6, ip
 8002c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8002c20:	4299      	cmp	r1, r3
 8002c22:	d909      	bls.n	8002c38 <__udivmoddi4+0x60>
 8002c24:	18fb      	adds	r3, r7, r3
 8002c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8002c2a:	f080 8119 	bcs.w	8002e60 <__udivmoddi4+0x288>
 8002c2e:	4299      	cmp	r1, r3
 8002c30:	f240 8116 	bls.w	8002e60 <__udivmoddi4+0x288>
 8002c34:	3e02      	subs	r6, #2
 8002c36:	443b      	add	r3, r7
 8002c38:	1a5b      	subs	r3, r3, r1
 8002c3a:	b2a4      	uxth	r4, r4
 8002c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8002c40:	fb08 3310 	mls	r3, r8, r0, r3
 8002c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8002c4c:	45a6      	cmp	lr, r4
 8002c4e:	d909      	bls.n	8002c64 <__udivmoddi4+0x8c>
 8002c50:	193c      	adds	r4, r7, r4
 8002c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c56:	f080 8105 	bcs.w	8002e64 <__udivmoddi4+0x28c>
 8002c5a:	45a6      	cmp	lr, r4
 8002c5c:	f240 8102 	bls.w	8002e64 <__udivmoddi4+0x28c>
 8002c60:	3802      	subs	r0, #2
 8002c62:	443c      	add	r4, r7
 8002c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002c68:	eba4 040e 	sub.w	r4, r4, lr
 8002c6c:	2600      	movs	r6, #0
 8002c6e:	b11d      	cbz	r5, 8002c78 <__udivmoddi4+0xa0>
 8002c70:	40d4      	lsrs	r4, r2
 8002c72:	2300      	movs	r3, #0
 8002c74:	e9c5 4300 	strd	r4, r3, [r5]
 8002c78:	4631      	mov	r1, r6
 8002c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c7e:	b902      	cbnz	r2, 8002c82 <__udivmoddi4+0xaa>
 8002c80:	deff      	udf	#255	; 0xff
 8002c82:	fab2 f282 	clz	r2, r2
 8002c86:	2a00      	cmp	r2, #0
 8002c88:	d150      	bne.n	8002d2c <__udivmoddi4+0x154>
 8002c8a:	1bcb      	subs	r3, r1, r7
 8002c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002c90:	fa1f f887 	uxth.w	r8, r7
 8002c94:	2601      	movs	r6, #1
 8002c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8002c9a:	0c21      	lsrs	r1, r4, #16
 8002c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8002ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8002ca8:	428b      	cmp	r3, r1
 8002caa:	d907      	bls.n	8002cbc <__udivmoddi4+0xe4>
 8002cac:	1879      	adds	r1, r7, r1
 8002cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8002cb2:	d202      	bcs.n	8002cba <__udivmoddi4+0xe2>
 8002cb4:	428b      	cmp	r3, r1
 8002cb6:	f200 80e9 	bhi.w	8002e8c <__udivmoddi4+0x2b4>
 8002cba:	4684      	mov	ip, r0
 8002cbc:	1ac9      	subs	r1, r1, r3
 8002cbe:	b2a3      	uxth	r3, r4
 8002cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8002cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8002cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8002ccc:	fb08 f800 	mul.w	r8, r8, r0
 8002cd0:	45a0      	cmp	r8, r4
 8002cd2:	d907      	bls.n	8002ce4 <__udivmoddi4+0x10c>
 8002cd4:	193c      	adds	r4, r7, r4
 8002cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8002cda:	d202      	bcs.n	8002ce2 <__udivmoddi4+0x10a>
 8002cdc:	45a0      	cmp	r8, r4
 8002cde:	f200 80d9 	bhi.w	8002e94 <__udivmoddi4+0x2bc>
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	eba4 0408 	sub.w	r4, r4, r8
 8002ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8002cec:	e7bf      	b.n	8002c6e <__udivmoddi4+0x96>
 8002cee:	428b      	cmp	r3, r1
 8002cf0:	d909      	bls.n	8002d06 <__udivmoddi4+0x12e>
 8002cf2:	2d00      	cmp	r5, #0
 8002cf4:	f000 80b1 	beq.w	8002e5a <__udivmoddi4+0x282>
 8002cf8:	2600      	movs	r6, #0
 8002cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8002cfe:	4630      	mov	r0, r6
 8002d00:	4631      	mov	r1, r6
 8002d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d06:	fab3 f683 	clz	r6, r3
 8002d0a:	2e00      	cmp	r6, #0
 8002d0c:	d14a      	bne.n	8002da4 <__udivmoddi4+0x1cc>
 8002d0e:	428b      	cmp	r3, r1
 8002d10:	d302      	bcc.n	8002d18 <__udivmoddi4+0x140>
 8002d12:	4282      	cmp	r2, r0
 8002d14:	f200 80b8 	bhi.w	8002e88 <__udivmoddi4+0x2b0>
 8002d18:	1a84      	subs	r4, r0, r2
 8002d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8002d1e:	2001      	movs	r0, #1
 8002d20:	468c      	mov	ip, r1
 8002d22:	2d00      	cmp	r5, #0
 8002d24:	d0a8      	beq.n	8002c78 <__udivmoddi4+0xa0>
 8002d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8002d2a:	e7a5      	b.n	8002c78 <__udivmoddi4+0xa0>
 8002d2c:	f1c2 0320 	rsb	r3, r2, #32
 8002d30:	fa20 f603 	lsr.w	r6, r0, r3
 8002d34:	4097      	lsls	r7, r2
 8002d36:	fa01 f002 	lsl.w	r0, r1, r2
 8002d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8002d3e:	40d9      	lsrs	r1, r3
 8002d40:	4330      	orrs	r0, r6
 8002d42:	0c03      	lsrs	r3, r0, #16
 8002d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8002d48:	fa1f f887 	uxth.w	r8, r7
 8002d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8002d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002d54:	fb06 f108 	mul.w	r1, r6, r8
 8002d58:	4299      	cmp	r1, r3
 8002d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8002d5e:	d909      	bls.n	8002d74 <__udivmoddi4+0x19c>
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8002d66:	f080 808d 	bcs.w	8002e84 <__udivmoddi4+0x2ac>
 8002d6a:	4299      	cmp	r1, r3
 8002d6c:	f240 808a 	bls.w	8002e84 <__udivmoddi4+0x2ac>
 8002d70:	3e02      	subs	r6, #2
 8002d72:	443b      	add	r3, r7
 8002d74:	1a5b      	subs	r3, r3, r1
 8002d76:	b281      	uxth	r1, r0
 8002d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8002d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8002d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8002d84:	fb00 f308 	mul.w	r3, r0, r8
 8002d88:	428b      	cmp	r3, r1
 8002d8a:	d907      	bls.n	8002d9c <__udivmoddi4+0x1c4>
 8002d8c:	1879      	adds	r1, r7, r1
 8002d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8002d92:	d273      	bcs.n	8002e7c <__udivmoddi4+0x2a4>
 8002d94:	428b      	cmp	r3, r1
 8002d96:	d971      	bls.n	8002e7c <__udivmoddi4+0x2a4>
 8002d98:	3802      	subs	r0, #2
 8002d9a:	4439      	add	r1, r7
 8002d9c:	1acb      	subs	r3, r1, r3
 8002d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8002da2:	e778      	b.n	8002c96 <__udivmoddi4+0xbe>
 8002da4:	f1c6 0c20 	rsb	ip, r6, #32
 8002da8:	fa03 f406 	lsl.w	r4, r3, r6
 8002dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8002db0:	431c      	orrs	r4, r3
 8002db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8002db6:	fa01 f306 	lsl.w	r3, r1, r6
 8002dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8002dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8002dc2:	431f      	orrs	r7, r3
 8002dc4:	0c3b      	lsrs	r3, r7, #16
 8002dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8002dca:	fa1f f884 	uxth.w	r8, r4
 8002dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8002dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8002dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8002dda:	458a      	cmp	sl, r1
 8002ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8002de0:	fa00 f306 	lsl.w	r3, r0, r6
 8002de4:	d908      	bls.n	8002df8 <__udivmoddi4+0x220>
 8002de6:	1861      	adds	r1, r4, r1
 8002de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8002dec:	d248      	bcs.n	8002e80 <__udivmoddi4+0x2a8>
 8002dee:	458a      	cmp	sl, r1
 8002df0:	d946      	bls.n	8002e80 <__udivmoddi4+0x2a8>
 8002df2:	f1a9 0902 	sub.w	r9, r9, #2
 8002df6:	4421      	add	r1, r4
 8002df8:	eba1 010a 	sub.w	r1, r1, sl
 8002dfc:	b2bf      	uxth	r7, r7
 8002dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8002e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8002e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8002e0a:	fb00 f808 	mul.w	r8, r0, r8
 8002e0e:	45b8      	cmp	r8, r7
 8002e10:	d907      	bls.n	8002e22 <__udivmoddi4+0x24a>
 8002e12:	19e7      	adds	r7, r4, r7
 8002e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8002e18:	d22e      	bcs.n	8002e78 <__udivmoddi4+0x2a0>
 8002e1a:	45b8      	cmp	r8, r7
 8002e1c:	d92c      	bls.n	8002e78 <__udivmoddi4+0x2a0>
 8002e1e:	3802      	subs	r0, #2
 8002e20:	4427      	add	r7, r4
 8002e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8002e26:	eba7 0708 	sub.w	r7, r7, r8
 8002e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8002e2e:	454f      	cmp	r7, r9
 8002e30:	46c6      	mov	lr, r8
 8002e32:	4649      	mov	r1, r9
 8002e34:	d31a      	bcc.n	8002e6c <__udivmoddi4+0x294>
 8002e36:	d017      	beq.n	8002e68 <__udivmoddi4+0x290>
 8002e38:	b15d      	cbz	r5, 8002e52 <__udivmoddi4+0x27a>
 8002e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8002e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8002e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8002e46:	40f2      	lsrs	r2, r6
 8002e48:	ea4c 0202 	orr.w	r2, ip, r2
 8002e4c:	40f7      	lsrs	r7, r6
 8002e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8002e52:	2600      	movs	r6, #0
 8002e54:	4631      	mov	r1, r6
 8002e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e5a:	462e      	mov	r6, r5
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	e70b      	b.n	8002c78 <__udivmoddi4+0xa0>
 8002e60:	4606      	mov	r6, r0
 8002e62:	e6e9      	b.n	8002c38 <__udivmoddi4+0x60>
 8002e64:	4618      	mov	r0, r3
 8002e66:	e6fd      	b.n	8002c64 <__udivmoddi4+0x8c>
 8002e68:	4543      	cmp	r3, r8
 8002e6a:	d2e5      	bcs.n	8002e38 <__udivmoddi4+0x260>
 8002e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8002e70:	eb69 0104 	sbc.w	r1, r9, r4
 8002e74:	3801      	subs	r0, #1
 8002e76:	e7df      	b.n	8002e38 <__udivmoddi4+0x260>
 8002e78:	4608      	mov	r0, r1
 8002e7a:	e7d2      	b.n	8002e22 <__udivmoddi4+0x24a>
 8002e7c:	4660      	mov	r0, ip
 8002e7e:	e78d      	b.n	8002d9c <__udivmoddi4+0x1c4>
 8002e80:	4681      	mov	r9, r0
 8002e82:	e7b9      	b.n	8002df8 <__udivmoddi4+0x220>
 8002e84:	4666      	mov	r6, ip
 8002e86:	e775      	b.n	8002d74 <__udivmoddi4+0x19c>
 8002e88:	4630      	mov	r0, r6
 8002e8a:	e74a      	b.n	8002d22 <__udivmoddi4+0x14a>
 8002e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8002e90:	4439      	add	r1, r7
 8002e92:	e713      	b.n	8002cbc <__udivmoddi4+0xe4>
 8002e94:	3802      	subs	r0, #2
 8002e96:	443c      	add	r4, r7
 8002e98:	e724      	b.n	8002ce4 <__udivmoddi4+0x10c>
 8002e9a:	bf00      	nop

08002e9c <selfrel_offset31>:
 8002e9c:	6803      	ldr	r3, [r0, #0]
 8002e9e:	005a      	lsls	r2, r3, #1
 8002ea0:	bf4c      	ite	mi
 8002ea2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8002ea6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8002eaa:	4418      	add	r0, r3
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop

08002eb0 <search_EIT_table>:
 8002eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002eb4:	b329      	cbz	r1, 8002f02 <search_EIT_table+0x52>
 8002eb6:	1e4f      	subs	r7, r1, #1
 8002eb8:	4604      	mov	r4, r0
 8002eba:	4615      	mov	r5, r2
 8002ebc:	463e      	mov	r6, r7
 8002ebe:	f04f 0800 	mov.w	r8, #0
 8002ec2:	eb08 0106 	add.w	r1, r8, r6
 8002ec6:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8002eca:	1049      	asrs	r1, r1, #1
 8002ecc:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8002ed0:	4648      	mov	r0, r9
 8002ed2:	f7ff ffe3 	bl	8002e9c <selfrel_offset31>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	00c8      	lsls	r0, r1, #3
 8002eda:	3008      	adds	r0, #8
 8002edc:	428f      	cmp	r7, r1
 8002ede:	4420      	add	r0, r4
 8002ee0:	d009      	beq.n	8002ef6 <search_EIT_table+0x46>
 8002ee2:	42ab      	cmp	r3, r5
 8002ee4:	d809      	bhi.n	8002efa <search_EIT_table+0x4a>
 8002ee6:	f7ff ffd9 	bl	8002e9c <selfrel_offset31>
 8002eea:	3801      	subs	r0, #1
 8002eec:	42a8      	cmp	r0, r5
 8002eee:	d20a      	bcs.n	8002f06 <search_EIT_table+0x56>
 8002ef0:	f101 0801 	add.w	r8, r1, #1
 8002ef4:	e7e5      	b.n	8002ec2 <search_EIT_table+0x12>
 8002ef6:	42ab      	cmp	r3, r5
 8002ef8:	d905      	bls.n	8002f06 <search_EIT_table+0x56>
 8002efa:	4588      	cmp	r8, r1
 8002efc:	d001      	beq.n	8002f02 <search_EIT_table+0x52>
 8002efe:	1e4e      	subs	r6, r1, #1
 8002f00:	e7df      	b.n	8002ec2 <search_EIT_table+0x12>
 8002f02:	f04f 0900 	mov.w	r9, #0
 8002f06:	4648      	mov	r0, r9
 8002f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002f0c <__gnu_unwind_get_pr_addr>:
 8002f0c:	2801      	cmp	r0, #1
 8002f0e:	d007      	beq.n	8002f20 <__gnu_unwind_get_pr_addr+0x14>
 8002f10:	2802      	cmp	r0, #2
 8002f12:	d007      	beq.n	8002f24 <__gnu_unwind_get_pr_addr+0x18>
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <__gnu_unwind_get_pr_addr+0x1c>)
 8002f16:	2800      	cmp	r0, #0
 8002f18:	bf0c      	ite	eq
 8002f1a:	4618      	moveq	r0, r3
 8002f1c:	2000      	movne	r0, #0
 8002f1e:	4770      	bx	lr
 8002f20:	4802      	ldr	r0, [pc, #8]	; (8002f2c <__gnu_unwind_get_pr_addr+0x20>)
 8002f22:	4770      	bx	lr
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <__gnu_unwind_get_pr_addr+0x24>)
 8002f26:	4770      	bx	lr
 8002f28:	080035d1 	.word	0x080035d1
 8002f2c:	080035d5 	.word	0x080035d5
 8002f30:	080035d9 	.word	0x080035d9

08002f34 <get_eit_entry>:
 8002f34:	b530      	push	{r4, r5, lr}
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <get_eit_entry+0x90>)
 8002f38:	b083      	sub	sp, #12
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	1e8d      	subs	r5, r1, #2
 8002f3e:	b33b      	cbz	r3, 8002f90 <get_eit_entry+0x5c>
 8002f40:	a901      	add	r1, sp, #4
 8002f42:	4628      	mov	r0, r5
 8002f44:	f3af 8000 	nop.w
 8002f48:	b1e8      	cbz	r0, 8002f86 <get_eit_entry+0x52>
 8002f4a:	9901      	ldr	r1, [sp, #4]
 8002f4c:	462a      	mov	r2, r5
 8002f4e:	f7ff ffaf 	bl	8002eb0 <search_EIT_table>
 8002f52:	4601      	mov	r1, r0
 8002f54:	b1b8      	cbz	r0, 8002f86 <get_eit_entry+0x52>
 8002f56:	f7ff ffa1 	bl	8002e9c <selfrel_offset31>
 8002f5a:	684b      	ldr	r3, [r1, #4]
 8002f5c:	64a0      	str	r0, [r4, #72]	; 0x48
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d02b      	beq.n	8002fba <get_eit_entry+0x86>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f101 0004 	add.w	r0, r1, #4
 8002f68:	db23      	blt.n	8002fb2 <get_eit_entry+0x7e>
 8002f6a:	f7ff ff97 	bl	8002e9c <selfrel_offset31>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8002f74:	6803      	ldr	r3, [r0, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	db10      	blt.n	8002f9c <get_eit_entry+0x68>
 8002f7a:	f7ff ff8f 	bl	8002e9c <selfrel_offset31>
 8002f7e:	6120      	str	r0, [r4, #16]
 8002f80:	2000      	movs	r0, #0
 8002f82:	b003      	add	sp, #12
 8002f84:	bd30      	pop	{r4, r5, pc}
 8002f86:	2300      	movs	r3, #0
 8002f88:	2009      	movs	r0, #9
 8002f8a:	6123      	str	r3, [r4, #16]
 8002f8c:	b003      	add	sp, #12
 8002f8e:	bd30      	pop	{r4, r5, pc}
 8002f90:	490d      	ldr	r1, [pc, #52]	; (8002fc8 <get_eit_entry+0x94>)
 8002f92:	480e      	ldr	r0, [pc, #56]	; (8002fcc <get_eit_entry+0x98>)
 8002f94:	1a09      	subs	r1, r1, r0
 8002f96:	10c9      	asrs	r1, r1, #3
 8002f98:	9101      	str	r1, [sp, #4]
 8002f9a:	e7d7      	b.n	8002f4c <get_eit_entry+0x18>
 8002f9c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8002fa0:	f7ff ffb4 	bl	8002f0c <__gnu_unwind_get_pr_addr>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	6120      	str	r0, [r4, #16]
 8002fa8:	bf14      	ite	ne
 8002faa:	2000      	movne	r0, #0
 8002fac:	2009      	moveq	r0, #9
 8002fae:	b003      	add	sp, #12
 8002fb0:	bd30      	pop	{r4, r5, pc}
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8002fb8:	e7dc      	b.n	8002f74 <get_eit_entry+0x40>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	6123      	str	r3, [r4, #16]
 8002fbe:	2005      	movs	r0, #5
 8002fc0:	e7df      	b.n	8002f82 <get_eit_entry+0x4e>
 8002fc2:	bf00      	nop
 8002fc4:	00000000 	.word	0x00000000
 8002fc8:	0800b0a0 	.word	0x0800b0a0
 8002fcc:	0800afc0 	.word	0x0800afc0

08002fd0 <restore_non_core_regs>:
 8002fd0:	6803      	ldr	r3, [r0, #0]
 8002fd2:	07da      	lsls	r2, r3, #31
 8002fd4:	b510      	push	{r4, lr}
 8002fd6:	4604      	mov	r4, r0
 8002fd8:	d406      	bmi.n	8002fe8 <restore_non_core_regs+0x18>
 8002fda:	079b      	lsls	r3, r3, #30
 8002fdc:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8002fe0:	d509      	bpl.n	8002ff6 <restore_non_core_regs+0x26>
 8002fe2:	f000 fc4b 	bl	800387c <__gnu_Unwind_Restore_VFP_D>
 8002fe6:	6823      	ldr	r3, [r4, #0]
 8002fe8:	0759      	lsls	r1, r3, #29
 8002fea:	d509      	bpl.n	8003000 <restore_non_core_regs+0x30>
 8002fec:	071a      	lsls	r2, r3, #28
 8002fee:	d50e      	bpl.n	800300e <restore_non_core_regs+0x3e>
 8002ff0:	06db      	lsls	r3, r3, #27
 8002ff2:	d513      	bpl.n	800301c <restore_non_core_regs+0x4c>
 8002ff4:	bd10      	pop	{r4, pc}
 8002ff6:	f000 fc39 	bl	800386c <__gnu_Unwind_Restore_VFP>
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	0759      	lsls	r1, r3, #29
 8002ffe:	d4f5      	bmi.n	8002fec <restore_non_core_regs+0x1c>
 8003000:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003004:	f000 fc42 	bl	800388c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8003008:	6823      	ldr	r3, [r4, #0]
 800300a:	071a      	lsls	r2, r3, #28
 800300c:	d4f0      	bmi.n	8002ff0 <restore_non_core_regs+0x20>
 800300e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8003012:	f000 fc43 	bl	800389c <__gnu_Unwind_Restore_WMMXD>
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	06db      	lsls	r3, r3, #27
 800301a:	d4eb      	bmi.n	8002ff4 <restore_non_core_regs+0x24>
 800301c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8003020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003024:	f000 bc7e 	b.w	8003924 <__gnu_Unwind_Restore_WMMXC>

08003028 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8003028:	4603      	mov	r3, r0
 800302a:	6800      	ldr	r0, [r0, #0]
 800302c:	b100      	cbz	r0, 8003030 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 800302e:	4418      	add	r0, r3
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop

08003034 <__gnu_unwind_24bit.isra.0>:
 8003034:	2009      	movs	r0, #9
 8003036:	4770      	bx	lr

08003038 <_Unwind_DebugHook>:
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop

0800303c <unwind_phase2>:
 800303c:	b570      	push	{r4, r5, r6, lr}
 800303e:	4604      	mov	r4, r0
 8003040:	460e      	mov	r6, r1
 8003042:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8003044:	4620      	mov	r0, r4
 8003046:	f7ff ff75 	bl	8002f34 <get_eit_entry>
 800304a:	4605      	mov	r5, r0
 800304c:	b988      	cbnz	r0, 8003072 <unwind_phase2+0x36>
 800304e:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8003050:	6163      	str	r3, [r4, #20]
 8003052:	4632      	mov	r2, r6
 8003054:	6923      	ldr	r3, [r4, #16]
 8003056:	4621      	mov	r1, r4
 8003058:	2001      	movs	r0, #1
 800305a:	4798      	blx	r3
 800305c:	2808      	cmp	r0, #8
 800305e:	d0f0      	beq.n	8003042 <unwind_phase2+0x6>
 8003060:	2807      	cmp	r0, #7
 8003062:	d106      	bne.n	8003072 <unwind_phase2+0x36>
 8003064:	4628      	mov	r0, r5
 8003066:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8003068:	f7ff ffe6 	bl	8003038 <_Unwind_DebugHook>
 800306c:	1d30      	adds	r0, r6, #4
 800306e:	f000 fbf1 	bl	8003854 <__restore_core_regs>
 8003072:	f007 fec9 	bl	800ae08 <abort>
 8003076:	bf00      	nop

08003078 <unwind_phase2_forced>:
 8003078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800307c:	1d0d      	adds	r5, r1, #4
 800307e:	4606      	mov	r6, r0
 8003080:	4614      	mov	r4, r2
 8003082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003084:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8003088:	f10d 0c0c 	add.w	ip, sp, #12
 800308c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003092:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003098:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800309c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80030a0:	ad02      	add	r5, sp, #8
 80030a2:	68f7      	ldr	r7, [r6, #12]
 80030a4:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80030a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80030ac:	2300      	movs	r3, #0
 80030ae:	602b      	str	r3, [r5, #0]
 80030b0:	e021      	b.n	80030f6 <unwind_phase2_forced+0x7e>
 80030b2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80030b4:	6173      	str	r3, [r6, #20]
 80030b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80030ba:	4629      	mov	r1, r5
 80030bc:	a87a      	add	r0, sp, #488	; 0x1e8
 80030be:	f007 feaa 	bl	800ae16 <memcpy>
 80030c2:	6933      	ldr	r3, [r6, #16]
 80030c4:	aa7a      	add	r2, sp, #488	; 0x1e8
 80030c6:	4631      	mov	r1, r6
 80030c8:	4650      	mov	r0, sl
 80030ca:	4798      	blx	r3
 80030cc:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80030ce:	e9cd 5800 	strd	r5, r8, [sp]
 80030d2:	4621      	mov	r1, r4
 80030d4:	646b      	str	r3, [r5, #68]	; 0x44
 80030d6:	4681      	mov	r9, r0
 80030d8:	4633      	mov	r3, r6
 80030da:	4632      	mov	r2, r6
 80030dc:	2001      	movs	r0, #1
 80030de:	47b8      	blx	r7
 80030e0:	4604      	mov	r4, r0
 80030e2:	b9e8      	cbnz	r0, 8003120 <unwind_phase2_forced+0xa8>
 80030e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80030e8:	a97a      	add	r1, sp, #488	; 0x1e8
 80030ea:	4628      	mov	r0, r5
 80030ec:	f007 fe93 	bl	800ae16 <memcpy>
 80030f0:	f1b9 0f08 	cmp.w	r9, #8
 80030f4:	d11b      	bne.n	800312e <unwind_phase2_forced+0xb6>
 80030f6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80030f8:	4630      	mov	r0, r6
 80030fa:	f7ff ff1b 	bl	8002f34 <get_eit_entry>
 80030fe:	3409      	adds	r4, #9
 8003100:	fa5f fa84 	uxtb.w	sl, r4
 8003104:	4681      	mov	r9, r0
 8003106:	2800      	cmp	r0, #0
 8003108:	d0d3      	beq.n	80030b2 <unwind_phase2_forced+0x3a>
 800310a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800310c:	f04a 0110 	orr.w	r1, sl, #16
 8003110:	e9cd 5800 	strd	r5, r8, [sp]
 8003114:	4632      	mov	r2, r6
 8003116:	646b      	str	r3, [r5, #68]	; 0x44
 8003118:	2001      	movs	r0, #1
 800311a:	4633      	mov	r3, r6
 800311c:	47b8      	blx	r7
 800311e:	b108      	cbz	r0, 8003124 <unwind_phase2_forced+0xac>
 8003120:	f04f 0909 	mov.w	r9, #9
 8003124:	4648      	mov	r0, r9
 8003126:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800312a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800312e:	f1b9 0f07 	cmp.w	r9, #7
 8003132:	d1f5      	bne.n	8003120 <unwind_phase2_forced+0xa8>
 8003134:	4620      	mov	r0, r4
 8003136:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8003138:	f7ff ff7e 	bl	8003038 <_Unwind_DebugHook>
 800313c:	a803      	add	r0, sp, #12
 800313e:	f000 fb89 	bl	8003854 <__restore_core_regs>
 8003142:	bf00      	nop

08003144 <_Unwind_GetCFA>:
 8003144:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8003146:	4770      	bx	lr

08003148 <__gnu_Unwind_RaiseException>:
 8003148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800314a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800314c:	640b      	str	r3, [r1, #64]	; 0x40
 800314e:	1d0e      	adds	r6, r1, #4
 8003150:	460f      	mov	r7, r1
 8003152:	4605      	mov	r5, r0
 8003154:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003156:	b0f9      	sub	sp, #484	; 0x1e4
 8003158:	ac01      	add	r4, sp, #4
 800315a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800315c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800315e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003160:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003164:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003168:	f04f 36ff 	mov.w	r6, #4294967295
 800316c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8003170:	9600      	str	r6, [sp, #0]
 8003172:	e006      	b.n	8003182 <__gnu_Unwind_RaiseException+0x3a>
 8003174:	692b      	ldr	r3, [r5, #16]
 8003176:	466a      	mov	r2, sp
 8003178:	4629      	mov	r1, r5
 800317a:	4798      	blx	r3
 800317c:	2808      	cmp	r0, #8
 800317e:	4604      	mov	r4, r0
 8003180:	d108      	bne.n	8003194 <__gnu_Unwind_RaiseException+0x4c>
 8003182:	9910      	ldr	r1, [sp, #64]	; 0x40
 8003184:	4628      	mov	r0, r5
 8003186:	f7ff fed5 	bl	8002f34 <get_eit_entry>
 800318a:	2800      	cmp	r0, #0
 800318c:	d0f2      	beq.n	8003174 <__gnu_Unwind_RaiseException+0x2c>
 800318e:	2009      	movs	r0, #9
 8003190:	b079      	add	sp, #484	; 0x1e4
 8003192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003194:	4668      	mov	r0, sp
 8003196:	f7ff ff1b 	bl	8002fd0 <restore_non_core_regs>
 800319a:	2c06      	cmp	r4, #6
 800319c:	d1f7      	bne.n	800318e <__gnu_Unwind_RaiseException+0x46>
 800319e:	4639      	mov	r1, r7
 80031a0:	4628      	mov	r0, r5
 80031a2:	f7ff ff4b 	bl	800303c <unwind_phase2>
 80031a6:	bf00      	nop

080031a8 <__gnu_Unwind_ForcedUnwind>:
 80031a8:	b430      	push	{r4, r5}
 80031aa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80031ac:	60c1      	str	r1, [r0, #12]
 80031ae:	6182      	str	r2, [r0, #24]
 80031b0:	4619      	mov	r1, r3
 80031b2:	641d      	str	r5, [r3, #64]	; 0x40
 80031b4:	2200      	movs	r2, #0
 80031b6:	bc30      	pop	{r4, r5}
 80031b8:	e75e      	b.n	8003078 <unwind_phase2_forced>
 80031ba:	bf00      	nop

080031bc <__gnu_Unwind_Resume>:
 80031bc:	b570      	push	{r4, r5, r6, lr}
 80031be:	68c6      	ldr	r6, [r0, #12]
 80031c0:	6943      	ldr	r3, [r0, #20]
 80031c2:	640b      	str	r3, [r1, #64]	; 0x40
 80031c4:	b9ae      	cbnz	r6, 80031f2 <__gnu_Unwind_Resume+0x36>
 80031c6:	6903      	ldr	r3, [r0, #16]
 80031c8:	460a      	mov	r2, r1
 80031ca:	4604      	mov	r4, r0
 80031cc:	460d      	mov	r5, r1
 80031ce:	4601      	mov	r1, r0
 80031d0:	2002      	movs	r0, #2
 80031d2:	4798      	blx	r3
 80031d4:	2807      	cmp	r0, #7
 80031d6:	d005      	beq.n	80031e4 <__gnu_Unwind_Resume+0x28>
 80031d8:	2808      	cmp	r0, #8
 80031da:	d10f      	bne.n	80031fc <__gnu_Unwind_Resume+0x40>
 80031dc:	4629      	mov	r1, r5
 80031de:	4620      	mov	r0, r4
 80031e0:	f7ff ff2c 	bl	800303c <unwind_phase2>
 80031e4:	4630      	mov	r0, r6
 80031e6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80031e8:	f7ff ff26 	bl	8003038 <_Unwind_DebugHook>
 80031ec:	1d28      	adds	r0, r5, #4
 80031ee:	f000 fb31 	bl	8003854 <__restore_core_regs>
 80031f2:	2201      	movs	r2, #1
 80031f4:	f7ff ff40 	bl	8003078 <unwind_phase2_forced>
 80031f8:	f007 fe06 	bl	800ae08 <abort>
 80031fc:	f007 fe04 	bl	800ae08 <abort>

08003200 <__gnu_Unwind_Resume_or_Rethrow>:
 8003200:	68c2      	ldr	r2, [r0, #12]
 8003202:	b11a      	cbz	r2, 800320c <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8003204:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8003206:	640a      	str	r2, [r1, #64]	; 0x40
 8003208:	2200      	movs	r2, #0
 800320a:	e735      	b.n	8003078 <unwind_phase2_forced>
 800320c:	e79c      	b.n	8003148 <__gnu_Unwind_RaiseException>
 800320e:	bf00      	nop

08003210 <_Unwind_Complete>:
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop

08003214 <_Unwind_DeleteException>:
 8003214:	6883      	ldr	r3, [r0, #8]
 8003216:	4601      	mov	r1, r0
 8003218:	b10b      	cbz	r3, 800321e <_Unwind_DeleteException+0xa>
 800321a:	2001      	movs	r0, #1
 800321c:	4718      	bx	r3
 800321e:	4770      	bx	lr

08003220 <_Unwind_VRS_Get>:
 8003220:	2901      	cmp	r1, #1
 8003222:	d012      	beq.n	800324a <_Unwind_VRS_Get+0x2a>
 8003224:	d809      	bhi.n	800323a <_Unwind_VRS_Get+0x1a>
 8003226:	b973      	cbnz	r3, 8003246 <_Unwind_VRS_Get+0x26>
 8003228:	2a0f      	cmp	r2, #15
 800322a:	d80c      	bhi.n	8003246 <_Unwind_VRS_Get+0x26>
 800322c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003230:	4618      	mov	r0, r3
 8003232:	6853      	ldr	r3, [r2, #4]
 8003234:	9a00      	ldr	r2, [sp, #0]
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	4770      	bx	lr
 800323a:	3903      	subs	r1, #3
 800323c:	2901      	cmp	r1, #1
 800323e:	bf94      	ite	ls
 8003240:	2001      	movls	r0, #1
 8003242:	2002      	movhi	r0, #2
 8003244:	4770      	bx	lr
 8003246:	2002      	movs	r0, #2
 8003248:	4770      	bx	lr
 800324a:	4608      	mov	r0, r1
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop

08003250 <_Unwind_GetGR>:
 8003250:	b510      	push	{r4, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	2300      	movs	r3, #0
 8003256:	ac03      	add	r4, sp, #12
 8003258:	460a      	mov	r2, r1
 800325a:	9400      	str	r4, [sp, #0]
 800325c:	4619      	mov	r1, r3
 800325e:	f7ff ffdf 	bl	8003220 <_Unwind_VRS_Get>
 8003262:	9803      	ldr	r0, [sp, #12]
 8003264:	b004      	add	sp, #16
 8003266:	bd10      	pop	{r4, pc}

08003268 <_Unwind_VRS_Set>:
 8003268:	2901      	cmp	r1, #1
 800326a:	d012      	beq.n	8003292 <_Unwind_VRS_Set+0x2a>
 800326c:	d809      	bhi.n	8003282 <_Unwind_VRS_Set+0x1a>
 800326e:	b973      	cbnz	r3, 800328e <_Unwind_VRS_Set+0x26>
 8003270:	2a0f      	cmp	r2, #15
 8003272:	d80c      	bhi.n	800328e <_Unwind_VRS_Set+0x26>
 8003274:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003278:	9a00      	ldr	r2, [sp, #0]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	6042      	str	r2, [r0, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	4770      	bx	lr
 8003282:	3903      	subs	r1, #3
 8003284:	2901      	cmp	r1, #1
 8003286:	bf94      	ite	ls
 8003288:	2001      	movls	r0, #1
 800328a:	2002      	movhi	r0, #2
 800328c:	4770      	bx	lr
 800328e:	2002      	movs	r0, #2
 8003290:	4770      	bx	lr
 8003292:	4608      	mov	r0, r1
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop

08003298 <_Unwind_SetGR>:
 8003298:	b510      	push	{r4, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	2300      	movs	r3, #0
 800329e:	ac03      	add	r4, sp, #12
 80032a0:	9203      	str	r2, [sp, #12]
 80032a2:	9400      	str	r4, [sp, #0]
 80032a4:	460a      	mov	r2, r1
 80032a6:	4619      	mov	r1, r3
 80032a8:	f7ff ffde 	bl	8003268 <_Unwind_VRS_Set>
 80032ac:	b004      	add	sp, #16
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <__gnu_Unwind_Backtrace>:
 80032b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032b2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80032b4:	6413      	str	r3, [r2, #64]	; 0x40
 80032b6:	1d15      	adds	r5, r2, #4
 80032b8:	468c      	mov	ip, r1
 80032ba:	4606      	mov	r6, r0
 80032bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032be:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80032c2:	ac17      	add	r4, sp, #92	; 0x5c
 80032c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80032d2:	f04f 37ff 	mov.w	r7, #4294967295
 80032d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80032da:	4665      	mov	r5, ip
 80032dc:	9716      	str	r7, [sp, #88]	; 0x58
 80032de:	e010      	b.n	8003302 <__gnu_Unwind_Backtrace+0x52>
 80032e0:	f7ff ffda 	bl	8003298 <_Unwind_SetGR>
 80032e4:	4629      	mov	r1, r5
 80032e6:	a816      	add	r0, sp, #88	; 0x58
 80032e8:	47b0      	blx	r6
 80032ea:	4603      	mov	r3, r0
 80032ec:	aa16      	add	r2, sp, #88	; 0x58
 80032ee:	4669      	mov	r1, sp
 80032f0:	2008      	movs	r0, #8
 80032f2:	b983      	cbnz	r3, 8003316 <__gnu_Unwind_Backtrace+0x66>
 80032f4:	9b04      	ldr	r3, [sp, #16]
 80032f6:	4798      	blx	r3
 80032f8:	2805      	cmp	r0, #5
 80032fa:	4604      	mov	r4, r0
 80032fc:	d00c      	beq.n	8003318 <__gnu_Unwind_Backtrace+0x68>
 80032fe:	2809      	cmp	r0, #9
 8003300:	d009      	beq.n	8003316 <__gnu_Unwind_Backtrace+0x66>
 8003302:	9926      	ldr	r1, [sp, #152]	; 0x98
 8003304:	4668      	mov	r0, sp
 8003306:	f7ff fe15 	bl	8002f34 <get_eit_entry>
 800330a:	4603      	mov	r3, r0
 800330c:	466a      	mov	r2, sp
 800330e:	210c      	movs	r1, #12
 8003310:	a816      	add	r0, sp, #88	; 0x58
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0e4      	beq.n	80032e0 <__gnu_Unwind_Backtrace+0x30>
 8003316:	2409      	movs	r4, #9
 8003318:	a816      	add	r0, sp, #88	; 0x58
 800331a:	f7ff fe59 	bl	8002fd0 <restore_non_core_regs>
 800331e:	4620      	mov	r0, r4
 8003320:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8003324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003326:	bf00      	nop

08003328 <__gnu_unwind_pr_common>:
 8003328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800332c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800332e:	b089      	sub	sp, #36	; 0x24
 8003330:	460d      	mov	r5, r1
 8003332:	f854 1b04 	ldr.w	r1, [r4], #4
 8003336:	9406      	str	r4, [sp, #24]
 8003338:	4617      	mov	r7, r2
 800333a:	f000 0803 	and.w	r8, r0, #3
 800333e:	461e      	mov	r6, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d079      	beq.n	8003438 <__gnu_unwind_pr_common+0x110>
 8003344:	0c0b      	lsrs	r3, r1, #16
 8003346:	b2da      	uxtb	r2, r3
 8003348:	0409      	lsls	r1, r1, #16
 800334a:	f88d 301d 	strb.w	r3, [sp, #29]
 800334e:	2302      	movs	r3, #2
 8003350:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8003354:	9105      	str	r1, [sp, #20]
 8003356:	f88d 301c 	strb.w	r3, [sp, #28]
 800335a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800335c:	f1b8 0f02 	cmp.w	r8, #2
 8003360:	bf08      	it	eq
 8003362:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8003364:	f013 0301 	ands.w	r3, r3, #1
 8003368:	d00c      	beq.n	8003384 <__gnu_unwind_pr_common+0x5c>
 800336a:	4638      	mov	r0, r7
 800336c:	a905      	add	r1, sp, #20
 800336e:	f000 fb73 	bl	8003a58 <__gnu_unwind_execute>
 8003372:	b918      	cbnz	r0, 800337c <__gnu_unwind_pr_common+0x54>
 8003374:	2008      	movs	r0, #8
 8003376:	b009      	add	sp, #36	; 0x24
 8003378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800337c:	2009      	movs	r0, #9
 800337e:	b009      	add	sp, #36	; 0x24
 8003380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003384:	f8d4 a000 	ldr.w	sl, [r4]
 8003388:	f1ba 0f00 	cmp.w	sl, #0
 800338c:	d0ed      	beq.n	800336a <__gnu_unwind_pr_common+0x42>
 800338e:	9301      	str	r3, [sp, #4]
 8003390:	f000 0308 	and.w	r3, r0, #8
 8003394:	9302      	str	r3, [sp, #8]
 8003396:	2e02      	cmp	r6, #2
 8003398:	d04a      	beq.n	8003430 <__gnu_unwind_pr_common+0x108>
 800339a:	f8b4 a000 	ldrh.w	sl, [r4]
 800339e:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 80033a2:	3404      	adds	r4, #4
 80033a4:	6caa      	ldr	r2, [r5, #72]	; 0x48
 80033a6:	f029 0b01 	bic.w	fp, r9, #1
 80033aa:	210f      	movs	r1, #15
 80033ac:	4638      	mov	r0, r7
 80033ae:	4493      	add	fp, r2
 80033b0:	f7ff ff4e 	bl	8003250 <_Unwind_GetGR>
 80033b4:	4583      	cmp	fp, r0
 80033b6:	d839      	bhi.n	800342c <__gnu_unwind_pr_common+0x104>
 80033b8:	f02a 0201 	bic.w	r2, sl, #1
 80033bc:	445a      	add	r2, fp
 80033be:	4282      	cmp	r2, r0
 80033c0:	bf94      	ite	ls
 80033c2:	2000      	movls	r0, #0
 80033c4:	2001      	movhi	r0, #1
 80033c6:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	f00a 0a01 	and.w	sl, sl, #1
 80033d2:	ea43 030a 	orr.w	r3, r3, sl
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d049      	beq.n	800346e <__gnu_unwind_pr_common+0x146>
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d032      	beq.n	8003444 <__gnu_unwind_pr_common+0x11c>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1cc      	bne.n	800337c <__gnu_unwind_pr_common+0x54>
 80033e2:	f1b8 0f00 	cmp.w	r8, #0
 80033e6:	d002      	beq.n	80033ee <__gnu_unwind_pr_common+0xc6>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	f040 80cd 	bne.w	8003588 <__gnu_unwind_pr_common+0x260>
 80033ee:	3404      	adds	r4, #4
 80033f0:	f8d4 a000 	ldr.w	sl, [r4]
 80033f4:	f1ba 0f00 	cmp.w	sl, #0
 80033f8:	d1cd      	bne.n	8003396 <__gnu_unwind_pr_common+0x6e>
 80033fa:	a905      	add	r1, sp, #20
 80033fc:	4638      	mov	r0, r7
 80033fe:	f000 fb2b 	bl	8003a58 <__gnu_unwind_execute>
 8003402:	2800      	cmp	r0, #0
 8003404:	d1ba      	bne.n	800337c <__gnu_unwind_pr_common+0x54>
 8003406:	9b01      	ldr	r3, [sp, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0b3      	beq.n	8003374 <__gnu_unwind_pr_common+0x4c>
 800340c:	210f      	movs	r1, #15
 800340e:	4638      	mov	r0, r7
 8003410:	f7ff ff1e 	bl	8003250 <_Unwind_GetGR>
 8003414:	210e      	movs	r1, #14
 8003416:	4602      	mov	r2, r0
 8003418:	4638      	mov	r0, r7
 800341a:	f7ff ff3d 	bl	8003298 <_Unwind_SetGR>
 800341e:	4638      	mov	r0, r7
 8003420:	4a6a      	ldr	r2, [pc, #424]	; (80035cc <__gnu_unwind_pr_common+0x2a4>)
 8003422:	210f      	movs	r1, #15
 8003424:	f7ff ff38 	bl	8003298 <_Unwind_SetGR>
 8003428:	2007      	movs	r0, #7
 800342a:	e7a8      	b.n	800337e <__gnu_unwind_pr_common+0x56>
 800342c:	2000      	movs	r0, #0
 800342e:	e7ca      	b.n	80033c6 <__gnu_unwind_pr_common+0x9e>
 8003430:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8003434:	3408      	adds	r4, #8
 8003436:	e7b5      	b.n	80033a4 <__gnu_unwind_pr_common+0x7c>
 8003438:	0209      	lsls	r1, r1, #8
 800343a:	2303      	movs	r3, #3
 800343c:	9105      	str	r1, [sp, #20]
 800343e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8003442:	e78a      	b.n	800335a <__gnu_unwind_pr_common+0x32>
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800344a:	f1b8 0f00 	cmp.w	r8, #0
 800344e:	d145      	bne.n	80034dc <__gnu_unwind_pr_common+0x1b4>
 8003450:	b128      	cbz	r0, 800345e <__gnu_unwind_pr_common+0x136>
 8003452:	9a02      	ldr	r2, [sp, #8]
 8003454:	2a00      	cmp	r2, #0
 8003456:	d05c      	beq.n	8003512 <__gnu_unwind_pr_common+0x1ea>
 8003458:	f1bb 0f00 	cmp.w	fp, #0
 800345c:	d074      	beq.n	8003548 <__gnu_unwind_pr_common+0x220>
 800345e:	2b00      	cmp	r3, #0
 8003460:	da00      	bge.n	8003464 <__gnu_unwind_pr_common+0x13c>
 8003462:	3404      	adds	r4, #4
 8003464:	f10b 0b01 	add.w	fp, fp, #1
 8003468:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 800346c:	e7c0      	b.n	80033f0 <__gnu_unwind_pr_common+0xc8>
 800346e:	f1b8 0f00 	cmp.w	r8, #0
 8003472:	d119      	bne.n	80034a8 <__gnu_unwind_pr_common+0x180>
 8003474:	b1b0      	cbz	r0, 80034a4 <__gnu_unwind_pr_common+0x17c>
 8003476:	e9d4 2300 	ldrd	r2, r3, [r4]
 800347a:	1c99      	adds	r1, r3, #2
 800347c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8003480:	f43f af7c 	beq.w	800337c <__gnu_unwind_pr_common+0x54>
 8003484:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8003488:	3301      	adds	r3, #1
 800348a:	9104      	str	r1, [sp, #16]
 800348c:	f000 8090 	beq.w	80035b0 <__gnu_unwind_pr_common+0x288>
 8003490:	1d20      	adds	r0, r4, #4
 8003492:	f7ff fdc9 	bl	8003028 <_Unwind_decode_typeinfo_ptr.isra.0>
 8003496:	ab04      	add	r3, sp, #16
 8003498:	4601      	mov	r1, r0
 800349a:	4628      	mov	r0, r5
 800349c:	f3af 8000 	nop.w
 80034a0:	2800      	cmp	r0, #0
 80034a2:	d15b      	bne.n	800355c <__gnu_unwind_pr_common+0x234>
 80034a4:	3408      	adds	r4, #8
 80034a6:	e7a3      	b.n	80033f0 <__gnu_unwind_pr_common+0xc8>
 80034a8:	210d      	movs	r1, #13
 80034aa:	4638      	mov	r0, r7
 80034ac:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80034b0:	f7ff fece 	bl	8003250 <_Unwind_GetGR>
 80034b4:	4581      	cmp	r9, r0
 80034b6:	d1f5      	bne.n	80034a4 <__gnu_unwind_pr_common+0x17c>
 80034b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80034ba:	429c      	cmp	r4, r3
 80034bc:	d1f2      	bne.n	80034a4 <__gnu_unwind_pr_common+0x17c>
 80034be:	4620      	mov	r0, r4
 80034c0:	f7ff fcec 	bl	8002e9c <selfrel_offset31>
 80034c4:	210f      	movs	r1, #15
 80034c6:	4602      	mov	r2, r0
 80034c8:	4638      	mov	r0, r7
 80034ca:	f7ff fee5 	bl	8003298 <_Unwind_SetGR>
 80034ce:	4638      	mov	r0, r7
 80034d0:	462a      	mov	r2, r5
 80034d2:	2100      	movs	r1, #0
 80034d4:	f7ff fee0 	bl	8003298 <_Unwind_SetGR>
 80034d8:	2007      	movs	r0, #7
 80034da:	e750      	b.n	800337e <__gnu_unwind_pr_common+0x56>
 80034dc:	210d      	movs	r1, #13
 80034de:	4638      	mov	r0, r7
 80034e0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80034e4:	f7ff feb4 	bl	8003250 <_Unwind_GetGR>
 80034e8:	4581      	cmp	r9, r0
 80034ea:	d001      	beq.n	80034f0 <__gnu_unwind_pr_common+0x1c8>
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	e7b6      	b.n	800345e <__gnu_unwind_pr_common+0x136>
 80034f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80034f2:	429c      	cmp	r4, r3
 80034f4:	d1fa      	bne.n	80034ec <__gnu_unwind_pr_common+0x1c4>
 80034f6:	2204      	movs	r2, #4
 80034f8:	2100      	movs	r1, #0
 80034fa:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 80034fe:	18a3      	adds	r3, r4, r2
 8003500:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8003504:	636b      	str	r3, [r5, #52]	; 0x34
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	428b      	cmp	r3, r1
 800350a:	db59      	blt.n	80035c0 <__gnu_unwind_pr_common+0x298>
 800350c:	2301      	movs	r3, #1
 800350e:	9301      	str	r3, [sp, #4]
 8003510:	e7a8      	b.n	8003464 <__gnu_unwind_pr_common+0x13c>
 8003512:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8003516:	f8cd 800c 	str.w	r8, [sp, #12]
 800351a:	f104 0a04 	add.w	sl, r4, #4
 800351e:	46b0      	mov	r8, r6
 8003520:	4691      	mov	r9, r2
 8003522:	461e      	mov	r6, r3
 8003524:	e00d      	b.n	8003542 <__gnu_unwind_pr_common+0x21a>
 8003526:	9604      	str	r6, [sp, #16]
 8003528:	f7ff fd7e 	bl	8003028 <_Unwind_decode_typeinfo_ptr.isra.0>
 800352c:	ab04      	add	r3, sp, #16
 800352e:	4601      	mov	r1, r0
 8003530:	2200      	movs	r2, #0
 8003532:	4628      	mov	r0, r5
 8003534:	f3af 8000 	nop.w
 8003538:	f109 0901 	add.w	r9, r9, #1
 800353c:	f10a 0a04 	add.w	sl, sl, #4
 8003540:	b9e8      	cbnz	r0, 800357e <__gnu_unwind_pr_common+0x256>
 8003542:	45d9      	cmp	r9, fp
 8003544:	4650      	mov	r0, sl
 8003546:	d1ee      	bne.n	8003526 <__gnu_unwind_pr_common+0x1fe>
 8003548:	4638      	mov	r0, r7
 800354a:	210d      	movs	r1, #13
 800354c:	f7ff fe80 	bl	8003250 <_Unwind_GetGR>
 8003550:	9b04      	ldr	r3, [sp, #16]
 8003552:	6228      	str	r0, [r5, #32]
 8003554:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8003558:	2006      	movs	r0, #6
 800355a:	e710      	b.n	800337e <__gnu_unwind_pr_common+0x56>
 800355c:	4681      	mov	r9, r0
 800355e:	210d      	movs	r1, #13
 8003560:	4638      	mov	r0, r7
 8003562:	f7ff fe75 	bl	8003250 <_Unwind_GetGR>
 8003566:	f1b9 0f02 	cmp.w	r9, #2
 800356a:	6228      	str	r0, [r5, #32]
 800356c:	d125      	bne.n	80035ba <__gnu_unwind_pr_common+0x292>
 800356e:	462b      	mov	r3, r5
 8003570:	9a04      	ldr	r2, [sp, #16]
 8003572:	f843 2f2c 	str.w	r2, [r3, #44]!
 8003576:	626b      	str	r3, [r5, #36]	; 0x24
 8003578:	62ac      	str	r4, [r5, #40]	; 0x28
 800357a:	2006      	movs	r0, #6
 800357c:	e6ff      	b.n	800337e <__gnu_unwind_pr_common+0x56>
 800357e:	4646      	mov	r6, r8
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003586:	e76a      	b.n	800345e <__gnu_unwind_pr_common+0x136>
 8003588:	4620      	mov	r0, r4
 800358a:	f7ff fc87 	bl	8002e9c <selfrel_offset31>
 800358e:	3404      	adds	r4, #4
 8003590:	4602      	mov	r2, r0
 8003592:	63ac      	str	r4, [r5, #56]	; 0x38
 8003594:	4628      	mov	r0, r5
 8003596:	4614      	mov	r4, r2
 8003598:	f3af 8000 	nop.w
 800359c:	2800      	cmp	r0, #0
 800359e:	f43f aeed 	beq.w	800337c <__gnu_unwind_pr_common+0x54>
 80035a2:	4638      	mov	r0, r7
 80035a4:	4622      	mov	r2, r4
 80035a6:	210f      	movs	r1, #15
 80035a8:	f7ff fe76 	bl	8003298 <_Unwind_SetGR>
 80035ac:	2007      	movs	r0, #7
 80035ae:	e6e6      	b.n	800337e <__gnu_unwind_pr_common+0x56>
 80035b0:	4638      	mov	r0, r7
 80035b2:	210d      	movs	r1, #13
 80035b4:	f7ff fe4c 	bl	8003250 <_Unwind_GetGR>
 80035b8:	6228      	str	r0, [r5, #32]
 80035ba:	9b04      	ldr	r3, [sp, #16]
 80035bc:	626b      	str	r3, [r5, #36]	; 0x24
 80035be:	e7db      	b.n	8003578 <__gnu_unwind_pr_common+0x250>
 80035c0:	f10b 0001 	add.w	r0, fp, #1
 80035c4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80035c8:	e77a      	b.n	80034c0 <__gnu_unwind_pr_common+0x198>
 80035ca:	bf00      	nop
 80035cc:	00000000 	.word	0x00000000

080035d0 <__aeabi_unwind_cpp_pr0>:
 80035d0:	2300      	movs	r3, #0
 80035d2:	e6a9      	b.n	8003328 <__gnu_unwind_pr_common>

080035d4 <__aeabi_unwind_cpp_pr1>:
 80035d4:	2301      	movs	r3, #1
 80035d6:	e6a7      	b.n	8003328 <__gnu_unwind_pr_common>

080035d8 <__aeabi_unwind_cpp_pr2>:
 80035d8:	2302      	movs	r3, #2
 80035da:	e6a5      	b.n	8003328 <__gnu_unwind_pr_common>

080035dc <_Unwind_VRS_Pop>:
 80035dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035e0:	4606      	mov	r6, r0
 80035e2:	b0c3      	sub	sp, #268	; 0x10c
 80035e4:	4615      	mov	r5, r2
 80035e6:	461c      	mov	r4, r3
 80035e8:	2904      	cmp	r1, #4
 80035ea:	f200 80b9 	bhi.w	8003760 <_Unwind_VRS_Pop+0x184>
 80035ee:	e8df f001 	tbb	[pc, r1]
 80035f2:	539a      	.short	0x539a
 80035f4:	29b7      	.short	0x29b7
 80035f6:	03          	.byte	0x03
 80035f7:	00          	.byte	0x00
 80035f8:	2c00      	cmp	r4, #0
 80035fa:	f040 80b1 	bne.w	8003760 <_Unwind_VRS_Pop+0x184>
 80035fe:	2a10      	cmp	r2, #16
 8003600:	f200 80ae 	bhi.w	8003760 <_Unwind_VRS_Pop+0x184>
 8003604:	6803      	ldr	r3, [r0, #0]
 8003606:	06d8      	lsls	r0, r3, #27
 8003608:	f100 80f3 	bmi.w	80037f2 <_Unwind_VRS_Pop+0x216>
 800360c:	af20      	add	r7, sp, #128	; 0x80
 800360e:	4638      	mov	r0, r7
 8003610:	f000 f992 	bl	8003938 <__gnu_Unwind_Save_WMMXC>
 8003614:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8003616:	2300      	movs	r3, #0
 8003618:	2401      	movs	r4, #1
 800361a:	fa04 f203 	lsl.w	r2, r4, r3
 800361e:	422a      	tst	r2, r5
 8003620:	4601      	mov	r1, r0
 8003622:	d004      	beq.n	800362e <_Unwind_VRS_Pop+0x52>
 8003624:	f851 2b04 	ldr.w	r2, [r1], #4
 8003628:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 800362c:	4608      	mov	r0, r1
 800362e:	3301      	adds	r3, #1
 8003630:	2b04      	cmp	r3, #4
 8003632:	d1f2      	bne.n	800361a <_Unwind_VRS_Pop+0x3e>
 8003634:	63b0      	str	r0, [r6, #56]	; 0x38
 8003636:	4638      	mov	r0, r7
 8003638:	f000 f974 	bl	8003924 <__gnu_Unwind_Restore_WMMXC>
 800363c:	2000      	movs	r0, #0
 800363e:	b043      	add	sp, #268	; 0x10c
 8003640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003644:	2c03      	cmp	r4, #3
 8003646:	f040 808b 	bne.w	8003760 <_Unwind_VRS_Pop+0x184>
 800364a:	b294      	uxth	r4, r2
 800364c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8003650:	2b10      	cmp	r3, #16
 8003652:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8003656:	f200 8083 	bhi.w	8003760 <_Unwind_VRS_Pop+0x184>
 800365a:	6803      	ldr	r3, [r0, #0]
 800365c:	071f      	lsls	r7, r3, #28
 800365e:	f100 80d0 	bmi.w	8003802 <_Unwind_VRS_Pop+0x226>
 8003662:	af20      	add	r7, sp, #128	; 0x80
 8003664:	4638      	mov	r0, r7
 8003666:	f000 f93b 	bl	80038e0 <__gnu_Unwind_Save_WMMXD>
 800366a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 800366e:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8003670:	b154      	cbz	r4, 8003688 <_Unwind_VRS_Pop+0xac>
 8003672:	460b      	mov	r3, r1
 8003674:	1ae8      	subs	r0, r5, r3
 8003676:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800367a:	00e4      	lsls	r4, r4, #3
 800367c:	581a      	ldr	r2, [r3, r0]
 800367e:	f843 2b04 	str.w	r2, [r3], #4
 8003682:	428b      	cmp	r3, r1
 8003684:	d1fa      	bne.n	800367c <_Unwind_VRS_Pop+0xa0>
 8003686:	4425      	add	r5, r4
 8003688:	4638      	mov	r0, r7
 800368a:	63b5      	str	r5, [r6, #56]	; 0x38
 800368c:	f000 f906 	bl	800389c <__gnu_Unwind_Restore_WMMXD>
 8003690:	2000      	movs	r0, #0
 8003692:	b043      	add	sp, #268	; 0x10c
 8003694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003698:	2c01      	cmp	r4, #1
 800369a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 800369e:	b295      	uxth	r5, r2
 80036a0:	d05a      	beq.n	8003758 <_Unwind_VRS_Pop+0x17c>
 80036a2:	2c05      	cmp	r4, #5
 80036a4:	d15c      	bne.n	8003760 <_Unwind_VRS_Pop+0x184>
 80036a6:	eb08 0905 	add.w	r9, r8, r5
 80036aa:	f1b9 0f20 	cmp.w	r9, #32
 80036ae:	d857      	bhi.n	8003760 <_Unwind_VRS_Pop+0x184>
 80036b0:	f1b8 0f0f 	cmp.w	r8, #15
 80036b4:	d977      	bls.n	80037a6 <_Unwind_VRS_Pop+0x1ca>
 80036b6:	46a9      	mov	r9, r5
 80036b8:	2d00      	cmp	r5, #0
 80036ba:	f040 8088 	bne.w	80037ce <_Unwind_VRS_Pop+0x1f2>
 80036be:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80036c0:	b36d      	cbz	r5, 800371e <_Unwind_VRS_Pop+0x142>
 80036c2:	af20      	add	r7, sp, #128	; 0x80
 80036c4:	f04f 0900 	mov.w	r9, #0
 80036c8:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80036cc:	3f04      	subs	r7, #4
 80036ce:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80036d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80036d6:	f847 1f04 	str.w	r1, [r7, #4]!
 80036da:	42ab      	cmp	r3, r5
 80036dc:	d1f9      	bne.n	80036d2 <_Unwind_VRS_Pop+0xf6>
 80036de:	f1b9 0f00 	cmp.w	r9, #0
 80036e2:	d00f      	beq.n	8003704 <_Unwind_VRS_Pop+0x128>
 80036e4:	466f      	mov	r7, sp
 80036e6:	4641      	mov	r1, r8
 80036e8:	2910      	cmp	r1, #16
 80036ea:	bf38      	it	cc
 80036ec:	2110      	movcc	r1, #16
 80036ee:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80036f2:	3984      	subs	r1, #132	; 0x84
 80036f4:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 80036f8:	f853 0b04 	ldr.w	r0, [r3], #4
 80036fc:	f841 0f04 	str.w	r0, [r1, #4]!
 8003700:	42ab      	cmp	r3, r5
 8003702:	d1f9      	bne.n	80036f8 <_Unwind_VRS_Pop+0x11c>
 8003704:	2c01      	cmp	r4, #1
 8003706:	f000 8084 	beq.w	8003812 <_Unwind_VRS_Pop+0x236>
 800370a:	f1b8 0f0f 	cmp.w	r8, #15
 800370e:	63b5      	str	r5, [r6, #56]	; 0x38
 8003710:	d945      	bls.n	800379e <_Unwind_VRS_Pop+0x1c2>
 8003712:	f1b9 0f00 	cmp.w	r9, #0
 8003716:	d002      	beq.n	800371e <_Unwind_VRS_Pop+0x142>
 8003718:	4668      	mov	r0, sp
 800371a:	f000 f8b7 	bl	800388c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800371e:	2000      	movs	r0, #0
 8003720:	b043      	add	sp, #268	; 0x10c
 8003722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003726:	b9dc      	cbnz	r4, 8003760 <_Unwind_VRS_Pop+0x184>
 8003728:	6b87      	ldr	r7, [r0, #56]	; 0x38
 800372a:	4623      	mov	r3, r4
 800372c:	2001      	movs	r0, #1
 800372e:	b294      	uxth	r4, r2
 8003730:	f106 0c04 	add.w	ip, r6, #4
 8003734:	fa00 f203 	lsl.w	r2, r0, r3
 8003738:	4222      	tst	r2, r4
 800373a:	4639      	mov	r1, r7
 800373c:	d004      	beq.n	8003748 <_Unwind_VRS_Pop+0x16c>
 800373e:	f851 2b04 	ldr.w	r2, [r1], #4
 8003742:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 8003746:	460f      	mov	r7, r1
 8003748:	3301      	adds	r3, #1
 800374a:	2b10      	cmp	r3, #16
 800374c:	d1f2      	bne.n	8003734 <_Unwind_VRS_Pop+0x158>
 800374e:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8003752:	d1e4      	bne.n	800371e <_Unwind_VRS_Pop+0x142>
 8003754:	63b7      	str	r7, [r6, #56]	; 0x38
 8003756:	e004      	b.n	8003762 <_Unwind_VRS_Pop+0x186>
 8003758:	eb08 0305 	add.w	r3, r8, r5
 800375c:	2b10      	cmp	r3, #16
 800375e:	d903      	bls.n	8003768 <_Unwind_VRS_Pop+0x18c>
 8003760:	2002      	movs	r0, #2
 8003762:	b043      	add	sp, #268	; 0x10c
 8003764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003768:	f1b8 0f0f 	cmp.w	r8, #15
 800376c:	d8f8      	bhi.n	8003760 <_Unwind_VRS_Pop+0x184>
 800376e:	6833      	ldr	r3, [r6, #0]
 8003770:	07da      	lsls	r2, r3, #31
 8003772:	d506      	bpl.n	8003782 <_Unwind_VRS_Pop+0x1a6>
 8003774:	4630      	mov	r0, r6
 8003776:	f023 0303 	bic.w	r3, r3, #3
 800377a:	f840 3b48 	str.w	r3, [r0], #72
 800377e:	f000 f879 	bl	8003874 <__gnu_Unwind_Save_VFP>
 8003782:	af20      	add	r7, sp, #128	; 0x80
 8003784:	4638      	mov	r0, r7
 8003786:	f000 f875 	bl	8003874 <__gnu_Unwind_Save_VFP>
 800378a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800378c:	2d00      	cmp	r5, #0
 800378e:	d199      	bne.n	80036c4 <_Unwind_VRS_Pop+0xe8>
 8003790:	461d      	mov	r5, r3
 8003792:	3504      	adds	r5, #4
 8003794:	63b5      	str	r5, [r6, #56]	; 0x38
 8003796:	4638      	mov	r0, r7
 8003798:	f000 f868 	bl	800386c <__gnu_Unwind_Restore_VFP>
 800379c:	e7bf      	b.n	800371e <_Unwind_VRS_Pop+0x142>
 800379e:	a820      	add	r0, sp, #128	; 0x80
 80037a0:	f000 f86c 	bl	800387c <__gnu_Unwind_Restore_VFP_D>
 80037a4:	e7b5      	b.n	8003712 <_Unwind_VRS_Pop+0x136>
 80037a6:	f1b9 0f10 	cmp.w	r9, #16
 80037aa:	d940      	bls.n	800382e <_Unwind_VRS_Pop+0x252>
 80037ac:	f1a9 0910 	sub.w	r9, r9, #16
 80037b0:	6833      	ldr	r3, [r6, #0]
 80037b2:	07d9      	lsls	r1, r3, #31
 80037b4:	d508      	bpl.n	80037c8 <_Unwind_VRS_Pop+0x1ec>
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	4630      	mov	r0, r6
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	f840 3b48 	str.w	r3, [r0], #72
 80037c4:	f000 f85e 	bl	8003884 <__gnu_Unwind_Save_VFP_D>
 80037c8:	f1b9 0f00 	cmp.w	r9, #0
 80037cc:	d032      	beq.n	8003834 <_Unwind_VRS_Pop+0x258>
 80037ce:	6833      	ldr	r3, [r6, #0]
 80037d0:	075a      	lsls	r2, r3, #29
 80037d2:	d420      	bmi.n	8003816 <_Unwind_VRS_Pop+0x23a>
 80037d4:	f1b8 0f0f 	cmp.w	r8, #15
 80037d8:	d925      	bls.n	8003826 <_Unwind_VRS_Pop+0x24a>
 80037da:	466f      	mov	r7, sp
 80037dc:	4638      	mov	r0, r7
 80037de:	f1c8 0510 	rsb	r5, r8, #16
 80037e2:	f000 f857 	bl	8003894 <__gnu_Unwind_Save_VFP_D_16_to_31>
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80037ea:	f77f af7c 	ble.w	80036e6 <_Unwind_VRS_Pop+0x10a>
 80037ee:	af20      	add	r7, sp, #128	; 0x80
 80037f0:	e76a      	b.n	80036c8 <_Unwind_VRS_Pop+0xec>
 80037f2:	f023 0310 	bic.w	r3, r3, #16
 80037f6:	6033      	str	r3, [r6, #0]
 80037f8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 80037fc:	f000 f89c 	bl	8003938 <__gnu_Unwind_Save_WMMXC>
 8003800:	e704      	b.n	800360c <_Unwind_VRS_Pop+0x30>
 8003802:	f023 0308 	bic.w	r3, r3, #8
 8003806:	6003      	str	r3, [r0, #0]
 8003808:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 800380c:	f000 f868 	bl	80038e0 <__gnu_Unwind_Save_WMMXD>
 8003810:	e727      	b.n	8003662 <_Unwind_VRS_Pop+0x86>
 8003812:	af20      	add	r7, sp, #128	; 0x80
 8003814:	e7bd      	b.n	8003792 <_Unwind_VRS_Pop+0x1b6>
 8003816:	4630      	mov	r0, r6
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	f840 3bd0 	str.w	r3, [r0], #208
 8003820:	f000 f838 	bl	8003894 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8003824:	e7d6      	b.n	80037d4 <_Unwind_VRS_Pop+0x1f8>
 8003826:	a820      	add	r0, sp, #128	; 0x80
 8003828:	f000 f82c 	bl	8003884 <__gnu_Unwind_Save_VFP_D>
 800382c:	e7d5      	b.n	80037da <_Unwind_VRS_Pop+0x1fe>
 800382e:	f04f 0900 	mov.w	r9, #0
 8003832:	e7bd      	b.n	80037b0 <_Unwind_VRS_Pop+0x1d4>
 8003834:	f1b8 0f0f 	cmp.w	r8, #15
 8003838:	f63f af41 	bhi.w	80036be <_Unwind_VRS_Pop+0xe2>
 800383c:	af20      	add	r7, sp, #128	; 0x80
 800383e:	4638      	mov	r0, r7
 8003840:	f000 f820 	bl	8003884 <__gnu_Unwind_Save_VFP_D>
 8003844:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8003846:	2d00      	cmp	r5, #0
 8003848:	f47f af3c 	bne.w	80036c4 <_Unwind_VRS_Pop+0xe8>
 800384c:	4638      	mov	r0, r7
 800384e:	f000 f815 	bl	800387c <__gnu_Unwind_Restore_VFP_D>
 8003852:	e764      	b.n	800371e <_Unwind_VRS_Pop+0x142>

08003854 <__restore_core_regs>:
 8003854:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8003858:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 800385c:	469c      	mov	ip, r3
 800385e:	46a6      	mov	lr, r4
 8003860:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8003864:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8003868:	46e5      	mov	sp, ip
 800386a:	bd00      	pop	{pc}

0800386c <__gnu_Unwind_Restore_VFP>:
 800386c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop

08003874 <__gnu_Unwind_Save_VFP>:
 8003874:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop

0800387c <__gnu_Unwind_Restore_VFP_D>:
 800387c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop

08003884 <__gnu_Unwind_Save_VFP_D>:
 8003884:	ec80 0b20 	vstmia	r0, {d0-d15}
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop

0800388c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 800388c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop

08003894 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8003894:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop

0800389c <__gnu_Unwind_Restore_WMMXD>:
 800389c:	ecf0 0102 	ldfe	f0, [r0], #8
 80038a0:	ecf0 1102 	ldfe	f1, [r0], #8
 80038a4:	ecf0 2102 	ldfe	f2, [r0], #8
 80038a8:	ecf0 3102 	ldfe	f3, [r0], #8
 80038ac:	ecf0 4102 	ldfe	f4, [r0], #8
 80038b0:	ecf0 5102 	ldfe	f5, [r0], #8
 80038b4:	ecf0 6102 	ldfe	f6, [r0], #8
 80038b8:	ecf0 7102 	ldfe	f7, [r0], #8
 80038bc:	ecf0 8102 	ldfp	f0, [r0], #8
 80038c0:	ecf0 9102 	ldfp	f1, [r0], #8
 80038c4:	ecf0 a102 	ldfp	f2, [r0], #8
 80038c8:	ecf0 b102 	ldfp	f3, [r0], #8
 80038cc:	ecf0 c102 	ldfp	f4, [r0], #8
 80038d0:	ecf0 d102 	ldfp	f5, [r0], #8
 80038d4:	ecf0 e102 	ldfp	f6, [r0], #8
 80038d8:	ecf0 f102 	ldfp	f7, [r0], #8
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop

080038e0 <__gnu_Unwind_Save_WMMXD>:
 80038e0:	ece0 0102 	stfe	f0, [r0], #8
 80038e4:	ece0 1102 	stfe	f1, [r0], #8
 80038e8:	ece0 2102 	stfe	f2, [r0], #8
 80038ec:	ece0 3102 	stfe	f3, [r0], #8
 80038f0:	ece0 4102 	stfe	f4, [r0], #8
 80038f4:	ece0 5102 	stfe	f5, [r0], #8
 80038f8:	ece0 6102 	stfe	f6, [r0], #8
 80038fc:	ece0 7102 	stfe	f7, [r0], #8
 8003900:	ece0 8102 	stfp	f0, [r0], #8
 8003904:	ece0 9102 	stfp	f1, [r0], #8
 8003908:	ece0 a102 	stfp	f2, [r0], #8
 800390c:	ece0 b102 	stfp	f3, [r0], #8
 8003910:	ece0 c102 	stfp	f4, [r0], #8
 8003914:	ece0 d102 	stfp	f5, [r0], #8
 8003918:	ece0 e102 	stfp	f6, [r0], #8
 800391c:	ece0 f102 	stfp	f7, [r0], #8
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop

08003924 <__gnu_Unwind_Restore_WMMXC>:
 8003924:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8003928:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 800392c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8003930:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop

08003938 <__gnu_Unwind_Save_WMMXC>:
 8003938:	fca0 8101 	stc2	1, cr8, [r0], #4
 800393c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8003940:	fca0 a101 	stc2	1, cr10, [r0], #4
 8003944:	fca0 b101 	stc2	1, cr11, [r0], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop

0800394c <_Unwind_RaiseException>:
 800394c:	46ec      	mov	ip, sp
 800394e:	b500      	push	{lr}
 8003950:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003954:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003960:	a901      	add	r1, sp, #4
 8003962:	f7ff fbf1 	bl	8003148 <__gnu_Unwind_RaiseException>
 8003966:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800396a:	b012      	add	sp, #72	; 0x48
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop

08003970 <_Unwind_Resume>:
 8003970:	46ec      	mov	ip, sp
 8003972:	b500      	push	{lr}
 8003974:	e92d 5000 	stmdb	sp!, {ip, lr}
 8003978:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e92d 000c 	stmdb	sp!, {r2, r3}
 8003984:	a901      	add	r1, sp, #4
 8003986:	f7ff fc19 	bl	80031bc <__gnu_Unwind_Resume>
 800398a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800398e:	b012      	add	sp, #72	; 0x48
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop

08003994 <_Unwind_Resume_or_Rethrow>:
 8003994:	46ec      	mov	ip, sp
 8003996:	b500      	push	{lr}
 8003998:	e92d 5000 	stmdb	sp!, {ip, lr}
 800399c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80039a8:	a901      	add	r1, sp, #4
 80039aa:	f7ff fc29 	bl	8003200 <__gnu_Unwind_Resume_or_Rethrow>
 80039ae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80039b2:	b012      	add	sp, #72	; 0x48
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop

080039b8 <_Unwind_ForcedUnwind>:
 80039b8:	46ec      	mov	ip, sp
 80039ba:	b500      	push	{lr}
 80039bc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80039c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80039cc:	ab01      	add	r3, sp, #4
 80039ce:	f7ff fbeb 	bl	80031a8 <__gnu_Unwind_ForcedUnwind>
 80039d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80039d6:	b012      	add	sp, #72	; 0x48
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop

080039dc <_Unwind_Backtrace>:
 80039dc:	46ec      	mov	ip, sp
 80039de:	b500      	push	{lr}
 80039e0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80039e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e92d 000c 	stmdb	sp!, {r2, r3}
 80039f0:	aa01      	add	r2, sp, #4
 80039f2:	f7ff fc5d 	bl	80032b0 <__gnu_Unwind_Backtrace>
 80039f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80039fa:	b012      	add	sp, #72	; 0x48
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop

08003a00 <next_unwind_byte>:
 8003a00:	7a02      	ldrb	r2, [r0, #8]
 8003a02:	b97a      	cbnz	r2, 8003a24 <next_unwind_byte+0x24>
 8003a04:	7a43      	ldrb	r3, [r0, #9]
 8003a06:	b1a3      	cbz	r3, 8003a32 <next_unwind_byte+0x32>
 8003a08:	6842      	ldr	r2, [r0, #4]
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b410      	push	{r4}
 8003a0e:	7243      	strb	r3, [r0, #9]
 8003a10:	6813      	ldr	r3, [r2, #0]
 8003a12:	2103      	movs	r1, #3
 8003a14:	1d14      	adds	r4, r2, #4
 8003a16:	7201      	strb	r1, [r0, #8]
 8003a18:	021a      	lsls	r2, r3, #8
 8003a1a:	6044      	str	r4, [r0, #4]
 8003a1c:	6002      	str	r2, [r0, #0]
 8003a1e:	bc10      	pop	{r4}
 8003a20:	0e18      	lsrs	r0, r3, #24
 8003a22:	4770      	bx	lr
 8003a24:	6803      	ldr	r3, [r0, #0]
 8003a26:	3a01      	subs	r2, #1
 8003a28:	7202      	strb	r2, [r0, #8]
 8003a2a:	021a      	lsls	r2, r3, #8
 8003a2c:	6002      	str	r2, [r0, #0]
 8003a2e:	0e18      	lsrs	r0, r3, #24
 8003a30:	4770      	bx	lr
 8003a32:	20b0      	movs	r0, #176	; 0xb0
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop

08003a38 <_Unwind_GetGR.constprop.0>:
 8003a38:	b500      	push	{lr}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	aa03      	add	r2, sp, #12
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9200      	str	r2, [sp, #0]
 8003a42:	4619      	mov	r1, r3
 8003a44:	220c      	movs	r2, #12
 8003a46:	f7ff fbeb 	bl	8003220 <_Unwind_VRS_Get>
 8003a4a:	9803      	ldr	r0, [sp, #12]
 8003a4c:	b005      	add	sp, #20
 8003a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a52:	bf00      	nop

08003a54 <unwind_UCB_from_context>:
 8003a54:	e7f0      	b.n	8003a38 <_Unwind_GetGR.constprop.0>
 8003a56:	bf00      	nop

08003a58 <__gnu_unwind_execute>:
 8003a58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	b085      	sub	sp, #20
 8003a60:	460e      	mov	r6, r1
 8003a62:	f04f 0800 	mov.w	r8, #0
 8003a66:	4630      	mov	r0, r6
 8003a68:	f7ff ffca 	bl	8003a00 <next_unwind_byte>
 8003a6c:	28b0      	cmp	r0, #176	; 0xb0
 8003a6e:	4604      	mov	r4, r0
 8003a70:	f000 80b2 	beq.w	8003bd8 <__gnu_unwind_execute+0x180>
 8003a74:	0607      	lsls	r7, r0, #24
 8003a76:	d520      	bpl.n	8003aba <__gnu_unwind_execute+0x62>
 8003a78:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8003a7c:	2b80      	cmp	r3, #128	; 0x80
 8003a7e:	d04d      	beq.n	8003b1c <__gnu_unwind_execute+0xc4>
 8003a80:	2b90      	cmp	r3, #144	; 0x90
 8003a82:	d036      	beq.n	8003af2 <__gnu_unwind_execute+0x9a>
 8003a84:	2ba0      	cmp	r3, #160	; 0xa0
 8003a86:	d060      	beq.n	8003b4a <__gnu_unwind_execute+0xf2>
 8003a88:	2bb0      	cmp	r3, #176	; 0xb0
 8003a8a:	d074      	beq.n	8003b76 <__gnu_unwind_execute+0x11e>
 8003a8c:	2bc0      	cmp	r3, #192	; 0xc0
 8003a8e:	f000 808b 	beq.w	8003ba8 <__gnu_unwind_execute+0x150>
 8003a92:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8003a96:	2bd0      	cmp	r3, #208	; 0xd0
 8003a98:	d10b      	bne.n	8003ab2 <__gnu_unwind_execute+0x5a>
 8003a9a:	f000 0207 	and.w	r2, r0, #7
 8003a9e:	3201      	adds	r2, #1
 8003aa0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003aa4:	2305      	movs	r3, #5
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4628      	mov	r0, r5
 8003aaa:	f7ff fd97 	bl	80035dc <_Unwind_VRS_Pop>
 8003aae:	2800      	cmp	r0, #0
 8003ab0:	d0d9      	beq.n	8003a66 <__gnu_unwind_execute+0xe>
 8003ab2:	2009      	movs	r0, #9
 8003ab4:	b005      	add	sp, #20
 8003ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003aba:	f10d 090c 	add.w	r9, sp, #12
 8003abe:	2300      	movs	r3, #0
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	0087      	lsls	r7, r0, #2
 8003ac4:	f8cd 9000 	str.w	r9, [sp]
 8003ac8:	220d      	movs	r2, #13
 8003aca:	4628      	mov	r0, r5
 8003acc:	f7ff fba8 	bl	8003220 <_Unwind_VRS_Get>
 8003ad0:	b2ff      	uxtb	r7, r7
 8003ad2:	9b03      	ldr	r3, [sp, #12]
 8003ad4:	f8cd 9000 	str.w	r9, [sp]
 8003ad8:	3704      	adds	r7, #4
 8003ada:	0660      	lsls	r0, r4, #25
 8003adc:	bf4c      	ite	mi
 8003ade:	1bdf      	submi	r7, r3, r7
 8003ae0:	18ff      	addpl	r7, r7, r3
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	220d      	movs	r2, #13
 8003ae8:	4628      	mov	r0, r5
 8003aea:	9703      	str	r7, [sp, #12]
 8003aec:	f7ff fbbc 	bl	8003268 <_Unwind_VRS_Set>
 8003af0:	e7b9      	b.n	8003a66 <__gnu_unwind_execute+0xe>
 8003af2:	f000 030d 	and.w	r3, r0, #13
 8003af6:	2b0d      	cmp	r3, #13
 8003af8:	d0db      	beq.n	8003ab2 <__gnu_unwind_execute+0x5a>
 8003afa:	af03      	add	r7, sp, #12
 8003afc:	2300      	movs	r3, #0
 8003afe:	f000 020f 	and.w	r2, r0, #15
 8003b02:	4619      	mov	r1, r3
 8003b04:	9700      	str	r7, [sp, #0]
 8003b06:	4628      	mov	r0, r5
 8003b08:	f7ff fb8a 	bl	8003220 <_Unwind_VRS_Get>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	9700      	str	r7, [sp, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	220d      	movs	r2, #13
 8003b14:	4628      	mov	r0, r5
 8003b16:	f7ff fba7 	bl	8003268 <_Unwind_VRS_Set>
 8003b1a:	e7a4      	b.n	8003a66 <__gnu_unwind_execute+0xe>
 8003b1c:	4630      	mov	r0, r6
 8003b1e:	f7ff ff6f 	bl	8003a00 <next_unwind_byte>
 8003b22:	0224      	lsls	r4, r4, #8
 8003b24:	4320      	orrs	r0, r4
 8003b26:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003b2a:	d0c2      	beq.n	8003ab2 <__gnu_unwind_execute+0x5a>
 8003b2c:	0104      	lsls	r4, r0, #4
 8003b2e:	2300      	movs	r3, #0
 8003b30:	b2a2      	uxth	r2, r4
 8003b32:	4619      	mov	r1, r3
 8003b34:	4628      	mov	r0, r5
 8003b36:	f7ff fd51 	bl	80035dc <_Unwind_VRS_Pop>
 8003b3a:	2800      	cmp	r0, #0
 8003b3c:	d1b9      	bne.n	8003ab2 <__gnu_unwind_execute+0x5a>
 8003b3e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8003b42:	bf18      	it	ne
 8003b44:	f04f 0801 	movne.w	r8, #1
 8003b48:	e78d      	b.n	8003a66 <__gnu_unwind_execute+0xe>
 8003b4a:	43c2      	mvns	r2, r0
 8003b4c:	f002 0307 	and.w	r3, r2, #7
 8003b50:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8003b54:	411a      	asrs	r2, r3
 8003b56:	0701      	lsls	r1, r0, #28
 8003b58:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	bf48      	it	mi
 8003b62:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8003b66:	4619      	mov	r1, r3
 8003b68:	4628      	mov	r0, r5
 8003b6a:	f7ff fd37 	bl	80035dc <_Unwind_VRS_Pop>
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	f43f af79 	beq.w	8003a66 <__gnu_unwind_execute+0xe>
 8003b74:	e79d      	b.n	8003ab2 <__gnu_unwind_execute+0x5a>
 8003b76:	28b1      	cmp	r0, #177	; 0xb1
 8003b78:	d033      	beq.n	8003be2 <__gnu_unwind_execute+0x18a>
 8003b7a:	28b2      	cmp	r0, #178	; 0xb2
 8003b7c:	f000 808b 	beq.w	8003c96 <__gnu_unwind_execute+0x23e>
 8003b80:	28b3      	cmp	r0, #179	; 0xb3
 8003b82:	d039      	beq.n	8003bf8 <__gnu_unwind_execute+0x1a0>
 8003b84:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8003b88:	2bb4      	cmp	r3, #180	; 0xb4
 8003b8a:	d092      	beq.n	8003ab2 <__gnu_unwind_execute+0x5a>
 8003b8c:	f000 0207 	and.w	r2, r0, #7
 8003b90:	3201      	adds	r2, #1
 8003b92:	2301      	movs	r3, #1
 8003b94:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f7ff fd1e 	bl	80035dc <_Unwind_VRS_Pop>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	f43f af60 	beq.w	8003a66 <__gnu_unwind_execute+0xe>
 8003ba6:	e784      	b.n	8003ab2 <__gnu_unwind_execute+0x5a>
 8003ba8:	28c6      	cmp	r0, #198	; 0xc6
 8003baa:	d042      	beq.n	8003c32 <__gnu_unwind_execute+0x1da>
 8003bac:	28c7      	cmp	r0, #199	; 0xc7
 8003bae:	d04c      	beq.n	8003c4a <__gnu_unwind_execute+0x1f2>
 8003bb0:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8003bb4:	2bc0      	cmp	r3, #192	; 0xc0
 8003bb6:	d05b      	beq.n	8003c70 <__gnu_unwind_execute+0x218>
 8003bb8:	28c8      	cmp	r0, #200	; 0xc8
 8003bba:	d060      	beq.n	8003c7e <__gnu_unwind_execute+0x226>
 8003bbc:	28c9      	cmp	r0, #201	; 0xc9
 8003bbe:	f47f af78 	bne.w	8003ab2 <__gnu_unwind_execute+0x5a>
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f7ff ff1c 	bl	8003a00 <next_unwind_byte>
 8003bc8:	0302      	lsls	r2, r0, #12
 8003bca:	f000 000f 	and.w	r0, r0, #15
 8003bce:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	4302      	orrs	r2, r0
 8003bd6:	e765      	b.n	8003aa4 <__gnu_unwind_execute+0x4c>
 8003bd8:	f1b8 0f00 	cmp.w	r8, #0
 8003bdc:	d018      	beq.n	8003c10 <__gnu_unwind_execute+0x1b8>
 8003bde:	2000      	movs	r0, #0
 8003be0:	e768      	b.n	8003ab4 <__gnu_unwind_execute+0x5c>
 8003be2:	4630      	mov	r0, r6
 8003be4:	f7ff ff0c 	bl	8003a00 <next_unwind_byte>
 8003be8:	4602      	mov	r2, r0
 8003bea:	2800      	cmp	r0, #0
 8003bec:	f43f af61 	beq.w	8003ab2 <__gnu_unwind_execute+0x5a>
 8003bf0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8003bf4:	d0d0      	beq.n	8003b98 <__gnu_unwind_execute+0x140>
 8003bf6:	e75c      	b.n	8003ab2 <__gnu_unwind_execute+0x5a>
 8003bf8:	4630      	mov	r0, r6
 8003bfa:	f7ff ff01 	bl	8003a00 <next_unwind_byte>
 8003bfe:	0301      	lsls	r1, r0, #12
 8003c00:	f000 000f 	and.w	r0, r0, #15
 8003c04:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8003c08:	1c42      	adds	r2, r0, #1
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	e7c3      	b.n	8003b98 <__gnu_unwind_execute+0x140>
 8003c10:	ac03      	add	r4, sp, #12
 8003c12:	4643      	mov	r3, r8
 8003c14:	220e      	movs	r2, #14
 8003c16:	4641      	mov	r1, r8
 8003c18:	9400      	str	r4, [sp, #0]
 8003c1a:	4628      	mov	r0, r5
 8003c1c:	f7ff fb00 	bl	8003220 <_Unwind_VRS_Get>
 8003c20:	9400      	str	r4, [sp, #0]
 8003c22:	4628      	mov	r0, r5
 8003c24:	4643      	mov	r3, r8
 8003c26:	220f      	movs	r2, #15
 8003c28:	4641      	mov	r1, r8
 8003c2a:	f7ff fb1d 	bl	8003268 <_Unwind_VRS_Set>
 8003c2e:	4640      	mov	r0, r8
 8003c30:	e740      	b.n	8003ab4 <__gnu_unwind_execute+0x5c>
 8003c32:	4630      	mov	r0, r6
 8003c34:	f7ff fee4 	bl	8003a00 <next_unwind_byte>
 8003c38:	0301      	lsls	r1, r0, #12
 8003c3a:	f000 000f 	and.w	r0, r0, #15
 8003c3e:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8003c42:	1c42      	adds	r2, r0, #1
 8003c44:	2303      	movs	r3, #3
 8003c46:	430a      	orrs	r2, r1
 8003c48:	e7a6      	b.n	8003b98 <__gnu_unwind_execute+0x140>
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f7ff fed8 	bl	8003a00 <next_unwind_byte>
 8003c50:	4602      	mov	r2, r0
 8003c52:	2800      	cmp	r0, #0
 8003c54:	f43f af2d 	beq.w	8003ab2 <__gnu_unwind_execute+0x5a>
 8003c58:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8003c5c:	f47f af29 	bne.w	8003ab2 <__gnu_unwind_execute+0x5a>
 8003c60:	2104      	movs	r1, #4
 8003c62:	4628      	mov	r0, r5
 8003c64:	f7ff fcba 	bl	80035dc <_Unwind_VRS_Pop>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	f43f aefc 	beq.w	8003a66 <__gnu_unwind_execute+0xe>
 8003c6e:	e720      	b.n	8003ab2 <__gnu_unwind_execute+0x5a>
 8003c70:	f000 020f 	and.w	r2, r0, #15
 8003c74:	3201      	adds	r2, #1
 8003c76:	2303      	movs	r3, #3
 8003c78:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8003c7c:	e78c      	b.n	8003b98 <__gnu_unwind_execute+0x140>
 8003c7e:	4630      	mov	r0, r6
 8003c80:	f7ff febe 	bl	8003a00 <next_unwind_byte>
 8003c84:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8003c88:	f000 030f 	and.w	r3, r0, #15
 8003c8c:	3210      	adds	r2, #16
 8003c8e:	3301      	adds	r3, #1
 8003c90:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8003c94:	e706      	b.n	8003aa4 <__gnu_unwind_execute+0x4c>
 8003c96:	2300      	movs	r3, #0
 8003c98:	f10d 090c 	add.w	r9, sp, #12
 8003c9c:	220d      	movs	r2, #13
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	f8cd 9000 	str.w	r9, [sp]
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f7ff fabb 	bl	8003220 <_Unwind_VRS_Get>
 8003caa:	4630      	mov	r0, r6
 8003cac:	f7ff fea8 	bl	8003a00 <next_unwind_byte>
 8003cb0:	0602      	lsls	r2, r0, #24
 8003cb2:	f04f 0702 	mov.w	r7, #2
 8003cb6:	d50c      	bpl.n	8003cd2 <__gnu_unwind_execute+0x27a>
 8003cb8:	9b03      	ldr	r3, [sp, #12]
 8003cba:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8003cbe:	40b8      	lsls	r0, r7
 8003cc0:	4403      	add	r3, r0
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	9303      	str	r3, [sp, #12]
 8003cc6:	f7ff fe9b 	bl	8003a00 <next_unwind_byte>
 8003cca:	0603      	lsls	r3, r0, #24
 8003ccc:	f107 0707 	add.w	r7, r7, #7
 8003cd0:	d4f2      	bmi.n	8003cb8 <__gnu_unwind_execute+0x260>
 8003cd2:	9b03      	ldr	r3, [sp, #12]
 8003cd4:	f8cd 9000 	str.w	r9, [sp]
 8003cd8:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8003cdc:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8003ce0:	40bc      	lsls	r4, r7
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	4414      	add	r4, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	220d      	movs	r2, #13
 8003cea:	4628      	mov	r0, r5
 8003cec:	9403      	str	r4, [sp, #12]
 8003cee:	f7ff fabb 	bl	8003268 <_Unwind_VRS_Set>
 8003cf2:	e6b8      	b.n	8003a66 <__gnu_unwind_execute+0xe>

08003cf4 <__gnu_unwind_frame>:
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	6853      	ldr	r3, [r2, #4]
 8003cfc:	2403      	movs	r4, #3
 8003cfe:	f88d 400c 	strb.w	r4, [sp, #12]
 8003d02:	021b      	lsls	r3, r3, #8
 8003d04:	f102 0408 	add.w	r4, r2, #8
 8003d08:	4608      	mov	r0, r1
 8003d0a:	79d2      	ldrb	r2, [r2, #7]
 8003d0c:	9301      	str	r3, [sp, #4]
 8003d0e:	a901      	add	r1, sp, #4
 8003d10:	9402      	str	r4, [sp, #8]
 8003d12:	f88d 200d 	strb.w	r2, [sp, #13]
 8003d16:	f7ff fe9f 	bl	8003a58 <__gnu_unwind_execute>
 8003d1a:	b004      	add	sp, #16
 8003d1c:	bd10      	pop	{r4, pc}
 8003d1e:	bf00      	nop

08003d20 <_Unwind_GetRegionStart>:
 8003d20:	b508      	push	{r3, lr}
 8003d22:	f7ff fe97 	bl	8003a54 <unwind_UCB_from_context>
 8003d26:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8003d28:	bd08      	pop	{r3, pc}
 8003d2a:	bf00      	nop

08003d2c <_Unwind_GetLanguageSpecificData>:
 8003d2c:	b508      	push	{r3, lr}
 8003d2e:	f7ff fe91 	bl	8003a54 <unwind_UCB_from_context>
 8003d32:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8003d34:	79c3      	ldrb	r3, [r0, #7]
 8003d36:	3302      	adds	r3, #2
 8003d38:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8003d3c:	bd08      	pop	{r3, pc}
 8003d3e:	bf00      	nop

08003d40 <__aeabi_idiv0>:
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop

08003d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d7c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003d48:	f006 ff78 	bl	800ac3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d4e:	e003      	b.n	8003d58 <LoopCopyDataInit>

08003d50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003d52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d56:	3104      	adds	r1, #4

08003d58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d58:	480a      	ldr	r0, [pc, #40]	; (8003d84 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003d5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d60:	d3f6      	bcc.n	8003d50 <CopyDataInit>
  ldr  r2, =_sbss
 8003d62:	4a0a      	ldr	r2, [pc, #40]	; (8003d8c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003d64:	e002      	b.n	8003d6c <LoopFillZerobss>

08003d66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d68:	f842 3b04 	str.w	r3, [r2], #4

08003d6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d6c:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003d6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d70:	d3f9      	bcc.n	8003d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d72:	f007 f81d 	bl	800adb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d76:	f000 f839 	bl	8003dec <main>
  bx  lr    
 8003d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d80:	0800b0a8 	.word	0x0800b0a8
  ldr  r0, =_sdata
 8003d84:	20001800 	.word	0x20001800
  ldr  r3, =_edata
 8003d88:	20001874 	.word	0x20001874
  ldr  r2, =_sbss
 8003d8c:	20001934 	.word	0x20001934
  ldr  r3, = _ebss
 8003d90:	20001fcc 	.word	0x20001fcc

08003d94 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d94:	e7fe      	b.n	8003d94 <ADC3_IRQHandler>
	...

08003d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	6039      	str	r1, [r7, #0]
 8003da2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	db0a      	blt.n	8003dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	490c      	ldr	r1, [pc, #48]	; (8003de4 <__NVIC_SetPriority+0x4c>)
 8003db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003db6:	0112      	lsls	r2, r2, #4
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	440b      	add	r3, r1
 8003dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dc0:	e00a      	b.n	8003dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	4908      	ldr	r1, [pc, #32]	; (8003de8 <__NVIC_SetPriority+0x50>)
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	3b04      	subs	r3, #4
 8003dd0:	0112      	lsls	r2, r2, #4
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	761a      	strb	r2, [r3, #24]
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000e100 	.word	0xe000e100
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8003df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003df6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8003df8:	bf00      	nop
 8003dfa:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <main+0xe0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d004      	beq.n	8003e10 <main+0x24>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	1e5a      	subs	r2, r3, #1
 8003e0a:	607a      	str	r2, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	dcf4      	bgt.n	8003dfa <main+0xe>
  if ( timeout < 0 )
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	da01      	bge.n	8003e1a <main+0x2e>
  {
  Error_Handler();
 8003e16:	f000 fad9 	bl	80043cc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e1a:	f000 fedd 	bl	8004bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e1e:	f000 f857 	bl	8003ed0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8003e22:	4b2a      	ldr	r3, [pc, #168]	; (8003ecc <main+0xe0>)
 8003e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e28:	4a28      	ldr	r2, [pc, #160]	; (8003ecc <main+0xe0>)
 8003e2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e32:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <main+0xe0>)
 8003e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3c:	603b      	str	r3, [r7, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8003e40:	2000      	movs	r0, #0
 8003e42:	f002 fc6b 	bl	800671c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8003e46:	2100      	movs	r1, #0
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f002 fc81 	bl	8006750 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8003e4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e52:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8003e54:	bf00      	nop
 8003e56:	4b1d      	ldr	r3, [pc, #116]	; (8003ecc <main+0xe0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d104      	bne.n	8003e6c <main+0x80>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	1e5a      	subs	r2, r3, #1
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	dcf4      	bgt.n	8003e56 <main+0x6a>
if ( timeout < 0 )
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	da01      	bge.n	8003e76 <main+0x8a>
{
Error_Handler();
 8003e72:	f000 faab 	bl	80043cc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e76:	f000 f9e1 	bl	800423c <MX_GPIO_Init>
  MX_DMA_Init();
 8003e7a:	f000 f9b7 	bl	80041ec <MX_DMA_Init>
  MX_ETH_Init();
 8003e7e:	f000 f8e5 	bl	800404c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8003e82:	f000 f935 	bl	80040f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8003e86:	f000 f97f 	bl	8004188 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  SET_BIT(RCC->D3AMR, RCC_D3AMR_SRAM4AMEN);
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <main+0xe0>)
 8003e8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003e90:	4a0e      	ldr	r2, [pc, #56]	; (8003ecc <main+0xe0>)
 8003e92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e96:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	NVIC_SetPriority(SVCall_IRQn,3);
 8003e9a:	2103      	movs	r1, #3
 8003e9c:	f06f 0004 	mvn.w	r0, #4
 8003ea0:	f7ff ff7a 	bl	8003d98 <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn,4);
 8003ea4:	2104      	movs	r1, #4
 8003ea6:	f06f 0001 	mvn.w	r0, #1
 8003eaa:	f7ff ff75 	bl	8003d98 <__NVIC_SetPriority>
  NVIC_SetPriority (SysTick_IRQn, 0);         /* set Priority for Systick Interrupt */
 8003eae:	2100      	movs	r1, #0
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	f7ff ff70 	bl	8003d98 <__NVIC_SetPriority>

    cosmosApi_boot();
 8003eb8:	f000 fcfc 	bl	80048b4 <osBoot_boot>
	cosmosApi_osInit_init();
 8003ebc:	2019      	movs	r0, #25
 8003ebe:	f7fe f9a0 	bl	8002202 <sysCalls_bitWidthType_ret_void>
	cosmosApi_os_start();
 8003ec2:	201a      	movs	r0, #26
 8003ec4:	f7fe f99d 	bl	8002202 <sysCalls_bitWidthType_ret_void>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003ec8:	e7fe      	b.n	8003ec8 <main+0xdc>
 8003eca:	bf00      	nop
 8003ecc:	58024400 	.word	0x58024400

08003ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b0cc      	sub	sp, #304	; 0x130
 8003ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ed6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003eda:	224c      	movs	r2, #76	; 0x4c
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f006 ff8a 	bl	800adf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ee4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ee8:	2220      	movs	r2, #32
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f006 ff83 	bl	800adf8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ef2:	f107 0308 	add.w	r3, r7, #8
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	23bc      	movs	r3, #188	; 0xbc
 8003efa:	461a      	mov	r2, r3
 8003efc:	2100      	movs	r1, #0
 8003efe:	f006 ff7b 	bl	800adf8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8003f02:	2004      	movs	r0, #4
 8003f04:	f002 fd80 	bl	8006a08 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003f08:	1d3b      	adds	r3, r7, #4
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	4b4c      	ldr	r3, [pc, #304]	; (8004040 <SystemClock_Config+0x170>)
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	4a4b      	ldr	r2, [pc, #300]	; (8004040 <SystemClock_Config+0x170>)
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f1a:	4b49      	ldr	r3, [pc, #292]	; (8004040 <SystemClock_Config+0x170>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	f003 0201 	and.w	r2, r3, #1
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	4b47      	ldr	r3, [pc, #284]	; (8004044 <SystemClock_Config+0x174>)
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003f2e:	4a45      	ldr	r2, [pc, #276]	; (8004044 <SystemClock_Config+0x174>)
 8003f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f34:	6193      	str	r3, [r2, #24]
 8003f36:	4b43      	ldr	r3, [pc, #268]	; (8004044 <SystemClock_Config+0x174>)
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	1d3b      	adds	r3, r7, #4
 8003f44:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003f46:	bf00      	nop
 8003f48:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <SystemClock_Config+0x174>)
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f54:	d1f8      	bne.n	8003f48 <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8003f56:	2321      	movs	r3, #33	; 0x21
 8003f58:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003f5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003f60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003f64:	2301      	movs	r3, #1
 8003f66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003f70:	2302      	movs	r3, #2
 8003f72:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 25;
 8003f7c:	2319      	movs	r3, #25
 8003f7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003f82:	2302      	movs	r3, #2
 8003f84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003f88:	2304      	movs	r3, #4
 8003f8a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003f8e:	2302      	movs	r3, #2
 8003f90:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003f94:	230c      	movs	r3, #12
 8003f96:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fa6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003faa:	4618      	mov	r0, r3
 8003fac:	f002 fd96 	bl	8006adc <HAL_RCC_OscConfig>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003fb6:	f000 fa09 	bl	80043cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fba:	233f      	movs	r3, #63	; 0x3f
 8003fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003fea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003fee:	2101      	movs	r1, #1
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 f983 	bl	80072fc <HAL_RCC_ClockConfig>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <SystemClock_Config+0x130>
  {
    Error_Handler();
 8003ffc:	f000 f9e6 	bl	80043cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	4a10      	ldr	r2, [pc, #64]	; (8004048 <SystemClock_Config+0x178>)
 8004006:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004008:	f107 0308 	add.w	r3, r7, #8
 800400c:	2200      	movs	r2, #0
 800400e:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004010:	f107 0308 	add.w	r3, r7, #8
 8004014:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800401c:	f107 0308 	add.w	r3, r7, #8
 8004020:	4618      	mov	r0, r3
 8004022:	f003 fd39 	bl	8007a98 <HAL_RCCEx_PeriphCLKConfig>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <SystemClock_Config+0x160>
  {
    Error_Handler();
 800402c:	f000 f9ce 	bl	80043cc <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8004030:	f002 fd44 	bl	8006abc <HAL_PWREx_EnableUSBVoltageDetector>
}
 8004034:	bf00      	nop
 8004036:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	58000400 	.word	0x58000400
 8004044:	58024800 	.word	0x58024800
 8004048:	00040002 	.word	0x00040002

0800404c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <MX_ETH_Init+0x90>)
 8004052:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <MX_ETH_Init+0x94>)
 8004054:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8004056:	4b21      	ldr	r3, [pc, #132]	; (80040dc <MX_ETH_Init+0x90>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800405e:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <MX_ETH_Init+0x90>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	3301      	adds	r3, #1
 8004064:	2280      	movs	r2, #128	; 0x80
 8004066:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8004068:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <MX_ETH_Init+0x90>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	3302      	adds	r3, #2
 800406e:	22e1      	movs	r2, #225	; 0xe1
 8004070:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <MX_ETH_Init+0x90>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	3303      	adds	r3, #3
 8004078:	2200      	movs	r2, #0
 800407a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800407c:	4b17      	ldr	r3, [pc, #92]	; (80040dc <MX_ETH_Init+0x90>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	3304      	adds	r3, #4
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <MX_ETH_Init+0x90>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	3305      	adds	r3, #5
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004090:	4b12      	ldr	r3, [pc, #72]	; (80040dc <MX_ETH_Init+0x90>)
 8004092:	2201      	movs	r2, #1
 8004094:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004096:	4b11      	ldr	r3, [pc, #68]	; (80040dc <MX_ETH_Init+0x90>)
 8004098:	4a12      	ldr	r2, [pc, #72]	; (80040e4 <MX_ETH_Init+0x98>)
 800409a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800409c:	4b0f      	ldr	r3, [pc, #60]	; (80040dc <MX_ETH_Init+0x90>)
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <MX_ETH_Init+0x9c>)
 80040a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80040a2:	4b0e      	ldr	r3, [pc, #56]	; (80040dc <MX_ETH_Init+0x90>)
 80040a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80040a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80040aa:	480c      	ldr	r0, [pc, #48]	; (80040dc <MX_ETH_Init+0x90>)
 80040ac:	f001 fd3c 	bl	8005b28 <HAL_ETH_Init>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80040b6:	f000 f989 	bl	80043cc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80040ba:	2234      	movs	r2, #52	; 0x34
 80040bc:	2100      	movs	r1, #0
 80040be:	480b      	ldr	r0, [pc, #44]	; (80040ec <MX_ETH_Init+0xa0>)
 80040c0:	f006 fe9a 	bl	800adf8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <MX_ETH_Init+0xa0>)
 80040c6:	2221      	movs	r2, #33	; 0x21
 80040c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80040ca:	4b08      	ldr	r3, [pc, #32]	; (80040ec <MX_ETH_Init+0xa0>)
 80040cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80040d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <MX_ETH_Init+0xa0>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20001ed4 	.word	0x20001ed4
 80040e0:	40028000 	.word	0x40028000
 80040e4:	200018d4 	.word	0x200018d4
 80040e8:	20001874 	.word	0x20001874
 80040ec:	20001f44 	.word	0x20001f44

080040f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040f4:	4b22      	ldr	r3, [pc, #136]	; (8004180 <MX_USART3_UART_Init+0x90>)
 80040f6:	4a23      	ldr	r2, [pc, #140]	; (8004184 <MX_USART3_UART_Init+0x94>)
 80040f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80040fa:	4b21      	ldr	r3, [pc, #132]	; (8004180 <MX_USART3_UART_Init+0x90>)
 80040fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004100:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004102:	4b1f      	ldr	r3, [pc, #124]	; (8004180 <MX_USART3_UART_Init+0x90>)
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004108:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <MX_USART3_UART_Init+0x90>)
 800410a:	2200      	movs	r2, #0
 800410c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <MX_USART3_UART_Init+0x90>)
 8004110:	2200      	movs	r2, #0
 8004112:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004114:	4b1a      	ldr	r3, [pc, #104]	; (8004180 <MX_USART3_UART_Init+0x90>)
 8004116:	220c      	movs	r2, #12
 8004118:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800411a:	4b19      	ldr	r3, [pc, #100]	; (8004180 <MX_USART3_UART_Init+0x90>)
 800411c:	2200      	movs	r2, #0
 800411e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004120:	4b17      	ldr	r3, [pc, #92]	; (8004180 <MX_USART3_UART_Init+0x90>)
 8004122:	2200      	movs	r2, #0
 8004124:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004126:	4b16      	ldr	r3, [pc, #88]	; (8004180 <MX_USART3_UART_Init+0x90>)
 8004128:	2200      	movs	r2, #0
 800412a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <MX_USART3_UART_Init+0x90>)
 800412e:	2200      	movs	r2, #0
 8004130:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <MX_USART3_UART_Init+0x90>)
 8004134:	2200      	movs	r2, #0
 8004136:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004138:	4811      	ldr	r0, [pc, #68]	; (8004180 <MX_USART3_UART_Init+0x90>)
 800413a:	f005 fa97 	bl	800966c <HAL_UART_Init>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d001      	beq.n	8004148 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004144:	f000 f942 	bl	80043cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004148:	2100      	movs	r1, #0
 800414a:	480d      	ldr	r0, [pc, #52]	; (8004180 <MX_USART3_UART_Init+0x90>)
 800414c:	f006 f9e7 	bl	800a51e <HAL_UARTEx_SetTxFifoThreshold>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004156:	f000 f939 	bl	80043cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800415a:	2100      	movs	r1, #0
 800415c:	4808      	ldr	r0, [pc, #32]	; (8004180 <MX_USART3_UART_Init+0x90>)
 800415e:	f006 fa1c 	bl	800a59a <HAL_UARTEx_SetRxFifoThreshold>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004168:	f000 f930 	bl	80043cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800416c:	4804      	ldr	r0, [pc, #16]	; (8004180 <MX_USART3_UART_Init+0x90>)
 800416e:	f006 f99d 	bl	800a4ac <HAL_UARTEx_DisableFifoMode>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004178:	f000 f928 	bl	80043cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	200019c8 	.word	0x200019c8
 8004184:	40004800 	.word	0x40004800

08004188 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800418c:	4b15      	ldr	r3, [pc, #84]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800418e:	4a16      	ldr	r2, [pc, #88]	; (80041e8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8004190:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8004192:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004194:	2209      	movs	r2, #9
 8004196:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004198:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800419a:	2202      	movs	r2, #2
 800419c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800419e:	4b11      	ldr	r3, [pc, #68]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80041a6:	2202      	movs	r2, #2
 80041a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80041b0:	4b0c      	ldr	r3, [pc, #48]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80041be:	2201      	movs	r2, #1
 80041c0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80041ce:	4805      	ldr	r0, [pc, #20]	; (80041e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80041d0:	f002 fad2 	bl	8006778 <HAL_PCD_Init>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80041da:	f000 f8f7 	bl	80043cc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20001a54 	.word	0x20001a54
 80041e8:	40080000 	.word	0x40080000

080041ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <MX_DMA_Init+0x4c>)
 80041f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80041f8:	4a0f      	ldr	r2, [pc, #60]	; (8004238 <MX_DMA_Init+0x4c>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004202:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <MX_DMA_Init+0x4c>)
 8004204:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8004210:	2200      	movs	r2, #0
 8004212:	2100      	movs	r1, #0
 8004214:	200b      	movs	r0, #11
 8004216:	f000 fe37 	bl	8004e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800421a:	200b      	movs	r0, #11
 800421c:	f000 fe4e 	bl	8004ebc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004220:	2200      	movs	r2, #0
 8004222:	2100      	movs	r1, #0
 8004224:	200c      	movs	r0, #12
 8004226:	f000 fe2f 	bl	8004e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800422a:	200c      	movs	r0, #12
 800422c:	f000 fe46 	bl	8004ebc <HAL_NVIC_EnableIRQ>

}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	58024400 	.word	0x58024400

0800423c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08e      	sub	sp, #56	; 0x38
 8004240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	605a      	str	r2, [r3, #4]
 800424c:	609a      	str	r2, [r3, #8]
 800424e:	60da      	str	r2, [r3, #12]
 8004250:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004252:	4b52      	ldr	r3, [pc, #328]	; (800439c <MX_GPIO_Init+0x160>)
 8004254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004258:	4a50      	ldr	r2, [pc, #320]	; (800439c <MX_GPIO_Init+0x160>)
 800425a:	f043 0304 	orr.w	r3, r3, #4
 800425e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004262:	4b4e      	ldr	r3, [pc, #312]	; (800439c <MX_GPIO_Init+0x160>)
 8004264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	623b      	str	r3, [r7, #32]
 800426e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004270:	4b4a      	ldr	r3, [pc, #296]	; (800439c <MX_GPIO_Init+0x160>)
 8004272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004276:	4a49      	ldr	r2, [pc, #292]	; (800439c <MX_GPIO_Init+0x160>)
 8004278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004280:	4b46      	ldr	r3, [pc, #280]	; (800439c <MX_GPIO_Init+0x160>)
 8004282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800428e:	4b43      	ldr	r3, [pc, #268]	; (800439c <MX_GPIO_Init+0x160>)
 8004290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004294:	4a41      	ldr	r2, [pc, #260]	; (800439c <MX_GPIO_Init+0x160>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800429e:	4b3f      	ldr	r3, [pc, #252]	; (800439c <MX_GPIO_Init+0x160>)
 80042a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042ac:	4b3b      	ldr	r3, [pc, #236]	; (800439c <MX_GPIO_Init+0x160>)
 80042ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042b2:	4a3a      	ldr	r2, [pc, #232]	; (800439c <MX_GPIO_Init+0x160>)
 80042b4:	f043 0320 	orr.w	r3, r3, #32
 80042b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042bc:	4b37      	ldr	r3, [pc, #220]	; (800439c <MX_GPIO_Init+0x160>)
 80042be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042c2:	f003 0320 	and.w	r3, r3, #32
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ca:	4b34      	ldr	r3, [pc, #208]	; (800439c <MX_GPIO_Init+0x160>)
 80042cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d0:	4a32      	ldr	r2, [pc, #200]	; (800439c <MX_GPIO_Init+0x160>)
 80042d2:	f043 0302 	orr.w	r3, r3, #2
 80042d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042da:	4b30      	ldr	r3, [pc, #192]	; (800439c <MX_GPIO_Init+0x160>)
 80042dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042e8:	4b2c      	ldr	r3, [pc, #176]	; (800439c <MX_GPIO_Init+0x160>)
 80042ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042ee:	4a2b      	ldr	r2, [pc, #172]	; (800439c <MX_GPIO_Init+0x160>)
 80042f0:	f043 0308 	orr.w	r3, r3, #8
 80042f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042f8:	4b28      	ldr	r3, [pc, #160]	; (800439c <MX_GPIO_Init+0x160>)
 80042fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004306:	4b25      	ldr	r3, [pc, #148]	; (800439c <MX_GPIO_Init+0x160>)
 8004308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800430c:	4a23      	ldr	r2, [pc, #140]	; (800439c <MX_GPIO_Init+0x160>)
 800430e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004312:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004316:	4b21      	ldr	r3, [pc, #132]	; (800439c <MX_GPIO_Init+0x160>)
 8004318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004324:	4b1d      	ldr	r3, [pc, #116]	; (800439c <MX_GPIO_Init+0x160>)
 8004326:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800432a:	4a1c      	ldr	r2, [pc, #112]	; (800439c <MX_GPIO_Init+0x160>)
 800432c:	f043 0310 	orr.w	r3, r3, #16
 8004330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <MX_GPIO_Init+0x160>)
 8004336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800433a:	f003 0310 	and.w	r3, r3, #16
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8004342:	2200      	movs	r2, #0
 8004344:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004348:	4815      	ldr	r0, [pc, #84]	; (80043a0 <MX_GPIO_Init+0x164>)
 800434a:	f002 f9b3 	bl	80066b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800434e:	2200      	movs	r2, #0
 8004350:	2102      	movs	r1, #2
 8004352:	4814      	ldr	r0, [pc, #80]	; (80043a4 <MX_GPIO_Init+0x168>)
 8004354:	f002 f9ae 	bl	80066b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004358:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800435c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800435e:	2301      	movs	r3, #1
 8004360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004362:	2300      	movs	r3, #0
 8004364:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004366:	2303      	movs	r3, #3
 8004368:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800436a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800436e:	4619      	mov	r1, r3
 8004370:	480b      	ldr	r0, [pc, #44]	; (80043a0 <MX_GPIO_Init+0x164>)
 8004372:	f001 ffef 	bl	8006354 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004376:	2302      	movs	r3, #2
 8004378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800437a:	2301      	movs	r3, #1
 800437c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437e:	2300      	movs	r3, #0
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004382:	2303      	movs	r3, #3
 8004384:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800438a:	4619      	mov	r1, r3
 800438c:	4805      	ldr	r0, [pc, #20]	; (80043a4 <MX_GPIO_Init+0x168>)
 800438e:	f001 ffe1 	bl	8006354 <HAL_GPIO_Init>

}
 8004392:	bf00      	nop
 8004394:	3738      	adds	r7, #56	; 0x38
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	58024400 	.word	0x58024400
 80043a0:	58021400 	.word	0x58021400
 80043a4:	58021000 	.word	0x58021000

080043a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a04      	ldr	r2, [pc, #16]	; (80043c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d101      	bne.n	80043be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80043ba:	f000 fc49 	bl	8004c50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40010000 	.word	0x40010000

080043cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80043d0:	b672      	cpsid	i
}
 80043d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043d4:	e7fe      	b.n	80043d4 <Error_Handler+0x8>
	...

080043d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043de:	4b0a      	ldr	r3, [pc, #40]	; (8004408 <HAL_MspInit+0x30>)
 80043e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043e4:	4a08      	ldr	r2, [pc, #32]	; (8004408 <HAL_MspInit+0x30>)
 80043e6:	f043 0302 	orr.w	r3, r3, #2
 80043ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043ee:	4b06      	ldr	r3, [pc, #24]	; (8004408 <HAL_MspInit+0x30>)
 80043f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	58024400 	.word	0x58024400

0800440c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08e      	sub	sp, #56	; 0x38
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	609a      	str	r2, [r3, #8]
 8004420:	60da      	str	r2, [r3, #12]
 8004422:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a59      	ldr	r2, [pc, #356]	; (8004590 <HAL_ETH_MspInit+0x184>)
 800442a:	4293      	cmp	r3, r2
 800442c:	f040 80ab 	bne.w	8004586 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004430:	4b58      	ldr	r3, [pc, #352]	; (8004594 <HAL_ETH_MspInit+0x188>)
 8004432:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004436:	4a57      	ldr	r2, [pc, #348]	; (8004594 <HAL_ETH_MspInit+0x188>)
 8004438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800443c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004440:	4b54      	ldr	r3, [pc, #336]	; (8004594 <HAL_ETH_MspInit+0x188>)
 8004442:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800444e:	4b51      	ldr	r3, [pc, #324]	; (8004594 <HAL_ETH_MspInit+0x188>)
 8004450:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004454:	4a4f      	ldr	r2, [pc, #316]	; (8004594 <HAL_ETH_MspInit+0x188>)
 8004456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800445a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800445e:	4b4d      	ldr	r3, [pc, #308]	; (8004594 <HAL_ETH_MspInit+0x188>)
 8004460:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800446c:	4b49      	ldr	r3, [pc, #292]	; (8004594 <HAL_ETH_MspInit+0x188>)
 800446e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004472:	4a48      	ldr	r2, [pc, #288]	; (8004594 <HAL_ETH_MspInit+0x188>)
 8004474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004478:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800447c:	4b45      	ldr	r3, [pc, #276]	; (8004594 <HAL_ETH_MspInit+0x188>)
 800447e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	61bb      	str	r3, [r7, #24]
 8004488:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800448a:	4b42      	ldr	r3, [pc, #264]	; (8004594 <HAL_ETH_MspInit+0x188>)
 800448c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004490:	4a40      	ldr	r2, [pc, #256]	; (8004594 <HAL_ETH_MspInit+0x188>)
 8004492:	f043 0304 	orr.w	r3, r3, #4
 8004496:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800449a:	4b3e      	ldr	r3, [pc, #248]	; (8004594 <HAL_ETH_MspInit+0x188>)
 800449c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044a8:	4b3a      	ldr	r3, [pc, #232]	; (8004594 <HAL_ETH_MspInit+0x188>)
 80044aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ae:	4a39      	ldr	r2, [pc, #228]	; (8004594 <HAL_ETH_MspInit+0x188>)
 80044b0:	f043 0301 	orr.w	r3, r3, #1
 80044b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044b8:	4b36      	ldr	r3, [pc, #216]	; (8004594 <HAL_ETH_MspInit+0x188>)
 80044ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044c6:	4b33      	ldr	r3, [pc, #204]	; (8004594 <HAL_ETH_MspInit+0x188>)
 80044c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044cc:	4a31      	ldr	r2, [pc, #196]	; (8004594 <HAL_ETH_MspInit+0x188>)
 80044ce:	f043 0302 	orr.w	r3, r3, #2
 80044d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <HAL_ETH_MspInit+0x188>)
 80044d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80044e4:	4b2b      	ldr	r3, [pc, #172]	; (8004594 <HAL_ETH_MspInit+0x188>)
 80044e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044ea:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <HAL_ETH_MspInit+0x188>)
 80044ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044f4:	4b27      	ldr	r3, [pc, #156]	; (8004594 <HAL_ETH_MspInit+0x188>)
 80044f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fe:	60bb      	str	r3, [r7, #8]
 8004500:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004502:	2332      	movs	r3, #50	; 0x32
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004506:	2302      	movs	r3, #2
 8004508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450a:	2300      	movs	r3, #0
 800450c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800450e:	2300      	movs	r3, #0
 8004510:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004512:	230b      	movs	r3, #11
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800451a:	4619      	mov	r1, r3
 800451c:	481e      	ldr	r0, [pc, #120]	; (8004598 <HAL_ETH_MspInit+0x18c>)
 800451e:	f001 ff19 	bl	8006354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004522:	2386      	movs	r3, #134	; 0x86
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452e:	2300      	movs	r3, #0
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004532:	230b      	movs	r3, #11
 8004534:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800453a:	4619      	mov	r1, r3
 800453c:	4817      	ldr	r0, [pc, #92]	; (800459c <HAL_ETH_MspInit+0x190>)
 800453e:	f001 ff09 	bl	8006354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004548:	2302      	movs	r3, #2
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004550:	2300      	movs	r3, #0
 8004552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004554:	230b      	movs	r3, #11
 8004556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800455c:	4619      	mov	r1, r3
 800455e:	4810      	ldr	r0, [pc, #64]	; (80045a0 <HAL_ETH_MspInit+0x194>)
 8004560:	f001 fef8 	bl	8006354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004564:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800456a:	2302      	movs	r3, #2
 800456c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456e:	2300      	movs	r3, #0
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004572:	2300      	movs	r3, #0
 8004574:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004576:	230b      	movs	r3, #11
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800457a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800457e:	4619      	mov	r1, r3
 8004580:	4808      	ldr	r0, [pc, #32]	; (80045a4 <HAL_ETH_MspInit+0x198>)
 8004582:	f001 fee7 	bl	8006354 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8004586:	bf00      	nop
 8004588:	3738      	adds	r7, #56	; 0x38
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40028000 	.word	0x40028000
 8004594:	58024400 	.word	0x58024400
 8004598:	58020800 	.word	0x58020800
 800459c:	58020000 	.word	0x58020000
 80045a0:	58020400 	.word	0x58020400
 80045a4:	58021800 	.word	0x58021800

080045a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	; 0x28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045b0:	f107 0314 	add.w	r3, r7, #20
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	609a      	str	r2, [r3, #8]
 80045bc:	60da      	str	r2, [r3, #12]
 80045be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a48      	ldr	r2, [pc, #288]	; (80046e8 <HAL_UART_MspInit+0x140>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	f040 8089 	bne.w	80046de <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80045cc:	4b47      	ldr	r3, [pc, #284]	; (80046ec <HAL_UART_MspInit+0x144>)
 80045ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045d2:	4a46      	ldr	r2, [pc, #280]	; (80046ec <HAL_UART_MspInit+0x144>)
 80045d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80045dc:	4b43      	ldr	r3, [pc, #268]	; (80046ec <HAL_UART_MspInit+0x144>)
 80045de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80045e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045ea:	4b40      	ldr	r3, [pc, #256]	; (80046ec <HAL_UART_MspInit+0x144>)
 80045ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80045f0:	4a3e      	ldr	r2, [pc, #248]	; (80046ec <HAL_UART_MspInit+0x144>)
 80045f2:	f043 0308 	orr.w	r3, r3, #8
 80045f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80045fa:	4b3c      	ldr	r3, [pc, #240]	; (80046ec <HAL_UART_MspInit+0x144>)
 80045fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8004608:	f44f 7340 	mov.w	r3, #768	; 0x300
 800460c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800460e:	2302      	movs	r3, #2
 8004610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004612:	2300      	movs	r3, #0
 8004614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004616:	2300      	movs	r3, #0
 8004618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800461a:	2307      	movs	r3, #7
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800461e:	f107 0314 	add.w	r3, r7, #20
 8004622:	4619      	mov	r1, r3
 8004624:	4832      	ldr	r0, [pc, #200]	; (80046f0 <HAL_UART_MspInit+0x148>)
 8004626:	f001 fe95 	bl	8006354 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800462a:	4b32      	ldr	r3, [pc, #200]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 800462c:	4a32      	ldr	r2, [pc, #200]	; (80046f8 <HAL_UART_MspInit+0x150>)
 800462e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004630:	4b30      	ldr	r3, [pc, #192]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 8004632:	222d      	movs	r2, #45	; 0x2d
 8004634:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004636:	4b2f      	ldr	r3, [pc, #188]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 8004638:	2200      	movs	r2, #0
 800463a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800463c:	4b2d      	ldr	r3, [pc, #180]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 800463e:	2200      	movs	r2, #0
 8004640:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004642:	4b2c      	ldr	r3, [pc, #176]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 8004644:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004648:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800464a:	4b2a      	ldr	r3, [pc, #168]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 800464c:	2200      	movs	r2, #0
 800464e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004650:	4b28      	ldr	r3, [pc, #160]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 8004652:	2200      	movs	r2, #0
 8004654:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004656:	4b27      	ldr	r3, [pc, #156]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 8004658:	2200      	movs	r2, #0
 800465a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800465c:	4b25      	ldr	r3, [pc, #148]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 800465e:	2200      	movs	r2, #0
 8004660:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004662:	4b24      	ldr	r3, [pc, #144]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 8004664:	2200      	movs	r2, #0
 8004666:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004668:	4822      	ldr	r0, [pc, #136]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 800466a:	f000 fcc5 	bl	8004ff8 <HAL_DMA_Init>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8004674:	f7ff feaa 	bl	80043cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a1e      	ldr	r2, [pc, #120]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 800467c:	679a      	str	r2, [r3, #120]	; 0x78
 800467e:	4a1d      	ldr	r2, [pc, #116]	; (80046f4 <HAL_UART_MspInit+0x14c>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8004684:	4b1d      	ldr	r3, [pc, #116]	; (80046fc <HAL_UART_MspInit+0x154>)
 8004686:	4a1e      	ldr	r2, [pc, #120]	; (8004700 <HAL_UART_MspInit+0x158>)
 8004688:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800468a:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <HAL_UART_MspInit+0x154>)
 800468c:	222e      	movs	r2, #46	; 0x2e
 800468e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004690:	4b1a      	ldr	r3, [pc, #104]	; (80046fc <HAL_UART_MspInit+0x154>)
 8004692:	2240      	movs	r2, #64	; 0x40
 8004694:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004696:	4b19      	ldr	r3, [pc, #100]	; (80046fc <HAL_UART_MspInit+0x154>)
 8004698:	2200      	movs	r2, #0
 800469a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800469c:	4b17      	ldr	r3, [pc, #92]	; (80046fc <HAL_UART_MspInit+0x154>)
 800469e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80046a4:	4b15      	ldr	r3, [pc, #84]	; (80046fc <HAL_UART_MspInit+0x154>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80046aa:	4b14      	ldr	r3, [pc, #80]	; (80046fc <HAL_UART_MspInit+0x154>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80046b0:	4b12      	ldr	r3, [pc, #72]	; (80046fc <HAL_UART_MspInit+0x154>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <HAL_UART_MspInit+0x154>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046bc:	4b0f      	ldr	r3, [pc, #60]	; (80046fc <HAL_UART_MspInit+0x154>)
 80046be:	2200      	movs	r2, #0
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80046c2:	480e      	ldr	r0, [pc, #56]	; (80046fc <HAL_UART_MspInit+0x154>)
 80046c4:	f000 fc98 	bl	8004ff8 <HAL_DMA_Init>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80046ce:	f7ff fe7d 	bl	80043cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a09      	ldr	r2, [pc, #36]	; (80046fc <HAL_UART_MspInit+0x154>)
 80046d6:	675a      	str	r2, [r3, #116]	; 0x74
 80046d8:	4a08      	ldr	r2, [pc, #32]	; (80046fc <HAL_UART_MspInit+0x154>)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80046de:	bf00      	nop
 80046e0:	3728      	adds	r7, #40	; 0x28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40004800 	.word	0x40004800
 80046ec:	58024400 	.word	0x58024400
 80046f0:	58020c00 	.word	0x58020c00
 80046f4:	20001950 	.word	0x20001950
 80046f8:	40020010 	.word	0x40020010
 80046fc:	20001e5c 	.word	0x20001e5c
 8004700:	40020028 	.word	0x40020028

08004704 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a21      	ldr	r2, [pc, #132]	; (80047a8 <HAL_PCD_MspInit+0xa4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d13b      	bne.n	800479e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004726:	4b21      	ldr	r3, [pc, #132]	; (80047ac <HAL_PCD_MspInit+0xa8>)
 8004728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800472c:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <HAL_PCD_MspInit+0xa8>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004736:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <HAL_PCD_MspInit+0xa8>)
 8004738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8004744:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8004748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800474a:	2302      	movs	r3, #2
 800474c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004752:	2300      	movs	r3, #0
 8004754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8004756:	230a      	movs	r3, #10
 8004758:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800475a:	f107 0314 	add.w	r3, r7, #20
 800475e:	4619      	mov	r1, r3
 8004760:	4813      	ldr	r0, [pc, #76]	; (80047b0 <HAL_PCD_MspInit+0xac>)
 8004762:	f001 fdf7 	bl	8006354 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004766:	f44f 7300 	mov.w	r3, #512	; 0x200
 800476a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004770:	2300      	movs	r3, #0
 8004772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004774:	f107 0314 	add.w	r3, r7, #20
 8004778:	4619      	mov	r1, r3
 800477a:	480d      	ldr	r0, [pc, #52]	; (80047b0 <HAL_PCD_MspInit+0xac>)
 800477c:	f001 fdea 	bl	8006354 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <HAL_PCD_MspInit+0xa8>)
 8004782:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004786:	4a09      	ldr	r2, [pc, #36]	; (80047ac <HAL_PCD_MspInit+0xa8>)
 8004788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800478c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_PCD_MspInit+0xa8>)
 8004792:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004796:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800479e:	bf00      	nop
 80047a0:	3728      	adds	r7, #40	; 0x28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40080000 	.word	0x40080000
 80047ac:	58024400 	.word	0x58024400
 80047b0:	58020000 	.word	0x58020000

080047b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08e      	sub	sp, #56	; 0x38
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	d842      	bhi.n	8004848 <HAL_InitTick+0x94>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 80047c2:	2200      	movs	r2, #0
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	2019      	movs	r0, #25
 80047c8:	f000 fb5e 	bl	8004e88 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80047cc:	2019      	movs	r0, #25
 80047ce:	f000 fb75 	bl	8004ebc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80047d2:	4a23      	ldr	r2, [pc, #140]	; (8004860 <HAL_InitTick+0xac>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80047d8:	4b22      	ldr	r3, [pc, #136]	; (8004864 <HAL_InitTick+0xb0>)
 80047da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047de:	4a21      	ldr	r2, [pc, #132]	; (8004864 <HAL_InitTick+0xb0>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047e8:	4b1e      	ldr	r3, [pc, #120]	; (8004864 <HAL_InitTick+0xb0>)
 80047ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80047f6:	f107 020c 	add.w	r2, r7, #12
 80047fa:	f107 0310 	add.w	r3, r7, #16
 80047fe:	4611      	mov	r1, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f003 f907 	bl	8007a14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004806:	f003 f8ef 	bl	80079e8 <HAL_RCC_GetPCLK2Freq>
 800480a:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800480c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480e:	4a16      	ldr	r2, [pc, #88]	; (8004868 <HAL_InitTick+0xb4>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	0c9b      	lsrs	r3, r3, #18
 8004816:	3b01      	subs	r3, #1
 8004818:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <HAL_InitTick+0xb8>)
 800481c:	4a14      	ldr	r2, [pc, #80]	; (8004870 <HAL_InitTick+0xbc>)
 800481e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004820:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_InitTick+0xb8>)
 8004822:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004826:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004828:	4a10      	ldr	r2, [pc, #64]	; (800486c <HAL_InitTick+0xb8>)
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <HAL_InitTick+0xb8>)
 8004830:	2200      	movs	r2, #0
 8004832:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004834:	4b0d      	ldr	r3, [pc, #52]	; (800486c <HAL_InitTick+0xb8>)
 8004836:	2200      	movs	r2, #0
 8004838:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800483a:	480c      	ldr	r0, [pc, #48]	; (800486c <HAL_InitTick+0xb8>)
 800483c:	f004 fc7e 	bl	800913c <HAL_TIM_Base_Init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d107      	bne.n	8004856 <HAL_InitTick+0xa2>
 8004846:	e001      	b.n	800484c <HAL_InitTick+0x98>
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e005      	b.n	8004858 <HAL_InitTick+0xa4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800484c:	4807      	ldr	r0, [pc, #28]	; (800486c <HAL_InitTick+0xb8>)
 800484e:	f004 fcd7 	bl	8009200 <HAL_TIM_Base_Start_IT>
 8004852:	4603      	mov	r3, r0
 8004854:	e000      	b.n	8004858 <HAL_InitTick+0xa4>
  }

  /* Return function status */
  return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
}
 8004858:	4618      	mov	r0, r3
 800485a:	3738      	adds	r7, #56	; 0x38
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20001800 	.word	0x20001800
 8004864:	58024400 	.word	0x58024400
 8004868:	431bde83 	.word	0x431bde83
 800486c:	20001f78 	.word	0x20001f78
 8004870:	40010000 	.word	0x40010000

08004874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004878:	e7fe      	b.n	8004878 <NMI_Handler+0x4>

0800487a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800487e:	e7fe      	b.n	800487e <HardFault_Handler+0x4>

08004880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004884:	e7fe      	b.n	8004884 <MemManage_Handler+0x4>

08004886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004886:	b480      	push	{r7}
 8004888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800488a:	e7fe      	b.n	800488a <BusFault_Handler+0x4>

0800488c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004890:	e7fe      	b.n	8004890 <UsageFault_Handler+0x4>

08004892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004892:	b480      	push	{r7}
 8004894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004896:	bf00      	nop
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80048a4:	4802      	ldr	r0, [pc, #8]	; (80048b0 <TIM1_UP_IRQHandler+0x10>)
 80048a6:	f004 fce1 	bl	800926c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20001f78 	.word	0x20001f78

080048b4 <osBoot_boot>:
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08c      	sub	sp, #48	; 0x30
 80048b8:	af00      	add	r7, sp, #0
	coreId = CILcore_getCoreId();
 80048ba:	f7fd fd5e 	bl	800237a <CILcore_getCoreId>
 80048be:	62b8      	str	r0, [r7, #40]	; 0x28
	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 80048c0:	4a29      	ldr	r2, [pc, #164]	; (8004968 <osBoot_boot+0xb4>)
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 80048ca:	4a27      	ldr	r2, [pc, #156]	; (8004968 <osBoot_boot+0xb4>)
 80048cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	4413      	add	r3, r2
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	623b      	str	r3, [r7, #32]
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048da:	e03c      	b.n	8004956 <osBoot_boot+0xa2>
		osBoot_bootSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 80048dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048de:	4613      	mov	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	461a      	mov	r2, r3
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	4413      	add	r3, r2
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f0:	4613      	mov	r3, r2
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4413      	add	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	461a      	mov	r2, r3
 80048fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fc:	4413      	add	r3, r2
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004902:	4613      	mov	r3, r2
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	461a      	mov	r2, r3
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	4413      	add	r3, r2
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	61f8      	str	r0, [r7, #28]
 8004914:	61b9      	str	r1, [r7, #24]
 8004916:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8004928:	2300      	movs	r3, #0
 800492a:	607b      	str	r3, [r7, #4]
 800492c:	e00a      	b.n	8004944 <osBoot_boot+0x90>
		*pDst++=*pSrc++;
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	1c53      	adds	r3, r2, #1
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1c59      	adds	r1, r3, #1
 8004938:	60f9      	str	r1, [r7, #12]
 800493a:	7812      	ldrb	r2, [r2, #0]
 800493c:	701a      	strb	r2, [r3, #0]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3301      	adds	r3, #1
 8004942:	607b      	str	r3, [r7, #4]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d3ef      	bcc.n	800492e <osBoot_boot+0x7a>
}
 800494e:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8004950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004952:	3301      	adds	r3, #1
 8004954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	429a      	cmp	r2, r3
 800495c:	d3be      	bcc.n	80048dc <osBoot_boot+0x28>
};
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	3730      	adds	r7, #48	; 0x30
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	0800af50 	.word	0x0800af50

0800496c <malloc_varAlloc>:
  *
  * @return CosmOS_MallocVariableType *
********************************************************************************/
static CosmOS_MallocVariableType * malloc_varAlloc( AddressType nextAvailableAddress, AddressType priorMallocAddress,\
													AddressType nextMallocAddress, BitWidthType size )
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	603b      	str	r3, [r7, #0]
	CosmOS_MallocVariableType * newMallocVar = (CosmOS_MallocVariableType *)nextAvailableAddress;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	617b      	str	r3, [r7, #20]

	newMallocVar->prior = (CosmOS_MallocVariableType *)priorMallocAddress;
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	601a      	str	r2, [r3, #0]
	newMallocVar->next = (CosmOS_MallocVariableType *)nextMallocAddress;
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	605a      	str	r2, [r3, #4]
	newMallocVar->size = (ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType)) + \
							(AddressType)ALIGN(size,sizeof(AddressType)));
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	3303      	adds	r3, #3
 800498e:	f023 0303 	bic.w	r3, r3, #3
	newMallocVar->size = (ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType)) + \
 8004992:	f103 020c 	add.w	r2, r3, #12
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	609a      	str	r2, [r3, #8]

	return newMallocVar;
 800499a:	697b      	ldr	r3, [r7, #20]
}
 800499c:	4618      	mov	r0, r3
 800499e:	371c      	adds	r7, #28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <malloc>:
  * @param[in]  size_t size
  *
  * @return void *
********************************************************************************/
void *malloc(size_t size)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b094      	sub	sp, #80	; 0x50
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
	CosmOS_ProgramVariableType *programVar;
	CosmOS_MallocVariableType *currentMallocVar,
								*newMallocVar;


	coreVar = core_getCoreVar();
 80049b0:	f7fc fca6 	bl	8001300 <core_getCoreVar>
 80049b4:	6438      	str	r0, [r7, #64]	; 0x40
 80049b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b8:	60fb      	str	r3, [r7, #12]
    return (core->programInExecution);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	689b      	ldr	r3, [r3, #8]

	programVar = core_getCoreProgramInExecution(coreVar);
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c2:	613b      	str	r3, [r7, #16]
    return (program->cfg->programHeapLowAddress);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	69db      	ldr	r3, [r3, #28]

	heapLowAddress = program_getProgramHeapLowAddress(programVar);
 80049ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80049cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ce:	617b      	str	r3, [r7, #20]
    return (program->cfg->programHeapHighAddress);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
	heapHighAddress = program_getProgramHeapHighAddress(programVar);
 80049d6:	637b      	str	r3, [r7, #52]	; 0x34
 80049d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049da:	61bb      	str	r3, [r7, #24]
    return (program->cfg->programHeapGetSpinlockRouteId);
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	getSpinlockRouteId = program_getProgramHeapGetSpinlockRouteId(programVar);
 80049e2:	633b      	str	r3, [r7, #48]	; 0x30
 80049e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e6:	61fb      	str	r3, [r7, #28]
    return (program->cfg->programHeapReleaseSpinlockRouteId);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	releaseSpinlockRouteId = program_getProgramHeapReleaseSpinlockRouteId(programVar);
 80049ee:	62fb      	str	r3, [r7, #44]	; 0x2c

	allocated = False;
 80049f0:	2300      	movs	r3, #0
 80049f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	lastItem = False;
 80049f6:	2300      	movs	r3, #0
 80049f8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	currentMallocVar = (CosmOS_MallocVariableType *)heapLowAddress;
 80049fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fe:	647b      	str	r3, [r7, #68]	; 0x44
	returnAddress = (AddressType)NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c

	spinlockState = (CosmOS_SpinlockStateType)sysCalls_bitWidthType_ret_bitWidthType(getSpinlockRouteId);
 8004a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a06:	f7fd fc07 	bl	8002218 <sysCalls_bitWidthType_ret_bitWidthType>
 8004a0a:	62b8      	str	r0, [r7, #40]	; 0x28

	while (IS_NOT(lastItem) __OR IS_NOT(allocated))
 8004a0c:	e049      	b.n	8004aa2 <malloc+0xfa>
	{
		if (currentMallocVar->next IS_NOT_EQUAL_TO NULL)
 8004a0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d027      	beq.n	8004a66 <malloc+0xbe>
		{
			nextAvailableAddress = (AddressType)currentMallocVar + (AddressType)currentMallocVar->size;
 8004a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1c:	4413      	add	r3, r2
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
			if (size < ((AddressType)currentMallocVar->next - nextAvailableAddress))
 8004a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d216      	bcs.n	8004a5e <malloc+0xb6>
			{
				newMallocVar = malloc_varAlloc(nextAvailableAddress,
 8004a30:	6c79      	ldr	r1, [r7, #68]	; 0x44
												(AddressType)currentMallocVar,
												(AddressType)currentMallocVar->next,
 8004a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a34:	685b      	ldr	r3, [r3, #4]
				newMallocVar = malloc_varAlloc(nextAvailableAddress,
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a3c:	f7ff ff96 	bl	800496c <malloc_varAlloc>
 8004a40:	6238      	str	r0, [r7, #32]
												size);

				((CosmOS_MallocVariableType *)currentMallocVar->next)->prior = newMallocVar;
 8004a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	6a3a      	ldr	r2, [r7, #32]
 8004a48:	601a      	str	r2, [r3, #0]
				currentMallocVar->next = newMallocVar;
 8004a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4c:	6a3a      	ldr	r2, [r7, #32]
 8004a4e:	605a      	str	r2, [r3, #4]

				returnAddress = (AddressType)newMallocVar +
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	330c      	adds	r3, #12
 8004a54:	64fb      	str	r3, [r7, #76]	; 0x4c
								(AddressType)ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType));
				allocated = True;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004a5c:	e021      	b.n	8004aa2 <malloc+0xfa>
			}
			else
			{
				currentMallocVar = currentMallocVar->next;
 8004a5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	647b      	str	r3, [r7, #68]	; 0x44
 8004a64:	e01d      	b.n	8004aa2 <malloc+0xfa>
			}
		}
		else
		{
			nextAvailableAddress = (AddressType)currentMallocVar + (AddressType)currentMallocVar->size;
 8004a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a6c:	4413      	add	r3, r2
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
			if (size < (heapHighAddress - nextAvailableAddress))
 8004a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d20f      	bcs.n	8004a9c <malloc+0xf4>
			{
				newMallocVar = malloc_varAlloc(nextAvailableAddress,
 8004a7c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a84:	f7ff ff72 	bl	800496c <malloc_varAlloc>
 8004a88:	6238      	str	r0, [r7, #32]
												(AddressType)currentMallocVar,
												(AddressType)NULL,
												size);

				currentMallocVar->next = newMallocVar;
 8004a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8c:	6a3a      	ldr	r2, [r7, #32]
 8004a8e:	605a      	str	r2, [r3, #4]

				returnAddress = (AddressType)newMallocVar +
 8004a90:	6a3b      	ldr	r3, [r7, #32]
 8004a92:	330c      	adds	r3, #12
 8004a94:	64fb      	str	r3, [r7, #76]	; 0x4c
								(AddressType)ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType));
				allocated = True;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			}
			lastItem = True;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	while (IS_NOT(lastItem) __OR IS_NOT(allocated))
 8004aa2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0b1      	beq.n	8004a0e <malloc+0x66>
 8004aaa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0ad      	beq.n	8004a0e <malloc+0x66>
		}
	}

	spinlockState = (CosmOS_SpinlockStateType)sysCalls_bitWidthType_ret_bitWidthType(releaseSpinlockRouteId);
 8004ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ab4:	f7fd fbb0 	bl	8002218 <sysCalls_bitWidthType_ret_bitWidthType>
 8004ab8:	62b8      	str	r0, [r7, #40]	; 0x28

	__SUPRESS_UNUSED_VAR(spinlockState);

	return (void *)returnAddress;
 8004aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3750      	adds	r7, #80	; 0x50
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <free>:
  * @param[in]  void * ptr
  *
  * @return none
********************************************************************************/
void free(void *ptr)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08c      	sub	sp, #48	; 0x30
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

	CosmOS_CoreVariableType *coreVar;
	CosmOS_ProgramVariableType *programVar;

	CosmOS_MallocVariableType *mallocVarToFree =
	(CosmOS_MallocVariableType *)((AddressType)ptr - ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType)));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3b0c      	subs	r3, #12
	CosmOS_MallocVariableType *mallocVarToFree =
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c


	coreVar = core_getCoreVar();
 8004ad2:	f7fc fc15 	bl	8001300 <core_getCoreVar>
 8004ad6:	62b8      	str	r0, [r7, #40]	; 0x28
 8004ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	689b      	ldr	r3, [r3, #8]

	programVar = core_getCoreProgramInExecution(coreVar);
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	613b      	str	r3, [r7, #16]
    return (program->cfg->programHeapGetSpinlockRouteId);
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	getSpinlockRouteId = program_getProgramHeapGetSpinlockRouteId(programVar);
 8004aec:	623b      	str	r3, [r7, #32]
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	617b      	str	r3, [r7, #20]
    return (program->cfg->programHeapReleaseSpinlockRouteId);
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	releaseSpinlockRouteId = program_getProgramHeapReleaseSpinlockRouteId(programVar);
 8004af8:	61fb      	str	r3, [r7, #28]

	spinlockState = (CosmOS_SpinlockStateType)sysCalls_bitWidthType_ret_bitWidthType(getSpinlockRouteId);
 8004afa:	6a38      	ldr	r0, [r7, #32]
 8004afc:	f7fd fb8c 	bl	8002218 <sysCalls_bitWidthType_ret_bitWidthType>
 8004b00:	61b8      	str	r0, [r7, #24]

	if (mallocVarToFree->prior)
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d004      	beq.n	8004b14 <free+0x50>
	{
		((CosmOS_MallocVariableType *)mallocVarToFree->prior)->next =
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	681b      	ldr	r3, [r3, #0]
			mallocVarToFree->next ? mallocVarToFree->next : NULL;
 8004b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b10:	6852      	ldr	r2, [r2, #4]
		((CosmOS_MallocVariableType *)mallocVarToFree->prior)->next =
 8004b12:	605a      	str	r2, [r3, #4]
	}

	if (mallocVarToFree->next)
 8004b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d004      	beq.n	8004b26 <free+0x62>
	{
		((CosmOS_MallocVariableType *)mallocVarToFree->next)->prior =
 8004b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1e:	685b      	ldr	r3, [r3, #4]
			mallocVarToFree->prior ? mallocVarToFree->prior : NULL;
 8004b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b22:	6812      	ldr	r2, [r2, #0]
		((CosmOS_MallocVariableType *)mallocVarToFree->next)->prior =
 8004b24:	601a      	str	r2, [r3, #0]
	}

	spinlockState = (CosmOS_SpinlockStateType)sysCalls_bitWidthType_ret_bitWidthType(releaseSpinlockRouteId);
 8004b26:	69f8      	ldr	r0, [r7, #28]
 8004b28:	f7fd fb76 	bl	8002218 <sysCalls_bitWidthType_ret_bitWidthType>
 8004b2c:	61b8      	str	r0, [r7, #24]

	__SUPRESS_UNUSED_VAR(spinlockState);
}
 8004b2e:	bf00      	nop
 8004b30:	3730      	adds	r7, #48	; 0x30
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <interrupt_enableInterrupts>:
  * @param[in] BitWidthType entityId
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_enableInterrupts(BitWidthType entityId)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b3e:	b662      	cpsie	i
}
 8004b40:	bf00      	nop
 8004b42:	bf00      	nop
	CILinterrupt_enableInterrupts();

	__SUPRESS_UNUSED_VAR(entityId);
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <interrupt_disableInterrupts>:
  * @param[in]  BitWidthType entityId
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_disableInterrupts(BitWidthType entityId)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b58:	b672      	cpsid	i
}
 8004b5a:	bf00      	nop
}
 8004b5c:	bf00      	nop
	CILinterrupt_disableInterrupts();

	__SUPRESS_UNUSED_VAR(entityId);
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <PendSV_Handler>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/
__NAKED void PendSV_Handler(void)
{
    __asm volatile ("MRS R0,PSP");
 8004b6a:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("ISB");
 8004b6e:	f3bf 8f6f 	isb	sy

    __asm volatile ("TST R14, #16");
 8004b72:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 8004b76:	bf08      	it	eq
    __asm volatile ("VSTMDBEQ R0!,{S16-S31}"); /* If fp is true save floating point registers on stack */
 8004b78:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    __asm volatile ("STMDB R0!,{R4-R8,R10,R11,R14}");
 8004b7c:	e920 4df0 	stmdb	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}

    __asm volatile ("BL scheduler_scheduleNextInstance");
 8004b80:	f7fc ff18 	bl	80019b4 <scheduler_scheduleNextInstance>
    __asm volatile ("ISB");
 8004b84:	f3bf 8f6f 	isb	sy

    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8004b88:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
    __asm volatile ("TST R14, #16");
 8004b8c:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 8004b90:	bf08      	it	eq
    __asm volatile ("VLDMIAEQ R0!,{S16-S31}"); /* If fp is true restore floating point registers on stack */
 8004b92:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    __asm volatile ("MSR PSP,R0");
 8004b96:	f380 8809 	msr	PSP, r0
    __asm volatile ("ISB");
 8004b9a:	f3bf 8f6f 	isb	sy

    __asm volatile ("BX R14");
 8004b9e:	4770      	bx	lr
}
 8004ba0:	bf00      	nop
	...

08004ba4 <SysTick_Handler>:

void SysTick_Handler(){
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <SysTick_Handler+0x1c>)
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <SysTick_Handler+0x1c>)
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	6053      	str	r3, [r2, #4]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e000ed00 	.word	0xe000ed00

08004bc4 <SVC_Handler>:

__NAKED void SVC_Handler( void )
{
    __asm volatile ("TST LR, #4");
 8004bc4:	f01e 0f04 	tst.w	lr, #4
    __asm volatile ("ITE EQ");
 8004bc8:	bf0c      	ite	eq
    __asm volatile ("MRSEQ r0, MSP");
 8004bca:	f3ef 8008 	mrseq	r0, MSP
    __asm volatile ("MRSNE r0, PSP");
 8004bce:	f3ef 8009 	mrsne	r0, PSP
    __asm volatile ( "B CILsysCalls_dispatcher");
 8004bd2:	f7fd bee1 	b.w	8002998 <CILsysCalls_dispatcher>
}
 8004bd6:	bf00      	nop

08004bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bde:	2003      	movs	r0, #3
 8004be0:	f000 f947 	bl	8004e72 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004be4:	f002 fd40 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8004be8:	4602      	mov	r2, r0
 8004bea:	4b15      	ldr	r3, [pc, #84]	; (8004c40 <HAL_Init+0x68>)
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	4913      	ldr	r1, [pc, #76]	; (8004c44 <HAL_Init+0x6c>)
 8004bf6:	5ccb      	ldrb	r3, [r1, r3]
 8004bf8:	f003 031f 	and.w	r3, r3, #31
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004c00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c02:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <HAL_Init+0x68>)
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	4a0e      	ldr	r2, [pc, #56]	; (8004c44 <HAL_Init+0x6c>)
 8004c0c:	5cd3      	ldrb	r3, [r2, r3]
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	fa22 f303 	lsr.w	r3, r2, r3
 8004c18:	4a0b      	ldr	r2, [pc, #44]	; (8004c48 <HAL_Init+0x70>)
 8004c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c1c:	4a0b      	ldr	r2, [pc, #44]	; (8004c4c <HAL_Init+0x74>)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c22:	2000      	movs	r0, #0
 8004c24:	f7ff fdc6 	bl	80047b4 <HAL_InitTick>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e002      	b.n	8004c38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004c32:	f7ff fbd1 	bl	80043d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	58024400 	.word	0x58024400
 8004c44:	0800af80 	.word	0x0800af80
 8004c48:	2000180c 	.word	0x2000180c
 8004c4c:	20001808 	.word	0x20001808

08004c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <HAL_IncTick+0x20>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_IncTick+0x24>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4413      	add	r3, r2
 8004c60:	4a04      	ldr	r2, [pc, #16]	; (8004c74 <HAL_IncTick+0x24>)
 8004c62:	6013      	str	r3, [r2, #0]
}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20001804 	.word	0x20001804
 8004c74:	20001fc4 	.word	0x20001fc4

08004c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <HAL_GetTick+0x14>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20001fc4 	.word	0x20001fc4

08004c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c98:	f7ff ffee 	bl	8004c78 <HAL_GetTick>
 8004c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d005      	beq.n	8004cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004caa:	4b0a      	ldr	r3, [pc, #40]	; (8004cd4 <HAL_Delay+0x44>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004cb6:	bf00      	nop
 8004cb8:	f7ff ffde 	bl	8004c78 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d8f7      	bhi.n	8004cb8 <HAL_Delay+0x28>
  {
  }
}
 8004cc8:	bf00      	nop
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20001804 	.word	0x20001804

08004cd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004cdc:	4b03      	ldr	r3, [pc, #12]	; (8004cec <HAL_GetREVID+0x14>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	0c1b      	lsrs	r3, r3, #16
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	5c001000 	.word	0x5c001000

08004cf0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004cf8:	4b06      	ldr	r3, [pc, #24]	; (8004d14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004d00:	4904      	ldr	r1, [pc, #16]	; (8004d14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	604b      	str	r3, [r1, #4]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	58000400 	.word	0x58000400

08004d18 <__NVIC_SetPriorityGrouping>:
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d28:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <__NVIC_SetPriorityGrouping+0x40>)
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d34:	4013      	ands	r3, r2
 8004d36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d40:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <__NVIC_SetPriorityGrouping+0x44>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d46:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <__NVIC_SetPriorityGrouping+0x40>)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	60d3      	str	r3, [r2, #12]
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	e000ed00 	.word	0xe000ed00
 8004d5c:	05fa0000 	.word	0x05fa0000

08004d60 <__NVIC_GetPriorityGrouping>:
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <__NVIC_GetPriorityGrouping+0x18>)
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	0a1b      	lsrs	r3, r3, #8
 8004d6a:	f003 0307 	and.w	r3, r3, #7
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000ed00 	.word	0xe000ed00

08004d7c <__NVIC_EnableIRQ>:
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	db0b      	blt.n	8004da6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d8e:	88fb      	ldrh	r3, [r7, #6]
 8004d90:	f003 021f 	and.w	r2, r3, #31
 8004d94:	4907      	ldr	r1, [pc, #28]	; (8004db4 <__NVIC_EnableIRQ+0x38>)
 8004d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	e000e100 	.word	0xe000e100

08004db8 <__NVIC_SetPriority>:
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	6039      	str	r1, [r7, #0]
 8004dc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	db0a      	blt.n	8004de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	490c      	ldr	r1, [pc, #48]	; (8004e04 <__NVIC_SetPriority+0x4c>)
 8004dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dd6:	0112      	lsls	r2, r2, #4
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	440b      	add	r3, r1
 8004ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004de0:	e00a      	b.n	8004df8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4908      	ldr	r1, [pc, #32]	; (8004e08 <__NVIC_SetPriority+0x50>)
 8004de8:	88fb      	ldrh	r3, [r7, #6]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	3b04      	subs	r3, #4
 8004df0:	0112      	lsls	r2, r2, #4
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	440b      	add	r3, r1
 8004df6:	761a      	strb	r2, [r3, #24]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	e000e100 	.word	0xe000e100
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b089      	sub	sp, #36	; 0x24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	f1c3 0307 	rsb	r3, r3, #7
 8004e26:	2b04      	cmp	r3, #4
 8004e28:	bf28      	it	cs
 8004e2a:	2304      	movcs	r3, #4
 8004e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3304      	adds	r3, #4
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d902      	bls.n	8004e3c <NVIC_EncodePriority+0x30>
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	3b03      	subs	r3, #3
 8004e3a:	e000      	b.n	8004e3e <NVIC_EncodePriority+0x32>
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	401a      	ands	r2, r3
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e54:	f04f 31ff 	mov.w	r1, #4294967295
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5e:	43d9      	mvns	r1, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e64:	4313      	orrs	r3, r2
         );
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3724      	adds	r7, #36	; 0x24
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff ff4c 	bl	8004d18 <__NVIC_SetPriorityGrouping>
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e96:	f7ff ff63 	bl	8004d60 <__NVIC_GetPriorityGrouping>
 8004e9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	6978      	ldr	r0, [r7, #20]
 8004ea2:	f7ff ffb3 	bl	8004e0c <NVIC_EncodePriority>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004eac:	4611      	mov	r1, r2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ff82 	bl	8004db8 <__NVIC_SetPriority>
}
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ec6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff ff56 	bl	8004d7c <__NVIC_EnableIRQ>
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004edc:	f3bf 8f5f 	dmb	sy
}
 8004ee0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004ee2:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <HAL_MPU_Disable+0x28>)
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	4a06      	ldr	r2, [pc, #24]	; (8004f00 <HAL_MPU_Disable+0x28>)
 8004ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eec:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8004eee:	4b05      	ldr	r3, [pc, #20]	; (8004f04 <HAL_MPU_Disable+0x2c>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	605a      	str	r2, [r3, #4]
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	e000ed00 	.word	0xe000ed00
 8004f04:	e000ed90 	.word	0xe000ed90

08004f08 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004f10:	4a0b      	ldr	r2, [pc, #44]	; (8004f40 <HAL_MPU_Enable+0x38>)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <HAL_MPU_Enable+0x3c>)
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <HAL_MPU_Enable+0x3c>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f24:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004f26:	f3bf 8f4f 	dsb	sy
}
 8004f2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f2c:	f3bf 8f6f 	isb	sy
}
 8004f30:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	e000ed90 	.word	0xe000ed90
 8004f44:	e000ed00 	.word	0xe000ed00

08004f48 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	785a      	ldrb	r2, [r3, #1]
 8004f54:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_MPU_ConfigRegion+0x84>)
 8004f56:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d029      	beq.n	8004fb4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8004f60:	4a1a      	ldr	r2, [pc, #104]	; (8004fcc <HAL_MPU_ConfigRegion+0x84>)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7b1b      	ldrb	r3, [r3, #12]
 8004f6c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	7adb      	ldrb	r3, [r3, #11]
 8004f72:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004f74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	7a9b      	ldrb	r3, [r3, #10]
 8004f7a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004f7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	7b5b      	ldrb	r3, [r3, #13]
 8004f82:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004f84:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	7b9b      	ldrb	r3, [r3, #14]
 8004f8a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004f8c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	7bdb      	ldrb	r3, [r3, #15]
 8004f92:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004f94:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7a5b      	ldrb	r3, [r3, #9]
 8004f9a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004f9c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	7a1b      	ldrb	r3, [r3, #8]
 8004fa2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004fa4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fac:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004fae:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004fb0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8004fb2:	e005      	b.n	8004fc0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <HAL_MPU_ConfigRegion+0x84>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8004fba:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <HAL_MPU_ConfigRegion+0x84>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	611a      	str	r2, [r3, #16]
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	e000ed90 	.word	0xe000ed90

08004fd0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <HAL_GetCurrentCPUID+0x24>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	091b      	lsrs	r3, r3, #4
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	2b07      	cmp	r3, #7
 8004fe0:	d101      	bne.n	8004fe6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e000      	b.n	8004fe8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8004fe6:	2301      	movs	r3, #1
  }
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	e000ed00 	.word	0xe000ed00

08004ff8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005000:	f7ff fe3a 	bl	8004c78 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d101      	bne.n	8005010 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e316      	b.n	800563e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a66      	ldr	r2, [pc, #408]	; (80051b0 <HAL_DMA_Init+0x1b8>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d04a      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a65      	ldr	r2, [pc, #404]	; (80051b4 <HAL_DMA_Init+0x1bc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d045      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a63      	ldr	r2, [pc, #396]	; (80051b8 <HAL_DMA_Init+0x1c0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d040      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a62      	ldr	r2, [pc, #392]	; (80051bc <HAL_DMA_Init+0x1c4>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d03b      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a60      	ldr	r2, [pc, #384]	; (80051c0 <HAL_DMA_Init+0x1c8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d036      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a5f      	ldr	r2, [pc, #380]	; (80051c4 <HAL_DMA_Init+0x1cc>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d031      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a5d      	ldr	r2, [pc, #372]	; (80051c8 <HAL_DMA_Init+0x1d0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d02c      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a5c      	ldr	r2, [pc, #368]	; (80051cc <HAL_DMA_Init+0x1d4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d027      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a5a      	ldr	r2, [pc, #360]	; (80051d0 <HAL_DMA_Init+0x1d8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d022      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a59      	ldr	r2, [pc, #356]	; (80051d4 <HAL_DMA_Init+0x1dc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d01d      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a57      	ldr	r2, [pc, #348]	; (80051d8 <HAL_DMA_Init+0x1e0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d018      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a56      	ldr	r2, [pc, #344]	; (80051dc <HAL_DMA_Init+0x1e4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d013      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a54      	ldr	r2, [pc, #336]	; (80051e0 <HAL_DMA_Init+0x1e8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00e      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a53      	ldr	r2, [pc, #332]	; (80051e4 <HAL_DMA_Init+0x1ec>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d009      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a51      	ldr	r2, [pc, #324]	; (80051e8 <HAL_DMA_Init+0x1f0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_DMA_Init+0xb8>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a50      	ldr	r2, [pc, #320]	; (80051ec <HAL_DMA_Init+0x1f4>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d101      	bne.n	80050b4 <HAL_DMA_Init+0xbc>
 80050b0:	2301      	movs	r3, #1
 80050b2:	e000      	b.n	80050b6 <HAL_DMA_Init+0xbe>
 80050b4:	2300      	movs	r3, #0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 813b 	beq.w	8005332 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a37      	ldr	r2, [pc, #220]	; (80051b0 <HAL_DMA_Init+0x1b8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d04a      	beq.n	800516c <HAL_DMA_Init+0x174>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a36      	ldr	r2, [pc, #216]	; (80051b4 <HAL_DMA_Init+0x1bc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d045      	beq.n	800516c <HAL_DMA_Init+0x174>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a34      	ldr	r2, [pc, #208]	; (80051b8 <HAL_DMA_Init+0x1c0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d040      	beq.n	800516c <HAL_DMA_Init+0x174>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a33      	ldr	r2, [pc, #204]	; (80051bc <HAL_DMA_Init+0x1c4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d03b      	beq.n	800516c <HAL_DMA_Init+0x174>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a31      	ldr	r2, [pc, #196]	; (80051c0 <HAL_DMA_Init+0x1c8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d036      	beq.n	800516c <HAL_DMA_Init+0x174>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a30      	ldr	r2, [pc, #192]	; (80051c4 <HAL_DMA_Init+0x1cc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d031      	beq.n	800516c <HAL_DMA_Init+0x174>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a2e      	ldr	r2, [pc, #184]	; (80051c8 <HAL_DMA_Init+0x1d0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02c      	beq.n	800516c <HAL_DMA_Init+0x174>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a2d      	ldr	r2, [pc, #180]	; (80051cc <HAL_DMA_Init+0x1d4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d027      	beq.n	800516c <HAL_DMA_Init+0x174>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2b      	ldr	r2, [pc, #172]	; (80051d0 <HAL_DMA_Init+0x1d8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d022      	beq.n	800516c <HAL_DMA_Init+0x174>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a2a      	ldr	r2, [pc, #168]	; (80051d4 <HAL_DMA_Init+0x1dc>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d01d      	beq.n	800516c <HAL_DMA_Init+0x174>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a28      	ldr	r2, [pc, #160]	; (80051d8 <HAL_DMA_Init+0x1e0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d018      	beq.n	800516c <HAL_DMA_Init+0x174>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a27      	ldr	r2, [pc, #156]	; (80051dc <HAL_DMA_Init+0x1e4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <HAL_DMA_Init+0x174>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a25      	ldr	r2, [pc, #148]	; (80051e0 <HAL_DMA_Init+0x1e8>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <HAL_DMA_Init+0x174>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a24      	ldr	r2, [pc, #144]	; (80051e4 <HAL_DMA_Init+0x1ec>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_DMA_Init+0x174>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a22      	ldr	r2, [pc, #136]	; (80051e8 <HAL_DMA_Init+0x1f0>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_DMA_Init+0x174>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a21      	ldr	r2, [pc, #132]	; (80051ec <HAL_DMA_Init+0x1f4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d108      	bne.n	800517e <HAL_DMA_Init+0x186>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	e007      	b.n	800518e <HAL_DMA_Init+0x196>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 0201 	bic.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800518e:	e02f      	b.n	80051f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005190:	f7ff fd72 	bl	8004c78 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	2b05      	cmp	r3, #5
 800519c:	d928      	bls.n	80051f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2203      	movs	r2, #3
 80051a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e246      	b.n	800563e <HAL_DMA_Init+0x646>
 80051b0:	40020010 	.word	0x40020010
 80051b4:	40020028 	.word	0x40020028
 80051b8:	40020040 	.word	0x40020040
 80051bc:	40020058 	.word	0x40020058
 80051c0:	40020070 	.word	0x40020070
 80051c4:	40020088 	.word	0x40020088
 80051c8:	400200a0 	.word	0x400200a0
 80051cc:	400200b8 	.word	0x400200b8
 80051d0:	40020410 	.word	0x40020410
 80051d4:	40020428 	.word	0x40020428
 80051d8:	40020440 	.word	0x40020440
 80051dc:	40020458 	.word	0x40020458
 80051e0:	40020470 	.word	0x40020470
 80051e4:	40020488 	.word	0x40020488
 80051e8:	400204a0 	.word	0x400204a0
 80051ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1c8      	bne.n	8005190 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4b83      	ldr	r3, [pc, #524]	; (8005418 <HAL_DMA_Init+0x420>)
 800520a:	4013      	ands	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005216:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005222:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800522e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	4313      	orrs	r3, r2
 800523a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2b04      	cmp	r3, #4
 8005242:	d107      	bne.n	8005254 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	4313      	orrs	r3, r2
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005254:	4b71      	ldr	r3, [pc, #452]	; (800541c <HAL_DMA_Init+0x424>)
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	4b71      	ldr	r3, [pc, #452]	; (8005420 <HAL_DMA_Init+0x428>)
 800525a:	4013      	ands	r3, r2
 800525c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005260:	d328      	bcc.n	80052b4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2b28      	cmp	r3, #40	; 0x28
 8005268:	d903      	bls.n	8005272 <HAL_DMA_Init+0x27a>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	2b2e      	cmp	r3, #46	; 0x2e
 8005270:	d917      	bls.n	80052a2 <HAL_DMA_Init+0x2aa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2b3e      	cmp	r3, #62	; 0x3e
 8005278:	d903      	bls.n	8005282 <HAL_DMA_Init+0x28a>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b42      	cmp	r3, #66	; 0x42
 8005280:	d90f      	bls.n	80052a2 <HAL_DMA_Init+0x2aa>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b46      	cmp	r3, #70	; 0x46
 8005288:	d903      	bls.n	8005292 <HAL_DMA_Init+0x29a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2b48      	cmp	r3, #72	; 0x48
 8005290:	d907      	bls.n	80052a2 <HAL_DMA_Init+0x2aa>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b4e      	cmp	r3, #78	; 0x4e
 8005298:	d905      	bls.n	80052a6 <HAL_DMA_Init+0x2ae>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b52      	cmp	r3, #82	; 0x52
 80052a0:	d801      	bhi.n	80052a6 <HAL_DMA_Init+0x2ae>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e000      	b.n	80052a8 <HAL_DMA_Init+0x2b0>
 80052a6:	2300      	movs	r3, #0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052b2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d117      	bne.n	800530e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00e      	beq.n	800530e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fa8f 	bl	8005814 <DMA_CheckFifoParam>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d008      	beq.n	800530e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2240      	movs	r2, #64	; 0x40
 8005300:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e197      	b.n	800563e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f9ca 	bl	80056b0 <DMA_CalcBaseAndBitshift>
 800531c:	4603      	mov	r3, r0
 800531e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	223f      	movs	r2, #63	; 0x3f
 800532a:	409a      	lsls	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	609a      	str	r2, [r3, #8]
 8005330:	e0cd      	b.n	80054ce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a3b      	ldr	r2, [pc, #236]	; (8005424 <HAL_DMA_Init+0x42c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d022      	beq.n	8005382 <HAL_DMA_Init+0x38a>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a39      	ldr	r2, [pc, #228]	; (8005428 <HAL_DMA_Init+0x430>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01d      	beq.n	8005382 <HAL_DMA_Init+0x38a>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a38      	ldr	r2, [pc, #224]	; (800542c <HAL_DMA_Init+0x434>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d018      	beq.n	8005382 <HAL_DMA_Init+0x38a>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a36      	ldr	r2, [pc, #216]	; (8005430 <HAL_DMA_Init+0x438>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d013      	beq.n	8005382 <HAL_DMA_Init+0x38a>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a35      	ldr	r2, [pc, #212]	; (8005434 <HAL_DMA_Init+0x43c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00e      	beq.n	8005382 <HAL_DMA_Init+0x38a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a33      	ldr	r2, [pc, #204]	; (8005438 <HAL_DMA_Init+0x440>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d009      	beq.n	8005382 <HAL_DMA_Init+0x38a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a32      	ldr	r2, [pc, #200]	; (800543c <HAL_DMA_Init+0x444>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d004      	beq.n	8005382 <HAL_DMA_Init+0x38a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a30      	ldr	r2, [pc, #192]	; (8005440 <HAL_DMA_Init+0x448>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d101      	bne.n	8005386 <HAL_DMA_Init+0x38e>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <HAL_DMA_Init+0x390>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8097 	beq.w	80054bc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a24      	ldr	r2, [pc, #144]	; (8005424 <HAL_DMA_Init+0x42c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d021      	beq.n	80053dc <HAL_DMA_Init+0x3e4>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a22      	ldr	r2, [pc, #136]	; (8005428 <HAL_DMA_Init+0x430>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d01c      	beq.n	80053dc <HAL_DMA_Init+0x3e4>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a21      	ldr	r2, [pc, #132]	; (800542c <HAL_DMA_Init+0x434>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d017      	beq.n	80053dc <HAL_DMA_Init+0x3e4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1f      	ldr	r2, [pc, #124]	; (8005430 <HAL_DMA_Init+0x438>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d012      	beq.n	80053dc <HAL_DMA_Init+0x3e4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1e      	ldr	r2, [pc, #120]	; (8005434 <HAL_DMA_Init+0x43c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00d      	beq.n	80053dc <HAL_DMA_Init+0x3e4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1c      	ldr	r2, [pc, #112]	; (8005438 <HAL_DMA_Init+0x440>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d008      	beq.n	80053dc <HAL_DMA_Init+0x3e4>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1b      	ldr	r2, [pc, #108]	; (800543c <HAL_DMA_Init+0x444>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <HAL_DMA_Init+0x3e4>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a19      	ldr	r2, [pc, #100]	; (8005440 <HAL_DMA_Init+0x448>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4b12      	ldr	r3, [pc, #72]	; (8005444 <HAL_DMA_Init+0x44c>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b40      	cmp	r3, #64	; 0x40
 8005404:	d020      	beq.n	8005448 <HAL_DMA_Init+0x450>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	2b80      	cmp	r3, #128	; 0x80
 800540c:	d102      	bne.n	8005414 <HAL_DMA_Init+0x41c>
 800540e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005412:	e01a      	b.n	800544a <HAL_DMA_Init+0x452>
 8005414:	2300      	movs	r3, #0
 8005416:	e018      	b.n	800544a <HAL_DMA_Init+0x452>
 8005418:	fe10803f 	.word	0xfe10803f
 800541c:	5c001000 	.word	0x5c001000
 8005420:	ffff0000 	.word	0xffff0000
 8005424:	58025408 	.word	0x58025408
 8005428:	5802541c 	.word	0x5802541c
 800542c:	58025430 	.word	0x58025430
 8005430:	58025444 	.word	0x58025444
 8005434:	58025458 	.word	0x58025458
 8005438:	5802546c 	.word	0x5802546c
 800543c:	58025480 	.word	0x58025480
 8005440:	58025494 	.word	0x58025494
 8005444:	fffe000f 	.word	0xfffe000f
 8005448:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	68d2      	ldr	r2, [r2, #12]
 800544e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005450:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005458:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005460:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005468:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005470:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005478:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	4313      	orrs	r3, r2
 800547e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	4b6e      	ldr	r3, [pc, #440]	; (8005648 <HAL_DMA_Init+0x650>)
 8005490:	4413      	add	r3, r2
 8005492:	4a6e      	ldr	r2, [pc, #440]	; (800564c <HAL_DMA_Init+0x654>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	091b      	lsrs	r3, r3, #4
 800549a:	009a      	lsls	r2, r3, #2
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f905 	bl	80056b0 <DMA_CalcBaseAndBitshift>
 80054a6:	4603      	mov	r3, r0
 80054a8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	2201      	movs	r2, #1
 80054b4:	409a      	lsls	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	e008      	b.n	80054ce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2240      	movs	r2, #64	; 0x40
 80054c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2203      	movs	r2, #3
 80054c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e0b7      	b.n	800563e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a5f      	ldr	r2, [pc, #380]	; (8005650 <HAL_DMA_Init+0x658>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d072      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a5d      	ldr	r2, [pc, #372]	; (8005654 <HAL_DMA_Init+0x65c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d06d      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a5c      	ldr	r2, [pc, #368]	; (8005658 <HAL_DMA_Init+0x660>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d068      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a5a      	ldr	r2, [pc, #360]	; (800565c <HAL_DMA_Init+0x664>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d063      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a59      	ldr	r2, [pc, #356]	; (8005660 <HAL_DMA_Init+0x668>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d05e      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a57      	ldr	r2, [pc, #348]	; (8005664 <HAL_DMA_Init+0x66c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d059      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a56      	ldr	r2, [pc, #344]	; (8005668 <HAL_DMA_Init+0x670>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d054      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a54      	ldr	r2, [pc, #336]	; (800566c <HAL_DMA_Init+0x674>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d04f      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a53      	ldr	r2, [pc, #332]	; (8005670 <HAL_DMA_Init+0x678>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d04a      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a51      	ldr	r2, [pc, #324]	; (8005674 <HAL_DMA_Init+0x67c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d045      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a50      	ldr	r2, [pc, #320]	; (8005678 <HAL_DMA_Init+0x680>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d040      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4e      	ldr	r2, [pc, #312]	; (800567c <HAL_DMA_Init+0x684>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d03b      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a4d      	ldr	r2, [pc, #308]	; (8005680 <HAL_DMA_Init+0x688>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d036      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a4b      	ldr	r2, [pc, #300]	; (8005684 <HAL_DMA_Init+0x68c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d031      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a4a      	ldr	r2, [pc, #296]	; (8005688 <HAL_DMA_Init+0x690>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d02c      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a48      	ldr	r2, [pc, #288]	; (800568c <HAL_DMA_Init+0x694>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d027      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a47      	ldr	r2, [pc, #284]	; (8005690 <HAL_DMA_Init+0x698>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d022      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a45      	ldr	r2, [pc, #276]	; (8005694 <HAL_DMA_Init+0x69c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d01d      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a44      	ldr	r2, [pc, #272]	; (8005698 <HAL_DMA_Init+0x6a0>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d018      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a42      	ldr	r2, [pc, #264]	; (800569c <HAL_DMA_Init+0x6a4>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a41      	ldr	r2, [pc, #260]	; (80056a0 <HAL_DMA_Init+0x6a8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00e      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a3f      	ldr	r2, [pc, #252]	; (80056a4 <HAL_DMA_Init+0x6ac>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a3e      	ldr	r2, [pc, #248]	; (80056a8 <HAL_DMA_Init+0x6b0>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_DMA_Init+0x5c6>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a3c      	ldr	r2, [pc, #240]	; (80056ac <HAL_DMA_Init+0x6b4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <HAL_DMA_Init+0x5ca>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_DMA_Init+0x5cc>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d032      	beq.n	800562e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 f99f 	bl	800590c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b80      	cmp	r3, #128	; 0x80
 80055d4:	d102      	bne.n	80055dc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055e4:	b2d2      	uxtb	r2, r2
 80055e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80055f0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d010      	beq.n	800561c <HAL_DMA_Init+0x624>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d80c      	bhi.n	800561c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fa1c 	bl	8005a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	e008      	b.n	800562e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	a7fdabf8 	.word	0xa7fdabf8
 800564c:	cccccccd 	.word	0xcccccccd
 8005650:	40020010 	.word	0x40020010
 8005654:	40020028 	.word	0x40020028
 8005658:	40020040 	.word	0x40020040
 800565c:	40020058 	.word	0x40020058
 8005660:	40020070 	.word	0x40020070
 8005664:	40020088 	.word	0x40020088
 8005668:	400200a0 	.word	0x400200a0
 800566c:	400200b8 	.word	0x400200b8
 8005670:	40020410 	.word	0x40020410
 8005674:	40020428 	.word	0x40020428
 8005678:	40020440 	.word	0x40020440
 800567c:	40020458 	.word	0x40020458
 8005680:	40020470 	.word	0x40020470
 8005684:	40020488 	.word	0x40020488
 8005688:	400204a0 	.word	0x400204a0
 800568c:	400204b8 	.word	0x400204b8
 8005690:	58025408 	.word	0x58025408
 8005694:	5802541c 	.word	0x5802541c
 8005698:	58025430 	.word	0x58025430
 800569c:	58025444 	.word	0x58025444
 80056a0:	58025458 	.word	0x58025458
 80056a4:	5802546c 	.word	0x5802546c
 80056a8:	58025480 	.word	0x58025480
 80056ac:	58025494 	.word	0x58025494

080056b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a42      	ldr	r2, [pc, #264]	; (80057c8 <DMA_CalcBaseAndBitshift+0x118>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d04a      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a41      	ldr	r2, [pc, #260]	; (80057cc <DMA_CalcBaseAndBitshift+0x11c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d045      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a3f      	ldr	r2, [pc, #252]	; (80057d0 <DMA_CalcBaseAndBitshift+0x120>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d040      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3e      	ldr	r2, [pc, #248]	; (80057d4 <DMA_CalcBaseAndBitshift+0x124>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d03b      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a3c      	ldr	r2, [pc, #240]	; (80057d8 <DMA_CalcBaseAndBitshift+0x128>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d036      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a3b      	ldr	r2, [pc, #236]	; (80057dc <DMA_CalcBaseAndBitshift+0x12c>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d031      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a39      	ldr	r2, [pc, #228]	; (80057e0 <DMA_CalcBaseAndBitshift+0x130>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d02c      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a38      	ldr	r2, [pc, #224]	; (80057e4 <DMA_CalcBaseAndBitshift+0x134>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d027      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a36      	ldr	r2, [pc, #216]	; (80057e8 <DMA_CalcBaseAndBitshift+0x138>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d022      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a35      	ldr	r2, [pc, #212]	; (80057ec <DMA_CalcBaseAndBitshift+0x13c>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d01d      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a33      	ldr	r2, [pc, #204]	; (80057f0 <DMA_CalcBaseAndBitshift+0x140>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d018      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a32      	ldr	r2, [pc, #200]	; (80057f4 <DMA_CalcBaseAndBitshift+0x144>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d013      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a30      	ldr	r2, [pc, #192]	; (80057f8 <DMA_CalcBaseAndBitshift+0x148>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d00e      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a2f      	ldr	r2, [pc, #188]	; (80057fc <DMA_CalcBaseAndBitshift+0x14c>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d009      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2d      	ldr	r2, [pc, #180]	; (8005800 <DMA_CalcBaseAndBitshift+0x150>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <DMA_CalcBaseAndBitshift+0xa8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2c      	ldr	r2, [pc, #176]	; (8005804 <DMA_CalcBaseAndBitshift+0x154>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d101      	bne.n	800575c <DMA_CalcBaseAndBitshift+0xac>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <DMA_CalcBaseAndBitshift+0xae>
 800575c:	2300      	movs	r3, #0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d024      	beq.n	80057ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	3b10      	subs	r3, #16
 800576a:	4a27      	ldr	r2, [pc, #156]	; (8005808 <DMA_CalcBaseAndBitshift+0x158>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	091b      	lsrs	r3, r3, #4
 8005772:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	4a24      	ldr	r2, [pc, #144]	; (800580c <DMA_CalcBaseAndBitshift+0x15c>)
 800577c:	5cd3      	ldrb	r3, [r2, r3]
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2b03      	cmp	r3, #3
 8005788:	d908      	bls.n	800579c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	461a      	mov	r2, r3
 8005790:	4b1f      	ldr	r3, [pc, #124]	; (8005810 <DMA_CalcBaseAndBitshift+0x160>)
 8005792:	4013      	ands	r3, r2
 8005794:	1d1a      	adds	r2, r3, #4
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	659a      	str	r2, [r3, #88]	; 0x58
 800579a:	e00d      	b.n	80057b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	461a      	mov	r2, r3
 80057a2:	4b1b      	ldr	r3, [pc, #108]	; (8005810 <DMA_CalcBaseAndBitshift+0x160>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6593      	str	r3, [r2, #88]	; 0x58
 80057aa:	e005      	b.n	80057b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	40020010 	.word	0x40020010
 80057cc:	40020028 	.word	0x40020028
 80057d0:	40020040 	.word	0x40020040
 80057d4:	40020058 	.word	0x40020058
 80057d8:	40020070 	.word	0x40020070
 80057dc:	40020088 	.word	0x40020088
 80057e0:	400200a0 	.word	0x400200a0
 80057e4:	400200b8 	.word	0x400200b8
 80057e8:	40020410 	.word	0x40020410
 80057ec:	40020428 	.word	0x40020428
 80057f0:	40020440 	.word	0x40020440
 80057f4:	40020458 	.word	0x40020458
 80057f8:	40020470 	.word	0x40020470
 80057fc:	40020488 	.word	0x40020488
 8005800:	400204a0 	.word	0x400204a0
 8005804:	400204b8 	.word	0x400204b8
 8005808:	aaaaaaab 	.word	0xaaaaaaab
 800580c:	0800af60 	.word	0x0800af60
 8005810:	fffffc00 	.word	0xfffffc00

08005814 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d120      	bne.n	800586a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	2b03      	cmp	r3, #3
 800582e:	d858      	bhi.n	80058e2 <DMA_CheckFifoParam+0xce>
 8005830:	a201      	add	r2, pc, #4	; (adr r2, 8005838 <DMA_CheckFifoParam+0x24>)
 8005832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005836:	bf00      	nop
 8005838:	08005849 	.word	0x08005849
 800583c:	0800585b 	.word	0x0800585b
 8005840:	08005849 	.word	0x08005849
 8005844:	080058e3 	.word	0x080058e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d048      	beq.n	80058e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005858:	e045      	b.n	80058e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005862:	d142      	bne.n	80058ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005868:	e03f      	b.n	80058ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005872:	d123      	bne.n	80058bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	2b03      	cmp	r3, #3
 800587a:	d838      	bhi.n	80058ee <DMA_CheckFifoParam+0xda>
 800587c:	a201      	add	r2, pc, #4	; (adr r2, 8005884 <DMA_CheckFifoParam+0x70>)
 800587e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005882:	bf00      	nop
 8005884:	08005895 	.word	0x08005895
 8005888:	0800589b 	.word	0x0800589b
 800588c:	08005895 	.word	0x08005895
 8005890:	080058ad 	.word	0x080058ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
        break;
 8005898:	e030      	b.n	80058fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d025      	beq.n	80058f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058aa:	e022      	b.n	80058f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058b4:	d11f      	bne.n	80058f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80058ba:	e01c      	b.n	80058f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d902      	bls.n	80058ca <DMA_CheckFifoParam+0xb6>
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d003      	beq.n	80058d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80058c8:	e018      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
        break;
 80058ce:	e015      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00e      	beq.n	80058fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
    break;
 80058e0:	e00b      	b.n	80058fa <DMA_CheckFifoParam+0xe6>
        break;
 80058e2:	bf00      	nop
 80058e4:	e00a      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
        break;
 80058e6:	bf00      	nop
 80058e8:	e008      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
        break;
 80058ea:	bf00      	nop
 80058ec:	e006      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
        break;
 80058ee:	bf00      	nop
 80058f0:	e004      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
        break;
 80058f2:	bf00      	nop
 80058f4:	e002      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
        break;
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
    break;
 80058fa:	bf00      	nop
    }
  }

  return status;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop

0800590c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a38      	ldr	r2, [pc, #224]	; (8005a00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d022      	beq.n	800596a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a36      	ldr	r2, [pc, #216]	; (8005a04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d01d      	beq.n	800596a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a35      	ldr	r2, [pc, #212]	; (8005a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d018      	beq.n	800596a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a33      	ldr	r2, [pc, #204]	; (8005a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a32      	ldr	r2, [pc, #200]	; (8005a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00e      	beq.n	800596a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a30      	ldr	r2, [pc, #192]	; (8005a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d009      	beq.n	800596a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a2f      	ldr	r2, [pc, #188]	; (8005a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a2d      	ldr	r2, [pc, #180]	; (8005a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d101      	bne.n	800596e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800596a:	2301      	movs	r3, #1
 800596c:	e000      	b.n	8005970 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800596e:	2300      	movs	r3, #0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d01a      	beq.n	80059aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	b2db      	uxtb	r3, r3
 800597a:	3b08      	subs	r3, #8
 800597c:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	091b      	lsrs	r3, r3, #4
 8005984:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4b26      	ldr	r3, [pc, #152]	; (8005a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	461a      	mov	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a24      	ldr	r2, [pc, #144]	; (8005a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005998:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 031f 	and.w	r3, r3, #31
 80059a0:	2201      	movs	r2, #1
 80059a2:	409a      	lsls	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80059a8:	e024      	b.n	80059f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	3b10      	subs	r3, #16
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	091b      	lsrs	r3, r3, #4
 80059ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4a1c      	ldr	r2, [pc, #112]	; (8005a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d806      	bhi.n	80059d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d902      	bls.n	80059d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3308      	adds	r3, #8
 80059d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4b18      	ldr	r3, [pc, #96]	; (8005a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	461a      	mov	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a16      	ldr	r2, [pc, #88]	; (8005a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80059e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 031f 	and.w	r3, r3, #31
 80059ec:	2201      	movs	r2, #1
 80059ee:	409a      	lsls	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	58025408 	.word	0x58025408
 8005a04:	5802541c 	.word	0x5802541c
 8005a08:	58025430 	.word	0x58025430
 8005a0c:	58025444 	.word	0x58025444
 8005a10:	58025458 	.word	0x58025458
 8005a14:	5802546c 	.word	0x5802546c
 8005a18:	58025480 	.word	0x58025480
 8005a1c:	58025494 	.word	0x58025494
 8005a20:	cccccccd 	.word	0xcccccccd
 8005a24:	16009600 	.word	0x16009600
 8005a28:	58025880 	.word	0x58025880
 8005a2c:	aaaaaaab 	.word	0xaaaaaaab
 8005a30:	400204b8 	.word	0x400204b8
 8005a34:	4002040f 	.word	0x4002040f
 8005a38:	10008200 	.word	0x10008200
 8005a3c:	40020880 	.word	0x40020880

08005a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d04a      	beq.n	8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d847      	bhi.n	8005aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a25      	ldr	r2, [pc, #148]	; (8005af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d022      	beq.n	8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a24      	ldr	r2, [pc, #144]	; (8005afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d01d      	beq.n	8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a22      	ldr	r2, [pc, #136]	; (8005b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d018      	beq.n	8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a21      	ldr	r2, [pc, #132]	; (8005b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d013      	beq.n	8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1f      	ldr	r2, [pc, #124]	; (8005b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00e      	beq.n	8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1e      	ldr	r2, [pc, #120]	; (8005b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d009      	beq.n	8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a1b      	ldr	r2, [pc, #108]	; (8005b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d101      	bne.n	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e000      	b.n	8005ab2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	461a      	mov	r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ac8:	671a      	str	r2, [r3, #112]	; 0x70
 8005aca:	e009      	b.n	8005ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a11      	ldr	r2, [pc, #68]	; (8005b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005ade:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	409a      	lsls	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	58025408 	.word	0x58025408
 8005afc:	5802541c 	.word	0x5802541c
 8005b00:	58025430 	.word	0x58025430
 8005b04:	58025444 	.word	0x58025444
 8005b08:	58025458 	.word	0x58025458
 8005b0c:	5802546c 	.word	0x5802546c
 8005b10:	58025480 	.word	0x58025480
 8005b14:	58025494 	.word	0x58025494
 8005b18:	1600963f 	.word	0x1600963f
 8005b1c:	58025940 	.word	0x58025940
 8005b20:	1000823f 	.word	0x1000823f
 8005b24:	40020940 	.word	0x40020940

08005b28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e0c6      	b.n	8005cc8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d102      	bne.n	8005b48 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fe fc62 	bl	800440c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2223      	movs	r2, #35	; 0x23
 8005b4c:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b4e:	4b60      	ldr	r3, [pc, #384]	; (8005cd0 <HAL_ETH_Init+0x1a8>)
 8005b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b54:	4a5e      	ldr	r2, [pc, #376]	; (8005cd0 <HAL_ETH_Init+0x1a8>)
 8005b56:	f043 0302 	orr.w	r3, r3, #2
 8005b5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b5e:	4b5c      	ldr	r3, [pc, #368]	; (8005cd0 <HAL_ETH_Init+0x1a8>)
 8005b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	60bb      	str	r3, [r7, #8]
 8005b6a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	7a1b      	ldrb	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d103      	bne.n	8005b7c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005b74:	2000      	movs	r0, #0
 8005b76:	f7ff f8bb 	bl	8004cf0 <HAL_SYSCFG_ETHInterfaceSelect>
 8005b7a:	e003      	b.n	8005b84 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005b7c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005b80:	f7ff f8b6 	bl	8004cf0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b9c:	f7ff f86c 	bl	8004c78 <HAL_GetTick>
 8005ba0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005ba2:	e00f      	b.n	8005bc4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8005ba4:	f7ff f868 	bl	8004c78 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005bb2:	d907      	bls.n	8005bc4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2204      	movs	r2, #4
 8005bb8:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	22e0      	movs	r2, #224	; 0xe0
 8005bbe:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e081      	b.n	8005cc8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1e6      	bne.n	8005ba4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fac0 	bl	800615c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005bdc:	f001 febe 	bl	800795c <HAL_RCC_GetHCLKFreq>
 8005be0:	4603      	mov	r3, r0
 8005be2:	4a3c      	ldr	r2, [pc, #240]	; (8005cd4 <HAL_ETH_Init+0x1ac>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	0c9a      	lsrs	r2, r3, #18
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3a01      	subs	r2, #1
 8005bf0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fa13 	bl	8006020 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8005c10:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005c14:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d007      	beq.n	8005c32 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	22e0      	movs	r2, #224	; 0xe0
 8005c2c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e04a      	b.n	8005cc8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	f241 1308 	movw	r3, #4360	; 0x1108
 8005c3a:	4413      	add	r3, r2
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	4b26      	ldr	r3, [pc, #152]	; (8005cd8 <HAL_ETH_Init+0x1b0>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6952      	ldr	r2, [r2, #20]
 8005c46:	0052      	lsls	r2, r2, #1
 8005c48:	6879      	ldr	r1, [r7, #4]
 8005c4a:	6809      	ldr	r1, [r1, #0]
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	f241 1308 	movw	r3, #4360	; 0x1108
 8005c52:	440b      	add	r3, r1
 8005c54:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fad8 	bl	800620c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fb1c 	bl	800629a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	3305      	adds	r3, #5
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	021a      	lsls	r2, r3, #8
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	3304      	adds	r3, #4
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	4619      	mov	r1, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	3303      	adds	r3, #3
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	061a      	lsls	r2, r3, #24
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	3302      	adds	r3, #2
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005ca0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005cae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005cb0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2210      	movs	r2, #16
 8005cc4:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	58024400 	.word	0x58024400
 8005cd4:	431bde83 	.word	0x431bde83
 8005cd8:	ffff8001 	.word	0xffff8001

08005cdc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8005cee:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	791b      	ldrb	r3, [r3, #4]
 8005cf4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8005cf6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	7b1b      	ldrb	r3, [r3, #12]
 8005cfc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8005cfe:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	7b5b      	ldrb	r3, [r3, #13]
 8005d04:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005d06:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	7b9b      	ldrb	r3, [r3, #14]
 8005d0c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8005d0e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	7bdb      	ldrb	r3, [r3, #15]
 8005d14:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005d16:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	7c12      	ldrb	r2, [r2, #16]
 8005d1c:	2a00      	cmp	r2, #0
 8005d1e:	d102      	bne.n	8005d26 <ETH_SetMACConfig+0x4a>
 8005d20:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005d24:	e000      	b.n	8005d28 <ETH_SetMACConfig+0x4c>
 8005d26:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005d28:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	7c52      	ldrb	r2, [r2, #17]
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	d102      	bne.n	8005d38 <ETH_SetMACConfig+0x5c>
 8005d32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005d36:	e000      	b.n	8005d3a <ETH_SetMACConfig+0x5e>
 8005d38:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005d3a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	7c9b      	ldrb	r3, [r3, #18]
 8005d40:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005d42:	431a      	orrs	r2, r3
                                macconf->Speed |
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8005d48:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8005d4e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	7f1b      	ldrb	r3, [r3, #28]
 8005d54:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8005d56:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	7f5b      	ldrb	r3, [r3, #29]
 8005d5c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8005d5e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	7f92      	ldrb	r2, [r2, #30]
 8005d64:	2a00      	cmp	r2, #0
 8005d66:	d102      	bne.n	8005d6e <ETH_SetMACConfig+0x92>
 8005d68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d6c:	e000      	b.n	8005d70 <ETH_SetMACConfig+0x94>
 8005d6e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8005d70:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	7fdb      	ldrb	r3, [r3, #31]
 8005d76:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8005d78:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005d80:	2a00      	cmp	r2, #0
 8005d82:	d102      	bne.n	8005d8a <ETH_SetMACConfig+0xae>
 8005d84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d88:	e000      	b.n	8005d8c <ETH_SetMACConfig+0xb0>
 8005d8a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8005d8c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8005d92:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d9a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8005d9c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	4b56      	ldr	r3, [pc, #344]	; (8005f08 <ETH_SetMACConfig+0x22c>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6812      	ldr	r2, [r2, #0]
 8005db4:	68f9      	ldr	r1, [r7, #12]
 8005db6:	430b      	orrs	r3, r1
 8005db8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dc6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005dc8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dd0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8005dd2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005dda:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8005ddc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005de4:	2a00      	cmp	r2, #0
 8005de6:	d102      	bne.n	8005dee <ETH_SetMACConfig+0x112>
 8005de8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005dec:	e000      	b.n	8005df0 <ETH_SetMACConfig+0x114>
 8005dee:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8005df0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8005df6:	4313      	orrs	r3, r2
 8005df8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	4b42      	ldr	r3, [pc, #264]	; (8005f0c <ETH_SetMACConfig+0x230>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	68f9      	ldr	r1, [r7, #12]
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e14:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68da      	ldr	r2, [r3, #12]
 8005e24:	4b3a      	ldr	r3, [pc, #232]	; (8005f10 <ETH_SetMACConfig+0x234>)
 8005e26:	4013      	ands	r3, r2
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	68f9      	ldr	r1, [r7, #12]
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005e38:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005e3e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005e46:	2a00      	cmp	r2, #0
 8005e48:	d101      	bne.n	8005e4e <ETH_SetMACConfig+0x172>
 8005e4a:	2280      	movs	r2, #128	; 0x80
 8005e4c:	e000      	b.n	8005e50 <ETH_SetMACConfig+0x174>
 8005e4e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005e50:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e56:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e62:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005e66:	4013      	ands	r3, r2
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6812      	ldr	r2, [r2, #0]
 8005e6c:	68f9      	ldr	r1, [r7, #12]
 8005e6e:	430b      	orrs	r3, r1
 8005e70:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005e78:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005e80:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8e:	f023 0103 	bic.w	r1, r3, #3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005ea6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005ec2:	2a00      	cmp	r2, #0
 8005ec4:	d101      	bne.n	8005eca <ETH_SetMACConfig+0x1ee>
 8005ec6:	2240      	movs	r2, #64	; 0x40
 8005ec8:	e000      	b.n	8005ecc <ETH_SetMACConfig+0x1f0>
 8005eca:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005ecc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005ed4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005ed6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005ede:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005eec:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005efc:	bf00      	nop
 8005efe:	3714      	adds	r7, #20
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	00048083 	.word	0x00048083
 8005f0c:	c0f88000 	.word	0xc0f88000
 8005f10:	fffffef0 	.word	0xfffffef0

08005f14 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4b38      	ldr	r3, [pc, #224]	; (800600c <ETH_SetDMAConfig+0xf8>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	6812      	ldr	r2, [r2, #0]
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	6809      	ldr	r1, [r1, #0]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8005f3a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	791b      	ldrb	r3, [r3, #4]
 8005f40:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005f46:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	7b1b      	ldrb	r3, [r3, #12]
 8005f4c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	f241 0304 	movw	r3, #4100	; 0x1004
 8005f5a:	4413      	add	r3, r2
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	4b2c      	ldr	r3, [pc, #176]	; (8006010 <ETH_SetDMAConfig+0xfc>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6811      	ldr	r1, [r2, #0]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	f241 0304 	movw	r3, #4100	; 0x1004
 8005f6e:	440b      	add	r3, r1
 8005f70:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	7b5b      	ldrb	r3, [r3, #13]
 8005f76:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	4b22      	ldr	r3, [pc, #136]	; (8006014 <ETH_SetDMAConfig+0x100>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6811      	ldr	r1, [r2, #0]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005f9a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	7d1b      	ldrb	r3, [r3, #20]
 8005fa4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005fa6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	7f5b      	ldrb	r3, [r3, #29]
 8005fac:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	f241 1304 	movw	r3, #4356	; 0x1104
 8005fba:	4413      	add	r3, r2
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	4b16      	ldr	r3, [pc, #88]	; (8006018 <ETH_SetDMAConfig+0x104>)
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6811      	ldr	r1, [r2, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	f241 1304 	movw	r3, #4356	; 0x1104
 8005fce:	440b      	add	r3, r1
 8005fd0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	7f1b      	ldrb	r3, [r3, #28]
 8005fd6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	f241 1308 	movw	r3, #4360	; 0x1108
 8005fe8:	4413      	add	r3, r2
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	4b0b      	ldr	r3, [pc, #44]	; (800601c <ETH_SetDMAConfig+0x108>)
 8005fee:	4013      	ands	r3, r2
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6811      	ldr	r1, [r2, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	f241 1308 	movw	r3, #4360	; 0x1108
 8005ffc:	440b      	add	r3, r1
 8005ffe:	601a      	str	r2, [r3, #0]
}
 8006000:	bf00      	nop
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	ffff87fd 	.word	0xffff87fd
 8006010:	ffff2ffe 	.word	0xffff2ffe
 8006014:	fffec000 	.word	0xfffec000
 8006018:	ffc0efef 	.word	0xffc0efef
 800601c:	7fc0ffff 	.word	0x7fc0ffff

08006020 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b0a4      	sub	sp, #144	; 0x90
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006028:	2301      	movs	r3, #1
 800602a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800602e:	2300      	movs	r3, #0
 8006030:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006032:	2300      	movs	r3, #0
 8006034:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006038:	2300      	movs	r3, #0
 800603a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800604a:	2301      	movs	r3, #1
 800604c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006050:	2300      	movs	r3, #0
 8006052:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800605c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006060:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006062:	2300      	movs	r3, #0
 8006064:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006068:	2300      	movs	r3, #0
 800606a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800606c:	2300      	movs	r3, #0
 800606e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006072:	2300      	movs	r3, #0
 8006074:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006078:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800607c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800607e:	2300      	movs	r3, #0
 8006080:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006084:	2300      	movs	r3, #0
 8006086:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800608e:	2300      	movs	r3, #0
 8006090:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006094:	2300      	movs	r3, #0
 8006096:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800609a:	2300      	movs	r3, #0
 800609c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800609e:	2300      	movs	r3, #0
 80060a0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80060a2:	2300      	movs	r3, #0
 80060a4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80060b8:	2320      	movs	r3, #32
 80060ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80060be:	2301      	movs	r3, #1
 80060c0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80060c4:	2300      	movs	r3, #0
 80060c6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80060ca:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80060ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80060d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060d4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80060dc:	2302      	movs	r3, #2
 80060de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80060ee:	2300      	movs	r3, #0
 80060f0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80060f4:	2301      	movs	r3, #1
 80060f6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80060fa:	2300      	movs	r3, #0
 80060fc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006108:	4619      	mov	r1, r3
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fde6 	bl	8005cdc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006110:	2301      	movs	r3, #1
 8006112:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006114:	2301      	movs	r3, #1
 8006116:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006118:	2300      	movs	r3, #0
 800611a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800611c:	2300      	movs	r3, #0
 800611e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006122:	2300      	movs	r3, #0
 8006124:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006126:	2300      	movs	r3, #0
 8006128:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800612a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800612e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006130:	2300      	movs	r3, #0
 8006132:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006134:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006138:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800613a:	2300      	movs	r3, #0
 800613c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8006140:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006144:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006146:	f107 0308 	add.w	r3, r7, #8
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff fee1 	bl	8005f14 <ETH_SetDMAConfig>
}
 8006152:	bf00      	nop
 8006154:	3790      	adds	r7, #144	; 0x90
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800616c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006174:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006176:	f001 fbf1 	bl	800795c <HAL_RCC_GetHCLKFreq>
 800617a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d908      	bls.n	8006196 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d804      	bhi.n	8006196 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	e027      	b.n	80061e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	4a18      	ldr	r2, [pc, #96]	; (80061fc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d908      	bls.n	80061b0 <ETH_MAC_MDIO_ClkConfig+0x54>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4a17      	ldr	r2, [pc, #92]	; (8006200 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d204      	bcs.n	80061b0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80061ac:	60fb      	str	r3, [r7, #12]
 80061ae:	e01a      	b.n	80061e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4a13      	ldr	r2, [pc, #76]	; (8006200 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d303      	bcc.n	80061c0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4a12      	ldr	r2, [pc, #72]	; (8006204 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d911      	bls.n	80061e4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4a10      	ldr	r2, [pc, #64]	; (8006204 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d908      	bls.n	80061da <ETH_MAC_MDIO_ClkConfig+0x7e>
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	4a0f      	ldr	r2, [pc, #60]	; (8006208 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d804      	bhi.n	80061da <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e005      	b.n	80061e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	e000      	b.n	80061e6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80061e4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	01312cff 	.word	0x01312cff
 80061fc:	02160ebf 	.word	0x02160ebf
 8006200:	03938700 	.word	0x03938700
 8006204:	05f5e0ff 	.word	0x05f5e0ff
 8006208:	08f0d17f 	.word	0x08f0d17f

0800620c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	e01d      	b.n	8006256 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68d9      	ldr	r1, [r3, #12]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	440b      	add	r3, r1
 800622a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2200      	movs	r2, #0
 8006236:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2200      	movs	r2, #0
 800623c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	2200      	movs	r2, #0
 8006242:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	3206      	adds	r2, #6
 800624c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3301      	adds	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b03      	cmp	r3, #3
 800625a:	d9de      	bls.n	800621a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	f241 132c 	movw	r3, #4396	; 0x112c
 800626a:	4413      	add	r3, r2
 800626c:	2203      	movs	r2, #3
 800626e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	68d9      	ldr	r1, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	f241 1314 	movw	r3, #4372	; 0x1114
 800627c:	4413      	add	r3, r2
 800627e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	68da      	ldr	r2, [r3, #12]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800628c:	601a      	str	r2, [r3, #0]
}
 800628e:	bf00      	nop
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80062a2:	2300      	movs	r3, #0
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e024      	b.n	80062f2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6919      	ldr	r1, [r3, #16]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4613      	mov	r3, r2
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	4413      	add	r3, r2
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	440b      	add	r3, r1
 80062b8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2200      	movs	r2, #0
 80062c4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2200      	movs	r2, #0
 80062ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	2200      	movs	r2, #0
 80062d0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2200      	movs	r2, #0
 80062d6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2200      	movs	r2, #0
 80062dc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	330a      	adds	r3, #10
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2b03      	cmp	r3, #3
 80062f6:	d9d7      	bls.n	80062a8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	f241 1330 	movw	r3, #4400	; 0x1130
 800631e:	4413      	add	r3, r2
 8006320:	2203      	movs	r2, #3
 8006322:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6919      	ldr	r1, [r3, #16]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	f241 131c 	movw	r3, #4380	; 0x111c
 8006330:	4413      	add	r3, r2
 8006332:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	f241 1328 	movw	r3, #4392	; 0x1128
 8006344:	4413      	add	r3, r2
 8006346:	6019      	str	r1, [r3, #0]
}
 8006348:	bf00      	nop
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006354:	b480      	push	{r7}
 8006356:	b089      	sub	sp, #36	; 0x24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006362:	4b89      	ldr	r3, [pc, #548]	; (8006588 <HAL_GPIO_Init+0x234>)
 8006364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006366:	e194      	b.n	8006692 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	2101      	movs	r1, #1
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	fa01 f303 	lsl.w	r3, r1, r3
 8006374:	4013      	ands	r3, r2
 8006376:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 8186 	beq.w	800668c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d00b      	beq.n	80063a0 <HAL_GPIO_Init+0x4c>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d007      	beq.n	80063a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006394:	2b11      	cmp	r3, #17
 8006396:	d003      	beq.n	80063a0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b12      	cmp	r3, #18
 800639e:	d130      	bne.n	8006402 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	2203      	movs	r2, #3
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	4013      	ands	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68da      	ldr	r2, [r3, #12]
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80063d6:	2201      	movs	r2, #1
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	43db      	mvns	r3, r3
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	4013      	ands	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	091b      	lsrs	r3, r3, #4
 80063ec:	f003 0201 	and.w	r2, r3, #1
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	69ba      	ldr	r2, [r7, #24]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	005b      	lsls	r3, r3, #1
 800640c:	2203      	movs	r2, #3
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43db      	mvns	r3, r3
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	4013      	ands	r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	69ba      	ldr	r2, [r7, #24]
 8006428:	4313      	orrs	r3, r2
 800642a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b02      	cmp	r3, #2
 8006438:	d003      	beq.n	8006442 <HAL_GPIO_Init+0xee>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b12      	cmp	r3, #18
 8006440:	d123      	bne.n	800648a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	08da      	lsrs	r2, r3, #3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	3208      	adds	r2, #8
 800644a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	220f      	movs	r2, #15
 800645a:	fa02 f303 	lsl.w	r3, r2, r3
 800645e:	43db      	mvns	r3, r3
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	4013      	ands	r3, r2
 8006464:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	691a      	ldr	r2, [r3, #16]
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	f003 0307 	and.w	r3, r3, #7
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	4313      	orrs	r3, r2
 800647a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	08da      	lsrs	r2, r3, #3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3208      	adds	r2, #8
 8006484:	69b9      	ldr	r1, [r7, #24]
 8006486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	005b      	lsls	r3, r3, #1
 8006494:	2203      	movs	r2, #3
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	43db      	mvns	r3, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	4013      	ands	r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f003 0203 	and.w	r2, r3, #3
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	fa02 f303 	lsl.w	r3, r2, r3
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 80e0 	beq.w	800668c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064cc:	4b2f      	ldr	r3, [pc, #188]	; (800658c <HAL_GPIO_Init+0x238>)
 80064ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064d2:	4a2e      	ldr	r2, [pc, #184]	; (800658c <HAL_GPIO_Init+0x238>)
 80064d4:	f043 0302 	orr.w	r3, r3, #2
 80064d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80064dc:	4b2b      	ldr	r3, [pc, #172]	; (800658c <HAL_GPIO_Init+0x238>)
 80064de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	60fb      	str	r3, [r7, #12]
 80064e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80064ea:	4a29      	ldr	r2, [pc, #164]	; (8006590 <HAL_GPIO_Init+0x23c>)
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	089b      	lsrs	r3, r3, #2
 80064f0:	3302      	adds	r3, #2
 80064f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	220f      	movs	r2, #15
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	43db      	mvns	r3, r3
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	4013      	ands	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a20      	ldr	r2, [pc, #128]	; (8006594 <HAL_GPIO_Init+0x240>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d052      	beq.n	80065bc <HAL_GPIO_Init+0x268>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a1f      	ldr	r2, [pc, #124]	; (8006598 <HAL_GPIO_Init+0x244>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d031      	beq.n	8006582 <HAL_GPIO_Init+0x22e>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a1e      	ldr	r2, [pc, #120]	; (800659c <HAL_GPIO_Init+0x248>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d02b      	beq.n	800657e <HAL_GPIO_Init+0x22a>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <HAL_GPIO_Init+0x24c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d025      	beq.n	800657a <HAL_GPIO_Init+0x226>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1c      	ldr	r2, [pc, #112]	; (80065a4 <HAL_GPIO_Init+0x250>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d01f      	beq.n	8006576 <HAL_GPIO_Init+0x222>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a1b      	ldr	r2, [pc, #108]	; (80065a8 <HAL_GPIO_Init+0x254>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d019      	beq.n	8006572 <HAL_GPIO_Init+0x21e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a1a      	ldr	r2, [pc, #104]	; (80065ac <HAL_GPIO_Init+0x258>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d013      	beq.n	800656e <HAL_GPIO_Init+0x21a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a19      	ldr	r2, [pc, #100]	; (80065b0 <HAL_GPIO_Init+0x25c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00d      	beq.n	800656a <HAL_GPIO_Init+0x216>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <HAL_GPIO_Init+0x260>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <HAL_GPIO_Init+0x212>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a17      	ldr	r2, [pc, #92]	; (80065b8 <HAL_GPIO_Init+0x264>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d101      	bne.n	8006562 <HAL_GPIO_Init+0x20e>
 800655e:	2309      	movs	r3, #9
 8006560:	e02d      	b.n	80065be <HAL_GPIO_Init+0x26a>
 8006562:	230a      	movs	r3, #10
 8006564:	e02b      	b.n	80065be <HAL_GPIO_Init+0x26a>
 8006566:	2308      	movs	r3, #8
 8006568:	e029      	b.n	80065be <HAL_GPIO_Init+0x26a>
 800656a:	2307      	movs	r3, #7
 800656c:	e027      	b.n	80065be <HAL_GPIO_Init+0x26a>
 800656e:	2306      	movs	r3, #6
 8006570:	e025      	b.n	80065be <HAL_GPIO_Init+0x26a>
 8006572:	2305      	movs	r3, #5
 8006574:	e023      	b.n	80065be <HAL_GPIO_Init+0x26a>
 8006576:	2304      	movs	r3, #4
 8006578:	e021      	b.n	80065be <HAL_GPIO_Init+0x26a>
 800657a:	2303      	movs	r3, #3
 800657c:	e01f      	b.n	80065be <HAL_GPIO_Init+0x26a>
 800657e:	2302      	movs	r3, #2
 8006580:	e01d      	b.n	80065be <HAL_GPIO_Init+0x26a>
 8006582:	2301      	movs	r3, #1
 8006584:	e01b      	b.n	80065be <HAL_GPIO_Init+0x26a>
 8006586:	bf00      	nop
 8006588:	58000080 	.word	0x58000080
 800658c:	58024400 	.word	0x58024400
 8006590:	58000400 	.word	0x58000400
 8006594:	58020000 	.word	0x58020000
 8006598:	58020400 	.word	0x58020400
 800659c:	58020800 	.word	0x58020800
 80065a0:	58020c00 	.word	0x58020c00
 80065a4:	58021000 	.word	0x58021000
 80065a8:	58021400 	.word	0x58021400
 80065ac:	58021800 	.word	0x58021800
 80065b0:	58021c00 	.word	0x58021c00
 80065b4:	58022000 	.word	0x58022000
 80065b8:	58022400 	.word	0x58022400
 80065bc:	2300      	movs	r3, #0
 80065be:	69fa      	ldr	r2, [r7, #28]
 80065c0:	f002 0203 	and.w	r2, r2, #3
 80065c4:	0092      	lsls	r2, r2, #2
 80065c6:	4093      	lsls	r3, r2
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80065ce:	4938      	ldr	r1, [pc, #224]	; (80066b0 <HAL_GPIO_Init+0x35c>)
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	089b      	lsrs	r3, r3, #2
 80065d4:	3302      	adds	r3, #2
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	43db      	mvns	r3, r3
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	4013      	ands	r3, r2
 80065ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	43db      	mvns	r3, r3
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	4013      	ands	r3, r2
 8006614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	69ba      	ldr	r2, [r7, #24]
 800662e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	43db      	mvns	r3, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4013      	ands	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800664e:	69ba      	ldr	r2, [r7, #24]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006656:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800665e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	43db      	mvns	r3, r3
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4013      	ands	r3, r2
 800666e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d003      	beq.n	8006684 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	3301      	adds	r3, #1
 8006690:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	f47f ae63 	bne.w	8006368 <HAL_GPIO_Init+0x14>
  }
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	3724      	adds	r7, #36	; 0x24
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	58000400 	.word	0x58000400

080066b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	807b      	strh	r3, [r7, #2]
 80066c0:	4613      	mov	r3, r2
 80066c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80066c4:	787b      	ldrb	r3, [r7, #1]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066ca:	887a      	ldrh	r2, [r7, #2]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80066d0:	e003      	b.n	80066da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80066d2:	887b      	ldrh	r3, [r7, #2]
 80066d4:	041a      	lsls	r2, r3, #16
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	619a      	str	r2, [r3, #24]
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	460b      	mov	r3, r1
 80066f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	887b      	ldrh	r3, [r7, #2]
 80066f8:	401a      	ands	r2, r3
 80066fa:	887b      	ldrh	r3, [r7, #2]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d104      	bne.n	800670a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006700:	887b      	ldrh	r3, [r7, #2]
 8006702:	041a      	lsls	r2, r3, #16
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8006708:	e002      	b.n	8006710 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800670a:	887a      	ldrh	r2, [r7, #2]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	619a      	str	r2, [r3, #24]
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006724:	4a08      	ldr	r2, [pc, #32]	; (8006748 <HAL_HSEM_FastTake+0x2c>)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3320      	adds	r3, #32
 800672a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800672e:	4a07      	ldr	r2, [pc, #28]	; (800674c <HAL_HSEM_FastTake+0x30>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d101      	bne.n	8006738 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e000      	b.n	800673a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
}
 800673a:	4618      	mov	r0, r3
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	58026400 	.word	0x58026400
 800674c:	80000300 	.word	0x80000300

08006750 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800675a:	4906      	ldr	r1, [pc, #24]	; (8006774 <HAL_HSEM_Release+0x24>)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	58026400 	.word	0x58026400

08006778 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800677a:	b08f      	sub	sp, #60	; 0x3c
 800677c:	af0a      	add	r7, sp, #40	; 0x28
 800677e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d101      	bne.n	800678a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e116      	b.n	80069b8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b00      	cmp	r3, #0
 800679a:	d106      	bne.n	80067aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fd ffad 	bl	8004704 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2203      	movs	r2, #3
 80067ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4618      	mov	r0, r3
 80067ca:	f003 ffef 	bl	800a7ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	603b      	str	r3, [r7, #0]
 80067d4:	687e      	ldr	r6, [r7, #4]
 80067d6:	466d      	mov	r5, sp
 80067d8:	f106 0410 	add.w	r4, r6, #16
 80067dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80067ec:	1d33      	adds	r3, r6, #4
 80067ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067f0:	6838      	ldr	r0, [r7, #0]
 80067f2:	f003 ff79 	bl	800a6e8 <USB_CoreInit>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2202      	movs	r2, #2
 8006800:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e0d7      	b.n	80069b8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f003 ffdd 	bl	800a7ce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]
 8006818:	e04a      	b.n	80068b0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800681a:	7bfa      	ldrb	r2, [r7, #15]
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	00db      	lsls	r3, r3, #3
 8006822:	1a9b      	subs	r3, r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	333d      	adds	r3, #61	; 0x3d
 800682a:	2201      	movs	r2, #1
 800682c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800682e:	7bfa      	ldrb	r2, [r7, #15]
 8006830:	6879      	ldr	r1, [r7, #4]
 8006832:	4613      	mov	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	440b      	add	r3, r1
 800683c:	333c      	adds	r3, #60	; 0x3c
 800683e:	7bfa      	ldrb	r2, [r7, #15]
 8006840:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006842:	7bfa      	ldrb	r2, [r7, #15]
 8006844:	7bfb      	ldrb	r3, [r7, #15]
 8006846:	b298      	uxth	r0, r3
 8006848:	6879      	ldr	r1, [r7, #4]
 800684a:	4613      	mov	r3, r2
 800684c:	00db      	lsls	r3, r3, #3
 800684e:	1a9b      	subs	r3, r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	3342      	adds	r3, #66	; 0x42
 8006856:	4602      	mov	r2, r0
 8006858:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800685a:	7bfa      	ldrb	r2, [r7, #15]
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	4613      	mov	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	440b      	add	r3, r1
 8006868:	333f      	adds	r3, #63	; 0x3f
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800686e:	7bfa      	ldrb	r2, [r7, #15]
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	00db      	lsls	r3, r3, #3
 8006876:	1a9b      	subs	r3, r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	3344      	adds	r3, #68	; 0x44
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006882:	7bfa      	ldrb	r2, [r7, #15]
 8006884:	6879      	ldr	r1, [r7, #4]
 8006886:	4613      	mov	r3, r2
 8006888:	00db      	lsls	r3, r3, #3
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	3348      	adds	r3, #72	; 0x48
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006896:	7bfa      	ldrb	r2, [r7, #15]
 8006898:	6879      	ldr	r1, [r7, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	440b      	add	r3, r1
 80068a4:	3350      	adds	r3, #80	; 0x50
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
 80068ac:	3301      	adds	r3, #1
 80068ae:	73fb      	strb	r3, [r7, #15]
 80068b0:	7bfa      	ldrb	r2, [r7, #15]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d3af      	bcc.n	800681a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
 80068be:	e044      	b.n	800694a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80068c0:	7bfa      	ldrb	r2, [r7, #15]
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	00db      	lsls	r3, r3, #3
 80068c8:	1a9b      	subs	r3, r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80068d2:	2200      	movs	r2, #0
 80068d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80068d6:	7bfa      	ldrb	r2, [r7, #15]
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	1a9b      	subs	r3, r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	440b      	add	r3, r1
 80068e4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80068e8:	7bfa      	ldrb	r2, [r7, #15]
 80068ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068ec:	7bfa      	ldrb	r2, [r7, #15]
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	4613      	mov	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006902:	7bfa      	ldrb	r2, [r7, #15]
 8006904:	6879      	ldr	r1, [r7, #4]
 8006906:	4613      	mov	r3, r2
 8006908:	00db      	lsls	r3, r3, #3
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	009b      	lsls	r3, r3, #2
 800690e:	440b      	add	r3, r1
 8006910:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006918:	7bfa      	ldrb	r2, [r7, #15]
 800691a:	6879      	ldr	r1, [r7, #4]
 800691c:	4613      	mov	r3, r2
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	1a9b      	subs	r3, r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	440b      	add	r3, r1
 8006926:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800692e:	7bfa      	ldrb	r2, [r7, #15]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	1a9b      	subs	r3, r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	440b      	add	r3, r1
 800693c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006944:	7bfb      	ldrb	r3, [r7, #15]
 8006946:	3301      	adds	r3, #1
 8006948:	73fb      	strb	r3, [r7, #15]
 800694a:	7bfa      	ldrb	r2, [r7, #15]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	429a      	cmp	r2, r3
 8006952:	d3b5      	bcc.n	80068c0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	603b      	str	r3, [r7, #0]
 800695a:	687e      	ldr	r6, [r7, #4]
 800695c:	466d      	mov	r5, sp
 800695e:	f106 0410 	add.w	r4, r6, #16
 8006962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006966:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800696a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800696e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006972:	1d33      	adds	r3, r6, #4
 8006974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006976:	6838      	ldr	r0, [r7, #0]
 8006978:	f003 ff54 	bl	800a824 <USB_DevInit>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2202      	movs	r2, #2
 8006986:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e014      	b.n	80069b8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d102      	bne.n	80069ac <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f80a 	bl	80069c0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4618      	mov	r0, r3
 80069b2:	f004 f8f6 	bl	800aba2 <USB_DevDisconnect>

  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3714      	adds	r7, #20
 80069bc:	46bd      	mov	sp, r7
 80069be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080069c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069ee:	4b05      	ldr	r3, [pc, #20]	; (8006a04 <HAL_PCDEx_ActivateLPM+0x44>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80069f6:	2300      	movs	r3, #0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	10000003 	.word	0x10000003

08006a08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006a10:	4b29      	ldr	r3, [pc, #164]	; (8006ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a12:	68db      	ldr	r3, [r3, #12]
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	2b06      	cmp	r3, #6
 8006a1a:	d00a      	beq.n	8006a32 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006a1c:	4b26      	ldr	r3, [pc, #152]	; (8006ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a24:	687a      	ldr	r2, [r7, #4]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d001      	beq.n	8006a2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e040      	b.n	8006ab0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e03e      	b.n	8006ab0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006a32:	4b21      	ldr	r3, [pc, #132]	; (8006ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006a3a:	491f      	ldr	r1, [pc, #124]	; (8006ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006a42:	f7fe f919 	bl	8004c78 <HAL_GetTick>
 8006a46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a48:	e009      	b.n	8006a5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a4a:	f7fe f915 	bl	8004c78 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a58:	d901      	bls.n	8006a5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e028      	b.n	8006ab0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006a5e:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a6a:	d1ee      	bne.n	8006a4a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b1e      	cmp	r3, #30
 8006a70:	d008      	beq.n	8006a84 <HAL_PWREx_ConfigSupply+0x7c>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b2e      	cmp	r3, #46	; 0x2e
 8006a76:	d005      	beq.n	8006a84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b1d      	cmp	r3, #29
 8006a7c:	d002      	beq.n	8006a84 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b2d      	cmp	r3, #45	; 0x2d
 8006a82:	d114      	bne.n	8006aae <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006a84:	f7fe f8f8 	bl	8004c78 <HAL_GetTick>
 8006a88:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006a8a:	e009      	b.n	8006aa0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006a8c:	f7fe f8f4 	bl	8004c78 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a9a:	d901      	bls.n	8006aa0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e007      	b.n	8006ab0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006aa0:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aac:	d1ee      	bne.n	8006a8c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	58024800 	.word	0x58024800

08006abc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	4a04      	ldr	r2, [pc, #16]	; (8006ad8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006ac6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006aca:	60d3      	str	r3, [r2, #12]
}
 8006acc:	bf00      	nop
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	58024800 	.word	0x58024800

08006adc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08c      	sub	sp, #48	; 0x30
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006aea:	2301      	movs	r3, #1
 8006aec:	e3ff      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8087 	beq.w	8006c0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006afc:	4b99      	ldr	r3, [pc, #612]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006b06:	4b97      	ldr	r3, [pc, #604]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0e:	2b10      	cmp	r3, #16
 8006b10:	d007      	beq.n	8006b22 <HAL_RCC_OscConfig+0x46>
 8006b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b14:	2b18      	cmp	r3, #24
 8006b16:	d110      	bne.n	8006b3a <HAL_RCC_OscConfig+0x5e>
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d10b      	bne.n	8006b3a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b22:	4b90      	ldr	r3, [pc, #576]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d06c      	beq.n	8006c08 <HAL_RCC_OscConfig+0x12c>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d168      	bne.n	8006c08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e3d9      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b42:	d106      	bne.n	8006b52 <HAL_RCC_OscConfig+0x76>
 8006b44:	4b87      	ldr	r3, [pc, #540]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a86      	ldr	r2, [pc, #536]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	e02e      	b.n	8006bb0 <HAL_RCC_OscConfig+0xd4>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10c      	bne.n	8006b74 <HAL_RCC_OscConfig+0x98>
 8006b5a:	4b82      	ldr	r3, [pc, #520]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a81      	ldr	r2, [pc, #516]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	4b7f      	ldr	r3, [pc, #508]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a7e      	ldr	r2, [pc, #504]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b70:	6013      	str	r3, [r2, #0]
 8006b72:	e01d      	b.n	8006bb0 <HAL_RCC_OscConfig+0xd4>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b7c:	d10c      	bne.n	8006b98 <HAL_RCC_OscConfig+0xbc>
 8006b7e:	4b79      	ldr	r3, [pc, #484]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a78      	ldr	r2, [pc, #480]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	4b76      	ldr	r3, [pc, #472]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a75      	ldr	r2, [pc, #468]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	e00b      	b.n	8006bb0 <HAL_RCC_OscConfig+0xd4>
 8006b98:	4b72      	ldr	r3, [pc, #456]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a71      	ldr	r2, [pc, #452]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	4b6f      	ldr	r3, [pc, #444]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a6e      	ldr	r2, [pc, #440]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d013      	beq.n	8006be0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb8:	f7fe f85e 	bl	8004c78 <HAL_GetTick>
 8006bbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bc0:	f7fe f85a 	bl	8004c78 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b64      	cmp	r3, #100	; 0x64
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e38d      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bd2:	4b64      	ldr	r3, [pc, #400]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCC_OscConfig+0xe4>
 8006bde:	e014      	b.n	8006c0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be0:	f7fe f84a 	bl	8004c78 <HAL_GetTick>
 8006be4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006be6:	e008      	b.n	8006bfa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006be8:	f7fe f846 	bl	8004c78 <HAL_GetTick>
 8006bec:	4602      	mov	r2, r0
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	1ad3      	subs	r3, r2, r3
 8006bf2:	2b64      	cmp	r3, #100	; 0x64
 8006bf4:	d901      	bls.n	8006bfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e379      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006bfa:	4b5a      	ldr	r3, [pc, #360]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f0      	bne.n	8006be8 <HAL_RCC_OscConfig+0x10c>
 8006c06:	e000      	b.n	8006c0a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 80ae 	beq.w	8006d74 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c18:	4b52      	ldr	r3, [pc, #328]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006c22:	4b50      	ldr	r3, [pc, #320]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d007      	beq.n	8006c3e <HAL_RCC_OscConfig+0x162>
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	2b18      	cmp	r3, #24
 8006c32:	d13a      	bne.n	8006caa <HAL_RCC_OscConfig+0x1ce>
 8006c34:	69fb      	ldr	r3, [r7, #28]
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d135      	bne.n	8006caa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c3e:	4b49      	ldr	r3, [pc, #292]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0304 	and.w	r3, r3, #4
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d005      	beq.n	8006c56 <HAL_RCC_OscConfig+0x17a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e34b      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c56:	f7fe f83f 	bl	8004cd8 <HAL_GetREVID>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d817      	bhi.n	8006c94 <HAL_RCC_OscConfig+0x1b8>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	d108      	bne.n	8006c7e <HAL_RCC_OscConfig+0x1a2>
 8006c6c:	4b3d      	ldr	r3, [pc, #244]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006c74:	4a3b      	ldr	r2, [pc, #236]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c7a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c7c:	e07a      	b.n	8006d74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c7e:	4b39      	ldr	r3, [pc, #228]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	031b      	lsls	r3, r3, #12
 8006c8c:	4935      	ldr	r1, [pc, #212]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c92:	e06f      	b.n	8006d74 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c94:	4b33      	ldr	r3, [pc, #204]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	061b      	lsls	r3, r3, #24
 8006ca2:	4930      	ldr	r1, [pc, #192]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ca8:	e064      	b.n	8006d74 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d045      	beq.n	8006d3e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006cb2:	4b2c      	ldr	r3, [pc, #176]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f023 0219 	bic.w	r2, r3, #25
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	4929      	ldr	r1, [pc, #164]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc4:	f7fd ffd8 	bl	8004c78 <HAL_GetTick>
 8006cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ccc:	f7fd ffd4 	bl	8004c78 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e307      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006cde:	4b21      	ldr	r3, [pc, #132]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0f0      	beq.n	8006ccc <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cea:	f7fd fff5 	bl	8004cd8 <HAL_GetREVID>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f241 0203 	movw	r2, #4099	; 0x1003
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d817      	bhi.n	8006d28 <HAL_RCC_OscConfig+0x24c>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b40      	cmp	r3, #64	; 0x40
 8006cfe:	d108      	bne.n	8006d12 <HAL_RCC_OscConfig+0x236>
 8006d00:	4b18      	ldr	r3, [pc, #96]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006d08:	4a16      	ldr	r2, [pc, #88]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d0e:	6053      	str	r3, [r2, #4]
 8006d10:	e030      	b.n	8006d74 <HAL_RCC_OscConfig+0x298>
 8006d12:	4b14      	ldr	r3, [pc, #80]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	031b      	lsls	r3, r3, #12
 8006d20:	4910      	ldr	r1, [pc, #64]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d22:	4313      	orrs	r3, r2
 8006d24:	604b      	str	r3, [r1, #4]
 8006d26:	e025      	b.n	8006d74 <HAL_RCC_OscConfig+0x298>
 8006d28:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	061b      	lsls	r3, r3, #24
 8006d36:	490b      	ldr	r1, [pc, #44]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	604b      	str	r3, [r1, #4]
 8006d3c:	e01a      	b.n	8006d74 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d3e:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a08      	ldr	r2, [pc, #32]	; (8006d64 <HAL_RCC_OscConfig+0x288>)
 8006d44:	f023 0301 	bic.w	r3, r3, #1
 8006d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4a:	f7fd ff95 	bl	8004c78 <HAL_GetTick>
 8006d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d50:	e00a      	b.n	8006d68 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d52:	f7fd ff91 	bl	8004c78 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d903      	bls.n	8006d68 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e2c4      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
 8006d64:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006d68:	4ba4      	ldr	r3, [pc, #656]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1ee      	bne.n	8006d52 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80a9 	beq.w	8006ed4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d82:	4b9e      	ldr	r3, [pc, #632]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d8c:	4b9b      	ldr	r3, [pc, #620]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d90:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d007      	beq.n	8006da8 <HAL_RCC_OscConfig+0x2cc>
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	2b18      	cmp	r3, #24
 8006d9c:	d13a      	bne.n	8006e14 <HAL_RCC_OscConfig+0x338>
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f003 0303 	and.w	r3, r3, #3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d135      	bne.n	8006e14 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006da8:	4b94      	ldr	r3, [pc, #592]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x2e4>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	69db      	ldr	r3, [r3, #28]
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d001      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e296      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dc0:	f7fd ff8a 	bl	8004cd8 <HAL_GetREVID>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	f241 0203 	movw	r2, #4099	; 0x1003
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d817      	bhi.n	8006dfe <HAL_RCC_OscConfig+0x322>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	2b20      	cmp	r3, #32
 8006dd4:	d108      	bne.n	8006de8 <HAL_RCC_OscConfig+0x30c>
 8006dd6:	4b89      	ldr	r3, [pc, #548]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006dde:	4a87      	ldr	r2, [pc, #540]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006de0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006de4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006de6:	e075      	b.n	8006ed4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006de8:	4b84      	ldr	r3, [pc, #528]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a1b      	ldr	r3, [r3, #32]
 8006df4:	069b      	lsls	r3, r3, #26
 8006df6:	4981      	ldr	r1, [pc, #516]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006dfc:	e06a      	b.n	8006ed4 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dfe:	4b7f      	ldr	r3, [pc, #508]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	061b      	lsls	r3, r3, #24
 8006e0c:	497b      	ldr	r1, [pc, #492]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006e12:	e05f      	b.n	8006ed4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d042      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006e1c:	4b77      	ldr	r3, [pc, #476]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a76      	ldr	r2, [pc, #472]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e28:	f7fd ff26 	bl	8004c78 <HAL_GetTick>
 8006e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006e30:	f7fd ff22 	bl	8004c78 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e255      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006e42:	4b6e      	ldr	r3, [pc, #440]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d0f0      	beq.n	8006e30 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006e4e:	f7fd ff43 	bl	8004cd8 <HAL_GetREVID>
 8006e52:	4603      	mov	r3, r0
 8006e54:	f241 0203 	movw	r2, #4099	; 0x1003
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d817      	bhi.n	8006e8c <HAL_RCC_OscConfig+0x3b0>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a1b      	ldr	r3, [r3, #32]
 8006e60:	2b20      	cmp	r3, #32
 8006e62:	d108      	bne.n	8006e76 <HAL_RCC_OscConfig+0x39a>
 8006e64:	4b65      	ldr	r3, [pc, #404]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006e6c:	4a63      	ldr	r2, [pc, #396]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e72:	6053      	str	r3, [r2, #4]
 8006e74:	e02e      	b.n	8006ed4 <HAL_RCC_OscConfig+0x3f8>
 8006e76:	4b61      	ldr	r3, [pc, #388]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a1b      	ldr	r3, [r3, #32]
 8006e82:	069b      	lsls	r3, r3, #26
 8006e84:	495d      	ldr	r1, [pc, #372]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	604b      	str	r3, [r1, #4]
 8006e8a:	e023      	b.n	8006ed4 <HAL_RCC_OscConfig+0x3f8>
 8006e8c:	4b5b      	ldr	r3, [pc, #364]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	061b      	lsls	r3, r3, #24
 8006e9a:	4958      	ldr	r1, [pc, #352]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	60cb      	str	r3, [r1, #12]
 8006ea0:	e018      	b.n	8006ed4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006ea2:	4b56      	ldr	r3, [pc, #344]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a55      	ldr	r2, [pc, #340]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eae:	f7fd fee3 	bl	8004c78 <HAL_GetTick>
 8006eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006eb4:	e008      	b.n	8006ec8 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006eb6:	f7fd fedf 	bl	8004c78 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d901      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	e212      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ec8:	4b4c      	ldr	r3, [pc, #304]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1f0      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d036      	beq.n	8006f4e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d019      	beq.n	8006f1c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ee8:	4b44      	ldr	r3, [pc, #272]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eec:	4a43      	ldr	r2, [pc, #268]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006eee:	f043 0301 	orr.w	r3, r3, #1
 8006ef2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ef4:	f7fd fec0 	bl	8004c78 <HAL_GetTick>
 8006ef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006efa:	e008      	b.n	8006f0e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006efc:	f7fd febc 	bl	8004c78 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d901      	bls.n	8006f0e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e1ef      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006f0e:	4b3b      	ldr	r3, [pc, #236]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d0f0      	beq.n	8006efc <HAL_RCC_OscConfig+0x420>
 8006f1a:	e018      	b.n	8006f4e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f1c:	4b37      	ldr	r3, [pc, #220]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f20:	4a36      	ldr	r2, [pc, #216]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006f22:	f023 0301 	bic.w	r3, r3, #1
 8006f26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f28:	f7fd fea6 	bl	8004c78 <HAL_GetTick>
 8006f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f30:	f7fd fea2 	bl	8004c78 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e1d5      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006f42:	4b2e      	ldr	r3, [pc, #184]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f46:	f003 0302 	and.w	r3, r3, #2
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1f0      	bne.n	8006f30 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d036      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d019      	beq.n	8006f96 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f62:	4b26      	ldr	r3, [pc, #152]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a25      	ldr	r2, [pc, #148]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006f6e:	f7fd fe83 	bl	8004c78 <HAL_GetTick>
 8006f72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f74:	e008      	b.n	8006f88 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006f76:	f7fd fe7f 	bl	8004c78 <HAL_GetTick>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e1b2      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0f0      	beq.n	8006f76 <HAL_RCC_OscConfig+0x49a>
 8006f94:	e018      	b.n	8006fc8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f96:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a18      	ldr	r2, [pc, #96]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fa0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006fa2:	f7fd fe69 	bl	8004c78 <HAL_GetTick>
 8006fa6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fa8:	e008      	b.n	8006fbc <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006faa:	f7fd fe65 	bl	8004c78 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d901      	bls.n	8006fbc <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	e198      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006fbc:	4b0f      	ldr	r3, [pc, #60]	; (8006ffc <HAL_RCC_OscConfig+0x520>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1f0      	bne.n	8006faa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0304 	and.w	r3, r3, #4
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8085 	beq.w	80070e0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006fd6:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <HAL_RCC_OscConfig+0x524>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a09      	ldr	r2, [pc, #36]	; (8007000 <HAL_RCC_OscConfig+0x524>)
 8006fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fe2:	f7fd fe49 	bl	8004c78 <HAL_GetTick>
 8006fe6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe8:	e00c      	b.n	8007004 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006fea:	f7fd fe45 	bl	8004c78 <HAL_GetTick>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	2b64      	cmp	r3, #100	; 0x64
 8006ff6:	d905      	bls.n	8007004 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e178      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
 8006ffc:	58024400 	.word	0x58024400
 8007000:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007004:	4b96      	ldr	r3, [pc, #600]	; (8007260 <HAL_RCC_OscConfig+0x784>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700c:	2b00      	cmp	r3, #0
 800700e:	d0ec      	beq.n	8006fea <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d106      	bne.n	8007026 <HAL_RCC_OscConfig+0x54a>
 8007018:	4b92      	ldr	r3, [pc, #584]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 800701a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800701c:	4a91      	ldr	r2, [pc, #580]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 800701e:	f043 0301 	orr.w	r3, r3, #1
 8007022:	6713      	str	r3, [r2, #112]	; 0x70
 8007024:	e02d      	b.n	8007082 <HAL_RCC_OscConfig+0x5a6>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10c      	bne.n	8007048 <HAL_RCC_OscConfig+0x56c>
 800702e:	4b8d      	ldr	r3, [pc, #564]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	4a8c      	ldr	r2, [pc, #560]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007034:	f023 0301 	bic.w	r3, r3, #1
 8007038:	6713      	str	r3, [r2, #112]	; 0x70
 800703a:	4b8a      	ldr	r3, [pc, #552]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 800703c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703e:	4a89      	ldr	r2, [pc, #548]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007040:	f023 0304 	bic.w	r3, r3, #4
 8007044:	6713      	str	r3, [r2, #112]	; 0x70
 8007046:	e01c      	b.n	8007082 <HAL_RCC_OscConfig+0x5a6>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	2b05      	cmp	r3, #5
 800704e:	d10c      	bne.n	800706a <HAL_RCC_OscConfig+0x58e>
 8007050:	4b84      	ldr	r3, [pc, #528]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007054:	4a83      	ldr	r2, [pc, #524]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007056:	f043 0304 	orr.w	r3, r3, #4
 800705a:	6713      	str	r3, [r2, #112]	; 0x70
 800705c:	4b81      	ldr	r3, [pc, #516]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 800705e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007060:	4a80      	ldr	r2, [pc, #512]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007062:	f043 0301 	orr.w	r3, r3, #1
 8007066:	6713      	str	r3, [r2, #112]	; 0x70
 8007068:	e00b      	b.n	8007082 <HAL_RCC_OscConfig+0x5a6>
 800706a:	4b7e      	ldr	r3, [pc, #504]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 800706c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706e:	4a7d      	ldr	r2, [pc, #500]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007070:	f023 0301 	bic.w	r3, r3, #1
 8007074:	6713      	str	r3, [r2, #112]	; 0x70
 8007076:	4b7b      	ldr	r3, [pc, #492]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707a:	4a7a      	ldr	r2, [pc, #488]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 800707c:	f023 0304 	bic.w	r3, r3, #4
 8007080:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d015      	beq.n	80070b6 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708a:	f7fd fdf5 	bl	8004c78 <HAL_GetTick>
 800708e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007090:	e00a      	b.n	80070a8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007092:	f7fd fdf1 	bl	8004c78 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e122      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80070a8:	4b6e      	ldr	r3, [pc, #440]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80070aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ac:	f003 0302 	and.w	r3, r3, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d0ee      	beq.n	8007092 <HAL_RCC_OscConfig+0x5b6>
 80070b4:	e014      	b.n	80070e0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b6:	f7fd fddf 	bl	8004c78 <HAL_GetTick>
 80070ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070bc:	e00a      	b.n	80070d4 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070be:	f7fd fddb 	bl	8004c78 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e10c      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80070d4:	4b63      	ldr	r3, [pc, #396]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80070d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1ee      	bne.n	80070be <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 8101 	beq.w	80072ec <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80070ea:	4b5e      	ldr	r3, [pc, #376]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070f2:	2b18      	cmp	r3, #24
 80070f4:	f000 80bc 	beq.w	8007270 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	f040 8095 	bne.w	800722c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007102:	4b58      	ldr	r3, [pc, #352]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a57      	ldr	r2, [pc, #348]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007108:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800710c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710e:	f7fd fdb3 	bl	8004c78 <HAL_GetTick>
 8007112:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007114:	e008      	b.n	8007128 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007116:	f7fd fdaf 	bl	8004c78 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b02      	cmp	r3, #2
 8007122:	d901      	bls.n	8007128 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e0e2      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007128:	4b4e      	ldr	r3, [pc, #312]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1f0      	bne.n	8007116 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007134:	4b4b      	ldr	r3, [pc, #300]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007138:	4b4b      	ldr	r3, [pc, #300]	; (8007268 <HAL_RCC_OscConfig+0x78c>)
 800713a:	4013      	ands	r3, r2
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007144:	0112      	lsls	r2, r2, #4
 8007146:	430a      	orrs	r2, r1
 8007148:	4946      	ldr	r1, [pc, #280]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 800714a:	4313      	orrs	r3, r2
 800714c:	628b      	str	r3, [r1, #40]	; 0x28
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	3b01      	subs	r3, #1
 8007154:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800715c:	3b01      	subs	r3, #1
 800715e:	025b      	lsls	r3, r3, #9
 8007160:	b29b      	uxth	r3, r3
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007168:	3b01      	subs	r3, #1
 800716a:	041b      	lsls	r3, r3, #16
 800716c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007176:	3b01      	subs	r3, #1
 8007178:	061b      	lsls	r3, r3, #24
 800717a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800717e:	4939      	ldr	r1, [pc, #228]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007180:	4313      	orrs	r3, r2
 8007182:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007184:	4b37      	ldr	r3, [pc, #220]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	4a36      	ldr	r2, [pc, #216]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 800718a:	f023 0301 	bic.w	r3, r3, #1
 800718e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007190:	4b34      	ldr	r3, [pc, #208]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007192:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007194:	4b35      	ldr	r3, [pc, #212]	; (800726c <HAL_RCC_OscConfig+0x790>)
 8007196:	4013      	ands	r3, r2
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800719c:	00d2      	lsls	r2, r2, #3
 800719e:	4931      	ldr	r1, [pc, #196]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80071a4:	4b2f      	ldr	r3, [pc, #188]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	f023 020c 	bic.w	r2, r3, #12
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	492c      	ldr	r1, [pc, #176]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071b2:	4313      	orrs	r3, r2
 80071b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80071b6:	4b2b      	ldr	r3, [pc, #172]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ba:	f023 0202 	bic.w	r2, r3, #2
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071c2:	4928      	ldr	r1, [pc, #160]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071c8:	4b26      	ldr	r3, [pc, #152]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071cc:	4a25      	ldr	r2, [pc, #148]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071d4:	4b23      	ldr	r3, [pc, #140]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d8:	4a22      	ldr	r2, [pc, #136]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80071e0:	4b20      	ldr	r3, [pc, #128]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	4a1f      	ldr	r2, [pc, #124]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80071ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80071ec:	4b1d      	ldr	r3, [pc, #116]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f0:	4a1c      	ldr	r2, [pc, #112]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071f2:	f043 0301 	orr.w	r3, r3, #1
 80071f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071f8:	4b1a      	ldr	r3, [pc, #104]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a19      	ldr	r2, [pc, #100]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 80071fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007204:	f7fd fd38 	bl	8004c78 <HAL_GetTick>
 8007208:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800720c:	f7fd fd34 	bl	8004c78 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e067      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800721e:	4b11      	ldr	r3, [pc, #68]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0f0      	beq.n	800720c <HAL_RCC_OscConfig+0x730>
 800722a:	e05f      	b.n	80072ec <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800722c:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a0c      	ldr	r2, [pc, #48]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007236:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007238:	f7fd fd1e 	bl	8004c78 <HAL_GetTick>
 800723c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007240:	f7fd fd1a 	bl	8004c78 <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e04d      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007252:	4b04      	ldr	r3, [pc, #16]	; (8007264 <HAL_RCC_OscConfig+0x788>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1f0      	bne.n	8007240 <HAL_RCC_OscConfig+0x764>
 800725e:	e045      	b.n	80072ec <HAL_RCC_OscConfig+0x810>
 8007260:	58024800 	.word	0x58024800
 8007264:	58024400 	.word	0x58024400
 8007268:	fffffc0c 	.word	0xfffffc0c
 800726c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007270:	4b21      	ldr	r3, [pc, #132]	; (80072f8 <HAL_RCC_OscConfig+0x81c>)
 8007272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007274:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007276:	4b20      	ldr	r3, [pc, #128]	; (80072f8 <HAL_RCC_OscConfig+0x81c>)
 8007278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007280:	2b01      	cmp	r3, #1
 8007282:	d031      	beq.n	80072e8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f003 0203 	and.w	r2, r3, #3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800728e:	429a      	cmp	r2, r3
 8007290:	d12a      	bne.n	80072e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	091b      	lsrs	r3, r3, #4
 8007296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800729e:	429a      	cmp	r2, r3
 80072a0:	d122      	bne.n	80072e8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d11a      	bne.n	80072e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	0a5b      	lsrs	r3, r3, #9
 80072b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d111      	bne.n	80072e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	0c1b      	lsrs	r3, r3, #16
 80072c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d108      	bne.n	80072e8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	0e1b      	lsrs	r3, r3, #24
 80072da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d001      	beq.n	80072ec <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e000      	b.n	80072ee <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3730      	adds	r7, #48	; 0x30
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	58024400 	.word	0x58024400

080072fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e19c      	b.n	800764a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007310:	4b8a      	ldr	r3, [pc, #552]	; (800753c <HAL_RCC_ClockConfig+0x240>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	429a      	cmp	r2, r3
 800731c:	d910      	bls.n	8007340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800731e:	4b87      	ldr	r3, [pc, #540]	; (800753c <HAL_RCC_ClockConfig+0x240>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f023 020f 	bic.w	r2, r3, #15
 8007326:	4985      	ldr	r1, [pc, #532]	; (800753c <HAL_RCC_ClockConfig+0x240>)
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	4313      	orrs	r3, r2
 800732c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800732e:	4b83      	ldr	r3, [pc, #524]	; (800753c <HAL_RCC_ClockConfig+0x240>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	429a      	cmp	r2, r3
 800733a:	d001      	beq.n	8007340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e184      	b.n	800764a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 0304 	and.w	r3, r3, #4
 8007348:	2b00      	cmp	r3, #0
 800734a:	d010      	beq.n	800736e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	4b7b      	ldr	r3, [pc, #492]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 8007352:	699b      	ldr	r3, [r3, #24]
 8007354:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007358:	429a      	cmp	r2, r3
 800735a:	d908      	bls.n	800736e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800735c:	4b78      	ldr	r3, [pc, #480]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	4975      	ldr	r1, [pc, #468]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 800736a:	4313      	orrs	r3, r2
 800736c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 0308 	and.w	r3, r3, #8
 8007376:	2b00      	cmp	r3, #0
 8007378:	d010      	beq.n	800739c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	695a      	ldr	r2, [r3, #20]
 800737e:	4b70      	ldr	r3, [pc, #448]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007386:	429a      	cmp	r2, r3
 8007388:	d908      	bls.n	800739c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800738a:	4b6d      	ldr	r3, [pc, #436]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	496a      	ldr	r1, [pc, #424]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 8007398:	4313      	orrs	r3, r2
 800739a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d010      	beq.n	80073ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	699a      	ldr	r2, [r3, #24]
 80073ac:	4b64      	ldr	r3, [pc, #400]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d908      	bls.n	80073ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073b8:	4b61      	ldr	r3, [pc, #388]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	495e      	ldr	r1, [pc, #376]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d010      	beq.n	80073f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	69da      	ldr	r2, [r3, #28]
 80073da:	4b59      	ldr	r3, [pc, #356]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d908      	bls.n	80073f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80073e6:	4b56      	ldr	r3, [pc, #344]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	69db      	ldr	r3, [r3, #28]
 80073f2:	4953      	ldr	r1, [pc, #332]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0302 	and.w	r3, r3, #2
 8007400:	2b00      	cmp	r3, #0
 8007402:	d010      	beq.n	8007426 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	4b4d      	ldr	r3, [pc, #308]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	429a      	cmp	r2, r3
 8007412:	d908      	bls.n	8007426 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007414:	4b4a      	ldr	r3, [pc, #296]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	f023 020f 	bic.w	r2, r3, #15
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68db      	ldr	r3, [r3, #12]
 8007420:	4947      	ldr	r1, [pc, #284]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 8007422:	4313      	orrs	r3, r2
 8007424:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d055      	beq.n	80074de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007432:	4b43      	ldr	r3, [pc, #268]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	4940      	ldr	r1, [pc, #256]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 8007440:	4313      	orrs	r3, r2
 8007442:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d107      	bne.n	800745c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800744c:	4b3c      	ldr	r3, [pc, #240]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d121      	bne.n	800749c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	e0f6      	b.n	800764a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d107      	bne.n	8007474 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007464:	4b36      	ldr	r3, [pc, #216]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d115      	bne.n	800749c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e0ea      	b.n	800764a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d107      	bne.n	800748c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800747c:	4b30      	ldr	r3, [pc, #192]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007484:	2b00      	cmp	r3, #0
 8007486:	d109      	bne.n	800749c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e0de      	b.n	800764a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800748c:	4b2c      	ldr	r3, [pc, #176]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e0d6      	b.n	800764a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800749c:	4b28      	ldr	r3, [pc, #160]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	f023 0207 	bic.w	r2, r3, #7
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	4925      	ldr	r1, [pc, #148]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ae:	f7fd fbe3 	bl	8004c78 <HAL_GetTick>
 80074b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074b4:	e00a      	b.n	80074cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074b6:	f7fd fbdf 	bl	8004c78 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d901      	bls.n	80074cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e0be      	b.n	800764a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074cc:	4b1c      	ldr	r3, [pc, #112]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 80074ce:	691b      	ldr	r3, [r3, #16]
 80074d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	429a      	cmp	r2, r3
 80074dc:	d1eb      	bne.n	80074b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d010      	beq.n	800750c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68da      	ldr	r2, [r3, #12]
 80074ee:	4b14      	ldr	r3, [pc, #80]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	f003 030f 	and.w	r3, r3, #15
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d208      	bcs.n	800750c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074fa:	4b11      	ldr	r3, [pc, #68]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	f023 020f 	bic.w	r2, r3, #15
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	490e      	ldr	r1, [pc, #56]	; (8007540 <HAL_RCC_ClockConfig+0x244>)
 8007508:	4313      	orrs	r3, r2
 800750a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800750c:	4b0b      	ldr	r3, [pc, #44]	; (800753c <HAL_RCC_ClockConfig+0x240>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d214      	bcs.n	8007544 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800751a:	4b08      	ldr	r3, [pc, #32]	; (800753c <HAL_RCC_ClockConfig+0x240>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f023 020f 	bic.w	r2, r3, #15
 8007522:	4906      	ldr	r1, [pc, #24]	; (800753c <HAL_RCC_ClockConfig+0x240>)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	4313      	orrs	r3, r2
 8007528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800752a:	4b04      	ldr	r3, [pc, #16]	; (800753c <HAL_RCC_ClockConfig+0x240>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d005      	beq.n	8007544 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e086      	b.n	800764a <HAL_RCC_ClockConfig+0x34e>
 800753c:	52002000 	.word	0x52002000
 8007540:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	d010      	beq.n	8007572 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	4b3f      	ldr	r3, [pc, #252]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 8007556:	699b      	ldr	r3, [r3, #24]
 8007558:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800755c:	429a      	cmp	r2, r3
 800755e:	d208      	bcs.n	8007572 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007560:	4b3c      	ldr	r3, [pc, #240]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	4939      	ldr	r1, [pc, #228]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 800756e:	4313      	orrs	r3, r2
 8007570:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d010      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	695a      	ldr	r2, [r3, #20]
 8007582:	4b34      	ldr	r3, [pc, #208]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 8007584:	69db      	ldr	r3, [r3, #28]
 8007586:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800758a:	429a      	cmp	r2, r3
 800758c:	d208      	bcs.n	80075a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800758e:	4b31      	ldr	r3, [pc, #196]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	492e      	ldr	r1, [pc, #184]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 800759c:	4313      	orrs	r3, r2
 800759e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0310 	and.w	r3, r3, #16
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d010      	beq.n	80075ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699a      	ldr	r2, [r3, #24]
 80075b0:	4b28      	ldr	r3, [pc, #160]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 80075b2:	69db      	ldr	r3, [r3, #28]
 80075b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d208      	bcs.n	80075ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80075bc:	4b25      	ldr	r3, [pc, #148]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 80075be:	69db      	ldr	r3, [r3, #28]
 80075c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	4922      	ldr	r1, [pc, #136]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0320 	and.w	r3, r3, #32
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d010      	beq.n	80075fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69da      	ldr	r2, [r3, #28]
 80075de:	4b1d      	ldr	r3, [pc, #116]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d208      	bcs.n	80075fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80075ea:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	4917      	ldr	r1, [pc, #92]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80075fc:	f000 f834 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8007600:	4602      	mov	r2, r0
 8007602:	4b14      	ldr	r3, [pc, #80]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	0a1b      	lsrs	r3, r3, #8
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	4912      	ldr	r1, [pc, #72]	; (8007658 <HAL_RCC_ClockConfig+0x35c>)
 800760e:	5ccb      	ldrb	r3, [r1, r3]
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
 8007618:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800761a:	4b0e      	ldr	r3, [pc, #56]	; (8007654 <HAL_RCC_ClockConfig+0x358>)
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	f003 030f 	and.w	r3, r3, #15
 8007622:	4a0d      	ldr	r2, [pc, #52]	; (8007658 <HAL_RCC_ClockConfig+0x35c>)
 8007624:	5cd3      	ldrb	r3, [r2, r3]
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	fa22 f303 	lsr.w	r3, r2, r3
 8007630:	4a0a      	ldr	r2, [pc, #40]	; (800765c <HAL_RCC_ClockConfig+0x360>)
 8007632:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007634:	4a0a      	ldr	r2, [pc, #40]	; (8007660 <HAL_RCC_ClockConfig+0x364>)
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800763a:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <HAL_RCC_ClockConfig+0x368>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4618      	mov	r0, r3
 8007640:	f7fd f8b8 	bl	80047b4 <HAL_InitTick>
 8007644:	4603      	mov	r3, r0
 8007646:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	58024400 	.word	0x58024400
 8007658:	0800af80 	.word	0x0800af80
 800765c:	2000180c 	.word	0x2000180c
 8007660:	20001808 	.word	0x20001808
 8007664:	20001800 	.word	0x20001800

08007668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007668:	b480      	push	{r7}
 800766a:	b089      	sub	sp, #36	; 0x24
 800766c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800766e:	4bb3      	ldr	r3, [pc, #716]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007676:	2b18      	cmp	r3, #24
 8007678:	f200 8155 	bhi.w	8007926 <HAL_RCC_GetSysClockFreq+0x2be>
 800767c:	a201      	add	r2, pc, #4	; (adr r2, 8007684 <HAL_RCC_GetSysClockFreq+0x1c>)
 800767e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007682:	bf00      	nop
 8007684:	080076e9 	.word	0x080076e9
 8007688:	08007927 	.word	0x08007927
 800768c:	08007927 	.word	0x08007927
 8007690:	08007927 	.word	0x08007927
 8007694:	08007927 	.word	0x08007927
 8007698:	08007927 	.word	0x08007927
 800769c:	08007927 	.word	0x08007927
 80076a0:	08007927 	.word	0x08007927
 80076a4:	0800770f 	.word	0x0800770f
 80076a8:	08007927 	.word	0x08007927
 80076ac:	08007927 	.word	0x08007927
 80076b0:	08007927 	.word	0x08007927
 80076b4:	08007927 	.word	0x08007927
 80076b8:	08007927 	.word	0x08007927
 80076bc:	08007927 	.word	0x08007927
 80076c0:	08007927 	.word	0x08007927
 80076c4:	08007715 	.word	0x08007715
 80076c8:	08007927 	.word	0x08007927
 80076cc:	08007927 	.word	0x08007927
 80076d0:	08007927 	.word	0x08007927
 80076d4:	08007927 	.word	0x08007927
 80076d8:	08007927 	.word	0x08007927
 80076dc:	08007927 	.word	0x08007927
 80076e0:	08007927 	.word	0x08007927
 80076e4:	0800771b 	.word	0x0800771b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076e8:	4b94      	ldr	r3, [pc, #592]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f003 0320 	and.w	r3, r3, #32
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d009      	beq.n	8007708 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80076f4:	4b91      	ldr	r3, [pc, #580]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	08db      	lsrs	r3, r3, #3
 80076fa:	f003 0303 	and.w	r3, r3, #3
 80076fe:	4a90      	ldr	r2, [pc, #576]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007700:	fa22 f303 	lsr.w	r3, r2, r3
 8007704:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007706:	e111      	b.n	800792c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007708:	4b8d      	ldr	r3, [pc, #564]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800770a:	61bb      	str	r3, [r7, #24]
    break;
 800770c:	e10e      	b.n	800792c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800770e:	4b8d      	ldr	r3, [pc, #564]	; (8007944 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007710:	61bb      	str	r3, [r7, #24]
    break;
 8007712:	e10b      	b.n	800792c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007714:	4b8c      	ldr	r3, [pc, #560]	; (8007948 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007716:	61bb      	str	r3, [r7, #24]
    break;
 8007718:	e108      	b.n	800792c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800771a:	4b88      	ldr	r3, [pc, #544]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771e:	f003 0303 	and.w	r3, r3, #3
 8007722:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007724:	4b85      	ldr	r3, [pc, #532]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	091b      	lsrs	r3, r3, #4
 800772a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800772e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007730:	4b82      	ldr	r3, [pc, #520]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800773a:	4b80      	ldr	r3, [pc, #512]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800773c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773e:	08db      	lsrs	r3, r3, #3
 8007740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	fb02 f303 	mul.w	r3, r2, r3
 800774a:	ee07 3a90 	vmov	s15, r3
 800774e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007752:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 80e1 	beq.w	8007920 <HAL_RCC_GetSysClockFreq+0x2b8>
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2b02      	cmp	r3, #2
 8007762:	f000 8083 	beq.w	800786c <HAL_RCC_GetSysClockFreq+0x204>
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b02      	cmp	r3, #2
 800776a:	f200 80a1 	bhi.w	80078b0 <HAL_RCC_GetSysClockFreq+0x248>
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d003      	beq.n	800777c <HAL_RCC_GetSysClockFreq+0x114>
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d056      	beq.n	8007828 <HAL_RCC_GetSysClockFreq+0x1c0>
 800777a:	e099      	b.n	80078b0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800777c:	4b6f      	ldr	r3, [pc, #444]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f003 0320 	and.w	r3, r3, #32
 8007784:	2b00      	cmp	r3, #0
 8007786:	d02d      	beq.n	80077e4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007788:	4b6c      	ldr	r3, [pc, #432]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	08db      	lsrs	r3, r3, #3
 800778e:	f003 0303 	and.w	r3, r3, #3
 8007792:	4a6b      	ldr	r2, [pc, #428]	; (8007940 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007794:	fa22 f303 	lsr.w	r3, r2, r3
 8007798:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	ee07 3a90 	vmov	s15, r3
 80077a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b2:	4b62      	ldr	r3, [pc, #392]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80077c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800794c <HAL_RCC_GetSysClockFreq+0x2e4>
 80077ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80077e2:	e087      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007950 <HAL_RCC_GetSysClockFreq+0x2e8>
 80077f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f6:	4b51      	ldr	r3, [pc, #324]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80077f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007806:	ed97 6a02 	vldr	s12, [r7, #8]
 800780a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800794c <HAL_RCC_GetSysClockFreq+0x2e4>
 800780e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800781e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007826:	e065      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007832:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007954 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783a:	4b40      	ldr	r3, [pc, #256]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784a:	ed97 6a02 	vldr	s12, [r7, #8]
 800784e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800794c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800785e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007866:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800786a:	e043      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007876:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007958 <HAL_RCC_GetSysClockFreq+0x2f0>
 800787a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787e:	4b2f      	ldr	r3, [pc, #188]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007892:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800794c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078ae:	e021      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007954 <HAL_RCC_GetSysClockFreq+0x2ec>
 80078be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c2:	4b1e      	ldr	r3, [pc, #120]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80078d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800794c <HAL_RCC_GetSysClockFreq+0x2e4>
 80078da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078f2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80078f4:	4b11      	ldr	r3, [pc, #68]	; (800793c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	0a5b      	lsrs	r3, r3, #9
 80078fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fe:	3301      	adds	r3, #1
 8007900:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800790c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007914:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007918:	ee17 3a90 	vmov	r3, s15
 800791c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800791e:	e005      	b.n	800792c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007920:	2300      	movs	r3, #0
 8007922:	61bb      	str	r3, [r7, #24]
    break;
 8007924:	e002      	b.n	800792c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007926:	4b07      	ldr	r3, [pc, #28]	; (8007944 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007928:	61bb      	str	r3, [r7, #24]
    break;
 800792a:	bf00      	nop
  }

  return sysclockfreq;
 800792c:	69bb      	ldr	r3, [r7, #24]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3724      	adds	r7, #36	; 0x24
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	58024400 	.word	0x58024400
 8007940:	03d09000 	.word	0x03d09000
 8007944:	003d0900 	.word	0x003d0900
 8007948:	007a1200 	.word	0x007a1200
 800794c:	46000000 	.word	0x46000000
 8007950:	4c742400 	.word	0x4c742400
 8007954:	4a742400 	.word	0x4a742400
 8007958:	4af42400 	.word	0x4af42400

0800795c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007962:	f7ff fe81 	bl	8007668 <HAL_RCC_GetSysClockFreq>
 8007966:	4602      	mov	r2, r0
 8007968:	4b10      	ldr	r3, [pc, #64]	; (80079ac <HAL_RCC_GetHCLKFreq+0x50>)
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	0a1b      	lsrs	r3, r3, #8
 800796e:	f003 030f 	and.w	r3, r3, #15
 8007972:	490f      	ldr	r1, [pc, #60]	; (80079b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007974:	5ccb      	ldrb	r3, [r1, r3]
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	fa22 f303 	lsr.w	r3, r2, r3
 800797e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007980:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <HAL_RCC_GetHCLKFreq+0x50>)
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	f003 030f 	and.w	r3, r3, #15
 8007988:	4a09      	ldr	r2, [pc, #36]	; (80079b0 <HAL_RCC_GetHCLKFreq+0x54>)
 800798a:	5cd3      	ldrb	r3, [r2, r3]
 800798c:	f003 031f 	and.w	r3, r3, #31
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	fa22 f303 	lsr.w	r3, r2, r3
 8007996:	4a07      	ldr	r2, [pc, #28]	; (80079b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007998:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800799a:	4a07      	ldr	r2, [pc, #28]	; (80079b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80079a0:	4b04      	ldr	r3, [pc, #16]	; (80079b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80079a2:	681b      	ldr	r3, [r3, #0]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	58024400 	.word	0x58024400
 80079b0:	0800af80 	.word	0x0800af80
 80079b4:	2000180c 	.word	0x2000180c
 80079b8:	20001808 	.word	0x20001808

080079bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80079c0:	f7ff ffcc 	bl	800795c <HAL_RCC_GetHCLKFreq>
 80079c4:	4602      	mov	r2, r0
 80079c6:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	091b      	lsrs	r3, r3, #4
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	4904      	ldr	r1, [pc, #16]	; (80079e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079d2:	5ccb      	ldrb	r3, [r1, r3]
 80079d4:	f003 031f 	and.w	r3, r3, #31
 80079d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80079dc:	4618      	mov	r0, r3
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	58024400 	.word	0x58024400
 80079e4:	0800af80 	.word	0x0800af80

080079e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80079ec:	f7ff ffb6 	bl	800795c <HAL_RCC_GetHCLKFreq>
 80079f0:	4602      	mov	r2, r0
 80079f2:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	0a1b      	lsrs	r3, r3, #8
 80079f8:	f003 0307 	and.w	r3, r3, #7
 80079fc:	4904      	ldr	r1, [pc, #16]	; (8007a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079fe:	5ccb      	ldrb	r3, [r1, r3]
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	58024400 	.word	0x58024400
 8007a10:	0800af80 	.word	0x0800af80

08007a14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b083      	sub	sp, #12
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	223f      	movs	r2, #63	; 0x3f
 8007a22:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a24:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <HAL_RCC_GetClockConfig+0x7c>)
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	f003 0207 	and.w	r2, r3, #7
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007a30:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <HAL_RCC_GetClockConfig+0x7c>)
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007a3c:	4b14      	ldr	r3, [pc, #80]	; (8007a90 <HAL_RCC_GetClockConfig+0x7c>)
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	f003 020f 	and.w	r2, r3, #15
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007a48:	4b11      	ldr	r3, [pc, #68]	; (8007a90 <HAL_RCC_GetClockConfig+0x7c>)
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007a54:	4b0e      	ldr	r3, [pc, #56]	; (8007a90 <HAL_RCC_GetClockConfig+0x7c>)
 8007a56:	69db      	ldr	r3, [r3, #28]
 8007a58:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007a60:	4b0b      	ldr	r3, [pc, #44]	; (8007a90 <HAL_RCC_GetClockConfig+0x7c>)
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007a6c:	4b08      	ldr	r3, [pc, #32]	; (8007a90 <HAL_RCC_GetClockConfig+0x7c>)
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a78:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <HAL_RCC_GetClockConfig+0x80>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 020f 	and.w	r2, r3, #15
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	601a      	str	r2, [r3, #0]
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	58024400 	.word	0x58024400
 8007a94:	52002000 	.word	0x52002000

08007a98 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d03f      	beq.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ab8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007abc:	d02a      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007abe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ac2:	d824      	bhi.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ac8:	d018      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ace:	d81e      	bhi.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ad4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ad8:	d007      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007ada:	e018      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007adc:	4bab      	ldr	r3, [pc, #684]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	4aaa      	ldr	r2, [pc, #680]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007ae8:	e015      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3304      	adds	r3, #4
 8007aee:	2102      	movs	r1, #2
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 f9bf 	bl	8008e74 <RCCEx_PLL2_Config>
 8007af6:	4603      	mov	r3, r0
 8007af8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007afa:	e00c      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3324      	adds	r3, #36	; 0x24
 8007b00:	2102      	movs	r1, #2
 8007b02:	4618      	mov	r0, r3
 8007b04:	f001 fa68 	bl	8008fd8 <RCCEx_PLL3_Config>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007b0c:	e003      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	75fb      	strb	r3, [r7, #23]
      break;
 8007b12:	e000      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007b14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d109      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007b1c:	4b9b      	ldr	r3, [pc, #620]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b28:	4998      	ldr	r1, [pc, #608]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	650b      	str	r3, [r1, #80]	; 0x50
 8007b2e:	e001      	b.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b30:	7dfb      	ldrb	r3, [r7, #23]
 8007b32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d03d      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	d826      	bhi.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007b48:	a201      	add	r2, pc, #4	; (adr r2, 8007b50 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4e:	bf00      	nop
 8007b50:	08007b65 	.word	0x08007b65
 8007b54:	08007b73 	.word	0x08007b73
 8007b58:	08007b85 	.word	0x08007b85
 8007b5c:	08007b9d 	.word	0x08007b9d
 8007b60:	08007b9d 	.word	0x08007b9d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b64:	4b89      	ldr	r3, [pc, #548]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	4a88      	ldr	r2, [pc, #544]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007b6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b70:	e015      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3304      	adds	r3, #4
 8007b76:	2100      	movs	r1, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f001 f97b 	bl	8008e74 <RCCEx_PLL2_Config>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b82:	e00c      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3324      	adds	r3, #36	; 0x24
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f001 fa24 	bl	8008fd8 <RCCEx_PLL3_Config>
 8007b90:	4603      	mov	r3, r0
 8007b92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b94:	e003      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	75fb      	strb	r3, [r7, #23]
      break;
 8007b9a:	e000      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d109      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ba4:	4b79      	ldr	r3, [pc, #484]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba8:	f023 0207 	bic.w	r2, r3, #7
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb0:	4976      	ldr	r1, [pc, #472]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	650b      	str	r3, [r1, #80]	; 0x50
 8007bb6:	e001      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d042      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd0:	d02b      	beq.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd6:	d825      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007bd8:	2bc0      	cmp	r3, #192	; 0xc0
 8007bda:	d028      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007bdc:	2bc0      	cmp	r3, #192	; 0xc0
 8007bde:	d821      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007be0:	2b80      	cmp	r3, #128	; 0x80
 8007be2:	d016      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007be4:	2b80      	cmp	r3, #128	; 0x80
 8007be6:	d81d      	bhi.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007bec:	2b40      	cmp	r3, #64	; 0x40
 8007bee:	d007      	beq.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007bf0:	e018      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bf2:	4b66      	ldr	r3, [pc, #408]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf6:	4a65      	ldr	r2, [pc, #404]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007bf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007bfe:	e017      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3304      	adds	r3, #4
 8007c04:	2100      	movs	r1, #0
 8007c06:	4618      	mov	r0, r3
 8007c08:	f001 f934 	bl	8008e74 <RCCEx_PLL2_Config>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c10:	e00e      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	3324      	adds	r3, #36	; 0x24
 8007c16:	2100      	movs	r1, #0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f001 f9dd 	bl	8008fd8 <RCCEx_PLL3_Config>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007c22:	e005      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	75fb      	strb	r3, [r7, #23]
      break;
 8007c28:	e002      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d109      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007c36:	4b55      	ldr	r3, [pc, #340]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c42:	4952      	ldr	r1, [pc, #328]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	650b      	str	r3, [r1, #80]	; 0x50
 8007c48:	e001      	b.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d049      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007c60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c64:	d030      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007c66:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c6a:	d82a      	bhi.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007c6c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c70:	d02c      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007c72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007c76:	d824      	bhi.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007c78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c7c:	d018      	beq.n	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007c7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c82:	d81e      	bhi.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007c88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007c8c:	d007      	beq.n	8007c9e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007c8e:	e018      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c90:	4b3e      	ldr	r3, [pc, #248]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c94:	4a3d      	ldr	r2, [pc, #244]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007c9c:	e017      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f001 f8e5 	bl	8008e74 <RCCEx_PLL2_Config>
 8007caa:	4603      	mov	r3, r0
 8007cac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007cae:	e00e      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3324      	adds	r3, #36	; 0x24
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 f98e 	bl	8008fd8 <RCCEx_PLL3_Config>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007cc0:	e005      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc6:	e002      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007cc8:	bf00      	nop
 8007cca:	e000      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007cd4:	4b2d      	ldr	r3, [pc, #180]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007ce2:	492a      	ldr	r1, [pc, #168]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	658b      	str	r3, [r1, #88]	; 0x58
 8007ce8:	e001      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
 8007cec:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d04c      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d04:	d030      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007d06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d0a:	d82a      	bhi.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d10:	d02c      	beq.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007d12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007d16:	d824      	bhi.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d1c:	d018      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d22:	d81e      	bhi.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d003      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d2c:	d007      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007d2e:	e018      	b.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d30:	4b16      	ldr	r3, [pc, #88]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d3c:	e017      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3304      	adds	r3, #4
 8007d42:	2100      	movs	r1, #0
 8007d44:	4618      	mov	r0, r3
 8007d46:	f001 f895 	bl	8008e74 <RCCEx_PLL2_Config>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007d4e:	e00e      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3324      	adds	r3, #36	; 0x24
 8007d54:	2100      	movs	r1, #0
 8007d56:	4618      	mov	r0, r3
 8007d58:	f001 f93e 	bl	8008fd8 <RCCEx_PLL3_Config>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007d60:	e005      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	75fb      	strb	r3, [r7, #23]
      break;
 8007d66:	e002      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007d68:	bf00      	nop
 8007d6a:	e000      	b.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10d      	bne.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d78:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007d82:	4902      	ldr	r1, [pc, #8]	; (8007d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	658b      	str	r3, [r1, #88]	; 0x58
 8007d88:	e004      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007d8a:	bf00      	nop
 8007d8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d90:	7dfb      	ldrb	r3, [r7, #23]
 8007d92:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d032      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da4:	2b30      	cmp	r3, #48	; 0x30
 8007da6:	d01c      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007da8:	2b30      	cmp	r3, #48	; 0x30
 8007daa:	d817      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007dac:	2b20      	cmp	r3, #32
 8007dae:	d00c      	beq.n	8007dca <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d813      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d016      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007db8:	2b10      	cmp	r3, #16
 8007dba:	d10f      	bne.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dbc:	4baf      	ldr	r3, [pc, #700]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	4aae      	ldr	r2, [pc, #696]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007dc8:	e00e      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	2102      	movs	r1, #2
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f001 f84f 	bl	8008e74 <RCCEx_PLL2_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007dda:	e005      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
      break;
 8007de0:	e002      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007de2:	bf00      	nop
 8007de4:	e000      	b.n	8007de8 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007de6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de8:	7dfb      	ldrb	r3, [r7, #23]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d109      	bne.n	8007e02 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007dee:	4ba3      	ldr	r3, [pc, #652]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007df2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dfa:	49a0      	ldr	r1, [pc, #640]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e00:	e001      	b.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e02:	7dfb      	ldrb	r3, [r7, #23]
 8007e04:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d047      	beq.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e1a:	d030      	beq.n	8007e7e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8007e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e20:	d82a      	bhi.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e26:	d02c      	beq.n	8007e82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007e28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e2c:	d824      	bhi.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e32:	d018      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8007e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e38:	d81e      	bhi.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e42:	d007      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8007e44:	e018      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e46:	4b8d      	ldr	r3, [pc, #564]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4a:	4a8c      	ldr	r2, [pc, #560]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e52:	e017      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3304      	adds	r3, #4
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 f80a 	bl	8008e74 <RCCEx_PLL2_Config>
 8007e60:	4603      	mov	r3, r0
 8007e62:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e64:	e00e      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3324      	adds	r3, #36	; 0x24
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f001 f8b3 	bl	8008fd8 <RCCEx_PLL3_Config>
 8007e72:	4603      	mov	r3, r0
 8007e74:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007e76:	e005      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e7c:	e002      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007e7e:	bf00      	nop
 8007e80:	e000      	b.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007e82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d109      	bne.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007e8a:	4b7c      	ldr	r3, [pc, #496]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e8e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e96:	4979      	ldr	r1, [pc, #484]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	650b      	str	r3, [r1, #80]	; 0x50
 8007e9c:	e001      	b.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d049      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007eb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007eb6:	d02e      	beq.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ebc:	d828      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007ebe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ec2:	d02a      	beq.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007ec4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ec8:	d822      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007eca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ece:	d026      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007ed0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ed4:	d81c      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007ed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eda:	d010      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x466>
 8007edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ee0:	d816      	bhi.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d01d      	beq.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eea:	d111      	bne.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	2101      	movs	r1, #1
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f000 ffbe 	bl	8008e74 <RCCEx_PLL2_Config>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007efc:	e012      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3324      	adds	r3, #36	; 0x24
 8007f02:	2101      	movs	r1, #1
 8007f04:	4618      	mov	r0, r3
 8007f06:	f001 f867 	bl	8008fd8 <RCCEx_PLL3_Config>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007f0e:	e009      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75fb      	strb	r3, [r7, #23]
      break;
 8007f14:	e006      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f16:	bf00      	nop
 8007f18:	e004      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f1a:	bf00      	nop
 8007f1c:	e002      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f1e:	bf00      	nop
 8007f20:	e000      	b.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8007f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d109      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007f2a:	4b54      	ldr	r3, [pc, #336]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f36:	4951      	ldr	r1, [pc, #324]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	650b      	str	r3, [r1, #80]	; 0x50
 8007f3c:	e001      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3e:	7dfb      	ldrb	r3, [r7, #23]
 8007f40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d04b      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007f54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f58:	d02e      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f5e:	d828      	bhi.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f64:	d02a      	beq.n	8007fbc <HAL_RCCEx_PeriphCLKConfig+0x524>
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6a:	d822      	bhi.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007f6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f70:	d026      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007f72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f76:	d81c      	bhi.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f7c:	d010      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f82:	d816      	bhi.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d01d      	beq.n	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f8c:	d111      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	3304      	adds	r3, #4
 8007f92:	2101      	movs	r1, #1
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 ff6d 	bl	8008e74 <RCCEx_PLL2_Config>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007f9e:	e012      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3324      	adds	r3, #36	; 0x24
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f001 f816 	bl	8008fd8 <RCCEx_PLL3_Config>
 8007fac:	4603      	mov	r3, r0
 8007fae:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007fb0:	e009      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb6:	e006      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007fb8:	bf00      	nop
 8007fba:	e004      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007fbc:	bf00      	nop
 8007fbe:	e002      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007fc0:	bf00      	nop
 8007fc2:	e000      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d10a      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007fcc:	4b2b      	ldr	r3, [pc, #172]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007fda:	4928      	ldr	r1, [pc, #160]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	658b      	str	r3, [r1, #88]	; 0x58
 8007fe0:	e001      	b.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d02f      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ffa:	d00e      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8007ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008000:	d814      	bhi.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d015      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800800a:	d10f      	bne.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800800c:	4b1b      	ldr	r3, [pc, #108]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	4a1a      	ldr	r2, [pc, #104]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008018:	e00c      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3304      	adds	r3, #4
 800801e:	2101      	movs	r1, #1
 8008020:	4618      	mov	r0, r3
 8008022:	f000 ff27 	bl	8008e74 <RCCEx_PLL2_Config>
 8008026:	4603      	mov	r3, r0
 8008028:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800802a:	e003      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	75fb      	strb	r3, [r7, #23]
      break;
 8008030:	e000      	b.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800803a:	4b10      	ldr	r3, [pc, #64]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800803c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008046:	490d      	ldr	r1, [pc, #52]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008048:	4313      	orrs	r3, r2
 800804a:	650b      	str	r3, [r1, #80]	; 0x50
 800804c:	e001      	b.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d033      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008062:	2b03      	cmp	r3, #3
 8008064:	d81c      	bhi.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008066:	a201      	add	r2, pc, #4	; (adr r2, 800806c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8008068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806c:	080080a7 	.word	0x080080a7
 8008070:	08008081 	.word	0x08008081
 8008074:	0800808f 	.word	0x0800808f
 8008078:	080080a7 	.word	0x080080a7
 800807c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008080:	4bb8      	ldr	r3, [pc, #736]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008084:	4ab7      	ldr	r2, [pc, #732]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800808a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800808c:	e00c      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	3304      	adds	r3, #4
 8008092:	2102      	movs	r1, #2
 8008094:	4618      	mov	r0, r3
 8008096:	f000 feed 	bl	8008e74 <RCCEx_PLL2_Config>
 800809a:	4603      	mov	r3, r0
 800809c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800809e:	e003      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	75fb      	strb	r3, [r7, #23]
      break;
 80080a4:	e000      	b.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80080a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80080ae:	4bad      	ldr	r3, [pc, #692]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080b2:	f023 0203 	bic.w	r2, r3, #3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ba:	49aa      	ldr	r1, [pc, #680]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080c0:	e001      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	f000 8086 	beq.w	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80080d4:	4ba4      	ldr	r3, [pc, #656]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4aa3      	ldr	r2, [pc, #652]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80080da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80080e0:	f7fc fdca 	bl	8004c78 <HAL_GetTick>
 80080e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080e6:	e009      	b.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080e8:	f7fc fdc6 	bl	8004c78 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b64      	cmp	r3, #100	; 0x64
 80080f4:	d902      	bls.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	75fb      	strb	r3, [r7, #23]
        break;
 80080fa:	e005      	b.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80080fc:	4b9a      	ldr	r3, [pc, #616]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0ef      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008108:	7dfb      	ldrb	r3, [r7, #23]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d166      	bne.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800810e:	4b95      	ldr	r3, [pc, #596]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008110:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008118:	4053      	eors	r3, r2
 800811a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800811e:	2b00      	cmp	r3, #0
 8008120:	d013      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008122:	4b90      	ldr	r3, [pc, #576]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800812a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800812c:	4b8d      	ldr	r3, [pc, #564]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800812e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008130:	4a8c      	ldr	r2, [pc, #560]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008136:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008138:	4b8a      	ldr	r3, [pc, #552]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800813a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813c:	4a89      	ldr	r2, [pc, #548]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800813e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008142:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008144:	4a87      	ldr	r2, [pc, #540]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008154:	d115      	bne.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008156:	f7fc fd8f 	bl	8004c78 <HAL_GetTick>
 800815a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800815c:	e00b      	b.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800815e:	f7fc fd8b 	bl	8004c78 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	f241 3288 	movw	r2, #5000	; 0x1388
 800816c:	4293      	cmp	r3, r2
 800816e:	d902      	bls.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	75fb      	strb	r3, [r7, #23]
            break;
 8008174:	e005      	b.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008176:	4b7b      	ldr	r3, [pc, #492]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0ed      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d126      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800818e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008196:	d10d      	bne.n	80081b4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008198:	4b72      	ldr	r3, [pc, #456]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081a6:	0919      	lsrs	r1, r3, #4
 80081a8:	4b70      	ldr	r3, [pc, #448]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80081aa:	400b      	ands	r3, r1
 80081ac:	496d      	ldr	r1, [pc, #436]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081ae:	4313      	orrs	r3, r2
 80081b0:	610b      	str	r3, [r1, #16]
 80081b2:	e005      	b.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80081b4:	4b6b      	ldr	r3, [pc, #428]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	4a6a      	ldr	r2, [pc, #424]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80081be:	6113      	str	r3, [r2, #16]
 80081c0:	4b68      	ldr	r3, [pc, #416]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80081ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081ce:	4965      	ldr	r1, [pc, #404]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	670b      	str	r3, [r1, #112]	; 0x70
 80081d4:	e004      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
 80081d8:	75bb      	strb	r3, [r7, #22]
 80081da:	e001      	b.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d07e      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f0:	2b28      	cmp	r3, #40	; 0x28
 80081f2:	d867      	bhi.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80081f4:	a201      	add	r2, pc, #4	; (adr r2, 80081fc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80081f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081fa:	bf00      	nop
 80081fc:	080082cb 	.word	0x080082cb
 8008200:	080082c5 	.word	0x080082c5
 8008204:	080082c5 	.word	0x080082c5
 8008208:	080082c5 	.word	0x080082c5
 800820c:	080082c5 	.word	0x080082c5
 8008210:	080082c5 	.word	0x080082c5
 8008214:	080082c5 	.word	0x080082c5
 8008218:	080082c5 	.word	0x080082c5
 800821c:	080082a1 	.word	0x080082a1
 8008220:	080082c5 	.word	0x080082c5
 8008224:	080082c5 	.word	0x080082c5
 8008228:	080082c5 	.word	0x080082c5
 800822c:	080082c5 	.word	0x080082c5
 8008230:	080082c5 	.word	0x080082c5
 8008234:	080082c5 	.word	0x080082c5
 8008238:	080082c5 	.word	0x080082c5
 800823c:	080082b3 	.word	0x080082b3
 8008240:	080082c5 	.word	0x080082c5
 8008244:	080082c5 	.word	0x080082c5
 8008248:	080082c5 	.word	0x080082c5
 800824c:	080082c5 	.word	0x080082c5
 8008250:	080082c5 	.word	0x080082c5
 8008254:	080082c5 	.word	0x080082c5
 8008258:	080082c5 	.word	0x080082c5
 800825c:	080082cb 	.word	0x080082cb
 8008260:	080082c5 	.word	0x080082c5
 8008264:	080082c5 	.word	0x080082c5
 8008268:	080082c5 	.word	0x080082c5
 800826c:	080082c5 	.word	0x080082c5
 8008270:	080082c5 	.word	0x080082c5
 8008274:	080082c5 	.word	0x080082c5
 8008278:	080082c5 	.word	0x080082c5
 800827c:	080082cb 	.word	0x080082cb
 8008280:	080082c5 	.word	0x080082c5
 8008284:	080082c5 	.word	0x080082c5
 8008288:	080082c5 	.word	0x080082c5
 800828c:	080082c5 	.word	0x080082c5
 8008290:	080082c5 	.word	0x080082c5
 8008294:	080082c5 	.word	0x080082c5
 8008298:	080082c5 	.word	0x080082c5
 800829c:	080082cb 	.word	0x080082cb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3304      	adds	r3, #4
 80082a4:	2101      	movs	r1, #1
 80082a6:	4618      	mov	r0, r3
 80082a8:	f000 fde4 	bl	8008e74 <RCCEx_PLL2_Config>
 80082ac:	4603      	mov	r3, r0
 80082ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80082b0:	e00c      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	3324      	adds	r3, #36	; 0x24
 80082b6:	2101      	movs	r1, #1
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 fe8d 	bl	8008fd8 <RCCEx_PLL3_Config>
 80082be:	4603      	mov	r3, r0
 80082c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80082c2:	e003      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	75fb      	strb	r3, [r7, #23]
      break;
 80082c8:	e000      	b.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80082ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d109      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80082d2:	4b24      	ldr	r3, [pc, #144]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082de:	4921      	ldr	r1, [pc, #132]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	654b      	str	r3, [r1, #84]	; 0x54
 80082e4:	e001      	b.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d03e      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	d820      	bhi.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80082fe:	a201      	add	r2, pc, #4	; (adr r2, 8008304 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008347 	.word	0x08008347
 8008308:	0800831d 	.word	0x0800831d
 800830c:	0800832f 	.word	0x0800832f
 8008310:	08008347 	.word	0x08008347
 8008314:	08008347 	.word	0x08008347
 8008318:	08008347 	.word	0x08008347
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3304      	adds	r3, #4
 8008320:	2101      	movs	r1, #1
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fda6 	bl	8008e74 <RCCEx_PLL2_Config>
 8008328:	4603      	mov	r3, r0
 800832a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800832c:	e00c      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3324      	adds	r3, #36	; 0x24
 8008332:	2101      	movs	r1, #1
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fe4f 	bl	8008fd8 <RCCEx_PLL3_Config>
 800833a:	4603      	mov	r3, r0
 800833c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800833e:	e003      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008340:	2301      	movs	r3, #1
 8008342:	75fb      	strb	r3, [r7, #23]
      break;
 8008344:	e000      	b.n	8008348 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8008346:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d110      	bne.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800834e:	4b05      	ldr	r3, [pc, #20]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008352:	f023 0207 	bic.w	r2, r3, #7
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800835a:	4902      	ldr	r1, [pc, #8]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800835c:	4313      	orrs	r3, r2
 800835e:	654b      	str	r3, [r1, #84]	; 0x54
 8008360:	e008      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8008362:	bf00      	nop
 8008364:	58024400 	.word	0x58024400
 8008368:	58024800 	.word	0x58024800
 800836c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008370:	7dfb      	ldrb	r3, [r7, #23]
 8008372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f003 0304 	and.w	r3, r3, #4
 800837c:	2b00      	cmp	r3, #0
 800837e:	d039      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008386:	2b05      	cmp	r3, #5
 8008388:	d820      	bhi.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x934>
 800838a:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008390:	080083d3 	.word	0x080083d3
 8008394:	080083a9 	.word	0x080083a9
 8008398:	080083bb 	.word	0x080083bb
 800839c:	080083d3 	.word	0x080083d3
 80083a0:	080083d3 	.word	0x080083d3
 80083a4:	080083d3 	.word	0x080083d3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3304      	adds	r3, #4
 80083ac:	2101      	movs	r1, #1
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fd60 	bl	8008e74 <RCCEx_PLL2_Config>
 80083b4:	4603      	mov	r3, r0
 80083b6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80083b8:	e00c      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	3324      	adds	r3, #36	; 0x24
 80083be:	2101      	movs	r1, #1
 80083c0:	4618      	mov	r0, r3
 80083c2:	f000 fe09 	bl	8008fd8 <RCCEx_PLL3_Config>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80083ca:	e003      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	75fb      	strb	r3, [r7, #23]
      break;
 80083d0:	e000      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80083d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083d4:	7dfb      	ldrb	r3, [r7, #23]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80083da:	4bb7      	ldr	r3, [pc, #732]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083de:	f023 0207 	bic.w	r2, r3, #7
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e8:	49b3      	ldr	r1, [pc, #716]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	658b      	str	r3, [r1, #88]	; 0x58
 80083ee:	e001      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
 80083f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0320 	and.w	r3, r3, #32
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d04b      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800840a:	d02e      	beq.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800840c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008410:	d828      	bhi.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008416:	d02a      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841c:	d822      	bhi.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800841e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008422:	d026      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008424:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008428:	d81c      	bhi.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800842a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800842e:	d010      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8008430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008434:	d816      	bhi.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008436:	2b00      	cmp	r3, #0
 8008438:	d01d      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800843a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800843e:	d111      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	3304      	adds	r3, #4
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f000 fd14 	bl	8008e74 <RCCEx_PLL2_Config>
 800844c:	4603      	mov	r3, r0
 800844e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008450:	e012      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	3324      	adds	r3, #36	; 0x24
 8008456:	2102      	movs	r1, #2
 8008458:	4618      	mov	r0, r3
 800845a:	f000 fdbd 	bl	8008fd8 <RCCEx_PLL3_Config>
 800845e:	4603      	mov	r3, r0
 8008460:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008462:	e009      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	75fb      	strb	r3, [r7, #23]
      break;
 8008468:	e006      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800846a:	bf00      	nop
 800846c:	e004      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800846e:	bf00      	nop
 8008470:	e002      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008472:	bf00      	nop
 8008474:	e000      	b.n	8008478 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8008476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008478:	7dfb      	ldrb	r3, [r7, #23]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d10a      	bne.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800847e:	4b8e      	ldr	r3, [pc, #568]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008482:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800848c:	498a      	ldr	r1, [pc, #552]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800848e:	4313      	orrs	r3, r2
 8008490:	654b      	str	r3, [r1, #84]	; 0x54
 8008492:	e001      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008494:	7dfb      	ldrb	r3, [r7, #23]
 8008496:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d04b      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084ae:	d02e      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80084b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80084b4:	d828      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80084b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ba:	d02a      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80084bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084c0:	d822      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80084c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084c6:	d026      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80084c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084cc:	d81c      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80084ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084d2:	d010      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 80084d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084d8:	d816      	bhi.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d01d      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80084de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084e2:	d111      	bne.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3304      	adds	r3, #4
 80084e8:	2100      	movs	r1, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 fcc2 	bl	8008e74 <RCCEx_PLL2_Config>
 80084f0:	4603      	mov	r3, r0
 80084f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80084f4:	e012      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	3324      	adds	r3, #36	; 0x24
 80084fa:	2102      	movs	r1, #2
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fd6b 	bl	8008fd8 <RCCEx_PLL3_Config>
 8008502:	4603      	mov	r3, r0
 8008504:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008506:	e009      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008508:	2301      	movs	r3, #1
 800850a:	75fb      	strb	r3, [r7, #23]
      break;
 800850c:	e006      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800850e:	bf00      	nop
 8008510:	e004      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008512:	bf00      	nop
 8008514:	e002      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008516:	bf00      	nop
 8008518:	e000      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800851a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800851c:	7dfb      	ldrb	r3, [r7, #23]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008522:	4b65      	ldr	r3, [pc, #404]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008526:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008530:	4961      	ldr	r1, [pc, #388]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008532:	4313      	orrs	r3, r2
 8008534:	658b      	str	r3, [r1, #88]	; 0x58
 8008536:	e001      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008538:	7dfb      	ldrb	r3, [r7, #23]
 800853a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008544:	2b00      	cmp	r3, #0
 8008546:	d04b      	beq.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800854e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008552:	d02e      	beq.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8008554:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008558:	d828      	bhi.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800855a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800855e:	d02a      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8008560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008564:	d822      	bhi.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008566:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800856a:	d026      	beq.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800856c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008570:	d81c      	bhi.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8008572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008576:	d010      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8008578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800857c:	d816      	bhi.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800857e:	2b00      	cmp	r3, #0
 8008580:	d01d      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008586:	d111      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	3304      	adds	r3, #4
 800858c:	2100      	movs	r1, #0
 800858e:	4618      	mov	r0, r3
 8008590:	f000 fc70 	bl	8008e74 <RCCEx_PLL2_Config>
 8008594:	4603      	mov	r3, r0
 8008596:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008598:	e012      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	3324      	adds	r3, #36	; 0x24
 800859e:	2102      	movs	r1, #2
 80085a0:	4618      	mov	r0, r3
 80085a2:	f000 fd19 	bl	8008fd8 <RCCEx_PLL3_Config>
 80085a6:	4603      	mov	r3, r0
 80085a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80085aa:	e009      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	75fb      	strb	r3, [r7, #23]
      break;
 80085b0:	e006      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80085b2:	bf00      	nop
 80085b4:	e004      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80085b6:	bf00      	nop
 80085b8:	e002      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80085ba:	bf00      	nop
 80085bc:	e000      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80085be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10a      	bne.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80085c6:	4b3c      	ldr	r3, [pc, #240]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80085d4:	4938      	ldr	r1, [pc, #224]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	658b      	str	r3, [r1, #88]	; 0x58
 80085da:	e001      	b.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085dc:	7dfb      	ldrb	r3, [r7, #23]
 80085de:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0308 	and.w	r3, r3, #8
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d01a      	beq.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085f6:	d10a      	bne.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	3324      	adds	r3, #36	; 0x24
 80085fc:	2102      	movs	r1, #2
 80085fe:	4618      	mov	r0, r3
 8008600:	f000 fcea 	bl	8008fd8 <RCCEx_PLL3_Config>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800860e:	4b2a      	ldr	r3, [pc, #168]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008612:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800861c:	4926      	ldr	r1, [pc, #152]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800861e:	4313      	orrs	r3, r2
 8008620:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0310 	and.w	r3, r3, #16
 800862a:	2b00      	cmp	r3, #0
 800862c:	d01a      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008638:	d10a      	bne.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3324      	adds	r3, #36	; 0x24
 800863e:	2102      	movs	r1, #2
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fcc9 	bl	8008fd8 <RCCEx_PLL3_Config>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008650:	4b19      	ldr	r3, [pc, #100]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800865e:	4916      	ldr	r1, [pc, #88]	; (80086b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008660:	4313      	orrs	r3, r2
 8008662:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d036      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800867a:	d01f      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800867c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008680:	d817      	bhi.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800868a:	d009      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800868c:	e011      	b.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3304      	adds	r3, #4
 8008692:	2100      	movs	r1, #0
 8008694:	4618      	mov	r0, r3
 8008696:	f000 fbed 	bl	8008e74 <RCCEx_PLL2_Config>
 800869a:	4603      	mov	r3, r0
 800869c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800869e:	e00e      	b.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3324      	adds	r3, #36	; 0x24
 80086a4:	2102      	movs	r1, #2
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fc96 	bl	8008fd8 <RCCEx_PLL3_Config>
 80086ac:	4603      	mov	r3, r0
 80086ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80086b0:	e005      	b.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	75fb      	strb	r3, [r7, #23]
      break;
 80086b6:	e002      	b.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80086b8:	58024400 	.word	0x58024400
      break;
 80086bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086be:	7dfb      	ldrb	r3, [r7, #23]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d10a      	bne.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80086c4:	4b8b      	ldr	r3, [pc, #556]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80086c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80086d2:	4988      	ldr	r1, [pc, #544]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	658b      	str	r3, [r1, #88]	; 0x58
 80086d8:	e001      	b.n	80086de <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d033      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086f4:	d01c      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 80086f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086fa:	d816      	bhi.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc92>
 80086fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008700:	d003      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008706:	d007      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008708:	e00f      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800870a:	4b7a      	ldr	r3, [pc, #488]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800870c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870e:	4a79      	ldr	r2, [pc, #484]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008714:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008716:	e00c      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3324      	adds	r3, #36	; 0x24
 800871c:	2101      	movs	r1, #1
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fc5a 	bl	8008fd8 <RCCEx_PLL3_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008728:	e003      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	75fb      	strb	r3, [r7, #23]
      break;
 800872e:	e000      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008732:	7dfb      	ldrb	r3, [r7, #23]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008738:	4b6e      	ldr	r3, [pc, #440]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800873a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008746:	496b      	ldr	r1, [pc, #428]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008748:	4313      	orrs	r3, r2
 800874a:	654b      	str	r3, [r1, #84]	; 0x54
 800874c:	e001      	b.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d029      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008762:	2b00      	cmp	r3, #0
 8008764:	d003      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800876a:	d007      	beq.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800876c:	e00f      	b.n	800878e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800876e:	4b61      	ldr	r3, [pc, #388]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	4a60      	ldr	r2, [pc, #384]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008778:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800877a:	e00b      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3304      	adds	r3, #4
 8008780:	2102      	movs	r1, #2
 8008782:	4618      	mov	r0, r3
 8008784:	f000 fb76 	bl	8008e74 <RCCEx_PLL2_Config>
 8008788:	4603      	mov	r3, r0
 800878a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800878c:	e002      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	75fb      	strb	r3, [r7, #23]
      break;
 8008792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008794:	7dfb      	ldrb	r3, [r7, #23]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d109      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800879a:	4b56      	ldr	r3, [pc, #344]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800879c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800879e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087a6:	4953      	ldr	r1, [pc, #332]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	64cb      	str	r3, [r1, #76]	; 0x4c
 80087ac:	e001      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087ae:	7dfb      	ldrb	r3, [r7, #23]
 80087b0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d00a      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	3324      	adds	r3, #36	; 0x24
 80087c2:	2102      	movs	r1, #2
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fc07 	bl	8008fd8 <RCCEx_PLL3_Config>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d030      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087e8:	d017      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80087ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087ee:	d811      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80087f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087f4:	d013      	beq.n	800881e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80087f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087fa:	d80b      	bhi.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d010      	beq.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008804:	d106      	bne.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008806:	4b3b      	ldr	r3, [pc, #236]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880a:	4a3a      	ldr	r2, [pc, #232]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800880c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008810:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008812:	e007      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	75fb      	strb	r3, [r7, #23]
      break;
 8008818:	e004      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800881a:	bf00      	nop
 800881c:	e002      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800881e:	bf00      	nop
 8008820:	e000      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008824:	7dfb      	ldrb	r3, [r7, #23]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d109      	bne.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800882a:	4b32      	ldr	r3, [pc, #200]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800882c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800882e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008836:	492f      	ldr	r1, [pc, #188]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008838:	4313      	orrs	r3, r2
 800883a:	654b      	str	r3, [r1, #84]	; 0x54
 800883c:	e001      	b.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883e:	7dfb      	ldrb	r3, [r7, #23]
 8008840:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d008      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800884e:	4b29      	ldr	r3, [pc, #164]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 8008850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008852:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885a:	4926      	ldr	r1, [pc, #152]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800885c:	4313      	orrs	r3, r2
 800885e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d009      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800886c:	4b21      	ldr	r3, [pc, #132]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800887a:	491e      	ldr	r1, [pc, #120]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800887c:	4313      	orrs	r3, r2
 800887e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d008      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800888c:	4b19      	ldr	r3, [pc, #100]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800888e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008890:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008898:	4916      	ldr	r1, [pc, #88]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 800889a:	4313      	orrs	r3, r2
 800889c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00d      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088aa:	4b12      	ldr	r3, [pc, #72]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	4a11      	ldr	r2, [pc, #68]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088b4:	6113      	str	r3, [r2, #16]
 80088b6:	4b0f      	ldr	r3, [pc, #60]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088b8:	691a      	ldr	r2, [r3, #16]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80088c0:	490c      	ldr	r1, [pc, #48]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088c2:	4313      	orrs	r3, r2
 80088c4:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	da08      	bge.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80088ce:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088da:	4906      	ldr	r1, [pc, #24]	; (80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80088e0:	7dbb      	ldrb	r3, [r7, #22]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d101      	bne.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    return HAL_OK;
 80088e6:	2300      	movs	r3, #0
 80088e8:	e000      	b.n	80088ec <HAL_RCCEx_PeriphCLKConfig+0xe54>
  }
  return HAL_ERROR;
 80088ea:	2301      	movs	r3, #1
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	58024400 	.word	0x58024400

080088f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80088fc:	f7ff f82e 	bl	800795c <HAL_RCC_GetHCLKFreq>
 8008900:	4602      	mov	r2, r0
 8008902:	4b06      	ldr	r3, [pc, #24]	; (800891c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	091b      	lsrs	r3, r3, #4
 8008908:	f003 0307 	and.w	r3, r3, #7
 800890c:	4904      	ldr	r1, [pc, #16]	; (8008920 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800890e:	5ccb      	ldrb	r3, [r1, r3]
 8008910:	f003 031f 	and.w	r3, r3, #31
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008918:	4618      	mov	r0, r3
 800891a:	bd80      	pop	{r7, pc}
 800891c:	58024400 	.word	0x58024400
 8008920:	0800af80 	.word	0x0800af80

08008924 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008924:	b480      	push	{r7}
 8008926:	b089      	sub	sp, #36	; 0x24
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800892c:	4ba1      	ldr	r3, [pc, #644]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800892e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008930:	f003 0303 	and.w	r3, r3, #3
 8008934:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008936:	4b9f      	ldr	r3, [pc, #636]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893a:	0b1b      	lsrs	r3, r3, #12
 800893c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008940:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008942:	4b9c      	ldr	r3, [pc, #624]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008946:	091b      	lsrs	r3, r3, #4
 8008948:	f003 0301 	and.w	r3, r3, #1
 800894c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800894e:	4b99      	ldr	r3, [pc, #612]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008952:	08db      	lsrs	r3, r3, #3
 8008954:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	fb02 f303 	mul.w	r3, r2, r3
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008966:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b00      	cmp	r3, #0
 800896e:	f000 8111 	beq.w	8008b94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	2b02      	cmp	r3, #2
 8008976:	f000 8083 	beq.w	8008a80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	2b02      	cmp	r3, #2
 800897e:	f200 80a1 	bhi.w	8008ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d056      	beq.n	8008a3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800898e:	e099      	b.n	8008ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008990:	4b88      	ldr	r3, [pc, #544]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0320 	and.w	r3, r3, #32
 8008998:	2b00      	cmp	r3, #0
 800899a:	d02d      	beq.n	80089f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800899c:	4b85      	ldr	r3, [pc, #532]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	08db      	lsrs	r3, r3, #3
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	4a84      	ldr	r2, [pc, #528]	; (8008bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80089a8:	fa22 f303 	lsr.w	r3, r2, r3
 80089ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	ee07 3a90 	vmov	s15, r3
 80089b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	ee07 3a90 	vmov	s15, r3
 80089be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089c6:	4b7b      	ldr	r3, [pc, #492]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80089c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ce:	ee07 3a90 	vmov	s15, r3
 80089d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80089da:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80089de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80089f6:	e087      	b.n	8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a0a:	4b6a      	ldr	r3, [pc, #424]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a12:	ee07 3a90 	vmov	s15, r3
 8008a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a3a:	e065      	b.n	8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	ee07 3a90 	vmov	s15, r3
 8008a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a4e:	4b59      	ldr	r3, [pc, #356]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a62:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a7e:	e043      	b.n	8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	ee07 3a90 	vmov	s15, r3
 8008a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a92:	4b48      	ldr	r3, [pc, #288]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	ee07 3a90 	vmov	s15, r3
 8008a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aa6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008abe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ac2:	e021      	b.n	8008b08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad6:	4b37      	ldr	r3, [pc, #220]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ade:	ee07 3a90 	vmov	s15, r3
 8008ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008aea:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008bbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008b08:	4b2a      	ldr	r3, [pc, #168]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0c:	0a5b      	lsrs	r3, r3, #9
 8008b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b2e:	ee17 2a90 	vmov	r2, s15
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008b36:	4b1f      	ldr	r3, [pc, #124]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3a:	0c1b      	lsrs	r3, r3, #16
 8008b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b40:	ee07 3a90 	vmov	s15, r3
 8008b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b50:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b5c:	ee17 2a90 	vmov	r2, s15
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008b64:	4b13      	ldr	r3, [pc, #76]	; (8008bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b68:	0e1b      	lsrs	r3, r3, #24
 8008b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b8a:	ee17 2a90 	vmov	r2, s15
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008b92:	e008      	b.n	8008ba6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	609a      	str	r2, [r3, #8]
}
 8008ba6:	bf00      	nop
 8008ba8:	3724      	adds	r7, #36	; 0x24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	58024400 	.word	0x58024400
 8008bb8:	03d09000 	.word	0x03d09000
 8008bbc:	46000000 	.word	0x46000000
 8008bc0:	4c742400 	.word	0x4c742400
 8008bc4:	4a742400 	.word	0x4a742400
 8008bc8:	4af42400 	.word	0x4af42400

08008bcc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b089      	sub	sp, #36	; 0x24
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008bd4:	4ba1      	ldr	r3, [pc, #644]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd8:	f003 0303 	and.w	r3, r3, #3
 8008bdc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008bde:	4b9f      	ldr	r3, [pc, #636]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be2:	0d1b      	lsrs	r3, r3, #20
 8008be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008be8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008bea:	4b9c      	ldr	r3, [pc, #624]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bee:	0a1b      	lsrs	r3, r3, #8
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008bf6:	4b99      	ldr	r3, [pc, #612]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bfa:	08db      	lsrs	r3, r3, #3
 8008bfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	fb02 f303 	mul.w	r3, r2, r3
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8111 	beq.w	8008e3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	f000 8083 	beq.w	8008d28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	f200 80a1 	bhi.w	8008d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d003      	beq.n	8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d056      	beq.n	8008ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008c36:	e099      	b.n	8008d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c38:	4b88      	ldr	r3, [pc, #544]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0320 	and.w	r3, r3, #32
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d02d      	beq.n	8008ca0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c44:	4b85      	ldr	r3, [pc, #532]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	08db      	lsrs	r3, r3, #3
 8008c4a:	f003 0303 	and.w	r3, r3, #3
 8008c4e:	4a84      	ldr	r2, [pc, #528]	; (8008e60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008c50:	fa22 f303 	lsr.w	r3, r2, r3
 8008c54:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	ee07 3a90 	vmov	s15, r3
 8008c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	ee07 3a90 	vmov	s15, r3
 8008c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c6e:	4b7b      	ldr	r3, [pc, #492]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c82:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008c9e:	e087      	b.n	8008db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	ee07 3a90 	vmov	s15, r3
 8008ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008caa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cb2:	4b6a      	ldr	r3, [pc, #424]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cba:	ee07 3a90 	vmov	s15, r3
 8008cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ce2:	e065      	b.n	8008db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	ee07 3a90 	vmov	s15, r3
 8008cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008cf6:	4b59      	ldr	r3, [pc, #356]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d26:	e043      	b.n	8008db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	ee07 3a90 	vmov	s15, r3
 8008d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008e70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3a:	4b48      	ldr	r3, [pc, #288]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d42:	ee07 3a90 	vmov	s15, r3
 8008d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d6a:	e021      	b.n	8008db0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7e:	4b37      	ldr	r3, [pc, #220]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d86:	ee07 3a90 	vmov	s15, r3
 8008d8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008d96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008da2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008daa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008db0:	4b2a      	ldr	r3, [pc, #168]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db4:	0a5b      	lsrs	r3, r3, #9
 8008db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008dd6:	ee17 2a90 	vmov	r2, s15
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008dde:	4b1f      	ldr	r3, [pc, #124]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	0c1b      	lsrs	r3, r3, #16
 8008de4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de8:	ee07 3a90 	vmov	s15, r3
 8008dec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008df4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008df8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e04:	ee17 2a90 	vmov	r2, s15
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008e0c:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e10:	0e1b      	lsrs	r3, r3, #24
 8008e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e32:	ee17 2a90 	vmov	r2, s15
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008e3a:	e008      	b.n	8008e4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	609a      	str	r2, [r3, #8]
}
 8008e4e:	bf00      	nop
 8008e50:	3724      	adds	r7, #36	; 0x24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	58024400 	.word	0x58024400
 8008e60:	03d09000 	.word	0x03d09000
 8008e64:	46000000 	.word	0x46000000
 8008e68:	4c742400 	.word	0x4c742400
 8008e6c:	4a742400 	.word	0x4a742400
 8008e70:	4af42400 	.word	0x4af42400

08008e74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008e82:	4b53      	ldr	r3, [pc, #332]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e86:	f003 0303 	and.w	r3, r3, #3
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d101      	bne.n	8008e92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e099      	b.n	8008fc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008e92:	4b4f      	ldr	r3, [pc, #316]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a4e      	ldr	r2, [pc, #312]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008e98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008e9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e9e:	f7fb feeb 	bl	8004c78 <HAL_GetTick>
 8008ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ea4:	e008      	b.n	8008eb8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008ea6:	f7fb fee7 	bl	8004c78 <HAL_GetTick>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	1ad3      	subs	r3, r2, r3
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d901      	bls.n	8008eb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e086      	b.n	8008fc6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008eb8:	4b45      	ldr	r3, [pc, #276]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1f0      	bne.n	8008ea6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008ec4:	4b42      	ldr	r3, [pc, #264]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ec8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	031b      	lsls	r3, r3, #12
 8008ed2:	493f      	ldr	r1, [pc, #252]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	628b      	str	r3, [r1, #40]	; 0x28
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	3b01      	subs	r3, #1
 8008ede:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	025b      	lsls	r3, r3, #9
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	431a      	orrs	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	3b01      	subs	r3, #1
 8008ef4:	041b      	lsls	r3, r3, #16
 8008ef6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	3b01      	subs	r3, #1
 8008f02:	061b      	lsls	r3, r3, #24
 8008f04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008f08:	4931      	ldr	r1, [pc, #196]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008f0e:	4b30      	ldr	r3, [pc, #192]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	492d      	ldr	r1, [pc, #180]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008f20:	4b2b      	ldr	r3, [pc, #172]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f24:	f023 0220 	bic.w	r2, r3, #32
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	699b      	ldr	r3, [r3, #24]
 8008f2c:	4928      	ldr	r1, [pc, #160]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008f32:	4b27      	ldr	r3, [pc, #156]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	4a26      	ldr	r2, [pc, #152]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f38:	f023 0310 	bic.w	r3, r3, #16
 8008f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008f3e:	4b24      	ldr	r3, [pc, #144]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f42:	4b24      	ldr	r3, [pc, #144]	; (8008fd4 <RCCEx_PLL2_Config+0x160>)
 8008f44:	4013      	ands	r3, r2
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	69d2      	ldr	r2, [r2, #28]
 8008f4a:	00d2      	lsls	r2, r2, #3
 8008f4c:	4920      	ldr	r1, [pc, #128]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008f52:	4b1f      	ldr	r3, [pc, #124]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	4a1e      	ldr	r2, [pc, #120]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f58:	f043 0310 	orr.w	r3, r3, #16
 8008f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d106      	bne.n	8008f72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008f64:	4b1a      	ldr	r3, [pc, #104]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f68:	4a19      	ldr	r2, [pc, #100]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f70:	e00f      	b.n	8008f92 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d106      	bne.n	8008f86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008f78:	4b15      	ldr	r3, [pc, #84]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f7c:	4a14      	ldr	r2, [pc, #80]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008f84:	e005      	b.n	8008f92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008f86:	4b12      	ldr	r3, [pc, #72]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8a:	4a11      	ldr	r2, [pc, #68]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008f92:	4b0f      	ldr	r3, [pc, #60]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a0e      	ldr	r2, [pc, #56]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008f98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008f9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f9e:	f7fb fe6b 	bl	8004c78 <HAL_GetTick>
 8008fa2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fa4:	e008      	b.n	8008fb8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008fa6:	f7fb fe67 	bl	8004c78 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d901      	bls.n	8008fb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008fb4:	2303      	movs	r3, #3
 8008fb6:	e006      	b.n	8008fc6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <RCCEx_PLL2_Config+0x15c>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d0f0      	beq.n	8008fa6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	58024400 	.word	0x58024400
 8008fd4:	ffff0007 	.word	0xffff0007

08008fd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008fe6:	4b53      	ldr	r3, [pc, #332]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 8008fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d101      	bne.n	8008ff6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e099      	b.n	800912a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ff6:	4b4f      	ldr	r3, [pc, #316]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a4e      	ldr	r2, [pc, #312]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 8008ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009000:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009002:	f7fb fe39 	bl	8004c78 <HAL_GetTick>
 8009006:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009008:	e008      	b.n	800901c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800900a:	f7fb fe35 	bl	8004c78 <HAL_GetTick>
 800900e:	4602      	mov	r2, r0
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	2b02      	cmp	r3, #2
 8009016:	d901      	bls.n	800901c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009018:	2303      	movs	r3, #3
 800901a:	e086      	b.n	800912a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800901c:	4b45      	ldr	r3, [pc, #276]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1f0      	bne.n	800900a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009028:	4b42      	ldr	r3, [pc, #264]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 800902a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	051b      	lsls	r3, r3, #20
 8009036:	493f      	ldr	r1, [pc, #252]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 8009038:	4313      	orrs	r3, r2
 800903a:	628b      	str	r3, [r1, #40]	; 0x28
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	3b01      	subs	r3, #1
 8009042:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	3b01      	subs	r3, #1
 800904c:	025b      	lsls	r3, r3, #9
 800904e:	b29b      	uxth	r3, r3
 8009050:	431a      	orrs	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	3b01      	subs	r3, #1
 8009058:	041b      	lsls	r3, r3, #16
 800905a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800905e:	431a      	orrs	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691b      	ldr	r3, [r3, #16]
 8009064:	3b01      	subs	r3, #1
 8009066:	061b      	lsls	r3, r3, #24
 8009068:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800906c:	4931      	ldr	r1, [pc, #196]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 800906e:	4313      	orrs	r3, r2
 8009070:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009072:	4b30      	ldr	r3, [pc, #192]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 8009074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	695b      	ldr	r3, [r3, #20]
 800907e:	492d      	ldr	r1, [pc, #180]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 8009080:	4313      	orrs	r3, r2
 8009082:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009084:	4b2b      	ldr	r3, [pc, #172]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 8009086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009088:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	4928      	ldr	r1, [pc, #160]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 8009092:	4313      	orrs	r3, r2
 8009094:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009096:	4b27      	ldr	r3, [pc, #156]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	4a26      	ldr	r2, [pc, #152]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 800909c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80090a2:	4b24      	ldr	r3, [pc, #144]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a6:	4b24      	ldr	r3, [pc, #144]	; (8009138 <RCCEx_PLL3_Config+0x160>)
 80090a8:	4013      	ands	r3, r2
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	69d2      	ldr	r2, [r2, #28]
 80090ae:	00d2      	lsls	r2, r2, #3
 80090b0:	4920      	ldr	r1, [pc, #128]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80090b6:	4b1f      	ldr	r3, [pc, #124]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	4a1e      	ldr	r2, [pc, #120]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d106      	bne.n	80090d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80090c8:	4b1a      	ldr	r3, [pc, #104]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	4a19      	ldr	r2, [pc, #100]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090d4:	e00f      	b.n	80090f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d106      	bne.n	80090ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80090dc:	4b15      	ldr	r3, [pc, #84]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e0:	4a14      	ldr	r2, [pc, #80]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090e8:	e005      	b.n	80090f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80090ea:	4b12      	ldr	r3, [pc, #72]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ee:	4a11      	ldr	r2, [pc, #68]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80090f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80090f6:	4b0f      	ldr	r3, [pc, #60]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a0e      	ldr	r2, [pc, #56]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 80090fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009100:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009102:	f7fb fdb9 	bl	8004c78 <HAL_GetTick>
 8009106:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009108:	e008      	b.n	800911c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800910a:	f7fb fdb5 	bl	8004c78 <HAL_GetTick>
 800910e:	4602      	mov	r2, r0
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	1ad3      	subs	r3, r2, r3
 8009114:	2b02      	cmp	r3, #2
 8009116:	d901      	bls.n	800911c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009118:	2303      	movs	r3, #3
 800911a:	e006      	b.n	800912a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800911c:	4b05      	ldr	r3, [pc, #20]	; (8009134 <RCCEx_PLL3_Config+0x15c>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009124:	2b00      	cmp	r3, #0
 8009126:	d0f0      	beq.n	800910a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009128:	7bfb      	ldrb	r3, [r7, #15]
}
 800912a:	4618      	mov	r0, r3
 800912c:	3710      	adds	r7, #16
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	58024400 	.word	0x58024400
 8009138:	ffff0007 	.word	0xffff0007

0800913c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d101      	bne.n	800914e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800914a:	2301      	movs	r3, #1
 800914c:	e049      	b.n	80091e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009154:	b2db      	uxtb	r3, r3
 8009156:	2b00      	cmp	r3, #0
 8009158:	d106      	bne.n	8009168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2200      	movs	r2, #0
 800915e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f841 	bl	80091ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2202      	movs	r2, #2
 800916c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	3304      	adds	r3, #4
 8009178:	4619      	mov	r1, r3
 800917a:	4610      	mov	r0, r2
 800917c:	f000 f9be 	bl	80094fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2201      	movs	r2, #1
 8009194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2201      	movs	r2, #1
 80091b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2201      	movs	r2, #1
 80091d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2201      	movs	r2, #1
 80091dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80091f2:	bf00      	nop
 80091f4:	370c      	adds	r7, #12
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
	...

08009200 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009200:	b480      	push	{r7}
 8009202:	b085      	sub	sp, #20
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b01      	cmp	r3, #1
 8009212:	d001      	beq.n	8009218 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e021      	b.n	800925c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68da      	ldr	r2, [r3, #12]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0201 	orr.w	r2, r2, #1
 800922e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	689a      	ldr	r2, [r3, #8]
 8009236:	4b0c      	ldr	r3, [pc, #48]	; (8009268 <HAL_TIM_Base_Start_IT+0x68>)
 8009238:	4013      	ands	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2b06      	cmp	r3, #6
 8009240:	d00b      	beq.n	800925a <HAL_TIM_Base_Start_IT+0x5a>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009248:	d007      	beq.n	800925a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681a      	ldr	r2, [r3, #0]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f042 0201 	orr.w	r2, r2, #1
 8009258:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	00010007 	.word	0x00010007

0800926c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b02      	cmp	r3, #2
 8009280:	d122      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	f003 0302 	and.w	r3, r3, #2
 800928c:	2b02      	cmp	r3, #2
 800928e:	d11b      	bne.n	80092c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f06f 0202 	mvn.w	r2, #2
 8009298:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d003      	beq.n	80092b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f905 	bl	80094be <HAL_TIM_IC_CaptureCallback>
 80092b4:	e005      	b.n	80092c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f8f7 	bl	80094aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f908 	bl	80094d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f003 0304 	and.w	r3, r3, #4
 80092d2:	2b04      	cmp	r3, #4
 80092d4:	d122      	bne.n	800931c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	f003 0304 	and.w	r3, r3, #4
 80092e0:	2b04      	cmp	r3, #4
 80092e2:	d11b      	bne.n	800931c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f06f 0204 	mvn.w	r2, #4
 80092ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2202      	movs	r2, #2
 80092f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d003      	beq.n	800930a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f8db 	bl	80094be <HAL_TIM_IC_CaptureCallback>
 8009308:	e005      	b.n	8009316 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 f8cd 	bl	80094aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f8de 	bl	80094d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	f003 0308 	and.w	r3, r3, #8
 8009326:	2b08      	cmp	r3, #8
 8009328:	d122      	bne.n	8009370 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	f003 0308 	and.w	r3, r3, #8
 8009334:	2b08      	cmp	r3, #8
 8009336:	d11b      	bne.n	8009370 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f06f 0208 	mvn.w	r2, #8
 8009340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2204      	movs	r2, #4
 8009346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	f003 0303 	and.w	r3, r3, #3
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f8b1 	bl	80094be <HAL_TIM_IC_CaptureCallback>
 800935c:	e005      	b.n	800936a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f8a3 	bl	80094aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f8b4 	bl	80094d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	f003 0310 	and.w	r3, r3, #16
 800937a:	2b10      	cmp	r3, #16
 800937c:	d122      	bne.n	80093c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f003 0310 	and.w	r3, r3, #16
 8009388:	2b10      	cmp	r3, #16
 800938a:	d11b      	bne.n	80093c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f06f 0210 	mvn.w	r2, #16
 8009394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2208      	movs	r2, #8
 800939a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f887 	bl	80094be <HAL_TIM_IC_CaptureCallback>
 80093b0:	e005      	b.n	80093be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f879 	bl	80094aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f88a 	bl	80094d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2200      	movs	r2, #0
 80093c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d10e      	bne.n	80093f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d107      	bne.n	80093f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f06f 0201 	mvn.w	r2, #1
 80093e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7fa ffdc 	bl	80043a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fa:	2b80      	cmp	r3, #128	; 0x80
 80093fc:	d10e      	bne.n	800941c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009408:	2b80      	cmp	r3, #128	; 0x80
 800940a:	d107      	bne.n	800941c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 f914 	bl	8009644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800942a:	d10e      	bne.n	800944a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009436:	2b80      	cmp	r3, #128	; 0x80
 8009438:	d107      	bne.n	800944a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 f907 	bl	8009658 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	691b      	ldr	r3, [r3, #16]
 8009450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009454:	2b40      	cmp	r3, #64	; 0x40
 8009456:	d10e      	bne.n	8009476 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009462:	2b40      	cmp	r3, #64	; 0x40
 8009464:	d107      	bne.n	8009476 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800946e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f838 	bl	80094e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	f003 0320 	and.w	r3, r3, #32
 8009480:	2b20      	cmp	r3, #32
 8009482:	d10e      	bne.n	80094a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b20      	cmp	r3, #32
 8009490:	d107      	bne.n	80094a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f06f 0220 	mvn.w	r2, #32
 800949a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 f8c7 	bl	8009630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094a2:	bf00      	nop
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094b2:	bf00      	nop
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094c6:	bf00      	nop
 80094c8:	370c      	adds	r7, #12
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr

080094d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094d2:	b480      	push	{r7}
 80094d4:	b083      	sub	sp, #12
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094da:	bf00      	nop
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80094ee:	bf00      	nop
 80094f0:	370c      	adds	r7, #12
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
	...

080094fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	4a40      	ldr	r2, [pc, #256]	; (8009610 <TIM_Base_SetConfig+0x114>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d013      	beq.n	800953c <TIM_Base_SetConfig+0x40>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800951a:	d00f      	beq.n	800953c <TIM_Base_SetConfig+0x40>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a3d      	ldr	r2, [pc, #244]	; (8009614 <TIM_Base_SetConfig+0x118>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d00b      	beq.n	800953c <TIM_Base_SetConfig+0x40>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a3c      	ldr	r2, [pc, #240]	; (8009618 <TIM_Base_SetConfig+0x11c>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d007      	beq.n	800953c <TIM_Base_SetConfig+0x40>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	4a3b      	ldr	r2, [pc, #236]	; (800961c <TIM_Base_SetConfig+0x120>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d003      	beq.n	800953c <TIM_Base_SetConfig+0x40>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	4a3a      	ldr	r2, [pc, #232]	; (8009620 <TIM_Base_SetConfig+0x124>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d108      	bne.n	800954e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	68fa      	ldr	r2, [r7, #12]
 800954a:	4313      	orrs	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a2f      	ldr	r2, [pc, #188]	; (8009610 <TIM_Base_SetConfig+0x114>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d01f      	beq.n	8009596 <TIM_Base_SetConfig+0x9a>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800955c:	d01b      	beq.n	8009596 <TIM_Base_SetConfig+0x9a>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4a2c      	ldr	r2, [pc, #176]	; (8009614 <TIM_Base_SetConfig+0x118>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d017      	beq.n	8009596 <TIM_Base_SetConfig+0x9a>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	4a2b      	ldr	r2, [pc, #172]	; (8009618 <TIM_Base_SetConfig+0x11c>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d013      	beq.n	8009596 <TIM_Base_SetConfig+0x9a>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	4a2a      	ldr	r2, [pc, #168]	; (800961c <TIM_Base_SetConfig+0x120>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d00f      	beq.n	8009596 <TIM_Base_SetConfig+0x9a>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	4a29      	ldr	r2, [pc, #164]	; (8009620 <TIM_Base_SetConfig+0x124>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d00b      	beq.n	8009596 <TIM_Base_SetConfig+0x9a>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4a28      	ldr	r2, [pc, #160]	; (8009624 <TIM_Base_SetConfig+0x128>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d007      	beq.n	8009596 <TIM_Base_SetConfig+0x9a>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4a27      	ldr	r2, [pc, #156]	; (8009628 <TIM_Base_SetConfig+0x12c>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d003      	beq.n	8009596 <TIM_Base_SetConfig+0x9a>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a26      	ldr	r2, [pc, #152]	; (800962c <TIM_Base_SetConfig+0x130>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d108      	bne.n	80095a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800959c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	695b      	ldr	r3, [r3, #20]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	689a      	ldr	r2, [r3, #8]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a10      	ldr	r2, [pc, #64]	; (8009610 <TIM_Base_SetConfig+0x114>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d00f      	beq.n	80095f4 <TIM_Base_SetConfig+0xf8>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a12      	ldr	r2, [pc, #72]	; (8009620 <TIM_Base_SetConfig+0x124>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d00b      	beq.n	80095f4 <TIM_Base_SetConfig+0xf8>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	4a11      	ldr	r2, [pc, #68]	; (8009624 <TIM_Base_SetConfig+0x128>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d007      	beq.n	80095f4 <TIM_Base_SetConfig+0xf8>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4a10      	ldr	r2, [pc, #64]	; (8009628 <TIM_Base_SetConfig+0x12c>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d003      	beq.n	80095f4 <TIM_Base_SetConfig+0xf8>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a0f      	ldr	r2, [pc, #60]	; (800962c <TIM_Base_SetConfig+0x130>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d103      	bne.n	80095fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	691a      	ldr	r2, [r3, #16]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	615a      	str	r2, [r3, #20]
}
 8009602:	bf00      	nop
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	40010000 	.word	0x40010000
 8009614:	40000400 	.word	0x40000400
 8009618:	40000800 	.word	0x40000800
 800961c:	40000c00 	.word	0x40000c00
 8009620:	40010400 	.word	0x40010400
 8009624:	40014000 	.word	0x40014000
 8009628:	40014400 	.word	0x40014400
 800962c:	40014800 	.word	0x40014800

08009630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d101      	bne.n	800967e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	e042      	b.n	8009704 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009684:	2b00      	cmp	r3, #0
 8009686:	d106      	bne.n	8009696 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7fa ff89 	bl	80045a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2224      	movs	r2, #36	; 0x24
 800969a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f022 0201 	bic.w	r2, r2, #1
 80096ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f82c 	bl	800970c <UART_SetConfig>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d101      	bne.n	80096be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e022      	b.n	8009704 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d002      	beq.n	80096cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fd86 	bl	800a1d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685a      	ldr	r2, [r3, #4]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80096da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	689a      	ldr	r2, [r3, #8]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80096ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0201 	orr.w	r2, r2, #1
 80096fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fe0d 	bl	800a31c <UART_CheckIdleState>
 8009702:	4603      	mov	r3, r0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800970c:	b5b0      	push	{r4, r5, r7, lr}
 800970e:	b08e      	sub	sp, #56	; 0x38
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689a      	ldr	r2, [r3, #8]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	431a      	orrs	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	695b      	ldr	r3, [r3, #20]
 8009728:	431a      	orrs	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	69db      	ldr	r3, [r3, #28]
 800972e:	4313      	orrs	r3, r2
 8009730:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009738:	4313      	orrs	r3, r2
 800973a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4bc0      	ldr	r3, [pc, #768]	; (8009a44 <UART_SetConfig+0x338>)
 8009744:	4013      	ands	r3, r2
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	6812      	ldr	r2, [r2, #0]
 800974a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800974c:	430b      	orrs	r3, r1
 800974e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	430a      	orrs	r2, r1
 8009764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4ab5      	ldr	r2, [pc, #724]	; (8009a48 <UART_SetConfig+0x33c>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d004      	beq.n	8009780 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6a1b      	ldr	r3, [r3, #32]
 800977a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800977c:	4313      	orrs	r3, r2
 800977e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689a      	ldr	r2, [r3, #8]
 8009786:	4bb1      	ldr	r3, [pc, #708]	; (8009a4c <UART_SetConfig+0x340>)
 8009788:	4013      	ands	r3, r2
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	6812      	ldr	r2, [r2, #0]
 800978e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009790:	430b      	orrs	r3, r1
 8009792:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979a:	f023 010f 	bic.w	r1, r3, #15
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	430a      	orrs	r2, r1
 80097a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4aa8      	ldr	r2, [pc, #672]	; (8009a50 <UART_SetConfig+0x344>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d177      	bne.n	80098a4 <UART_SetConfig+0x198>
 80097b4:	4ba7      	ldr	r3, [pc, #668]	; (8009a54 <UART_SetConfig+0x348>)
 80097b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097bc:	2b28      	cmp	r3, #40	; 0x28
 80097be:	d86d      	bhi.n	800989c <UART_SetConfig+0x190>
 80097c0:	a201      	add	r2, pc, #4	; (adr r2, 80097c8 <UART_SetConfig+0xbc>)
 80097c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c6:	bf00      	nop
 80097c8:	0800986d 	.word	0x0800986d
 80097cc:	0800989d 	.word	0x0800989d
 80097d0:	0800989d 	.word	0x0800989d
 80097d4:	0800989d 	.word	0x0800989d
 80097d8:	0800989d 	.word	0x0800989d
 80097dc:	0800989d 	.word	0x0800989d
 80097e0:	0800989d 	.word	0x0800989d
 80097e4:	0800989d 	.word	0x0800989d
 80097e8:	08009875 	.word	0x08009875
 80097ec:	0800989d 	.word	0x0800989d
 80097f0:	0800989d 	.word	0x0800989d
 80097f4:	0800989d 	.word	0x0800989d
 80097f8:	0800989d 	.word	0x0800989d
 80097fc:	0800989d 	.word	0x0800989d
 8009800:	0800989d 	.word	0x0800989d
 8009804:	0800989d 	.word	0x0800989d
 8009808:	0800987d 	.word	0x0800987d
 800980c:	0800989d 	.word	0x0800989d
 8009810:	0800989d 	.word	0x0800989d
 8009814:	0800989d 	.word	0x0800989d
 8009818:	0800989d 	.word	0x0800989d
 800981c:	0800989d 	.word	0x0800989d
 8009820:	0800989d 	.word	0x0800989d
 8009824:	0800989d 	.word	0x0800989d
 8009828:	08009885 	.word	0x08009885
 800982c:	0800989d 	.word	0x0800989d
 8009830:	0800989d 	.word	0x0800989d
 8009834:	0800989d 	.word	0x0800989d
 8009838:	0800989d 	.word	0x0800989d
 800983c:	0800989d 	.word	0x0800989d
 8009840:	0800989d 	.word	0x0800989d
 8009844:	0800989d 	.word	0x0800989d
 8009848:	0800988d 	.word	0x0800988d
 800984c:	0800989d 	.word	0x0800989d
 8009850:	0800989d 	.word	0x0800989d
 8009854:	0800989d 	.word	0x0800989d
 8009858:	0800989d 	.word	0x0800989d
 800985c:	0800989d 	.word	0x0800989d
 8009860:	0800989d 	.word	0x0800989d
 8009864:	0800989d 	.word	0x0800989d
 8009868:	08009895 	.word	0x08009895
 800986c:	2301      	movs	r3, #1
 800986e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009872:	e222      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009874:	2304      	movs	r3, #4
 8009876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800987a:	e21e      	b.n	8009cba <UART_SetConfig+0x5ae>
 800987c:	2308      	movs	r3, #8
 800987e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009882:	e21a      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009884:	2310      	movs	r3, #16
 8009886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800988a:	e216      	b.n	8009cba <UART_SetConfig+0x5ae>
 800988c:	2320      	movs	r3, #32
 800988e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009892:	e212      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009894:	2340      	movs	r3, #64	; 0x40
 8009896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800989a:	e20e      	b.n	8009cba <UART_SetConfig+0x5ae>
 800989c:	2380      	movs	r3, #128	; 0x80
 800989e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098a2:	e20a      	b.n	8009cba <UART_SetConfig+0x5ae>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a6b      	ldr	r2, [pc, #428]	; (8009a58 <UART_SetConfig+0x34c>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d130      	bne.n	8009910 <UART_SetConfig+0x204>
 80098ae:	4b69      	ldr	r3, [pc, #420]	; (8009a54 <UART_SetConfig+0x348>)
 80098b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098b2:	f003 0307 	and.w	r3, r3, #7
 80098b6:	2b05      	cmp	r3, #5
 80098b8:	d826      	bhi.n	8009908 <UART_SetConfig+0x1fc>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <UART_SetConfig+0x1b4>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	080098d9 	.word	0x080098d9
 80098c4:	080098e1 	.word	0x080098e1
 80098c8:	080098e9 	.word	0x080098e9
 80098cc:	080098f1 	.word	0x080098f1
 80098d0:	080098f9 	.word	0x080098f9
 80098d4:	08009901 	.word	0x08009901
 80098d8:	2300      	movs	r3, #0
 80098da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098de:	e1ec      	b.n	8009cba <UART_SetConfig+0x5ae>
 80098e0:	2304      	movs	r3, #4
 80098e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098e6:	e1e8      	b.n	8009cba <UART_SetConfig+0x5ae>
 80098e8:	2308      	movs	r3, #8
 80098ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ee:	e1e4      	b.n	8009cba <UART_SetConfig+0x5ae>
 80098f0:	2310      	movs	r3, #16
 80098f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f6:	e1e0      	b.n	8009cba <UART_SetConfig+0x5ae>
 80098f8:	2320      	movs	r3, #32
 80098fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fe:	e1dc      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009900:	2340      	movs	r3, #64	; 0x40
 8009902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009906:	e1d8      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009908:	2380      	movs	r3, #128	; 0x80
 800990a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990e:	e1d4      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a51      	ldr	r2, [pc, #324]	; (8009a5c <UART_SetConfig+0x350>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d130      	bne.n	800997c <UART_SetConfig+0x270>
 800991a:	4b4e      	ldr	r3, [pc, #312]	; (8009a54 <UART_SetConfig+0x348>)
 800991c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800991e:	f003 0307 	and.w	r3, r3, #7
 8009922:	2b05      	cmp	r3, #5
 8009924:	d826      	bhi.n	8009974 <UART_SetConfig+0x268>
 8009926:	a201      	add	r2, pc, #4	; (adr r2, 800992c <UART_SetConfig+0x220>)
 8009928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800992c:	08009945 	.word	0x08009945
 8009930:	0800994d 	.word	0x0800994d
 8009934:	08009955 	.word	0x08009955
 8009938:	0800995d 	.word	0x0800995d
 800993c:	08009965 	.word	0x08009965
 8009940:	0800996d 	.word	0x0800996d
 8009944:	2300      	movs	r3, #0
 8009946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994a:	e1b6      	b.n	8009cba <UART_SetConfig+0x5ae>
 800994c:	2304      	movs	r3, #4
 800994e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009952:	e1b2      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009954:	2308      	movs	r3, #8
 8009956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800995a:	e1ae      	b.n	8009cba <UART_SetConfig+0x5ae>
 800995c:	2310      	movs	r3, #16
 800995e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009962:	e1aa      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009964:	2320      	movs	r3, #32
 8009966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996a:	e1a6      	b.n	8009cba <UART_SetConfig+0x5ae>
 800996c:	2340      	movs	r3, #64	; 0x40
 800996e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009972:	e1a2      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009974:	2380      	movs	r3, #128	; 0x80
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997a:	e19e      	b.n	8009cba <UART_SetConfig+0x5ae>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a37      	ldr	r2, [pc, #220]	; (8009a60 <UART_SetConfig+0x354>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d130      	bne.n	80099e8 <UART_SetConfig+0x2dc>
 8009986:	4b33      	ldr	r3, [pc, #204]	; (8009a54 <UART_SetConfig+0x348>)
 8009988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800998a:	f003 0307 	and.w	r3, r3, #7
 800998e:	2b05      	cmp	r3, #5
 8009990:	d826      	bhi.n	80099e0 <UART_SetConfig+0x2d4>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <UART_SetConfig+0x28c>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099b1 	.word	0x080099b1
 800999c:	080099b9 	.word	0x080099b9
 80099a0:	080099c1 	.word	0x080099c1
 80099a4:	080099c9 	.word	0x080099c9
 80099a8:	080099d1 	.word	0x080099d1
 80099ac:	080099d9 	.word	0x080099d9
 80099b0:	2300      	movs	r3, #0
 80099b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b6:	e180      	b.n	8009cba <UART_SetConfig+0x5ae>
 80099b8:	2304      	movs	r3, #4
 80099ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099be:	e17c      	b.n	8009cba <UART_SetConfig+0x5ae>
 80099c0:	2308      	movs	r3, #8
 80099c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099c6:	e178      	b.n	8009cba <UART_SetConfig+0x5ae>
 80099c8:	2310      	movs	r3, #16
 80099ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ce:	e174      	b.n	8009cba <UART_SetConfig+0x5ae>
 80099d0:	2320      	movs	r3, #32
 80099d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d6:	e170      	b.n	8009cba <UART_SetConfig+0x5ae>
 80099d8:	2340      	movs	r3, #64	; 0x40
 80099da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099de:	e16c      	b.n	8009cba <UART_SetConfig+0x5ae>
 80099e0:	2380      	movs	r3, #128	; 0x80
 80099e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e6:	e168      	b.n	8009cba <UART_SetConfig+0x5ae>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a1d      	ldr	r2, [pc, #116]	; (8009a64 <UART_SetConfig+0x358>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d142      	bne.n	8009a78 <UART_SetConfig+0x36c>
 80099f2:	4b18      	ldr	r3, [pc, #96]	; (8009a54 <UART_SetConfig+0x348>)
 80099f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f6:	f003 0307 	and.w	r3, r3, #7
 80099fa:	2b05      	cmp	r3, #5
 80099fc:	d838      	bhi.n	8009a70 <UART_SetConfig+0x364>
 80099fe:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <UART_SetConfig+0x2f8>)
 8009a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a04:	08009a1d 	.word	0x08009a1d
 8009a08:	08009a25 	.word	0x08009a25
 8009a0c:	08009a2d 	.word	0x08009a2d
 8009a10:	08009a35 	.word	0x08009a35
 8009a14:	08009a3d 	.word	0x08009a3d
 8009a18:	08009a69 	.word	0x08009a69
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a22:	e14a      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009a24:	2304      	movs	r3, #4
 8009a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2a:	e146      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a32:	e142      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009a34:	2310      	movs	r3, #16
 8009a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a3a:	e13e      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009a3c:	2320      	movs	r3, #32
 8009a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a42:	e13a      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009a44:	cfff69f3 	.word	0xcfff69f3
 8009a48:	58000c00 	.word	0x58000c00
 8009a4c:	11fff4ff 	.word	0x11fff4ff
 8009a50:	40011000 	.word	0x40011000
 8009a54:	58024400 	.word	0x58024400
 8009a58:	40004400 	.word	0x40004400
 8009a5c:	40004800 	.word	0x40004800
 8009a60:	40004c00 	.word	0x40004c00
 8009a64:	40005000 	.word	0x40005000
 8009a68:	2340      	movs	r3, #64	; 0x40
 8009a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6e:	e124      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009a70:	2380      	movs	r3, #128	; 0x80
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e120      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4acc      	ldr	r2, [pc, #816]	; (8009db0 <UART_SetConfig+0x6a4>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d176      	bne.n	8009b70 <UART_SetConfig+0x464>
 8009a82:	4bcc      	ldr	r3, [pc, #816]	; (8009db4 <UART_SetConfig+0x6a8>)
 8009a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a8a:	2b28      	cmp	r3, #40	; 0x28
 8009a8c:	d86c      	bhi.n	8009b68 <UART_SetConfig+0x45c>
 8009a8e:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <UART_SetConfig+0x388>)
 8009a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a94:	08009b39 	.word	0x08009b39
 8009a98:	08009b69 	.word	0x08009b69
 8009a9c:	08009b69 	.word	0x08009b69
 8009aa0:	08009b69 	.word	0x08009b69
 8009aa4:	08009b69 	.word	0x08009b69
 8009aa8:	08009b69 	.word	0x08009b69
 8009aac:	08009b69 	.word	0x08009b69
 8009ab0:	08009b69 	.word	0x08009b69
 8009ab4:	08009b41 	.word	0x08009b41
 8009ab8:	08009b69 	.word	0x08009b69
 8009abc:	08009b69 	.word	0x08009b69
 8009ac0:	08009b69 	.word	0x08009b69
 8009ac4:	08009b69 	.word	0x08009b69
 8009ac8:	08009b69 	.word	0x08009b69
 8009acc:	08009b69 	.word	0x08009b69
 8009ad0:	08009b69 	.word	0x08009b69
 8009ad4:	08009b49 	.word	0x08009b49
 8009ad8:	08009b69 	.word	0x08009b69
 8009adc:	08009b69 	.word	0x08009b69
 8009ae0:	08009b69 	.word	0x08009b69
 8009ae4:	08009b69 	.word	0x08009b69
 8009ae8:	08009b69 	.word	0x08009b69
 8009aec:	08009b69 	.word	0x08009b69
 8009af0:	08009b69 	.word	0x08009b69
 8009af4:	08009b51 	.word	0x08009b51
 8009af8:	08009b69 	.word	0x08009b69
 8009afc:	08009b69 	.word	0x08009b69
 8009b00:	08009b69 	.word	0x08009b69
 8009b04:	08009b69 	.word	0x08009b69
 8009b08:	08009b69 	.word	0x08009b69
 8009b0c:	08009b69 	.word	0x08009b69
 8009b10:	08009b69 	.word	0x08009b69
 8009b14:	08009b59 	.word	0x08009b59
 8009b18:	08009b69 	.word	0x08009b69
 8009b1c:	08009b69 	.word	0x08009b69
 8009b20:	08009b69 	.word	0x08009b69
 8009b24:	08009b69 	.word	0x08009b69
 8009b28:	08009b69 	.word	0x08009b69
 8009b2c:	08009b69 	.word	0x08009b69
 8009b30:	08009b69 	.word	0x08009b69
 8009b34:	08009b61 	.word	0x08009b61
 8009b38:	2301      	movs	r3, #1
 8009b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b3e:	e0bc      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009b40:	2304      	movs	r3, #4
 8009b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b46:	e0b8      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009b48:	2308      	movs	r3, #8
 8009b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b4e:	e0b4      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009b50:	2310      	movs	r3, #16
 8009b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b56:	e0b0      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009b58:	2320      	movs	r3, #32
 8009b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b5e:	e0ac      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009b60:	2340      	movs	r3, #64	; 0x40
 8009b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b66:	e0a8      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009b68:	2380      	movs	r3, #128	; 0x80
 8009b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b6e:	e0a4      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a90      	ldr	r2, [pc, #576]	; (8009db8 <UART_SetConfig+0x6ac>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d130      	bne.n	8009bdc <UART_SetConfig+0x4d0>
 8009b7a:	4b8e      	ldr	r3, [pc, #568]	; (8009db4 <UART_SetConfig+0x6a8>)
 8009b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7e:	f003 0307 	and.w	r3, r3, #7
 8009b82:	2b05      	cmp	r3, #5
 8009b84:	d826      	bhi.n	8009bd4 <UART_SetConfig+0x4c8>
 8009b86:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <UART_SetConfig+0x480>)
 8009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8c:	08009ba5 	.word	0x08009ba5
 8009b90:	08009bad 	.word	0x08009bad
 8009b94:	08009bb5 	.word	0x08009bb5
 8009b98:	08009bbd 	.word	0x08009bbd
 8009b9c:	08009bc5 	.word	0x08009bc5
 8009ba0:	08009bcd 	.word	0x08009bcd
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009baa:	e086      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009bac:	2304      	movs	r3, #4
 8009bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb2:	e082      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bba:	e07e      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009bbc:	2310      	movs	r3, #16
 8009bbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bc2:	e07a      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009bc4:	2320      	movs	r3, #32
 8009bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bca:	e076      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009bcc:	2340      	movs	r3, #64	; 0x40
 8009bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd2:	e072      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009bd4:	2380      	movs	r3, #128	; 0x80
 8009bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bda:	e06e      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a76      	ldr	r2, [pc, #472]	; (8009dbc <UART_SetConfig+0x6b0>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d130      	bne.n	8009c48 <UART_SetConfig+0x53c>
 8009be6:	4b73      	ldr	r3, [pc, #460]	; (8009db4 <UART_SetConfig+0x6a8>)
 8009be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bea:	f003 0307 	and.w	r3, r3, #7
 8009bee:	2b05      	cmp	r3, #5
 8009bf0:	d826      	bhi.n	8009c40 <UART_SetConfig+0x534>
 8009bf2:	a201      	add	r2, pc, #4	; (adr r2, 8009bf8 <UART_SetConfig+0x4ec>)
 8009bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bf8:	08009c11 	.word	0x08009c11
 8009bfc:	08009c19 	.word	0x08009c19
 8009c00:	08009c21 	.word	0x08009c21
 8009c04:	08009c29 	.word	0x08009c29
 8009c08:	08009c31 	.word	0x08009c31
 8009c0c:	08009c39 	.word	0x08009c39
 8009c10:	2300      	movs	r3, #0
 8009c12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c16:	e050      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c18:	2304      	movs	r3, #4
 8009c1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1e:	e04c      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c20:	2308      	movs	r3, #8
 8009c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c26:	e048      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c28:	2310      	movs	r3, #16
 8009c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2e:	e044      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c30:	2320      	movs	r3, #32
 8009c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c36:	e040      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c38:	2340      	movs	r3, #64	; 0x40
 8009c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c3e:	e03c      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c40:	2380      	movs	r3, #128	; 0x80
 8009c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c46:	e038      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a5c      	ldr	r2, [pc, #368]	; (8009dc0 <UART_SetConfig+0x6b4>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d130      	bne.n	8009cb4 <UART_SetConfig+0x5a8>
 8009c52:	4b58      	ldr	r3, [pc, #352]	; (8009db4 <UART_SetConfig+0x6a8>)
 8009c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c56:	f003 0307 	and.w	r3, r3, #7
 8009c5a:	2b05      	cmp	r3, #5
 8009c5c:	d826      	bhi.n	8009cac <UART_SetConfig+0x5a0>
 8009c5e:	a201      	add	r2, pc, #4	; (adr r2, 8009c64 <UART_SetConfig+0x558>)
 8009c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c64:	08009c7d 	.word	0x08009c7d
 8009c68:	08009c85 	.word	0x08009c85
 8009c6c:	08009c8d 	.word	0x08009c8d
 8009c70:	08009c95 	.word	0x08009c95
 8009c74:	08009c9d 	.word	0x08009c9d
 8009c78:	08009ca5 	.word	0x08009ca5
 8009c7c:	2302      	movs	r3, #2
 8009c7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c82:	e01a      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c84:	2304      	movs	r3, #4
 8009c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c8a:	e016      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c8c:	2308      	movs	r3, #8
 8009c8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c92:	e012      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c94:	2310      	movs	r3, #16
 8009c96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c9a:	e00e      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009c9c:	2320      	movs	r3, #32
 8009c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ca2:	e00a      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009ca4:	2340      	movs	r3, #64	; 0x40
 8009ca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009caa:	e006      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009cac:	2380      	movs	r3, #128	; 0x80
 8009cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb2:	e002      	b.n	8009cba <UART_SetConfig+0x5ae>
 8009cb4:	2380      	movs	r3, #128	; 0x80
 8009cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a40      	ldr	r2, [pc, #256]	; (8009dc0 <UART_SetConfig+0x6b4>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	f040 80ef 	bne.w	8009ea4 <UART_SetConfig+0x798>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cca:	2b20      	cmp	r3, #32
 8009ccc:	dc46      	bgt.n	8009d5c <UART_SetConfig+0x650>
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	f2c0 8081 	blt.w	8009dd6 <UART_SetConfig+0x6ca>
 8009cd4:	3b02      	subs	r3, #2
 8009cd6:	2b1e      	cmp	r3, #30
 8009cd8:	d87d      	bhi.n	8009dd6 <UART_SetConfig+0x6ca>
 8009cda:	a201      	add	r2, pc, #4	; (adr r2, 8009ce0 <UART_SetConfig+0x5d4>)
 8009cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce0:	08009d63 	.word	0x08009d63
 8009ce4:	08009dd7 	.word	0x08009dd7
 8009ce8:	08009d6b 	.word	0x08009d6b
 8009cec:	08009dd7 	.word	0x08009dd7
 8009cf0:	08009dd7 	.word	0x08009dd7
 8009cf4:	08009dd7 	.word	0x08009dd7
 8009cf8:	08009d7b 	.word	0x08009d7b
 8009cfc:	08009dd7 	.word	0x08009dd7
 8009d00:	08009dd7 	.word	0x08009dd7
 8009d04:	08009dd7 	.word	0x08009dd7
 8009d08:	08009dd7 	.word	0x08009dd7
 8009d0c:	08009dd7 	.word	0x08009dd7
 8009d10:	08009dd7 	.word	0x08009dd7
 8009d14:	08009dd7 	.word	0x08009dd7
 8009d18:	08009d8b 	.word	0x08009d8b
 8009d1c:	08009dd7 	.word	0x08009dd7
 8009d20:	08009dd7 	.word	0x08009dd7
 8009d24:	08009dd7 	.word	0x08009dd7
 8009d28:	08009dd7 	.word	0x08009dd7
 8009d2c:	08009dd7 	.word	0x08009dd7
 8009d30:	08009dd7 	.word	0x08009dd7
 8009d34:	08009dd7 	.word	0x08009dd7
 8009d38:	08009dd7 	.word	0x08009dd7
 8009d3c:	08009dd7 	.word	0x08009dd7
 8009d40:	08009dd7 	.word	0x08009dd7
 8009d44:	08009dd7 	.word	0x08009dd7
 8009d48:	08009dd7 	.word	0x08009dd7
 8009d4c:	08009dd7 	.word	0x08009dd7
 8009d50:	08009dd7 	.word	0x08009dd7
 8009d54:	08009dd7 	.word	0x08009dd7
 8009d58:	08009dc9 	.word	0x08009dc9
 8009d5c:	2b40      	cmp	r3, #64	; 0x40
 8009d5e:	d036      	beq.n	8009dce <UART_SetConfig+0x6c2>
 8009d60:	e039      	b.n	8009dd6 <UART_SetConfig+0x6ca>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d62:	f7fe fdc9 	bl	80088f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d68:	e03b      	b.n	8009de2 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d6a:	f107 0314 	add.w	r3, r7, #20
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fe fdd8 	bl	8008924 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d78:	e033      	b.n	8009de2 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d7a:	f107 0308 	add.w	r3, r7, #8
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7fe ff24 	bl	8008bcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d88:	e02b      	b.n	8009de2 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d8a:	4b0a      	ldr	r3, [pc, #40]	; (8009db4 <UART_SetConfig+0x6a8>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f003 0320 	and.w	r3, r3, #32
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d009      	beq.n	8009daa <UART_SetConfig+0x69e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d96:	4b07      	ldr	r3, [pc, #28]	; (8009db4 <UART_SetConfig+0x6a8>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	08db      	lsrs	r3, r3, #3
 8009d9c:	f003 0303 	and.w	r3, r3, #3
 8009da0:	4a08      	ldr	r2, [pc, #32]	; (8009dc4 <UART_SetConfig+0x6b8>)
 8009da2:	fa22 f303 	lsr.w	r3, r2, r3
 8009da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009da8:	e01b      	b.n	8009de2 <UART_SetConfig+0x6d6>
          pclk = (uint32_t) HSI_VALUE;
 8009daa:	4b06      	ldr	r3, [pc, #24]	; (8009dc4 <UART_SetConfig+0x6b8>)
 8009dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dae:	e018      	b.n	8009de2 <UART_SetConfig+0x6d6>
 8009db0:	40011400 	.word	0x40011400
 8009db4:	58024400 	.word	0x58024400
 8009db8:	40007800 	.word	0x40007800
 8009dbc:	40007c00 	.word	0x40007c00
 8009dc0:	58000c00 	.word	0x58000c00
 8009dc4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dc8:	4bc4      	ldr	r3, [pc, #784]	; (800a0dc <UART_SetConfig+0x9d0>)
 8009dca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dcc:	e009      	b.n	8009de2 <UART_SetConfig+0x6d6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dd4:	e005      	b.n	8009de2 <UART_SetConfig+0x6d6>
      default:
        pclk = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009de0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f000 81da 	beq.w	800a19e <UART_SetConfig+0xa92>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dee:	4abc      	ldr	r2, [pc, #752]	; (800a0e0 <UART_SetConfig+0x9d4>)
 8009df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009df4:	461a      	mov	r2, r3
 8009df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dfc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	685a      	ldr	r2, [r3, #4]
 8009e02:	4613      	mov	r3, r2
 8009e04:	005b      	lsls	r3, r3, #1
 8009e06:	4413      	add	r3, r2
 8009e08:	6a3a      	ldr	r2, [r7, #32]
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	d305      	bcc.n	8009e1a <UART_SetConfig+0x70e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e14:	6a3a      	ldr	r2, [r7, #32]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d903      	bls.n	8009e22 <UART_SetConfig+0x716>
      {
        ret = HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e20:	e1bd      	b.n	800a19e <UART_SetConfig+0xa92>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	4618      	mov	r0, r3
 8009e26:	f04f 0100 	mov.w	r1, #0
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	4aac      	ldr	r2, [pc, #688]	; (800a0e0 <UART_SetConfig+0x9d4>)
 8009e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	f04f 0300 	mov.w	r3, #0
 8009e3a:	f7f8 feb5 	bl	8002ba8 <__aeabi_uldivmod>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	460b      	mov	r3, r1
 8009e42:	4610      	mov	r0, r2
 8009e44:	4619      	mov	r1, r3
 8009e46:	f04f 0200 	mov.w	r2, #0
 8009e4a:	f04f 0300 	mov.w	r3, #0
 8009e4e:	020b      	lsls	r3, r1, #8
 8009e50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e54:	0202      	lsls	r2, r0, #8
 8009e56:	6879      	ldr	r1, [r7, #4]
 8009e58:	6849      	ldr	r1, [r1, #4]
 8009e5a:	0849      	lsrs	r1, r1, #1
 8009e5c:	4608      	mov	r0, r1
 8009e5e:	f04f 0100 	mov.w	r1, #0
 8009e62:	1814      	adds	r4, r2, r0
 8009e64:	eb43 0501 	adc.w	r5, r3, r1
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f04f 0300 	mov.w	r3, #0
 8009e72:	4620      	mov	r0, r4
 8009e74:	4629      	mov	r1, r5
 8009e76:	f7f8 fe97 	bl	8002ba8 <__aeabi_uldivmod>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	4613      	mov	r3, r2
 8009e80:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e88:	d308      	bcc.n	8009e9c <UART_SetConfig+0x790>
 8009e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e90:	d204      	bcs.n	8009e9c <UART_SetConfig+0x790>
        {
          huart->Instance->BRR = usartdiv;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e98:	60da      	str	r2, [r3, #12]
 8009e9a:	e180      	b.n	800a19e <UART_SetConfig+0xa92>
        }
        else
        {
          ret = HAL_ERROR;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ea2:	e17c      	b.n	800a19e <UART_SetConfig+0xa92>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	69db      	ldr	r3, [r3, #28]
 8009ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eac:	f040 80bf 	bne.w	800a02e <UART_SetConfig+0x922>
  {
    switch (clocksource)
 8009eb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009eb4:	2b20      	cmp	r3, #32
 8009eb6:	dc49      	bgt.n	8009f4c <UART_SetConfig+0x840>
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	db7c      	blt.n	8009fb6 <UART_SetConfig+0x8aa>
 8009ebc:	2b20      	cmp	r3, #32
 8009ebe:	d87a      	bhi.n	8009fb6 <UART_SetConfig+0x8aa>
 8009ec0:	a201      	add	r2, pc, #4	; (adr r2, 8009ec8 <UART_SetConfig+0x7bc>)
 8009ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec6:	bf00      	nop
 8009ec8:	08009f53 	.word	0x08009f53
 8009ecc:	08009f5b 	.word	0x08009f5b
 8009ed0:	08009fb7 	.word	0x08009fb7
 8009ed4:	08009fb7 	.word	0x08009fb7
 8009ed8:	08009f63 	.word	0x08009f63
 8009edc:	08009fb7 	.word	0x08009fb7
 8009ee0:	08009fb7 	.word	0x08009fb7
 8009ee4:	08009fb7 	.word	0x08009fb7
 8009ee8:	08009f73 	.word	0x08009f73
 8009eec:	08009fb7 	.word	0x08009fb7
 8009ef0:	08009fb7 	.word	0x08009fb7
 8009ef4:	08009fb7 	.word	0x08009fb7
 8009ef8:	08009fb7 	.word	0x08009fb7
 8009efc:	08009fb7 	.word	0x08009fb7
 8009f00:	08009fb7 	.word	0x08009fb7
 8009f04:	08009fb7 	.word	0x08009fb7
 8009f08:	08009f83 	.word	0x08009f83
 8009f0c:	08009fb7 	.word	0x08009fb7
 8009f10:	08009fb7 	.word	0x08009fb7
 8009f14:	08009fb7 	.word	0x08009fb7
 8009f18:	08009fb7 	.word	0x08009fb7
 8009f1c:	08009fb7 	.word	0x08009fb7
 8009f20:	08009fb7 	.word	0x08009fb7
 8009f24:	08009fb7 	.word	0x08009fb7
 8009f28:	08009fb7 	.word	0x08009fb7
 8009f2c:	08009fb7 	.word	0x08009fb7
 8009f30:	08009fb7 	.word	0x08009fb7
 8009f34:	08009fb7 	.word	0x08009fb7
 8009f38:	08009fb7 	.word	0x08009fb7
 8009f3c:	08009fb7 	.word	0x08009fb7
 8009f40:	08009fb7 	.word	0x08009fb7
 8009f44:	08009fb7 	.word	0x08009fb7
 8009f48:	08009fa9 	.word	0x08009fa9
 8009f4c:	2b40      	cmp	r3, #64	; 0x40
 8009f4e:	d02e      	beq.n	8009fae <UART_SetConfig+0x8a2>
 8009f50:	e031      	b.n	8009fb6 <UART_SetConfig+0x8aa>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f52:	f7fd fd33 	bl	80079bc <HAL_RCC_GetPCLK1Freq>
 8009f56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f58:	e033      	b.n	8009fc2 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f5a:	f7fd fd45 	bl	80079e8 <HAL_RCC_GetPCLK2Freq>
 8009f5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009f60:	e02f      	b.n	8009fc2 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f62:	f107 0314 	add.w	r3, r7, #20
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe fcdc 	bl	8008924 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f70:	e027      	b.n	8009fc2 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f72:	f107 0308 	add.w	r3, r7, #8
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fe fe28 	bl	8008bcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f80:	e01f      	b.n	8009fc2 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f82:	4b58      	ldr	r3, [pc, #352]	; (800a0e4 <UART_SetConfig+0x9d8>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f003 0320 	and.w	r3, r3, #32
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d009      	beq.n	8009fa2 <UART_SetConfig+0x896>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f8e:	4b55      	ldr	r3, [pc, #340]	; (800a0e4 <UART_SetConfig+0x9d8>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	08db      	lsrs	r3, r3, #3
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	4a53      	ldr	r2, [pc, #332]	; (800a0e8 <UART_SetConfig+0x9dc>)
 8009f9a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fa0:	e00f      	b.n	8009fc2 <UART_SetConfig+0x8b6>
          pclk = (uint32_t) HSI_VALUE;
 8009fa2:	4b51      	ldr	r3, [pc, #324]	; (800a0e8 <UART_SetConfig+0x9dc>)
 8009fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fa6:	e00c      	b.n	8009fc2 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fa8:	4b4c      	ldr	r3, [pc, #304]	; (800a0dc <UART_SetConfig+0x9d0>)
 8009faa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fac:	e009      	b.n	8009fc2 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009fb4:	e005      	b.n	8009fc2 <UART_SetConfig+0x8b6>
      default:
        pclk = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f000 80ea 	beq.w	800a19e <UART_SetConfig+0xa92>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	4a44      	ldr	r2, [pc, #272]	; (800a0e0 <UART_SetConfig+0x9d4>)
 8009fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fd4:	461a      	mov	r2, r3
 8009fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fdc:	005a      	lsls	r2, r3, #1
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	085b      	lsrs	r3, r3, #1
 8009fe4:	441a      	add	r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff4:	2b0f      	cmp	r3, #15
 8009ff6:	d916      	bls.n	800a026 <UART_SetConfig+0x91a>
 8009ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ffe:	d212      	bcs.n	800a026 <UART_SetConfig+0x91a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a002:	b29b      	uxth	r3, r3
 800a004:	f023 030f 	bic.w	r3, r3, #15
 800a008:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a00c:	085b      	lsrs	r3, r3, #1
 800a00e:	b29b      	uxth	r3, r3
 800a010:	f003 0307 	and.w	r3, r3, #7
 800a014:	b29a      	uxth	r2, r3
 800a016:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a018:	4313      	orrs	r3, r2
 800a01a:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a022:	60da      	str	r2, [r3, #12]
 800a024:	e0bb      	b.n	800a19e <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a02c:	e0b7      	b.n	800a19e <UART_SetConfig+0xa92>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a02e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a032:	2b20      	cmp	r3, #32
 800a034:	dc4a      	bgt.n	800a0cc <UART_SetConfig+0x9c0>
 800a036:	2b00      	cmp	r3, #0
 800a038:	f2c0 8086 	blt.w	800a148 <UART_SetConfig+0xa3c>
 800a03c:	2b20      	cmp	r3, #32
 800a03e:	f200 8083 	bhi.w	800a148 <UART_SetConfig+0xa3c>
 800a042:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <UART_SetConfig+0x93c>)
 800a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a048:	0800a0d3 	.word	0x0800a0d3
 800a04c:	0800a0ed 	.word	0x0800a0ed
 800a050:	0800a149 	.word	0x0800a149
 800a054:	0800a149 	.word	0x0800a149
 800a058:	0800a0f5 	.word	0x0800a0f5
 800a05c:	0800a149 	.word	0x0800a149
 800a060:	0800a149 	.word	0x0800a149
 800a064:	0800a149 	.word	0x0800a149
 800a068:	0800a105 	.word	0x0800a105
 800a06c:	0800a149 	.word	0x0800a149
 800a070:	0800a149 	.word	0x0800a149
 800a074:	0800a149 	.word	0x0800a149
 800a078:	0800a149 	.word	0x0800a149
 800a07c:	0800a149 	.word	0x0800a149
 800a080:	0800a149 	.word	0x0800a149
 800a084:	0800a149 	.word	0x0800a149
 800a088:	0800a115 	.word	0x0800a115
 800a08c:	0800a149 	.word	0x0800a149
 800a090:	0800a149 	.word	0x0800a149
 800a094:	0800a149 	.word	0x0800a149
 800a098:	0800a149 	.word	0x0800a149
 800a09c:	0800a149 	.word	0x0800a149
 800a0a0:	0800a149 	.word	0x0800a149
 800a0a4:	0800a149 	.word	0x0800a149
 800a0a8:	0800a149 	.word	0x0800a149
 800a0ac:	0800a149 	.word	0x0800a149
 800a0b0:	0800a149 	.word	0x0800a149
 800a0b4:	0800a149 	.word	0x0800a149
 800a0b8:	0800a149 	.word	0x0800a149
 800a0bc:	0800a149 	.word	0x0800a149
 800a0c0:	0800a149 	.word	0x0800a149
 800a0c4:	0800a149 	.word	0x0800a149
 800a0c8:	0800a13b 	.word	0x0800a13b
 800a0cc:	2b40      	cmp	r3, #64	; 0x40
 800a0ce:	d037      	beq.n	800a140 <UART_SetConfig+0xa34>
 800a0d0:	e03a      	b.n	800a148 <UART_SetConfig+0xa3c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0d2:	f7fd fc73 	bl	80079bc <HAL_RCC_GetPCLK1Freq>
 800a0d6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0d8:	e03c      	b.n	800a154 <UART_SetConfig+0xa48>
 800a0da:	bf00      	nop
 800a0dc:	003d0900 	.word	0x003d0900
 800a0e0:	0800af68 	.word	0x0800af68
 800a0e4:	58024400 	.word	0x58024400
 800a0e8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0ec:	f7fd fc7c 	bl	80079e8 <HAL_RCC_GetPCLK2Freq>
 800a0f0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a0f2:	e02f      	b.n	800a154 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0f4:	f107 0314 	add.w	r3, r7, #20
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fe fc13 	bl	8008924 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a102:	e027      	b.n	800a154 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a104:	f107 0308 	add.w	r3, r7, #8
 800a108:	4618      	mov	r0, r3
 800a10a:	f7fe fd5f 	bl	8008bcc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a112:	e01f      	b.n	800a154 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a114:	4b2c      	ldr	r3, [pc, #176]	; (800a1c8 <UART_SetConfig+0xabc>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0320 	and.w	r3, r3, #32
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d009      	beq.n	800a134 <UART_SetConfig+0xa28>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a120:	4b29      	ldr	r3, [pc, #164]	; (800a1c8 <UART_SetConfig+0xabc>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	08db      	lsrs	r3, r3, #3
 800a126:	f003 0303 	and.w	r3, r3, #3
 800a12a:	4a28      	ldr	r2, [pc, #160]	; (800a1cc <UART_SetConfig+0xac0>)
 800a12c:	fa22 f303 	lsr.w	r3, r2, r3
 800a130:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a132:	e00f      	b.n	800a154 <UART_SetConfig+0xa48>
          pclk = (uint32_t) HSI_VALUE;
 800a134:	4b25      	ldr	r3, [pc, #148]	; (800a1cc <UART_SetConfig+0xac0>)
 800a136:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a138:	e00c      	b.n	800a154 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a13a:	4b25      	ldr	r3, [pc, #148]	; (800a1d0 <UART_SetConfig+0xac4>)
 800a13c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a13e:	e009      	b.n	800a154 <UART_SetConfig+0xa48>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a144:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a146:	e005      	b.n	800a154 <UART_SetConfig+0xa48>
      default:
        pclk = 0U;
 800a148:	2300      	movs	r3, #0
 800a14a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a152:	bf00      	nop
    }

    if (pclk != 0U)
 800a154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a156:	2b00      	cmp	r3, #0
 800a158:	d021      	beq.n	800a19e <UART_SetConfig+0xa92>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15e:	4a1d      	ldr	r2, [pc, #116]	; (800a1d4 <UART_SetConfig+0xac8>)
 800a160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a164:	461a      	mov	r2, r3
 800a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a168:	fbb3 f2f2 	udiv	r2, r3, r2
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	085b      	lsrs	r3, r3, #1
 800a172:	441a      	add	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	fbb2 f3f3 	udiv	r3, r2, r3
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a182:	2b0f      	cmp	r3, #15
 800a184:	d908      	bls.n	800a198 <UART_SetConfig+0xa8c>
 800a186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a18c:	d204      	bcs.n	800a198 <UART_SetConfig+0xa8c>
      {
        huart->Instance->BRR = usartdiv;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a194:	60da      	str	r2, [r3, #12]
 800a196:	e002      	b.n	800a19e <UART_SetConfig+0xa92>
      }
      else
      {
        ret = HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a1ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3738      	adds	r7, #56	; 0x38
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bdb0      	pop	{r4, r5, r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	58024400 	.word	0x58024400
 800a1cc:	03d09000 	.word	0x03d09000
 800a1d0:	003d0900 	.word	0x003d0900
 800a1d4:	0800af68 	.word	0x0800af68

0800a1d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00a      	beq.n	800a202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	430a      	orrs	r2, r1
 800a200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a206:	f003 0302 	and.w	r3, r3, #2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00a      	beq.n	800a224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	430a      	orrs	r2, r1
 800a222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a228:	f003 0304 	and.w	r3, r3, #4
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d00a      	beq.n	800a246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	430a      	orrs	r2, r1
 800a244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24a:	f003 0308 	and.w	r3, r3, #8
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00a      	beq.n	800a268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	430a      	orrs	r2, r1
 800a266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26c:	f003 0310 	and.w	r3, r3, #16
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00a      	beq.n	800a28a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28e:	f003 0320 	and.w	r3, r3, #32
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d01a      	beq.n	800a2ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2d6:	d10a      	bne.n	800a2ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	430a      	orrs	r2, r1
 800a2ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d00a      	beq.n	800a310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	430a      	orrs	r2, r1
 800a30e:	605a      	str	r2, [r3, #4]
  }
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b086      	sub	sp, #24
 800a320:	af02      	add	r7, sp, #8
 800a322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a32c:	f7fa fca4 	bl	8004c78 <HAL_GetTick>
 800a330:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 0308 	and.w	r3, r3, #8
 800a33c:	2b08      	cmp	r3, #8
 800a33e:	d10e      	bne.n	800a35e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f82c 	bl	800a3ac <UART_WaitOnFlagUntilTimeout>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d001      	beq.n	800a35e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e022      	b.n	800a3a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 0304 	and.w	r3, r3, #4
 800a368:	2b04      	cmp	r3, #4
 800a36a:	d10e      	bne.n	800a38a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a36c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2200      	movs	r2, #0
 800a376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f816 	bl	800a3ac <UART_WaitOnFlagUntilTimeout>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a386:	2303      	movs	r3, #3
 800a388:	e00c      	b.n	800a3a4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2220      	movs	r2, #32
 800a38e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2220      	movs	r2, #32
 800a396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	60f8      	str	r0, [r7, #12]
 800a3b4:	60b9      	str	r1, [r7, #8]
 800a3b6:	603b      	str	r3, [r7, #0]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3bc:	e062      	b.n	800a484 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3c4:	d05e      	beq.n	800a484 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3c6:	f7fa fc57 	bl	8004c78 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	69ba      	ldr	r2, [r7, #24]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d302      	bcc.n	800a3dc <UART_WaitOnFlagUntilTimeout+0x30>
 800a3d6:	69bb      	ldr	r3, [r7, #24]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d11d      	bne.n	800a418 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681a      	ldr	r2, [r3, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a3ea:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	689a      	ldr	r2, [r3, #8]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f022 0201 	bic.w	r2, r2, #1
 800a3fa:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2220      	movs	r2, #32
 800a400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2220      	movs	r2, #32
 800a408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a414:	2303      	movs	r3, #3
 800a416:	e045      	b.n	800a4a4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0304 	and.w	r3, r3, #4
 800a422:	2b00      	cmp	r3, #0
 800a424:	d02e      	beq.n	800a484 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a434:	d126      	bne.n	800a484 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a43e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a44e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689a      	ldr	r2, [r3, #8]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f022 0201 	bic.w	r2, r2, #1
 800a45e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2220      	movs	r2, #32
 800a464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2220      	movs	r2, #32
 800a474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e00f      	b.n	800a4a4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	69da      	ldr	r2, [r3, #28]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4013      	ands	r3, r2
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	429a      	cmp	r2, r3
 800a492:	bf0c      	ite	eq
 800a494:	2301      	moveq	r3, #1
 800a496:	2300      	movne	r3, #0
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	461a      	mov	r2, r3
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d08d      	beq.n	800a3be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4a2:	2300      	movs	r3, #0
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4be:	2302      	movs	r3, #2
 800a4c0:	e027      	b.n	800a512 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2224      	movs	r2, #36	; 0x24
 800a4ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681a      	ldr	r2, [r3, #0]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f022 0201 	bic.w	r2, r2, #1
 800a4e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a4f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2220      	movs	r2, #32
 800a504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3714      	adds	r7, #20
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a51e:	b580      	push	{r7, lr}
 800a520:	b084      	sub	sp, #16
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
 800a526:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d101      	bne.n	800a536 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a532:	2302      	movs	r3, #2
 800a534:	e02d      	b.n	800a592 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2224      	movs	r2, #36	; 0x24
 800a542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f022 0201 	bic.w	r2, r2, #1
 800a55c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	430a      	orrs	r2, r1
 800a570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f850 	bl	800a618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2220      	movs	r2, #32
 800a584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a590:	2300      	movs	r3, #0
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d101      	bne.n	800a5b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e02d      	b.n	800a60e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2224      	movs	r2, #36	; 0x24
 800a5be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f022 0201 	bic.w	r2, r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	430a      	orrs	r2, r1
 800a5ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f812 	bl	800a618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2220      	movs	r2, #32
 800a600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3710      	adds	r7, #16
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
	...

0800a618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a618:	b480      	push	{r7}
 800a61a:	b089      	sub	sp, #36	; 0x24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a620:	4a2f      	ldr	r2, [pc, #188]	; (800a6e0 <UARTEx_SetNbDataToProcess+0xc8>)
 800a622:	f107 0314 	add.w	r3, r7, #20
 800a626:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a62a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a62e:	4a2d      	ldr	r2, [pc, #180]	; (800a6e4 <UARTEx_SetNbDataToProcess+0xcc>)
 800a630:	f107 030c 	add.w	r3, r7, #12
 800a634:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a638:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a640:	2b00      	cmp	r3, #0
 800a642:	d108      	bne.n	800a656 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a654:	e03d      	b.n	800a6d2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a656:	2310      	movs	r3, #16
 800a658:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a65a:	2310      	movs	r3, #16
 800a65c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	689b      	ldr	r3, [r3, #8]
 800a664:	0e5b      	lsrs	r3, r3, #25
 800a666:	b2db      	uxtb	r3, r3
 800a668:	f003 0307 	and.w	r3, r3, #7
 800a66c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	0f5b      	lsrs	r3, r3, #29
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a67e:	7fbb      	ldrb	r3, [r7, #30]
 800a680:	7f3a      	ldrb	r2, [r7, #28]
 800a682:	f107 0120 	add.w	r1, r7, #32
 800a686:	440a      	add	r2, r1
 800a688:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a68c:	fb02 f303 	mul.w	r3, r2, r3
 800a690:	7f3a      	ldrb	r2, [r7, #28]
 800a692:	f107 0120 	add.w	r1, r7, #32
 800a696:	440a      	add	r2, r1
 800a698:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a69c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a6a8:	7ffb      	ldrb	r3, [r7, #31]
 800a6aa:	7f7a      	ldrb	r2, [r7, #29]
 800a6ac:	f107 0120 	add.w	r1, r7, #32
 800a6b0:	440a      	add	r2, r1
 800a6b2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a6b6:	fb02 f303 	mul.w	r3, r2, r3
 800a6ba:	7f7a      	ldrb	r2, [r7, #29]
 800a6bc:	f107 0120 	add.w	r1, r7, #32
 800a6c0:	440a      	add	r2, r1
 800a6c2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a6c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a6d2:	bf00      	nop
 800a6d4:	3724      	adds	r7, #36	; 0x24
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	0800aef8 	.word	0x0800aef8
 800a6e4:	0800af00 	.word	0x0800af00

0800a6e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b084      	sub	sp, #16
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	f107 001c 	add.w	r0, r7, #28
 800a6f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d120      	bne.n	800a742 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68da      	ldr	r2, [r3, #12]
 800a710:	4b25      	ldr	r3, [pc, #148]	; (800a7a8 <USB_CoreInit+0xc0>)
 800a712:	4013      	ands	r3, r2
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a726:	2b01      	cmp	r3, #1
 800a728:	d105      	bne.n	800a736 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f000 fa4c 	bl	800abd4 <USB_CoreReset>
 800a73c:	4603      	mov	r3, r0
 800a73e:	73fb      	strb	r3, [r7, #15]
 800a740:	e01a      	b.n	800a778 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 fa40 	bl	800abd4 <USB_CoreReset>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d106      	bne.n	800a76c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	639a      	str	r2, [r3, #56]	; 0x38
 800a76a:	e005      	b.n	800a778 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a770:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d10b      	bne.n	800a796 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	689b      	ldr	r3, [r3, #8]
 800a782:	f043 0206 	orr.w	r2, r3, #6
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f043 0220 	orr.w	r2, r3, #32
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a796:	7bfb      	ldrb	r3, [r7, #15]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7a2:	b004      	add	sp, #16
 800a7a4:	4770      	bx	lr
 800a7a6:	bf00      	nop
 800a7a8:	ffbdffbf 	.word	0xffbdffbf

0800a7ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f023 0201 	bic.w	r2, r3, #1
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	370c      	adds	r7, #12
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a7e6:	78fb      	ldrb	r3, [r7, #3]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d106      	bne.n	800a7fa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	60da      	str	r2, [r3, #12]
 800a7f8:	e00b      	b.n	800a812 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a7fa:	78fb      	ldrb	r3, [r7, #3]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d106      	bne.n	800a80e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	60da      	str	r2, [r3, #12]
 800a80c:	e001      	b.n	800a812 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e003      	b.n	800a81a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a812:	2032      	movs	r0, #50	; 0x32
 800a814:	f7fa fa3c 	bl	8004c90 <HAL_Delay>

  return HAL_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3708      	adds	r7, #8
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
	...

0800a824 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a824:	b084      	sub	sp, #16
 800a826:	b580      	push	{r7, lr}
 800a828:	b086      	sub	sp, #24
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a836:	2300      	movs	r3, #0
 800a838:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a83e:	2300      	movs	r3, #0
 800a840:	613b      	str	r3, [r7, #16]
 800a842:	e009      	b.n	800a858 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	3340      	adds	r3, #64	; 0x40
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	4413      	add	r3, r2
 800a84e:	2200      	movs	r2, #0
 800a850:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	3301      	adds	r3, #1
 800a856:	613b      	str	r3, [r7, #16]
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	2b0e      	cmp	r3, #14
 800a85c:	d9f2      	bls.n	800a844 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a860:	2b00      	cmp	r3, #0
 800a862:	d11c      	bne.n	800a89e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a872:	f043 0302 	orr.w	r3, r3, #2
 800a876:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a87c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	e005      	b.n	800a8aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8bc:	4619      	mov	r1, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	680b      	ldr	r3, [r1, #0]
 800a8c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d10c      	bne.n	800a8ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d104      	bne.n	800a8e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a8d6:	2100      	movs	r1, #0
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f000 f949 	bl	800ab70 <USB_SetDevSpeed>
 800a8de:	e008      	b.n	800a8f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 f944 	bl	800ab70 <USB_SetDevSpeed>
 800a8e8:	e003      	b.n	800a8f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a8ea:	2103      	movs	r1, #3
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f93f 	bl	800ab70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a8f2:	2110      	movs	r1, #16
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f000 f8f3 	bl	800aae0 <USB_FlushTxFifo>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a900:	2301      	movs	r3, #1
 800a902:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f911 	bl	800ab2c <USB_FlushRxFifo>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a91a:	461a      	mov	r2, r3
 800a91c:	2300      	movs	r3, #0
 800a91e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a926:	461a      	mov	r2, r3
 800a928:	2300      	movs	r3, #0
 800a92a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a932:	461a      	mov	r2, r3
 800a934:	2300      	movs	r3, #0
 800a936:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a938:	2300      	movs	r3, #0
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	e043      	b.n	800a9c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	015a      	lsls	r2, r3, #5
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4413      	add	r3, r2
 800a946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a950:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a954:	d118      	bne.n	800a988 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a968:	461a      	mov	r2, r3
 800a96a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a96e:	6013      	str	r3, [r2, #0]
 800a970:	e013      	b.n	800a99a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a97e:	461a      	mov	r2, r3
 800a980:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	e008      	b.n	800a99a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a994:	461a      	mov	r2, r3
 800a996:	2300      	movs	r3, #0
 800a998:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	015a      	lsls	r2, r3, #5
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a9be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	613b      	str	r3, [r7, #16]
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	693a      	ldr	r2, [r7, #16]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d3b7      	bcc.n	800a93e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	613b      	str	r3, [r7, #16]
 800a9d2:	e043      	b.n	800aa5c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	015a      	lsls	r2, r3, #5
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	4413      	add	r3, r2
 800a9dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9ea:	d118      	bne.n	800aa1e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d10a      	bne.n	800aa08 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	015a      	lsls	r2, r3, #5
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa04:	6013      	str	r3, [r2, #0]
 800aa06:	e013      	b.n	800aa30 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	015a      	lsls	r2, r3, #5
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	4413      	add	r3, r2
 800aa10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa14:	461a      	mov	r2, r3
 800aa16:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa1a:	6013      	str	r3, [r2, #0]
 800aa1c:	e008      	b.n	800aa30 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	015a      	lsls	r2, r3, #5
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	2300      	movs	r3, #0
 800aa40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa54:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	613b      	str	r3, [r7, #16]
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	693a      	ldr	r2, [r7, #16]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d3b7      	bcc.n	800a9d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	68fa      	ldr	r2, [r7, #12]
 800aa6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa76:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aa84:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d105      	bne.n	800aa98 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	f043 0210 	orr.w	r2, r3, #16
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	699a      	ldr	r2, [r3, #24]
 800aa9c:	4b0e      	ldr	r3, [pc, #56]	; (800aad8 <USB_DevInit+0x2b4>)
 800aa9e:	4313      	orrs	r3, r2
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aaa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d005      	beq.n	800aab6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	699b      	ldr	r3, [r3, #24]
 800aaae:	f043 0208 	orr.w	r2, r3, #8
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	d105      	bne.n	800aac8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	699a      	ldr	r2, [r3, #24]
 800aac0:	4b06      	ldr	r3, [pc, #24]	; (800aadc <USB_DevInit+0x2b8>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aad4:	b004      	add	sp, #16
 800aad6:	4770      	bx	lr
 800aad8:	803c3800 	.word	0x803c3800
 800aadc:	40000004 	.word	0x40000004

0800aae0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	019b      	lsls	r3, r3, #6
 800aaf2:	f043 0220 	orr.w	r2, r3, #32
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	3301      	adds	r3, #1
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	4a09      	ldr	r2, [pc, #36]	; (800ab28 <USB_FlushTxFifo+0x48>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d901      	bls.n	800ab0c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	e006      	b.n	800ab1a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	f003 0320 	and.w	r3, r3, #32
 800ab14:	2b20      	cmp	r3, #32
 800ab16:	d0f0      	beq.n	800aafa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	00030d40 	.word	0x00030d40

0800ab2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2210      	movs	r2, #16
 800ab3c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3301      	adds	r3, #1
 800ab42:	60fb      	str	r3, [r7, #12]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4a09      	ldr	r2, [pc, #36]	; (800ab6c <USB_FlushRxFifo+0x40>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d901      	bls.n	800ab50 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e006      	b.n	800ab5e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	f003 0310 	and.w	r3, r3, #16
 800ab58:	2b10      	cmp	r3, #16
 800ab5a:	d0f0      	beq.n	800ab3e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3714      	adds	r7, #20
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	00030d40 	.word	0x00030d40

0800ab70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b085      	sub	sp, #20
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
 800ab78:	460b      	mov	r3, r1
 800ab7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	78fb      	ldrb	r3, [r7, #3]
 800ab8a:	68f9      	ldr	r1, [r7, #12]
 800ab8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab90:	4313      	orrs	r3, r2
 800ab92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b084      	sub	sp, #16
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abbc:	f043 0302 	orr.w	r3, r3, #2
 800abc0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800abc2:	2003      	movs	r0, #3
 800abc4:	f7fa f864 	bl	8004c90 <HAL_Delay>

  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
	...

0800abd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800abdc:	2300      	movs	r3, #0
 800abde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3301      	adds	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	4a13      	ldr	r2, [pc, #76]	; (800ac38 <USB_CoreReset+0x64>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d901      	bls.n	800abf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800abee:	2303      	movs	r3, #3
 800abf0:	e01b      	b.n	800ac2a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	daf2      	bge.n	800abe0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abfa:	2300      	movs	r3, #0
 800abfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	f043 0201 	orr.w	r2, r3, #1
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	4a09      	ldr	r2, [pc, #36]	; (800ac38 <USB_CoreReset+0x64>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d901      	bls.n	800ac1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	e006      	b.n	800ac2a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	f003 0301 	and.w	r3, r3, #1
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d0f0      	beq.n	800ac0a <USB_CoreReset+0x36>

  return HAL_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3714      	adds	r7, #20
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac34:	4770      	bx	lr
 800ac36:	bf00      	nop
 800ac38:	00030d40 	.word	0x00030d40

0800ac3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ac40:	4b3f      	ldr	r3, [pc, #252]	; (800ad40 <SystemInit+0x104>)
 800ac42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac46:	4a3e      	ldr	r2, [pc, #248]	; (800ad40 <SystemInit+0x104>)
 800ac48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800ac50:	4b3b      	ldr	r3, [pc, #236]	; (800ad40 <SystemInit+0x104>)
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	4a3a      	ldr	r2, [pc, #232]	; (800ad40 <SystemInit+0x104>)
 800ac56:	f043 0310 	orr.w	r3, r3, #16
 800ac5a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ac5c:	4b39      	ldr	r3, [pc, #228]	; (800ad44 <SystemInit+0x108>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 030f 	and.w	r3, r3, #15
 800ac64:	2b06      	cmp	r3, #6
 800ac66:	d807      	bhi.n	800ac78 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800ac68:	4b36      	ldr	r3, [pc, #216]	; (800ad44 <SystemInit+0x108>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f023 030f 	bic.w	r3, r3, #15
 800ac70:	4a34      	ldr	r2, [pc, #208]	; (800ad44 <SystemInit+0x108>)
 800ac72:	f043 0307 	orr.w	r3, r3, #7
 800ac76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800ac78:	4b33      	ldr	r3, [pc, #204]	; (800ad48 <SystemInit+0x10c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a32      	ldr	r2, [pc, #200]	; (800ad48 <SystemInit+0x10c>)
 800ac7e:	f043 0301 	orr.w	r3, r3, #1
 800ac82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ac84:	4b30      	ldr	r3, [pc, #192]	; (800ad48 <SystemInit+0x10c>)
 800ac86:	2200      	movs	r2, #0
 800ac88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800ac8a:	4b2f      	ldr	r3, [pc, #188]	; (800ad48 <SystemInit+0x10c>)
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	492e      	ldr	r1, [pc, #184]	; (800ad48 <SystemInit+0x10c>)
 800ac90:	4b2e      	ldr	r3, [pc, #184]	; (800ad4c <SystemInit+0x110>)
 800ac92:	4013      	ands	r3, r2
 800ac94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ac96:	4b2b      	ldr	r3, [pc, #172]	; (800ad44 <SystemInit+0x108>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f003 0308 	and.w	r3, r3, #8
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d007      	beq.n	800acb2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800aca2:	4b28      	ldr	r3, [pc, #160]	; (800ad44 <SystemInit+0x108>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f023 030f 	bic.w	r3, r3, #15
 800acaa:	4a26      	ldr	r2, [pc, #152]	; (800ad44 <SystemInit+0x108>)
 800acac:	f043 0307 	orr.w	r3, r3, #7
 800acb0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800acb2:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <SystemInit+0x10c>)
 800acb4:	2200      	movs	r2, #0
 800acb6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800acb8:	4b23      	ldr	r3, [pc, #140]	; (800ad48 <SystemInit+0x10c>)
 800acba:	2200      	movs	r2, #0
 800acbc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800acbe:	4b22      	ldr	r3, [pc, #136]	; (800ad48 <SystemInit+0x10c>)
 800acc0:	2200      	movs	r2, #0
 800acc2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800acc4:	4b20      	ldr	r3, [pc, #128]	; (800ad48 <SystemInit+0x10c>)
 800acc6:	4a22      	ldr	r2, [pc, #136]	; (800ad50 <SystemInit+0x114>)
 800acc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800acca:	4b1f      	ldr	r3, [pc, #124]	; (800ad48 <SystemInit+0x10c>)
 800accc:	4a21      	ldr	r2, [pc, #132]	; (800ad54 <SystemInit+0x118>)
 800acce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800acd0:	4b1d      	ldr	r3, [pc, #116]	; (800ad48 <SystemInit+0x10c>)
 800acd2:	4a21      	ldr	r2, [pc, #132]	; (800ad58 <SystemInit+0x11c>)
 800acd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800acd6:	4b1c      	ldr	r3, [pc, #112]	; (800ad48 <SystemInit+0x10c>)
 800acd8:	2200      	movs	r2, #0
 800acda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800acdc:	4b1a      	ldr	r3, [pc, #104]	; (800ad48 <SystemInit+0x10c>)
 800acde:	4a1e      	ldr	r2, [pc, #120]	; (800ad58 <SystemInit+0x11c>)
 800ace0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800ace2:	4b19      	ldr	r3, [pc, #100]	; (800ad48 <SystemInit+0x10c>)
 800ace4:	2200      	movs	r2, #0
 800ace6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800ace8:	4b17      	ldr	r3, [pc, #92]	; (800ad48 <SystemInit+0x10c>)
 800acea:	4a1b      	ldr	r2, [pc, #108]	; (800ad58 <SystemInit+0x11c>)
 800acec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800acee:	4b16      	ldr	r3, [pc, #88]	; (800ad48 <SystemInit+0x10c>)
 800acf0:	2200      	movs	r2, #0
 800acf2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800acf4:	4b14      	ldr	r3, [pc, #80]	; (800ad48 <SystemInit+0x10c>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a13      	ldr	r2, [pc, #76]	; (800ad48 <SystemInit+0x10c>)
 800acfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800acfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ad00:	4b11      	ldr	r3, [pc, #68]	; (800ad48 <SystemInit+0x10c>)
 800ad02:	2200      	movs	r2, #0
 800ad04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800ad06:	4b15      	ldr	r3, [pc, #84]	; (800ad5c <SystemInit+0x120>)
 800ad08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0a:	4a14      	ldr	r2, [pc, #80]	; (800ad5c <SystemInit+0x120>)
 800ad0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad10:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800ad12:	4b13      	ldr	r3, [pc, #76]	; (800ad60 <SystemInit+0x124>)
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <SystemInit+0x128>)
 800ad18:	4013      	ands	r3, r2
 800ad1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad1e:	d202      	bcs.n	800ad26 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800ad20:	4b11      	ldr	r3, [pc, #68]	; (800ad68 <SystemInit+0x12c>)
 800ad22:	2201      	movs	r2, #1
 800ad24:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800ad26:	4b11      	ldr	r3, [pc, #68]	; (800ad6c <SystemInit+0x130>)
 800ad28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800ad2c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800ad2e:	4b04      	ldr	r3, [pc, #16]	; (800ad40 <SystemInit+0x104>)
 800ad30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ad34:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800ad36:	bf00      	nop
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3e:	4770      	bx	lr
 800ad40:	e000ed00 	.word	0xe000ed00
 800ad44:	52002000 	.word	0x52002000
 800ad48:	58024400 	.word	0x58024400
 800ad4c:	eaf6ed7f 	.word	0xeaf6ed7f
 800ad50:	02020200 	.word	0x02020200
 800ad54:	01ff0000 	.word	0x01ff0000
 800ad58:	01010280 	.word	0x01010280
 800ad5c:	580000c0 	.word	0x580000c0
 800ad60:	5c001000 	.word	0x5c001000
 800ad64:	ffff0000 	.word	0xffff0000
 800ad68:	51008108 	.word	0x51008108
 800ad6c:	52004000 	.word	0x52004000

0800ad70 <_Znwj>:
  * @param[in]  size_t size
  *
  * @return void *
********************************************************************************/
void * operator new(size_t size) noexcept
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
	void *ptr;

	if ( IS_NOT( size ) )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d102      	bne.n	800ad84 <_Znwj+0x14>
	{
		++size;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	3301      	adds	r3, #1
 800ad82:	607b      	str	r3, [r7, #4]
	}

	ptr = malloc(size);
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f7f9 fe0f 	bl	80049a8 <malloc>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	60fb      	str	r3, [r7, #12]

	return ptr;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3710      	adds	r7, #16
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <_ZdlPvj>:
  * @param[in]  size_t size
	*
  * @return none
********************************************************************************/
void operator delete(void* ptr, size_t size) noexcept
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	6039      	str	r1, [r7, #0]
	free(ptr);
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f7f9 fe8e 	bl	8004ac4 <free>
	__SUPRESS_UNUSED_VAR(size);
}
 800ada8:	bf00      	nop
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <__libc_init_array>:
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	4d0d      	ldr	r5, [pc, #52]	; (800ade8 <__libc_init_array+0x38>)
 800adb4:	4c0d      	ldr	r4, [pc, #52]	; (800adec <__libc_init_array+0x3c>)
 800adb6:	1b64      	subs	r4, r4, r5
 800adb8:	10a4      	asrs	r4, r4, #2
 800adba:	2600      	movs	r6, #0
 800adbc:	42a6      	cmp	r6, r4
 800adbe:	d109      	bne.n	800add4 <__libc_init_array+0x24>
 800adc0:	4d0b      	ldr	r5, [pc, #44]	; (800adf0 <__libc_init_array+0x40>)
 800adc2:	4c0c      	ldr	r4, [pc, #48]	; (800adf4 <__libc_init_array+0x44>)
 800adc4:	f000 f88c 	bl	800aee0 <_init>
 800adc8:	1b64      	subs	r4, r4, r5
 800adca:	10a4      	asrs	r4, r4, #2
 800adcc:	2600      	movs	r6, #0
 800adce:	42a6      	cmp	r6, r4
 800add0:	d105      	bne.n	800adde <__libc_init_array+0x2e>
 800add2:	bd70      	pop	{r4, r5, r6, pc}
 800add4:	f855 3b04 	ldr.w	r3, [r5], #4
 800add8:	4798      	blx	r3
 800adda:	3601      	adds	r6, #1
 800addc:	e7ee      	b.n	800adbc <__libc_init_array+0xc>
 800adde:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade2:	4798      	blx	r3
 800ade4:	3601      	adds	r6, #1
 800ade6:	e7f2      	b.n	800adce <__libc_init_array+0x1e>
 800ade8:	0800b0a0 	.word	0x0800b0a0
 800adec:	0800b0a0 	.word	0x0800b0a0
 800adf0:	0800b0a0 	.word	0x0800b0a0
 800adf4:	0800b0a4 	.word	0x0800b0a4

0800adf8 <memset>:
 800adf8:	4402      	add	r2, r0
 800adfa:	4603      	mov	r3, r0
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d100      	bne.n	800ae02 <memset+0xa>
 800ae00:	4770      	bx	lr
 800ae02:	f803 1b01 	strb.w	r1, [r3], #1
 800ae06:	e7f9      	b.n	800adfc <memset+0x4>

0800ae08 <abort>:
 800ae08:	b508      	push	{r3, lr}
 800ae0a:	2006      	movs	r0, #6
 800ae0c:	f000 f83a 	bl	800ae84 <raise>
 800ae10:	2001      	movs	r0, #1
 800ae12:	f000 f863 	bl	800aedc <_exit>

0800ae16 <memcpy>:
 800ae16:	440a      	add	r2, r1
 800ae18:	4291      	cmp	r1, r2
 800ae1a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae1e:	d100      	bne.n	800ae22 <memcpy+0xc>
 800ae20:	4770      	bx	lr
 800ae22:	b510      	push	{r4, lr}
 800ae24:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae28:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae2c:	4291      	cmp	r1, r2
 800ae2e:	d1f9      	bne.n	800ae24 <memcpy+0xe>
 800ae30:	bd10      	pop	{r4, pc}

0800ae32 <_raise_r>:
 800ae32:	291f      	cmp	r1, #31
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4604      	mov	r4, r0
 800ae38:	460d      	mov	r5, r1
 800ae3a:	d904      	bls.n	800ae46 <_raise_r+0x14>
 800ae3c:	2316      	movs	r3, #22
 800ae3e:	6003      	str	r3, [r0, #0]
 800ae40:	f04f 30ff 	mov.w	r0, #4294967295
 800ae44:	bd38      	pop	{r3, r4, r5, pc}
 800ae46:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae48:	b112      	cbz	r2, 800ae50 <_raise_r+0x1e>
 800ae4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae4e:	b94b      	cbnz	r3, 800ae64 <_raise_r+0x32>
 800ae50:	4620      	mov	r0, r4
 800ae52:	f000 f831 	bl	800aeb8 <_getpid_r>
 800ae56:	462a      	mov	r2, r5
 800ae58:	4601      	mov	r1, r0
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae60:	f000 b818 	b.w	800ae94 <_kill_r>
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d00a      	beq.n	800ae7e <_raise_r+0x4c>
 800ae68:	1c59      	adds	r1, r3, #1
 800ae6a:	d103      	bne.n	800ae74 <_raise_r+0x42>
 800ae6c:	2316      	movs	r3, #22
 800ae6e:	6003      	str	r3, [r0, #0]
 800ae70:	2001      	movs	r0, #1
 800ae72:	e7e7      	b.n	800ae44 <_raise_r+0x12>
 800ae74:	2400      	movs	r4, #0
 800ae76:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	4798      	blx	r3
 800ae7e:	2000      	movs	r0, #0
 800ae80:	e7e0      	b.n	800ae44 <_raise_r+0x12>
	...

0800ae84 <raise>:
 800ae84:	4b02      	ldr	r3, [pc, #8]	; (800ae90 <raise+0xc>)
 800ae86:	4601      	mov	r1, r0
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	f7ff bfd2 	b.w	800ae32 <_raise_r>
 800ae8e:	bf00      	nop
 800ae90:	20001810 	.word	0x20001810

0800ae94 <_kill_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d07      	ldr	r5, [pc, #28]	; (800aeb4 <_kill_r+0x20>)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	4611      	mov	r1, r2
 800aea0:	602b      	str	r3, [r5, #0]
 800aea2:	f000 f813 	bl	800aecc <_kill>
 800aea6:	1c43      	adds	r3, r0, #1
 800aea8:	d102      	bne.n	800aeb0 <_kill_r+0x1c>
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	b103      	cbz	r3, 800aeb0 <_kill_r+0x1c>
 800aeae:	6023      	str	r3, [r4, #0]
 800aeb0:	bd38      	pop	{r3, r4, r5, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20001fc8 	.word	0x20001fc8

0800aeb8 <_getpid_r>:
 800aeb8:	f000 b800 	b.w	800aebc <_getpid>

0800aebc <_getpid>:
 800aebc:	4b02      	ldr	r3, [pc, #8]	; (800aec8 <_getpid+0xc>)
 800aebe:	2258      	movs	r2, #88	; 0x58
 800aec0:	601a      	str	r2, [r3, #0]
 800aec2:	f04f 30ff 	mov.w	r0, #4294967295
 800aec6:	4770      	bx	lr
 800aec8:	20001fc8 	.word	0x20001fc8

0800aecc <_kill>:
 800aecc:	4b02      	ldr	r3, [pc, #8]	; (800aed8 <_kill+0xc>)
 800aece:	2258      	movs	r2, #88	; 0x58
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	f04f 30ff 	mov.w	r0, #4294967295
 800aed6:	4770      	bx	lr
 800aed8:	20001fc8 	.word	0x20001fc8

0800aedc <_exit>:
 800aedc:	e7fe      	b.n	800aedc <_exit>
 800aede:	bf00      	nop

0800aee0 <_init>:
 800aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee2:	bf00      	nop
 800aee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aee6:	bc08      	pop	{r3}
 800aee8:	469e      	mov	lr, r3
 800aeea:	4770      	bx	lr

0800aeec <_fini>:
 800aeec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeee:	bf00      	nop
 800aef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aef2:	bc08      	pop	{r3}
 800aef4:	469e      	mov	lr, r3
 800aef6:	4770      	bx	lr
