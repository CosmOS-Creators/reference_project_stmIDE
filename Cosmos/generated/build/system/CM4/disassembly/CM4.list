
../../../../../../Cosmos/generated/build/system/CM4/bin/CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .program_default_CM7_section_init 00000008  20000c00  08100298  00010c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .program_default_CM7_section_noInit 00000000  20000c08  20000c08  00051810  2**0
                  CONTENTS
  3 .program_blinking_led_CM7_section_init 00000008  20001000  081002a0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .program_blinking_led_CM7_section_noInit 00000000  20001008  20001008  00051810  2**0
                  CONTENTS
  5 .program_default_CM4_section_init 00000004  10000c00  081002a8  00020c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .program_default_CM4_section_noInit 00000000  10000c04  10000c04  00051810  2**0
                  CONTENTS
  7 .program_blinking_led_CM4_section_init 00000008  10001000  081002ac  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .program_blinking_led_CM4_section_noInit 00000000  10001008  10001008  00051810  2**0
                  CONTENTS
  9 .os_section_consts 00000800  38000000  081002b4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .os_section_vars 00000400  38008000  08100ab4  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .os_section_funcs 000019ec  08100eb4  08100eb4  00040eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         0000192c  081028a0  081028a0  000428a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .rodata       000000e8  081041cc  081041cc  000441cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .init_array   00000004  081042b4  081042b4  000442b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .fini_array   00000004  081042b8  081042b8  000442b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .data         00000010  10001800  081042bc  00051800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss          0000006c  10001810  081042cc  00051810  2**2
                  ALLOC
 18 .ARM.attributes 0000002e  00000000  00000000  00051810  2**0
                  CONTENTS, READONLY
 19 .debug_line   00023d5c  00000000  00000000  0005183e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   0003308c  00000000  00000000  0007559a  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 00006f5a  00000000  00000000  000a8626  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001418  00000000  00000000  000af580  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0018de5d  00000000  00000000  000b0998  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_ranges 00000fc0  00000000  00000000  0023e7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macro  00040e33  00000000  00000000  0023f7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000079  00000000  00000000  002805eb  2**0
                  CONTENTS, READONLY
 27 .debug_frame  000042b8  00000000  00000000  00280664  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .os_section_funcs:

08100eb4 <buffer_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_readArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8100eb4:	b580      	push	{r7, lr}
 8100eb6:	b098      	sub	sp, #96	; 0x60
 8100eb8:	af00      	add	r7, sp, #0
 8100eba:	60f8      	str	r0, [r7, #12]
 8100ebc:	60b9      	str	r1, [r7, #8]
 8100ebe:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8100ec0:	f000 fb98 	bl	81015f4 <os_getOsVar>
 8100ec4:	64f8      	str	r0, [r7, #76]	; 0x4c
  * @return CosmOS_CoreVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_CoreVariableType * CILcore_getCoreVar(void)
{
    uint32_t result;
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8100ec6:	464b      	mov	r3, r9
 8100ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8100eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8100ecc:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8100ece:	687a      	ldr	r2, [r7, #4]
 8100ed0:	68b9      	ldr	r1, [r7, #8]
 8100ed2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8100ed4:	f000 fb3e 	bl	8101554 <memoryProtection_isMemoryRegionProtected>
 8100ed8:	4603      	mov	r3, r0
 8100eda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8100ede:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8100ee2:	2b00      	cmp	r3, #0
 8100ee4:	d003      	beq.n	8100eee <buffer_readArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8100ee6:	2305      	movs	r3, #5
 8100ee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8100eec:	e06a      	b.n	8100fc4 <buffer_readArray+0x110>
 8100eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8100ef0:	623b      	str	r3, [r7, #32]
 8100ef2:	68fb      	ldr	r3, [r7, #12]
 8100ef4:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * os_getOsBufferVar(CosmOS_OsVariableType * osVar, BitWidthType bufferId)
{
    return (&(osVar->bufferVars[bufferId]));
 8100ef6:	6a3b      	ldr	r3, [r7, #32]
 8100ef8:	689a      	ldr	r2, [r3, #8]
 8100efa:	69fb      	ldr	r3, [r7, #28]
 8100efc:	011b      	lsls	r3, r3, #4
 8100efe:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * readPermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8100f00:	643b      	str	r3, [r7, #64]	; 0x40
 8100f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100f04:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_PermissionsConfigurationType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_PermissionsConfigurationType * buffer_getBufferReadPermission(CosmOS_BufferVariableType * bufferVar)
{
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->readPermission);
 8100f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100f08:	681b      	ldr	r3, [r3, #0]
 8100f0a:	68db      	ldr	r3, [r3, #12]

        readPermission = buffer_getBufferReadPermission( bufferVar );
 8100f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( readPermission, coreVar );
 8100f0e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8100f10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8100f12:	f000 fbff 	bl	8101714 <permission_tryAccess>
 8100f16:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8100f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100f1a:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8100f1e:	d103      	bne.n	8100f28 <buffer_readArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8100f20:	2303      	movs	r3, #3
 8100f22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8100f26:	e04d      	b.n	8100fc4 <buffer_readArray+0x110>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100f28:	b672      	cpsid	i
}
 8100f2a:	bf00      	nop
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void CILinterrupt_disableInterrupts(void)
{
		__disable_irq();
}
 8100f2c:	bf00      	nop
 8100f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100f30:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 8100f32:	69bb      	ldr	r3, [r7, #24]
 8100f34:	681b      	ldr	r3, [r3, #0]
 8100f36:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8100f38:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 8100f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100f3c:	2b00      	cmp	r3, #0
 8100f3e:	d00b      	beq.n	8100f58 <buffer_readArray+0xa4>
 8100f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100f42:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8100f44:	697b      	ldr	r3, [r7, #20]
 8100f46:	681b      	ldr	r3, [r3, #0]
 8100f48:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 8100f4a:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 8100f4c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8100f4e:	f000 ffd5 	bl	8101efc <spinlock_trySpinlock>
 8100f52:	4603      	mov	r3, r0
 8100f54:	657b      	str	r3, [r7, #84]	; 0x54
 8100f56:	e001      	b.n	8100f5c <buffer_readArray+0xa8>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8100f58:	2302      	movs	r3, #2
 8100f5a:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8100f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8100f5e:	2b02      	cmp	r3, #2
 8100f60:	d12a      	bne.n	8100fb8 <buffer_readArray+0x104>
 8100f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100f64:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getFullCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return (bufferVar->fullCells);
 8100f66:	693b      	ldr	r3, [r7, #16]
 8100f68:	68db      	ldr	r3, [r3, #12]
			{
				fullCellsNum = buffer_getFullCellsNum( bufferVar );
 8100f6a:	633b      	str	r3, [r7, #48]	; 0x30

				if ( fullCellsNum >= size)
 8100f6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8100f6e:	687b      	ldr	r3, [r7, #4]
 8100f70:	429a      	cmp	r2, r3
 8100f72:	d316      	bcc.n	8100fa2 <buffer_readArray+0xee>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 8100f74:	68bb      	ldr	r3, [r7, #8]
 8100f76:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8100f78:	2300      	movs	r3, #0
 8100f7a:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8100f7c:	e00c      	b.n	8100f98 <buffer_readArray+0xe4>
					{
						bufferState = buffer_pull( bufferVar, ( userBuffer + userBufferIndex ) );
 8100f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8100f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8100f82:	4413      	add	r3, r2
 8100f84:	4619      	mov	r1, r3
 8100f86:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8100f88:	f000 f8b5 	bl	81010f6 <buffer_pull>
 8100f8c:	4603      	mov	r3, r0
 8100f8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 8100f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8100f94:	3301      	adds	r3, #1
 8100f96:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 8100f98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8100f9a:	687b      	ldr	r3, [r7, #4]
 8100f9c:	429a      	cmp	r2, r3
 8100f9e:	d3ee      	bcc.n	8100f7e <buffer_readArray+0xca>
 8100fa0:	e002      	b.n	8100fa8 <buffer_readArray+0xf4>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM;
 8100fa2:	2307      	movs	r3, #7
 8100fa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 8100fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100faa:	2b00      	cmp	r3, #0
 8100fac:	d007      	beq.n	8100fbe <buffer_readArray+0x10a>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 8100fae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8100fb0:	f000 fff7 	bl	8101fa2 <spinlock_releaseSpinlock>
 8100fb4:	6578      	str	r0, [r7, #84]	; 0x54
 8100fb6:	e002      	b.n	8100fbe <buffer_readArray+0x10a>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 8100fb8:	2304      	movs	r3, #4
 8100fba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 8100fbe:	b662      	cpsie	i
}
 8100fc0:	bf00      	nop
}
 8100fc2:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8100fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8100fc8:	4618      	mov	r0, r3
 8100fca:	3760      	adds	r7, #96	; 0x60
 8100fcc:	46bd      	mov	sp, r7
 8100fce:	bd80      	pop	{r7, pc}

08100fd0 <buffer_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_writeArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8100fd0:	b580      	push	{r7, lr}
 8100fd2:	b098      	sub	sp, #96	; 0x60
 8100fd4:	af00      	add	r7, sp, #0
 8100fd6:	60f8      	str	r0, [r7, #12]
 8100fd8:	60b9      	str	r1, [r7, #8]
 8100fda:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8100fdc:	f000 fb0a 	bl	81015f4 <os_getOsVar>
 8100fe0:	64f8      	str	r0, [r7, #76]	; 0x4c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8100fe2:	464b      	mov	r3, r9
 8100fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8100fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8100fe8:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8100fea:	687a      	ldr	r2, [r7, #4]
 8100fec:	68b9      	ldr	r1, [r7, #8]
 8100fee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8100ff0:	f000 fab0 	bl	8101554 <memoryProtection_isMemoryRegionProtected>
 8100ff4:	4603      	mov	r3, r0
 8100ff6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8100ffa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8100ffe:	2b00      	cmp	r3, #0
 8101000:	d003      	beq.n	810100a <buffer_writeArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8101002:	2305      	movs	r3, #5
 8101004:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101008:	e06f      	b.n	81010ea <buffer_writeArray+0x11a>
 810100a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810100c:	623b      	str	r3, [r7, #32]
 810100e:	68fb      	ldr	r3, [r7, #12]
 8101010:	61fb      	str	r3, [r7, #28]
 8101012:	6a3b      	ldr	r3, [r7, #32]
 8101014:	689a      	ldr	r2, [r3, #8]
 8101016:	69fb      	ldr	r3, [r7, #28]
 8101018:	011b      	lsls	r3, r3, #4
 810101a:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * writePermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 810101c:	643b      	str	r3, [r7, #64]	; 0x40
 810101e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101020:	627b      	str	r3, [r7, #36]	; 0x24
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->writePermission);
 8101022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101024:	681b      	ldr	r3, [r3, #0]
 8101026:	691b      	ldr	r3, [r3, #16]

        writePermission = buffer_getBufferWritePermission( bufferVar );
 8101028:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( writePermission, coreVar );
 810102a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 810102c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 810102e:	f000 fb71 	bl	8101714 <permission_tryAccess>
 8101032:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8101034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101036:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 810103a:	d103      	bne.n	8101044 <buffer_writeArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 810103c:	2303      	movs	r3, #3
 810103e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101042:	e052      	b.n	81010ea <buffer_writeArray+0x11a>
  __ASM volatile ("cpsid i" : : : "memory");
 8101044:	b672      	cpsid	i
}
 8101046:	bf00      	nop
}
 8101048:	bf00      	nop
 810104a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810104c:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 810104e:	69bb      	ldr	r3, [r7, #24]
 8101050:	681b      	ldr	r3, [r3, #0]
 8101052:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8101054:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 8101056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101058:	2b00      	cmp	r3, #0
 810105a:	d00b      	beq.n	8101074 <buffer_writeArray+0xa4>
 810105c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810105e:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8101060:	697b      	ldr	r3, [r7, #20]
 8101062:	681b      	ldr	r3, [r3, #0]
 8101064:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 8101066:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 8101068:	6db8      	ldr	r0, [r7, #88]	; 0x58
 810106a:	f000 ff47 	bl	8101efc <spinlock_trySpinlock>
 810106e:	4603      	mov	r3, r0
 8101070:	657b      	str	r3, [r7, #84]	; 0x54
 8101072:	e001      	b.n	8101078 <buffer_writeArray+0xa8>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8101074:	2302      	movs	r3, #2
 8101076:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8101078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810107a:	2b02      	cmp	r3, #2
 810107c:	d12f      	bne.n	81010de <buffer_writeArray+0x10e>
 810107e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101080:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getEmptyCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return ((bufferVar->cfg->size) - (bufferVar->fullCells));
 8101082:	693b      	ldr	r3, [r7, #16]
 8101084:	681b      	ldr	r3, [r3, #0]
 8101086:	689a      	ldr	r2, [r3, #8]
 8101088:	693b      	ldr	r3, [r7, #16]
 810108a:	68db      	ldr	r3, [r3, #12]
 810108c:	1ad3      	subs	r3, r2, r3
			{
				emptyCellsNum = buffer_getEmptyCellsNum( bufferVar );
 810108e:	633b      	str	r3, [r7, #48]	; 0x30

				if ( emptyCellsNum >= size)
 8101090:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101092:	687b      	ldr	r3, [r7, #4]
 8101094:	429a      	cmp	r2, r3
 8101096:	d317      	bcc.n	81010c8 <buffer_writeArray+0xf8>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 8101098:	68bb      	ldr	r3, [r7, #8]
 810109a:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 810109c:	2300      	movs	r3, #0
 810109e:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 81010a0:	e00d      	b.n	81010be <buffer_writeArray+0xee>
					{
            	        bufferState = buffer_push( bufferVar, *( userBuffer + userBufferIndex ) );
 81010a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81010a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81010a6:	4413      	add	r3, r2
 81010a8:	781b      	ldrb	r3, [r3, #0]
 81010aa:	4619      	mov	r1, r3
 81010ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 81010ae:	f000 f85c 	bl	810116a <buffer_push>
 81010b2:	4603      	mov	r3, r0
 81010b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 81010b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81010ba:	3301      	adds	r3, #1
 81010bc:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 81010be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 81010c0:	687b      	ldr	r3, [r7, #4]
 81010c2:	429a      	cmp	r2, r3
 81010c4:	d3ed      	bcc.n	81010a2 <buffer_writeArray+0xd2>
 81010c6:	e002      	b.n	81010ce <buffer_writeArray+0xfe>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS;
 81010c8:	2306      	movs	r3, #6
 81010ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 81010ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81010d0:	2b00      	cmp	r3, #0
 81010d2:	d007      	beq.n	81010e4 <buffer_writeArray+0x114>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 81010d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 81010d6:	f000 ff64 	bl	8101fa2 <spinlock_releaseSpinlock>
 81010da:	6578      	str	r0, [r7, #84]	; 0x54
 81010dc:	e002      	b.n	81010e4 <buffer_writeArray+0x114>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 81010de:	2304      	movs	r3, #4
 81010e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 81010e4:	b662      	cpsie	i
}
 81010e6:	bf00      	nop
}
 81010e8:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 81010ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 81010ee:	4618      	mov	r0, r3
 81010f0:	3760      	adds	r7, #96	; 0x60
 81010f2:	46bd      	mov	sp, r7
 81010f4:	bd80      	pop	{r7, pc}

081010f6 <buffer_pull>:
{
 81010f6:	b480      	push	{r7}
 81010f8:	b089      	sub	sp, #36	; 0x24
 81010fa:	af00      	add	r7, sp, #0
 81010fc:	6078      	str	r0, [r7, #4]
 81010fe:	6039      	str	r1, [r7, #0]
 8101100:	687b      	ldr	r3, [r7, #4]
 8101102:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8101104:	68bb      	ldr	r3, [r7, #8]
 8101106:	681b      	ldr	r3, [r3, #0]
 8101108:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 810110a:	61fb      	str	r3, [r7, #28]
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8101110:	68fb      	ldr	r3, [r7, #12]
 8101112:	681b      	ldr	r3, [r3, #0]
 8101114:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8101116:	61bb      	str	r3, [r7, #24]
    *data = *( osBuffer + bufferVar->tail );
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	689b      	ldr	r3, [r3, #8]
 810111c:	69ba      	ldr	r2, [r7, #24]
 810111e:	4413      	add	r3, r2
 8101120:	781a      	ldrb	r2, [r3, #0]
 8101122:	683b      	ldr	r3, [r7, #0]
 8101124:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells--;
 8101126:	687b      	ldr	r3, [r7, #4]
 8101128:	68db      	ldr	r3, [r3, #12]
 810112a:	1e5a      	subs	r2, r3, #1
 810112c:	687b      	ldr	r3, [r7, #4]
 810112e:	60da      	str	r2, [r3, #12]
    bufferVar->tail = ( ( bufferVar->tail + 1 ) % bufferSize );
 8101130:	687b      	ldr	r3, [r7, #4]
 8101132:	689b      	ldr	r3, [r3, #8]
 8101134:	3301      	adds	r3, #1
 8101136:	69fa      	ldr	r2, [r7, #28]
 8101138:	fbb3 f2f2 	udiv	r2, r3, r2
 810113c:	69f9      	ldr	r1, [r7, #28]
 810113e:	fb01 f202 	mul.w	r2, r1, r2
 8101142:	1a9a      	subs	r2, r3, r2
 8101144:	687b      	ldr	r3, [r7, #4]
 8101146:	609a      	str	r2, [r3, #8]
 8101148:	687b      	ldr	r3, [r7, #4]
 810114a:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isEmpty(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT(bufferVar->fullCells) ? BUFFER_STATE_ENUM__EMPTY : BUFFER_STATE_ENUM__OK);
 810114c:	693b      	ldr	r3, [r7, #16]
 810114e:	68db      	ldr	r3, [r3, #12]
 8101150:	2b00      	cmp	r3, #0
 8101152:	bf0c      	ite	eq
 8101154:	2301      	moveq	r3, #1
 8101156:	2300      	movne	r3, #0
 8101158:	b2db      	uxtb	r3, r3
    bufferState = buffer_isEmpty( bufferVar );
 810115a:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 810115c:	7dfb      	ldrb	r3, [r7, #23]
}
 810115e:	4618      	mov	r0, r3
 8101160:	3724      	adds	r7, #36	; 0x24
 8101162:	46bd      	mov	sp, r7
 8101164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101168:	4770      	bx	lr

0810116a <buffer_push>:
{
 810116a:	b480      	push	{r7}
 810116c:	b089      	sub	sp, #36	; 0x24
 810116e:	af00      	add	r7, sp, #0
 8101170:	6078      	str	r0, [r7, #4]
 8101172:	460b      	mov	r3, r1
 8101174:	70fb      	strb	r3, [r7, #3]
 8101176:	687b      	ldr	r3, [r7, #4]
 8101178:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 810117a:	68bb      	ldr	r3, [r7, #8]
 810117c:	681b      	ldr	r3, [r3, #0]
 810117e:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8101180:	61fb      	str	r3, [r7, #28]
 8101182:	687b      	ldr	r3, [r7, #4]
 8101184:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8101186:	68fb      	ldr	r3, [r7, #12]
 8101188:	681b      	ldr	r3, [r3, #0]
 810118a:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 810118c:	61bb      	str	r3, [r7, #24]
    *( osBuffer + bufferVar->head ) = data;
 810118e:	687b      	ldr	r3, [r7, #4]
 8101190:	685b      	ldr	r3, [r3, #4]
 8101192:	69ba      	ldr	r2, [r7, #24]
 8101194:	4413      	add	r3, r2
 8101196:	78fa      	ldrb	r2, [r7, #3]
 8101198:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells++;
 810119a:	687b      	ldr	r3, [r7, #4]
 810119c:	68db      	ldr	r3, [r3, #12]
 810119e:	1c5a      	adds	r2, r3, #1
 81011a0:	687b      	ldr	r3, [r7, #4]
 81011a2:	60da      	str	r2, [r3, #12]
    bufferVar->head = ( ( bufferVar->head + 1 ) % bufferSize );
 81011a4:	687b      	ldr	r3, [r7, #4]
 81011a6:	685b      	ldr	r3, [r3, #4]
 81011a8:	3301      	adds	r3, #1
 81011aa:	69fa      	ldr	r2, [r7, #28]
 81011ac:	fbb3 f2f2 	udiv	r2, r3, r2
 81011b0:	69f9      	ldr	r1, [r7, #28]
 81011b2:	fb01 f202 	mul.w	r2, r1, r2
 81011b6:	1a9a      	subs	r2, r3, r2
 81011b8:	687b      	ldr	r3, [r7, #4]
 81011ba:	605a      	str	r2, [r3, #4]
 81011bc:	687b      	ldr	r3, [r7, #4]
 81011be:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isFull(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT((bufferVar->cfg->size) ^ (bufferVar->fullCells)) ? \
 81011c0:	693b      	ldr	r3, [r7, #16]
 81011c2:	681b      	ldr	r3, [r3, #0]
 81011c4:	689a      	ldr	r2, [r3, #8]
 81011c6:	693b      	ldr	r3, [r7, #16]
 81011c8:	68db      	ldr	r3, [r3, #12]
    BUFFER_STATE_ENUM__FULL : BUFFER_STATE_ENUM__OK);
 81011ca:	429a      	cmp	r2, r3
 81011cc:	d101      	bne.n	81011d2 <buffer_push+0x68>
 81011ce:	2302      	movs	r3, #2
 81011d0:	e000      	b.n	81011d4 <buffer_push+0x6a>
 81011d2:	2300      	movs	r3, #0
    bufferState = buffer_isFull( bufferVar );
 81011d4:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 81011d6:	7dfb      	ldrb	r3, [r7, #23]
}
 81011d8:	4618      	mov	r0, r3
 81011da:	3724      	adds	r7, #36	; 0x24
 81011dc:	46bd      	mov	sp, r7
 81011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011e2:	4770      	bx	lr

081011e4 <bufferDouble_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_readArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 81011e4:	b580      	push	{r7, lr}
 81011e6:	b08e      	sub	sp, #56	; 0x38
 81011e8:	af00      	add	r7, sp, #0
 81011ea:	60f8      	str	r0, [r7, #12]
 81011ec:	60b9      	str	r1, [r7, #8]
 81011ee:	607a      	str	r2, [r7, #4]
 81011f0:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 81011f2:	f000 f9ff 	bl	81015f4 <os_getOsVar>
 81011f6:	6338      	str	r0, [r7, #48]	; 0x30
 81011f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81011fa:	623b      	str	r3, [r7, #32]
 81011fc:	68fb      	ldr	r3, [r7, #12]
 81011fe:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferDoubleVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferDoubleVariableType * os_getOsBufferDoubleVar(CosmOS_OsVariableType * osVar, BitWidthType bufferDoubleId)
{
    return (&(osVar->bufferDoubleVars[bufferDoubleId]));
 8101200:	6a3b      	ldr	r3, [r7, #32]
 8101202:	68d9      	ldr	r1, [r3, #12]
 8101204:	69fa      	ldr	r2, [r7, #28]
 8101206:	4613      	mov	r3, r2
 8101208:	005b      	lsls	r3, r3, #1
 810120a:	4413      	add	r3, r2
 810120c:	009b      	lsls	r3, r3, #2
 810120e:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8101210:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8101212:	78fb      	ldrb	r3, [r7, #3]
 8101214:	2b00      	cmp	r3, #0
 8101216:	d002      	beq.n	810121e <bufferDouble_readArray+0x3a>
 8101218:	2b01      	cmp	r3, #1
 810121a:	d00b      	beq.n	8101234 <bufferDouble_readArray+0x50>
        }

        default :
        {
            /* PANIC */
            break;
 810121c:	e015      	b.n	810124a <bufferDouble_readArray+0x66>
 810121e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101220:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * bufferDouble_getBufferDoubleUserBuffer(CosmOS_BufferDoubleVariableType * bufferDoubleVar)
{
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8101222:	69bb      	ldr	r3, [r7, #24]
 8101224:	681b      	ldr	r3, [r3, #0]
 8101226:	681a      	ldr	r2, [r3, #0]
 8101228:	69bb      	ldr	r3, [r7, #24]
 810122a:	689b      	ldr	r3, [r3, #8]
 810122c:	009b      	lsls	r3, r3, #2
 810122e:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8101230:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101232:	e00a      	b.n	810124a <bufferDouble_readArray+0x66>
 8101234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101236:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8101238:	697b      	ldr	r3, [r7, #20]
 810123a:	681b      	ldr	r3, [r3, #0]
 810123c:	681a      	ldr	r2, [r3, #0]
 810123e:	697b      	ldr	r3, [r7, #20]
 8101240:	685b      	ldr	r3, [r3, #4]
 8101242:	009b      	lsls	r3, r3, #2
 8101244:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8101246:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101248:	bf00      	nop
 810124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810124c:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->id);
 810124e:	693b      	ldr	r3, [r7, #16]
 8101250:	681b      	ldr	r3, [r3, #0]
 8101252:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 8101254:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_readArray( bufferId, buffer, size );
 8101256:	687a      	ldr	r2, [r7, #4]
 8101258:	68b9      	ldr	r1, [r7, #8]
 810125a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810125c:	f7ff fe2a 	bl	8100eb4 <buffer_readArray>
 8101260:	4603      	mov	r3, r0
 8101262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8101266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 810126a:	4618      	mov	r0, r3
 810126c:	3738      	adds	r7, #56	; 0x38
 810126e:	46bd      	mov	sp, r7
 8101270:	bd80      	pop	{r7, pc}

08101272 <bufferDouble_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_writeArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8101272:	b580      	push	{r7, lr}
 8101274:	b08e      	sub	sp, #56	; 0x38
 8101276:	af00      	add	r7, sp, #0
 8101278:	60f8      	str	r0, [r7, #12]
 810127a:	60b9      	str	r1, [r7, #8]
 810127c:	607a      	str	r2, [r7, #4]
 810127e:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8101280:	f000 f9b8 	bl	81015f4 <os_getOsVar>
 8101284:	6338      	str	r0, [r7, #48]	; 0x30
 8101286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101288:	623b      	str	r3, [r7, #32]
 810128a:	68fb      	ldr	r3, [r7, #12]
 810128c:	61fb      	str	r3, [r7, #28]
 810128e:	6a3b      	ldr	r3, [r7, #32]
 8101290:	68d9      	ldr	r1, [r3, #12]
 8101292:	69fa      	ldr	r2, [r7, #28]
 8101294:	4613      	mov	r3, r2
 8101296:	005b      	lsls	r3, r3, #1
 8101298:	4413      	add	r3, r2
 810129a:	009b      	lsls	r3, r3, #2
 810129c:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 810129e:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 81012a0:	78fb      	ldrb	r3, [r7, #3]
 81012a2:	2b00      	cmp	r3, #0
 81012a4:	d002      	beq.n	81012ac <bufferDouble_writeArray+0x3a>
 81012a6:	2b01      	cmp	r3, #1
 81012a8:	d00b      	beq.n	81012c2 <bufferDouble_writeArray+0x50>
        }

        default :
        {
            /* PANIC */
            break;
 81012aa:	e015      	b.n	81012d8 <bufferDouble_writeArray+0x66>
 81012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81012ae:	61bb      	str	r3, [r7, #24]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 81012b0:	69bb      	ldr	r3, [r7, #24]
 81012b2:	681b      	ldr	r3, [r3, #0]
 81012b4:	681a      	ldr	r2, [r3, #0]
 81012b6:	69bb      	ldr	r3, [r7, #24]
 81012b8:	689b      	ldr	r3, [r3, #8]
 81012ba:	009b      	lsls	r3, r3, #2
 81012bc:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 81012be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 81012c0:	e00a      	b.n	81012d8 <bufferDouble_writeArray+0x66>
 81012c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81012c4:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 81012c6:	697b      	ldr	r3, [r7, #20]
 81012c8:	681b      	ldr	r3, [r3, #0]
 81012ca:	681a      	ldr	r2, [r3, #0]
 81012cc:	697b      	ldr	r3, [r7, #20]
 81012ce:	685b      	ldr	r3, [r3, #4]
 81012d0:	009b      	lsls	r3, r3, #2
 81012d2:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 81012d4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 81012d6:	bf00      	nop
 81012d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81012da:	613b      	str	r3, [r7, #16]
 81012dc:	693b      	ldr	r3, [r7, #16]
 81012de:	681b      	ldr	r3, [r3, #0]
 81012e0:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 81012e2:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_writeArray( bufferId, buffer, size );
 81012e4:	687a      	ldr	r2, [r7, #4]
 81012e6:	68b9      	ldr	r1, [r7, #8]
 81012e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81012ea:	f7ff fe71 	bl	8100fd0 <buffer_writeArray>
 81012ee:	4603      	mov	r3, r0
 81012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 81012f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81012f8:	4618      	mov	r0, r3
 81012fa:	3738      	adds	r7, #56	; 0x38
 81012fc:	46bd      	mov	sp, r7
 81012fe:	bd80      	pop	{r7, pc}

08101300 <core_getCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_CoreVariableType * core_getCoreVar(void)
{
 8101300:	b480      	push	{r7}
 8101302:	b083      	sub	sp, #12
 8101304:	af00      	add	r7, sp, #0
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101306:	464b      	mov	r3, r9
 8101308:	607b      	str	r3, [r7, #4]
    return (CosmOS_CoreVariableType *)result;
 810130a:	687b      	ldr	r3, [r7, #4]
    return CILcore_getCoreVar();
}
 810130c:	4618      	mov	r0, r3
 810130e:	370c      	adds	r7, #12
 8101310:	46bd      	mov	sp, r7
 8101312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101316:	4770      	bx	lr

08101318 <core_setSchedulableIntoCurrentContext>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void core_setSchedulableIntoCurrentContext(CosmOS_CoreVariableType * coreVar, CosmOS_SchedulableVariableType * schedulableVar)
{
 8101318:	b480      	push	{r7}
 810131a:	b08d      	sub	sp, #52	; 0x34
 810131c:	af00      	add	r7, sp, #0
 810131e:	6078      	str	r0, [r7, #4]
 8101320:	6039      	str	r1, [r7, #0]
 8101322:	683b      	ldr	r3, [r7, #0]
 8101324:	60fb      	str	r3, [r7, #12]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType schedulable_getProgramId(CosmOS_SchedulableVariableType * schedulable)
{
    return (schedulable->cfg->programId);
 8101326:	68fb      	ldr	r3, [r7, #12]
 8101328:	681b      	ldr	r3, [r3, #0]
 810132a:	699b      	ldr	r3, [r3, #24]
    BitWidthType programId;

    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulableVar );
 810132c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810132e:	687b      	ldr	r3, [r7, #4]
 8101330:	617b      	str	r3, [r7, #20]
 8101332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101334:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_ProgramVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ProgramVariableType * core_getCoreProgramVar(CosmOS_CoreVariableType * core, BitWidthType programIterator)
{
    return (&(core->programVars[programIterator]));
 8101336:	697b      	ldr	r3, [r7, #20]
 8101338:	68d9      	ldr	r1, [r3, #12]
 810133a:	693a      	ldr	r2, [r7, #16]
 810133c:	4613      	mov	r3, r2
 810133e:	005b      	lsls	r3, r3, #1
 8101340:	4413      	add	r3, r2
 8101342:	009b      	lsls	r3, r3, #2
 8101344:	440b      	add	r3, r1
    programVar = core_getCoreProgramVar( coreVar, programId );
 8101346:	62bb      	str	r3, [r7, #40]	; 0x28
 8101348:	687b      	ldr	r3, [r7, #4]
 810134a:	61fb      	str	r3, [r7, #28]
 810134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810134e:	61bb      	str	r3, [r7, #24]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreProgramInExecution(CosmOS_CoreVariableType * core, CosmOS_ProgramVariableType * programInExecutionParam)
{
    core->programInExecution = programInExecutionParam;
 8101350:	69fb      	ldr	r3, [r7, #28]
 8101352:	69ba      	ldr	r2, [r7, #24]
 8101354:	609a      	str	r2, [r3, #8]
}
 8101356:	bf00      	nop
 8101358:	687b      	ldr	r3, [r7, #4]
 810135a:	627b      	str	r3, [r7, #36]	; 0x24
 810135c:	683b      	ldr	r3, [r7, #0]
 810135e:	623b      	str	r3, [r7, #32]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreSchedulableInExecution(CosmOS_CoreVariableType * core, CosmOS_SchedulableVariableType * schedulableInExecutionParam)
{
    core->schedulableInExecution = schedulableInExecutionParam;
 8101360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101362:	6a3a      	ldr	r2, [r7, #32]
 8101364:	605a      	str	r2, [r3, #4]
}
 8101366:	bf00      	nop

    core_setCoreProgramInExecution( coreVar, programVar );
    core_setCoreSchedulableInExecution( coreVar, schedulableVar );
}
 8101368:	bf00      	nop
 810136a:	3734      	adds	r7, #52	; 0x34
 810136c:	46bd      	mov	sp, r7
 810136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101372:	4770      	bx	lr

08101374 <coreSync_getBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_getBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 8101374:	b580      	push	{r7, lr}
 8101376:	b096      	sub	sp, #88	; 0x58
 8101378:	af00      	add	r7, sp, #0
 810137a:	6078      	str	r0, [r7, #4]
 810137c:	6039      	str	r1, [r7, #0]
 810137e:	687b      	ldr	r3, [r7, #4]
 8101380:	62bb      	str	r3, [r7, #40]	; 0x28
 8101382:	683b      	ldr	r3, [r7, #0]
 8101384:	627b      	str	r3, [r7, #36]	; 0x24
    return (&(core->barrierVars[barrierId]));
 8101386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101388:	695a      	ldr	r2, [r3, #20]
 810138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810138c:	009b      	lsls	r3, r3, #2
 810138e:	4413      	add	r3, r2
    CosmOS_BarrierVariableType * barrierVar;

    volatile CosmOS_BarrierStateType barrierState;


    barrierVar = core_getBarrierVar( coreVar, barrierId );
 8101390:	653b      	str	r3, [r7, #80]	; 0x50
 8101392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101394:	633b      	str	r3, [r7, #48]	; 0x30
 8101396:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 810139a:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void coreSync_setBarrierState(CosmOS_BarrierVariableType * barrier, CosmOS_BarrierStateType barrierStateParam)
{
    barrier->barrierState = barrierStateParam;
 810139c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810139e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81013a0:	601a      	str	r2, [r3, #0]
}
 81013a2:	bf00      	nop
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__REACHED);

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    osVar = os_getOsVar();
 81013a4:	f000 f926 	bl	81015f4 <os_getOsVar>
 81013a8:	64f8      	str	r0, [r7, #76]	; 0x4c
 81013aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81013ac:	637b      	str	r3, [r7, #52]	; 0x34
    return (osVar->cfg->numberOfCores);
 81013ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81013b0:	681b      	ldr	r3, [r3, #0]
 81013b2:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 81013b4:	64bb      	str	r3, [r7, #72]	; 0x48

    numberOfSynchronizedCores = 0;
 81013b6:	2300      	movs	r3, #0
 81013b8:	657b      	str	r3, [r7, #84]	; 0x54
 81013ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81013bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81013be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81013c0:	63bb      	str	r3, [r7, #56]	; 0x38
    return (&(osVar->coreVars[coreId]));
 81013c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81013c4:	685a      	ldr	r2, [r3, #4]
 81013c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81013c8:	015b      	lsls	r3, r3, #5
 81013ca:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, numberOfSynchronizedCores );
 81013cc:	607b      	str	r3, [r7, #4]
 81013ce:	687b      	ldr	r3, [r7, #4]
 81013d0:	647b      	str	r3, [r7, #68]	; 0x44
 81013d2:	683b      	ldr	r3, [r7, #0]
 81013d4:	643b      	str	r3, [r7, #64]	; 0x40
 81013d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81013d8:	695a      	ldr	r2, [r3, #20]
 81013da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81013dc:	009b      	lsls	r3, r3, #2
 81013de:	4413      	add	r3, r2
    barrierVar = core_getBarrierVar( coreVar, barrierId );
 81013e0:	653b      	str	r3, [r7, #80]	; 0x50

    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 81013e2:	e026      	b.n	8101432 <coreSync_getBarrier+0xbe>
 81013e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81013e6:	623b      	str	r3, [r7, #32]
    return (barrier->barrierState);
 81013e8:	6a3b      	ldr	r3, [r7, #32]
 81013ea:	681b      	ldr	r3, [r3, #0]
    {
        barrierState = coreSync_getBarrierState( barrierVar );
 81013ec:	60fb      	str	r3, [r7, #12]

        if ( ( barrierState IS_EQUAL_TO BARRIER_STATE_ENUM__REACHED ) )
 81013ee:	68fb      	ldr	r3, [r7, #12]
 81013f0:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 81013f4:	d11d      	bne.n	8101432 <coreSync_getBarrier+0xbe>
        {
            numberOfSynchronizedCores++;
 81013f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81013f8:	3301      	adds	r3, #1
 81013fa:	657b      	str	r3, [r7, #84]	; 0x54

            coreVar = os_getCoreVar( osVar, ( numberOfSynchronizedCores % numberOfCores ) );
 81013fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81013fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8101400:	fbb3 f2f2 	udiv	r2, r3, r2
 8101404:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8101406:	fb01 f202 	mul.w	r2, r1, r2
 810140a:	1a9b      	subs	r3, r3, r2
 810140c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 810140e:	617a      	str	r2, [r7, #20]
 8101410:	613b      	str	r3, [r7, #16]
 8101412:	697b      	ldr	r3, [r7, #20]
 8101414:	685a      	ldr	r2, [r3, #4]
 8101416:	693b      	ldr	r3, [r7, #16]
 8101418:	015b      	lsls	r3, r3, #5
 810141a:	4413      	add	r3, r2
 810141c:	607b      	str	r3, [r7, #4]
 810141e:	687b      	ldr	r3, [r7, #4]
 8101420:	61fb      	str	r3, [r7, #28]
 8101422:	683b      	ldr	r3, [r7, #0]
 8101424:	61bb      	str	r3, [r7, #24]
 8101426:	69fb      	ldr	r3, [r7, #28]
 8101428:	695a      	ldr	r2, [r3, #20]
 810142a:	69bb      	ldr	r3, [r7, #24]
 810142c:	009b      	lsls	r3, r3, #2
 810142e:	4413      	add	r3, r2
            barrierVar = core_getBarrierVar( coreVar, barrierId );
 8101430:	653b      	str	r3, [r7, #80]	; 0x50
    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 8101432:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8101434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101436:	429a      	cmp	r2, r3
 8101438:	d1d4      	bne.n	81013e4 <coreSync_getBarrier+0x70>
        }
    }
}
 810143a:	bf00      	nop
 810143c:	bf00      	nop
 810143e:	3758      	adds	r7, #88	; 0x58
 8101440:	46bd      	mov	sp, r7
 8101442:	bd80      	pop	{r7, pc}

08101444 <coreSync_reactivateBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_reactivateBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 8101444:	b480      	push	{r7}
 8101446:	b089      	sub	sp, #36	; 0x24
 8101448:	af00      	add	r7, sp, #0
 810144a:	6078      	str	r0, [r7, #4]
 810144c:	6039      	str	r1, [r7, #0]
    CosmOS_BarrierVariableType * barrierVar;

    cosmosAssert( barrierId IS_EQUAL_TO SCHEDULERS_SYNC_ID );
 810144e:	683b      	ldr	r3, [r7, #0]
 8101450:	2b03      	cmp	r3, #3
 8101452:	bf0c      	ite	eq
 8101454:	2301      	moveq	r3, #1
 8101456:	2300      	movne	r3, #0
 8101458:	b2db      	uxtb	r3, r3
 810145a:	60bb      	str	r3, [r7, #8]
    }
    else
    {

    }
}
 810145c:	bf00      	nop
 810145e:	687b      	ldr	r3, [r7, #4]
 8101460:	613b      	str	r3, [r7, #16]
 8101462:	683b      	ldr	r3, [r7, #0]
 8101464:	60fb      	str	r3, [r7, #12]
 8101466:	693b      	ldr	r3, [r7, #16]
 8101468:	695a      	ldr	r2, [r3, #20]
 810146a:	68fb      	ldr	r3, [r7, #12]
 810146c:	009b      	lsls	r3, r3, #2
 810146e:	4413      	add	r3, r2

    barrierVar = core_getBarrierVar( coreVar, barrierId );
 8101470:	61fb      	str	r3, [r7, #28]
 8101472:	69fb      	ldr	r3, [r7, #28]
 8101474:	61bb      	str	r3, [r7, #24]
 8101476:	2300      	movs	r3, #0
 8101478:	617b      	str	r3, [r7, #20]
    barrier->barrierState = barrierStateParam;
 810147a:	69bb      	ldr	r3, [r7, #24]
 810147c:	697a      	ldr	r2, [r7, #20]
 810147e:	601a      	str	r2, [r3, #0]
}
 8101480:	bf00      	nop
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__ACTIVATED );

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */
}
 8101482:	bf00      	nop
 8101484:	3724      	adds	r7, #36	; 0x24
 8101486:	46bd      	mov	sp, r7
 8101488:	f85d 7b04 	ldr.w	r7, [sp], #4
 810148c:	4770      	bx	lr

0810148e <deviceIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void deviceIO_togglePin(BitWidthType id, void *GPIOx, BitWidthType GPIO_Pin)
{
 810148e:	b580      	push	{r7, lr}
 8101490:	b084      	sub	sp, #16
 8101492:	af00      	add	r7, sp, #0
 8101494:	60f8      	str	r0, [r7, #12]
 8101496:	60b9      	str	r1, [r7, #8]
 8101498:	607a      	str	r2, [r7, #4]
    CILGPIO_togglePin( GPIOx, GPIO_Pin );
 810149a:	6879      	ldr	r1, [r7, #4]
 810149c:	68b8      	ldr	r0, [r7, #8]
 810149e:	f000 fef2 	bl	8102286 <CILGPIO_togglePin>
}
 81014a2:	bf00      	nop
 81014a4:	3710      	adds	r7, #16
 81014a6:	46bd      	mov	sp, r7
 81014a8:	bd80      	pop	{r7, pc}

081014aa <memoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_init(void)
{
 81014aa:	b580      	push	{r7, lr}
 81014ac:	af00      	add	r7, sp, #0
    CILmemoryProtection_init();
 81014ae:	f000 fef9 	bl	81022a4 <CILmemoryProtection_init>
}
 81014b2:	bf00      	nop
 81014b4:	bd80      	pop	{r7, pc}

081014b6 <memoryProtection_setMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_setMemoryProtection(CosmOS_CoreVariableType * core,CosmOS_SchedulableVariableType  * schedulable)
{
 81014b6:	b580      	push	{r7, lr}
 81014b8:	b096      	sub	sp, #88	; 0x58
 81014ba:	af00      	add	r7, sp, #0
 81014bc:	6078      	str	r0, [r7, #4]
 81014be:	6039      	str	r1, [r7, #0]
 81014c0:	683b      	ldr	r3, [r7, #0]
 81014c2:	60fb      	str	r3, [r7, #12]
 81014c4:	68fb      	ldr	r3, [r7, #12]
 81014c6:	681b      	ldr	r3, [r3, #0]
 81014c8:	699b      	ldr	r3, [r3, #24]

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulable );
 81014ca:	657b      	str	r3, [r7, #84]	; 0x54
 81014cc:	687b      	ldr	r3, [r7, #4]
 81014ce:	617b      	str	r3, [r7, #20]
 81014d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81014d2:	613b      	str	r3, [r7, #16]
    return (&(core->programVars[programIterator]));
 81014d4:	697b      	ldr	r3, [r7, #20]
 81014d6:	68d9      	ldr	r1, [r3, #12]
 81014d8:	693a      	ldr	r2, [r7, #16]
 81014da:	4613      	mov	r3, r2
 81014dc:	005b      	lsls	r3, r3, #1
 81014de:	4413      	add	r3, r2
 81014e0:	009b      	lsls	r3, r3, #2
 81014e2:	440b      	add	r3, r1
    programVar = core_getCoreProgramVar( core, programId );
 81014e4:	653b      	str	r3, [r7, #80]	; 0x50
 81014e6:	683b      	ldr	r3, [r7, #0]
 81014e8:	61bb      	str	r3, [r7, #24]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 81014ea:	69bb      	ldr	r3, [r7, #24]
 81014ec:	681b      	ldr	r3, [r3, #0]
 81014ee:	681b      	ldr	r3, [r3, #0]

    stack = schedulable_getStack( schedulable );
 81014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 81014f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 81014f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81014f8:	62bb      	str	r3, [r7, #40]	; 0x28
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackLowAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackLowAddress);
 81014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81014fc:	685b      	ldr	r3, [r3, #4]
    lowAddress = stack_getStackLowAddress( stack );
 81014fe:	627b      	str	r3, [r7, #36]	; 0x24
 8101500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101502:	623b      	str	r3, [r7, #32]
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackHighAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackHighAddress);
 8101504:	6a3b      	ldr	r3, [r7, #32]
 8101506:	689b      	ldr	r3, [r3, #8]
    highAddress = stack_getStackHighAddress( stack );
 8101508:	61fb      	str	r3, [r7, #28]
    CILmemoryProtection_setStackOverflowProtection( lowAddress, highAddress );
 810150a:	69f9      	ldr	r1, [r7, #28]
 810150c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810150e:	f000 ffc9 	bl	81024a4 <CILmemoryProtection_setStackOverflowProtection>
}
 8101512:	bf00      	nop
 8101514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101516:	64bb      	str	r3, [r7, #72]	; 0x48
 8101518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810151a:	647b      	str	r3, [r7, #68]	; 0x44
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemorySize(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemorySize);
 810151c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810151e:	681b      	ldr	r3, [r3, #0]
 8101520:	68db      	ldr	r3, [r3, #12]
    size = program_getProgramMemorySize( program );
 8101522:	643b      	str	r3, [r7, #64]	; 0x40
 8101524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101526:	63fb      	str	r3, [r7, #60]	; 0x3c
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryLowAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryLowAddress);
 8101528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810152a:	681b      	ldr	r3, [r3, #0]
 810152c:	691b      	ldr	r3, [r3, #16]
    lowAddress = program_getProgramMemoryLowAddress( program );
 810152e:	63bb      	str	r3, [r7, #56]	; 0x38
 8101530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101532:	637b      	str	r3, [r7, #52]	; 0x34
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryHighAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryHighAddress);
 8101534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101536:	681b      	ldr	r3, [r3, #0]
 8101538:	695b      	ldr	r3, [r3, #20]
    highAddress = program_getProgramMemoryHighAddress( program );
 810153a:	633b      	str	r3, [r7, #48]	; 0x30
    if ( size )
 810153c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810153e:	2b00      	cmp	r3, #0
 8101540:	d003      	beq.n	810154a <memoryProtection_setMemoryProtection+0x94>
        CILmemoryProtection_setProgramMemoryProtection( lowAddress, highAddress );
 8101542:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8101544:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8101546:	f001 f809 	bl	810255c <CILmemoryProtection_setProgramMemoryProtection>
}
 810154a:	bf00      	nop

    memoryProtection_setStackOverflowProtection( stack );
    memoryProtection_setProgramMemoryProtection( programVar );
}
 810154c:	bf00      	nop
 810154e:	3758      	adds	r7, #88	; 0x58
 8101550:	46bd      	mov	sp, r7
 8101552:	bd80      	pop	{r7, pc}

08101554 <memoryProtection_isMemoryRegionProtected>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BooleanType memoryProtection_isMemoryRegionProtected(CosmOS_CoreVariableType * core, void * regionLowAddressPointer, BitWidthType size)
{
 8101554:	b480      	push	{r7}
 8101556:	b097      	sub	sp, #92	; 0x5c
 8101558:	af00      	add	r7, sp, #0
 810155a:	60f8      	str	r0, [r7, #12]
 810155c:	60b9      	str	r1, [r7, #8]
 810155e:	607a      	str	r2, [r7, #4]
				programLowAddress,
				programHighAddress,
				regionLowAddress,
				regionHighAddress;

	CosmOS_BooleanType isMemoryRegionProtected = True;
 8101560:	2301      	movs	r3, #1
 8101562:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;
	CosmOS_SchedulableVariableType * schedulable;

	regionLowAddress = (AddressType)regionLowAddressPointer;
 8101566:	68bb      	ldr	r3, [r7, #8]
 8101568:	653b      	str	r3, [r7, #80]	; 0x50
 810156a:	68fb      	ldr	r3, [r7, #12]
 810156c:	617b      	str	r3, [r7, #20]
    return (core->programInExecution);
 810156e:	697b      	ldr	r3, [r7, #20]
 8101570:	689b      	ldr	r3, [r3, #8]

    programVar = core_getCoreProgramInExecution( core );
 8101572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101574:	68fb      	ldr	r3, [r7, #12]
 8101576:	61bb      	str	r3, [r7, #24]
    return (core->schedulableInExecution);
 8101578:	69bb      	ldr	r3, [r7, #24]
 810157a:	685b      	ldr	r3, [r3, #4]
	schedulable = core_getCoreSchedulableInCurrentContext( core );
 810157c:	64bb      	str	r3, [r7, #72]	; 0x48
 810157e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101580:	61fb      	str	r3, [r7, #28]
 8101582:	69fb      	ldr	r3, [r7, #28]
 8101584:	681b      	ldr	r3, [r3, #0]
 8101586:	681b      	ldr	r3, [r3, #0]
    stack = schedulable_getStack( schedulable );
 8101588:	647b      	str	r3, [r7, #68]	; 0x44
 810158a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810158c:	623b      	str	r3, [r7, #32]
    return (stack->stackLowAddress);
 810158e:	6a3b      	ldr	r3, [r7, #32]
 8101590:	685b      	ldr	r3, [r3, #4]

	stackLowAddress = stack_getStackLowAddress( stack );
 8101592:	643b      	str	r3, [r7, #64]	; 0x40
 8101594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101596:	627b      	str	r3, [r7, #36]	; 0x24
    return (stack->stackHighAddress);
 8101598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810159a:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 810159c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810159e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81015a0:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->programMemoryLowAddress);
 81015a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81015a4:	681b      	ldr	r3, [r3, #0]
 81015a6:	691b      	ldr	r3, [r3, #16]

    programLowAddress = program_getProgramMemoryLowAddress( programVar );
 81015a8:	63bb      	str	r3, [r7, #56]	; 0x38
 81015aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (program->cfg->programMemoryHighAddress);
 81015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81015b0:	681b      	ldr	r3, [r3, #0]
 81015b2:	695b      	ldr	r3, [r3, #20]
    programHighAddress = program_getProgramMemoryHighAddress( programVar );
 81015b4:	637b      	str	r3, [r7, #52]	; 0x34

	regionHighAddress = regionLowAddress + (AddressType)size;
 81015b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 81015b8:	687b      	ldr	r3, [r7, #4]
 81015ba:	4413      	add	r3, r2
 81015bc:	633b      	str	r3, [r7, #48]	; 0x30

	if (((regionHighAddress < stackHighAddress) && (regionLowAddress > stackLowAddress)) || \
 81015be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81015c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81015c2:	429a      	cmp	r2, r3
 81015c4:	d203      	bcs.n	81015ce <memoryProtection_isMemoryRegionProtected+0x7a>
 81015c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 81015c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81015ca:	429a      	cmp	r2, r3
 81015cc:	d807      	bhi.n	81015de <memoryProtection_isMemoryRegionProtected+0x8a>
 81015ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81015d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81015d2:	429a      	cmp	r2, r3
 81015d4:	d206      	bcs.n	81015e4 <memoryProtection_isMemoryRegionProtected+0x90>
		((regionHighAddress < programHighAddress) && (regionLowAddress > programLowAddress)))
 81015d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 81015d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81015da:	429a      	cmp	r2, r3
 81015dc:	d902      	bls.n	81015e4 <memoryProtection_isMemoryRegionProtected+0x90>
	{
		isMemoryRegionProtected = False;
 81015de:	2300      	movs	r3, #0
 81015e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	return isMemoryRegionProtected;
 81015e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 81015e8:	4618      	mov	r0, r3
 81015ea:	375c      	adds	r7, #92	; 0x5c
 81015ec:	46bd      	mov	sp, r7
 81015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f2:	4770      	bx	lr

081015f4 <os_getOsVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_OsVariableType * os_getOsVar(void)
{
 81015f4:	b480      	push	{r7}
 81015f6:	af00      	add	r7, sp, #0
    return &OsVar;
 81015f8:	4b02      	ldr	r3, [pc, #8]	; (8101604 <os_getOsVar+0x10>)
}
 81015fa:	4618      	mov	r0, r3
 81015fc:	46bd      	mov	sp, r7
 81015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101602:	4770      	bx	lr
 8101604:	380080fc 	.word	0x380080fc

08101608 <os_start>:
{
 8101608:	b580      	push	{r7, lr}
 810160a:	af00      	add	r7, sp, #0
    scheduler_start();
 810160c:	f000 faa1 	bl	8101b52 <scheduler_start>
};
 8101610:	bf00      	nop
 8101612:	bd80      	pop	{r7, pc}

08101614 <osBoot_bootValidate>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osBoot_bootValidate(void)
{
 8101614:	b580      	push	{r7, lr}
 8101616:	b08c      	sub	sp, #48	; 0x30
 8101618:	af00      	add	r7, sp, #0
	BitWidthType  coreId,
					programSectionsNumber;

	CosmOS_ProgramSectionConfigurationType * programSections;

	coreId = CILcore_getCoreId();
 810161a:	f000 fe02 	bl	8102222 <CILcore_getCoreId>
 810161e:	62b8      	str	r0, [r7, #40]	; 0x28

	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 8101620:	4a2d      	ldr	r2, [pc, #180]	; (81016d8 <osBoot_bootValidate+0xc4>)
 8101622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101624:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8101628:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 810162a:	4a2b      	ldr	r2, [pc, #172]	; (81016d8 <osBoot_bootValidate+0xc4>)
 810162c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810162e:	00db      	lsls	r3, r3, #3
 8101630:	4413      	add	r3, r2
 8101632:	685b      	ldr	r3, [r3, #4]
 8101634:	623b      	str	r3, [r7, #32]


	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8101636:	2300      	movs	r3, #0
 8101638:	62fb      	str	r3, [r7, #44]	; 0x2c
 810163a:	e043      	b.n	81016c4 <osBoot_bootValidate+0xb0>
	{
		osBoot_validateSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 810163c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810163e:	4613      	mov	r3, r2
 8101640:	005b      	lsls	r3, r3, #1
 8101642:	4413      	add	r3, r2
 8101644:	009b      	lsls	r3, r3, #2
 8101646:	461a      	mov	r2, r3
 8101648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810164a:	4413      	add	r3, r2
 810164c:	6818      	ldr	r0, [r3, #0]
 810164e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101650:	4613      	mov	r3, r2
 8101652:	005b      	lsls	r3, r3, #1
 8101654:	4413      	add	r3, r2
 8101656:	009b      	lsls	r3, r3, #2
 8101658:	461a      	mov	r2, r3
 810165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810165c:	4413      	add	r3, r2
 810165e:	6859      	ldr	r1, [r3, #4]
 8101660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101662:	4613      	mov	r3, r2
 8101664:	005b      	lsls	r3, r3, #1
 8101666:	4413      	add	r3, r2
 8101668:	009b      	lsls	r3, r3, #2
 810166a:	461a      	mov	r2, r3
 810166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810166e:	4413      	add	r3, r2
 8101670:	689b      	ldr	r3, [r3, #8]
 8101672:	61f8      	str	r0, [r7, #28]
 8101674:	61b9      	str	r1, [r7, #24]
 8101676:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8101678:	69ba      	ldr	r2, [r7, #24]
 810167a:	69fb      	ldr	r3, [r7, #28]
 810167c:	1ad3      	subs	r3, r2, r3
 810167e:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 8101680:	69fb      	ldr	r3, [r7, #28]
 8101682:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 8101684:	697b      	ldr	r3, [r7, #20]
 8101686:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8101688:	2300      	movs	r3, #0
 810168a:	607b      	str	r3, [r7, #4]
 810168c:	e011      	b.n	81016b2 <osBoot_bootValidate+0x9e>
		cosmosAssert( (*pDst++) IS_EQUAL_TO (*pSrc++) );
 810168e:	68fb      	ldr	r3, [r7, #12]
 8101690:	1c5a      	adds	r2, r3, #1
 8101692:	60fa      	str	r2, [r7, #12]
 8101694:	781a      	ldrb	r2, [r3, #0]
 8101696:	68bb      	ldr	r3, [r7, #8]
 8101698:	1c59      	adds	r1, r3, #1
 810169a:	60b9      	str	r1, [r7, #8]
 810169c:	781b      	ldrb	r3, [r3, #0]
 810169e:	429a      	cmp	r2, r3
 81016a0:	bf0c      	ite	eq
 81016a2:	2301      	moveq	r3, #1
 81016a4:	2300      	movne	r3, #0
 81016a6:	b2db      	uxtb	r3, r3
 81016a8:	603b      	str	r3, [r7, #0]
 81016aa:	bf00      	nop
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 81016ac:	687b      	ldr	r3, [r7, #4]
 81016ae:	3301      	adds	r3, #1
 81016b0:	607b      	str	r3, [r7, #4]
 81016b2:	693b      	ldr	r3, [r7, #16]
 81016b4:	009b      	lsls	r3, r3, #2
 81016b6:	687a      	ldr	r2, [r7, #4]
 81016b8:	429a      	cmp	r2, r3
 81016ba:	d3e8      	bcc.n	810168e <osBoot_bootValidate+0x7a>
}
 81016bc:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 81016be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81016c0:	3301      	adds	r3, #1
 81016c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 81016c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81016c6:	6a3b      	ldr	r3, [r7, #32]
 81016c8:	429a      	cmp	r2, r3
 81016ca:	d3b7      	bcc.n	810163c <osBoot_bootValidate+0x28>
	}
};
 81016cc:	bf00      	nop
 81016ce:	bf00      	nop
 81016d0:	3730      	adds	r7, #48	; 0x30
 81016d2:	46bd      	mov	sp, r7
 81016d4:	bd80      	pop	{r7, pc}
 81016d6:	bf00      	nop
 81016d8:	08104214 	.word	0x08104214

081016dc <osInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osInit_init(void)
{
 81016dc:	b580      	push	{r7, lr}
 81016de:	b082      	sub	sp, #8
 81016e0:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_OsVariableType * osVar;

    switchMemoryProtection_init();
 81016e2:	f7ff fee2 	bl	81014aa <memoryProtection_init>
	osBoot_bootValidate();
 81016e6:	f7ff ff95 	bl	8101614 <osBoot_bootValidate>

    osVar = os_getOsVar();
 81016ea:	f7ff ff83 	bl	81015f4 <os_getOsVar>
 81016ee:	6078      	str	r0, [r7, #4]

    CILcore_setCoreVar(osVar);
 81016f0:	6878      	ldr	r0, [r7, #4]
 81016f2:	f000 fda2 	bl	810223a <CILcore_setCoreVar>

    coreVar = core_getCoreVar();
 81016f6:	f7ff fe03 	bl	8101300 <core_getCoreVar>
 81016fa:	6038      	str	r0, [r7, #0]

    stackInit_init( coreVar );
 81016fc:	6838      	ldr	r0, [r7, #0]
 81016fe:	f000 fca0 	bl	8102042 <stackInit_init>

    //init MPU
    //init DMA to buffers
    //Maybe better have here CILmicroInit()

    coreSync_getBarrier( coreVar, OS_INIT_ID );
 8101702:	2100      	movs	r1, #0
 8101704:	6838      	ldr	r0, [r7, #0]
 8101706:	f7ff fe35 	bl	8101374 <coreSync_getBarrier>

};
 810170a:	bf00      	nop
 810170c:	3708      	adds	r7, #8
 810170e:	46bd      	mov	sp, r7
 8101710:	bd80      	pop	{r7, pc}
	...

08101714 <permission_tryAccess>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_AccessStateType permission_tryAccess(CosmOS_PermissionsConfigurationType * permission,CosmOS_CoreVariableType * coreVar)
{
 8101714:	b480      	push	{r7}
 8101716:	b089      	sub	sp, #36	; 0x24
 8101718:	af00      	add	r7, sp, #0
 810171a:	6078      	str	r0, [r7, #4]
 810171c:	6039      	str	r1, [r7, #0]
 810171e:	683b      	ldr	r3, [r7, #0]
 8101720:	60bb      	str	r3, [r7, #8]
 8101722:	68bb      	ldr	r3, [r7, #8]
 8101724:	685b      	ldr	r3, [r3, #4]
    CosmOS_AccessStateType accessState;

    CosmOS_SchedulableVariableType * schedulableVar;

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 8101726:	61fb      	str	r3, [r7, #28]
 8101728:	687b      	ldr	r3, [r7, #4]
 810172a:	617b      	str	r3, [r7, #20]
 810172c:	69fb      	ldr	r3, [r7, #28]
 810172e:	613b      	str	r3, [r7, #16]
    cosmosAssert( IS_NOT( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] & \
 8101730:	697b      	ldr	r3, [r7, #20]
 8101732:	681a      	ldr	r2, [r3, #0]
 8101734:	693b      	ldr	r3, [r7, #16]
 8101736:	681b      	ldr	r3, [r3, #0]
 8101738:	691b      	ldr	r3, [r3, #16]
 810173a:	491b      	ldr	r1, [pc, #108]	; (81017a8 <permission_tryAccess+0x94>)
 810173c:	5ccb      	ldrb	r3, [r1, r3]
 810173e:	009b      	lsls	r3, r3, #2
 8101740:	4413      	add	r3, r2
 8101742:	681a      	ldr	r2, [r3, #0]
 8101744:	697b      	ldr	r3, [r7, #20]
 8101746:	6859      	ldr	r1, [r3, #4]
 8101748:	693b      	ldr	r3, [r7, #16]
 810174a:	681b      	ldr	r3, [r3, #0]
 810174c:	691b      	ldr	r3, [r3, #16]
 810174e:	4816      	ldr	r0, [pc, #88]	; (81017a8 <permission_tryAccess+0x94>)
 8101750:	5cc3      	ldrb	r3, [r0, r3]
 8101752:	009b      	lsls	r3, r3, #2
 8101754:	440b      	add	r3, r1
 8101756:	681b      	ldr	r3, [r3, #0]
 8101758:	4013      	ands	r3, r2
 810175a:	2b00      	cmp	r3, #0
 810175c:	bf0c      	ite	eq
 810175e:	2301      	moveq	r3, #1
 8101760:	2300      	movne	r3, #0
 8101762:	b2db      	uxtb	r3, r3
 8101764:	60fb      	str	r3, [r7, #12]
 8101766:	bf00      	nop
    return ((( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] >> schedulableVar->cfg->id ) & BITLOCK_MASK ) ? \
 8101768:	697b      	ldr	r3, [r7, #20]
 810176a:	681a      	ldr	r2, [r3, #0]
 810176c:	693b      	ldr	r3, [r7, #16]
 810176e:	681b      	ldr	r3, [r3, #0]
 8101770:	691b      	ldr	r3, [r3, #16]
 8101772:	490d      	ldr	r1, [pc, #52]	; (81017a8 <permission_tryAccess+0x94>)
 8101774:	5ccb      	ldrb	r3, [r1, r3]
 8101776:	009b      	lsls	r3, r3, #2
 8101778:	4413      	add	r3, r2
 810177a:	681a      	ldr	r2, [r3, #0]
 810177c:	693b      	ldr	r3, [r7, #16]
 810177e:	681b      	ldr	r3, [r3, #0]
 8101780:	691b      	ldr	r3, [r3, #16]
 8101782:	fa22 f303 	lsr.w	r3, r2, r3
 8101786:	f003 0301 	and.w	r3, r3, #1
            ACCESS_STATE_ENUM__ALLOWED : ACCESS_STATE_ENUM__DENIED );
 810178a:	2b00      	cmp	r3, #0
 810178c:	d001      	beq.n	8101792 <permission_tryAccess+0x7e>
 810178e:	2300      	movs	r3, #0
 8101790:	e001      	b.n	8101796 <permission_tryAccess+0x82>
 8101792:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    accessState = permission_trySchedulableAccess( permission, schedulableVar );
 8101796:	61bb      	str	r3, [r7, #24]

    return accessState;
 8101798:	69bb      	ldr	r3, [r7, #24]
}
 810179a:	4618      	mov	r0, r3
 810179c:	3724      	adds	r7, #36	; 0x24
 810179e:	46bd      	mov	sp, r7
 81017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017a4:	4770      	bx	lr
 81017a6:	bf00      	nop
 81017a8:	38000098 	.word	0x38000098

081017ac <schedulable_setExecutionStateToFinished>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void schedulable_setExecutionStateToFinished(void)
{
 81017ac:	b580      	push	{r7, lr}
 81017ae:	b086      	sub	sp, #24
 81017b0:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 81017b2:	f7ff fda5 	bl	8101300 <core_getCoreVar>
 81017b6:	6178      	str	r0, [r7, #20]
 81017b8:	697b      	ldr	r3, [r7, #20]
 81017ba:	607b      	str	r3, [r7, #4]
 81017bc:	687b      	ldr	r3, [r7, #4]
 81017be:	685b      	ldr	r3, [r3, #4]

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 81017c0:	613b      	str	r3, [r7, #16]
 81017c2:	693b      	ldr	r3, [r7, #16]
 81017c4:	60fb      	str	r3, [r7, #12]
 81017c6:	2302      	movs	r3, #2
 81017c8:	72fb      	strb	r3, [r7, #11]
  *
  * @return CosmOS_SchedulableStateType
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setState(CosmOS_SchedulableVariableType * schedulable, CosmOS_SchedulableStateType stateParam)
{
    schedulable->state = stateParam;
 81017ca:	68fb      	ldr	r3, [r7, #12]
 81017cc:	7afa      	ldrb	r2, [r7, #11]
 81017ce:	711a      	strb	r2, [r3, #4]
}
 81017d0:	bf00      	nop

    schedulable_setState( schedulableVar, SCHEDULABLE_INSTANCE_ENUM__EXECUTED );
};
 81017d2:	bf00      	nop
 81017d4:	3718      	adds	r7, #24
 81017d6:	46bd      	mov	sp, r7
 81017d8:	bd80      	pop	{r7, pc}

081017da <scheduler_performanceScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_performanceScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks)
{
 81017da:	b480      	push	{r7}
 81017dc:	b093      	sub	sp, #76	; 0x4c
 81017de:	af00      	add	r7, sp, #0
 81017e0:	60f8      	str	r0, [r7, #12]
 81017e2:	60b9      	str	r1, [r7, #8]
 81017e4:	607a      	str	r2, [r7, #4]
 81017e6:	603b      	str	r3, [r7, #0]
 81017e8:	68fb      	ldr	r3, [r7, #12]
 81017ea:	613b      	str	r3, [r7, #16]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType scheduler_getSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler)
{
    return (scheduler->threadListIterator);
 81017ec:	693b      	ldr	r3, [r7, #16]
 81017ee:	68db      	ldr	r3, [r3, #12]
        threadListElementsNum;

    CosmOS_ThreadVariableType *threadVar;


    threadListIterator = scheduler_getSchedulerThreadListIterator(schedulerVar);
 81017f0:	647b      	str	r3, [r7, #68]	; 0x44
 81017f2:	68fb      	ldr	r3, [r7, #12]
 81017f4:	617b      	str	r3, [r7, #20]
    return (scheduler->cfg->threadListElementsNum);
 81017f6:	697b      	ldr	r3, [r7, #20]
 81017f8:	681b      	ldr	r3, [r3, #0]
 81017fa:	695b      	ldr	r3, [r3, #20]
    threadListElementsNum = scheduler_getSchedulerThreadListElementsNum(schedulerVar);
 81017fc:	643b      	str	r3, [r7, #64]	; 0x40

    cosmosAssert(threadListIterator < threadListElementsNum);
 81017fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8101800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101802:	429a      	cmp	r2, r3
 8101804:	bf34      	ite	cc
 8101806:	2301      	movcc	r3, #1
 8101808:	2300      	movcs	r3, #0
 810180a:	b2db      	uxtb	r3, r3
 810180c:	61bb      	str	r3, [r7, #24]
 810180e:	bf00      	nop
 8101810:	68fb      	ldr	r3, [r7, #12]
 8101812:	623b      	str	r3, [r7, #32]
 8101814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101816:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * scheduler_getSchedulerThreadListThreadVar(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIterator)
{
    return (CosmOS_ThreadVariableType *)(scheduler->cfg->threadList[threadListIterator].threadVar);
 8101818:	6a3b      	ldr	r3, [r7, #32]
 810181a:	681b      	ldr	r3, [r3, #0]
 810181c:	685a      	ldr	r2, [r3, #4]
 810181e:	69fb      	ldr	r3, [r7, #28]
 8101820:	009b      	lsls	r3, r3, #2
 8101822:	4413      	add	r3, r2
 8101824:	681b      	ldr	r3, [r3, #0]

    threadVar = scheduler_getSchedulerThreadListThreadVar(schedulerVar, threadListIterator);
 8101826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810182a:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * thread_getThreadSchedulable(CosmOS_ThreadVariableType * thread)
{
    return (CosmOS_SchedulableVariableType *)(thread->schedulable);
 810182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810182e:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = thread_getThreadSchedulable(threadVar);
 8101830:	68bb      	ldr	r3, [r7, #8]
 8101832:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = schedulable_getStackPointer(*schedulableVar);
 8101834:	68bb      	ldr	r3, [r7, #8]
 8101836:	681b      	ldr	r3, [r3, #0]
 8101838:	62bb      	str	r3, [r7, #40]	; 0x28
    return (schedulable->stackPointer);
 810183a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810183c:	689a      	ldr	r2, [r3, #8]
 810183e:	687b      	ldr	r3, [r7, #4]
 8101840:	601a      	str	r2, [r3, #0]

    threadListIterator = ((threadListIterator + 1) % threadListElementsNum);
 8101842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101844:	3301      	adds	r3, #1
 8101846:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8101848:	fbb3 f2f2 	udiv	r2, r3, r2
 810184c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810184e:	fb01 f202 	mul.w	r2, r1, r2
 8101852:	1a9b      	subs	r3, r3, r2
 8101854:	647b      	str	r3, [r7, #68]	; 0x44
 8101856:	68fb      	ldr	r3, [r7, #12]
 8101858:	633b      	str	r3, [r7, #48]	; 0x30
 810185a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIteratorParam)
{
    scheduler->threadListIterator = threadListIteratorParam;
 810185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101862:	60da      	str	r2, [r3, #12]
}
 8101864:	bf00      	nop
 8101866:	68fb      	ldr	r3, [r7, #12]
 8101868:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->preemptTick);
 810186a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810186c:	681b      	ldr	r3, [r3, #0]
 810186e:	68db      	ldr	r3, [r3, #12]
    scheduler_setSchedulerThreadListIterator(schedulerVar, threadListIterator);

    preemptTick = scheduler_getSchedulerPreemptTick(schedulerVar);
 8101870:	63bb      	str	r3, [r7, #56]	; 0x38
    *timerTicks = preemptTick;
 8101872:	683b      	ldr	r3, [r7, #0]
 8101874:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8101876:	601a      	str	r2, [r3, #0]
}
 8101878:	bf00      	nop
 810187a:	374c      	adds	r7, #76	; 0x4c
 810187c:	46bd      	mov	sp, r7
 810187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101882:	4770      	bx	lr

08101884 <scheduler_classicScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_classicScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks, BitWidthType startTick, BitWidthType currentTick)
{
 8101884:	b580      	push	{r7, lr}
 8101886:	b088      	sub	sp, #32
 8101888:	af00      	add	r7, sp, #0
 810188a:	60f8      	str	r0, [r7, #12]
 810188c:	60b9      	str	r1, [r7, #8]
 810188e:	607a      	str	r2, [r7, #4]
 8101890:	603b      	str	r3, [r7, #0]
 8101892:	68fb      	ldr	r3, [r7, #12]
 8101894:	617b      	str	r3, [r7, #20]
    return (CosmOS_TaskVariableType *)(scheduler->cfg->idleTaskVar);
 8101896:	697b      	ldr	r3, [r7, #20]
 8101898:	681b      	ldr	r3, [r3, #0]
 810189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    CosmOS_TaskVariableType * taskVar;


    taskVar = scheduler_getSchedulerIdleTaskVar( schedulerVar );
 810189c:	61fb      	str	r3, [r7, #28]
 810189e:	69fb      	ldr	r3, [r7, #28]
 81018a0:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * task_getTaskSchedulable(CosmOS_TaskVariableType * task)
{
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 81018a2:	69bb      	ldr	r3, [r7, #24]
 81018a4:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = task_getTaskSchedulable( taskVar );
 81018a6:	68bb      	ldr	r3, [r7, #8]
 81018a8:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 81018aa:	68bb      	ldr	r3, [r7, #8]
 81018ac:	681b      	ldr	r3, [r3, #0]
 81018ae:	4618      	mov	r0, r3
 81018b0:	f000 fba1 	bl	8101ff6 <stackInit_schedulableStackInit>
 81018b4:	4602      	mov	r2, r0
 81018b6:	687b      	ldr	r3, [r7, #4]
 81018b8:	601a      	str	r2, [r3, #0]

    if ( startTick < currentTick )
 81018ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81018be:	429a      	cmp	r2, r3
 81018c0:	d207      	bcs.n	81018d2 <scheduler_classicScheduling+0x4e>
 81018c2:	68fb      	ldr	r3, [r7, #12]
 81018c4:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->lastToFirstTaskTicks);
 81018c6:	693b      	ldr	r3, [r7, #16]
 81018c8:	681b      	ldr	r3, [r3, #0]
 81018ca:	699a      	ldr	r2, [r3, #24]
    {
        *timerTicks = scheduler_getSchedulerLastToFirstTaskTicks( schedulerVar );
 81018cc:	683b      	ldr	r3, [r7, #0]
 81018ce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *timerTicks = startTick - currentTick;
    }
}
 81018d0:	e004      	b.n	81018dc <scheduler_classicScheduling+0x58>
        *timerTicks = startTick - currentTick;
 81018d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81018d6:	1ad2      	subs	r2, r2, r3
 81018d8:	683b      	ldr	r3, [r7, #0]
 81018da:	601a      	str	r2, [r3, #0]
}
 81018dc:	bf00      	nop
 81018de:	3720      	adds	r7, #32
 81018e0:	46bd      	mov	sp, r7
 81018e2:	bd80      	pop	{r7, pc}

081018e4 <scheduler_scheduleNextInstance>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType scheduler_scheduleNextInstance(StackPointerType stackPointer)
{
 81018e4:	b580      	push	{r7, lr}
 81018e6:	b0b4      	sub	sp, #208	; 0xd0
 81018e8:	af00      	add	r7, sp, #0
 81018ea:	6078      	str	r0, [r7, #4]
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;
    CosmOS_SchedulableVariableType * priorSchedulableVar;


    coreVar = core_getCoreVar();
 81018ec:	f7ff fd08 	bl	8101300 <core_getCoreVar>
 81018f0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 81018f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 81018f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return (core->schedulerVar);
 81018fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101900:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8101902:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8101906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 810190a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (core->schedulableInExecution);
 810190e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101912:	685b      	ldr	r3, [r3, #4]
    priorSchedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 8101914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8101918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810191c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->cfg->hyperTick);
 8101920:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8101924:	681b      	ldr	r3, [r3, #0]
 8101926:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8101928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 810192c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101930:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->schedulerState);
 8101934:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101938:	7c1b      	ldrb	r3, [r3, #16]
    schedulerState = scheduler_getSchedulerState( schedulerVar );
 810193a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 810193e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (scheduler->currentTick);
 8101946:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 810194a:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 810194c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101954:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->scheduleTableIterator);
 8101958:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 810195c:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 810195e:	617b      	str	r3, [r7, #20]
 8101960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->cfg->scheduleTableElementsNum);
 8101968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 810196c:	681b      	ldr	r3, [r3, #0]
 810196e:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8101970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    if ( scheduleTableElementsNum )
 8101974:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8101978:	2b00      	cmp	r3, #0
 810197a:	d01c      	beq.n	81019b6 <scheduler_scheduleNextInstance+0xd2>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 810197c:	697b      	ldr	r3, [r7, #20]
 810197e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8101982:	429a      	cmp	r2, r3
 8101984:	bf8c      	ite	hi
 8101986:	2301      	movhi	r3, #1
 8101988:	2300      	movls	r3, #0
 810198a:	b2db      	uxtb	r3, r3
 810198c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8101990:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8101992:	697b      	ldr	r3, [r7, #20]
 8101994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8101998:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 810199c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 81019a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 81019a4:	681b      	ldr	r3, [r3, #0]
 81019a6:	681a      	ldr	r2, [r3, #0]
 81019a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 81019ac:	00db      	lsls	r3, r3, #3
 81019ae:	4413      	add	r3, r2
 81019b0:	681b      	ldr	r3, [r3, #0]
 81019b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    }

    //this should be moved to the sysTick interrupt with higher priority to have faster response - without else, that should stay here
    if ( schedulerState IS_EQUAL_TO SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK )
 81019b6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 81019ba:	2b01      	cmp	r3, #1
 81019bc:	d107      	bne.n	81019ce <scheduler_scheduleNextInstance+0xea>
 81019be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 81019c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (schedulable->state);
 81019c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 81019c6:	791b      	ldrb	r3, [r3, #4]
    {
        CosmOS_SchedulableStateType schedulableState;

        schedulableState = schedulable_getState( priorSchedulableVar );
 81019c8:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 81019cc:	e008      	b.n	81019e0 <scheduler_scheduleNextInstance+0xfc>
 81019ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 81019d2:	67bb      	str	r3, [r7, #120]	; 0x78
 81019d4:	687b      	ldr	r3, [r7, #4]
 81019d6:	677b      	str	r3, [r7, #116]	; 0x74
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setStackPointer(CosmOS_SchedulableVariableType * schedulable, StackPointerType stackPointerParam)
{
    schedulable->stackPointer = stackPointerParam;
 81019d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81019da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 81019dc:	609a      	str	r2, [r3, #8]
}
 81019de:	bf00      	nop
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_setStackPointer( priorSchedulableVar, stackPointer );
    }

    if ( scheduleTableElementsNum AND startTick IS_EQUAL_TO currentTick )
 81019e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 81019e4:	2b00      	cmp	r3, #0
 81019e6:	d060      	beq.n	8101aaa <scheduler_scheduleNextInstance+0x1c6>
 81019e8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 81019ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 81019f0:	429a      	cmp	r2, r3
 81019f2:	d15a      	bne.n	8101aaa <scheduler_scheduleNextInstance+0x1c6>
 81019f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81019f8:	673b      	str	r3, [r7, #112]	; 0x70
 81019fa:	f107 030c 	add.w	r3, r7, #12
 81019fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8101a00:	f107 0310 	add.w	r3, r7, #16
 8101a04:	66bb      	str	r3, [r7, #104]	; 0x68
 8101a06:	f107 0318 	add.w	r3, r7, #24
 8101a0a:	667b      	str	r3, [r7, #100]	; 0x64
 8101a0c:	f107 0314 	add.w	r3, r7, #20
 8101a10:	663b      	str	r3, [r7, #96]	; 0x60
 8101a12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8101a16:	65fb      	str	r3, [r7, #92]	; 0x5c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8101a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101a1a:	681b      	ldr	r3, [r3, #0]
 8101a1c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8101a1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8101a20:	657b      	str	r3, [r7, #84]	; 0x54
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8101a22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8101a24:	681b      	ldr	r3, [r3, #0]
 8101a26:	681a      	ldr	r2, [r3, #0]
 8101a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101a2a:	00db      	lsls	r3, r3, #3
 8101a2c:	4413      	add	r3, r2
 8101a2e:	685b      	ldr	r3, [r3, #4]
 8101a30:	653b      	str	r3, [r7, #80]	; 0x50
 8101a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101a38:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8101a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101a3c:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8101a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101a40:	681b      	ldr	r3, [r3, #0]
 8101a42:	4618      	mov	r0, r3
 8101a44:	f000 fad7 	bl	8101ff6 <stackInit_schedulableStackInit>
 8101a48:	4602      	mov	r2, r0
 8101a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101a4c:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 8101a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101a50:	681b      	ldr	r3, [r3, #0]
 8101a52:	64bb      	str	r3, [r7, #72]	; 0x48
 8101a54:	2301      	movs	r3, #1
 8101a56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    schedulable->state = stateParam;
 8101a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101a5c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8101a60:	711a      	strb	r2, [r3, #4]
}
 8101a62:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8101a64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101a66:	681b      	ldr	r3, [r3, #0]
 8101a68:	3301      	adds	r3, #1
 8101a6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8101a6c:	fbb3 f2f2 	udiv	r2, r3, r2
 8101a70:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8101a72:	fb01 f202 	mul.w	r2, r1, r2
 8101a76:	1a9a      	subs	r2, r3, r2
 8101a78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101a7a:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8101a7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101a7e:	681b      	ldr	r3, [r3, #0]
 8101a80:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8101a82:	643a      	str	r2, [r7, #64]	; 0x40
 8101a84:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8101a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101a88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8101a8a:	609a      	str	r2, [r3, #8]
}
 8101a8c:	bf00      	nop
 8101a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101a90:	63bb      	str	r3, [r7, #56]	; 0x38
    return (task->cfg->wcet);
 8101a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101a94:	681b      	ldr	r3, [r3, #0]
 8101a96:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8101a98:	637b      	str	r3, [r7, #52]	; 0x34
    *timerTicks = wcet;
 8101a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8101a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101a9e:	601a      	str	r2, [r3, #0]
}
 8101aa0:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8101aa2:	2301      	movs	r3, #1
 8101aa4:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8101aa8:	e00c      	b.n	8101ac4 <scheduler_scheduleNextInstance+0x1e0>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 8101aaa:	f107 0318 	add.w	r3, r7, #24
 8101aae:	f107 0210 	add.w	r2, r7, #16
 8101ab2:	f107 010c 	add.w	r1, r7, #12
 8101ab6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8101aba:	f7ff fe8e 	bl	81017da <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8101abe:	2302      	movs	r3, #2
 8101ac0:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8101ac4:	68fa      	ldr	r2, [r7, #12]
 8101ac6:	693b      	ldr	r3, [r7, #16]
 8101ac8:	623a      	str	r2, [r7, #32]
 8101aca:	61fb      	str	r3, [r7, #28]
    schedulable->stackPointer = stackPointerParam;
 8101acc:	6a3b      	ldr	r3, [r7, #32]
 8101ace:	69fa      	ldr	r2, [r7, #28]
 8101ad0:	609a      	str	r2, [r3, #8]
}
 8101ad2:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8101ad4:	68fb      	ldr	r3, [r7, #12]
 8101ad6:	4619      	mov	r1, r3
 8101ad8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8101adc:	f7ff fc1c 	bl	8101318 <core_setSchedulableIntoCurrentContext>
 8101ae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8101ae6:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8101aea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_SchedulerStateType schedulerStateParam)
{
    scheduler->schedulerState = schedulerStateParam;
 8101aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101af0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8101af4:	741a      	strb	r2, [r3, #16]
}
 8101af6:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 8101af8:	2300      	movs	r3, #0
 8101afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    currentTick = ( ( currentTick + timerTicks ) % hyperTick );
 8101afe:	69ba      	ldr	r2, [r7, #24]
 8101b00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101b04:	4413      	add	r3, r2
 8101b06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8101b0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8101b0e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8101b12:	fb01 f202 	mul.w	r2, r1, r2
 8101b16:	1a9b      	subs	r3, r3, r2
 8101b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101b20:	633b      	str	r3, [r7, #48]	; 0x30
 8101b22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    scheduler->currentTick = currentTickParam;
 8101b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101b2c:	605a      	str	r2, [r3, #4]
}
 8101b2e:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 8101b30:	68fb      	ldr	r3, [r7, #12]
 8101b32:	4619      	mov	r1, r3
 8101b34:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8101b38:	f7ff fcbd 	bl	81014b6 <memoryProtection_setMemoryProtection>

    CILsysTimer_setTicks( timerTicks, schedulersSyncState );
 8101b3c:	69bb      	ldr	r3, [r7, #24]
 8101b3e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8101b42:	4618      	mov	r0, r3
 8101b44:	f000 fe74 	bl	8102830 <CILsysTimer_setTicks>

    return stackPointerRetVal;
 8101b48:	693b      	ldr	r3, [r7, #16]
};
 8101b4a:	4618      	mov	r0, r3
 8101b4c:	37d0      	adds	r7, #208	; 0xd0
 8101b4e:	46bd      	mov	sp, r7
 8101b50:	bd80      	pop	{r7, pc}

08101b52 <scheduler_start>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_start(void)
{
 8101b52:	b580      	push	{r7, lr}
 8101b54:	b0aa      	sub	sp, #168	; 0xa8
 8101b56:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8101b58:	f7ff fbd2 	bl	8101300 <core_getCoreVar>
 8101b5c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8101b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8101b64:	677b      	str	r3, [r7, #116]	; 0x74
    return (core->schedulerVar);
 8101b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8101b68:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8101b6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8101b6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101b72:	67bb      	str	r3, [r7, #120]	; 0x78
    return (scheduler->cfg->hyperTick);
 8101b74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8101b7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8101b7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101b82:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (scheduler->currentTick);
 8101b84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8101b86:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8101b88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8101b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (scheduler->scheduleTableIterator);
 8101b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8101b98:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8101b9a:	607b      	str	r3, [r7, #4]
 8101b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101ba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTableElementsNum);
 8101ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8101ba8:	681b      	ldr	r3, [r3, #0]
 8101baa:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8101bac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if ( scheduleTableElementsNum )
 8101bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101bb4:	2b00      	cmp	r3, #0
 8101bb6:	d017      	beq.n	8101be8 <scheduler_start+0x96>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8101bb8:	687b      	ldr	r3, [r7, #4]
 8101bba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8101bbe:	429a      	cmp	r2, r3
 8101bc0:	bf8c      	ite	hi
 8101bc2:	2301      	movhi	r3, #1
 8101bc4:	2300      	movls	r3, #0
 8101bc6:	b2db      	uxtb	r3, r3
 8101bc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8101bca:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8101bcc:	687b      	ldr	r3, [r7, #4]
 8101bce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8101bd2:	673a      	str	r2, [r7, #112]	; 0x70
 8101bd4:	66fb      	str	r3, [r7, #108]	; 0x6c
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8101bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101bd8:	681b      	ldr	r3, [r3, #0]
 8101bda:	681a      	ldr	r2, [r3, #0]
 8101bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101bde:	00db      	lsls	r3, r3, #3
 8101be0:	4413      	add	r3, r2
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }

    if ( scheduleTableElementsNum AND (startTick IS_EQUAL_TO currentTick) )
 8101be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101bec:	2b00      	cmp	r3, #0
 8101bee:	d05e      	beq.n	8101cae <scheduler_start+0x15c>
 8101bf0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8101bf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101bf8:	429a      	cmp	r2, r3
 8101bfa:	d158      	bne.n	8101cae <scheduler_start+0x15c>
 8101bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101c00:	667b      	str	r3, [r7, #100]	; 0x64
 8101c02:	463b      	mov	r3, r7
 8101c04:	663b      	str	r3, [r7, #96]	; 0x60
 8101c06:	f107 0308 	add.w	r3, r7, #8
 8101c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8101c0c:	f107 030c 	add.w	r3, r7, #12
 8101c10:	65bb      	str	r3, [r7, #88]	; 0x58
 8101c12:	1d3b      	adds	r3, r7, #4
 8101c14:	657b      	str	r3, [r7, #84]	; 0x54
 8101c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101c1a:	653b      	str	r3, [r7, #80]	; 0x50
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8101c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101c1e:	681b      	ldr	r3, [r3, #0]
 8101c20:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101c22:	64fa      	str	r2, [r7, #76]	; 0x4c
 8101c24:	64bb      	str	r3, [r7, #72]	; 0x48
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8101c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101c28:	681b      	ldr	r3, [r3, #0]
 8101c2a:	681a      	ldr	r2, [r3, #0]
 8101c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101c2e:	00db      	lsls	r3, r3, #3
 8101c30:	4413      	add	r3, r2
 8101c32:	685b      	ldr	r3, [r3, #4]
 8101c34:	647b      	str	r3, [r7, #68]	; 0x44
 8101c36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101c38:	643b      	str	r3, [r7, #64]	; 0x40
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8101c3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101c3c:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8101c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101c40:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8101c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101c44:	681b      	ldr	r3, [r3, #0]
 8101c46:	4618      	mov	r0, r3
 8101c48:	f000 f9d5 	bl	8101ff6 <stackInit_schedulableStackInit>
 8101c4c:	4602      	mov	r2, r0
 8101c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101c50:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 8101c52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101c54:	681b      	ldr	r3, [r3, #0]
 8101c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101c58:	2301      	movs	r3, #1
 8101c5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    schedulable->state = stateParam;
 8101c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101c60:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8101c64:	711a      	strb	r2, [r3, #4]
}
 8101c66:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8101c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101c6a:	681b      	ldr	r3, [r3, #0]
 8101c6c:	3301      	adds	r3, #1
 8101c6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101c70:	fbb3 f2f2 	udiv	r2, r3, r2
 8101c74:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8101c76:	fb01 f202 	mul.w	r2, r1, r2
 8101c7a:	1a9a      	subs	r2, r3, r2
 8101c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101c7e:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8101c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101c82:	681b      	ldr	r3, [r3, #0]
 8101c84:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101c86:	637a      	str	r2, [r7, #52]	; 0x34
 8101c88:	633b      	str	r3, [r7, #48]	; 0x30
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8101c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101c8e:	609a      	str	r2, [r3, #8]
}
 8101c90:	bf00      	nop
 8101c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (task->cfg->wcet);
 8101c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101c98:	681b      	ldr	r3, [r3, #0]
 8101c9a:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8101c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    *timerTicks = wcet;
 8101c9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8101ca0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101ca2:	601a      	str	r2, [r3, #0]
}
 8101ca4:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8101ca6:	2301      	movs	r3, #1
 8101ca8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8101cac:	e00b      	b.n	8101cc6 <scheduler_start+0x174>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 8101cae:	f107 030c 	add.w	r3, r7, #12
 8101cb2:	f107 0208 	add.w	r2, r7, #8
 8101cb6:	4639      	mov	r1, r7
 8101cb8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8101cbc:	f7ff fd8d 	bl	81017da <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8101cc0:	2302      	movs	r3, #2
 8101cc2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8101cc6:	683a      	ldr	r2, [r7, #0]
 8101cc8:	68bb      	ldr	r3, [r7, #8]
 8101cca:	617a      	str	r2, [r7, #20]
 8101ccc:	613b      	str	r3, [r7, #16]
    schedulable->stackPointer = stackPointerParam;
 8101cce:	697b      	ldr	r3, [r7, #20]
 8101cd0:	693a      	ldr	r2, [r7, #16]
 8101cd2:	609a      	str	r2, [r3, #8]
}
 8101cd4:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8101cd6:	683b      	ldr	r3, [r7, #0]
 8101cd8:	4619      	mov	r1, r3
 8101cda:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8101cde:	f7ff fb1b 	bl	8101318 <core_setSchedulableIntoCurrentContext>
 8101ce2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101ce6:	61fb      	str	r3, [r7, #28]
 8101ce8:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8101cec:	76fb      	strb	r3, [r7, #27]
    scheduler->schedulerState = schedulerStateParam;
 8101cee:	69fb      	ldr	r3, [r7, #28]
 8101cf0:	7efa      	ldrb	r2, [r7, #27]
 8101cf2:	741a      	strb	r2, [r3, #16]
}
 8101cf4:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 8101cf6:	2300      	movs	r3, #0
 8101cf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    currentTick = ( currentTick + timerTicks ) % hyperTick;
 8101cfc:	68fa      	ldr	r2, [r7, #12]
 8101cfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101d02:	4413      	add	r3, r2
 8101d04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8101d08:	fbb3 f2f2 	udiv	r2, r3, r2
 8101d0c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8101d10:	fb01 f202 	mul.w	r2, r1, r2
 8101d14:	1a9b      	subs	r3, r3, r2
 8101d16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8101d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8101d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101d24:	623b      	str	r3, [r7, #32]
    scheduler->currentTick = currentTickParam;
 8101d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d28:	6a3a      	ldr	r2, [r7, #32]
 8101d2a:	605a      	str	r2, [r3, #4]
}
 8101d2c:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar , schedulableVar );
 8101d2e:	683b      	ldr	r3, [r7, #0]
 8101d30:	4619      	mov	r1, r3
 8101d32:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8101d36:	f7ff fbbe 	bl	81014b6 <memoryProtection_setMemoryProtection>

    CILsysTimer_setTicks( timerTicks, schedulersSyncState );
 8101d3a:	68fb      	ldr	r3, [r7, #12]
 8101d3c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8101d40:	4618      	mov	r0, r3
 8101d42:	f000 fd75 	bl	8102830 <CILsysTimer_setTicks>

    CILstack_setStackPointer( stackPointerRetVal );
 8101d46:	68bb      	ldr	r3, [r7, #8]
 8101d48:	4618      	mov	r0, r3
 8101d4a:	f000 fcf0 	bl	810272e <CILstack_setStackPointer>
};
 8101d4e:	bf00      	nop
 8101d50:	37a8      	adds	r7, #168	; 0xa8
 8101d52:	46bd      	mov	sp, r7
 8101d54:	bd80      	pop	{r7, pc}

08101d56 <schedulerSync_sync>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SchedulerSyncStateType schedulerSync_sync(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_CoreVariableType * coreVar, BitWidthType currentTick, BitWidthType hyperTick)
{
 8101d56:	b580      	push	{r7, lr}
 8101d58:	b096      	sub	sp, #88	; 0x58
 8101d5a:	af00      	add	r7, sp, #0
 8101d5c:	60f8      	str	r0, [r7, #12]
 8101d5e:	60b9      	str	r1, [r7, #8]
 8101d60:	607a      	str	r2, [r7, #4]
 8101d62:	603b      	str	r3, [r7, #0]

    CosmOS_BooleanType syncInitState;

    CosmOS_SchedulerSyncStateType schedulerState = SCHEDULER_SYNC_STATE_ENUM__NOT_IN_SYNC;
 8101d64:	2300      	movs	r3, #0
 8101d66:	657b      	str	r3, [r7, #84]	; 0x54
 8101d68:	68fb      	ldr	r3, [r7, #12]
 8101d6a:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->syncInitState);
 8101d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101d6e:	7e1b      	ldrb	r3, [r3, #24]


    syncInitState = scheduler_getSchedulerSyncInitState( schedulerVar );
 8101d70:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    if ( __COSMOS_UNLIKELY( syncInitState IS_EQUAL_TO False ) )
 8101d74:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8101d78:	2b00      	cmp	r3, #0
 8101d7a:	bf0c      	ite	eq
 8101d7c:	2301      	moveq	r3, #1
 8101d7e:	2300      	movne	r3, #0
 8101d80:	b2db      	uxtb	r3, r3
 8101d82:	2b00      	cmp	r3, #0
 8101d84:	d030      	beq.n	8101de8 <schedulerSync_sync+0x92>
 8101d86:	68fb      	ldr	r3, [r7, #12]
 8101d88:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->firstSyncTaskStartTick);
 8101d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d8c:	681b      	ldr	r3, [r3, #0]
 8101d8e:	6a1b      	ldr	r3, [r3, #32]
    {
        BitWidthType firstSyncTaskStartTick;


        firstSyncTaskStartTick = scheduler_getSchedulerFirstSyncTaskStartTick( schedulerVar );
 8101d90:	647b      	str	r3, [r7, #68]	; 0x44

        if ( firstSyncTaskStartTick IS_EQUAL_TO currentTick )
 8101d92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	429a      	cmp	r2, r3
 8101d98:	d150      	bne.n	8101e3c <schedulerSync_sync+0xe6>
 8101d9a:	68fb      	ldr	r3, [r7, #12]
 8101d9c:	623b      	str	r3, [r7, #32]
    return (scheduler->cfg->syncTicks);
 8101d9e:	6a3b      	ldr	r3, [r7, #32]
 8101da0:	681b      	ldr	r3, [r3, #0]
 8101da2:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks,
                          nextTick;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8101da4:	643b      	str	r3, [r7, #64]	; 0x40

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8101da6:	687a      	ldr	r2, [r7, #4]
 8101da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101daa:	4413      	add	r3, r2
 8101dac:	683a      	ldr	r2, [r7, #0]
 8101dae:	fbb3 f2f2 	udiv	r2, r3, r2
 8101db2:	6839      	ldr	r1, [r7, #0]
 8101db4:	fb01 f202 	mul.w	r2, r1, r2
 8101db8:	1a9b      	subs	r3, r3, r2
 8101dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101dbc:	68fb      	ldr	r3, [r7, #12]
 8101dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8101dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101dc2:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerNextSyncTick(CosmOS_SchedulerVariableType * scheduler, BitWidthType paramNextSyncTick)
{
    scheduler->nextSyncTick = paramNextSyncTick;
 8101dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101dc8:	615a      	str	r2, [r3, #20]
}
 8101dca:	bf00      	nop
 8101dcc:	68fb      	ldr	r3, [r7, #12]
 8101dce:	633b      	str	r3, [r7, #48]	; 0x30
 8101dd0:	2301      	movs	r3, #1
 8101dd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerSyncInitState(CosmOS_SchedulerVariableType * scheduler, CosmOS_BooleanType paramSyncInitState)
{
    scheduler->syncInitState = paramSyncInitState;
 8101dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101dd8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8101ddc:	761a      	strb	r2, [r3, #24]
}
 8101dde:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            scheduler_setSchedulerSyncInitState( schedulerVar, True );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8101de0:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8101de4:	657b      	str	r3, [r7, #84]	; 0x54
 8101de6:	e029      	b.n	8101e3c <schedulerSync_sync+0xe6>
 8101de8:	68fb      	ldr	r3, [r7, #12]
 8101dea:	61fb      	str	r3, [r7, #28]
    return (scheduler->nextSyncTick);
 8101dec:	69fb      	ldr	r3, [r7, #28]
 8101dee:	695b      	ldr	r3, [r3, #20]
    else
    {
        BitWidthType nextTick;


        nextTick = scheduler_getSchedulerNextSyncTick( schedulerVar );
 8101df0:	64fb      	str	r3, [r7, #76]	; 0x4c

        if ( __COSMOS_UNLIKELY( nextTick IS_EQUAL_TO currentTick ) )
 8101df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	429a      	cmp	r2, r3
 8101df8:	bf0c      	ite	eq
 8101dfa:	2301      	moveq	r3, #1
 8101dfc:	2300      	movne	r3, #0
 8101dfe:	b2db      	uxtb	r3, r3
 8101e00:	2b00      	cmp	r3, #0
 8101e02:	d01b      	beq.n	8101e3c <schedulerSync_sync+0xe6>
 8101e04:	68fb      	ldr	r3, [r7, #12]
 8101e06:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->syncTicks);
 8101e08:	693b      	ldr	r3, [r7, #16]
 8101e0a:	681b      	ldr	r3, [r3, #0]
 8101e0c:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8101e0e:	64bb      	str	r3, [r7, #72]	; 0x48

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8101e10:	687a      	ldr	r2, [r7, #4]
 8101e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101e14:	4413      	add	r3, r2
 8101e16:	683a      	ldr	r2, [r7, #0]
 8101e18:	fbb3 f2f2 	udiv	r2, r3, r2
 8101e1c:	6839      	ldr	r1, [r7, #0]
 8101e1e:	fb01 f202 	mul.w	r2, r1, r2
 8101e22:	1a9b      	subs	r3, r3, r2
 8101e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101e26:	68fb      	ldr	r3, [r7, #12]
 8101e28:	61bb      	str	r3, [r7, #24]
 8101e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101e2c:	617b      	str	r3, [r7, #20]
    scheduler->nextSyncTick = paramNextSyncTick;
 8101e2e:	69bb      	ldr	r3, [r7, #24]
 8101e30:	697a      	ldr	r2, [r7, #20]
 8101e32:	615a      	str	r2, [r3, #20]
}
 8101e34:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8101e36:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8101e3a:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    if ( schedulerState IS_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 8101e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101e3e:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8101e42:	d107      	bne.n	8101e54 <schedulerSync_sync+0xfe>
    {
        coreSync_getBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8101e44:	2103      	movs	r1, #3
 8101e46:	68b8      	ldr	r0, [r7, #8]
 8101e48:	f7ff fa94 	bl	8101374 <coreSync_getBarrier>
        coreSync_reactivateBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8101e4c:	2103      	movs	r1, #3
 8101e4e:	68b8      	ldr	r0, [r7, #8]
 8101e50:	f7ff faf8 	bl	8101444 <coreSync_reactivateBarrier>
    }

    return schedulerState;
 8101e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
};
 8101e56:	4618      	mov	r0, r3
 8101e58:	3758      	adds	r7, #88	; 0x58
 8101e5a:	46bd      	mov	sp, r7
 8101e5c:	bd80      	pop	{r7, pc}

08101e5e <spinlock_getSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_getSpinlock(BitWidthType id)
{
 8101e5e:	b580      	push	{r7, lr}
 8101e60:	b090      	sub	sp, #64	; 0x40
 8101e62:	af00      	add	r7, sp, #0
 8101e64:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 8101e66:	f7ff fbc5 	bl	81015f4 <os_getOsVar>
 8101e6a:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101e6c:	464b      	mov	r3, r9
 8101e6e:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 8101e70:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 8101e72:	637b      	str	r3, [r7, #52]	; 0x34
 8101e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101e76:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 8101e78:	693b      	ldr	r3, [r7, #16]
 8101e7a:	681b      	ldr	r3, [r3, #0]
 8101e7c:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 8101e7e:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 8101e80:	687a      	ldr	r2, [r7, #4]
 8101e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101e84:	429a      	cmp	r2, r3
 8101e86:	bf34      	ite	cc
 8101e88:	2301      	movcc	r3, #1
 8101e8a:	2300      	movcs	r3, #0
 8101e8c:	b2db      	uxtb	r3, r3
 8101e8e:	617b      	str	r3, [r7, #20]
 8101e90:	bf00      	nop
 8101e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101e94:	61fb      	str	r3, [r7, #28]
 8101e96:	687b      	ldr	r3, [r7, #4]
 8101e98:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SpinlockVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SpinlockVariableType * os_getOsSpinlockVar(CosmOS_OsVariableType * osVar, BitWidthType spinlockId)
{
    return (&(osVar->spinlockVars[spinlockId]));
 8101e9a:	69fb      	ldr	r3, [r7, #28]
 8101e9c:	691a      	ldr	r2, [r3, #16]
 8101e9e:	69bb      	ldr	r3, [r7, #24]
 8101ea0:	00db      	lsls	r3, r3, #3
 8101ea2:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8101ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8101eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101eac:	623b      	str	r3, [r7, #32]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType spinlock_willCauseDeadlock(CosmOS_CoreVariableType * coreVar, CosmOS_SpinlockVariableType * spinlockVar)
{
    return ((spinlockVar->spinlock) AND (coreVar->cfg->coreId IS_EQUAL_TO spinlockVar->lockedByCoreId)) ? True : False;
 8101eae:	6a3b      	ldr	r3, [r7, #32]
 8101eb0:	681b      	ldr	r3, [r3, #0]
 8101eb2:	2b00      	cmp	r3, #0
 8101eb4:	d008      	beq.n	8101ec8 <spinlock_getSpinlock+0x6a>
 8101eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101eb8:	681b      	ldr	r3, [r3, #0]
 8101eba:	68da      	ldr	r2, [r3, #12]
 8101ebc:	6a3b      	ldr	r3, [r7, #32]
 8101ebe:	685b      	ldr	r3, [r3, #4]
 8101ec0:	429a      	cmp	r2, r3
 8101ec2:	d101      	bne.n	8101ec8 <spinlock_getSpinlock+0x6a>
 8101ec4:	2301      	movs	r3, #1
 8101ec6:	e000      	b.n	8101eca <spinlock_getSpinlock+0x6c>
 8101ec8:	2300      	movs	r3, #0
 8101eca:	b2db      	uxtb	r3, r3

	willCauseDeadlock = spinlock_willCauseDeadlock(coreVar, spinlockVar);
 8101ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if( willCauseDeadlock )
 8101ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8101ed4:	2b00      	cmp	r3, #0
 8101ed6:	d002      	beq.n	8101ede <spinlock_getSpinlock+0x80>
	{
		spinlockState = SPINLOCK_STATE_ENUM__ERROR;
 8101ed8:	23ff      	movs	r3, #255	; 0xff
 8101eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101edc:	e009      	b.n	8101ef2 <spinlock_getSpinlock+0x94>
	}
	else
	{
		spinlockState = CILspinlock_getSpinlock( &(spinlockVar->spinlock) );
 8101ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101ee0:	4618      	mov	r0, r3
 8101ee2:	f000 fb97 	bl	8102614 <CILspinlock_getSpinlock>
 8101ee6:	63f8      	str	r0, [r7, #60]	; 0x3c
		spinlockVar->lockedByCoreId = coreVar->cfg->coreId;
 8101ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101eea:	681b      	ldr	r3, [r3, #0]
 8101eec:	68da      	ldr	r2, [r3, #12]
 8101eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101ef0:	605a      	str	r2, [r3, #4]
	}

    return spinlockState;
 8101ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8101ef4:	4618      	mov	r0, r3
 8101ef6:	3740      	adds	r7, #64	; 0x40
 8101ef8:	46bd      	mov	sp, r7
 8101efa:	bd80      	pop	{r7, pc}

08101efc <spinlock_trySpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType spinlock_trySpinlock(BitWidthType id)
{
 8101efc:	b580      	push	{r7, lr}
 8101efe:	b090      	sub	sp, #64	; 0x40
 8101f00:	af00      	add	r7, sp, #0
 8101f02:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 8101f04:	f7ff fb76 	bl	81015f4 <os_getOsVar>
 8101f08:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101f0a:	464b      	mov	r3, r9
 8101f0c:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 8101f0e:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 8101f10:	637b      	str	r3, [r7, #52]	; 0x34
 8101f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101f14:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 8101f16:	693b      	ldr	r3, [r7, #16]
 8101f18:	681b      	ldr	r3, [r3, #0]
 8101f1a:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 8101f1c:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 8101f1e:	687a      	ldr	r2, [r7, #4]
 8101f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101f22:	429a      	cmp	r2, r3
 8101f24:	bf34      	ite	cc
 8101f26:	2301      	movcc	r3, #1
 8101f28:	2300      	movcs	r3, #0
 8101f2a:	b2db      	uxtb	r3, r3
 8101f2c:	617b      	str	r3, [r7, #20]
 8101f2e:	bf00      	nop
 8101f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101f32:	61fb      	str	r3, [r7, #28]
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	61bb      	str	r3, [r7, #24]
    return (&(osVar->spinlockVars[spinlockId]));
 8101f38:	69fb      	ldr	r3, [r7, #28]
 8101f3a:	691a      	ldr	r2, [r3, #16]
 8101f3c:	69bb      	ldr	r3, [r7, #24]
 8101f3e:	00db      	lsls	r3, r3, #3
 8101f40:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8101f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101f46:	627b      	str	r3, [r7, #36]	; 0x24
 8101f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101f4a:	623b      	str	r3, [r7, #32]
 8101f4c:	6a3b      	ldr	r3, [r7, #32]
 8101f4e:	681b      	ldr	r3, [r3, #0]
 8101f50:	2b00      	cmp	r3, #0
 8101f52:	d008      	beq.n	8101f66 <spinlock_trySpinlock+0x6a>
 8101f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101f56:	681b      	ldr	r3, [r3, #0]
 8101f58:	68da      	ldr	r2, [r3, #12]
 8101f5a:	6a3b      	ldr	r3, [r7, #32]
 8101f5c:	685b      	ldr	r3, [r3, #4]
 8101f5e:	429a      	cmp	r2, r3
 8101f60:	d101      	bne.n	8101f66 <spinlock_trySpinlock+0x6a>
 8101f62:	2301      	movs	r3, #1
 8101f64:	e000      	b.n	8101f68 <spinlock_trySpinlock+0x6c>
 8101f66:	2300      	movs	r3, #0
 8101f68:	b2db      	uxtb	r3, r3

	willCauseDeadlock = spinlock_willCauseDeadlock(coreVar, spinlockVar);
 8101f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if( willCauseDeadlock )
 8101f6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8101f72:	2b00      	cmp	r3, #0
 8101f74:	d002      	beq.n	8101f7c <spinlock_trySpinlock+0x80>
	{
		spinlockState = SPINLOCK_STATE_ENUM__ERROR;
 8101f76:	23ff      	movs	r3, #255	; 0xff
 8101f78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101f7a:	e00c      	b.n	8101f96 <spinlock_trySpinlock+0x9a>
	}
	else
	{
		spinlockState = CILspinlock_trySpinlock( &(spinlockVar->spinlock) );
 8101f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101f7e:	4618      	mov	r0, r3
 8101f80:	f000 fb61 	bl	8102646 <CILspinlock_trySpinlock>
 8101f84:	63f8      	str	r0, [r7, #60]	; 0x3c

		if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8101f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101f88:	2b02      	cmp	r3, #2
 8101f8a:	d104      	bne.n	8101f96 <spinlock_trySpinlock+0x9a>
		{
			spinlockVar->lockedByCoreId = coreVar->cfg->coreId;
 8101f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101f8e:	681b      	ldr	r3, [r3, #0]
 8101f90:	68da      	ldr	r2, [r3, #12]
 8101f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101f94:	605a      	str	r2, [r3, #4]
		}
	}

    return spinlockState;
 8101f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101f98:	b2db      	uxtb	r3, r3
}
 8101f9a:	4618      	mov	r0, r3
 8101f9c:	3740      	adds	r7, #64	; 0x40
 8101f9e:	46bd      	mov	sp, r7
 8101fa0:	bd80      	pop	{r7, pc}

08101fa2 <spinlock_releaseSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_releaseSpinlock(BitWidthType id)
{
 8101fa2:	b580      	push	{r7, lr}
 8101fa4:	b08a      	sub	sp, #40	; 0x28
 8101fa6:	af00      	add	r7, sp, #0
 8101fa8:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	CosmOS_OsVariableType * osVar;
	CosmOS_SpinlockVariableType * spinlockVar;

    osVar = os_getOsVar();
 8101faa:	f7ff fb23 	bl	81015f4 <os_getOsVar>
 8101fae:	6278      	str	r0, [r7, #36]	; 0x24
 8101fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101fb2:	60bb      	str	r3, [r7, #8]
    return (osVar->cfg->numberOfSpinlocks);
 8101fb4:	68bb      	ldr	r3, [r7, #8]
 8101fb6:	681b      	ldr	r3, [r3, #0]
 8101fb8:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 8101fba:	623b      	str	r3, [r7, #32]

	cosmosAssert( id < numberOfSpinlocks );
 8101fbc:	687a      	ldr	r2, [r7, #4]
 8101fbe:	6a3b      	ldr	r3, [r7, #32]
 8101fc0:	429a      	cmp	r2, r3
 8101fc2:	bf34      	ite	cc
 8101fc4:	2301      	movcc	r3, #1
 8101fc6:	2300      	movcs	r3, #0
 8101fc8:	b2db      	uxtb	r3, r3
 8101fca:	60fb      	str	r3, [r7, #12]
 8101fcc:	bf00      	nop
 8101fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101fd0:	617b      	str	r3, [r7, #20]
 8101fd2:	687b      	ldr	r3, [r7, #4]
 8101fd4:	613b      	str	r3, [r7, #16]
    return (&(osVar->spinlockVars[spinlockId]));
 8101fd6:	697b      	ldr	r3, [r7, #20]
 8101fd8:	691a      	ldr	r2, [r3, #16]
 8101fda:	693b      	ldr	r3, [r7, #16]
 8101fdc:	00db      	lsls	r3, r3, #3
 8101fde:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8101fe0:	61fb      	str	r3, [r7, #28]

	spinlockState = CILspinlock_releaseSpinlock( &(spinlockVar->spinlock) );
 8101fe2:	69fb      	ldr	r3, [r7, #28]
 8101fe4:	4618      	mov	r0, r3
 8101fe6:	f000 fb47 	bl	8102678 <CILspinlock_releaseSpinlock>
 8101fea:	61b8      	str	r0, [r7, #24]

	return spinlockState;
 8101fec:	69bb      	ldr	r3, [r7, #24]
}
 8101fee:	4618      	mov	r0, r3
 8101ff0:	3728      	adds	r7, #40	; 0x28
 8101ff2:	46bd      	mov	sp, r7
 8101ff4:	bd80      	pop	{r7, pc}

08101ff6 <stackInit_schedulableStackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType stackInit_schedulableStackInit(CosmOS_SchedulableVariableType  * schedulable)
{
 8101ff6:	b580      	push	{r7, lr}
 8101ff8:	b08c      	sub	sp, #48	; 0x30
 8101ffa:	af00      	add	r7, sp, #0
 8101ffc:	6078      	str	r0, [r7, #4]
 8101ffe:	687b      	ldr	r3, [r7, #4]
 8102000:	60fb      	str	r3, [r7, #12]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8102002:	68fb      	ldr	r3, [r7, #12]
 8102004:	681b      	ldr	r3, [r3, #0]
 8102006:	681b      	ldr	r3, [r3, #0]
    StackPointerType stackPointer;

    CosmOS_StackConfigurationType * stack;


    stack = schedulable_getStack( schedulable );
 8102008:	62fb      	str	r3, [r7, #44]	; 0x2c
 810200a:	687b      	ldr	r3, [r7, #4]
 810200c:	613b      	str	r3, [r7, #16]
    return (schedulable->cfg->handler);
 810200e:	693b      	ldr	r3, [r7, #16]
 8102010:	681b      	ldr	r3, [r3, #0]
 8102012:	689b      	ldr	r3, [r3, #8]
    handler = schedulable_getHandler( schedulable );
 8102014:	62bb      	str	r3, [r7, #40]	; 0x28
 8102016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102018:	617b      	str	r3, [r7, #20]
    return (stack->stackLowAddress);
 810201a:	697b      	ldr	r3, [r7, #20]
 810201c:	685b      	ldr	r3, [r3, #4]

    stackLowAddress = stack_getStackLowAddress( stack );
 810201e:	627b      	str	r3, [r7, #36]	; 0x24
 8102020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102022:	61bb      	str	r3, [r7, #24]
    return (stack->stackHighAddress);
 8102024:	69bb      	ldr	r3, [r7, #24]
 8102026:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 8102028:	623b      	str	r3, [r7, #32]

    stackPointer = CILstack_stackInit( stackLowAddress, stackHighAddress, (BitWidthType)handler );
 810202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810202c:	461a      	mov	r2, r3
 810202e:	6a39      	ldr	r1, [r7, #32]
 8102030:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8102032:	f000 fb39 	bl	81026a8 <CILstack_stackInit>
 8102036:	61f8      	str	r0, [r7, #28]

    return stackPointer;
 8102038:	69fb      	ldr	r3, [r7, #28]
}
 810203a:	4618      	mov	r0, r3
 810203c:	3730      	adds	r7, #48	; 0x30
 810203e:	46bd      	mov	sp, r7
 8102040:	bd80      	pop	{r7, pc}

08102042 <stackInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void stackInit_init(CosmOS_CoreVariableType * coreVar)
{
 8102042:	b580      	push	{r7, lr}
 8102044:	b094      	sub	sp, #80	; 0x50
 8102046:	af00      	add	r7, sp, #0
 8102048:	6078      	str	r0, [r7, #4]
 810204a:	687b      	ldr	r3, [r7, #4]
 810204c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->cfg->numberOfPrograms);
 810204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	685b      	ldr	r3, [r3, #4]
                  stackPointerRetVal;

    CosmOS_ThreadVariableType * threadVar;
    CosmOS_ProgramVariableType * programVar;

    numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 8102054:	647b      	str	r3, [r7, #68]	; 0x44

    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8102056:	2300      	movs	r3, #0
 8102058:	64fb      	str	r3, [r7, #76]	; 0x4c
 810205a:	e03a      	b.n	81020d2 <stackInit_init+0x90>
 810205c:	687b      	ldr	r3, [r7, #4]
 810205e:	627b      	str	r3, [r7, #36]	; 0x24
 8102060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102062:	623b      	str	r3, [r7, #32]
    return (&(core->programVars[programIterator]));
 8102064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102066:	68d9      	ldr	r1, [r3, #12]
 8102068:	6a3a      	ldr	r2, [r7, #32]
 810206a:	4613      	mov	r3, r2
 810206c:	005b      	lsls	r3, r3, #1
 810206e:	4413      	add	r3, r2
 8102070:	009b      	lsls	r3, r3, #2
 8102072:	440b      	add	r3, r1
    {
        programVar = core_getCoreProgramVar( coreVar, programIterator );
 8102074:	643b      	str	r3, [r7, #64]	; 0x40
 8102076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102078:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->numberOfThreads);
 810207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810207c:	681b      	ldr	r3, [r3, #0]
 810207e:	689b      	ldr	r3, [r3, #8]
        numberOfThreads = program_getProgramNumberOfThreads( programVar );
 8102080:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8102082:	2300      	movs	r3, #0
 8102084:	64bb      	str	r3, [r7, #72]	; 0x48
 8102086:	e01d      	b.n	81020c4 <stackInit_init+0x82>
 8102088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810208a:	613b      	str	r3, [r7, #16]
 810208c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810208e:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * program_getProgramThread(CosmOS_ProgramVariableType * program, BitWidthType threadIterator)
{
    return (&(program->threadVars[threadIterator]));
 8102090:	693b      	ldr	r3, [r7, #16]
 8102092:	689a      	ldr	r2, [r3, #8]
 8102094:	68fb      	ldr	r3, [r7, #12]
 8102096:	00db      	lsls	r3, r3, #3
 8102098:	4413      	add	r3, r2
        {
            CosmOS_SchedulableVariableType * schedulableVar;


            threadVar = program_getProgramThread( programVar, threadIterator );
 810209a:	63bb      	str	r3, [r7, #56]	; 0x38
 810209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810209e:	617b      	str	r3, [r7, #20]
 81020a0:	697b      	ldr	r3, [r7, #20]
 81020a2:	685b      	ldr	r3, [r3, #4]
            schedulableVar = thread_getThreadSchedulable( threadVar );
 81020a4:	637b      	str	r3, [r7, #52]	; 0x34

            stackPointerRetVal = stackInit_schedulableStackInit( schedulableVar );
 81020a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81020a8:	f7ff ffa5 	bl	8101ff6 <stackInit_schedulableStackInit>
 81020ac:	6338      	str	r0, [r7, #48]	; 0x30
 81020ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81020b0:	61fb      	str	r3, [r7, #28]
 81020b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81020b4:	61bb      	str	r3, [r7, #24]
    schedulable->stackPointer = stackPointerParam;
 81020b6:	69fb      	ldr	r3, [r7, #28]
 81020b8:	69ba      	ldr	r2, [r7, #24]
 81020ba:	609a      	str	r2, [r3, #8]
}
 81020bc:	bf00      	nop
        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 81020be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81020c0:	3301      	adds	r3, #1
 81020c2:	64bb      	str	r3, [r7, #72]	; 0x48
 81020c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81020c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81020c8:	429a      	cmp	r2, r3
 81020ca:	d3dd      	bcc.n	8102088 <stackInit_init+0x46>
    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 81020cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81020ce:	3301      	adds	r3, #1
 81020d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 81020d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 81020d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81020d6:	429a      	cmp	r2, r3
 81020d8:	d3c0      	bcc.n	810205c <stackInit_init+0x1a>
            schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
        }
    }
}
 81020da:	bf00      	nop
 81020dc:	bf00      	nop
 81020de:	3750      	adds	r7, #80	; 0x50
 81020e0:	46bd      	mov	sp, r7
 81020e2:	bd80      	pop	{r7, pc}

081020e4 <sysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysCalls_os(BitWidthType id)
{
 81020e4:	b580      	push	{r7, lr}
 81020e6:	b082      	sub	sp, #8
 81020e8:	af00      	add	r7, sp, #0
 81020ea:	6078      	str	r0, [r7, #4]
    CILsysCalls_os( id );
 81020ec:	6878      	ldr	r0, [r7, #4]
 81020ee:	f000 fb83 	bl	81027f8 <CILsysCalls_os>
};
 81020f2:	bf00      	nop
 81020f4:	3708      	adds	r7, #8
 81020f6:	46bd      	mov	sp, r7
 81020f8:	bd80      	pop	{r7, pc}

081020fa <sysCalls_readWrite>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_readWrite(BitWidthType id, void * entity, BitWidthType size)
{
 81020fa:	b580      	push	{r7, lr}
 81020fc:	b086      	sub	sp, #24
 81020fe:	af00      	add	r7, sp, #0
 8102100:	60f8      	str	r0, [r7, #12]
 8102102:	60b9      	str	r1, [r7, #8]
 8102104:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_readWrite( id, entity, size );
 8102106:	687a      	ldr	r2, [r7, #4]
 8102108:	68b9      	ldr	r1, [r7, #8]
 810210a:	68f8      	ldr	r0, [r7, #12]
 810210c:	f000 fb7f 	bl	810280e <CILsysCalls_readWrite>
 8102110:	6178      	str	r0, [r7, #20]

    return returnValue;
 8102112:	697b      	ldr	r3, [r7, #20]
};
 8102114:	4618      	mov	r0, r3
 8102116:	3718      	adds	r7, #24
 8102118:	46bd      	mov	sp, r7
 810211a:	bd80      	pop	{r7, pc}

0810211c <sysJobs_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysJobs_dispatcher(void)
{
 810211c:	b580      	push	{r7, lr}
 810211e:	b096      	sub	sp, #88	; 0x58
 8102120:	af00      	add	r7, sp, #0

    CosmOS_CoreVariableType * coreVar;
    CosmOS_SysJobsVariableType * sysJobsVar;


    coreVar = core_getCoreVar();
 8102122:	f7ff f8ed 	bl	8101300 <core_getCoreVar>
 8102126:	64f8      	str	r0, [r7, #76]	; 0x4c
 8102128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810212a:	627b      	str	r3, [r7, #36]	; 0x24
    return (core->sysJobs);
 810212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810212e:	69db      	ldr	r3, [r3, #28]
    sysJobsVar = core_getCoreOsSysJobs( coreVar );
 8102130:	64bb      	str	r3, [r7, #72]	; 0x48
 8102132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102134:	62bb      	str	r3, [r7, #40]	; 0x28
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs)
{
    return (sysJobs->currentTick);
 8102136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102138:	685b      	ldr	r3, [r3, #4]

    sysJobsCurrentTick = sysJobs_getSysJobsCurrentTick( sysJobsVar );
 810213a:	647b      	str	r3, [r7, #68]	; 0x44
 810213c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810213e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (sysJobs->cfg->numOfGroups);
 8102140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102142:	681b      	ldr	r3, [r3, #0]
 8102144:	685b      	ldr	r3, [r3, #4]
    numOfGroups = sysJobs_getSysJobsNumOfGroups( sysJobsVar );
 8102146:	643b      	str	r3, [r7, #64]	; 0x40

    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8102148:	2300      	movs	r3, #0
 810214a:	657b      	str	r3, [r7, #84]	; 0x54
 810214c:	e049      	b.n	81021e2 <sysJobs_dispatcher+0xc6>
 810214e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102150:	623b      	str	r3, [r7, #32]
 8102152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102154:	61fb      	str	r3, [r7, #28]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsGroupTickMultiplicator(CosmOS_SysJobsVariableType * sysJobs, BitWidthType groupId)
{
    return (sysJobs->cfg->groups[groupId].tickMultiplicator);
 8102156:	6a3b      	ldr	r3, [r7, #32]
 8102158:	681b      	ldr	r3, [r3, #0]
 810215a:	6819      	ldr	r1, [r3, #0]
 810215c:	69fa      	ldr	r2, [r7, #28]
 810215e:	4613      	mov	r3, r2
 8102160:	005b      	lsls	r3, r3, #1
 8102162:	4413      	add	r3, r2
 8102164:	009b      	lsls	r3, r3, #2
 8102166:	440b      	add	r3, r1
 8102168:	689b      	ldr	r3, [r3, #8]
    {
        BitWidthType  groupTickMultiplicator;


        groupTickMultiplicator = sysJobs_getSysJobsGroupTickMultiplicator( sysJobsVar, groupIterator );
 810216a:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( IS_NOT( sysJobsCurrentTick % groupTickMultiplicator ) )
 810216c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810216e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8102170:	fbb3 f2f2 	udiv	r2, r3, r2
 8102174:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8102176:	fb01 f202 	mul.w	r2, r1, r2
 810217a:	1a9b      	subs	r3, r3, r2
 810217c:	2b00      	cmp	r3, #0
 810217e:	d12d      	bne.n	81021dc <sysJobs_dispatcher+0xc0>
 8102180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102182:	613b      	str	r3, [r7, #16]
 8102184:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102186:	60fb      	str	r3, [r7, #12]
    return (CosmOS_GenericVoidType *)(sysJobs->cfg->groups[groupId].handlers);
 8102188:	693b      	ldr	r3, [r7, #16]
 810218a:	681b      	ldr	r3, [r3, #0]
 810218c:	6819      	ldr	r1, [r3, #0]
 810218e:	68fa      	ldr	r2, [r7, #12]
 8102190:	4613      	mov	r3, r2
 8102192:	005b      	lsls	r3, r3, #1
 8102194:	4413      	add	r3, r2
 8102196:	009b      	lsls	r3, r3, #2
 8102198:	440b      	add	r3, r1
 810219a:	681b      	ldr	r3, [r3, #0]
        {
            BitWidthType numOfHandlers;
            CosmOS_GenericVoidType * handlers;


            handlers = sysJobs_getSysJobsGroupHandlers( sysJobsVar, groupIterator );
 810219c:	637b      	str	r3, [r7, #52]	; 0x34
 810219e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81021a0:	61bb      	str	r3, [r7, #24]
 81021a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81021a4:	617b      	str	r3, [r7, #20]
    return (sysJobs->cfg->groups[groupId].numOfHandlers);
 81021a6:	69bb      	ldr	r3, [r7, #24]
 81021a8:	681b      	ldr	r3, [r3, #0]
 81021aa:	6819      	ldr	r1, [r3, #0]
 81021ac:	697a      	ldr	r2, [r7, #20]
 81021ae:	4613      	mov	r3, r2
 81021b0:	005b      	lsls	r3, r3, #1
 81021b2:	4413      	add	r3, r2
 81021b4:	009b      	lsls	r3, r3, #2
 81021b6:	440b      	add	r3, r1
 81021b8:	685b      	ldr	r3, [r3, #4]
            numOfHandlers = sysJobs_getSysJobsGroupNumOfHandlers( sysJobsVar, groupIterator );
 81021ba:	633b      	str	r3, [r7, #48]	; 0x30

            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 81021bc:	2300      	movs	r3, #0
 81021be:	653b      	str	r3, [r7, #80]	; 0x50
 81021c0:	e008      	b.n	81021d4 <sysJobs_dispatcher+0xb8>
            {
                handlers[handlerIterator]();
 81021c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81021c4:	009b      	lsls	r3, r3, #2
 81021c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81021c8:	4413      	add	r3, r2
 81021ca:	681b      	ldr	r3, [r3, #0]
 81021cc:	4798      	blx	r3
            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 81021ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81021d0:	3301      	adds	r3, #1
 81021d2:	653b      	str	r3, [r7, #80]	; 0x50
 81021d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 81021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81021d8:	429a      	cmp	r2, r3
 81021da:	d3f2      	bcc.n	81021c2 <sysJobs_dispatcher+0xa6>
    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 81021dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81021de:	3301      	adds	r3, #1
 81021e0:	657b      	str	r3, [r7, #84]	; 0x54
 81021e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 81021e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81021e6:	429a      	cmp	r2, r3
 81021e8:	d3b1      	bcc.n	810214e <sysJobs_dispatcher+0x32>
 81021ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81021ec:	603b      	str	r3, [r7, #0]
    return (sysJobs->cfg->hyperTick);
 81021ee:	683b      	ldr	r3, [r7, #0]
 81021f0:	681b      	ldr	r3, [r3, #0]
 81021f2:	689b      	ldr	r3, [r3, #8]
            }
        }
    }

    hyperTick = sysJobs_getSysJobsHyperTick( sysJobsVar );
 81021f4:	63fb      	str	r3, [r7, #60]	; 0x3c

    sysJobsCurrentTick = ( ( sysJobsCurrentTick + 1 ) % hyperTick );
 81021f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81021f8:	3301      	adds	r3, #1
 81021fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81021fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8102200:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8102202:	fb01 f202 	mul.w	r2, r1, r2
 8102206:	1a9b      	subs	r3, r3, r2
 8102208:	647b      	str	r3, [r7, #68]	; 0x44
 810220a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810220c:	60bb      	str	r3, [r7, #8]
 810220e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102210:	607b      	str	r3, [r7, #4]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void sysJobs_setSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs, BitWidthType currentTickParam)
{
    sysJobs->currentTick = currentTickParam;
 8102212:	68bb      	ldr	r3, [r7, #8]
 8102214:	687a      	ldr	r2, [r7, #4]
 8102216:	605a      	str	r2, [r3, #4]
}
 8102218:	bf00      	nop
    sysJobs_setSysJobsCurrentTick( sysJobsVar, sysJobsCurrentTick );

};
 810221a:	bf00      	nop
 810221c:	3758      	adds	r7, #88	; 0x58
 810221e:	46bd      	mov	sp, r7
 8102220:	bd80      	pop	{r7, pc}

08102222 <CILcore_getCoreId>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILcore_getCoreId(void)
{
 8102222:	b580      	push	{r7, lr}
 8102224:	af00      	add	r7, sp, #0
    return (HAL_GetCurrentCPUID() == CM7_CPUID) ? CORE_0_ID : CORE_1_ID;
 8102226:	f001 f857 	bl	81032d8 <HAL_GetCurrentCPUID>
 810222a:	4603      	mov	r3, r0
 810222c:	2b03      	cmp	r3, #3
 810222e:	bf14      	ite	ne
 8102230:	2301      	movne	r3, #1
 8102232:	2300      	moveq	r3, #0
 8102234:	b2db      	uxtb	r3, r3
}
 8102236:	4618      	mov	r0, r3
 8102238:	bd80      	pop	{r7, pc}

0810223a <CILcore_setCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILcore_setCoreVar(CosmOS_OsVariableType * osVar)
{
 810223a:	b580      	push	{r7, lr}
 810223c:	b08a      	sub	sp, #40	; 0x28
 810223e:	af00      	add	r7, sp, #0
 8102240:	6078      	str	r0, [r7, #4]
    BitWidthType coreId,
                numberOfCores;

    CosmOS_CoreVariableType * coreVar;

    coreId = CILcore_getCoreId();
 8102242:	f7ff ffee 	bl	8102222 <CILcore_getCoreId>
 8102246:	6278      	str	r0, [r7, #36]	; 0x24
 8102248:	687b      	ldr	r3, [r7, #4]
 810224a:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfCores);
 810224c:	68fb      	ldr	r3, [r7, #12]
 810224e:	681b      	ldr	r3, [r3, #0]
 8102250:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 8102252:	623b      	str	r3, [r7, #32]

    cosmosAssert( coreId < numberOfCores );
 8102254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102256:	6a3b      	ldr	r3, [r7, #32]
 8102258:	429a      	cmp	r2, r3
 810225a:	bf34      	ite	cc
 810225c:	2301      	movcc	r3, #1
 810225e:	2300      	movcs	r3, #0
 8102260:	b2db      	uxtb	r3, r3
 8102262:	613b      	str	r3, [r7, #16]
 8102264:	bf00      	nop
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	61bb      	str	r3, [r7, #24]
 810226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810226c:	617b      	str	r3, [r7, #20]
    return (&(osVar->coreVars[coreId]));
 810226e:	69bb      	ldr	r3, [r7, #24]
 8102270:	685a      	ldr	r2, [r3, #4]
 8102272:	697b      	ldr	r3, [r7, #20]
 8102274:	015b      	lsls	r3, r3, #5
 8102276:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, coreId );
 8102278:	61fb      	str	r3, [r7, #28]

    //must be changed, not valid for all compilers
    __asm volatile("MOV R9,%[coreVariable]" : [coreVariable] "=r" (coreVar));
 810227a:	4699      	mov	r9, r3
 810227c:	61fb      	str	r3, [r7, #28]
}
 810227e:	bf00      	nop
 8102280:	3728      	adds	r7, #40	; 0x28
 8102282:	46bd      	mov	sp, r7
 8102284:	bd80      	pop	{r7, pc}

08102286 <CILGPIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILGPIO_togglePin(void *GPIOx, BitWidthType GPIO_Pin)
{
 8102286:	b580      	push	{r7, lr}
 8102288:	b082      	sub	sp, #8
 810228a:	af00      	add	r7, sp, #0
 810228c:	6078      	str	r0, [r7, #4]
 810228e:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin( GPIOx, (uint16_t)GPIO_Pin );
 8102290:	683b      	ldr	r3, [r7, #0]
 8102292:	b29b      	uxth	r3, r3
 8102294:	4619      	mov	r1, r3
 8102296:	6878      	ldr	r0, [r7, #4]
 8102298:	f001 f9fb 	bl	8103692 <HAL_GPIO_TogglePin>
}
 810229c:	bf00      	nop
 810229e:	3708      	adds	r7, #8
 81022a0:	46bd      	mov	sp, r7
 81022a2:	bd80      	pop	{r7, pc}

081022a4 <CILmemoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_init(void)
{
 81022a4:	b580      	push	{r7, lr}
 81022a6:	b08a      	sub	sp, #40	; 0x28
 81022a8:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 81022aa:	463b      	mov	r3, r7
 81022ac:	2200      	movs	r2, #0
 81022ae:	601a      	str	r2, [r3, #0]
 81022b0:	605a      	str	r2, [r3, #4]
 81022b2:	609a      	str	r2, [r3, #8]
 81022b4:	60da      	str	r2, [r3, #12]
    BitWidthType core,
                 address;

    core = CILcore_getCoreId();
 81022b6:	f7ff ffb4 	bl	8102222 <CILcore_getCoreId>
 81022ba:	6238      	str	r0, [r7, #32]

    HAL_MPU_Disable();
 81022bc:	f000 ff90 	bl	81031e0 <HAL_MPU_Disable>

    if( core IS_EQUAL_TO CORE_0_ID){
 81022c0:	6a3b      	ldr	r3, [r7, #32]
 81022c2:	2b00      	cmp	r3, #0
 81022c4:	d11e      	bne.n	8102304 <CILmemoryProtection_init+0x60>

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81022c6:	2301      	movs	r3, #1
 81022c8:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 81022ca:	2300      	movs	r3, #0
 81022cc:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 81022ce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 81022d2:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 81022d4:	2314      	movs	r3, #20
 81022d6:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 81022d8:	2300      	movs	r3, #0
 81022da:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 81022dc:	2301      	movs	r3, #1
 81022de:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 81022e0:	2306      	movs	r3, #6
 81022e2:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 81022e4:	2300      	movs	r3, #0
 81022e6:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 81022e8:	2301      	movs	r3, #1
 81022ea:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 81022ec:	2301      	movs	r3, #1
 81022ee:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 81022f0:	2301      	movs	r3, #1
 81022f2:	73fb      	strb	r3, [r7, #15]

        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81022f4:	463b      	mov	r3, r7
 81022f6:	4618      	mov	r0, r3
 81022f8:	f000 ffaa 	bl	8103250 <HAL_MPU_ConfigRegion>

        address = 0x20000000;
 81022fc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8102300:	627b      	str	r3, [r7, #36]	; 0x24
 8102302:	e01d      	b.n	8102340 <CILmemoryProtection_init+0x9c>

    }
    else
    {

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102304:	2301      	movs	r3, #1
 8102306:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8102308:	2300      	movs	r3, #0
 810230a:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 810230c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8102310:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8102312:	2314      	movs	r3, #20
 8102314:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 8102316:	2300      	movs	r3, #0
 8102318:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 810231a:	2301      	movs	r3, #1
 810231c:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 810231e:	2306      	movs	r3, #6
 8102320:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102322:	2300      	movs	r3, #0
 8102324:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102326:	2301      	movs	r3, #1
 8102328:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 810232a:	2301      	movs	r3, #1
 810232c:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 810232e:	2301      	movs	r3, #1
 8102330:	73fb      	strb	r3, [r7, #15]

        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102332:	463b      	mov	r3, r7
 8102334:	4618      	mov	r0, r3
 8102336:	f000 ff8b 	bl	8103250 <HAL_MPU_ConfigRegion>

        address = 0x10000000;
 810233a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810233e:	627b      	str	r3, [r7, #36]	; 0x24

    }

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102340:	2301      	movs	r3, #1
 8102342:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8102344:	2301      	movs	r3, #1
 8102346:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = address;
 8102348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810234a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 810234c:	2310      	movs	r3, #16
 810234e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102350:	2300      	movs	r3, #0
 8102352:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102354:	2301      	movs	r3, #1
 8102356:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8102358:	2302      	movs	r3, #2
 810235a:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 810235c:	2300      	movs	r3, #0
 810235e:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102360:	2301      	movs	r3, #1
 8102362:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102364:	2301      	movs	r3, #1
 8102366:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102368:	2301      	movs	r3, #1
 810236a:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 810236c:	463b      	mov	r3, r7
 810236e:	4618      	mov	r0, r3
 8102370:	f000 ff6e 	bl	8103250 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102374:	2301      	movs	r3, #1
 8102376:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8102378:	2302      	movs	r3, #2
 810237a:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress =  (BitWidthType)_s_os_section_consts;
 810237c:	4b43      	ldr	r3, [pc, #268]	; (810248c <CILmemoryProtection_init+0x1e8>)
 810237e:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8102380:	4a43      	ldr	r2, [pc, #268]	; (8102490 <CILmemoryProtection_init+0x1ec>)
 8102382:	4b42      	ldr	r3, [pc, #264]	; (810248c <CILmemoryProtection_init+0x1e8>)
 8102384:	1ad3      	subs	r3, r2, r3
 8102386:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 1;
 8102388:	697b      	ldr	r3, [r7, #20]
 810238a:	085b      	lsrs	r3, r3, #1
 810238c:	697a      	ldr	r2, [r7, #20]
 810238e:	4313      	orrs	r3, r2
 8102390:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 2;
 8102392:	697b      	ldr	r3, [r7, #20]
 8102394:	089b      	lsrs	r3, r3, #2
 8102396:	697a      	ldr	r2, [r7, #20]
 8102398:	4313      	orrs	r3, r2
 810239a:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 4;
 810239c:	697b      	ldr	r3, [r7, #20]
 810239e:	091b      	lsrs	r3, r3, #4
 81023a0:	697a      	ldr	r2, [r7, #20]
 81023a2:	4313      	orrs	r3, r2
 81023a4:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 8;
 81023a6:	697b      	ldr	r3, [r7, #20]
 81023a8:	0a1b      	lsrs	r3, r3, #8
 81023aa:	697a      	ldr	r2, [r7, #20]
 81023ac:	4313      	orrs	r3, r2
 81023ae:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 16;
 81023b0:	697b      	ldr	r3, [r7, #20]
 81023b2:	0c1b      	lsrs	r3, r3, #16
 81023b4:	697a      	ldr	r2, [r7, #20]
 81023b6:	4313      	orrs	r3, r2
 81023b8:	617b      	str	r3, [r7, #20]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 81023ba:	697b      	ldr	r3, [r7, #20]
 81023bc:	4a35      	ldr	r2, [pc, #212]	; (8102494 <CILmemoryProtection_init+0x1f0>)
 81023be:	fb02 f303 	mul.w	r3, r2, r3
 81023c2:	0edb      	lsrs	r3, r3, #27
 81023c4:	4a34      	ldr	r2, [pc, #208]	; (8102498 <CILmemoryProtection_init+0x1f4>)
 81023c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81023ca:	613b      	str	r3, [r7, #16]
    return (result-1);
 81023cc:	693b      	ldr	r3, [r7, #16]
 81023ce:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 81023d0:	b2db      	uxtb	r3, r3
 81023d2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 81023d4:	2300      	movs	r3, #0
 81023d6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 81023d8:	2301      	movs	r3, #1
 81023da:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 81023dc:	2306      	movs	r3, #6
 81023de:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 81023e0:	2300      	movs	r3, #0
 81023e2:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 81023e4:	2301      	movs	r3, #1
 81023e6:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 81023e8:	2301      	movs	r3, #1
 81023ea:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 81023ec:	2301      	movs	r3, #1
 81023ee:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81023f0:	463b      	mov	r3, r7
 81023f2:	4618      	mov	r0, r3
 81023f4:	f000 ff2c 	bl	8103250 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81023f8:	2301      	movs	r3, #1
 81023fa:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 81023fc:	2303      	movs	r3, #3
 81023fe:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_os_section_vars;
 8102400:	4b26      	ldr	r3, [pc, #152]	; (810249c <CILmemoryProtection_init+0x1f8>)
 8102402:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8102404:	4a26      	ldr	r2, [pc, #152]	; (81024a0 <CILmemoryProtection_init+0x1fc>)
 8102406:	4b25      	ldr	r3, [pc, #148]	; (810249c <CILmemoryProtection_init+0x1f8>)
 8102408:	1ad3      	subs	r3, r2, r3
 810240a:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 810240c:	69fb      	ldr	r3, [r7, #28]
 810240e:	085b      	lsrs	r3, r3, #1
 8102410:	69fa      	ldr	r2, [r7, #28]
 8102412:	4313      	orrs	r3, r2
 8102414:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8102416:	69fb      	ldr	r3, [r7, #28]
 8102418:	089b      	lsrs	r3, r3, #2
 810241a:	69fa      	ldr	r2, [r7, #28]
 810241c:	4313      	orrs	r3, r2
 810241e:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 8102420:	69fb      	ldr	r3, [r7, #28]
 8102422:	091b      	lsrs	r3, r3, #4
 8102424:	69fa      	ldr	r2, [r7, #28]
 8102426:	4313      	orrs	r3, r2
 8102428:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 810242a:	69fb      	ldr	r3, [r7, #28]
 810242c:	0a1b      	lsrs	r3, r3, #8
 810242e:	69fa      	ldr	r2, [r7, #28]
 8102430:	4313      	orrs	r3, r2
 8102432:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 8102434:	69fb      	ldr	r3, [r7, #28]
 8102436:	0c1b      	lsrs	r3, r3, #16
 8102438:	69fa      	ldr	r2, [r7, #28]
 810243a:	4313      	orrs	r3, r2
 810243c:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 810243e:	69fb      	ldr	r3, [r7, #28]
 8102440:	4a14      	ldr	r2, [pc, #80]	; (8102494 <CILmemoryProtection_init+0x1f0>)
 8102442:	fb02 f303 	mul.w	r3, r2, r3
 8102446:	0edb      	lsrs	r3, r3, #27
 8102448:	4a13      	ldr	r2, [pc, #76]	; (8102498 <CILmemoryProtection_init+0x1f4>)
 810244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810244e:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8102450:	69bb      	ldr	r3, [r7, #24]
 8102452:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8102454:	b2db      	uxtb	r3, r3
 8102456:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102458:	2300      	movs	r3, #0
 810245a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 810245c:	2301      	movs	r3, #1
 810245e:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8102460:	2302      	movs	r3, #2
 8102462:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102464:	2300      	movs	r3, #0
 8102466:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102468:	2301      	movs	r3, #1
 810246a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 810246c:	2301      	movs	r3, #1
 810246e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102470:	2301      	movs	r3, #1
 8102472:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102474:	463b      	mov	r3, r7
 8102476:	4618      	mov	r0, r3
 8102478:	f000 feea 	bl	8103250 <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 810247c:	2006      	movs	r0, #6
 810247e:	f000 fec7 	bl	8103210 <HAL_MPU_Enable>

}
 8102482:	bf00      	nop
 8102484:	3728      	adds	r7, #40	; 0x28
 8102486:	46bd      	mov	sp, r7
 8102488:	bd80      	pop	{r7, pc}
 810248a:	bf00      	nop
 810248c:	38000000 	.word	0x38000000
 8102490:	38000800 	.word	0x38000800
 8102494:	07c4acdd 	.word	0x07c4acdd
 8102498:	08104224 	.word	0x08104224
 810249c:	38008000 	.word	0x38008000
 81024a0:	38008400 	.word	0x38008400

081024a4 <CILmemoryProtection_setStackOverflowProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setStackOverflowProtection(AddressType stackLowAddress, AddressType stackHighAddress)
{
 81024a4:	b580      	push	{r7, lr}
 81024a6:	b088      	sub	sp, #32
 81024a8:	af00      	add	r7, sp, #0
 81024aa:	6078      	str	r0, [r7, #4]
 81024ac:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 81024ae:	f107 0308 	add.w	r3, r7, #8
 81024b2:	2200      	movs	r2, #0
 81024b4:	601a      	str	r2, [r3, #0]
 81024b6:	605a      	str	r2, [r3, #4]
 81024b8:	609a      	str	r2, [r3, #8]
 81024ba:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 81024bc:	f000 fe90 	bl	81031e0 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81024c0:	2301      	movs	r3, #1
 81024c2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 81024c4:	2307      	movs	r3, #7
 81024c6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (stackLowAddress);
 81024c8:	687b      	ldr	r3, [r7, #4]
 81024ca:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 81024cc:	683a      	ldr	r2, [r7, #0]
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	1ad3      	subs	r3, r2, r3
 81024d2:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 81024d4:	69fb      	ldr	r3, [r7, #28]
 81024d6:	085b      	lsrs	r3, r3, #1
 81024d8:	69fa      	ldr	r2, [r7, #28]
 81024da:	4313      	orrs	r3, r2
 81024dc:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 81024de:	69fb      	ldr	r3, [r7, #28]
 81024e0:	089b      	lsrs	r3, r3, #2
 81024e2:	69fa      	ldr	r2, [r7, #28]
 81024e4:	4313      	orrs	r3, r2
 81024e6:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 81024e8:	69fb      	ldr	r3, [r7, #28]
 81024ea:	091b      	lsrs	r3, r3, #4
 81024ec:	69fa      	ldr	r2, [r7, #28]
 81024ee:	4313      	orrs	r3, r2
 81024f0:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 81024f2:	69fb      	ldr	r3, [r7, #28]
 81024f4:	0a1b      	lsrs	r3, r3, #8
 81024f6:	69fa      	ldr	r2, [r7, #28]
 81024f8:	4313      	orrs	r3, r2
 81024fa:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 81024fc:	69fb      	ldr	r3, [r7, #28]
 81024fe:	0c1b      	lsrs	r3, r3, #16
 8102500:	69fa      	ldr	r2, [r7, #28]
 8102502:	4313      	orrs	r3, r2
 8102504:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8102506:	69fb      	ldr	r3, [r7, #28]
 8102508:	4a12      	ldr	r2, [pc, #72]	; (8102554 <CILmemoryProtection_setStackOverflowProtection+0xb0>)
 810250a:	fb02 f303 	mul.w	r3, r2, r3
 810250e:	0edb      	lsrs	r3, r3, #27
 8102510:	4a11      	ldr	r2, [pc, #68]	; (8102558 <CILmemoryProtection_setStackOverflowProtection+0xb4>)
 8102512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102516:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8102518:	69bb      	ldr	r3, [r7, #24]
 810251a:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 810251c:	b2db      	uxtb	r3, r3
 810251e:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102520:	2300      	movs	r3, #0
 8102522:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102524:	2301      	movs	r3, #1
 8102526:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8102528:	2303      	movs	r3, #3
 810252a:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 810252c:	2300      	movs	r3, #0
 810252e:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102530:	2301      	movs	r3, #1
 8102532:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102534:	2301      	movs	r3, #1
 8102536:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102538:	2301      	movs	r3, #1
 810253a:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 810253c:	f107 0308 	add.w	r3, r7, #8
 8102540:	4618      	mov	r0, r3
 8102542:	f000 fe85 	bl	8103250 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8102546:	2006      	movs	r0, #6
 8102548:	f000 fe62 	bl	8103210 <HAL_MPU_Enable>
}
 810254c:	bf00      	nop
 810254e:	3720      	adds	r7, #32
 8102550:	46bd      	mov	sp, r7
 8102552:	bd80      	pop	{r7, pc}
 8102554:	07c4acdd 	.word	0x07c4acdd
 8102558:	08104224 	.word	0x08104224

0810255c <CILmemoryProtection_setProgramMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setProgramMemoryProtection(AddressType lowAddress, AddressType highAddress)
{
 810255c:	b580      	push	{r7, lr}
 810255e:	b088      	sub	sp, #32
 8102560:	af00      	add	r7, sp, #0
 8102562:	6078      	str	r0, [r7, #4]
 8102564:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8102566:	f107 0308 	add.w	r3, r7, #8
 810256a:	2200      	movs	r2, #0
 810256c:	601a      	str	r2, [r3, #0]
 810256e:	605a      	str	r2, [r3, #4]
 8102570:	609a      	str	r2, [r3, #8]
 8102572:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8102574:	f000 fe34 	bl	81031e0 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102578:	2301      	movs	r3, #1
 810257a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 810257c:	2306      	movs	r3, #6
 810257e:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 8102580:	687b      	ldr	r3, [r7, #4]
 8102582:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8102584:	683a      	ldr	r2, [r7, #0]
 8102586:	687b      	ldr	r3, [r7, #4]
 8102588:	1ad3      	subs	r3, r2, r3
 810258a:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 810258c:	69fb      	ldr	r3, [r7, #28]
 810258e:	085b      	lsrs	r3, r3, #1
 8102590:	69fa      	ldr	r2, [r7, #28]
 8102592:	4313      	orrs	r3, r2
 8102594:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8102596:	69fb      	ldr	r3, [r7, #28]
 8102598:	089b      	lsrs	r3, r3, #2
 810259a:	69fa      	ldr	r2, [r7, #28]
 810259c:	4313      	orrs	r3, r2
 810259e:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 81025a0:	69fb      	ldr	r3, [r7, #28]
 81025a2:	091b      	lsrs	r3, r3, #4
 81025a4:	69fa      	ldr	r2, [r7, #28]
 81025a6:	4313      	orrs	r3, r2
 81025a8:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 81025aa:	69fb      	ldr	r3, [r7, #28]
 81025ac:	0a1b      	lsrs	r3, r3, #8
 81025ae:	69fa      	ldr	r2, [r7, #28]
 81025b0:	4313      	orrs	r3, r2
 81025b2:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 81025b4:	69fb      	ldr	r3, [r7, #28]
 81025b6:	0c1b      	lsrs	r3, r3, #16
 81025b8:	69fa      	ldr	r2, [r7, #28]
 81025ba:	4313      	orrs	r3, r2
 81025bc:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 81025be:	69fb      	ldr	r3, [r7, #28]
 81025c0:	4a12      	ldr	r2, [pc, #72]	; (810260c <CILmemoryProtection_setProgramMemoryProtection+0xb0>)
 81025c2:	fb02 f303 	mul.w	r3, r2, r3
 81025c6:	0edb      	lsrs	r3, r3, #27
 81025c8:	4a11      	ldr	r2, [pc, #68]	; (8102610 <CILmemoryProtection_setProgramMemoryProtection+0xb4>)
 81025ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81025ce:	61bb      	str	r3, [r7, #24]
    return (result-1);
 81025d0:	69bb      	ldr	r3, [r7, #24]
 81025d2:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 81025d4:	b2db      	uxtb	r3, r3
 81025d6:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 81025d8:	2300      	movs	r3, #0
 81025da:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 81025dc:	2301      	movs	r3, #1
 81025de:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 81025e0:	2303      	movs	r3, #3
 81025e2:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 81025e4:	2300      	movs	r3, #0
 81025e6:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 81025e8:	2301      	movs	r3, #1
 81025ea:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 81025ec:	2301      	movs	r3, #1
 81025ee:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 81025f0:	2301      	movs	r3, #1
 81025f2:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81025f4:	f107 0308 	add.w	r3, r7, #8
 81025f8:	4618      	mov	r0, r3
 81025fa:	f000 fe29 	bl	8103250 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 81025fe:	2006      	movs	r0, #6
 8102600:	f000 fe06 	bl	8103210 <HAL_MPU_Enable>
}
 8102604:	bf00      	nop
 8102606:	3720      	adds	r7, #32
 8102608:	46bd      	mov	sp, r7
 810260a:	bd80      	pop	{r7, pc}
 810260c:	07c4acdd 	.word	0x07c4acdd
 8102610:	08104224 	.word	0x08104224

08102614 <CILspinlock_getSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_getSpinlock(AddressType * spinlockPointer)
{
 8102614:	b480      	push	{r7}
 8102616:	b085      	sub	sp, #20
 8102618:	af00      	add	r7, sp, #0
 810261a:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	__asm volatile("MOV R1, #0x1");
 810261c:	f04f 0101 	mov.w	r1, #1

08102620 <tryLock>:
    __asm volatile("tryLock:");
	__asm volatile("LDREXH R3, [R0]");
 8102620:	e8d0 3f5f 	ldrexh	r3, [r0]
	__asm volatile("CMP R3, #0");
 8102624:	2b00      	cmp	r3, #0
	__asm volatile("ITT EQ");
 8102626:	bf04      	itt	eq
	__asm volatile("STREXHEQ R3, R1, [R0]");
 8102628:	e8c0 1f53 	strexheq	r3, r1, [r0]
	__asm volatile("CMPEQ R3, #0");
 810262c:	2b00      	cmpeq	r3, #0
	__asm volatile("ITE EQ");
 810262e:	bf0c      	ite	eq
	__asm volatile("MOVEQ R1, #0x2");
 8102630:	2102      	moveq	r1, #2
	__asm volatile("BNE tryLock");
 8102632:	e7f5      	bne.n	8102620 <tryLock>
    __asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
 8102634:	460b      	mov	r3, r1
 8102636:	60fb      	str	r3, [r7, #12]

    return spinlockState;
 8102638:	68fb      	ldr	r3, [r7, #12]
}
 810263a:	4618      	mov	r0, r3
 810263c:	3714      	adds	r7, #20
 810263e:	46bd      	mov	sp, r7
 8102640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102644:	4770      	bx	lr

08102646 <CILspinlock_trySpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_trySpinlock(AddressType * spinlockPointer)
{
 8102646:	b480      	push	{r7}
 8102648:	b085      	sub	sp, #20
 810264a:	af00      	add	r7, sp, #0
 810264c:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	__asm volatile("MOV R1, #0x1");
 810264e:	f04f 0101 	mov.w	r1, #1
	__asm volatile("LDREXH R3, [R0]");
 8102652:	e8d0 3f5f 	ldrexh	r3, [r0]
	__asm volatile("CMP R3, #0");
 8102656:	2b00      	cmp	r3, #0
	__asm volatile("ITT EQ");
 8102658:	bf04      	itt	eq
	__asm volatile("STREXHEQ R3, R1, [R0]");
 810265a:	e8c0 1f53 	strexheq	r3, r1, [r0]
	__asm volatile("CMPEQ R3, #0");
 810265e:	2b00      	cmpeq	r3, #0
	__asm volatile("ITE NE");
 8102660:	bf14      	ite	ne
	__asm volatile("MOVNE R1, #0x1");
 8102662:	2101      	movne	r1, #1
	__asm volatile("MOVEQ R1, #0x2");
 8102664:	2102      	moveq	r1, #2
	__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
 8102666:	460b      	mov	r3, r1
 8102668:	60fb      	str	r3, [r7, #12]

    return spinlockState;
 810266a:	68fb      	ldr	r3, [r7, #12]
}
 810266c:	4618      	mov	r0, r3
 810266e:	3714      	adds	r7, #20
 8102670:	46bd      	mov	sp, r7
 8102672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102676:	4770      	bx	lr

08102678 <CILspinlock_releaseSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_releaseSpinlock(AddressType * spinlockPointer)
{
 8102678:	b480      	push	{r7}
 810267a:	b085      	sub	sp, #20
 810267c:	af00      	add	r7, sp, #0
 810267e:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	__asm volatile("MOV R1, #0x0");
 8102680:	f04f 0100 	mov.w	r1, #0

08102684 <tryUnlock>:
    __asm volatile("tryUnlock:");
	__asm volatile("LDREXH R3, [R0]");
 8102684:	e8d0 3f5f 	ldrexh	r3, [r0]
	__asm volatile("CMP R3, #1");
 8102688:	2b01      	cmp	r3, #1
	__asm volatile("ITT EQ");
 810268a:	bf04      	itt	eq
	__asm volatile("STREXHEQ R3, R1, [R0]");
 810268c:	e8c0 1f53 	strexheq	r3, r1, [r0]
	__asm volatile("CMPEQ R3, #0");
 8102690:	2b00      	cmpeq	r3, #0
	__asm volatile("IT NE");
 8102692:	bf18      	it	ne
	__asm volatile("BNE tryUnlock");
 8102694:	e7f6      	bne.n	8102684 <tryUnlock>
    __asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
 8102696:	460b      	mov	r3, r1
 8102698:	60fb      	str	r3, [r7, #12]

    return spinlockState;
 810269a:	68fb      	ldr	r3, [r7, #12]
}
 810269c:	4618      	mov	r0, r3
 810269e:	3714      	adds	r7, #20
 81026a0:	46bd      	mov	sp, r7
 81026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026a6:	4770      	bx	lr

081026a8 <CILstack_stackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType CILstack_stackInit(AddressType stackLowAddress, AddressType stackHighAddress, AddressType handlerAddress)
{
 81026a8:	b480      	push	{r7}
 81026aa:	b087      	sub	sp, #28
 81026ac:	af00      	add	r7, sp, #0
 81026ae:	60f8      	str	r0, [r7, #12]
 81026b0:	60b9      	str	r1, [r7, #8]
 81026b2:	607a      	str	r2, [r7, #4]
    CosmOS_StackType *stack = ( CosmOS_StackType* )( stackHighAddress - (AddressType)sizeof(CosmOS_StackType) );
 81026b4:	68bb      	ldr	r3, [r7, #8]
 81026b6:	3b40      	subs	r3, #64	; 0x40
 81026b8:	617b      	str	r3, [r7, #20]

    stack->XPSR  = 0x01000000;
 81026ba:	697b      	ldr	r3, [r7, #20]
 81026bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81026c0:	63da      	str	r2, [r3, #60]	; 0x3c
    stack->PC    = handlerAddress;
 81026c2:	697b      	ldr	r3, [r7, #20]
 81026c4:	687a      	ldr	r2, [r7, #4]
 81026c6:	639a      	str	r2, [r3, #56]	; 0x38
    stack->LR    = 0xFFFFFFFD;
 81026c8:	697b      	ldr	r3, [r7, #20]
 81026ca:	f06f 0202 	mvn.w	r2, #2
 81026ce:	635a      	str	r2, [r3, #52]	; 0x34
    stack->R12   = 0;
 81026d0:	697b      	ldr	r3, [r7, #20]
 81026d2:	2200      	movs	r2, #0
 81026d4:	631a      	str	r2, [r3, #48]	; 0x30
    stack->R3    = 0;
 81026d6:	697b      	ldr	r3, [r7, #20]
 81026d8:	2200      	movs	r2, #0
 81026da:	62da      	str	r2, [r3, #44]	; 0x2c
    stack->R2    = 0;
 81026dc:	697b      	ldr	r3, [r7, #20]
 81026de:	2200      	movs	r2, #0
 81026e0:	629a      	str	r2, [r3, #40]	; 0x28
    stack->R1    = 0;
 81026e2:	697b      	ldr	r3, [r7, #20]
 81026e4:	2200      	movs	r2, #0
 81026e6:	625a      	str	r2, [r3, #36]	; 0x24
    stack->R0    = 0;
 81026e8:	697b      	ldr	r3, [r7, #20]
 81026ea:	2200      	movs	r2, #0
 81026ec:	621a      	str	r2, [r3, #32]
    stack->R14   = 0xFFFFFFFD;
 81026ee:	697b      	ldr	r3, [r7, #20]
 81026f0:	f06f 0202 	mvn.w	r2, #2
 81026f4:	61da      	str	r2, [r3, #28]
    stack->R11   = 0;
 81026f6:	697b      	ldr	r3, [r7, #20]
 81026f8:	2200      	movs	r2, #0
 81026fa:	619a      	str	r2, [r3, #24]
    stack->R10   = 0;
 81026fc:	697b      	ldr	r3, [r7, #20]
 81026fe:	2200      	movs	r2, #0
 8102700:	615a      	str	r2, [r3, #20]
    stack->R8    = 0;
 8102702:	697b      	ldr	r3, [r7, #20]
 8102704:	2200      	movs	r2, #0
 8102706:	611a      	str	r2, [r3, #16]
    stack->R7    = 0;
 8102708:	697b      	ldr	r3, [r7, #20]
 810270a:	2200      	movs	r2, #0
 810270c:	60da      	str	r2, [r3, #12]
    stack->R6    = 0;
 810270e:	697b      	ldr	r3, [r7, #20]
 8102710:	2200      	movs	r2, #0
 8102712:	609a      	str	r2, [r3, #8]
    stack->R5    = 0;
 8102714:	697b      	ldr	r3, [r7, #20]
 8102716:	2200      	movs	r2, #0
 8102718:	605a      	str	r2, [r3, #4]
    stack->R4    = 0;
 810271a:	697b      	ldr	r3, [r7, #20]
 810271c:	2200      	movs	r2, #0
 810271e:	601a      	str	r2, [r3, #0]

    return (StackPointerType)(&(stack->R4));
 8102720:	697b      	ldr	r3, [r7, #20]
}
 8102722:	4618      	mov	r0, r3
 8102724:	371c      	adds	r7, #28
 8102726:	46bd      	mov	sp, r7
 8102728:	f85d 7b04 	ldr.w	r7, [sp], #4
 810272c:	4770      	bx	lr

0810272e <CILstack_setStackPointer>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION __NAKED void CILstack_setStackPointer(AddressType address)
{
    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 810272e:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
	__asm volatile ("MSR PSP,R0");
 8102732:	f380 8809 	msr	PSP, r0
    __asm volatile ("MOV R0, #0x3");
 8102736:	f04f 0003 	mov.w	r0, #3
    __asm volatile ("MSR CONTROL, R0");
 810273a:	f380 8814 	msr	CONTROL, r0
    __asm volatile ("ISB");
 810273e:	f3bf 8f6f 	isb	sy
    __asm volatile ("BX R14");
 8102742:	4770      	bx	lr
}
 8102744:	bf00      	nop

08102746 <CILsysCalls_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_dispatcher(BitWidthType *sp)
{
 8102746:	b580      	push	{r7, lr}
 8102748:	b08e      	sub	sp, #56	; 0x38
 810274a:	af00      	add	r7, sp, #0
 810274c:	6078      	str	r0, [r7, #4]
    CosmOS_GenericVoidType sysCall;
    CosmOS_OsVariableType * osVar;
    CosmOS_RoutesConfigurationType * routeVar;


    uint8_t *pc = (uint8_t*)(sp[6]);
 810274e:	687b      	ldr	r3, [r7, #4]
 8102750:	3318      	adds	r3, #24
 8102752:	681b      	ldr	r3, [r3, #0]
 8102754:	633b      	str	r3, [r7, #48]	; 0x30

    pc-=2;
 8102756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102758:	3b02      	subs	r3, #2
 810275a:	633b      	str	r3, [r7, #48]	; 0x30

    osVar = os_getOsVar();
 810275c:	f7fe ff4a 	bl	81015f4 <os_getOsVar>
 8102760:	62f8      	str	r0, [r7, #44]	; 0x2c

    uint8_t sysCallId = *pc;
 8102762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102764:	781b      	ldrb	r3, [r3, #0]
 8102766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 810276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810276c:	60bb      	str	r3, [r7, #8]
    return (CosmOS_RoutesConfigurationType *)(osVar->cfg->route);
 810276e:	68bb      	ldr	r3, [r7, #8]
 8102770:	681b      	ldr	r3, [r3, #0]
 8102772:	691b      	ldr	r3, [r3, #16]

    routeVar = os_getOsRoutes( osVar );
 8102774:	627b      	str	r3, [r7, #36]	; 0x24

    sysCall = route_getRoutesFunc( routeVar, sp[0] );
 8102776:	687b      	ldr	r3, [r7, #4]
 8102778:	681b      	ldr	r3, [r3, #0]
 810277a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810277c:	613a      	str	r2, [r7, #16]
 810277e:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_GenericVoidType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_GenericVoidType route_getRoutesFunc(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (CosmOS_GenericVoidType)(route->routeFunc[route->routeIdToFunc[callId]]);
 8102780:	693b      	ldr	r3, [r7, #16]
 8102782:	681a      	ldr	r2, [r3, #0]
 8102784:	693b      	ldr	r3, [r7, #16]
 8102786:	6859      	ldr	r1, [r3, #4]
 8102788:	68fb      	ldr	r3, [r7, #12]
 810278a:	009b      	lsls	r3, r3, #2
 810278c:	440b      	add	r3, r1
 810278e:	681b      	ldr	r3, [r3, #0]
 8102790:	009b      	lsls	r3, r3, #2
 8102792:	4413      	add	r3, r2
 8102794:	681b      	ldr	r3, [r3, #0]
 8102796:	623b      	str	r3, [r7, #32]
    entityId = route_getRoutesEntityId( routeVar, sp[0] );
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	681b      	ldr	r3, [r3, #0]
 810279c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810279e:	61ba      	str	r2, [r7, #24]
 81027a0:	617b      	str	r3, [r7, #20]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType route_getRoutesEntityId(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (route->routeIdToEntity[callId]);
 81027a2:	69bb      	ldr	r3, [r7, #24]
 81027a4:	689a      	ldr	r2, [r3, #8]
 81027a6:	697b      	ldr	r3, [r7, #20]
 81027a8:	009b      	lsls	r3, r3, #2
 81027aa:	4413      	add	r3, r2
 81027ac:	681b      	ldr	r3, [r3, #0]
 81027ae:	61fb      	str	r3, [r7, #28]

    switch ( sysCallId )
 81027b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81027b4:	2b02      	cmp	r3, #2
 81027b6:	d015      	beq.n	81027e4 <CILsysCalls_dispatcher+0x9e>
 81027b8:	2b02      	cmp	r3, #2
 81027ba:	dc15      	bgt.n	81027e8 <CILsysCalls_dispatcher+0xa2>
 81027bc:	2b00      	cmp	r3, #0
 81027be:	d002      	beq.n	81027c6 <CILsysCalls_dispatcher+0x80>
 81027c0:	2b01      	cmp	r3, #1
 81027c2:	d003      	beq.n	81027cc <CILsysCalls_dispatcher+0x86>
        }

        default :
        {
            /* PANIC */
            break;
 81027c4:	e010      	b.n	81027e8 <CILsysCalls_dispatcher+0xa2>
            sysCall();
 81027c6:	6a3b      	ldr	r3, [r7, #32]
 81027c8:	4798      	blx	r3
            break;
 81027ca:	e00e      	b.n	81027ea <CILsysCalls_dispatcher+0xa4>
            returnValue = ((CosmOS_GenericBitWidthRWType)sysCall)(entityId, (void *)sp[1], sp[2]);
 81027cc:	687b      	ldr	r3, [r7, #4]
 81027ce:	3304      	adds	r3, #4
 81027d0:	681b      	ldr	r3, [r3, #0]
 81027d2:	4619      	mov	r1, r3
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	3308      	adds	r3, #8
 81027d8:	681a      	ldr	r2, [r3, #0]
 81027da:	6a3b      	ldr	r3, [r7, #32]
 81027dc:	69f8      	ldr	r0, [r7, #28]
 81027de:	4798      	blx	r3
 81027e0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 81027e2:	e002      	b.n	81027ea <CILsysCalls_dispatcher+0xa4>
            break;
 81027e4:	bf00      	nop
 81027e6:	e000      	b.n	81027ea <CILsysCalls_dispatcher+0xa4>
            break;
 81027e8:	bf00      	nop
        }
    }

    sp[0] = returnValue;
 81027ea:	687b      	ldr	r3, [r7, #4]
 81027ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81027ee:	601a      	str	r2, [r3, #0]
}
 81027f0:	bf00      	nop
 81027f2:	3738      	adds	r7, #56	; 0x38
 81027f4:	46bd      	mov	sp, r7
 81027f6:	bd80      	pop	{r7, pc}

081027f8 <CILsysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_os(BitWidthType id)
{
 81027f8:	b480      	push	{r7}
 81027fa:	b083      	sub	sp, #12
 81027fc:	af00      	add	r7, sp, #0
 81027fe:	6078      	str	r0, [r7, #4]
    __asm volatile("SVC #0");
 8102800:	df00      	svc	0
}
 8102802:	bf00      	nop
 8102804:	370c      	adds	r7, #12
 8102806:	46bd      	mov	sp, r7
 8102808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810280c:	4770      	bx	lr

0810280e <CILsysCalls_readWrite>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_readWrite(BitWidthType id, void * entity, BitWidthType num)
{
 810280e:	b480      	push	{r7}
 8102810:	b087      	sub	sp, #28
 8102812:	af00      	add	r7, sp, #0
 8102814:	60f8      	str	r0, [r7, #12]
 8102816:	60b9      	str	r1, [r7, #8]
 8102818:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #1");
 810281a:	df01      	svc	1
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 810281c:	4603      	mov	r3, r0
 810281e:	617b      	str	r3, [r7, #20]

    return returnValue;
 8102820:	697b      	ldr	r3, [r7, #20]
}
 8102822:	4618      	mov	r0, r3
 8102824:	371c      	adds	r7, #28
 8102826:	46bd      	mov	sp, r7
 8102828:	f85d 7b04 	ldr.w	r7, [sp], #4
 810282c:	4770      	bx	lr
	...

08102830 <CILsysTimer_setTicks>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_setTicks(BitWidthType ticks, CosmOS_SchedulerSyncStateType schedulersSyncState)
{
 8102830:	b480      	push	{r7}
 8102832:	b085      	sub	sp, #20
 8102834:	af00      	add	r7, sp, #0
 8102836:	6078      	str	r0, [r7, #4]
 8102838:	6039      	str	r1, [r7, #0]
    if( schedulersSyncState IS_NOT_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 810283a:	683b      	ldr	r3, [r7, #0]
 810283c:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8102840:	d010      	beq.n	8102864 <CILsysTimer_setTicks+0x34>
    {
        BitWidthType delay;
        delay = SysTick->LOAD - SysTick->VAL;
 8102842:	4b12      	ldr	r3, [pc, #72]	; (810288c <CILsysTimer_setTicks+0x5c>)
 8102844:	685a      	ldr	r2, [r3, #4]
 8102846:	4b11      	ldr	r3, [pc, #68]	; (810288c <CILsysTimer_setTicks+0x5c>)
 8102848:	689b      	ldr	r3, [r3, #8]
 810284a:	1ad3      	subs	r3, r2, r3
 810284c:	60fb      	str	r3, [r7, #12]

        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)-delay) - 1UL);         /* set reload register */
 810284e:	687b      	ldr	r3, [r7, #4]
 8102850:	f242 7210 	movw	r2, #10000	; 0x2710
 8102854:	fb02 f203 	mul.w	r2, r2, r3
 8102858:	68fb      	ldr	r3, [r7, #12]
 810285a:	1ad3      	subs	r3, r2, r3
 810285c:	4a0b      	ldr	r2, [pc, #44]	; (810288c <CILsysTimer_setTicks+0x5c>)
 810285e:	3b01      	subs	r3, #1
 8102860:	6053      	str	r3, [r2, #4]
 8102862:	e007      	b.n	8102874 <CILsysTimer_setTicks+0x44>
    }
    else
    {
        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)) - 1UL);               /* set reload register */
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	f242 7210 	movw	r2, #10000	; 0x2710
 810286a:	fb02 f303 	mul.w	r3, r2, r3
 810286e:	4a07      	ldr	r2, [pc, #28]	; (810288c <CILsysTimer_setTicks+0x5c>)
 8102870:	3b01      	subs	r3, #1
 8102872:	6053      	str	r3, [r2, #4]
    }

    SysTick->VAL   = 0UL;                                                     /* Load the SysTick Counter Value */
 8102874:	4b05      	ldr	r3, [pc, #20]	; (810288c <CILsysTimer_setTicks+0x5c>)
 8102876:	2200      	movs	r2, #0
 8102878:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810287a:	4b04      	ldr	r3, [pc, #16]	; (810288c <CILsysTimer_setTicks+0x5c>)
 810287c:	2207      	movs	r2, #7
 810287e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                                   /* Enable SysTick IRQ and SysTick Timer */
}
 8102880:	bf00      	nop
 8102882:	3714      	adds	r7, #20
 8102884:	46bd      	mov	sp, r7
 8102886:	f85d 7b04 	ldr.w	r7, [sp], #4
 810288a:	4770      	bx	lr
 810288c:	e000e010 	.word	0xe000e010

08102890 <CILuart_sysJob>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILuart_sysJob()
{
 8102890:	b480      	push	{r7}
 8102892:	af00      	add	r7, sp, #0

    //TX SIDE
    //check where is DMA and switch it if its buffer is empty
    //check if user is in red zone, if yes check if DMA is on the same buffer, then switch to the other
    //HAL_UART_Receive_DMA()
}
 8102894:	bf00      	nop
 8102896:	46bd      	mov	sp, r7
 8102898:	f85d 7b04 	ldr.w	r7, [sp], #4
 810289c:	4770      	bx	lr
	...

Disassembly of section .text:

081028a0 <__do_global_dtors_aux>:
 81028a0:	b510      	push	{r4, lr}
 81028a2:	4c05      	ldr	r4, [pc, #20]	; (81028b8 <__do_global_dtors_aux+0x18>)
 81028a4:	7823      	ldrb	r3, [r4, #0]
 81028a6:	b933      	cbnz	r3, 81028b6 <__do_global_dtors_aux+0x16>
 81028a8:	4b04      	ldr	r3, [pc, #16]	; (81028bc <__do_global_dtors_aux+0x1c>)
 81028aa:	b113      	cbz	r3, 81028b2 <__do_global_dtors_aux+0x12>
 81028ac:	4804      	ldr	r0, [pc, #16]	; (81028c0 <__do_global_dtors_aux+0x20>)
 81028ae:	f3af 8000 	nop.w
 81028b2:	2301      	movs	r3, #1
 81028b4:	7023      	strb	r3, [r4, #0]
 81028b6:	bd10      	pop	{r4, pc}
 81028b8:	10001810 	.word	0x10001810
 81028bc:	00000000 	.word	0x00000000
 81028c0:	081041b4 	.word	0x081041b4

081028c4 <frame_dummy>:
 81028c4:	b508      	push	{r3, lr}
 81028c6:	4b03      	ldr	r3, [pc, #12]	; (81028d4 <frame_dummy+0x10>)
 81028c8:	b11b      	cbz	r3, 81028d2 <frame_dummy+0xe>
 81028ca:	4903      	ldr	r1, [pc, #12]	; (81028d8 <frame_dummy+0x14>)
 81028cc:	4803      	ldr	r0, [pc, #12]	; (81028dc <frame_dummy+0x18>)
 81028ce:	f3af 8000 	nop.w
 81028d2:	bd08      	pop	{r3, pc}
 81028d4:	00000000 	.word	0x00000000
 81028d8:	10001814 	.word	0x10001814
 81028dc:	081041b4 	.word	0x081041b4

081028e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 81028e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102918 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 81028e4:	f001 fc26 	bl	8104134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 81028e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 81028ea:	e003      	b.n	81028f4 <LoopCopyDataInit>

081028ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 81028ec:	4b0b      	ldr	r3, [pc, #44]	; (810291c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 81028ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 81028f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 81028f2:	3104      	adds	r1, #4

081028f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 81028f4:	480a      	ldr	r0, [pc, #40]	; (8102920 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 81028f6:	4b0b      	ldr	r3, [pc, #44]	; (8102924 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 81028f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 81028fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 81028fc:	d3f6      	bcc.n	81028ec <CopyDataInit>
  ldr  r2, =_sbss
 81028fe:	4a0a      	ldr	r2, [pc, #40]	; (8102928 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8102900:	e002      	b.n	8102908 <LoopFillZerobss>

08102902 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8102902:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8102904:	f842 3b04 	str.w	r3, [r2], #4

08102908 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8102908:	4b08      	ldr	r3, [pc, #32]	; (810292c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 810290a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 810290c:	d3f9      	bcc.n	8102902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810290e:	f001 fc2d 	bl	810416c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102912:	f000 f839 	bl	8102988 <main>
  bx  lr    
 8102916:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102918:	10020000 	.word	0x10020000
  ldr  r3, =_sidata
 810291c:	081042bc 	.word	0x081042bc
  ldr  r0, =_sdata
 8102920:	10001800 	.word	0x10001800
  ldr  r3, =_edata
 8102924:	10001810 	.word	0x10001810
  ldr  r2, =_sbss
 8102928:	10001810 	.word	0x10001810
  ldr  r3, = _ebss
 810292c:	1000187c 	.word	0x1000187c

08102930 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102930:	e7fe      	b.n	8102930 <ADC3_IRQHandler>
	...

08102934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102934:	b480      	push	{r7}
 8102936:	b083      	sub	sp, #12
 8102938:	af00      	add	r7, sp, #0
 810293a:	4603      	mov	r3, r0
 810293c:	6039      	str	r1, [r7, #0]
 810293e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102940:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102944:	2b00      	cmp	r3, #0
 8102946:	db0a      	blt.n	810295e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102948:	683b      	ldr	r3, [r7, #0]
 810294a:	b2da      	uxtb	r2, r3
 810294c:	490c      	ldr	r1, [pc, #48]	; (8102980 <__NVIC_SetPriority+0x4c>)
 810294e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102952:	0112      	lsls	r2, r2, #4
 8102954:	b2d2      	uxtb	r2, r2
 8102956:	440b      	add	r3, r1
 8102958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810295c:	e00a      	b.n	8102974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810295e:	683b      	ldr	r3, [r7, #0]
 8102960:	b2da      	uxtb	r2, r3
 8102962:	4908      	ldr	r1, [pc, #32]	; (8102984 <__NVIC_SetPriority+0x50>)
 8102964:	88fb      	ldrh	r3, [r7, #6]
 8102966:	f003 030f 	and.w	r3, r3, #15
 810296a:	3b04      	subs	r3, #4
 810296c:	0112      	lsls	r2, r2, #4
 810296e:	b2d2      	uxtb	r2, r2
 8102970:	440b      	add	r3, r1
 8102972:	761a      	strb	r2, [r3, #24]
}
 8102974:	bf00      	nop
 8102976:	370c      	adds	r7, #12
 8102978:	46bd      	mov	sp, r7
 810297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810297e:	4770      	bx	lr
 8102980:	e000e100 	.word	0xe000e100
 8102984:	e000ed00 	.word	0xe000ed00

08102988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8102988:	b580      	push	{r7, lr}
 810298a:	b082      	sub	sp, #8
 810298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	cosmosApi_boot();
 810298e:	f000 f97b 	bl	8102c88 <osBoot_boot>
	NVIC_SetPriority(SVCall_IRQn,3);
 8102992:	2103      	movs	r1, #3
 8102994:	f06f 0004 	mvn.w	r0, #4
 8102998:	f7ff ffcc 	bl	8102934 <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn,4);
 810299c:	2104      	movs	r1, #4
 810299e:	f06f 0001 	mvn.w	r0, #1
 81029a2:	f7ff ffc7 	bl	8102934 <__NVIC_SetPriority>
  NVIC_SetPriority (SysTick_IRQn, 0);         /* set Priority for Systick Interrupt */
 81029a6:	2100      	movs	r1, #0
 81029a8:	f04f 30ff 	mov.w	r0, #4294967295
 81029ac:	f7ff ffc2 	bl	8102934 <__NVIC_SetPriority>
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81029b0:	4b1e      	ldr	r3, [pc, #120]	; (8102a2c <main+0xa4>)
 81029b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81029b6:	4a1d      	ldr	r2, [pc, #116]	; (8102a2c <main+0xa4>)
 81029b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81029bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81029c0:	4b1a      	ldr	r3, [pc, #104]	; (8102a2c <main+0xa4>)
 81029c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81029ca:	607b      	str	r3, [r7, #4]
 81029cc:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81029ce:	2001      	movs	r0, #1
 81029d0:	f000 fe7a 	bl	81036c8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 81029d4:	f000 ff04 	bl	81037e0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 81029d8:	2201      	movs	r2, #1
 81029da:	2102      	movs	r1, #2
 81029dc:	2000      	movs	r0, #0
 81029de:	f000 fe85 	bl	81036ec <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81029e2:	4b13      	ldr	r3, [pc, #76]	; (8102a30 <main+0xa8>)
 81029e4:	681b      	ldr	r3, [r3, #0]
 81029e6:	091b      	lsrs	r3, r3, #4
 81029e8:	f003 030f 	and.w	r3, r3, #15
 81029ec:	2b07      	cmp	r3, #7
 81029ee:	d108      	bne.n	8102a02 <main+0x7a>
 81029f0:	4b10      	ldr	r3, [pc, #64]	; (8102a34 <main+0xac>)
 81029f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81029f6:	4a0f      	ldr	r2, [pc, #60]	; (8102a34 <main+0xac>)
 81029f8:	f043 0301 	orr.w	r3, r3, #1
 81029fc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8102a00:	e007      	b.n	8102a12 <main+0x8a>
 8102a02:	4b0c      	ldr	r3, [pc, #48]	; (8102a34 <main+0xac>)
 8102a04:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8102a08:	4a0a      	ldr	r2, [pc, #40]	; (8102a34 <main+0xac>)
 8102a0a:	f043 0301 	orr.w	r3, r3, #1
 8102a0e:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8102a12:	f000 fa93 	bl	8102f3c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8102a16:	f000 f829 	bl	8102a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8102a1a:	f000 f80d 	bl	8102a38 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
	cosmosApi_osInit_init();
 8102a1e:	200d      	movs	r0, #13
 8102a20:	f7ff fb60 	bl	81020e4 <sysCalls_os>
	cosmosApi_os_start();
 8102a24:	200e      	movs	r0, #14
 8102a26:	f7ff fb5d 	bl	81020e4 <sysCalls_os>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8102a2a:	e7fe      	b.n	8102a2a <main+0xa2>
 8102a2c:	58024400 	.word	0x58024400
 8102a30:	e000ed00 	.word	0xe000ed00
 8102a34:	58026400 	.word	0x58026400

08102a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8102a38:	b480      	push	{r7}
 8102a3a:	b083      	sub	sp, #12
 8102a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8102a3e:	4b0a      	ldr	r3, [pc, #40]	; (8102a68 <MX_DMA_Init+0x30>)
 8102a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102a44:	4a08      	ldr	r2, [pc, #32]	; (8102a68 <MX_DMA_Init+0x30>)
 8102a46:	f043 0301 	orr.w	r3, r3, #1
 8102a4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102a4e:	4b06      	ldr	r3, [pc, #24]	; (8102a68 <MX_DMA_Init+0x30>)
 8102a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102a54:	f003 0301 	and.w	r3, r3, #1
 8102a58:	607b      	str	r3, [r7, #4]
 8102a5a:	687b      	ldr	r3, [r7, #4]

}
 8102a5c:	bf00      	nop
 8102a5e:	370c      	adds	r7, #12
 8102a60:	46bd      	mov	sp, r7
 8102a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a66:	4770      	bx	lr
 8102a68:	58024400 	.word	0x58024400

08102a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8102a6c:	b580      	push	{r7, lr}
 8102a6e:	b088      	sub	sp, #32
 8102a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102a72:	f107 030c 	add.w	r3, r7, #12
 8102a76:	2200      	movs	r2, #0
 8102a78:	601a      	str	r2, [r3, #0]
 8102a7a:	605a      	str	r2, [r3, #4]
 8102a7c:	609a      	str	r2, [r3, #8]
 8102a7e:	60da      	str	r2, [r3, #12]
 8102a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8102a82:	4b24      	ldr	r3, [pc, #144]	; (8102b14 <MX_GPIO_Init+0xa8>)
 8102a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102a88:	4a22      	ldr	r2, [pc, #136]	; (8102b14 <MX_GPIO_Init+0xa8>)
 8102a8a:	f043 0301 	orr.w	r3, r3, #1
 8102a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102a92:	4b20      	ldr	r3, [pc, #128]	; (8102b14 <MX_GPIO_Init+0xa8>)
 8102a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102a98:	f003 0301 	and.w	r3, r3, #1
 8102a9c:	60bb      	str	r3, [r7, #8]
 8102a9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8102aa0:	4b1c      	ldr	r3, [pc, #112]	; (8102b14 <MX_GPIO_Init+0xa8>)
 8102aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102aa6:	4a1b      	ldr	r2, [pc, #108]	; (8102b14 <MX_GPIO_Init+0xa8>)
 8102aa8:	f043 0302 	orr.w	r3, r3, #2
 8102aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102ab0:	4b18      	ldr	r3, [pc, #96]	; (8102b14 <MX_GPIO_Init+0xa8>)
 8102ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ab6:	f003 0302 	and.w	r3, r3, #2
 8102aba:	607b      	str	r3, [r7, #4]
 8102abc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8102abe:	2200      	movs	r2, #0
 8102ac0:	2110      	movs	r1, #16
 8102ac2:	4815      	ldr	r0, [pc, #84]	; (8102b18 <MX_GPIO_Init+0xac>)
 8102ac4:	f000 fdcc 	bl	8103660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8102ac8:	2200      	movs	r2, #0
 8102aca:	2101      	movs	r1, #1
 8102acc:	4813      	ldr	r0, [pc, #76]	; (8102b1c <MX_GPIO_Init+0xb0>)
 8102ace:	f000 fdc7 	bl	8103660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8102ad2:	2310      	movs	r3, #16
 8102ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102ad6:	2301      	movs	r3, #1
 8102ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102ada:	2300      	movs	r3, #0
 8102adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102ade:	2303      	movs	r3, #3
 8102ae0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102ae2:	f107 030c 	add.w	r3, r7, #12
 8102ae6:	4619      	mov	r1, r3
 8102ae8:	480b      	ldr	r0, [pc, #44]	; (8102b18 <MX_GPIO_Init+0xac>)
 8102aea:	f000 fc09 	bl	8103300 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8102aee:	2301      	movs	r3, #1
 8102af0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8102af2:	2301      	movs	r3, #1
 8102af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102af6:	2300      	movs	r3, #0
 8102af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102afa:	2303      	movs	r3, #3
 8102afc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8102afe:	f107 030c 	add.w	r3, r7, #12
 8102b02:	4619      	mov	r1, r3
 8102b04:	4805      	ldr	r0, [pc, #20]	; (8102b1c <MX_GPIO_Init+0xb0>)
 8102b06:	f000 fbfb 	bl	8103300 <HAL_GPIO_Init>

}
 8102b0a:	bf00      	nop
 8102b0c:	3720      	adds	r7, #32
 8102b0e:	46bd      	mov	sp, r7
 8102b10:	bd80      	pop	{r7, pc}
 8102b12:	bf00      	nop
 8102b14:	58024400 	.word	0x58024400
 8102b18:	58020000 	.word	0x58020000
 8102b1c:	58020400 	.word	0x58020400

08102b20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8102b20:	b580      	push	{r7, lr}
 8102b22:	b082      	sub	sp, #8
 8102b24:	af00      	add	r7, sp, #0
 8102b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	681b      	ldr	r3, [r3, #0]
 8102b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102b30:	d101      	bne.n	8102b36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8102b32:	f000 fa61 	bl	8102ff8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8102b36:	bf00      	nop
 8102b38:	3708      	adds	r7, #8
 8102b3a:	46bd      	mov	sp, r7
 8102b3c:	bd80      	pop	{r7, pc}
	...

08102b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102b40:	b480      	push	{r7}
 8102b42:	b083      	sub	sp, #12
 8102b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102b46:	4b0a      	ldr	r3, [pc, #40]	; (8102b70 <HAL_MspInit+0x30>)
 8102b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102b4c:	4a08      	ldr	r2, [pc, #32]	; (8102b70 <HAL_MspInit+0x30>)
 8102b4e:	f043 0302 	orr.w	r3, r3, #2
 8102b52:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102b56:	4b06      	ldr	r3, [pc, #24]	; (8102b70 <HAL_MspInit+0x30>)
 8102b58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102b5c:	f003 0302 	and.w	r3, r3, #2
 8102b60:	607b      	str	r3, [r7, #4]
 8102b62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102b64:	bf00      	nop
 8102b66:	370c      	adds	r7, #12
 8102b68:	46bd      	mov	sp, r7
 8102b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b6e:	4770      	bx	lr
 8102b70:	58024400 	.word	0x58024400

08102b74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102b74:	b580      	push	{r7, lr}
 8102b76:	b090      	sub	sp, #64	; 0x40
 8102b78:	af00      	add	r7, sp, #0
 8102b7a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102b7c:	687b      	ldr	r3, [r7, #4]
 8102b7e:	2b0f      	cmp	r3, #15
 8102b80:	d827      	bhi.n	8102bd2 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8102b82:	2200      	movs	r2, #0
 8102b84:	6879      	ldr	r1, [r7, #4]
 8102b86:	201c      	movs	r0, #28
 8102b88:	f000 fb02 	bl	8103190 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102b8c:	201c      	movs	r0, #28
 8102b8e:	f000 fb19 	bl	81031c4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8102b92:	4a29      	ldr	r2, [pc, #164]	; (8102c38 <HAL_InitTick+0xc4>)
 8102b94:	687b      	ldr	r3, [r7, #4]
 8102b96:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8102b98:	4b28      	ldr	r3, [pc, #160]	; (8102c3c <HAL_InitTick+0xc8>)
 8102b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102b9e:	4a27      	ldr	r2, [pc, #156]	; (8102c3c <HAL_InitTick+0xc8>)
 8102ba0:	f043 0301 	orr.w	r3, r3, #1
 8102ba4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102ba8:	4b24      	ldr	r3, [pc, #144]	; (8102c3c <HAL_InitTick+0xc8>)
 8102baa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102bae:	f003 0301 	and.w	r3, r3, #1
 8102bb2:	60fb      	str	r3, [r7, #12]
 8102bb4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8102bb6:	f107 0210 	add.w	r2, r7, #16
 8102bba:	f107 0314 	add.w	r3, r7, #20
 8102bbe:	4611      	mov	r1, r2
 8102bc0:	4618      	mov	r0, r3
 8102bc2:	f000 ffdd 	bl	8103b80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8102bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102bc8:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8102bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102bcc:	2b00      	cmp	r3, #0
 8102bce:	d106      	bne.n	8102bde <HAL_InitTick+0x6a>
 8102bd0:	e001      	b.n	8102bd6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8102bd2:	2301      	movs	r3, #1
 8102bd4:	e02c      	b.n	8102c30 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8102bd6:	f000 ffbd 	bl	8103b54 <HAL_RCC_GetPCLK1Freq>
 8102bda:	63f8      	str	r0, [r7, #60]	; 0x3c
 8102bdc:	e004      	b.n	8102be8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8102bde:	f000 ffb9 	bl	8103b54 <HAL_RCC_GetPCLK1Freq>
 8102be2:	4603      	mov	r3, r0
 8102be4:	005b      	lsls	r3, r3, #1
 8102be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8102be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102bea:	4a15      	ldr	r2, [pc, #84]	; (8102c40 <HAL_InitTick+0xcc>)
 8102bec:	fba2 2303 	umull	r2, r3, r2, r3
 8102bf0:	0c9b      	lsrs	r3, r3, #18
 8102bf2:	3b01      	subs	r3, #1
 8102bf4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8102bf6:	4b13      	ldr	r3, [pc, #76]	; (8102c44 <HAL_InitTick+0xd0>)
 8102bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102bfc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8102bfe:	4b11      	ldr	r3, [pc, #68]	; (8102c44 <HAL_InitTick+0xd0>)
 8102c00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8102c04:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8102c06:	4a0f      	ldr	r2, [pc, #60]	; (8102c44 <HAL_InitTick+0xd0>)
 8102c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102c0a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8102c0c:	4b0d      	ldr	r3, [pc, #52]	; (8102c44 <HAL_InitTick+0xd0>)
 8102c0e:	2200      	movs	r2, #0
 8102c10:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8102c12:	4b0c      	ldr	r3, [pc, #48]	; (8102c44 <HAL_InitTick+0xd0>)
 8102c14:	2200      	movs	r2, #0
 8102c16:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8102c18:	480a      	ldr	r0, [pc, #40]	; (8102c44 <HAL_InitTick+0xd0>)
 8102c1a:	f000 fff3 	bl	8103c04 <HAL_TIM_Base_Init>
 8102c1e:	4603      	mov	r3, r0
 8102c20:	2b00      	cmp	r3, #0
 8102c22:	d104      	bne.n	8102c2e <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8102c24:	4807      	ldr	r0, [pc, #28]	; (8102c44 <HAL_InitTick+0xd0>)
 8102c26:	f001 f84f 	bl	8103cc8 <HAL_TIM_Base_Start_IT>
 8102c2a:	4603      	mov	r3, r0
 8102c2c:	e000      	b.n	8102c30 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8102c2e:	2301      	movs	r3, #1
}
 8102c30:	4618      	mov	r0, r3
 8102c32:	3740      	adds	r7, #64	; 0x40
 8102c34:	46bd      	mov	sp, r7
 8102c36:	bd80      	pop	{r7, pc}
 8102c38:	10001800 	.word	0x10001800
 8102c3c:	58024400 	.word	0x58024400
 8102c40:	431bde83 	.word	0x431bde83
 8102c44:	1000182c 	.word	0x1000182c

08102c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102c48:	b480      	push	{r7}
 8102c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8102c4c:	e7fe      	b.n	8102c4c <NMI_Handler+0x4>

08102c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102c4e:	b480      	push	{r7}
 8102c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102c52:	e7fe      	b.n	8102c52 <HardFault_Handler+0x4>

08102c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102c54:	b480      	push	{r7}
 8102c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102c58:	e7fe      	b.n	8102c58 <MemManage_Handler+0x4>

08102c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102c5a:	b480      	push	{r7}
 8102c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102c5e:	e7fe      	b.n	8102c5e <BusFault_Handler+0x4>

08102c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102c60:	b480      	push	{r7}
 8102c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102c64:	e7fe      	b.n	8102c64 <UsageFault_Handler+0x4>

08102c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102c66:	b480      	push	{r7}
 8102c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102c6a:	bf00      	nop
 8102c6c:	46bd      	mov	sp, r7
 8102c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c72:	4770      	bx	lr

08102c74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8102c74:	b580      	push	{r7, lr}
 8102c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8102c78:	4802      	ldr	r0, [pc, #8]	; (8102c84 <TIM2_IRQHandler+0x10>)
 8102c7a:	f001 f85b 	bl	8103d34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8102c7e:	bf00      	nop
 8102c80:	bd80      	pop	{r7, pc}
 8102c82:	bf00      	nop
 8102c84:	1000182c 	.word	0x1000182c

08102c88 <osBoot_boot>:
{
 8102c88:	b580      	push	{r7, lr}
 8102c8a:	b08c      	sub	sp, #48	; 0x30
 8102c8c:	af00      	add	r7, sp, #0
	coreId = CILcore_getCoreId();
 8102c8e:	f7ff fac8 	bl	8102222 <CILcore_getCoreId>
 8102c92:	62b8      	str	r0, [r7, #40]	; 0x28
	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 8102c94:	4a29      	ldr	r2, [pc, #164]	; (8102d3c <osBoot_boot+0xb4>)
 8102c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102c98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8102c9c:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 8102c9e:	4a27      	ldr	r2, [pc, #156]	; (8102d3c <osBoot_boot+0xb4>)
 8102ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102ca2:	00db      	lsls	r3, r3, #3
 8102ca4:	4413      	add	r3, r2
 8102ca6:	685b      	ldr	r3, [r3, #4]
 8102ca8:	623b      	str	r3, [r7, #32]
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8102caa:	2300      	movs	r3, #0
 8102cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102cae:	e03c      	b.n	8102d2a <osBoot_boot+0xa2>
		osBoot_bootSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 8102cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102cb2:	4613      	mov	r3, r2
 8102cb4:	005b      	lsls	r3, r3, #1
 8102cb6:	4413      	add	r3, r2
 8102cb8:	009b      	lsls	r3, r3, #2
 8102cba:	461a      	mov	r2, r3
 8102cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102cbe:	4413      	add	r3, r2
 8102cc0:	6818      	ldr	r0, [r3, #0]
 8102cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102cc4:	4613      	mov	r3, r2
 8102cc6:	005b      	lsls	r3, r3, #1
 8102cc8:	4413      	add	r3, r2
 8102cca:	009b      	lsls	r3, r3, #2
 8102ccc:	461a      	mov	r2, r3
 8102cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102cd0:	4413      	add	r3, r2
 8102cd2:	6859      	ldr	r1, [r3, #4]
 8102cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102cd6:	4613      	mov	r3, r2
 8102cd8:	005b      	lsls	r3, r3, #1
 8102cda:	4413      	add	r3, r2
 8102cdc:	009b      	lsls	r3, r3, #2
 8102cde:	461a      	mov	r2, r3
 8102ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102ce2:	4413      	add	r3, r2
 8102ce4:	689b      	ldr	r3, [r3, #8]
 8102ce6:	61f8      	str	r0, [r7, #28]
 8102ce8:	61b9      	str	r1, [r7, #24]
 8102cea:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8102cec:	69ba      	ldr	r2, [r7, #24]
 8102cee:	69fb      	ldr	r3, [r7, #28]
 8102cf0:	1ad3      	subs	r3, r2, r3
 8102cf2:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 8102cf4:	69fb      	ldr	r3, [r7, #28]
 8102cf6:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 8102cf8:	697b      	ldr	r3, [r7, #20]
 8102cfa:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8102cfc:	2300      	movs	r3, #0
 8102cfe:	607b      	str	r3, [r7, #4]
 8102d00:	e00a      	b.n	8102d18 <osBoot_boot+0x90>
		*pDst++=*pSrc++;
 8102d02:	68ba      	ldr	r2, [r7, #8]
 8102d04:	1c53      	adds	r3, r2, #1
 8102d06:	60bb      	str	r3, [r7, #8]
 8102d08:	68fb      	ldr	r3, [r7, #12]
 8102d0a:	1c59      	adds	r1, r3, #1
 8102d0c:	60f9      	str	r1, [r7, #12]
 8102d0e:	7812      	ldrb	r2, [r2, #0]
 8102d10:	701a      	strb	r2, [r3, #0]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	3301      	adds	r3, #1
 8102d16:	607b      	str	r3, [r7, #4]
 8102d18:	693b      	ldr	r3, [r7, #16]
 8102d1a:	009b      	lsls	r3, r3, #2
 8102d1c:	687a      	ldr	r2, [r7, #4]
 8102d1e:	429a      	cmp	r2, r3
 8102d20:	d3ef      	bcc.n	8102d02 <osBoot_boot+0x7a>
}
 8102d22:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8102d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102d26:	3301      	adds	r3, #1
 8102d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102d2c:	6a3b      	ldr	r3, [r7, #32]
 8102d2e:	429a      	cmp	r2, r3
 8102d30:	d3be      	bcc.n	8102cb0 <osBoot_boot+0x28>
};
 8102d32:	bf00      	nop
 8102d34:	bf00      	nop
 8102d36:	3730      	adds	r7, #48	; 0x30
 8102d38:	46bd      	mov	sp, r7
 8102d3a:	bd80      	pop	{r7, pc}
 8102d3c:	08104214 	.word	0x08104214

08102d40 <interrupt_enableInterrupts>:
  * @param[in] none
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_enableInterrupts(void)
{
 8102d40:	b480      	push	{r7}
 8102d42:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8102d44:	b662      	cpsie	i
}
 8102d46:	bf00      	nop
 8102d48:	bf00      	nop
	CILinterrupt_enableInterrupts();
}
 8102d4a:	bf00      	nop
 8102d4c:	46bd      	mov	sp, r7
 8102d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d52:	4770      	bx	lr

08102d54 <interrupt_disableInterrupts>:
  * @param[in]  none
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_disableInterrupts(void)
{
 8102d54:	b480      	push	{r7}
 8102d56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8102d58:	b672      	cpsid	i
}
 8102d5a:	bf00      	nop
}
 8102d5c:	bf00      	nop
	CILinterrupt_disableInterrupts();
}
 8102d5e:	bf00      	nop
 8102d60:	46bd      	mov	sp, r7
 8102d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d66:	4770      	bx	lr

08102d68 <Idle_CM7>:
  * *************************************************************************//**
  * @addtogroup General_schedulableCfg_h General
  * @ingroup Apis_schedulableCfg_h
  * @{
********************************************************************************/
__WEAK void Idle_CM7(void){};
 8102d68:	b480      	push	{r7}
 8102d6a:	af00      	add	r7, sp, #0
 8102d6c:	bf00      	nop
 8102d6e:	46bd      	mov	sp, r7
 8102d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d74:	4770      	bx	lr

08102d76 <Idle_CM4>:
__WEAK void sysJobs_CM7(void){};
__WEAK void Task_0_Core_0_Handler(void){};
__WEAK void Idle_CM4(void){};
 8102d76:	b480      	push	{r7}
 8102d78:	af00      	add	r7, sp, #0
 8102d7a:	bf00      	nop
 8102d7c:	46bd      	mov	sp, r7
 8102d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d82:	4770      	bx	lr

08102d84 <IdleThread_CM7>:
__WEAK void sysJobs_CM4(void){};
__WEAK void Task_0_Core_1_Handler(void){};
__WEAK void IdleThread_CM7(void){};
 8102d84:	b480      	push	{r7}
 8102d86:	af00      	add	r7, sp, #0
 8102d88:	bf00      	nop
 8102d8a:	46bd      	mov	sp, r7
 8102d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d90:	4770      	bx	lr

08102d92 <IdleThread_CM4>:
__WEAK void IdleThread_CM4(void){};
 8102d92:	b480      	push	{r7}
 8102d94:	af00      	add	r7, sp, #0
 8102d96:	bf00      	nop
 8102d98:	46bd      	mov	sp, r7
 8102d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d9e:	4770      	bx	lr

08102da0 <wrapped_Idle_CM7>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/

void wrapped_Idle_CM7(void)
{
 8102da0:	b580      	push	{r7, lr}
 8102da2:	af00      	add	r7, sp, #0
    Idle_CM7();
 8102da4:	f7ff ffe0 	bl	8102d68 <Idle_CM7>
    for(;;);
 8102da8:	e7fe      	b.n	8102da8 <wrapped_Idle_CM7+0x8>

08102daa <wrapped_sysJobs_CM7>:
};
void wrapped_sysJobs_CM7(void)
{
 8102daa:	b580      	push	{r7, lr}
 8102dac:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 8102dae:	2010      	movs	r0, #16
 8102db0:	f7ff f998 	bl	81020e4 <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 8102db4:	200f      	movs	r0, #15
 8102db6:	f7ff f995 	bl	81020e4 <sysCalls_os>
    for(;;);
 8102dba:	e7fe      	b.n	8102dba <wrapped_sysJobs_CM7+0x10>

08102dbc <wrapped_Task_0_Core_0_Handler>:
};
void wrapped_Task_0_Core_0_Handler(void)
{
 8102dbc:	b580      	push	{r7, lr}
 8102dbe:	af00      	add	r7, sp, #0
    Task_0_Core_0_Handler();
 8102dc0:	f000 f8a0 	bl	8102f04 <Task_0_Core_0_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 8102dc4:	200f      	movs	r0, #15
 8102dc6:	f7ff f98d 	bl	81020e4 <sysCalls_os>
    for(;;);
 8102dca:	e7fe      	b.n	8102dca <wrapped_Task_0_Core_0_Handler+0xe>

08102dcc <wrapped_Idle_CM4>:
};
void wrapped_Idle_CM4(void)
{
 8102dcc:	b580      	push	{r7, lr}
 8102dce:	af00      	add	r7, sp, #0
    Idle_CM4();
 8102dd0:	f7ff ffd1 	bl	8102d76 <Idle_CM4>
    for(;;);
 8102dd4:	e7fe      	b.n	8102dd4 <wrapped_Idle_CM4+0x8>

08102dd6 <wrapped_sysJobs_CM4>:
};
void wrapped_sysJobs_CM4(void)
{
 8102dd6:	b580      	push	{r7, lr}
 8102dd8:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 8102dda:	2010      	movs	r0, #16
 8102ddc:	f7ff f982 	bl	81020e4 <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 8102de0:	200f      	movs	r0, #15
 8102de2:	f7ff f97f 	bl	81020e4 <sysCalls_os>
    for(;;);
 8102de6:	e7fe      	b.n	8102de6 <wrapped_sysJobs_CM4+0x10>

08102de8 <wrapped_Task_0_Core_1_Handler>:
};
void wrapped_Task_0_Core_1_Handler(void)
{
 8102de8:	b580      	push	{r7, lr}
 8102dea:	af00      	add	r7, sp, #0
    Task_0_Core_1_Handler();
 8102dec:	f000 f844 	bl	8102e78 <Task_0_Core_1_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 8102df0:	200f      	movs	r0, #15
 8102df2:	f7ff f977 	bl	81020e4 <sysCalls_os>
    for(;;);
 8102df6:	e7fe      	b.n	8102df6 <wrapped_Task_0_Core_1_Handler+0xe>

08102df8 <wrapped_IdleThread_CM7>:
};
void wrapped_IdleThread_CM7(void)
{
 8102df8:	b580      	push	{r7, lr}
 8102dfa:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM7();
 8102dfc:	f7ff ffc2 	bl	8102d84 <IdleThread_CM7>
 8102e00:	e7fc      	b.n	8102dfc <wrapped_IdleThread_CM7+0x4>

08102e02 <wrapped_IdleThread_CM4>:
    }
};
void wrapped_IdleThread_CM4(void)
{
 8102e02:	b580      	push	{r7, lr}
 8102e04:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM4();
 8102e06:	f7ff ffc4 	bl	8102d92 <IdleThread_CM4>
 8102e0a:	e7fc      	b.n	8102e06 <wrapped_IdleThread_CM4+0x4>

08102e0c <PendSV_Handler>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/
__NAKED void PendSV_Handler(void)
{
    __asm volatile ("MRS R0,PSP");
 8102e0c:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("ISB");
 8102e10:	f3bf 8f6f 	isb	sy

    __asm volatile ("TST R14, #16");
 8102e14:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 8102e18:	bf08      	it	eq
    __asm volatile ("VSTMDBEQ R0!,{S16-S31}"); /* If fp is true save floating point registers on stack */
 8102e1a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    __asm volatile ("STMDB R0!,{R4-R8,R10,R11,R14}");
 8102e1e:	e920 4df0 	stmdb	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}

    __asm volatile ("BL scheduler_scheduleNextInstance");
 8102e22:	f7fe fd5f 	bl	81018e4 <scheduler_scheduleNextInstance>
    __asm volatile ("ISB");
 8102e26:	f3bf 8f6f 	isb	sy

    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8102e2a:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
    __asm volatile ("TST R14, #16");
 8102e2e:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 8102e32:	bf08      	it	eq
    __asm volatile ("VLDMIAEQ R0!,{S16-S31}"); /* If fp is true restore floating point registers on stack */
 8102e34:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    __asm volatile ("MSR PSP,R0");
 8102e38:	f380 8809 	msr	PSP, r0
    __asm volatile ("ISB");
 8102e3c:	f3bf 8f6f 	isb	sy

    __asm volatile ("BX R14");
 8102e40:	4770      	bx	lr
}
 8102e42:	bf00      	nop

08102e44 <SysTick_Handler>:

void SysTick_Handler(){
 8102e44:	b480      	push	{r7}
 8102e46:	af00      	add	r7, sp, #0
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8102e48:	4b05      	ldr	r3, [pc, #20]	; (8102e60 <SysTick_Handler+0x1c>)
 8102e4a:	685b      	ldr	r3, [r3, #4]
 8102e4c:	4a04      	ldr	r2, [pc, #16]	; (8102e60 <SysTick_Handler+0x1c>)
 8102e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102e52:	6053      	str	r3, [r2, #4]
}
 8102e54:	bf00      	nop
 8102e56:	46bd      	mov	sp, r7
 8102e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e5c:	4770      	bx	lr
 8102e5e:	bf00      	nop
 8102e60:	e000ed00 	.word	0xe000ed00

08102e64 <SVC_Handler>:

__NAKED void SVC_Handler( void )
{
    __asm volatile ("TST LR, #4");
 8102e64:	f01e 0f04 	tst.w	lr, #4
    __asm volatile ("ITE EQ");
 8102e68:	bf0c      	ite	eq
    __asm volatile ("MRSEQ r0, MSP");
 8102e6a:	f3ef 8008 	mrseq	r0, MSP
    __asm volatile ("MRSNE r0, PSP");
 8102e6e:	f3ef 8009 	mrsne	r0, PSP
    __asm volatile ( "B CILsysCalls_dispatcher");
 8102e72:	f7ff bc68 	b.w	8102746 <CILsysCalls_dispatcher>
}
 8102e76:	bf00      	nop

08102e78 <Task_0_Core_1_Handler>:
** Program ID macro = PROGRAM_1_CORE_1_ID
** WCET macro = TASK_0_PROGRAM_1_CORE_1_WCET
** Period of task in ticks = 50
********************************************************************************/
void Task_0_Core_1_Handler(void)
{
 8102e78:	b580      	push	{r7, lr}
 8102e7a:	b082      	sub	sp, #8
 8102e7c:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_1_Handler
********************************************************************************/
if (counter_cm4 > 100)
 8102e7e:	4b1e      	ldr	r3, [pc, #120]	; (8102ef8 <Task_0_Core_1_Handler+0x80>)
 8102e80:	681b      	ldr	r3, [r3, #0]
 8102e82:	2b64      	cmp	r3, #100	; 0x64
 8102e84:	dd2e      	ble.n	8102ee4 <Task_0_Core_1_Handler+0x6c>
{
    CosmOS_SpinlockStateType spinlockState;
    CosmOS_BufferStateType bufferState;


	bufferReader_cm4 = 100;
 8102e86:	4b1d      	ldr	r3, [pc, #116]	; (8102efc <Task_0_Core_1_Handler+0x84>)
 8102e88:	2264      	movs	r2, #100	; 0x64
 8102e8a:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_write_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 8102e8c:	2204      	movs	r2, #4
 8102e8e:	491b      	ldr	r1, [pc, #108]	; (8102efc <Task_0_Core_1_Handler+0x84>)
 8102e90:	200b      	movs	r0, #11
 8102e92:	f7ff f932 	bl	81020fa <sysCalls_readWrite>
 8102e96:	4603      	mov	r3, r0
 8102e98:	71fb      	strb	r3, [r7, #7]

	bufferReader_cm4 = 0;
 8102e9a:	4b18      	ldr	r3, [pc, #96]	; (8102efc <Task_0_Core_1_Handler+0x84>)
 8102e9c:	2200      	movs	r2, #0
 8102e9e:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_read_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 8102ea0:	2204      	movs	r2, #4
 8102ea2:	4916      	ldr	r1, [pc, #88]	; (8102efc <Task_0_Core_1_Handler+0x84>)
 8102ea4:	200a      	movs	r0, #10
 8102ea6:	f7ff f928 	bl	81020fa <sysCalls_readWrite>
 8102eaa:	4603      	mov	r3, r0
 8102eac:	71fb      	strb	r3, [r7, #7]

	spinlockState = cosmosApi_try_spinlock_uart_buffer_read();
 8102eae:	2200      	movs	r2, #0
 8102eb0:	2100      	movs	r1, #0
 8102eb2:	2001      	movs	r0, #1
 8102eb4:	f7ff f921 	bl	81020fa <sysCalls_readWrite>
 8102eb8:	6038      	str	r0, [r7, #0]
	spinlockState = cosmosApi_get_spinlock_uart_buffer_read();
 8102eba:	2200      	movs	r2, #0
 8102ebc:	2100      	movs	r1, #0
 8102ebe:	2000      	movs	r0, #0
 8102ec0:	f7ff f91b 	bl	81020fa <sysCalls_readWrite>
 8102ec4:	6038      	str	r0, [r7, #0]

	spinlockState = cosmosApi_release_spinlock_uart_buffer_read();
 8102ec6:	2200      	movs	r2, #0
 8102ec8:	2100      	movs	r1, #0
 8102eca:	2002      	movs	r0, #2
 8102ecc:	f7ff f915 	bl	81020fa <sysCalls_readWrite>
 8102ed0:	6038      	str	r0, [r7, #0]


    counter_cm4 = 0;
 8102ed2:	4b09      	ldr	r3, [pc, #36]	; (8102ef8 <Task_0_Core_1_Handler+0x80>)
 8102ed4:	2200      	movs	r2, #0
 8102ed6:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOB, GPIO_PIN_0); //GREEN LED
 8102ed8:	2201      	movs	r2, #1
 8102eda:	4909      	ldr	r1, [pc, #36]	; (8102f00 <Task_0_Core_1_Handler+0x88>)
 8102edc:	200c      	movs	r0, #12
 8102ede:	f7ff f90c 	bl	81020fa <sysCalls_readWrite>
}
/********************************************************************************
** stop_name =Task_0_Core_1_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8102ee2:	e004      	b.n	8102eee <Task_0_Core_1_Handler+0x76>
    counter_cm4++;
 8102ee4:	4b04      	ldr	r3, [pc, #16]	; (8102ef8 <Task_0_Core_1_Handler+0x80>)
 8102ee6:	681b      	ldr	r3, [r3, #0]
 8102ee8:	3301      	adds	r3, #1
 8102eea:	4a03      	ldr	r2, [pc, #12]	; (8102ef8 <Task_0_Core_1_Handler+0x80>)
 8102eec:	6013      	str	r3, [r2, #0]
};
 8102eee:	bf00      	nop
 8102ef0:	3708      	adds	r7, #8
 8102ef2:	46bd      	mov	sp, r7
 8102ef4:	bd80      	pop	{r7, pc}
 8102ef6:	bf00      	nop
 8102ef8:	10001000 	.word	0x10001000
 8102efc:	10001004 	.word	0x10001004
 8102f00:	58020400 	.word	0x58020400

08102f04 <Task_0_Core_0_Handler>:
** Program ID macro = PROGRAM_1_CORE_0_ID
** WCET macro = TASK_0_PROGRAM_1_CORE_0_WCET
** Period of task in ticks = 50
********************************************************************************/
void Task_0_Core_0_Handler(void)
{
 8102f04:	b580      	push	{r7, lr}
 8102f06:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_0_Handler
********************************************************************************/
if (counter > 100)
 8102f08:	4b0a      	ldr	r3, [pc, #40]	; (8102f34 <Task_0_Core_0_Handler+0x30>)
 8102f0a:	681b      	ldr	r3, [r3, #0]
 8102f0c:	2b64      	cmp	r3, #100	; 0x64
 8102f0e:	dd08      	ble.n	8102f22 <Task_0_Core_0_Handler+0x1e>
{
    counter = 0;
 8102f10:	4b08      	ldr	r3, [pc, #32]	; (8102f34 <Task_0_Core_0_Handler+0x30>)
 8102f12:	2200      	movs	r2, #0
 8102f14:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOE, GPIO_PIN_1); //ORANGE LED
 8102f16:	2202      	movs	r2, #2
 8102f18:	4907      	ldr	r1, [pc, #28]	; (8102f38 <Task_0_Core_0_Handler+0x34>)
 8102f1a:	200c      	movs	r0, #12
 8102f1c:	f7ff f8ed 	bl	81020fa <sysCalls_readWrite>
 8102f20:	e004      	b.n	8102f2c <Task_0_Core_0_Handler+0x28>

	// cosmosApi_release_spinlock_uart_buffer_read();
}
else
{
    counter++;
 8102f22:	4b04      	ldr	r3, [pc, #16]	; (8102f34 <Task_0_Core_0_Handler+0x30>)
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	3301      	adds	r3, #1
 8102f28:	4a02      	ldr	r2, [pc, #8]	; (8102f34 <Task_0_Core_0_Handler+0x30>)
 8102f2a:	6013      	str	r3, [r2, #0]
}
__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 8102f2c:	ee20 0a20 	vmul.f32	s0, s0, s1
/********************************************************************************
** stop_name =Task_0_Core_0_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8102f30:	bf00      	nop
 8102f32:	bd80      	pop	{r7, pc}
 8102f34:	20001000 	.word	0x20001000
 8102f38:	58021000 	.word	0x58021000

08102f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102f3c:	b580      	push	{r7, lr}
 8102f3e:	b082      	sub	sp, #8
 8102f40:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102f42:	4b28      	ldr	r3, [pc, #160]	; (8102fe4 <HAL_Init+0xa8>)
 8102f44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102f48:	4a26      	ldr	r2, [pc, #152]	; (8102fe4 <HAL_Init+0xa8>)
 8102f4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102f4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102f52:	4b24      	ldr	r3, [pc, #144]	; (8102fe4 <HAL_Init+0xa8>)
 8102f54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102f5c:	603b      	str	r3, [r7, #0]
 8102f5e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102f60:	4b21      	ldr	r3, [pc, #132]	; (8102fe8 <HAL_Init+0xac>)
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102f68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102f6c:	4a1e      	ldr	r2, [pc, #120]	; (8102fe8 <HAL_Init+0xac>)
 8102f6e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102f72:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102f74:	4b1c      	ldr	r3, [pc, #112]	; (8102fe8 <HAL_Init+0xac>)
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	4a1b      	ldr	r2, [pc, #108]	; (8102fe8 <HAL_Init+0xac>)
 8102f7a:	f043 0301 	orr.w	r3, r3, #1
 8102f7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102f80:	2003      	movs	r0, #3
 8102f82:	f000 f8fa 	bl	810317a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102f86:	f000 fc39 	bl	81037fc <HAL_RCC_GetSysClockFreq>
 8102f8a:	4602      	mov	r2, r0
 8102f8c:	4b15      	ldr	r3, [pc, #84]	; (8102fe4 <HAL_Init+0xa8>)
 8102f8e:	699b      	ldr	r3, [r3, #24]
 8102f90:	0a1b      	lsrs	r3, r3, #8
 8102f92:	f003 030f 	and.w	r3, r3, #15
 8102f96:	4915      	ldr	r1, [pc, #84]	; (8102fec <HAL_Init+0xb0>)
 8102f98:	5ccb      	ldrb	r3, [r1, r3]
 8102f9a:	f003 031f 	and.w	r3, r3, #31
 8102f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8102fa2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102fa4:	4b0f      	ldr	r3, [pc, #60]	; (8102fe4 <HAL_Init+0xa8>)
 8102fa6:	699b      	ldr	r3, [r3, #24]
 8102fa8:	f003 030f 	and.w	r3, r3, #15
 8102fac:	4a0f      	ldr	r2, [pc, #60]	; (8102fec <HAL_Init+0xb0>)
 8102fae:	5cd3      	ldrb	r3, [r2, r3]
 8102fb0:	f003 031f 	and.w	r3, r3, #31
 8102fb4:	687a      	ldr	r2, [r7, #4]
 8102fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8102fba:	4a0d      	ldr	r2, [pc, #52]	; (8102ff0 <HAL_Init+0xb4>)
 8102fbc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102fbe:	4b0c      	ldr	r3, [pc, #48]	; (8102ff0 <HAL_Init+0xb4>)
 8102fc0:	681b      	ldr	r3, [r3, #0]
 8102fc2:	4a0c      	ldr	r2, [pc, #48]	; (8102ff4 <HAL_Init+0xb8>)
 8102fc4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102fc6:	2000      	movs	r0, #0
 8102fc8:	f7ff fdd4 	bl	8102b74 <HAL_InitTick>
 8102fcc:	4603      	mov	r3, r0
 8102fce:	2b00      	cmp	r3, #0
 8102fd0:	d001      	beq.n	8102fd6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102fd2:	2301      	movs	r3, #1
 8102fd4:	e002      	b.n	8102fdc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102fd6:	f7ff fdb3 	bl	8102b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102fda:	2300      	movs	r3, #0
}
 8102fdc:	4618      	mov	r0, r3
 8102fde:	3708      	adds	r7, #8
 8102fe0:	46bd      	mov	sp, r7
 8102fe2:	bd80      	pop	{r7, pc}
 8102fe4:	58024400 	.word	0x58024400
 8102fe8:	40024400 	.word	0x40024400
 8102fec:	081042a4 	.word	0x081042a4
 8102ff0:	1000180c 	.word	0x1000180c
 8102ff4:	10001808 	.word	0x10001808

08102ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102ff8:	b480      	push	{r7}
 8102ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102ffc:	4b06      	ldr	r3, [pc, #24]	; (8103018 <HAL_IncTick+0x20>)
 8102ffe:	781b      	ldrb	r3, [r3, #0]
 8103000:	461a      	mov	r2, r3
 8103002:	4b06      	ldr	r3, [pc, #24]	; (810301c <HAL_IncTick+0x24>)
 8103004:	681b      	ldr	r3, [r3, #0]
 8103006:	4413      	add	r3, r2
 8103008:	4a04      	ldr	r2, [pc, #16]	; (810301c <HAL_IncTick+0x24>)
 810300a:	6013      	str	r3, [r2, #0]
}
 810300c:	bf00      	nop
 810300e:	46bd      	mov	sp, r7
 8103010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103014:	4770      	bx	lr
 8103016:	bf00      	nop
 8103018:	10001804 	.word	0x10001804
 810301c:	10001878 	.word	0x10001878

08103020 <__NVIC_SetPriorityGrouping>:
{
 8103020:	b480      	push	{r7}
 8103022:	b085      	sub	sp, #20
 8103024:	af00      	add	r7, sp, #0
 8103026:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103028:	687b      	ldr	r3, [r7, #4]
 810302a:	f003 0307 	and.w	r3, r3, #7
 810302e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8103030:	4b0c      	ldr	r3, [pc, #48]	; (8103064 <__NVIC_SetPriorityGrouping+0x44>)
 8103032:	68db      	ldr	r3, [r3, #12]
 8103034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103036:	68ba      	ldr	r2, [r7, #8]
 8103038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810303c:	4013      	ands	r3, r2
 810303e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8103040:	68fb      	ldr	r3, [r7, #12]
 8103042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103044:	68bb      	ldr	r3, [r7, #8]
 8103046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810304c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8103052:	4a04      	ldr	r2, [pc, #16]	; (8103064 <__NVIC_SetPriorityGrouping+0x44>)
 8103054:	68bb      	ldr	r3, [r7, #8]
 8103056:	60d3      	str	r3, [r2, #12]
}
 8103058:	bf00      	nop
 810305a:	3714      	adds	r7, #20
 810305c:	46bd      	mov	sp, r7
 810305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103062:	4770      	bx	lr
 8103064:	e000ed00 	.word	0xe000ed00

08103068 <__NVIC_GetPriorityGrouping>:
{
 8103068:	b480      	push	{r7}
 810306a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810306c:	4b04      	ldr	r3, [pc, #16]	; (8103080 <__NVIC_GetPriorityGrouping+0x18>)
 810306e:	68db      	ldr	r3, [r3, #12]
 8103070:	0a1b      	lsrs	r3, r3, #8
 8103072:	f003 0307 	and.w	r3, r3, #7
}
 8103076:	4618      	mov	r0, r3
 8103078:	46bd      	mov	sp, r7
 810307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810307e:	4770      	bx	lr
 8103080:	e000ed00 	.word	0xe000ed00

08103084 <__NVIC_EnableIRQ>:
{
 8103084:	b480      	push	{r7}
 8103086:	b083      	sub	sp, #12
 8103088:	af00      	add	r7, sp, #0
 810308a:	4603      	mov	r3, r0
 810308c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810308e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103092:	2b00      	cmp	r3, #0
 8103094:	db0b      	blt.n	81030ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103096:	88fb      	ldrh	r3, [r7, #6]
 8103098:	f003 021f 	and.w	r2, r3, #31
 810309c:	4907      	ldr	r1, [pc, #28]	; (81030bc <__NVIC_EnableIRQ+0x38>)
 810309e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81030a2:	095b      	lsrs	r3, r3, #5
 81030a4:	2001      	movs	r0, #1
 81030a6:	fa00 f202 	lsl.w	r2, r0, r2
 81030aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 81030ae:	bf00      	nop
 81030b0:	370c      	adds	r7, #12
 81030b2:	46bd      	mov	sp, r7
 81030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030b8:	4770      	bx	lr
 81030ba:	bf00      	nop
 81030bc:	e000e100 	.word	0xe000e100

081030c0 <__NVIC_SetPriority>:
{
 81030c0:	b480      	push	{r7}
 81030c2:	b083      	sub	sp, #12
 81030c4:	af00      	add	r7, sp, #0
 81030c6:	4603      	mov	r3, r0
 81030c8:	6039      	str	r1, [r7, #0]
 81030ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81030cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81030d0:	2b00      	cmp	r3, #0
 81030d2:	db0a      	blt.n	81030ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81030d4:	683b      	ldr	r3, [r7, #0]
 81030d6:	b2da      	uxtb	r2, r3
 81030d8:	490c      	ldr	r1, [pc, #48]	; (810310c <__NVIC_SetPriority+0x4c>)
 81030da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81030de:	0112      	lsls	r2, r2, #4
 81030e0:	b2d2      	uxtb	r2, r2
 81030e2:	440b      	add	r3, r1
 81030e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81030e8:	e00a      	b.n	8103100 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81030ea:	683b      	ldr	r3, [r7, #0]
 81030ec:	b2da      	uxtb	r2, r3
 81030ee:	4908      	ldr	r1, [pc, #32]	; (8103110 <__NVIC_SetPriority+0x50>)
 81030f0:	88fb      	ldrh	r3, [r7, #6]
 81030f2:	f003 030f 	and.w	r3, r3, #15
 81030f6:	3b04      	subs	r3, #4
 81030f8:	0112      	lsls	r2, r2, #4
 81030fa:	b2d2      	uxtb	r2, r2
 81030fc:	440b      	add	r3, r1
 81030fe:	761a      	strb	r2, [r3, #24]
}
 8103100:	bf00      	nop
 8103102:	370c      	adds	r7, #12
 8103104:	46bd      	mov	sp, r7
 8103106:	f85d 7b04 	ldr.w	r7, [sp], #4
 810310a:	4770      	bx	lr
 810310c:	e000e100 	.word	0xe000e100
 8103110:	e000ed00 	.word	0xe000ed00

08103114 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103114:	b480      	push	{r7}
 8103116:	b089      	sub	sp, #36	; 0x24
 8103118:	af00      	add	r7, sp, #0
 810311a:	60f8      	str	r0, [r7, #12]
 810311c:	60b9      	str	r1, [r7, #8]
 810311e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8103120:	68fb      	ldr	r3, [r7, #12]
 8103122:	f003 0307 	and.w	r3, r3, #7
 8103126:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103128:	69fb      	ldr	r3, [r7, #28]
 810312a:	f1c3 0307 	rsb	r3, r3, #7
 810312e:	2b04      	cmp	r3, #4
 8103130:	bf28      	it	cs
 8103132:	2304      	movcs	r3, #4
 8103134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103136:	69fb      	ldr	r3, [r7, #28]
 8103138:	3304      	adds	r3, #4
 810313a:	2b06      	cmp	r3, #6
 810313c:	d902      	bls.n	8103144 <NVIC_EncodePriority+0x30>
 810313e:	69fb      	ldr	r3, [r7, #28]
 8103140:	3b03      	subs	r3, #3
 8103142:	e000      	b.n	8103146 <NVIC_EncodePriority+0x32>
 8103144:	2300      	movs	r3, #0
 8103146:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103148:	f04f 32ff 	mov.w	r2, #4294967295
 810314c:	69bb      	ldr	r3, [r7, #24]
 810314e:	fa02 f303 	lsl.w	r3, r2, r3
 8103152:	43da      	mvns	r2, r3
 8103154:	68bb      	ldr	r3, [r7, #8]
 8103156:	401a      	ands	r2, r3
 8103158:	697b      	ldr	r3, [r7, #20]
 810315a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810315c:	f04f 31ff 	mov.w	r1, #4294967295
 8103160:	697b      	ldr	r3, [r7, #20]
 8103162:	fa01 f303 	lsl.w	r3, r1, r3
 8103166:	43d9      	mvns	r1, r3
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810316c:	4313      	orrs	r3, r2
         );
}
 810316e:	4618      	mov	r0, r3
 8103170:	3724      	adds	r7, #36	; 0x24
 8103172:	46bd      	mov	sp, r7
 8103174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103178:	4770      	bx	lr

0810317a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810317a:	b580      	push	{r7, lr}
 810317c:	b082      	sub	sp, #8
 810317e:	af00      	add	r7, sp, #0
 8103180:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103182:	6878      	ldr	r0, [r7, #4]
 8103184:	f7ff ff4c 	bl	8103020 <__NVIC_SetPriorityGrouping>
}
 8103188:	bf00      	nop
 810318a:	3708      	adds	r7, #8
 810318c:	46bd      	mov	sp, r7
 810318e:	bd80      	pop	{r7, pc}

08103190 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103190:	b580      	push	{r7, lr}
 8103192:	b086      	sub	sp, #24
 8103194:	af00      	add	r7, sp, #0
 8103196:	4603      	mov	r3, r0
 8103198:	60b9      	str	r1, [r7, #8]
 810319a:	607a      	str	r2, [r7, #4]
 810319c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810319e:	f7ff ff63 	bl	8103068 <__NVIC_GetPriorityGrouping>
 81031a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81031a4:	687a      	ldr	r2, [r7, #4]
 81031a6:	68b9      	ldr	r1, [r7, #8]
 81031a8:	6978      	ldr	r0, [r7, #20]
 81031aa:	f7ff ffb3 	bl	8103114 <NVIC_EncodePriority>
 81031ae:	4602      	mov	r2, r0
 81031b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81031b4:	4611      	mov	r1, r2
 81031b6:	4618      	mov	r0, r3
 81031b8:	f7ff ff82 	bl	81030c0 <__NVIC_SetPriority>
}
 81031bc:	bf00      	nop
 81031be:	3718      	adds	r7, #24
 81031c0:	46bd      	mov	sp, r7
 81031c2:	bd80      	pop	{r7, pc}

081031c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81031c4:	b580      	push	{r7, lr}
 81031c6:	b082      	sub	sp, #8
 81031c8:	af00      	add	r7, sp, #0
 81031ca:	4603      	mov	r3, r0
 81031cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81031ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81031d2:	4618      	mov	r0, r3
 81031d4:	f7ff ff56 	bl	8103084 <__NVIC_EnableIRQ>
}
 81031d8:	bf00      	nop
 81031da:	3708      	adds	r7, #8
 81031dc:	46bd      	mov	sp, r7
 81031de:	bd80      	pop	{r7, pc}

081031e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 81031e0:	b480      	push	{r7}
 81031e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 81031e4:	f3bf 8f5f 	dmb	sy
}
 81031e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 81031ea:	4b07      	ldr	r3, [pc, #28]	; (8103208 <HAL_MPU_Disable+0x28>)
 81031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81031ee:	4a06      	ldr	r2, [pc, #24]	; (8103208 <HAL_MPU_Disable+0x28>)
 81031f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81031f4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 81031f6:	4b05      	ldr	r3, [pc, #20]	; (810320c <HAL_MPU_Disable+0x2c>)
 81031f8:	2200      	movs	r2, #0
 81031fa:	605a      	str	r2, [r3, #4]
}
 81031fc:	bf00      	nop
 81031fe:	46bd      	mov	sp, r7
 8103200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103204:	4770      	bx	lr
 8103206:	bf00      	nop
 8103208:	e000ed00 	.word	0xe000ed00
 810320c:	e000ed90 	.word	0xe000ed90

08103210 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8103210:	b480      	push	{r7}
 8103212:	b083      	sub	sp, #12
 8103214:	af00      	add	r7, sp, #0
 8103216:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8103218:	4a0b      	ldr	r2, [pc, #44]	; (8103248 <HAL_MPU_Enable+0x38>)
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	f043 0301 	orr.w	r3, r3, #1
 8103220:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8103222:	4b0a      	ldr	r3, [pc, #40]	; (810324c <HAL_MPU_Enable+0x3c>)
 8103224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103226:	4a09      	ldr	r2, [pc, #36]	; (810324c <HAL_MPU_Enable+0x3c>)
 8103228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810322c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 810322e:	f3bf 8f4f 	dsb	sy
}
 8103232:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103234:	f3bf 8f6f 	isb	sy
}
 8103238:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 810323a:	bf00      	nop
 810323c:	370c      	adds	r7, #12
 810323e:	46bd      	mov	sp, r7
 8103240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103244:	4770      	bx	lr
 8103246:	bf00      	nop
 8103248:	e000ed90 	.word	0xe000ed90
 810324c:	e000ed00 	.word	0xe000ed00

08103250 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8103250:	b480      	push	{r7}
 8103252:	b083      	sub	sp, #12
 8103254:	af00      	add	r7, sp, #0
 8103256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8103258:	687b      	ldr	r3, [r7, #4]
 810325a:	785a      	ldrb	r2, [r3, #1]
 810325c:	4b1d      	ldr	r3, [pc, #116]	; (81032d4 <HAL_MPU_ConfigRegion+0x84>)
 810325e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8103260:	687b      	ldr	r3, [r7, #4]
 8103262:	781b      	ldrb	r3, [r3, #0]
 8103264:	2b00      	cmp	r3, #0
 8103266:	d029      	beq.n	81032bc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8103268:	4a1a      	ldr	r2, [pc, #104]	; (81032d4 <HAL_MPU_ConfigRegion+0x84>)
 810326a:	687b      	ldr	r3, [r7, #4]
 810326c:	685b      	ldr	r3, [r3, #4]
 810326e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8103270:	687b      	ldr	r3, [r7, #4]
 8103272:	7b1b      	ldrb	r3, [r3, #12]
 8103274:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8103276:	687b      	ldr	r3, [r7, #4]
 8103278:	7adb      	ldrb	r3, [r3, #11]
 810327a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 810327c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	7a9b      	ldrb	r3, [r3, #10]
 8103282:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8103284:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8103286:	687b      	ldr	r3, [r7, #4]
 8103288:	7b5b      	ldrb	r3, [r3, #13]
 810328a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 810328c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 810328e:	687b      	ldr	r3, [r7, #4]
 8103290:	7b9b      	ldrb	r3, [r3, #14]
 8103292:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8103294:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8103296:	687b      	ldr	r3, [r7, #4]
 8103298:	7bdb      	ldrb	r3, [r3, #15]
 810329a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 810329c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	7a5b      	ldrb	r3, [r3, #9]
 81032a2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 81032a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 81032a6:	687b      	ldr	r3, [r7, #4]
 81032a8:	7a1b      	ldrb	r3, [r3, #8]
 81032aa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 81032ac:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 81032ae:	687a      	ldr	r2, [r7, #4]
 81032b0:	7812      	ldrb	r2, [r2, #0]
 81032b2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 81032b4:	4a07      	ldr	r2, [pc, #28]	; (81032d4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 81032b6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 81032b8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 81032ba:	e005      	b.n	81032c8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 81032bc:	4b05      	ldr	r3, [pc, #20]	; (81032d4 <HAL_MPU_ConfigRegion+0x84>)
 81032be:	2200      	movs	r2, #0
 81032c0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 81032c2:	4b04      	ldr	r3, [pc, #16]	; (81032d4 <HAL_MPU_ConfigRegion+0x84>)
 81032c4:	2200      	movs	r2, #0
 81032c6:	611a      	str	r2, [r3, #16]
}
 81032c8:	bf00      	nop
 81032ca:	370c      	adds	r7, #12
 81032cc:	46bd      	mov	sp, r7
 81032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032d2:	4770      	bx	lr
 81032d4:	e000ed90 	.word	0xe000ed90

081032d8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81032d8:	b480      	push	{r7}
 81032da:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81032dc:	4b07      	ldr	r3, [pc, #28]	; (81032fc <HAL_GetCurrentCPUID+0x24>)
 81032de:	681b      	ldr	r3, [r3, #0]
 81032e0:	091b      	lsrs	r3, r3, #4
 81032e2:	f003 030f 	and.w	r3, r3, #15
 81032e6:	2b07      	cmp	r3, #7
 81032e8:	d101      	bne.n	81032ee <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81032ea:	2303      	movs	r3, #3
 81032ec:	e000      	b.n	81032f0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81032ee:	2301      	movs	r3, #1
  }
}
 81032f0:	4618      	mov	r0, r3
 81032f2:	46bd      	mov	sp, r7
 81032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032f8:	4770      	bx	lr
 81032fa:	bf00      	nop
 81032fc:	e000ed00 	.word	0xe000ed00

08103300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103300:	b480      	push	{r7}
 8103302:	b089      	sub	sp, #36	; 0x24
 8103304:	af00      	add	r7, sp, #0
 8103306:	6078      	str	r0, [r7, #4]
 8103308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810330a:	2300      	movs	r3, #0
 810330c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810330e:	4b89      	ldr	r3, [pc, #548]	; (8103534 <HAL_GPIO_Init+0x234>)
 8103310:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103312:	e194      	b.n	810363e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103314:	683b      	ldr	r3, [r7, #0]
 8103316:	681a      	ldr	r2, [r3, #0]
 8103318:	2101      	movs	r1, #1
 810331a:	69fb      	ldr	r3, [r7, #28]
 810331c:	fa01 f303 	lsl.w	r3, r1, r3
 8103320:	4013      	ands	r3, r2
 8103322:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103324:	693b      	ldr	r3, [r7, #16]
 8103326:	2b00      	cmp	r3, #0
 8103328:	f000 8186 	beq.w	8103638 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810332c:	683b      	ldr	r3, [r7, #0]
 810332e:	685b      	ldr	r3, [r3, #4]
 8103330:	2b01      	cmp	r3, #1
 8103332:	d00b      	beq.n	810334c <HAL_GPIO_Init+0x4c>
 8103334:	683b      	ldr	r3, [r7, #0]
 8103336:	685b      	ldr	r3, [r3, #4]
 8103338:	2b02      	cmp	r3, #2
 810333a:	d007      	beq.n	810334c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810333c:	683b      	ldr	r3, [r7, #0]
 810333e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8103340:	2b11      	cmp	r3, #17
 8103342:	d003      	beq.n	810334c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103344:	683b      	ldr	r3, [r7, #0]
 8103346:	685b      	ldr	r3, [r3, #4]
 8103348:	2b12      	cmp	r3, #18
 810334a:	d130      	bne.n	81033ae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	689b      	ldr	r3, [r3, #8]
 8103350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8103352:	69fb      	ldr	r3, [r7, #28]
 8103354:	005b      	lsls	r3, r3, #1
 8103356:	2203      	movs	r2, #3
 8103358:	fa02 f303 	lsl.w	r3, r2, r3
 810335c:	43db      	mvns	r3, r3
 810335e:	69ba      	ldr	r2, [r7, #24]
 8103360:	4013      	ands	r3, r2
 8103362:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103364:	683b      	ldr	r3, [r7, #0]
 8103366:	68da      	ldr	r2, [r3, #12]
 8103368:	69fb      	ldr	r3, [r7, #28]
 810336a:	005b      	lsls	r3, r3, #1
 810336c:	fa02 f303 	lsl.w	r3, r2, r3
 8103370:	69ba      	ldr	r2, [r7, #24]
 8103372:	4313      	orrs	r3, r2
 8103374:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103376:	687b      	ldr	r3, [r7, #4]
 8103378:	69ba      	ldr	r2, [r7, #24]
 810337a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810337c:	687b      	ldr	r3, [r7, #4]
 810337e:	685b      	ldr	r3, [r3, #4]
 8103380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103382:	2201      	movs	r2, #1
 8103384:	69fb      	ldr	r3, [r7, #28]
 8103386:	fa02 f303 	lsl.w	r3, r2, r3
 810338a:	43db      	mvns	r3, r3
 810338c:	69ba      	ldr	r2, [r7, #24]
 810338e:	4013      	ands	r3, r2
 8103390:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8103392:	683b      	ldr	r3, [r7, #0]
 8103394:	685b      	ldr	r3, [r3, #4]
 8103396:	091b      	lsrs	r3, r3, #4
 8103398:	f003 0201 	and.w	r2, r3, #1
 810339c:	69fb      	ldr	r3, [r7, #28]
 810339e:	fa02 f303 	lsl.w	r3, r2, r3
 81033a2:	69ba      	ldr	r2, [r7, #24]
 81033a4:	4313      	orrs	r3, r2
 81033a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	69ba      	ldr	r2, [r7, #24]
 81033ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	68db      	ldr	r3, [r3, #12]
 81033b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81033b4:	69fb      	ldr	r3, [r7, #28]
 81033b6:	005b      	lsls	r3, r3, #1
 81033b8:	2203      	movs	r2, #3
 81033ba:	fa02 f303 	lsl.w	r3, r2, r3
 81033be:	43db      	mvns	r3, r3
 81033c0:	69ba      	ldr	r2, [r7, #24]
 81033c2:	4013      	ands	r3, r2
 81033c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81033c6:	683b      	ldr	r3, [r7, #0]
 81033c8:	689a      	ldr	r2, [r3, #8]
 81033ca:	69fb      	ldr	r3, [r7, #28]
 81033cc:	005b      	lsls	r3, r3, #1
 81033ce:	fa02 f303 	lsl.w	r3, r2, r3
 81033d2:	69ba      	ldr	r2, [r7, #24]
 81033d4:	4313      	orrs	r3, r2
 81033d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81033d8:	687b      	ldr	r3, [r7, #4]
 81033da:	69ba      	ldr	r2, [r7, #24]
 81033dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81033de:	683b      	ldr	r3, [r7, #0]
 81033e0:	685b      	ldr	r3, [r3, #4]
 81033e2:	2b02      	cmp	r3, #2
 81033e4:	d003      	beq.n	81033ee <HAL_GPIO_Init+0xee>
 81033e6:	683b      	ldr	r3, [r7, #0]
 81033e8:	685b      	ldr	r3, [r3, #4]
 81033ea:	2b12      	cmp	r3, #18
 81033ec:	d123      	bne.n	8103436 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81033ee:	69fb      	ldr	r3, [r7, #28]
 81033f0:	08da      	lsrs	r2, r3, #3
 81033f2:	687b      	ldr	r3, [r7, #4]
 81033f4:	3208      	adds	r2, #8
 81033f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81033fc:	69fb      	ldr	r3, [r7, #28]
 81033fe:	f003 0307 	and.w	r3, r3, #7
 8103402:	009b      	lsls	r3, r3, #2
 8103404:	220f      	movs	r2, #15
 8103406:	fa02 f303 	lsl.w	r3, r2, r3
 810340a:	43db      	mvns	r3, r3
 810340c:	69ba      	ldr	r2, [r7, #24]
 810340e:	4013      	ands	r3, r2
 8103410:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103412:	683b      	ldr	r3, [r7, #0]
 8103414:	691a      	ldr	r2, [r3, #16]
 8103416:	69fb      	ldr	r3, [r7, #28]
 8103418:	f003 0307 	and.w	r3, r3, #7
 810341c:	009b      	lsls	r3, r3, #2
 810341e:	fa02 f303 	lsl.w	r3, r2, r3
 8103422:	69ba      	ldr	r2, [r7, #24]
 8103424:	4313      	orrs	r3, r2
 8103426:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103428:	69fb      	ldr	r3, [r7, #28]
 810342a:	08da      	lsrs	r2, r3, #3
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	3208      	adds	r2, #8
 8103430:	69b9      	ldr	r1, [r7, #24]
 8103432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8103436:	687b      	ldr	r3, [r7, #4]
 8103438:	681b      	ldr	r3, [r3, #0]
 810343a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810343c:	69fb      	ldr	r3, [r7, #28]
 810343e:	005b      	lsls	r3, r3, #1
 8103440:	2203      	movs	r2, #3
 8103442:	fa02 f303 	lsl.w	r3, r2, r3
 8103446:	43db      	mvns	r3, r3
 8103448:	69ba      	ldr	r2, [r7, #24]
 810344a:	4013      	ands	r3, r2
 810344c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810344e:	683b      	ldr	r3, [r7, #0]
 8103450:	685b      	ldr	r3, [r3, #4]
 8103452:	f003 0203 	and.w	r2, r3, #3
 8103456:	69fb      	ldr	r3, [r7, #28]
 8103458:	005b      	lsls	r3, r3, #1
 810345a:	fa02 f303 	lsl.w	r3, r2, r3
 810345e:	69ba      	ldr	r2, [r7, #24]
 8103460:	4313      	orrs	r3, r2
 8103462:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103464:	687b      	ldr	r3, [r7, #4]
 8103466:	69ba      	ldr	r2, [r7, #24]
 8103468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810346a:	683b      	ldr	r3, [r7, #0]
 810346c:	685b      	ldr	r3, [r3, #4]
 810346e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103472:	2b00      	cmp	r3, #0
 8103474:	f000 80e0 	beq.w	8103638 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103478:	4b2f      	ldr	r3, [pc, #188]	; (8103538 <HAL_GPIO_Init+0x238>)
 810347a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810347e:	4a2e      	ldr	r2, [pc, #184]	; (8103538 <HAL_GPIO_Init+0x238>)
 8103480:	f043 0302 	orr.w	r3, r3, #2
 8103484:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103488:	4b2b      	ldr	r3, [pc, #172]	; (8103538 <HAL_GPIO_Init+0x238>)
 810348a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810348e:	f003 0302 	and.w	r3, r3, #2
 8103492:	60fb      	str	r3, [r7, #12]
 8103494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8103496:	4a29      	ldr	r2, [pc, #164]	; (810353c <HAL_GPIO_Init+0x23c>)
 8103498:	69fb      	ldr	r3, [r7, #28]
 810349a:	089b      	lsrs	r3, r3, #2
 810349c:	3302      	adds	r3, #2
 810349e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81034a4:	69fb      	ldr	r3, [r7, #28]
 81034a6:	f003 0303 	and.w	r3, r3, #3
 81034aa:	009b      	lsls	r3, r3, #2
 81034ac:	220f      	movs	r2, #15
 81034ae:	fa02 f303 	lsl.w	r3, r2, r3
 81034b2:	43db      	mvns	r3, r3
 81034b4:	69ba      	ldr	r2, [r7, #24]
 81034b6:	4013      	ands	r3, r2
 81034b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81034ba:	687b      	ldr	r3, [r7, #4]
 81034bc:	4a20      	ldr	r2, [pc, #128]	; (8103540 <HAL_GPIO_Init+0x240>)
 81034be:	4293      	cmp	r3, r2
 81034c0:	d052      	beq.n	8103568 <HAL_GPIO_Init+0x268>
 81034c2:	687b      	ldr	r3, [r7, #4]
 81034c4:	4a1f      	ldr	r2, [pc, #124]	; (8103544 <HAL_GPIO_Init+0x244>)
 81034c6:	4293      	cmp	r3, r2
 81034c8:	d031      	beq.n	810352e <HAL_GPIO_Init+0x22e>
 81034ca:	687b      	ldr	r3, [r7, #4]
 81034cc:	4a1e      	ldr	r2, [pc, #120]	; (8103548 <HAL_GPIO_Init+0x248>)
 81034ce:	4293      	cmp	r3, r2
 81034d0:	d02b      	beq.n	810352a <HAL_GPIO_Init+0x22a>
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	4a1d      	ldr	r2, [pc, #116]	; (810354c <HAL_GPIO_Init+0x24c>)
 81034d6:	4293      	cmp	r3, r2
 81034d8:	d025      	beq.n	8103526 <HAL_GPIO_Init+0x226>
 81034da:	687b      	ldr	r3, [r7, #4]
 81034dc:	4a1c      	ldr	r2, [pc, #112]	; (8103550 <HAL_GPIO_Init+0x250>)
 81034de:	4293      	cmp	r3, r2
 81034e0:	d01f      	beq.n	8103522 <HAL_GPIO_Init+0x222>
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	4a1b      	ldr	r2, [pc, #108]	; (8103554 <HAL_GPIO_Init+0x254>)
 81034e6:	4293      	cmp	r3, r2
 81034e8:	d019      	beq.n	810351e <HAL_GPIO_Init+0x21e>
 81034ea:	687b      	ldr	r3, [r7, #4]
 81034ec:	4a1a      	ldr	r2, [pc, #104]	; (8103558 <HAL_GPIO_Init+0x258>)
 81034ee:	4293      	cmp	r3, r2
 81034f0:	d013      	beq.n	810351a <HAL_GPIO_Init+0x21a>
 81034f2:	687b      	ldr	r3, [r7, #4]
 81034f4:	4a19      	ldr	r2, [pc, #100]	; (810355c <HAL_GPIO_Init+0x25c>)
 81034f6:	4293      	cmp	r3, r2
 81034f8:	d00d      	beq.n	8103516 <HAL_GPIO_Init+0x216>
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	4a18      	ldr	r2, [pc, #96]	; (8103560 <HAL_GPIO_Init+0x260>)
 81034fe:	4293      	cmp	r3, r2
 8103500:	d007      	beq.n	8103512 <HAL_GPIO_Init+0x212>
 8103502:	687b      	ldr	r3, [r7, #4]
 8103504:	4a17      	ldr	r2, [pc, #92]	; (8103564 <HAL_GPIO_Init+0x264>)
 8103506:	4293      	cmp	r3, r2
 8103508:	d101      	bne.n	810350e <HAL_GPIO_Init+0x20e>
 810350a:	2309      	movs	r3, #9
 810350c:	e02d      	b.n	810356a <HAL_GPIO_Init+0x26a>
 810350e:	230a      	movs	r3, #10
 8103510:	e02b      	b.n	810356a <HAL_GPIO_Init+0x26a>
 8103512:	2308      	movs	r3, #8
 8103514:	e029      	b.n	810356a <HAL_GPIO_Init+0x26a>
 8103516:	2307      	movs	r3, #7
 8103518:	e027      	b.n	810356a <HAL_GPIO_Init+0x26a>
 810351a:	2306      	movs	r3, #6
 810351c:	e025      	b.n	810356a <HAL_GPIO_Init+0x26a>
 810351e:	2305      	movs	r3, #5
 8103520:	e023      	b.n	810356a <HAL_GPIO_Init+0x26a>
 8103522:	2304      	movs	r3, #4
 8103524:	e021      	b.n	810356a <HAL_GPIO_Init+0x26a>
 8103526:	2303      	movs	r3, #3
 8103528:	e01f      	b.n	810356a <HAL_GPIO_Init+0x26a>
 810352a:	2302      	movs	r3, #2
 810352c:	e01d      	b.n	810356a <HAL_GPIO_Init+0x26a>
 810352e:	2301      	movs	r3, #1
 8103530:	e01b      	b.n	810356a <HAL_GPIO_Init+0x26a>
 8103532:	bf00      	nop
 8103534:	580000c0 	.word	0x580000c0
 8103538:	58024400 	.word	0x58024400
 810353c:	58000400 	.word	0x58000400
 8103540:	58020000 	.word	0x58020000
 8103544:	58020400 	.word	0x58020400
 8103548:	58020800 	.word	0x58020800
 810354c:	58020c00 	.word	0x58020c00
 8103550:	58021000 	.word	0x58021000
 8103554:	58021400 	.word	0x58021400
 8103558:	58021800 	.word	0x58021800
 810355c:	58021c00 	.word	0x58021c00
 8103560:	58022000 	.word	0x58022000
 8103564:	58022400 	.word	0x58022400
 8103568:	2300      	movs	r3, #0
 810356a:	69fa      	ldr	r2, [r7, #28]
 810356c:	f002 0203 	and.w	r2, r2, #3
 8103570:	0092      	lsls	r2, r2, #2
 8103572:	4093      	lsls	r3, r2
 8103574:	69ba      	ldr	r2, [r7, #24]
 8103576:	4313      	orrs	r3, r2
 8103578:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810357a:	4938      	ldr	r1, [pc, #224]	; (810365c <HAL_GPIO_Init+0x35c>)
 810357c:	69fb      	ldr	r3, [r7, #28]
 810357e:	089b      	lsrs	r3, r3, #2
 8103580:	3302      	adds	r3, #2
 8103582:	69ba      	ldr	r2, [r7, #24]
 8103584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103588:	697b      	ldr	r3, [r7, #20]
 810358a:	681b      	ldr	r3, [r3, #0]
 810358c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810358e:	693b      	ldr	r3, [r7, #16]
 8103590:	43db      	mvns	r3, r3
 8103592:	69ba      	ldr	r2, [r7, #24]
 8103594:	4013      	ands	r3, r2
 8103596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8103598:	683b      	ldr	r3, [r7, #0]
 810359a:	685b      	ldr	r3, [r3, #4]
 810359c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81035a0:	2b00      	cmp	r3, #0
 81035a2:	d003      	beq.n	81035ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 81035a4:	69ba      	ldr	r2, [r7, #24]
 81035a6:	693b      	ldr	r3, [r7, #16]
 81035a8:	4313      	orrs	r3, r2
 81035aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81035ac:	697b      	ldr	r3, [r7, #20]
 81035ae:	69ba      	ldr	r2, [r7, #24]
 81035b0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 81035b2:	697b      	ldr	r3, [r7, #20]
 81035b4:	685b      	ldr	r3, [r3, #4]
 81035b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81035b8:	693b      	ldr	r3, [r7, #16]
 81035ba:	43db      	mvns	r3, r3
 81035bc:	69ba      	ldr	r2, [r7, #24]
 81035be:	4013      	ands	r3, r2
 81035c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 81035c2:	683b      	ldr	r3, [r7, #0]
 81035c4:	685b      	ldr	r3, [r3, #4]
 81035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81035ca:	2b00      	cmp	r3, #0
 81035cc:	d003      	beq.n	81035d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81035ce:	69ba      	ldr	r2, [r7, #24]
 81035d0:	693b      	ldr	r3, [r7, #16]
 81035d2:	4313      	orrs	r3, r2
 81035d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81035d6:	697b      	ldr	r3, [r7, #20]
 81035d8:	69ba      	ldr	r2, [r7, #24]
 81035da:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81035dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81035e0:	681b      	ldr	r3, [r3, #0]
 81035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81035e4:	693b      	ldr	r3, [r7, #16]
 81035e6:	43db      	mvns	r3, r3
 81035e8:	69ba      	ldr	r2, [r7, #24]
 81035ea:	4013      	ands	r3, r2
 81035ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81035ee:	683b      	ldr	r3, [r7, #0]
 81035f0:	685b      	ldr	r3, [r3, #4]
 81035f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81035f6:	2b00      	cmp	r3, #0
 81035f8:	d003      	beq.n	8103602 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81035fa:	69ba      	ldr	r2, [r7, #24]
 81035fc:	693b      	ldr	r3, [r7, #16]
 81035fe:	4313      	orrs	r3, r2
 8103600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103606:	69bb      	ldr	r3, [r7, #24]
 8103608:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810360a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810360e:	685b      	ldr	r3, [r3, #4]
 8103610:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103612:	693b      	ldr	r3, [r7, #16]
 8103614:	43db      	mvns	r3, r3
 8103616:	69ba      	ldr	r2, [r7, #24]
 8103618:	4013      	ands	r3, r2
 810361a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 810361c:	683b      	ldr	r3, [r7, #0]
 810361e:	685b      	ldr	r3, [r3, #4]
 8103620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103624:	2b00      	cmp	r3, #0
 8103626:	d003      	beq.n	8103630 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8103628:	69ba      	ldr	r2, [r7, #24]
 810362a:	693b      	ldr	r3, [r7, #16]
 810362c:	4313      	orrs	r3, r2
 810362e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103630:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103634:	69bb      	ldr	r3, [r7, #24]
 8103636:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8103638:	69fb      	ldr	r3, [r7, #28]
 810363a:	3301      	adds	r3, #1
 810363c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810363e:	683b      	ldr	r3, [r7, #0]
 8103640:	681a      	ldr	r2, [r3, #0]
 8103642:	69fb      	ldr	r3, [r7, #28]
 8103644:	fa22 f303 	lsr.w	r3, r2, r3
 8103648:	2b00      	cmp	r3, #0
 810364a:	f47f ae63 	bne.w	8103314 <HAL_GPIO_Init+0x14>
  }
}
 810364e:	bf00      	nop
 8103650:	bf00      	nop
 8103652:	3724      	adds	r7, #36	; 0x24
 8103654:	46bd      	mov	sp, r7
 8103656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810365a:	4770      	bx	lr
 810365c:	58000400 	.word	0x58000400

08103660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103660:	b480      	push	{r7}
 8103662:	b083      	sub	sp, #12
 8103664:	af00      	add	r7, sp, #0
 8103666:	6078      	str	r0, [r7, #4]
 8103668:	460b      	mov	r3, r1
 810366a:	807b      	strh	r3, [r7, #2]
 810366c:	4613      	mov	r3, r2
 810366e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103670:	787b      	ldrb	r3, [r7, #1]
 8103672:	2b00      	cmp	r3, #0
 8103674:	d003      	beq.n	810367e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103676:	887a      	ldrh	r2, [r7, #2]
 8103678:	687b      	ldr	r3, [r7, #4]
 810367a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810367c:	e003      	b.n	8103686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810367e:	887b      	ldrh	r3, [r7, #2]
 8103680:	041a      	lsls	r2, r3, #16
 8103682:	687b      	ldr	r3, [r7, #4]
 8103684:	619a      	str	r2, [r3, #24]
}
 8103686:	bf00      	nop
 8103688:	370c      	adds	r7, #12
 810368a:	46bd      	mov	sp, r7
 810368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103690:	4770      	bx	lr

08103692 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8103692:	b480      	push	{r7}
 8103694:	b083      	sub	sp, #12
 8103696:	af00      	add	r7, sp, #0
 8103698:	6078      	str	r0, [r7, #4]
 810369a:	460b      	mov	r3, r1
 810369c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	695a      	ldr	r2, [r3, #20]
 81036a2:	887b      	ldrh	r3, [r7, #2]
 81036a4:	401a      	ands	r2, r3
 81036a6:	887b      	ldrh	r3, [r7, #2]
 81036a8:	429a      	cmp	r2, r3
 81036aa:	d104      	bne.n	81036b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 81036ac:	887b      	ldrh	r3, [r7, #2]
 81036ae:	041a      	lsls	r2, r3, #16
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 81036b4:	e002      	b.n	81036bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 81036b6:	887a      	ldrh	r2, [r7, #2]
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	619a      	str	r2, [r3, #24]
}
 81036bc:	bf00      	nop
 81036be:	370c      	adds	r7, #12
 81036c0:	46bd      	mov	sp, r7
 81036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036c6:	4770      	bx	lr

081036c8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81036c8:	b480      	push	{r7}
 81036ca:	b083      	sub	sp, #12
 81036cc:	af00      	add	r7, sp, #0
 81036ce:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81036d0:	4b05      	ldr	r3, [pc, #20]	; (81036e8 <HAL_HSEM_ActivateNotification+0x20>)
 81036d2:	681a      	ldr	r2, [r3, #0]
 81036d4:	4904      	ldr	r1, [pc, #16]	; (81036e8 <HAL_HSEM_ActivateNotification+0x20>)
 81036d6:	687b      	ldr	r3, [r7, #4]
 81036d8:	4313      	orrs	r3, r2
 81036da:	600b      	str	r3, [r1, #0]
#endif
}
 81036dc:	bf00      	nop
 81036de:	370c      	adds	r7, #12
 81036e0:	46bd      	mov	sp, r7
 81036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036e6:	4770      	bx	lr
 81036e8:	58026510 	.word	0x58026510

081036ec <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81036ec:	b580      	push	{r7, lr}
 81036ee:	b084      	sub	sp, #16
 81036f0:	af00      	add	r7, sp, #0
 81036f2:	60f8      	str	r0, [r7, #12]
 81036f4:	460b      	mov	r3, r1
 81036f6:	607a      	str	r2, [r7, #4]
 81036f8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81036fa:	4b37      	ldr	r3, [pc, #220]	; (81037d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81036fc:	681b      	ldr	r3, [r3, #0]
 81036fe:	f023 0201 	bic.w	r2, r3, #1
 8103702:	4935      	ldr	r1, [pc, #212]	; (81037d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103704:	68fb      	ldr	r3, [r7, #12]
 8103706:	4313      	orrs	r3, r2
 8103708:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810370a:	687b      	ldr	r3, [r7, #4]
 810370c:	2b00      	cmp	r3, #0
 810370e:	d123      	bne.n	8103758 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103710:	f7ff fde2 	bl	81032d8 <HAL_GetCurrentCPUID>
 8103714:	4603      	mov	r3, r0
 8103716:	2b03      	cmp	r3, #3
 8103718:	d158      	bne.n	81037cc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810371a:	4b2f      	ldr	r3, [pc, #188]	; (81037d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810371c:	691b      	ldr	r3, [r3, #16]
 810371e:	4a2e      	ldr	r2, [pc, #184]	; (81037d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103720:	f023 0301 	bic.w	r3, r3, #1
 8103724:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103726:	4b2d      	ldr	r3, [pc, #180]	; (81037dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103728:	691b      	ldr	r3, [r3, #16]
 810372a:	4a2c      	ldr	r2, [pc, #176]	; (81037dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810372c:	f043 0304 	orr.w	r3, r3, #4
 8103730:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103732:	f3bf 8f4f 	dsb	sy
}
 8103736:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103738:	f3bf 8f6f 	isb	sy
}
 810373c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810373e:	7afb      	ldrb	r3, [r7, #11]
 8103740:	2b01      	cmp	r3, #1
 8103742:	d101      	bne.n	8103748 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103744:	bf30      	wfi
 8103746:	e000      	b.n	810374a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103748:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810374a:	4b24      	ldr	r3, [pc, #144]	; (81037dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810374c:	691b      	ldr	r3, [r3, #16]
 810374e:	4a23      	ldr	r2, [pc, #140]	; (81037dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103750:	f023 0304 	bic.w	r3, r3, #4
 8103754:	6113      	str	r3, [r2, #16]
 8103756:	e03c      	b.n	81037d2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103758:	687b      	ldr	r3, [r7, #4]
 810375a:	2b01      	cmp	r3, #1
 810375c:	d123      	bne.n	81037a6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810375e:	f7ff fdbb 	bl	81032d8 <HAL_GetCurrentCPUID>
 8103762:	4603      	mov	r3, r0
 8103764:	2b01      	cmp	r3, #1
 8103766:	d133      	bne.n	81037d0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103768:	4b1b      	ldr	r3, [pc, #108]	; (81037d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810376a:	695b      	ldr	r3, [r3, #20]
 810376c:	4a1a      	ldr	r2, [pc, #104]	; (81037d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 810376e:	f023 0302 	bic.w	r3, r3, #2
 8103772:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103774:	4b19      	ldr	r3, [pc, #100]	; (81037dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103776:	691b      	ldr	r3, [r3, #16]
 8103778:	4a18      	ldr	r2, [pc, #96]	; (81037dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810377a:	f043 0304 	orr.w	r3, r3, #4
 810377e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103780:	f3bf 8f4f 	dsb	sy
}
 8103784:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103786:	f3bf 8f6f 	isb	sy
}
 810378a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810378c:	7afb      	ldrb	r3, [r7, #11]
 810378e:	2b01      	cmp	r3, #1
 8103790:	d101      	bne.n	8103796 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103792:	bf30      	wfi
 8103794:	e000      	b.n	8103798 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103796:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103798:	4b10      	ldr	r3, [pc, #64]	; (81037dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810379a:	691b      	ldr	r3, [r3, #16]
 810379c:	4a0f      	ldr	r2, [pc, #60]	; (81037dc <HAL_PWREx_EnterSTOPMode+0xf0>)
 810379e:	f023 0304 	bic.w	r3, r3, #4
 81037a2:	6113      	str	r3, [r2, #16]
 81037a4:	e015      	b.n	81037d2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81037a6:	f7ff fd97 	bl	81032d8 <HAL_GetCurrentCPUID>
 81037aa:	4603      	mov	r3, r0
 81037ac:	2b03      	cmp	r3, #3
 81037ae:	d106      	bne.n	81037be <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81037b0:	4b09      	ldr	r3, [pc, #36]	; (81037d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81037b2:	691b      	ldr	r3, [r3, #16]
 81037b4:	4a08      	ldr	r2, [pc, #32]	; (81037d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81037b6:	f023 0304 	bic.w	r3, r3, #4
 81037ba:	6113      	str	r3, [r2, #16]
 81037bc:	e009      	b.n	81037d2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81037be:	4b06      	ldr	r3, [pc, #24]	; (81037d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81037c0:	695b      	ldr	r3, [r3, #20]
 81037c2:	4a05      	ldr	r2, [pc, #20]	; (81037d8 <HAL_PWREx_EnterSTOPMode+0xec>)
 81037c4:	f023 0304 	bic.w	r3, r3, #4
 81037c8:	6153      	str	r3, [r2, #20]
 81037ca:	e002      	b.n	81037d2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81037cc:	bf00      	nop
 81037ce:	e000      	b.n	81037d2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81037d0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81037d2:	3710      	adds	r7, #16
 81037d4:	46bd      	mov	sp, r7
 81037d6:	bd80      	pop	{r7, pc}
 81037d8:	58024800 	.word	0x58024800
 81037dc:	e000ed00 	.word	0xe000ed00

081037e0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81037e0:	b580      	push	{r7, lr}
 81037e2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81037e4:	f7ff fd78 	bl	81032d8 <HAL_GetCurrentCPUID>
 81037e8:	4603      	mov	r3, r0
 81037ea:	2b03      	cmp	r3, #3
 81037ec:	d101      	bne.n	81037f2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81037ee:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81037f0:	e001      	b.n	81037f6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81037f2:	bf40      	sev
    __WFE ();
 81037f4:	bf20      	wfe
}
 81037f6:	bf00      	nop
 81037f8:	bd80      	pop	{r7, pc}
	...

081037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81037fc:	b480      	push	{r7}
 81037fe:	b089      	sub	sp, #36	; 0x24
 8103800:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103802:	4bb3      	ldr	r3, [pc, #716]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103804:	691b      	ldr	r3, [r3, #16]
 8103806:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810380a:	2b18      	cmp	r3, #24
 810380c:	f200 8155 	bhi.w	8103aba <HAL_RCC_GetSysClockFreq+0x2be>
 8103810:	a201      	add	r2, pc, #4	; (adr r2, 8103818 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103816:	bf00      	nop
 8103818:	0810387d 	.word	0x0810387d
 810381c:	08103abb 	.word	0x08103abb
 8103820:	08103abb 	.word	0x08103abb
 8103824:	08103abb 	.word	0x08103abb
 8103828:	08103abb 	.word	0x08103abb
 810382c:	08103abb 	.word	0x08103abb
 8103830:	08103abb 	.word	0x08103abb
 8103834:	08103abb 	.word	0x08103abb
 8103838:	081038a3 	.word	0x081038a3
 810383c:	08103abb 	.word	0x08103abb
 8103840:	08103abb 	.word	0x08103abb
 8103844:	08103abb 	.word	0x08103abb
 8103848:	08103abb 	.word	0x08103abb
 810384c:	08103abb 	.word	0x08103abb
 8103850:	08103abb 	.word	0x08103abb
 8103854:	08103abb 	.word	0x08103abb
 8103858:	081038a9 	.word	0x081038a9
 810385c:	08103abb 	.word	0x08103abb
 8103860:	08103abb 	.word	0x08103abb
 8103864:	08103abb 	.word	0x08103abb
 8103868:	08103abb 	.word	0x08103abb
 810386c:	08103abb 	.word	0x08103abb
 8103870:	08103abb 	.word	0x08103abb
 8103874:	08103abb 	.word	0x08103abb
 8103878:	081038af 	.word	0x081038af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810387c:	4b94      	ldr	r3, [pc, #592]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810387e:	681b      	ldr	r3, [r3, #0]
 8103880:	f003 0320 	and.w	r3, r3, #32
 8103884:	2b00      	cmp	r3, #0
 8103886:	d009      	beq.n	810389c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103888:	4b91      	ldr	r3, [pc, #580]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	08db      	lsrs	r3, r3, #3
 810388e:	f003 0303 	and.w	r3, r3, #3
 8103892:	4a90      	ldr	r2, [pc, #576]	; (8103ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103894:	fa22 f303 	lsr.w	r3, r2, r3
 8103898:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810389a:	e111      	b.n	8103ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810389c:	4b8d      	ldr	r3, [pc, #564]	; (8103ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810389e:	61bb      	str	r3, [r7, #24]
    break;
 81038a0:	e10e      	b.n	8103ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 81038a2:	4b8d      	ldr	r3, [pc, #564]	; (8103ad8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81038a4:	61bb      	str	r3, [r7, #24]
    break;
 81038a6:	e10b      	b.n	8103ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 81038a8:	4b8c      	ldr	r3, [pc, #560]	; (8103adc <HAL_RCC_GetSysClockFreq+0x2e0>)
 81038aa:	61bb      	str	r3, [r7, #24]
    break;
 81038ac:	e108      	b.n	8103ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81038ae:	4b88      	ldr	r3, [pc, #544]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81038b2:	f003 0303 	and.w	r3, r3, #3
 81038b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81038b8:	4b85      	ldr	r3, [pc, #532]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81038bc:	091b      	lsrs	r3, r3, #4
 81038be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81038c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81038c4:	4b82      	ldr	r3, [pc, #520]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038c8:	f003 0301 	and.w	r3, r3, #1
 81038cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81038ce:	4b80      	ldr	r3, [pc, #512]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81038d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81038d2:	08db      	lsrs	r3, r3, #3
 81038d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81038d8:	68fa      	ldr	r2, [r7, #12]
 81038da:	fb02 f303 	mul.w	r3, r2, r3
 81038de:	ee07 3a90 	vmov	s15, r3
 81038e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81038ea:	693b      	ldr	r3, [r7, #16]
 81038ec:	2b00      	cmp	r3, #0
 81038ee:	f000 80e1 	beq.w	8103ab4 <HAL_RCC_GetSysClockFreq+0x2b8>
 81038f2:	697b      	ldr	r3, [r7, #20]
 81038f4:	2b02      	cmp	r3, #2
 81038f6:	f000 8083 	beq.w	8103a00 <HAL_RCC_GetSysClockFreq+0x204>
 81038fa:	697b      	ldr	r3, [r7, #20]
 81038fc:	2b02      	cmp	r3, #2
 81038fe:	f200 80a1 	bhi.w	8103a44 <HAL_RCC_GetSysClockFreq+0x248>
 8103902:	697b      	ldr	r3, [r7, #20]
 8103904:	2b00      	cmp	r3, #0
 8103906:	d003      	beq.n	8103910 <HAL_RCC_GetSysClockFreq+0x114>
 8103908:	697b      	ldr	r3, [r7, #20]
 810390a:	2b01      	cmp	r3, #1
 810390c:	d056      	beq.n	81039bc <HAL_RCC_GetSysClockFreq+0x1c0>
 810390e:	e099      	b.n	8103a44 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103910:	4b6f      	ldr	r3, [pc, #444]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103912:	681b      	ldr	r3, [r3, #0]
 8103914:	f003 0320 	and.w	r3, r3, #32
 8103918:	2b00      	cmp	r3, #0
 810391a:	d02d      	beq.n	8103978 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810391c:	4b6c      	ldr	r3, [pc, #432]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810391e:	681b      	ldr	r3, [r3, #0]
 8103920:	08db      	lsrs	r3, r3, #3
 8103922:	f003 0303 	and.w	r3, r3, #3
 8103926:	4a6b      	ldr	r2, [pc, #428]	; (8103ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103928:	fa22 f303 	lsr.w	r3, r2, r3
 810392c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	ee07 3a90 	vmov	s15, r3
 8103934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103938:	693b      	ldr	r3, [r7, #16]
 810393a:	ee07 3a90 	vmov	s15, r3
 810393e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103946:	4b62      	ldr	r3, [pc, #392]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810394e:	ee07 3a90 	vmov	s15, r3
 8103952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103956:	ed97 6a02 	vldr	s12, [r7, #8]
 810395a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810395e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810396a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103972:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103976:	e087      	b.n	8103a88 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103978:	693b      	ldr	r3, [r7, #16]
 810397a:	ee07 3a90 	vmov	s15, r3
 810397e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103982:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103ae4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810398a:	4b51      	ldr	r3, [pc, #324]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810398c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810398e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103992:	ee07 3a90 	vmov	s15, r3
 8103996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810399a:	ed97 6a02 	vldr	s12, [r7, #8]
 810399e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81039a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81039a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81039aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81039ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81039ba:	e065      	b.n	8103a88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81039bc:	693b      	ldr	r3, [r7, #16]
 81039be:	ee07 3a90 	vmov	s15, r3
 81039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81039c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103ae8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81039ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81039ce:	4b40      	ldr	r3, [pc, #256]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81039d6:	ee07 3a90 	vmov	s15, r3
 81039da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81039de:	ed97 6a02 	vldr	s12, [r7, #8]
 81039e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81039e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81039ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81039ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81039f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81039f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81039fe:	e043      	b.n	8103a88 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103a00:	693b      	ldr	r3, [r7, #16]
 8103a02:	ee07 3a90 	vmov	s15, r3
 8103a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103aec <HAL_RCC_GetSysClockFreq+0x2f0>
 8103a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103a12:	4b2f      	ldr	r3, [pc, #188]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103a1a:	ee07 3a90 	vmov	s15, r3
 8103a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8103a26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103a3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103a42:	e021      	b.n	8103a88 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103a44:	693b      	ldr	r3, [r7, #16]
 8103a46:	ee07 3a90 	vmov	s15, r3
 8103a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103ae8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103a56:	4b1e      	ldr	r3, [pc, #120]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103a5e:	ee07 3a90 	vmov	s15, r3
 8103a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8103a6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103a82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103a86:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103a88:	4b11      	ldr	r3, [pc, #68]	; (8103ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103a8c:	0a5b      	lsrs	r3, r3, #9
 8103a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103a92:	3301      	adds	r3, #1
 8103a94:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103a96:	683b      	ldr	r3, [r7, #0]
 8103a98:	ee07 3a90 	vmov	s15, r3
 8103a9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8103aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103aac:	ee17 3a90 	vmov	r3, s15
 8103ab0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103ab2:	e005      	b.n	8103ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103ab4:	2300      	movs	r3, #0
 8103ab6:	61bb      	str	r3, [r7, #24]
    break;
 8103ab8:	e002      	b.n	8103ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103aba:	4b07      	ldr	r3, [pc, #28]	; (8103ad8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103abc:	61bb      	str	r3, [r7, #24]
    break;
 8103abe:	bf00      	nop
  }

  return sysclockfreq;
 8103ac0:	69bb      	ldr	r3, [r7, #24]
}
 8103ac2:	4618      	mov	r0, r3
 8103ac4:	3724      	adds	r7, #36	; 0x24
 8103ac6:	46bd      	mov	sp, r7
 8103ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103acc:	4770      	bx	lr
 8103ace:	bf00      	nop
 8103ad0:	58024400 	.word	0x58024400
 8103ad4:	03d09000 	.word	0x03d09000
 8103ad8:	003d0900 	.word	0x003d0900
 8103adc:	007a1200 	.word	0x007a1200
 8103ae0:	46000000 	.word	0x46000000
 8103ae4:	4c742400 	.word	0x4c742400
 8103ae8:	4a742400 	.word	0x4a742400
 8103aec:	4af42400 	.word	0x4af42400

08103af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103af0:	b580      	push	{r7, lr}
 8103af2:	b082      	sub	sp, #8
 8103af4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103af6:	f7ff fe81 	bl	81037fc <HAL_RCC_GetSysClockFreq>
 8103afa:	4602      	mov	r2, r0
 8103afc:	4b11      	ldr	r3, [pc, #68]	; (8103b44 <HAL_RCC_GetHCLKFreq+0x54>)
 8103afe:	699b      	ldr	r3, [r3, #24]
 8103b00:	0a1b      	lsrs	r3, r3, #8
 8103b02:	f003 030f 	and.w	r3, r3, #15
 8103b06:	4910      	ldr	r1, [pc, #64]	; (8103b48 <HAL_RCC_GetHCLKFreq+0x58>)
 8103b08:	5ccb      	ldrb	r3, [r1, r3]
 8103b0a:	f003 031f 	and.w	r3, r3, #31
 8103b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8103b12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103b14:	4b0b      	ldr	r3, [pc, #44]	; (8103b44 <HAL_RCC_GetHCLKFreq+0x54>)
 8103b16:	699b      	ldr	r3, [r3, #24]
 8103b18:	f003 030f 	and.w	r3, r3, #15
 8103b1c:	4a0a      	ldr	r2, [pc, #40]	; (8103b48 <HAL_RCC_GetHCLKFreq+0x58>)
 8103b1e:	5cd3      	ldrb	r3, [r2, r3]
 8103b20:	f003 031f 	and.w	r3, r3, #31
 8103b24:	687a      	ldr	r2, [r7, #4]
 8103b26:	fa22 f303 	lsr.w	r3, r2, r3
 8103b2a:	4a08      	ldr	r2, [pc, #32]	; (8103b4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103b2c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103b2e:	4b07      	ldr	r3, [pc, #28]	; (8103b4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103b30:	681b      	ldr	r3, [r3, #0]
 8103b32:	4a07      	ldr	r2, [pc, #28]	; (8103b50 <HAL_RCC_GetHCLKFreq+0x60>)
 8103b34:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103b36:	4b05      	ldr	r3, [pc, #20]	; (8103b4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8103b38:	681b      	ldr	r3, [r3, #0]
}
 8103b3a:	4618      	mov	r0, r3
 8103b3c:	3708      	adds	r7, #8
 8103b3e:	46bd      	mov	sp, r7
 8103b40:	bd80      	pop	{r7, pc}
 8103b42:	bf00      	nop
 8103b44:	58024400 	.word	0x58024400
 8103b48:	081042a4 	.word	0x081042a4
 8103b4c:	1000180c 	.word	0x1000180c
 8103b50:	10001808 	.word	0x10001808

08103b54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8103b54:	b580      	push	{r7, lr}
 8103b56:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103b58:	f7ff ffca 	bl	8103af0 <HAL_RCC_GetHCLKFreq>
 8103b5c:	4602      	mov	r2, r0
 8103b5e:	4b06      	ldr	r3, [pc, #24]	; (8103b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103b60:	69db      	ldr	r3, [r3, #28]
 8103b62:	091b      	lsrs	r3, r3, #4
 8103b64:	f003 0307 	and.w	r3, r3, #7
 8103b68:	4904      	ldr	r1, [pc, #16]	; (8103b7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8103b6a:	5ccb      	ldrb	r3, [r1, r3]
 8103b6c:	f003 031f 	and.w	r3, r3, #31
 8103b70:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8103b74:	4618      	mov	r0, r3
 8103b76:	bd80      	pop	{r7, pc}
 8103b78:	58024400 	.word	0x58024400
 8103b7c:	081042a4 	.word	0x081042a4

08103b80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8103b80:	b480      	push	{r7}
 8103b82:	b083      	sub	sp, #12
 8103b84:	af00      	add	r7, sp, #0
 8103b86:	6078      	str	r0, [r7, #4]
 8103b88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8103b8a:	687b      	ldr	r3, [r7, #4]
 8103b8c:	223f      	movs	r2, #63	; 0x3f
 8103b8e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8103b90:	4b1a      	ldr	r3, [pc, #104]	; (8103bfc <HAL_RCC_GetClockConfig+0x7c>)
 8103b92:	691b      	ldr	r3, [r3, #16]
 8103b94:	f003 0207 	and.w	r2, r3, #7
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8103b9c:	4b17      	ldr	r3, [pc, #92]	; (8103bfc <HAL_RCC_GetClockConfig+0x7c>)
 8103b9e:	699b      	ldr	r3, [r3, #24]
 8103ba0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8103ba8:	4b14      	ldr	r3, [pc, #80]	; (8103bfc <HAL_RCC_GetClockConfig+0x7c>)
 8103baa:	699b      	ldr	r3, [r3, #24]
 8103bac:	f003 020f 	and.w	r2, r3, #15
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8103bb4:	4b11      	ldr	r3, [pc, #68]	; (8103bfc <HAL_RCC_GetClockConfig+0x7c>)
 8103bb6:	699b      	ldr	r3, [r3, #24]
 8103bb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8103bc0:	4b0e      	ldr	r3, [pc, #56]	; (8103bfc <HAL_RCC_GetClockConfig+0x7c>)
 8103bc2:	69db      	ldr	r3, [r3, #28]
 8103bc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103bc8:	687b      	ldr	r3, [r7, #4]
 8103bca:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8103bcc:	4b0b      	ldr	r3, [pc, #44]	; (8103bfc <HAL_RCC_GetClockConfig+0x7c>)
 8103bce:	69db      	ldr	r3, [r3, #28]
 8103bd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8103bd8:	4b08      	ldr	r3, [pc, #32]	; (8103bfc <HAL_RCC_GetClockConfig+0x7c>)
 8103bda:	6a1b      	ldr	r3, [r3, #32]
 8103bdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103be0:	687b      	ldr	r3, [r7, #4]
 8103be2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8103be4:	4b06      	ldr	r3, [pc, #24]	; (8103c00 <HAL_RCC_GetClockConfig+0x80>)
 8103be6:	681b      	ldr	r3, [r3, #0]
 8103be8:	f003 020f 	and.w	r2, r3, #15
 8103bec:	683b      	ldr	r3, [r7, #0]
 8103bee:	601a      	str	r2, [r3, #0]
}
 8103bf0:	bf00      	nop
 8103bf2:	370c      	adds	r7, #12
 8103bf4:	46bd      	mov	sp, r7
 8103bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bfa:	4770      	bx	lr
 8103bfc:	58024400 	.word	0x58024400
 8103c00:	52002000 	.word	0x52002000

08103c04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8103c04:	b580      	push	{r7, lr}
 8103c06:	b082      	sub	sp, #8
 8103c08:	af00      	add	r7, sp, #0
 8103c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8103c0c:	687b      	ldr	r3, [r7, #4]
 8103c0e:	2b00      	cmp	r3, #0
 8103c10:	d101      	bne.n	8103c16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8103c12:	2301      	movs	r3, #1
 8103c14:	e049      	b.n	8103caa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103c1c:	b2db      	uxtb	r3, r3
 8103c1e:	2b00      	cmp	r3, #0
 8103c20:	d106      	bne.n	8103c30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8103c22:	687b      	ldr	r3, [r7, #4]
 8103c24:	2200      	movs	r2, #0
 8103c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103c2a:	6878      	ldr	r0, [r7, #4]
 8103c2c:	f000 f841 	bl	8103cb2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103c30:	687b      	ldr	r3, [r7, #4]
 8103c32:	2202      	movs	r2, #2
 8103c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103c38:	687b      	ldr	r3, [r7, #4]
 8103c3a:	681a      	ldr	r2, [r3, #0]
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	3304      	adds	r3, #4
 8103c40:	4619      	mov	r1, r3
 8103c42:	4610      	mov	r0, r2
 8103c44:	f000 f9be 	bl	8103fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103c48:	687b      	ldr	r3, [r7, #4]
 8103c4a:	2201      	movs	r2, #1
 8103c4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	2201      	movs	r2, #1
 8103c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103c58:	687b      	ldr	r3, [r7, #4]
 8103c5a:	2201      	movs	r2, #1
 8103c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	2201      	movs	r2, #1
 8103c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	2201      	movs	r2, #1
 8103c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	2201      	movs	r2, #1
 8103c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	2201      	movs	r2, #1
 8103c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103c80:	687b      	ldr	r3, [r7, #4]
 8103c82:	2201      	movs	r2, #1
 8103c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	2201      	movs	r2, #1
 8103c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103c90:	687b      	ldr	r3, [r7, #4]
 8103c92:	2201      	movs	r2, #1
 8103c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	2201      	movs	r2, #1
 8103c9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	2201      	movs	r2, #1
 8103ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103ca8:	2300      	movs	r3, #0
}
 8103caa:	4618      	mov	r0, r3
 8103cac:	3708      	adds	r7, #8
 8103cae:	46bd      	mov	sp, r7
 8103cb0:	bd80      	pop	{r7, pc}

08103cb2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8103cb2:	b480      	push	{r7}
 8103cb4:	b083      	sub	sp, #12
 8103cb6:	af00      	add	r7, sp, #0
 8103cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8103cba:	bf00      	nop
 8103cbc:	370c      	adds	r7, #12
 8103cbe:	46bd      	mov	sp, r7
 8103cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cc4:	4770      	bx	lr
	...

08103cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8103cc8:	b480      	push	{r7}
 8103cca:	b085      	sub	sp, #20
 8103ccc:	af00      	add	r7, sp, #0
 8103cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8103cd6:	b2db      	uxtb	r3, r3
 8103cd8:	2b01      	cmp	r3, #1
 8103cda:	d001      	beq.n	8103ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8103cdc:	2301      	movs	r3, #1
 8103cde:	e021      	b.n	8103d24 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	2202      	movs	r2, #2
 8103ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8103ce8:	687b      	ldr	r3, [r7, #4]
 8103cea:	681b      	ldr	r3, [r3, #0]
 8103cec:	68da      	ldr	r2, [r3, #12]
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	681b      	ldr	r3, [r3, #0]
 8103cf2:	f042 0201 	orr.w	r2, r2, #1
 8103cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	681b      	ldr	r3, [r3, #0]
 8103cfc:	689a      	ldr	r2, [r3, #8]
 8103cfe:	4b0c      	ldr	r3, [pc, #48]	; (8103d30 <HAL_TIM_Base_Start_IT+0x68>)
 8103d00:	4013      	ands	r3, r2
 8103d02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8103d04:	68fb      	ldr	r3, [r7, #12]
 8103d06:	2b06      	cmp	r3, #6
 8103d08:	d00b      	beq.n	8103d22 <HAL_TIM_Base_Start_IT+0x5a>
 8103d0a:	68fb      	ldr	r3, [r7, #12]
 8103d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103d10:	d007      	beq.n	8103d22 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	681b      	ldr	r3, [r3, #0]
 8103d16:	681a      	ldr	r2, [r3, #0]
 8103d18:	687b      	ldr	r3, [r7, #4]
 8103d1a:	681b      	ldr	r3, [r3, #0]
 8103d1c:	f042 0201 	orr.w	r2, r2, #1
 8103d20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8103d22:	2300      	movs	r3, #0
}
 8103d24:	4618      	mov	r0, r3
 8103d26:	3714      	adds	r7, #20
 8103d28:	46bd      	mov	sp, r7
 8103d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d2e:	4770      	bx	lr
 8103d30:	00010007 	.word	0x00010007

08103d34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8103d34:	b580      	push	{r7, lr}
 8103d36:	b082      	sub	sp, #8
 8103d38:	af00      	add	r7, sp, #0
 8103d3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	681b      	ldr	r3, [r3, #0]
 8103d40:	691b      	ldr	r3, [r3, #16]
 8103d42:	f003 0302 	and.w	r3, r3, #2
 8103d46:	2b02      	cmp	r3, #2
 8103d48:	d122      	bne.n	8103d90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	681b      	ldr	r3, [r3, #0]
 8103d4e:	68db      	ldr	r3, [r3, #12]
 8103d50:	f003 0302 	and.w	r3, r3, #2
 8103d54:	2b02      	cmp	r3, #2
 8103d56:	d11b      	bne.n	8103d90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	f06f 0202 	mvn.w	r2, #2
 8103d60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8103d62:	687b      	ldr	r3, [r7, #4]
 8103d64:	2201      	movs	r2, #1
 8103d66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8103d68:	687b      	ldr	r3, [r7, #4]
 8103d6a:	681b      	ldr	r3, [r3, #0]
 8103d6c:	699b      	ldr	r3, [r3, #24]
 8103d6e:	f003 0303 	and.w	r3, r3, #3
 8103d72:	2b00      	cmp	r3, #0
 8103d74:	d003      	beq.n	8103d7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8103d76:	6878      	ldr	r0, [r7, #4]
 8103d78:	f000 f905 	bl	8103f86 <HAL_TIM_IC_CaptureCallback>
 8103d7c:	e005      	b.n	8103d8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8103d7e:	6878      	ldr	r0, [r7, #4]
 8103d80:	f000 f8f7 	bl	8103f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103d84:	6878      	ldr	r0, [r7, #4]
 8103d86:	f000 f908 	bl	8103f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	2200      	movs	r2, #0
 8103d8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8103d90:	687b      	ldr	r3, [r7, #4]
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	691b      	ldr	r3, [r3, #16]
 8103d96:	f003 0304 	and.w	r3, r3, #4
 8103d9a:	2b04      	cmp	r3, #4
 8103d9c:	d122      	bne.n	8103de4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	681b      	ldr	r3, [r3, #0]
 8103da2:	68db      	ldr	r3, [r3, #12]
 8103da4:	f003 0304 	and.w	r3, r3, #4
 8103da8:	2b04      	cmp	r3, #4
 8103daa:	d11b      	bne.n	8103de4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8103dac:	687b      	ldr	r3, [r7, #4]
 8103dae:	681b      	ldr	r3, [r3, #0]
 8103db0:	f06f 0204 	mvn.w	r2, #4
 8103db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8103db6:	687b      	ldr	r3, [r7, #4]
 8103db8:	2202      	movs	r2, #2
 8103dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8103dbc:	687b      	ldr	r3, [r7, #4]
 8103dbe:	681b      	ldr	r3, [r3, #0]
 8103dc0:	699b      	ldr	r3, [r3, #24]
 8103dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103dc6:	2b00      	cmp	r3, #0
 8103dc8:	d003      	beq.n	8103dd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103dca:	6878      	ldr	r0, [r7, #4]
 8103dcc:	f000 f8db 	bl	8103f86 <HAL_TIM_IC_CaptureCallback>
 8103dd0:	e005      	b.n	8103dde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103dd2:	6878      	ldr	r0, [r7, #4]
 8103dd4:	f000 f8cd 	bl	8103f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103dd8:	6878      	ldr	r0, [r7, #4]
 8103dda:	f000 f8de 	bl	8103f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	2200      	movs	r2, #0
 8103de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	681b      	ldr	r3, [r3, #0]
 8103de8:	691b      	ldr	r3, [r3, #16]
 8103dea:	f003 0308 	and.w	r3, r3, #8
 8103dee:	2b08      	cmp	r3, #8
 8103df0:	d122      	bne.n	8103e38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	681b      	ldr	r3, [r3, #0]
 8103df6:	68db      	ldr	r3, [r3, #12]
 8103df8:	f003 0308 	and.w	r3, r3, #8
 8103dfc:	2b08      	cmp	r3, #8
 8103dfe:	d11b      	bne.n	8103e38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	681b      	ldr	r3, [r3, #0]
 8103e04:	f06f 0208 	mvn.w	r2, #8
 8103e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	2204      	movs	r2, #4
 8103e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8103e10:	687b      	ldr	r3, [r7, #4]
 8103e12:	681b      	ldr	r3, [r3, #0]
 8103e14:	69db      	ldr	r3, [r3, #28]
 8103e16:	f003 0303 	and.w	r3, r3, #3
 8103e1a:	2b00      	cmp	r3, #0
 8103e1c:	d003      	beq.n	8103e26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103e1e:	6878      	ldr	r0, [r7, #4]
 8103e20:	f000 f8b1 	bl	8103f86 <HAL_TIM_IC_CaptureCallback>
 8103e24:	e005      	b.n	8103e32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103e26:	6878      	ldr	r0, [r7, #4]
 8103e28:	f000 f8a3 	bl	8103f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103e2c:	6878      	ldr	r0, [r7, #4]
 8103e2e:	f000 f8b4 	bl	8103f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	2200      	movs	r2, #0
 8103e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	681b      	ldr	r3, [r3, #0]
 8103e3c:	691b      	ldr	r3, [r3, #16]
 8103e3e:	f003 0310 	and.w	r3, r3, #16
 8103e42:	2b10      	cmp	r3, #16
 8103e44:	d122      	bne.n	8103e8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8103e46:	687b      	ldr	r3, [r7, #4]
 8103e48:	681b      	ldr	r3, [r3, #0]
 8103e4a:	68db      	ldr	r3, [r3, #12]
 8103e4c:	f003 0310 	and.w	r3, r3, #16
 8103e50:	2b10      	cmp	r3, #16
 8103e52:	d11b      	bne.n	8103e8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	681b      	ldr	r3, [r3, #0]
 8103e58:	f06f 0210 	mvn.w	r2, #16
 8103e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103e5e:	687b      	ldr	r3, [r7, #4]
 8103e60:	2208      	movs	r2, #8
 8103e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103e64:	687b      	ldr	r3, [r7, #4]
 8103e66:	681b      	ldr	r3, [r3, #0]
 8103e68:	69db      	ldr	r3, [r3, #28]
 8103e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103e6e:	2b00      	cmp	r3, #0
 8103e70:	d003      	beq.n	8103e7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103e72:	6878      	ldr	r0, [r7, #4]
 8103e74:	f000 f887 	bl	8103f86 <HAL_TIM_IC_CaptureCallback>
 8103e78:	e005      	b.n	8103e86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103e7a:	6878      	ldr	r0, [r7, #4]
 8103e7c:	f000 f879 	bl	8103f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103e80:	6878      	ldr	r0, [r7, #4]
 8103e82:	f000 f88a 	bl	8103f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	2200      	movs	r2, #0
 8103e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8103e8c:	687b      	ldr	r3, [r7, #4]
 8103e8e:	681b      	ldr	r3, [r3, #0]
 8103e90:	691b      	ldr	r3, [r3, #16]
 8103e92:	f003 0301 	and.w	r3, r3, #1
 8103e96:	2b01      	cmp	r3, #1
 8103e98:	d10e      	bne.n	8103eb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8103e9a:	687b      	ldr	r3, [r7, #4]
 8103e9c:	681b      	ldr	r3, [r3, #0]
 8103e9e:	68db      	ldr	r3, [r3, #12]
 8103ea0:	f003 0301 	and.w	r3, r3, #1
 8103ea4:	2b01      	cmp	r3, #1
 8103ea6:	d107      	bne.n	8103eb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	f06f 0201 	mvn.w	r2, #1
 8103eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8103eb2:	6878      	ldr	r0, [r7, #4]
 8103eb4:	f7fe fe34 	bl	8102b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8103eb8:	687b      	ldr	r3, [r7, #4]
 8103eba:	681b      	ldr	r3, [r3, #0]
 8103ebc:	691b      	ldr	r3, [r3, #16]
 8103ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103ec2:	2b80      	cmp	r3, #128	; 0x80
 8103ec4:	d10e      	bne.n	8103ee4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8103ec6:	687b      	ldr	r3, [r7, #4]
 8103ec8:	681b      	ldr	r3, [r3, #0]
 8103eca:	68db      	ldr	r3, [r3, #12]
 8103ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103ed0:	2b80      	cmp	r3, #128	; 0x80
 8103ed2:	d107      	bne.n	8103ee4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8103ed4:	687b      	ldr	r3, [r7, #4]
 8103ed6:	681b      	ldr	r3, [r3, #0]
 8103ed8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8103edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8103ede:	6878      	ldr	r0, [r7, #4]
 8103ee0:	f000 f914 	bl	810410c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8103ee4:	687b      	ldr	r3, [r7, #4]
 8103ee6:	681b      	ldr	r3, [r3, #0]
 8103ee8:	691b      	ldr	r3, [r3, #16]
 8103eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103ef2:	d10e      	bne.n	8103f12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8103ef4:	687b      	ldr	r3, [r7, #4]
 8103ef6:	681b      	ldr	r3, [r3, #0]
 8103ef8:	68db      	ldr	r3, [r3, #12]
 8103efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103efe:	2b80      	cmp	r3, #128	; 0x80
 8103f00:	d107      	bne.n	8103f12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8103f02:	687b      	ldr	r3, [r7, #4]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8103f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8103f0c:	6878      	ldr	r0, [r7, #4]
 8103f0e:	f000 f907 	bl	8104120 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8103f12:	687b      	ldr	r3, [r7, #4]
 8103f14:	681b      	ldr	r3, [r3, #0]
 8103f16:	691b      	ldr	r3, [r3, #16]
 8103f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103f1c:	2b40      	cmp	r3, #64	; 0x40
 8103f1e:	d10e      	bne.n	8103f3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8103f20:	687b      	ldr	r3, [r7, #4]
 8103f22:	681b      	ldr	r3, [r3, #0]
 8103f24:	68db      	ldr	r3, [r3, #12]
 8103f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103f2a:	2b40      	cmp	r3, #64	; 0x40
 8103f2c:	d107      	bne.n	8103f3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8103f2e:	687b      	ldr	r3, [r7, #4]
 8103f30:	681b      	ldr	r3, [r3, #0]
 8103f32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8103f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103f38:	6878      	ldr	r0, [r7, #4]
 8103f3a:	f000 f838 	bl	8103fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8103f3e:	687b      	ldr	r3, [r7, #4]
 8103f40:	681b      	ldr	r3, [r3, #0]
 8103f42:	691b      	ldr	r3, [r3, #16]
 8103f44:	f003 0320 	and.w	r3, r3, #32
 8103f48:	2b20      	cmp	r3, #32
 8103f4a:	d10e      	bne.n	8103f6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	681b      	ldr	r3, [r3, #0]
 8103f50:	68db      	ldr	r3, [r3, #12]
 8103f52:	f003 0320 	and.w	r3, r3, #32
 8103f56:	2b20      	cmp	r3, #32
 8103f58:	d107      	bne.n	8103f6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8103f5a:	687b      	ldr	r3, [r7, #4]
 8103f5c:	681b      	ldr	r3, [r3, #0]
 8103f5e:	f06f 0220 	mvn.w	r2, #32
 8103f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103f64:	6878      	ldr	r0, [r7, #4]
 8103f66:	f000 f8c7 	bl	81040f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103f6a:	bf00      	nop
 8103f6c:	3708      	adds	r7, #8
 8103f6e:	46bd      	mov	sp, r7
 8103f70:	bd80      	pop	{r7, pc}

08103f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103f72:	b480      	push	{r7}
 8103f74:	b083      	sub	sp, #12
 8103f76:	af00      	add	r7, sp, #0
 8103f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8103f7a:	bf00      	nop
 8103f7c:	370c      	adds	r7, #12
 8103f7e:	46bd      	mov	sp, r7
 8103f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f84:	4770      	bx	lr

08103f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8103f86:	b480      	push	{r7}
 8103f88:	b083      	sub	sp, #12
 8103f8a:	af00      	add	r7, sp, #0
 8103f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8103f8e:	bf00      	nop
 8103f90:	370c      	adds	r7, #12
 8103f92:	46bd      	mov	sp, r7
 8103f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f98:	4770      	bx	lr

08103f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8103f9a:	b480      	push	{r7}
 8103f9c:	b083      	sub	sp, #12
 8103f9e:	af00      	add	r7, sp, #0
 8103fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8103fa2:	bf00      	nop
 8103fa4:	370c      	adds	r7, #12
 8103fa6:	46bd      	mov	sp, r7
 8103fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fac:	4770      	bx	lr

08103fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8103fae:	b480      	push	{r7}
 8103fb0:	b083      	sub	sp, #12
 8103fb2:	af00      	add	r7, sp, #0
 8103fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8103fb6:	bf00      	nop
 8103fb8:	370c      	adds	r7, #12
 8103fba:	46bd      	mov	sp, r7
 8103fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fc0:	4770      	bx	lr
	...

08103fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8103fc4:	b480      	push	{r7}
 8103fc6:	b085      	sub	sp, #20
 8103fc8:	af00      	add	r7, sp, #0
 8103fca:	6078      	str	r0, [r7, #4]
 8103fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	681b      	ldr	r3, [r3, #0]
 8103fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8103fd4:	687b      	ldr	r3, [r7, #4]
 8103fd6:	4a40      	ldr	r2, [pc, #256]	; (81040d8 <TIM_Base_SetConfig+0x114>)
 8103fd8:	4293      	cmp	r3, r2
 8103fda:	d013      	beq.n	8104004 <TIM_Base_SetConfig+0x40>
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103fe2:	d00f      	beq.n	8104004 <TIM_Base_SetConfig+0x40>
 8103fe4:	687b      	ldr	r3, [r7, #4]
 8103fe6:	4a3d      	ldr	r2, [pc, #244]	; (81040dc <TIM_Base_SetConfig+0x118>)
 8103fe8:	4293      	cmp	r3, r2
 8103fea:	d00b      	beq.n	8104004 <TIM_Base_SetConfig+0x40>
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	4a3c      	ldr	r2, [pc, #240]	; (81040e0 <TIM_Base_SetConfig+0x11c>)
 8103ff0:	4293      	cmp	r3, r2
 8103ff2:	d007      	beq.n	8104004 <TIM_Base_SetConfig+0x40>
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	4a3b      	ldr	r2, [pc, #236]	; (81040e4 <TIM_Base_SetConfig+0x120>)
 8103ff8:	4293      	cmp	r3, r2
 8103ffa:	d003      	beq.n	8104004 <TIM_Base_SetConfig+0x40>
 8103ffc:	687b      	ldr	r3, [r7, #4]
 8103ffe:	4a3a      	ldr	r2, [pc, #232]	; (81040e8 <TIM_Base_SetConfig+0x124>)
 8104000:	4293      	cmp	r3, r2
 8104002:	d108      	bne.n	8104016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8104004:	68fb      	ldr	r3, [r7, #12]
 8104006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810400a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810400c:	683b      	ldr	r3, [r7, #0]
 810400e:	685b      	ldr	r3, [r3, #4]
 8104010:	68fa      	ldr	r2, [r7, #12]
 8104012:	4313      	orrs	r3, r2
 8104014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8104016:	687b      	ldr	r3, [r7, #4]
 8104018:	4a2f      	ldr	r2, [pc, #188]	; (81040d8 <TIM_Base_SetConfig+0x114>)
 810401a:	4293      	cmp	r3, r2
 810401c:	d01f      	beq.n	810405e <TIM_Base_SetConfig+0x9a>
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104024:	d01b      	beq.n	810405e <TIM_Base_SetConfig+0x9a>
 8104026:	687b      	ldr	r3, [r7, #4]
 8104028:	4a2c      	ldr	r2, [pc, #176]	; (81040dc <TIM_Base_SetConfig+0x118>)
 810402a:	4293      	cmp	r3, r2
 810402c:	d017      	beq.n	810405e <TIM_Base_SetConfig+0x9a>
 810402e:	687b      	ldr	r3, [r7, #4]
 8104030:	4a2b      	ldr	r2, [pc, #172]	; (81040e0 <TIM_Base_SetConfig+0x11c>)
 8104032:	4293      	cmp	r3, r2
 8104034:	d013      	beq.n	810405e <TIM_Base_SetConfig+0x9a>
 8104036:	687b      	ldr	r3, [r7, #4]
 8104038:	4a2a      	ldr	r2, [pc, #168]	; (81040e4 <TIM_Base_SetConfig+0x120>)
 810403a:	4293      	cmp	r3, r2
 810403c:	d00f      	beq.n	810405e <TIM_Base_SetConfig+0x9a>
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	4a29      	ldr	r2, [pc, #164]	; (81040e8 <TIM_Base_SetConfig+0x124>)
 8104042:	4293      	cmp	r3, r2
 8104044:	d00b      	beq.n	810405e <TIM_Base_SetConfig+0x9a>
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	4a28      	ldr	r2, [pc, #160]	; (81040ec <TIM_Base_SetConfig+0x128>)
 810404a:	4293      	cmp	r3, r2
 810404c:	d007      	beq.n	810405e <TIM_Base_SetConfig+0x9a>
 810404e:	687b      	ldr	r3, [r7, #4]
 8104050:	4a27      	ldr	r2, [pc, #156]	; (81040f0 <TIM_Base_SetConfig+0x12c>)
 8104052:	4293      	cmp	r3, r2
 8104054:	d003      	beq.n	810405e <TIM_Base_SetConfig+0x9a>
 8104056:	687b      	ldr	r3, [r7, #4]
 8104058:	4a26      	ldr	r2, [pc, #152]	; (81040f4 <TIM_Base_SetConfig+0x130>)
 810405a:	4293      	cmp	r3, r2
 810405c:	d108      	bne.n	8104070 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810405e:	68fb      	ldr	r3, [r7, #12]
 8104060:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104064:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8104066:	683b      	ldr	r3, [r7, #0]
 8104068:	68db      	ldr	r3, [r3, #12]
 810406a:	68fa      	ldr	r2, [r7, #12]
 810406c:	4313      	orrs	r3, r2
 810406e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8104070:	68fb      	ldr	r3, [r7, #12]
 8104072:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8104076:	683b      	ldr	r3, [r7, #0]
 8104078:	695b      	ldr	r3, [r3, #20]
 810407a:	4313      	orrs	r3, r2
 810407c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	68fa      	ldr	r2, [r7, #12]
 8104082:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8104084:	683b      	ldr	r3, [r7, #0]
 8104086:	689a      	ldr	r2, [r3, #8]
 8104088:	687b      	ldr	r3, [r7, #4]
 810408a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810408c:	683b      	ldr	r3, [r7, #0]
 810408e:	681a      	ldr	r2, [r3, #0]
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8104094:	687b      	ldr	r3, [r7, #4]
 8104096:	4a10      	ldr	r2, [pc, #64]	; (81040d8 <TIM_Base_SetConfig+0x114>)
 8104098:	4293      	cmp	r3, r2
 810409a:	d00f      	beq.n	81040bc <TIM_Base_SetConfig+0xf8>
 810409c:	687b      	ldr	r3, [r7, #4]
 810409e:	4a12      	ldr	r2, [pc, #72]	; (81040e8 <TIM_Base_SetConfig+0x124>)
 81040a0:	4293      	cmp	r3, r2
 81040a2:	d00b      	beq.n	81040bc <TIM_Base_SetConfig+0xf8>
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	4a11      	ldr	r2, [pc, #68]	; (81040ec <TIM_Base_SetConfig+0x128>)
 81040a8:	4293      	cmp	r3, r2
 81040aa:	d007      	beq.n	81040bc <TIM_Base_SetConfig+0xf8>
 81040ac:	687b      	ldr	r3, [r7, #4]
 81040ae:	4a10      	ldr	r2, [pc, #64]	; (81040f0 <TIM_Base_SetConfig+0x12c>)
 81040b0:	4293      	cmp	r3, r2
 81040b2:	d003      	beq.n	81040bc <TIM_Base_SetConfig+0xf8>
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	4a0f      	ldr	r2, [pc, #60]	; (81040f4 <TIM_Base_SetConfig+0x130>)
 81040b8:	4293      	cmp	r3, r2
 81040ba:	d103      	bne.n	81040c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81040bc:	683b      	ldr	r3, [r7, #0]
 81040be:	691a      	ldr	r2, [r3, #16]
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81040c4:	687b      	ldr	r3, [r7, #4]
 81040c6:	2201      	movs	r2, #1
 81040c8:	615a      	str	r2, [r3, #20]
}
 81040ca:	bf00      	nop
 81040cc:	3714      	adds	r7, #20
 81040ce:	46bd      	mov	sp, r7
 81040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040d4:	4770      	bx	lr
 81040d6:	bf00      	nop
 81040d8:	40010000 	.word	0x40010000
 81040dc:	40000400 	.word	0x40000400
 81040e0:	40000800 	.word	0x40000800
 81040e4:	40000c00 	.word	0x40000c00
 81040e8:	40010400 	.word	0x40010400
 81040ec:	40014000 	.word	0x40014000
 81040f0:	40014400 	.word	0x40014400
 81040f4:	40014800 	.word	0x40014800

081040f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81040f8:	b480      	push	{r7}
 81040fa:	b083      	sub	sp, #12
 81040fc:	af00      	add	r7, sp, #0
 81040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8104100:	bf00      	nop
 8104102:	370c      	adds	r7, #12
 8104104:	46bd      	mov	sp, r7
 8104106:	f85d 7b04 	ldr.w	r7, [sp], #4
 810410a:	4770      	bx	lr

0810410c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810410c:	b480      	push	{r7}
 810410e:	b083      	sub	sp, #12
 8104110:	af00      	add	r7, sp, #0
 8104112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8104114:	bf00      	nop
 8104116:	370c      	adds	r7, #12
 8104118:	46bd      	mov	sp, r7
 810411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810411e:	4770      	bx	lr

08104120 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8104120:	b480      	push	{r7}
 8104122:	b083      	sub	sp, #12
 8104124:	af00      	add	r7, sp, #0
 8104126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8104128:	bf00      	nop
 810412a:	370c      	adds	r7, #12
 810412c:	46bd      	mov	sp, r7
 810412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104132:	4770      	bx	lr

08104134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8104134:	b480      	push	{r7}
 8104136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8104138:	4b0b      	ldr	r3, [pc, #44]	; (8104168 <SystemInit+0x34>)
 810413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810413e:	4a0a      	ldr	r2, [pc, #40]	; (8104168 <SystemInit+0x34>)
 8104140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8104144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8104148:	4b07      	ldr	r3, [pc, #28]	; (8104168 <SystemInit+0x34>)
 810414a:	691b      	ldr	r3, [r3, #16]
 810414c:	4a06      	ldr	r2, [pc, #24]	; (8104168 <SystemInit+0x34>)
 810414e:	f043 0310 	orr.w	r3, r3, #16
 8104152:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8104154:	4b04      	ldr	r3, [pc, #16]	; (8104168 <SystemInit+0x34>)
 8104156:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810415a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810415c:	bf00      	nop
 810415e:	46bd      	mov	sp, r7
 8104160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104164:	4770      	bx	lr
 8104166:	bf00      	nop
 8104168:	e000ed00 	.word	0xe000ed00

0810416c <__libc_init_array>:
 810416c:	b570      	push	{r4, r5, r6, lr}
 810416e:	4d0d      	ldr	r5, [pc, #52]	; (81041a4 <__libc_init_array+0x38>)
 8104170:	4c0d      	ldr	r4, [pc, #52]	; (81041a8 <__libc_init_array+0x3c>)
 8104172:	1b64      	subs	r4, r4, r5
 8104174:	10a4      	asrs	r4, r4, #2
 8104176:	2600      	movs	r6, #0
 8104178:	42a6      	cmp	r6, r4
 810417a:	d109      	bne.n	8104190 <__libc_init_array+0x24>
 810417c:	4d0b      	ldr	r5, [pc, #44]	; (81041ac <__libc_init_array+0x40>)
 810417e:	4c0c      	ldr	r4, [pc, #48]	; (81041b0 <__libc_init_array+0x44>)
 8104180:	f000 f818 	bl	81041b4 <_init>
 8104184:	1b64      	subs	r4, r4, r5
 8104186:	10a4      	asrs	r4, r4, #2
 8104188:	2600      	movs	r6, #0
 810418a:	42a6      	cmp	r6, r4
 810418c:	d105      	bne.n	810419a <__libc_init_array+0x2e>
 810418e:	bd70      	pop	{r4, r5, r6, pc}
 8104190:	f855 3b04 	ldr.w	r3, [r5], #4
 8104194:	4798      	blx	r3
 8104196:	3601      	adds	r6, #1
 8104198:	e7ee      	b.n	8104178 <__libc_init_array+0xc>
 810419a:	f855 3b04 	ldr.w	r3, [r5], #4
 810419e:	4798      	blx	r3
 81041a0:	3601      	adds	r6, #1
 81041a2:	e7f2      	b.n	810418a <__libc_init_array+0x1e>
 81041a4:	081042b4 	.word	0x081042b4
 81041a8:	081042b4 	.word	0x081042b4
 81041ac:	081042b4 	.word	0x081042b4
 81041b0:	081042b8 	.word	0x081042b8

081041b4 <_init>:
 81041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81041b6:	bf00      	nop
 81041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81041ba:	bc08      	pop	{r3}
 81041bc:	469e      	mov	lr, r3
 81041be:	4770      	bx	lr

081041c0 <_fini>:
 81041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81041c2:	bf00      	nop
 81041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81041c6:	bc08      	pop	{r3}
 81041c8:	469e      	mov	lr, r3
 81041ca:	4770      	bx	lr
