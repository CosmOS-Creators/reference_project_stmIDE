
../../../../../../Cosmos/generated/build/system/CM4/bin/CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .lwip_section 00000200  30040000  30040000  00080000  2**0
                  ALLOC
  2 .program_default_CM7_section_init 00000008  20001800  08100298  00021800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .program_default_CM7_section_noInit 00000000  20001808  20001808  00070308  2**0
                  CONTENTS
  4 .program_blinking_led_CM7_section_init 0000001c  20001c00  081002a0  00021c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .program_blinking_led_CM7_section_noInit 00000000  20001c1c  20001c1c  00070308  2**0
                  CONTENTS
  6 .program_default_CM4_section_init 00000008  10001400  081002bc  00031400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .program_default_CM4_section_noInit 00000000  10001408  10001408  00070308  2**0
                  CONTENTS
  8 .program_blinking_led_CM4_section_init 00000018  10001800  081002c4  00031800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .program_blinking_led_CM4_section_noInit 00000000  10001818  10001818  00070308  2**0
                  CONTENTS
 10 .program_logger_section_init 00000008  20002000  081002dc  00032000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .program_logger_section_noInit 00000104  20002008  081002e4  00032008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .os_section_consts 00001000  38000000  081003e8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .os_section_vars 00000800  38008000  081013e8  00048000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .os_section_funcs 00006418  08101be8  08101be8  00051be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .application_section_funcs_CM7 00000444  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .application_section_funcs_CM4 00000308  08180000  08180000  00070000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text         000040d8  08108000  08108000  00058000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .rodata       00000248  0810c0d8  0810c0d8  0005c0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .ARM.extab    000000a4  0810c320  0810c320  0005c320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .ARM          00000120  0810c3c4  0810c3c4  0005c3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 21 .init_array   00000004  0810c4e4  0810c4e4  0005c4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .fini_array   00000004  0810c4e8  0810c4e8  0005c4e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 23 .data         0000007c  30040000  0810c4ec  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss          00000084  3004007c  0810c568  0006007c  2**2
                  ALLOC
 25 .ARM.attributes 0000002e  00000000  00000000  00070308  2**0
                  CONTENTS, READONLY
 26 .debug_line   0002f527  00000000  00000000  00070336  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_info   0004c0b1  00000000  00000000  0009f85d  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_abbrev 00009610  00000000  00000000  000eb90e  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_aranges 00001a20  00000000  00000000  000f4f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_str    0019603e  00000000  00000000  000f6940  2**0
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_ranges 00001510  00000000  00000000  0028c980  2**3
                  CONTENTS, READONLY, DEBUGGING
 32 .debug_macro  000467b4  00000000  00000000  0028de90  2**0
                  CONTENTS, READONLY, DEBUGGING
 33 .comment      00000079  00000000  00000000  002d4644  2**0
                  CONTENTS, READONLY
 34 .debug_frame  00005a5c  00000000  00000000  002d46c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 35 .stabstr      00000076  00000000  00000000  002da11c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .os_section_funcs:

08101be8 <alarm_expire>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void alarm_expire(CosmOS_AlarmVariableType *alarmVar)
{
 8101be8:	b480      	push	{r7}
 8101bea:	b08b      	sub	sp, #44	; 0x2c
 8101bec:	af00      	add	r7, sp, #0
 8101bee:	6078      	str	r0, [r7, #4]
 8101bf0:	687b      	ldr	r3, [r7, #4]
 8101bf2:	60bb      	str	r3, [r7, #8]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * alarm_getAlarmSchedulable(CosmOS_AlarmVariableType * alarm)
{
    return (CosmOS_SchedulableVariableType *)(alarm->cfg->schedulableVar);
 8101bf4:	68bb      	ldr	r3, [r7, #8]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	681b      	ldr	r3, [r3, #0]
	CosmOS_SchedulableVariableType * schedulableVar;


	schedulableVar = alarm_getAlarmSchedulable(alarmVar);
 8101bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8101bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101bfe:	613b      	str	r3, [r7, #16]
 8101c00:	f04f 33ff 	mov.w	r3, #4294967295
 8101c04:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_SchedulableStateType
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setState(CosmOS_SchedulableVariableType * schedulable, CosmOS_SchedulableStateType stateParam)
{
    schedulable->state = stateParam;
 8101c06:	693b      	ldr	r3, [r7, #16]
 8101c08:	68fa      	ldr	r2, [r7, #12]
 8101c0a:	605a      	str	r2, [r3, #4]
}
 8101c0c:	bf00      	nop
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	61bb      	str	r3, [r7, #24]
 8101c12:	2300      	movs	r3, #0
 8101c14:	617b      	str	r3, [r7, #20]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void alarm_setAlarmState(CosmOS_AlarmVariableType * alarm, CosmOS_AlarmStateType stateParam)
{
    alarm->state = stateParam;
 8101c16:	69bb      	ldr	r3, [r7, #24]
 8101c18:	697a      	ldr	r2, [r7, #20]
 8101c1a:	605a      	str	r2, [r3, #4]
}
 8101c1c:	bf00      	nop
 8101c1e:	687b      	ldr	r3, [r7, #4]
 8101c20:	623b      	str	r3, [r7, #32]
 8101c22:	2300      	movs	r3, #0
 8101c24:	61fb      	str	r3, [r7, #28]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void alarm_setAlarmTickCount(CosmOS_AlarmVariableType * alarm, BitWidthType tickCountParam)
{
    alarm->tickCount = tickCountParam;
 8101c26:	6a3b      	ldr	r3, [r7, #32]
 8101c28:	69fa      	ldr	r2, [r7, #28]
 8101c2a:	609a      	str	r2, [r3, #8]
}
 8101c2c:	bf00      	nop

	schedulable_setState(schedulableVar, SCHEDULABLE_STATE_ENUM__READY);
	alarm_setAlarmState(alarmVar,ALARM_STATE_ENUM__DISABLED);
	alarm_setAlarmTickCount(alarmVar,0);
};
 8101c2e:	bf00      	nop
 8101c30:	372c      	adds	r7, #44	; 0x2c
 8101c32:	46bd      	mov	sp, r7
 8101c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c38:	4770      	bx	lr

08101c3a <buffer_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_readArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8101c3a:	b580      	push	{r7, lr}
 8101c3c:	b098      	sub	sp, #96	; 0x60
 8101c3e:	af00      	add	r7, sp, #0
 8101c40:	60f8      	str	r0, [r7, #12]
 8101c42:	60b9      	str	r1, [r7, #8]
 8101c44:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8101c46:	f000 fda3 	bl	8102790 <os_getOsVar>
 8101c4a:	64f8      	str	r0, [r7, #76]	; 0x4c
  * @return CosmOS_CoreVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_CoreVariableType * CILcore_getCoreVar(void)
{
    uint32_t result;
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101c4c:	464b      	mov	r3, r9
 8101c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8101c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8101c52:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8101c54:	687a      	ldr	r2, [r7, #4]
 8101c56:	68b9      	ldr	r1, [r7, #8]
 8101c58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8101c5a:	f000 fbc4 	bl	81023e6 <memoryProtection_isMemoryRegionProtected>
 8101c5e:	4603      	mov	r3, r0
 8101c60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8101c64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8101c68:	2b00      	cmp	r3, #0
 8101c6a:	d003      	beq.n	8101c74 <buffer_readArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8101c6c:	2305      	movs	r3, #5
 8101c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101c72:	e069      	b.n	8101d48 <buffer_readArray+0x10e>
 8101c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101c76:	623b      	str	r3, [r7, #32]
 8101c78:	68fb      	ldr	r3, [r7, #12]
 8101c7a:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * os_getOsBufferVar(CosmOS_OsVariableType * osVar, BitWidthType bufferId)
{
    return (&(osVar->bufferVars[bufferId]));
 8101c7c:	6a3b      	ldr	r3, [r7, #32]
 8101c7e:	689a      	ldr	r2, [r3, #8]
 8101c80:	69fb      	ldr	r3, [r7, #28]
 8101c82:	011b      	lsls	r3, r3, #4
 8101c84:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * readPermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8101c86:	643b      	str	r3, [r7, #64]	; 0x40
 8101c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101c8a:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_PermissionsConfigurationType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_PermissionsConfigurationType * buffer_getBufferReadPermission(CosmOS_BufferVariableType * bufferVar)
{
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->readPermission);
 8101c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	68db      	ldr	r3, [r3, #12]

        readPermission = buffer_getBufferReadPermission( bufferVar );
 8101c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( readPermission, coreVar );
 8101c94:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8101c96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8101c98:	f000 fe5c 	bl	8102954 <permission_tryAccess>
 8101c9c:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8101c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101ca4:	d103      	bne.n	8101cae <buffer_readArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8101ca6:	2303      	movs	r3, #3
 8101ca8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101cac:	e04c      	b.n	8101d48 <buffer_readArray+0x10e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101cae:	b672      	cpsid	i
}
 8101cb0:	bf00      	nop
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void CILinterrupt_disableInterrupts(void)
{
		__disable_irq();
}
 8101cb2:	bf00      	nop
 8101cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101cb6:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 8101cb8:	69bb      	ldr	r3, [r7, #24]
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8101cbe:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 8101cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101cc2:	2b00      	cmp	r3, #0
 8101cc4:	d00a      	beq.n	8101cdc <buffer_readArray+0xa2>
 8101cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101cc8:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8101cca:	697b      	ldr	r3, [r7, #20]
 8101ccc:	681b      	ldr	r3, [r3, #0]
 8101cce:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 8101cd0:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 8101cd2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8101cd4:	f001 fb65 	bl	81033a2 <spinlock_trySpinlock>
 8101cd8:	6578      	str	r0, [r7, #84]	; 0x54
 8101cda:	e001      	b.n	8101ce0 <buffer_readArray+0xa6>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8101cdc:	2302      	movs	r3, #2
 8101cde:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8101ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101ce2:	2b02      	cmp	r3, #2
 8101ce4:	d12a      	bne.n	8101d3c <buffer_readArray+0x102>
 8101ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101ce8:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getFullCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return (bufferVar->fullCells);
 8101cea:	693b      	ldr	r3, [r7, #16]
 8101cec:	68db      	ldr	r3, [r3, #12]
			{
				fullCellsNum = buffer_getFullCellsNum( bufferVar );
 8101cee:	633b      	str	r3, [r7, #48]	; 0x30

				if ( fullCellsNum >= size)
 8101cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101cf2:	687b      	ldr	r3, [r7, #4]
 8101cf4:	429a      	cmp	r2, r3
 8101cf6:	d316      	bcc.n	8101d26 <buffer_readArray+0xec>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 8101cf8:	68bb      	ldr	r3, [r7, #8]
 8101cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8101cfc:	2300      	movs	r3, #0
 8101cfe:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8101d00:	e00c      	b.n	8101d1c <buffer_readArray+0xe2>
					{
						bufferState = buffer_pull( bufferVar, ( userBuffer + userBufferIndex ) );
 8101d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101d06:	4413      	add	r3, r2
 8101d08:	4619      	mov	r1, r3
 8101d0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8101d0c:	f000 f8b4 	bl	8101e78 <buffer_pull>
 8101d10:	4603      	mov	r3, r0
 8101d12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 8101d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101d18:	3301      	adds	r3, #1
 8101d1a:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 8101d1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101d1e:	687b      	ldr	r3, [r7, #4]
 8101d20:	429a      	cmp	r2, r3
 8101d22:	d3ee      	bcc.n	8101d02 <buffer_readArray+0xc8>
 8101d24:	e002      	b.n	8101d2c <buffer_readArray+0xf2>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM;
 8101d26:	2307      	movs	r3, #7
 8101d28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 8101d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d2e:	2b00      	cmp	r3, #0
 8101d30:	d007      	beq.n	8101d42 <buffer_readArray+0x108>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 8101d32:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8101d34:	f001 fb74 	bl	8103420 <spinlock_releaseSpinlock>
 8101d38:	6578      	str	r0, [r7, #84]	; 0x54
 8101d3a:	e002      	b.n	8101d42 <buffer_readArray+0x108>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 8101d3c:	2304      	movs	r3, #4
 8101d3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 8101d42:	b662      	cpsie	i
}
 8101d44:	bf00      	nop
}
 8101d46:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8101d48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8101d4c:	4618      	mov	r0, r3
 8101d4e:	3760      	adds	r7, #96	; 0x60
 8101d50:	46bd      	mov	sp, r7
 8101d52:	bd80      	pop	{r7, pc}

08101d54 <buffer_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_writeArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8101d54:	b580      	push	{r7, lr}
 8101d56:	b098      	sub	sp, #96	; 0x60
 8101d58:	af00      	add	r7, sp, #0
 8101d5a:	60f8      	str	r0, [r7, #12]
 8101d5c:	60b9      	str	r1, [r7, #8]
 8101d5e:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8101d60:	f000 fd16 	bl	8102790 <os_getOsVar>
 8101d64:	64f8      	str	r0, [r7, #76]	; 0x4c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101d66:	464b      	mov	r3, r9
 8101d68:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8101d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8101d6c:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8101d6e:	687a      	ldr	r2, [r7, #4]
 8101d70:	68b9      	ldr	r1, [r7, #8]
 8101d72:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8101d74:	f000 fb37 	bl	81023e6 <memoryProtection_isMemoryRegionProtected>
 8101d78:	4603      	mov	r3, r0
 8101d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8101d7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8101d82:	2b00      	cmp	r3, #0
 8101d84:	d003      	beq.n	8101d8e <buffer_writeArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8101d86:	2305      	movs	r3, #5
 8101d88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101d8c:	e06e      	b.n	8101e6c <buffer_writeArray+0x118>
 8101d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101d90:	623b      	str	r3, [r7, #32]
 8101d92:	68fb      	ldr	r3, [r7, #12]
 8101d94:	61fb      	str	r3, [r7, #28]
 8101d96:	6a3b      	ldr	r3, [r7, #32]
 8101d98:	689a      	ldr	r2, [r3, #8]
 8101d9a:	69fb      	ldr	r3, [r7, #28]
 8101d9c:	011b      	lsls	r3, r3, #4
 8101d9e:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * writePermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8101da0:	643b      	str	r3, [r7, #64]	; 0x40
 8101da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101da4:	627b      	str	r3, [r7, #36]	; 0x24
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->writePermission);
 8101da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101da8:	681b      	ldr	r3, [r3, #0]
 8101daa:	691b      	ldr	r3, [r3, #16]

        writePermission = buffer_getBufferWritePermission( bufferVar );
 8101dac:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( writePermission, coreVar );
 8101dae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8101db0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8101db2:	f000 fdcf 	bl	8102954 <permission_tryAccess>
 8101db6:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8101db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101dbe:	d103      	bne.n	8101dc8 <buffer_writeArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8101dc0:	2303      	movs	r3, #3
 8101dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101dc6:	e051      	b.n	8101e6c <buffer_writeArray+0x118>
  __ASM volatile ("cpsid i" : : : "memory");
 8101dc8:	b672      	cpsid	i
}
 8101dca:	bf00      	nop
}
 8101dcc:	bf00      	nop
 8101dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101dd0:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 8101dd2:	69bb      	ldr	r3, [r7, #24]
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8101dd8:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 8101dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101ddc:	2b00      	cmp	r3, #0
 8101dde:	d00a      	beq.n	8101df6 <buffer_writeArray+0xa2>
 8101de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101de2:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8101de4:	697b      	ldr	r3, [r7, #20]
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 8101dea:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 8101dec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8101dee:	f001 fad8 	bl	81033a2 <spinlock_trySpinlock>
 8101df2:	6578      	str	r0, [r7, #84]	; 0x54
 8101df4:	e001      	b.n	8101dfa <buffer_writeArray+0xa6>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8101df6:	2302      	movs	r3, #2
 8101df8:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8101dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101dfc:	2b02      	cmp	r3, #2
 8101dfe:	d12f      	bne.n	8101e60 <buffer_writeArray+0x10c>
 8101e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101e02:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getEmptyCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return ((bufferVar->cfg->size) - (bufferVar->fullCells));
 8101e04:	693b      	ldr	r3, [r7, #16]
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	689a      	ldr	r2, [r3, #8]
 8101e0a:	693b      	ldr	r3, [r7, #16]
 8101e0c:	68db      	ldr	r3, [r3, #12]
 8101e0e:	1ad3      	subs	r3, r2, r3
			{
				emptyCellsNum = buffer_getEmptyCellsNum( bufferVar );
 8101e10:	633b      	str	r3, [r7, #48]	; 0x30

				if ( emptyCellsNum >= size)
 8101e12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101e14:	687b      	ldr	r3, [r7, #4]
 8101e16:	429a      	cmp	r2, r3
 8101e18:	d317      	bcc.n	8101e4a <buffer_writeArray+0xf6>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 8101e1a:	68bb      	ldr	r3, [r7, #8]
 8101e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8101e1e:	2300      	movs	r3, #0
 8101e20:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8101e22:	e00d      	b.n	8101e40 <buffer_writeArray+0xec>
					{
            	        bufferState = buffer_push( bufferVar, *( userBuffer + userBufferIndex ) );
 8101e24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101e28:	4413      	add	r3, r2
 8101e2a:	781b      	ldrb	r3, [r3, #0]
 8101e2c:	4619      	mov	r1, r3
 8101e2e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8101e30:	f000 f85c 	bl	8101eec <buffer_push>
 8101e34:	4603      	mov	r3, r0
 8101e36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 8101e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101e3c:	3301      	adds	r3, #1
 8101e3e:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 8101e40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101e42:	687b      	ldr	r3, [r7, #4]
 8101e44:	429a      	cmp	r2, r3
 8101e46:	d3ed      	bcc.n	8101e24 <buffer_writeArray+0xd0>
 8101e48:	e002      	b.n	8101e50 <buffer_writeArray+0xfc>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS;
 8101e4a:	2306      	movs	r3, #6
 8101e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 8101e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101e52:	2b00      	cmp	r3, #0
 8101e54:	d007      	beq.n	8101e66 <buffer_writeArray+0x112>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 8101e56:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8101e58:	f001 fae2 	bl	8103420 <spinlock_releaseSpinlock>
 8101e5c:	6578      	str	r0, [r7, #84]	; 0x54
 8101e5e:	e002      	b.n	8101e66 <buffer_writeArray+0x112>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 8101e60:	2304      	movs	r3, #4
 8101e62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 8101e66:	b662      	cpsie	i
}
 8101e68:	bf00      	nop
}
 8101e6a:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8101e6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8101e70:	4618      	mov	r0, r3
 8101e72:	3760      	adds	r7, #96	; 0x60
 8101e74:	46bd      	mov	sp, r7
 8101e76:	bd80      	pop	{r7, pc}

08101e78 <buffer_pull>:
{
 8101e78:	b480      	push	{r7}
 8101e7a:	b089      	sub	sp, #36	; 0x24
 8101e7c:	af00      	add	r7, sp, #0
 8101e7e:	6078      	str	r0, [r7, #4]
 8101e80:	6039      	str	r1, [r7, #0]
 8101e82:	687b      	ldr	r3, [r7, #4]
 8101e84:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8101e86:	68bb      	ldr	r3, [r7, #8]
 8101e88:	681b      	ldr	r3, [r3, #0]
 8101e8a:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8101e8c:	61fb      	str	r3, [r7, #28]
 8101e8e:	687b      	ldr	r3, [r7, #4]
 8101e90:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8101e92:	68fb      	ldr	r3, [r7, #12]
 8101e94:	681b      	ldr	r3, [r3, #0]
 8101e96:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8101e98:	61bb      	str	r3, [r7, #24]
    *data = *( osBuffer + bufferVar->tail );
 8101e9a:	687b      	ldr	r3, [r7, #4]
 8101e9c:	689b      	ldr	r3, [r3, #8]
 8101e9e:	69ba      	ldr	r2, [r7, #24]
 8101ea0:	4413      	add	r3, r2
 8101ea2:	781a      	ldrb	r2, [r3, #0]
 8101ea4:	683b      	ldr	r3, [r7, #0]
 8101ea6:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells--;
 8101ea8:	687b      	ldr	r3, [r7, #4]
 8101eaa:	68db      	ldr	r3, [r3, #12]
 8101eac:	1e5a      	subs	r2, r3, #1
 8101eae:	687b      	ldr	r3, [r7, #4]
 8101eb0:	60da      	str	r2, [r3, #12]
    bufferVar->tail = ( ( bufferVar->tail + 1 ) % bufferSize );
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	689b      	ldr	r3, [r3, #8]
 8101eb6:	3301      	adds	r3, #1
 8101eb8:	69fa      	ldr	r2, [r7, #28]
 8101eba:	fbb3 f2f2 	udiv	r2, r3, r2
 8101ebe:	69f9      	ldr	r1, [r7, #28]
 8101ec0:	fb01 f202 	mul.w	r2, r1, r2
 8101ec4:	1a9a      	subs	r2, r3, r2
 8101ec6:	687b      	ldr	r3, [r7, #4]
 8101ec8:	609a      	str	r2, [r3, #8]
 8101eca:	687b      	ldr	r3, [r7, #4]
 8101ecc:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isEmpty(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT(bufferVar->fullCells) ? BUFFER_STATE_ENUM__EMPTY : BUFFER_STATE_ENUM__OK);
 8101ece:	693b      	ldr	r3, [r7, #16]
 8101ed0:	68db      	ldr	r3, [r3, #12]
 8101ed2:	2b00      	cmp	r3, #0
 8101ed4:	bf0c      	ite	eq
 8101ed6:	2301      	moveq	r3, #1
 8101ed8:	2300      	movne	r3, #0
 8101eda:	b2db      	uxtb	r3, r3
    bufferState = buffer_isEmpty( bufferVar );
 8101edc:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8101ede:	7dfb      	ldrb	r3, [r7, #23]
}
 8101ee0:	4618      	mov	r0, r3
 8101ee2:	3724      	adds	r7, #36	; 0x24
 8101ee4:	46bd      	mov	sp, r7
 8101ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eea:	4770      	bx	lr

08101eec <buffer_push>:
{
 8101eec:	b480      	push	{r7}
 8101eee:	b089      	sub	sp, #36	; 0x24
 8101ef0:	af00      	add	r7, sp, #0
 8101ef2:	6078      	str	r0, [r7, #4]
 8101ef4:	460b      	mov	r3, r1
 8101ef6:	70fb      	strb	r3, [r7, #3]
 8101ef8:	687b      	ldr	r3, [r7, #4]
 8101efa:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8101efc:	68bb      	ldr	r3, [r7, #8]
 8101efe:	681b      	ldr	r3, [r3, #0]
 8101f00:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8101f02:	61fb      	str	r3, [r7, #28]
 8101f04:	687b      	ldr	r3, [r7, #4]
 8101f06:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8101f08:	68fb      	ldr	r3, [r7, #12]
 8101f0a:	681b      	ldr	r3, [r3, #0]
 8101f0c:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8101f0e:	61bb      	str	r3, [r7, #24]
    *( osBuffer + bufferVar->head ) = data;
 8101f10:	687b      	ldr	r3, [r7, #4]
 8101f12:	685b      	ldr	r3, [r3, #4]
 8101f14:	69ba      	ldr	r2, [r7, #24]
 8101f16:	4413      	add	r3, r2
 8101f18:	78fa      	ldrb	r2, [r7, #3]
 8101f1a:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells++;
 8101f1c:	687b      	ldr	r3, [r7, #4]
 8101f1e:	68db      	ldr	r3, [r3, #12]
 8101f20:	1c5a      	adds	r2, r3, #1
 8101f22:	687b      	ldr	r3, [r7, #4]
 8101f24:	60da      	str	r2, [r3, #12]
    bufferVar->head = ( ( bufferVar->head + 1 ) % bufferSize );
 8101f26:	687b      	ldr	r3, [r7, #4]
 8101f28:	685b      	ldr	r3, [r3, #4]
 8101f2a:	3301      	adds	r3, #1
 8101f2c:	69fa      	ldr	r2, [r7, #28]
 8101f2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8101f32:	69f9      	ldr	r1, [r7, #28]
 8101f34:	fb01 f202 	mul.w	r2, r1, r2
 8101f38:	1a9a      	subs	r2, r3, r2
 8101f3a:	687b      	ldr	r3, [r7, #4]
 8101f3c:	605a      	str	r2, [r3, #4]
 8101f3e:	687b      	ldr	r3, [r7, #4]
 8101f40:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isFull(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT((bufferVar->cfg->size) ^ (bufferVar->fullCells)) ? \
 8101f42:	693b      	ldr	r3, [r7, #16]
 8101f44:	681b      	ldr	r3, [r3, #0]
 8101f46:	689a      	ldr	r2, [r3, #8]
 8101f48:	693b      	ldr	r3, [r7, #16]
 8101f4a:	68db      	ldr	r3, [r3, #12]
    BUFFER_STATE_ENUM__FULL : BUFFER_STATE_ENUM__OK);
 8101f4c:	429a      	cmp	r2, r3
 8101f4e:	d101      	bne.n	8101f54 <buffer_push+0x68>
 8101f50:	2302      	movs	r3, #2
 8101f52:	e000      	b.n	8101f56 <buffer_push+0x6a>
 8101f54:	2300      	movs	r3, #0
    bufferState = buffer_isFull( bufferVar );
 8101f56:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8101f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8101f5a:	4618      	mov	r0, r3
 8101f5c:	3724      	adds	r7, #36	; 0x24
 8101f5e:	46bd      	mov	sp, r7
 8101f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f64:	4770      	bx	lr

08101f66 <bufferDouble_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_readArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8101f66:	b580      	push	{r7, lr}
 8101f68:	b08e      	sub	sp, #56	; 0x38
 8101f6a:	af00      	add	r7, sp, #0
 8101f6c:	60f8      	str	r0, [r7, #12]
 8101f6e:	60b9      	str	r1, [r7, #8]
 8101f70:	607a      	str	r2, [r7, #4]
 8101f72:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8101f74:	f000 fc0c 	bl	8102790 <os_getOsVar>
 8101f78:	6338      	str	r0, [r7, #48]	; 0x30
 8101f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101f7c:	623b      	str	r3, [r7, #32]
 8101f7e:	68fb      	ldr	r3, [r7, #12]
 8101f80:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferDoubleVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferDoubleVariableType * os_getOsBufferDoubleVar(CosmOS_OsVariableType * osVar, BitWidthType bufferDoubleId)
{
    return (&(osVar->bufferDoubleVars[bufferDoubleId]));
 8101f82:	6a3b      	ldr	r3, [r7, #32]
 8101f84:	68d9      	ldr	r1, [r3, #12]
 8101f86:	69fa      	ldr	r2, [r7, #28]
 8101f88:	4613      	mov	r3, r2
 8101f8a:	005b      	lsls	r3, r3, #1
 8101f8c:	4413      	add	r3, r2
 8101f8e:	009b      	lsls	r3, r3, #2
 8101f90:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8101f92:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8101f94:	78fb      	ldrb	r3, [r7, #3]
 8101f96:	2b00      	cmp	r3, #0
 8101f98:	d002      	beq.n	8101fa0 <bufferDouble_readArray+0x3a>
 8101f9a:	2b01      	cmp	r3, #1
 8101f9c:	d00b      	beq.n	8101fb6 <bufferDouble_readArray+0x50>
 8101f9e:	e015      	b.n	8101fcc <bufferDouble_readArray+0x66>
 8101fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101fa2:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * bufferDouble_getBufferDoubleUserBuffer(CosmOS_BufferDoubleVariableType * bufferDoubleVar)
{
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8101fa4:	69bb      	ldr	r3, [r7, #24]
 8101fa6:	681b      	ldr	r3, [r3, #0]
 8101fa8:	681a      	ldr	r2, [r3, #0]
 8101faa:	69bb      	ldr	r3, [r7, #24]
 8101fac:	689b      	ldr	r3, [r3, #8]
 8101fae:	009b      	lsls	r3, r3, #2
 8101fb0:	4413      	add	r3, r2
    {
        case BUFFER_DOUBLE_ACCESS_ENUM__USER :
        {
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8101fb2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101fb4:	e00d      	b.n	8101fd2 <bufferDouble_readArray+0x6c>
 8101fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101fb8:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8101fba:	697b      	ldr	r3, [r7, #20]
 8101fbc:	681b      	ldr	r3, [r3, #0]
 8101fbe:	681a      	ldr	r2, [r3, #0]
 8101fc0:	697b      	ldr	r3, [r7, #20]
 8101fc2:	685b      	ldr	r3, [r3, #4]
 8101fc4:	009b      	lsls	r3, r3, #2
 8101fc6:	4413      	add	r3, r2
        }

        case BUFFER_DOUBLE_ACCESS_ENUM__KERNEL :
        {
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8101fc8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101fca:	e002      	b.n	8101fd2 <bufferDouble_readArray+0x6c>
        }

        default :
        {
            os_kernelPanic();
 8101fcc:	f000 fbea 	bl	81027a4 <os_kernelPanic>
            break;
 8101fd0:	bf00      	nop
 8101fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101fd4:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->id);
 8101fd6:	693b      	ldr	r3, [r7, #16]
 8101fd8:	681b      	ldr	r3, [r3, #0]
 8101fda:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 8101fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_readArray( bufferId, buffer, size );
 8101fde:	687a      	ldr	r2, [r7, #4]
 8101fe0:	68b9      	ldr	r1, [r7, #8]
 8101fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8101fe4:	f7ff fe29 	bl	8101c3a <buffer_readArray>
 8101fe8:	4603      	mov	r3, r0
 8101fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8101fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8101ff2:	4618      	mov	r0, r3
 8101ff4:	3738      	adds	r7, #56	; 0x38
 8101ff6:	46bd      	mov	sp, r7
 8101ff8:	bd80      	pop	{r7, pc}

08101ffa <bufferDouble_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_writeArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8101ffa:	b580      	push	{r7, lr}
 8101ffc:	b08e      	sub	sp, #56	; 0x38
 8101ffe:	af00      	add	r7, sp, #0
 8102000:	60f8      	str	r0, [r7, #12]
 8102002:	60b9      	str	r1, [r7, #8]
 8102004:	607a      	str	r2, [r7, #4]
 8102006:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8102008:	f000 fbc2 	bl	8102790 <os_getOsVar>
 810200c:	6338      	str	r0, [r7, #48]	; 0x30
 810200e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102010:	623b      	str	r3, [r7, #32]
 8102012:	68fb      	ldr	r3, [r7, #12]
 8102014:	61fb      	str	r3, [r7, #28]
 8102016:	6a3b      	ldr	r3, [r7, #32]
 8102018:	68d9      	ldr	r1, [r3, #12]
 810201a:	69fa      	ldr	r2, [r7, #28]
 810201c:	4613      	mov	r3, r2
 810201e:	005b      	lsls	r3, r3, #1
 8102020:	4413      	add	r3, r2
 8102022:	009b      	lsls	r3, r3, #2
 8102024:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8102026:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8102028:	78fb      	ldrb	r3, [r7, #3]
 810202a:	2b00      	cmp	r3, #0
 810202c:	d002      	beq.n	8102034 <bufferDouble_writeArray+0x3a>
 810202e:	2b01      	cmp	r3, #1
 8102030:	d00b      	beq.n	810204a <bufferDouble_writeArray+0x50>
 8102032:	e015      	b.n	8102060 <bufferDouble_writeArray+0x66>
 8102034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102036:	61bb      	str	r3, [r7, #24]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8102038:	69bb      	ldr	r3, [r7, #24]
 810203a:	681b      	ldr	r3, [r3, #0]
 810203c:	681a      	ldr	r2, [r3, #0]
 810203e:	69bb      	ldr	r3, [r7, #24]
 8102040:	689b      	ldr	r3, [r3, #8]
 8102042:	009b      	lsls	r3, r3, #2
 8102044:	4413      	add	r3, r2
    {
        case BUFFER_DOUBLE_ACCESS_ENUM__USER :
        {
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8102046:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8102048:	e00d      	b.n	8102066 <bufferDouble_writeArray+0x6c>
 810204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810204c:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 810204e:	697b      	ldr	r3, [r7, #20]
 8102050:	681b      	ldr	r3, [r3, #0]
 8102052:	681a      	ldr	r2, [r3, #0]
 8102054:	697b      	ldr	r3, [r7, #20]
 8102056:	685b      	ldr	r3, [r3, #4]
 8102058:	009b      	lsls	r3, r3, #2
 810205a:	4413      	add	r3, r2
        }

        case BUFFER_DOUBLE_ACCESS_ENUM__KERNEL :
        {
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 810205c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 810205e:	e002      	b.n	8102066 <bufferDouble_writeArray+0x6c>
        }

        default :
        {
            os_kernelPanic();
 8102060:	f000 fba0 	bl	81027a4 <os_kernelPanic>
            break;
 8102064:	bf00      	nop
 8102066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102068:	613b      	str	r3, [r7, #16]
 810206a:	693b      	ldr	r3, [r7, #16]
 810206c:	681b      	ldr	r3, [r3, #0]
 810206e:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 8102070:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_writeArray( bufferId, buffer, size );
 8102072:	687a      	ldr	r2, [r7, #4]
 8102074:	68b9      	ldr	r1, [r7, #8]
 8102076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8102078:	f7ff fe6c 	bl	8101d54 <buffer_writeArray>
 810207c:	4603      	mov	r3, r0
 810207e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8102082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8102086:	4618      	mov	r0, r3
 8102088:	3738      	adds	r7, #56	; 0x38
 810208a:	46bd      	mov	sp, r7
 810208c:	bd80      	pop	{r7, pc}

0810208e <core_getCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_CoreVariableType * core_getCoreVar(void)
{
 810208e:	b480      	push	{r7}
 8102090:	b083      	sub	sp, #12
 8102092:	af00      	add	r7, sp, #0
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8102094:	464b      	mov	r3, r9
 8102096:	603b      	str	r3, [r7, #0]
    return (CosmOS_CoreVariableType *)result;
 8102098:	683b      	ldr	r3, [r7, #0]
	CosmOS_CoreVariableType * coreVar;

	coreVar = CILcore_getCoreVar();
 810209a:	607b      	str	r3, [r7, #4]

	return coreVar;
 810209c:	687b      	ldr	r3, [r7, #4]
}
 810209e:	4618      	mov	r0, r3
 81020a0:	370c      	adds	r7, #12
 81020a2:	46bd      	mov	sp, r7
 81020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020a8:	4770      	bx	lr

081020aa <core_setSchedulableIntoCurrentContext>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void core_setSchedulableIntoCurrentContext(CosmOS_CoreVariableType * coreVar, CosmOS_SchedulableVariableType * schedulableVar)
{
 81020aa:	b480      	push	{r7}
 81020ac:	b095      	sub	sp, #84	; 0x54
 81020ae:	af00      	add	r7, sp, #0
 81020b0:	6078      	str	r0, [r7, #4]
 81020b2:	6039      	str	r1, [r7, #0]
 81020b4:	683b      	ldr	r3, [r7, #0]
 81020b6:	61fb      	str	r3, [r7, #28]
    return (schedulable->cfg->programId);
 81020b8:	69fb      	ldr	r3, [r7, #28]
 81020ba:	681b      	ldr	r3, [r3, #0]
 81020bc:	699b      	ldr	r3, [r3, #24]
	CosmOS_SchedulableStateType priorSchedulableVarState;

	CosmOS_ProgramVariableType * programVar;
	CosmOS_SchedulableVariableType * priorSchedulableVar;

	programId = schedulable_getProgramId( schedulableVar );
 81020be:	64fb      	str	r3, [r7, #76]	; 0x4c
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	627b      	str	r3, [r7, #36]	; 0x24
 81020c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81020c6:	623b      	str	r3, [r7, #32]
  *
  * @return CosmOS_ProgramVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ProgramVariableType * core_getCoreProgramVar(CosmOS_CoreVariableType * core, BitWidthType programIterator)
{
    return (&(core->programVars[programIterator]));
 81020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81020ca:	68da      	ldr	r2, [r3, #12]
 81020cc:	6a3b      	ldr	r3, [r7, #32]
 81020ce:	011b      	lsls	r3, r3, #4
 81020d0:	4413      	add	r3, r2
    programVar = core_getCoreProgramVar( coreVar, programId );
 81020d2:	64bb      	str	r3, [r7, #72]	; 0x48
 81020d4:	687b      	ldr	r3, [r7, #4]
 81020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    return (core->schedulableInExecution);
 81020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81020da:	685b      	ldr	r3, [r3, #4]
	priorSchedulableVar = core_getCoreSchedulableInExecution( coreVar );
 81020dc:	647b      	str	r3, [r7, #68]	; 0x44
 81020de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (schedulable->state);
 81020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81020e4:	685b      	ldr	r3, [r3, #4]
	priorSchedulableVarState = schedulable_getState( priorSchedulableVar );
 81020e6:	643b      	str	r3, [r7, #64]	; 0x40
 81020e8:	687b      	ldr	r3, [r7, #4]
 81020ea:	637b      	str	r3, [r7, #52]	; 0x34
 81020ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81020ee:	633b      	str	r3, [r7, #48]	; 0x30
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreProgramInExecution(CosmOS_CoreVariableType * core, CosmOS_ProgramVariableType * programInExecutionParam)
{
    core->programInExecution = programInExecutionParam;
 81020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81020f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81020f4:	609a      	str	r2, [r3, #8]
}
 81020f6:	bf00      	nop
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 81020fc:	683b      	ldr	r3, [r7, #0]
 81020fe:	63bb      	str	r3, [r7, #56]	; 0x38
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreSchedulableInExecution(CosmOS_CoreVariableType * core, CosmOS_SchedulableVariableType * schedulableInExecutionParam)
{
    core->schedulableInExecution = schedulableInExecutionParam;
 8102100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8102104:	605a      	str	r2, [r3, #4]
}
 8102106:	bf00      	nop

	core_setCoreProgramInExecution( coreVar, programVar );
    core_setCoreSchedulableInExecution( coreVar, schedulableVar );

	if (priorSchedulableVarState IS_EQUAL_TO SCHEDULABLE_STATE_ENUM__RUNNING)
 8102108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810210a:	2b00      	cmp	r3, #0
 810210c:	d108      	bne.n	8102120 <core_setSchedulableIntoCurrentContext+0x76>
 810210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102110:	61bb      	str	r3, [r7, #24]
 8102112:	f04f 33ff 	mov.w	r3, #4294967295
 8102116:	617b      	str	r3, [r7, #20]
    schedulable->state = stateParam;
 8102118:	69bb      	ldr	r3, [r7, #24]
 810211a:	697a      	ldr	r2, [r7, #20]
 810211c:	605a      	str	r2, [r3, #4]
}
 810211e:	bf00      	nop
 8102120:	683b      	ldr	r3, [r7, #0]
 8102122:	613b      	str	r3, [r7, #16]
 8102124:	2300      	movs	r3, #0
 8102126:	60fb      	str	r3, [r7, #12]
    schedulable->state = stateParam;
 8102128:	693b      	ldr	r3, [r7, #16]
 810212a:	68fa      	ldr	r2, [r7, #12]
 810212c:	605a      	str	r2, [r3, #4]
}
 810212e:	bf00      	nop
	{
		schedulable_setState(priorSchedulableVar, SCHEDULABLE_STATE_ENUM__READY);
	}
	schedulable_setState(schedulableVar, SCHEDULABLE_STATE_ENUM__RUNNING);
}
 8102130:	bf00      	nop
 8102132:	3754      	adds	r7, #84	; 0x54
 8102134:	46bd      	mov	sp, r7
 8102136:	f85d 7b04 	ldr.w	r7, [sp], #4
 810213a:	4770      	bx	lr

0810213c <coreSync_getBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_getBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 810213c:	b580      	push	{r7, lr}
 810213e:	b096      	sub	sp, #88	; 0x58
 8102140:	af00      	add	r7, sp, #0
 8102142:	6078      	str	r0, [r7, #4]
 8102144:	6039      	str	r1, [r7, #0]
 8102146:	687b      	ldr	r3, [r7, #4]
 8102148:	62bb      	str	r3, [r7, #40]	; 0x28
 810214a:	683b      	ldr	r3, [r7, #0]
 810214c:	627b      	str	r3, [r7, #36]	; 0x24
    return (&(core->barrierVars[barrierId]));
 810214e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102150:	695a      	ldr	r2, [r3, #20]
 8102152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102154:	009b      	lsls	r3, r3, #2
 8102156:	4413      	add	r3, r2
	CosmOS_BarrierVariableType * barrierVar;

	volatile CosmOS_BarrierStateType barrierState;


	barrierVar = core_getBarrierVar( coreVar, barrierId );
 8102158:	653b      	str	r3, [r7, #80]	; 0x50
 810215a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810215c:	633b      	str	r3, [r7, #48]	; 0x30
 810215e:	f04f 33ff 	mov.w	r3, #4294967295
 8102162:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void coreSync_setBarrierState(CosmOS_BarrierVariableType * barrier, CosmOS_BarrierStateType barrierStateParam)
{
    barrier->barrierState = barrierStateParam;
 8102164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102168:	601a      	str	r2, [r3, #0]
}
 810216a:	bf00      	nop
	coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__REACHED);

	/* MEMORY BARRIER HAS TO BE IMPLEMENTED */

	osVar = os_getOsVar();
 810216c:	f000 fb10 	bl	8102790 <os_getOsVar>
 8102170:	64f8      	str	r0, [r7, #76]	; 0x4c
 8102172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102174:	637b      	str	r3, [r7, #52]	; 0x34
    return (osVar->cfg->numberOfCores);
 8102176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102178:	681b      	ldr	r3, [r3, #0]
 810217a:	685b      	ldr	r3, [r3, #4]
	numberOfCores = os_getOsNumberOfCores( osVar );
 810217c:	64bb      	str	r3, [r7, #72]	; 0x48

	numberOfSynchronizedCores = 0;
 810217e:	2300      	movs	r3, #0
 8102180:	657b      	str	r3, [r7, #84]	; 0x54
 8102182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8102186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102188:	63bb      	str	r3, [r7, #56]	; 0x38
    return (&(osVar->coreVars[coreId]));
 810218a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810218c:	6859      	ldr	r1, [r3, #4]
 810218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8102190:	4613      	mov	r3, r2
 8102192:	00db      	lsls	r3, r3, #3
 8102194:	4413      	add	r3, r2
 8102196:	009b      	lsls	r3, r3, #2
 8102198:	440b      	add	r3, r1

	coreVar = os_getCoreVar( osVar, numberOfSynchronizedCores );
 810219a:	607b      	str	r3, [r7, #4]
 810219c:	687b      	ldr	r3, [r7, #4]
 810219e:	647b      	str	r3, [r7, #68]	; 0x44
 81021a0:	683b      	ldr	r3, [r7, #0]
 81021a2:	643b      	str	r3, [r7, #64]	; 0x40
 81021a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81021a6:	695a      	ldr	r2, [r3, #20]
 81021a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81021aa:	009b      	lsls	r3, r3, #2
 81021ac:	4413      	add	r3, r2
	barrierVar = core_getBarrierVar( coreVar, barrierId );
 81021ae:	653b      	str	r3, [r7, #80]	; 0x50

	while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 81021b0:	e029      	b.n	8102206 <coreSync_getBarrier+0xca>
 81021b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81021b4:	623b      	str	r3, [r7, #32]
    return (barrier->barrierState);
 81021b6:	6a3b      	ldr	r3, [r7, #32]
 81021b8:	681b      	ldr	r3, [r3, #0]
	{
		barrierState = coreSync_getBarrierState( barrierVar );
 81021ba:	60fb      	str	r3, [r7, #12]

		if ( ( barrierState IS_EQUAL_TO BARRIER_STATE_ENUM__REACHED ) )
 81021bc:	68fb      	ldr	r3, [r7, #12]
 81021be:	f1b3 3fff 	cmp.w	r3, #4294967295
 81021c2:	d120      	bne.n	8102206 <coreSync_getBarrier+0xca>
		{
			numberOfSynchronizedCores++;
 81021c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81021c6:	3301      	adds	r3, #1
 81021c8:	657b      	str	r3, [r7, #84]	; 0x54

			coreVar = os_getCoreVar( osVar, ( numberOfSynchronizedCores % numberOfCores ) );
 81021ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81021cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81021ce:	fbb3 f2f2 	udiv	r2, r3, r2
 81021d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 81021d4:	fb01 f202 	mul.w	r2, r1, r2
 81021d8:	1a9b      	subs	r3, r3, r2
 81021da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 81021dc:	617a      	str	r2, [r7, #20]
 81021de:	613b      	str	r3, [r7, #16]
 81021e0:	697b      	ldr	r3, [r7, #20]
 81021e2:	6859      	ldr	r1, [r3, #4]
 81021e4:	693a      	ldr	r2, [r7, #16]
 81021e6:	4613      	mov	r3, r2
 81021e8:	00db      	lsls	r3, r3, #3
 81021ea:	4413      	add	r3, r2
 81021ec:	009b      	lsls	r3, r3, #2
 81021ee:	440b      	add	r3, r1
 81021f0:	607b      	str	r3, [r7, #4]
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	61fb      	str	r3, [r7, #28]
 81021f6:	683b      	ldr	r3, [r7, #0]
 81021f8:	61bb      	str	r3, [r7, #24]
 81021fa:	69fb      	ldr	r3, [r7, #28]
 81021fc:	695a      	ldr	r2, [r3, #20]
 81021fe:	69bb      	ldr	r3, [r7, #24]
 8102200:	009b      	lsls	r3, r3, #2
 8102202:	4413      	add	r3, r2
			barrierVar = core_getBarrierVar( coreVar, barrierId );
 8102204:	653b      	str	r3, [r7, #80]	; 0x50
	while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 8102206:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8102208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810220a:	429a      	cmp	r2, r3
 810220c:	d1d1      	bne.n	81021b2 <coreSync_getBarrier+0x76>
		}
	}
}
 810220e:	bf00      	nop
 8102210:	bf00      	nop
 8102212:	3758      	adds	r7, #88	; 0x58
 8102214:	46bd      	mov	sp, r7
 8102216:	bd80      	pop	{r7, pc}

08102218 <coreSync_reactivateBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_reactivateBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 8102218:	b580      	push	{r7, lr}
 810221a:	b088      	sub	sp, #32
 810221c:	af00      	add	r7, sp, #0
 810221e:	6078      	str	r0, [r7, #4]
 8102220:	6039      	str	r1, [r7, #0]
	CosmOS_BarrierVariableType * barrierVar;

	cosmosAssert( barrierId IS_EQUAL_TO SCHEDULERS_SYNC_ID );
 8102222:	683b      	ldr	r3, [r7, #0]
 8102224:	2b03      	cmp	r3, #3
 8102226:	bf0c      	ite	eq
 8102228:	2301      	moveq	r3, #1
 810222a:	2300      	movne	r3, #0
 810222c:	b2db      	uxtb	r3, r3
 810222e:	60bb      	str	r3, [r7, #8]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void cosmosAssert(BitWidthType result)
{
    if ( IS_NOT( result ) )
 8102230:	68bb      	ldr	r3, [r7, #8]
 8102232:	2b00      	cmp	r3, #0
 8102234:	d101      	bne.n	810223a <coreSync_reactivateBarrier+0x22>
		{
        os_kernelPanic();
 8102236:	f000 fab5 	bl	81027a4 <os_kernelPanic>
    }
}
 810223a:	bf00      	nop
 810223c:	687b      	ldr	r3, [r7, #4]
 810223e:	613b      	str	r3, [r7, #16]
 8102240:	683b      	ldr	r3, [r7, #0]
 8102242:	60fb      	str	r3, [r7, #12]
 8102244:	693b      	ldr	r3, [r7, #16]
 8102246:	695a      	ldr	r2, [r3, #20]
 8102248:	68fb      	ldr	r3, [r7, #12]
 810224a:	009b      	lsls	r3, r3, #2
 810224c:	4413      	add	r3, r2

	barrierVar = core_getBarrierVar( coreVar, barrierId );
 810224e:	61fb      	str	r3, [r7, #28]
 8102250:	69fb      	ldr	r3, [r7, #28]
 8102252:	61bb      	str	r3, [r7, #24]
 8102254:	2300      	movs	r3, #0
 8102256:	617b      	str	r3, [r7, #20]
    barrier->barrierState = barrierStateParam;
 8102258:	69bb      	ldr	r3, [r7, #24]
 810225a:	697a      	ldr	r2, [r7, #20]
 810225c:	601a      	str	r2, [r3, #0]
}
 810225e:	bf00      	nop
	coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__ACTIVATED );

	/* MEMORY BARRIER HAS TO BE IMPLEMENTED */
}
 8102260:	bf00      	nop
 8102262:	3720      	adds	r7, #32
 8102264:	46bd      	mov	sp, r7
 8102266:	bd80      	pop	{r7, pc}

08102268 <deviceIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void deviceIO_togglePin(BitWidthType id, void *GPIOx, BitWidthType GPIO_Pin)
{
 8102268:	b580      	push	{r7, lr}
 810226a:	b084      	sub	sp, #16
 810226c:	af00      	add	r7, sp, #0
 810226e:	60f8      	str	r0, [r7, #12]
 8102270:	60b9      	str	r1, [r7, #8]
 8102272:	607a      	str	r2, [r7, #4]
    CILGPIO_togglePin( GPIOx, GPIO_Pin );
 8102274:	6879      	ldr	r1, [r7, #4]
 8102276:	68b8      	ldr	r0, [r7, #8]
 8102278:	f001 fb52 	bl	8103920 <CILGPIO_togglePin>

	__SUPRESS_UNUSED_VAR(id);
}
 810227c:	bf00      	nop
 810227e:	3710      	adds	r7, #16
 8102280:	46bd      	mov	sp, r7
 8102282:	bd80      	pop	{r7, pc}

08102284 <memoryManager_heapInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryManager_heapInit( CosmOS_CoreVariableType * coreVar )
{
 8102284:	b480      	push	{r7}
 8102286:	b089      	sub	sp, #36	; 0x24
 8102288:	af00      	add	r7, sp, #0
 810228a:	6078      	str	r0, [r7, #4]
 810228c:	687b      	ldr	r3, [r7, #4]
 810228e:	60bb      	str	r3, [r7, #8]
    return (core->programVars);
 8102290:	68bb      	ldr	r3, [r7, #8]
 8102292:	68db      	ldr	r3, [r3, #12]

	CosmOS_ProgramVariableType * programVars;
	CosmOS_MallocVariableType * currentMallocVar;


	programVars = core_getCoreProgramVars( coreVar );
 8102294:	61bb      	str	r3, [r7, #24]
 8102296:	687b      	ldr	r3, [r7, #4]
 8102298:	60fb      	str	r3, [r7, #12]
    return (core->cfg->numberOfPrograms);
 810229a:	68fb      	ldr	r3, [r7, #12]
 810229c:	681b      	ldr	r3, [r3, #0]
 810229e:	685b      	ldr	r3, [r3, #4]
	numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 81022a0:	617b      	str	r3, [r7, #20]

	for (BitWidthType i = 0; i < numberOfPrograms; i++)
 81022a2:	2300      	movs	r3, #0
 81022a4:	61fb      	str	r3, [r7, #28]
 81022a6:	e01a      	b.n	81022de <memoryManager_heapInit+0x5a>
	{
		if (programVars[i].cfg->programHeapSize)
 81022a8:	69fb      	ldr	r3, [r7, #28]
 81022aa:	011b      	lsls	r3, r3, #4
 81022ac:	69ba      	ldr	r2, [r7, #24]
 81022ae:	4413      	add	r3, r2
 81022b0:	681b      	ldr	r3, [r3, #0]
 81022b2:	699b      	ldr	r3, [r3, #24]
 81022b4:	2b00      	cmp	r3, #0
 81022b6:	d00f      	beq.n	81022d8 <memoryManager_heapInit+0x54>
		{
			currentMallocVar = (CosmOS_MallocVariableType *)programVars[i].cfg->programHeapLowAddress;
 81022b8:	69fb      	ldr	r3, [r7, #28]
 81022ba:	011b      	lsls	r3, r3, #4
 81022bc:	69ba      	ldr	r2, [r7, #24]
 81022be:	4413      	add	r3, r2
 81022c0:	681b      	ldr	r3, [r3, #0]
 81022c2:	69db      	ldr	r3, [r3, #28]
 81022c4:	613b      	str	r3, [r7, #16]

			currentMallocVar->prior = NULL;
 81022c6:	693b      	ldr	r3, [r7, #16]
 81022c8:	2200      	movs	r2, #0
 81022ca:	601a      	str	r2, [r3, #0]
			currentMallocVar->next = NULL;
 81022cc:	693b      	ldr	r3, [r7, #16]
 81022ce:	2200      	movs	r2, #0
 81022d0:	605a      	str	r2, [r3, #4]
			currentMallocVar->size = (BitWidthType)ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType));
 81022d2:	693b      	ldr	r3, [r7, #16]
 81022d4:	220c      	movs	r2, #12
 81022d6:	609a      	str	r2, [r3, #8]
	for (BitWidthType i = 0; i < numberOfPrograms; i++)
 81022d8:	69fb      	ldr	r3, [r7, #28]
 81022da:	3301      	adds	r3, #1
 81022dc:	61fb      	str	r3, [r7, #28]
 81022de:	69fa      	ldr	r2, [r7, #28]
 81022e0:	697b      	ldr	r3, [r7, #20]
 81022e2:	429a      	cmp	r2, r3
 81022e4:	d3e0      	bcc.n	81022a8 <memoryManager_heapInit+0x24>
		}
	}
}
 81022e6:	bf00      	nop
 81022e8:	bf00      	nop
 81022ea:	3724      	adds	r7, #36	; 0x24
 81022ec:	46bd      	mov	sp, r7
 81022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022f2:	4770      	bx	lr

081022f4 <memoryProtection_init>:
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_init(AddressType codeMemoryHighAddress,\
												AddressType codeMemoryLowAddress, \
												AddressType stackMemoryHighAddress, \
												AddressType stackMemoryLowAddress)
{
 81022f4:	b580      	push	{r7, lr}
 81022f6:	b084      	sub	sp, #16
 81022f8:	af00      	add	r7, sp, #0
 81022fa:	60f8      	str	r0, [r7, #12]
 81022fc:	60b9      	str	r1, [r7, #8]
 81022fe:	607a      	str	r2, [r7, #4]
 8102300:	603b      	str	r3, [r7, #0]
    CILmemoryProtection_init(codeMemoryHighAddress,codeMemoryLowAddress,
 8102302:	683b      	ldr	r3, [r7, #0]
 8102304:	687a      	ldr	r2, [r7, #4]
 8102306:	68b9      	ldr	r1, [r7, #8]
 8102308:	68f8      	ldr	r0, [r7, #12]
 810230a:	f001 fb19 	bl	8103940 <CILmemoryProtection_init>
							stackMemoryHighAddress,stackMemoryLowAddress);
}
 810230e:	bf00      	nop
 8102310:	3710      	adds	r7, #16
 8102312:	46bd      	mov	sp, r7
 8102314:	bd80      	pop	{r7, pc}

08102316 <memoryProtection_setMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_setMemoryProtection(CosmOS_CoreVariableType * core,CosmOS_SchedulableVariableType  * schedulable)
{
 8102316:	b580      	push	{r7, lr}
 8102318:	b09c      	sub	sp, #112	; 0x70
 810231a:	af00      	add	r7, sp, #0
 810231c:	6078      	str	r0, [r7, #4]
 810231e:	6039      	str	r1, [r7, #0]
 8102320:	683b      	ldr	r3, [r7, #0]
 8102322:	60bb      	str	r3, [r7, #8]
    return (schedulable->cfg->programId);
 8102324:	68bb      	ldr	r3, [r7, #8]
 8102326:	681b      	ldr	r3, [r3, #0]
 8102328:	699b      	ldr	r3, [r3, #24]

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulable );
 810232a:	66fb      	str	r3, [r7, #108]	; 0x6c
 810232c:	687b      	ldr	r3, [r7, #4]
 810232e:	613b      	str	r3, [r7, #16]
 8102330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102332:	60fb      	str	r3, [r7, #12]
    return (&(core->programVars[programIterator]));
 8102334:	693b      	ldr	r3, [r7, #16]
 8102336:	68da      	ldr	r2, [r3, #12]
 8102338:	68fb      	ldr	r3, [r7, #12]
 810233a:	011b      	lsls	r3, r3, #4
 810233c:	4413      	add	r3, r2
    programVar = core_getCoreProgramVar( core, programId );
 810233e:	66bb      	str	r3, [r7, #104]	; 0x68
 8102340:	683b      	ldr	r3, [r7, #0]
 8102342:	617b      	str	r3, [r7, #20]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8102344:	697b      	ldr	r3, [r7, #20]
 8102346:	681b      	ldr	r3, [r3, #0]
 8102348:	681b      	ldr	r3, [r3, #0]

    stack = schedulable_getStack( schedulable );
 810234a:	667b      	str	r3, [r7, #100]	; 0x64
 810234c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810234e:	62bb      	str	r3, [r7, #40]	; 0x28
 8102350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102352:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackLowAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackLowAddress);
 8102354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102356:	685b      	ldr	r3, [r3, #4]
    lowAddress = stack_getStackLowAddress( stack );
 8102358:	623b      	str	r3, [r7, #32]
 810235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810235c:	61fb      	str	r3, [r7, #28]
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackHighAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackHighAddress);
 810235e:	69fb      	ldr	r3, [r7, #28]
 8102360:	689b      	ldr	r3, [r3, #8]
    highAddress = stack_getStackHighAddress( stack );
 8102362:	61bb      	str	r3, [r7, #24]
    CILmemoryProtection_setStackOverflowProtection( lowAddress, highAddress );
 8102364:	69b9      	ldr	r1, [r7, #24]
 8102366:	6a38      	ldr	r0, [r7, #32]
 8102368:	f001 fc3a 	bl	8103be0 <CILmemoryProtection_setStackOverflowProtection>
}
 810236c:	bf00      	nop
 810236e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102370:	647b      	str	r3, [r7, #68]	; 0x44
 8102372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102374:	643b      	str	r3, [r7, #64]	; 0x40
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemorySize(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemorySize);
 8102376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102378:	681b      	ldr	r3, [r3, #0]
 810237a:	68db      	ldr	r3, [r3, #12]
    size = program_getProgramMemorySize( program );
 810237c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810237e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102380:	63bb      	str	r3, [r7, #56]	; 0x38
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryLowAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryLowAddress);
 8102382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102384:	681b      	ldr	r3, [r3, #0]
 8102386:	691b      	ldr	r3, [r3, #16]
    lowAddress = program_getProgramMemoryLowAddress( program );
 8102388:	637b      	str	r3, [r7, #52]	; 0x34
 810238a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810238c:	633b      	str	r3, [r7, #48]	; 0x30
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryHighAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryHighAddress);
 810238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102390:	681b      	ldr	r3, [r3, #0]
 8102392:	695b      	ldr	r3, [r3, #20]
    highAddress = program_getProgramMemoryHighAddress( program );
 8102394:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ( size )
 8102396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102398:	2b00      	cmp	r3, #0
 810239a:	d003      	beq.n	81023a4 <memoryProtection_setMemoryProtection+0x8e>
        CILmemoryProtection_setProgramMemoryProtection( lowAddress, highAddress );
 810239c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810239e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 81023a0:	f001 fc7a 	bl	8103c98 <CILmemoryProtection_setProgramMemoryProtection>
}
 81023a4:	bf00      	nop
 81023a6:	683b      	ldr	r3, [r7, #0]
 81023a8:	663b      	str	r3, [r7, #96]	; 0x60
 81023aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81023ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    return (schedulable->cfg->peripheralAccessSize);
 81023ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81023b0:	681b      	ldr	r3, [r3, #0]
 81023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    size = schedulable_getPeripheralAccessSize( schedulable );
 81023b4:	65bb      	str	r3, [r7, #88]	; 0x58
 81023b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81023b8:	657b      	str	r3, [r7, #84]	; 0x54
    return (schedulable->cfg->peripheralAccessLowAddress);
 81023ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81023bc:	681b      	ldr	r3, [r3, #0]
 81023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    lowAddress = schedulable_getPeripheralAccessLowAddress( schedulable );
 81023c0:	653b      	str	r3, [r7, #80]	; 0x50
 81023c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81023c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    return (schedulable->cfg->peripheralAccessHighAddress);
 81023c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    highAddress = schedulable_getPeripheralAccessHighAddress( schedulable );
 81023cc:	64bb      	str	r3, [r7, #72]	; 0x48
    if ( size )
 81023ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81023d0:	2b00      	cmp	r3, #0
 81023d2:	d003      	beq.n	81023dc <memoryProtection_setMemoryProtection+0xc6>
        CILmemoryProtection_setSchedulablePeripheralProtection( lowAddress, highAddress );
 81023d4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 81023d6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 81023d8:	f001 fcba 	bl	8103d50 <CILmemoryProtection_setSchedulablePeripheralProtection>
}
 81023dc:	bf00      	nop

    memoryProtection_setStackOverflowProtection( stack );
    memoryProtection_setProgramMemoryProtection( programVar );
	memoryProtection_setSchedulablePeripheralProtection( schedulable );
}
 81023de:	bf00      	nop
 81023e0:	3770      	adds	r7, #112	; 0x70
 81023e2:	46bd      	mov	sp, r7
 81023e4:	bd80      	pop	{r7, pc}

081023e6 <memoryProtection_isMemoryRegionProtected>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BooleanType memoryProtection_isMemoryRegionProtected(CosmOS_CoreVariableType * core, void * regionLowAddressPointer, BitWidthType size)
{
 81023e6:	b480      	push	{r7}
 81023e8:	b097      	sub	sp, #92	; 0x5c
 81023ea:	af00      	add	r7, sp, #0
 81023ec:	60f8      	str	r0, [r7, #12]
 81023ee:	60b9      	str	r1, [r7, #8]
 81023f0:	607a      	str	r2, [r7, #4]
				programLowAddress,
				programHighAddress,
				regionLowAddress,
				regionHighAddress;

	CosmOS_BooleanType isMemoryRegionProtected = True;
 81023f2:	2301      	movs	r3, #1
 81023f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;
	CosmOS_SchedulableVariableType * schedulable;

	regionLowAddress = (AddressType)regionLowAddressPointer;
 81023f8:	68bb      	ldr	r3, [r7, #8]
 81023fa:	653b      	str	r3, [r7, #80]	; 0x50
 81023fc:	68fb      	ldr	r3, [r7, #12]
 81023fe:	617b      	str	r3, [r7, #20]
    return (core->programInExecution);
 8102400:	697b      	ldr	r3, [r7, #20]
 8102402:	689b      	ldr	r3, [r3, #8]

    programVar = core_getCoreProgramInExecution( core );
 8102404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102406:	68fb      	ldr	r3, [r7, #12]
 8102408:	61bb      	str	r3, [r7, #24]
    return (core->schedulableInExecution);
 810240a:	69bb      	ldr	r3, [r7, #24]
 810240c:	685b      	ldr	r3, [r3, #4]
	schedulable = core_getCoreSchedulableInExecution( core );
 810240e:	64bb      	str	r3, [r7, #72]	; 0x48
 8102410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102412:	61fb      	str	r3, [r7, #28]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8102414:	69fb      	ldr	r3, [r7, #28]
 8102416:	681b      	ldr	r3, [r3, #0]
 8102418:	681b      	ldr	r3, [r3, #0]
    stack = schedulable_getStack( schedulable );
 810241a:	647b      	str	r3, [r7, #68]	; 0x44
 810241c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810241e:	623b      	str	r3, [r7, #32]
    return (stack->stackLowAddress);
 8102420:	6a3b      	ldr	r3, [r7, #32]
 8102422:	685b      	ldr	r3, [r3, #4]

	stackLowAddress = stack_getStackLowAddress( stack );
 8102424:	643b      	str	r3, [r7, #64]	; 0x40
 8102426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102428:	627b      	str	r3, [r7, #36]	; 0x24
    return (stack->stackHighAddress);
 810242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810242c:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 810242e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8102430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102432:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->programMemoryLowAddress);
 8102434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102436:	681b      	ldr	r3, [r3, #0]
 8102438:	691b      	ldr	r3, [r3, #16]

    programLowAddress = program_getProgramMemoryLowAddress( programVar );
 810243a:	63bb      	str	r3, [r7, #56]	; 0x38
 810243c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810243e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (program->cfg->programMemoryHighAddress);
 8102440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102442:	681b      	ldr	r3, [r3, #0]
 8102444:	695b      	ldr	r3, [r3, #20]
    programHighAddress = program_getProgramMemoryHighAddress( programVar );
 8102446:	637b      	str	r3, [r7, #52]	; 0x34

	regionHighAddress = regionLowAddress + (AddressType)size;
 8102448:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	4413      	add	r3, r2
 810244e:	633b      	str	r3, [r7, #48]	; 0x30

	if (((regionHighAddress < stackHighAddress) && (regionLowAddress > stackLowAddress)) || \
 8102450:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102454:	429a      	cmp	r2, r3
 8102456:	d203      	bcs.n	8102460 <memoryProtection_isMemoryRegionProtected+0x7a>
 8102458:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 810245a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810245c:	429a      	cmp	r2, r3
 810245e:	d807      	bhi.n	8102470 <memoryProtection_isMemoryRegionProtected+0x8a>
 8102460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102464:	429a      	cmp	r2, r3
 8102466:	d206      	bcs.n	8102476 <memoryProtection_isMemoryRegionProtected+0x90>
		((regionHighAddress < programHighAddress) && (regionLowAddress > programLowAddress)))
 8102468:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 810246a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810246c:	429a      	cmp	r2, r3
 810246e:	d902      	bls.n	8102476 <memoryProtection_isMemoryRegionProtected+0x90>
	{
		isMemoryRegionProtected = False;
 8102470:	2300      	movs	r3, #0
 8102472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	return isMemoryRegionProtected;
 8102476:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 810247a:	4618      	mov	r0, r3
 810247c:	375c      	adds	r7, #92	; 0x5c
 810247e:	46bd      	mov	sp, r7
 8102480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102484:	4770      	bx	lr
	...

08102488 <mutex_getMutexInternal>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_getMutexInternal(BitWidthType entityId, CosmOS_MutexVariableType * mutexVar)
{
 8102488:	b580      	push	{r7, lr}
 810248a:	b088      	sub	sp, #32
 810248c:	af00      	add	r7, sp, #0
 810248e:	6078      	str	r0, [r7, #4]
 8102490:	6039      	str	r1, [r7, #0]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8102492:	464b      	mov	r3, r9
 8102494:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 8102496:	693b      	ldr	r3, [r7, #16]

	CosmOS_CoreVariableType * coreVar;
	CosmOS_ThreadVariableType * threadVar;


	coreVar = CILcore_getCoreVar();
 8102498:	61fb      	str	r3, [r7, #28]

	mutexState = CILmutex_tryMutex(&(mutexVar->mutex));
 810249a:	683b      	ldr	r3, [r7, #0]
 810249c:	4618      	mov	r0, r3
 810249e:	f001 fcb3 	bl	8103e08 <CILmutex_tryMutex>
 81024a2:	61b8      	str	r0, [r7, #24]
	if ( mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED )
 81024a4:	69bb      	ldr	r3, [r7, #24]
 81024a6:	2b02      	cmp	r3, #2
 81024a8:	d104      	bne.n	81024b4 <mutex_getMutexInternal+0x2c>
	{
		mutexVar->schedulableOwner = coreVar->schedulableInExecution;
 81024aa:	69fb      	ldr	r3, [r7, #28]
 81024ac:	685a      	ldr	r2, [r3, #4]
 81024ae:	683b      	ldr	r3, [r7, #0]
 81024b0:	605a      	str	r2, [r3, #4]
 81024b2:	e01e      	b.n	81024f2 <mutex_getMutexInternal+0x6a>
		__SUPRESS_UNUSED_VAR(threadVar);
	}
	else
	{
		threadVar = program_getProgramThread(coreVar->programInExecution,coreVar->schedulableInExecution->cfg->instanceId);
 81024b4:	69fb      	ldr	r3, [r7, #28]
 81024b6:	689a      	ldr	r2, [r3, #8]
 81024b8:	69fb      	ldr	r3, [r7, #28]
 81024ba:	685b      	ldr	r3, [r3, #4]
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	695b      	ldr	r3, [r3, #20]
 81024c0:	60fa      	str	r2, [r7, #12]
 81024c2:	60bb      	str	r3, [r7, #8]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * program_getProgramThread(CosmOS_ProgramVariableType * program, BitWidthType threadIterator)
{
    return (&(program->threadVars[threadIterator]));
 81024c4:	68fb      	ldr	r3, [r7, #12]
 81024c6:	6899      	ldr	r1, [r3, #8]
 81024c8:	68ba      	ldr	r2, [r7, #8]
 81024ca:	4613      	mov	r3, r2
 81024cc:	005b      	lsls	r3, r3, #1
 81024ce:	4413      	add	r3, r2
 81024d0:	009b      	lsls	r3, r3, #2
 81024d2:	440b      	add	r3, r1
 81024d4:	617b      	str	r3, [r7, #20]
		threadVar->blockingMutexVar = mutexVar;
 81024d6:	697b      	ldr	r3, [r7, #20]
 81024d8:	683a      	ldr	r2, [r7, #0]
 81024da:	609a      	str	r2, [r3, #8]
		coreVar->schedulableInExecution->state = SCHEDULABLE_STATE_ENUM__BLOCKED;
 81024dc:	69fb      	ldr	r3, [r7, #28]
 81024de:	685b      	ldr	r3, [r3, #4]
 81024e0:	2202      	movs	r2, #2
 81024e2:	605a      	str	r2, [r3, #4]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void CILinterrupt_contextSwitchRoutineTrigger(void)
{
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 81024e4:	4b05      	ldr	r3, [pc, #20]	; (81024fc <mutex_getMutexInternal+0x74>)
 81024e6:	685b      	ldr	r3, [r3, #4]
 81024e8:	4a04      	ldr	r2, [pc, #16]	; (81024fc <mutex_getMutexInternal+0x74>)
 81024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81024ee:	6053      	str	r3, [r2, #4]
}
 81024f0:	bf00      	nop
		CILinterrupt_contextSwitchRoutineTrigger();
	}

	__SUPRESS_UNUSED_VAR(entityId);
	return mutexState;
 81024f2:	69bb      	ldr	r3, [r7, #24]
}
 81024f4:	4618      	mov	r0, r3
 81024f6:	3720      	adds	r7, #32
 81024f8:	46bd      	mov	sp, r7
 81024fa:	bd80      	pop	{r7, pc}
 81024fc:	e000ed00 	.word	0xe000ed00

08102500 <mutex_getMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_getMutex(CosmOS_MutexVariableType * mutexVar)
{
 8102500:	b580      	push	{r7, lr}
 8102502:	b088      	sub	sp, #32
 8102504:	af00      	add	r7, sp, #0
 8102506:	6078      	str	r0, [r7, #4]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8102508:	464b      	mov	r3, r9
 810250a:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 810250c:	693b      	ldr	r3, [r7, #16]
	CosmOS_MutexStateType mutexState;

	CosmOS_CoreVariableType * coreVar;


	coreVar = CILcore_getCoreVar();
 810250e:	61bb      	str	r3, [r7, #24]

	isMutexInProtectedMemory = memoryProtection_isMemoryRegionProtected(coreVar, (void *)mutexVar, sizeof(mutexVar));
 8102510:	2204      	movs	r2, #4
 8102512:	6879      	ldr	r1, [r7, #4]
 8102514:	69b8      	ldr	r0, [r7, #24]
 8102516:	f7ff ff66 	bl	81023e6 <memoryProtection_isMemoryRegionProtected>
 810251a:	4603      	mov	r3, r0
 810251c:	75fb      	strb	r3, [r7, #23]

	if ( IS_NOT(isMutexInProtectedMemory) )
 810251e:	7dfb      	ldrb	r3, [r7, #23]
 8102520:	2b00      	cmp	r3, #0
 8102522:	d12c      	bne.n	810257e <mutex_getMutex+0x7e>
	{
		if (coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 8102524:	69bb      	ldr	r3, [r7, #24]
 8102526:	685b      	ldr	r3, [r3, #4]
 8102528:	681b      	ldr	r3, [r3, #0]
 810252a:	685b      	ldr	r3, [r3, #4]
 810252c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102530:	d122      	bne.n	8102578 <mutex_getMutex+0x78>
 8102532:	69bb      	ldr	r3, [r7, #24]
 8102534:	60fb      	str	r3, [r7, #12]
 8102536:	687b      	ldr	r3, [r7, #4]
 8102538:	60bb      	str	r3, [r7, #8]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType mutex_willCauseDeadlock(CosmOS_CoreVariableType * coreVar, CosmOS_MutexVariableType * mutexVar)
{
	return ((mutexVar->mutex IS_EQUAL_TO MUTEX_STATE_ENUM__OCCUPIED)\
 810253a:	68bb      	ldr	r3, [r7, #8]
 810253c:	681b      	ldr	r3, [r3, #0]
			AND (coreVar->schedulableInExecution IS_EQUAL_TO mutexVar->schedulableOwner)) ? True : False;
 810253e:	2b01      	cmp	r3, #1
 8102540:	d107      	bne.n	8102552 <mutex_getMutex+0x52>
 8102542:	68fb      	ldr	r3, [r7, #12]
 8102544:	685a      	ldr	r2, [r3, #4]
 8102546:	68bb      	ldr	r3, [r7, #8]
 8102548:	685b      	ldr	r3, [r3, #4]
 810254a:	429a      	cmp	r2, r3
 810254c:	d101      	bne.n	8102552 <mutex_getMutex+0x52>
 810254e:	2301      	movs	r3, #1
 8102550:	e000      	b.n	8102554 <mutex_getMutex+0x54>
 8102552:	2300      	movs	r3, #0
 8102554:	b2db      	uxtb	r3, r3
		{
			willCauseDeadlock = mutex_willCauseDeadlock(coreVar, mutexVar);
 8102556:	75bb      	strb	r3, [r7, #22]
			if( willCauseDeadlock )
 8102558:	7dbb      	ldrb	r3, [r7, #22]
 810255a:	2b00      	cmp	r3, #0
 810255c:	d003      	beq.n	8102566 <mutex_getMutex+0x66>
			{
				mutexState = MUTEX_STATE_ENUM__DEADLOCK_WARNING;
 810255e:	f04f 33ff 	mov.w	r3, #4294967295
 8102562:	61fb      	str	r3, [r7, #28]
 8102564:	e00d      	b.n	8102582 <mutex_getMutex+0x82>
			}
			else
			{
				do
				{
					mutexState = cosmosApiInternal_mutex_getMutexInternal(mutexVar);
 8102566:	6879      	ldr	r1, [r7, #4]
 8102568:	2019      	movs	r0, #25
 810256a:	f001 f85d 	bl	8103628 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 810256e:	61f8      	str	r0, [r7, #28]
				} while ( mutexState IS_NOT_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED );
 8102570:	69fb      	ldr	r3, [r7, #28]
 8102572:	2b02      	cmp	r3, #2
 8102574:	d1f7      	bne.n	8102566 <mutex_getMutex+0x66>
 8102576:	e004      	b.n	8102582 <mutex_getMutex+0x82>

			}
		}
		else
		{
			mutexState = MUTEX_STATE_ENUM__ERROR_ONLY_THREADS_CAN_MUTEX;
 8102578:	2305      	movs	r3, #5
 810257a:	61fb      	str	r3, [r7, #28]
 810257c:	e001      	b.n	8102582 <mutex_getMutex+0x82>
		}
	}
	else
	{
		mutexState = MUTEX_STATE_ENUM__ERROR_INVALID_MUTEX_ADDRESS;
 810257e:	2306      	movs	r3, #6
 8102580:	61fb      	str	r3, [r7, #28]
	}

	return mutexState;
 8102582:	69fb      	ldr	r3, [r7, #28]
}
 8102584:	4618      	mov	r0, r3
 8102586:	3720      	adds	r7, #32
 8102588:	46bd      	mov	sp, r7
 810258a:	bd80      	pop	{r7, pc}

0810258c <mutex_tryMutexInternal>:
{
 810258c:	b580      	push	{r7, lr}
 810258e:	b086      	sub	sp, #24
 8102590:	af00      	add	r7, sp, #0
 8102592:	6078      	str	r0, [r7, #4]
 8102594:	6039      	str	r1, [r7, #0]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8102596:	464b      	mov	r3, r9
 8102598:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 810259a:	68fb      	ldr	r3, [r7, #12]
	coreVar = CILcore_getCoreVar();
 810259c:	617b      	str	r3, [r7, #20]
	mutexState = CILmutex_tryMutex(&(mutexVar->mutex));
 810259e:	683b      	ldr	r3, [r7, #0]
 81025a0:	4618      	mov	r0, r3
 81025a2:	f001 fc31 	bl	8103e08 <CILmutex_tryMutex>
 81025a6:	6138      	str	r0, [r7, #16]
	if ( mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED )
 81025a8:	693b      	ldr	r3, [r7, #16]
 81025aa:	2b02      	cmp	r3, #2
 81025ac:	d103      	bne.n	81025b6 <mutex_tryMutexInternal+0x2a>
		mutexVar->schedulableOwner = coreVar->schedulableInExecution;
 81025ae:	697b      	ldr	r3, [r7, #20]
 81025b0:	685a      	ldr	r2, [r3, #4]
 81025b2:	683b      	ldr	r3, [r7, #0]
 81025b4:	605a      	str	r2, [r3, #4]
	return mutexState;
 81025b6:	693b      	ldr	r3, [r7, #16]
}
 81025b8:	4618      	mov	r0, r3
 81025ba:	3718      	adds	r7, #24
 81025bc:	46bd      	mov	sp, r7
 81025be:	bd80      	pop	{r7, pc}

081025c0 <mutex_releaseMutexInternal>:
{
 81025c0:	b580      	push	{r7, lr}
 81025c2:	b08a      	sub	sp, #40	; 0x28
 81025c4:	af00      	add	r7, sp, #0
 81025c6:	6078      	str	r0, [r7, #4]
 81025c8:	6039      	str	r1, [r7, #0]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81025ca:	464b      	mov	r3, r9
 81025cc:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 81025ce:	693b      	ldr	r3, [r7, #16]
	coreVar = CILcore_getCoreVar();
 81025d0:	61fb      	str	r3, [r7, #28]
	mutexState = CILmutex_releaseMutex(&(mutexVar->mutex));
 81025d2:	683b      	ldr	r3, [r7, #0]
 81025d4:	4618      	mov	r0, r3
 81025d6:	f001 fc30 	bl	8103e3a <CILmutex_releaseMutex>
 81025da:	61b8      	str	r0, [r7, #24]
	higherPriorityThreadBlocked = False;
 81025dc:	2300      	movs	r3, #0
 81025de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (BitWidthType iterator = 0; iterator < coreVar->programInExecution->cfg->numberOfThreads; iterator++)
 81025e2:	2300      	movs	r3, #0
 81025e4:	623b      	str	r3, [r7, #32]
 81025e6:	e04b      	b.n	8102680 <mutex_releaseMutexInternal+0xc0>
		if (coreVar->programInExecution->threadVars[iterator].blockingMutexVar IS_EQUAL_TO mutexVar)
 81025e8:	69fb      	ldr	r3, [r7, #28]
 81025ea:	689b      	ldr	r3, [r3, #8]
 81025ec:	6899      	ldr	r1, [r3, #8]
 81025ee:	6a3a      	ldr	r2, [r7, #32]
 81025f0:	4613      	mov	r3, r2
 81025f2:	005b      	lsls	r3, r3, #1
 81025f4:	4413      	add	r3, r2
 81025f6:	009b      	lsls	r3, r3, #2
 81025f8:	440b      	add	r3, r1
 81025fa:	689b      	ldr	r3, [r3, #8]
 81025fc:	683a      	ldr	r2, [r7, #0]
 81025fe:	429a      	cmp	r2, r3
 8102600:	d13b      	bne.n	810267a <mutex_releaseMutexInternal+0xba>
			coreVar->programInExecution->threadVars[iterator].schedulable->state = SCHEDULABLE_STATE_ENUM__READY;
 8102602:	69fb      	ldr	r3, [r7, #28]
 8102604:	689b      	ldr	r3, [r3, #8]
 8102606:	6899      	ldr	r1, [r3, #8]
 8102608:	6a3a      	ldr	r2, [r7, #32]
 810260a:	4613      	mov	r3, r2
 810260c:	005b      	lsls	r3, r3, #1
 810260e:	4413      	add	r3, r2
 8102610:	009b      	lsls	r3, r3, #2
 8102612:	440b      	add	r3, r1
 8102614:	685b      	ldr	r3, [r3, #4]
 8102616:	f04f 32ff 	mov.w	r2, #4294967295
 810261a:	605a      	str	r2, [r3, #4]
			coreVar->programInExecution->threadVars[iterator].blockingMutexVar = NULL;
 810261c:	69fb      	ldr	r3, [r7, #28]
 810261e:	689b      	ldr	r3, [r3, #8]
 8102620:	6899      	ldr	r1, [r3, #8]
 8102622:	6a3a      	ldr	r2, [r7, #32]
 8102624:	4613      	mov	r3, r2
 8102626:	005b      	lsls	r3, r3, #1
 8102628:	4413      	add	r3, r2
 810262a:	009b      	lsls	r3, r3, #2
 810262c:	440b      	add	r3, r1
 810262e:	2200      	movs	r2, #0
 8102630:	609a      	str	r2, [r3, #8]
			threadVar = program_getProgramThread(coreVar->programInExecution,coreVar->schedulableInExecution->cfg->instanceId);
 8102632:	69fb      	ldr	r3, [r7, #28]
 8102634:	689a      	ldr	r2, [r3, #8]
 8102636:	69fb      	ldr	r3, [r7, #28]
 8102638:	685b      	ldr	r3, [r3, #4]
 810263a:	681b      	ldr	r3, [r3, #0]
 810263c:	695b      	ldr	r3, [r3, #20]
 810263e:	60fa      	str	r2, [r7, #12]
 8102640:	60bb      	str	r3, [r7, #8]
 8102642:	68fb      	ldr	r3, [r7, #12]
 8102644:	6899      	ldr	r1, [r3, #8]
 8102646:	68ba      	ldr	r2, [r7, #8]
 8102648:	4613      	mov	r3, r2
 810264a:	005b      	lsls	r3, r3, #1
 810264c:	4413      	add	r3, r2
 810264e:	009b      	lsls	r3, r3, #2
 8102650:	440b      	add	r3, r1
 8102652:	617b      	str	r3, [r7, #20]
			if ( coreVar->programInExecution->threadVars[iterator].cfg->priority > threadVar->cfg->priority )
 8102654:	69fb      	ldr	r3, [r7, #28]
 8102656:	689b      	ldr	r3, [r3, #8]
 8102658:	6899      	ldr	r1, [r3, #8]
 810265a:	6a3a      	ldr	r2, [r7, #32]
 810265c:	4613      	mov	r3, r2
 810265e:	005b      	lsls	r3, r3, #1
 8102660:	4413      	add	r3, r2
 8102662:	009b      	lsls	r3, r3, #2
 8102664:	440b      	add	r3, r1
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	681a      	ldr	r2, [r3, #0]
 810266a:	697b      	ldr	r3, [r7, #20]
 810266c:	681b      	ldr	r3, [r3, #0]
 810266e:	681b      	ldr	r3, [r3, #0]
 8102670:	429a      	cmp	r2, r3
 8102672:	d902      	bls.n	810267a <mutex_releaseMutexInternal+0xba>
				higherPriorityThreadBlocked = True;
 8102674:	2301      	movs	r3, #1
 8102676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (BitWidthType iterator = 0; iterator < coreVar->programInExecution->cfg->numberOfThreads; iterator++)
 810267a:	6a3b      	ldr	r3, [r7, #32]
 810267c:	3301      	adds	r3, #1
 810267e:	623b      	str	r3, [r7, #32]
 8102680:	69fb      	ldr	r3, [r7, #28]
 8102682:	689b      	ldr	r3, [r3, #8]
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	689b      	ldr	r3, [r3, #8]
 8102688:	6a3a      	ldr	r2, [r7, #32]
 810268a:	429a      	cmp	r2, r3
 810268c:	d3ac      	bcc.n	81025e8 <mutex_releaseMutexInternal+0x28>
	if (higherPriorityThreadBlocked)
 810268e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102692:	2b00      	cmp	r3, #0
 8102694:	d006      	beq.n	81026a4 <mutex_releaseMutexInternal+0xe4>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8102696:	4b06      	ldr	r3, [pc, #24]	; (81026b0 <mutex_releaseMutexInternal+0xf0>)
 8102698:	685b      	ldr	r3, [r3, #4]
 810269a:	4a05      	ldr	r2, [pc, #20]	; (81026b0 <mutex_releaseMutexInternal+0xf0>)
 810269c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81026a0:	6053      	str	r3, [r2, #4]
}
 81026a2:	bf00      	nop
	return mutexState;
 81026a4:	69bb      	ldr	r3, [r7, #24]
}
 81026a6:	4618      	mov	r0, r3
 81026a8:	3728      	adds	r7, #40	; 0x28
 81026aa:	46bd      	mov	sp, r7
 81026ac:	bd80      	pop	{r7, pc}
 81026ae:	bf00      	nop
 81026b0:	e000ed00 	.word	0xe000ed00

081026b4 <mutex_tryMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_tryMutex(CosmOS_MutexVariableType * mutexVar)
{
 81026b4:	b580      	push	{r7, lr}
 81026b6:	b086      	sub	sp, #24
 81026b8:	af00      	add	r7, sp, #0
 81026ba:	6078      	str	r0, [r7, #4]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81026bc:	464b      	mov	r3, r9
 81026be:	60bb      	str	r3, [r7, #8]
    return (CosmOS_CoreVariableType *)result;
 81026c0:	68bb      	ldr	r3, [r7, #8]
	CosmOS_MutexStateType mutexState;

	CosmOS_CoreVariableType * coreVar;


	coreVar = CILcore_getCoreVar();
 81026c2:	613b      	str	r3, [r7, #16]

	isMutexInProtectedMemory = memoryProtection_isMemoryRegionProtected(coreVar, (void *)mutexVar, sizeof(mutexVar));
 81026c4:	2204      	movs	r2, #4
 81026c6:	6879      	ldr	r1, [r7, #4]
 81026c8:	6938      	ldr	r0, [r7, #16]
 81026ca:	f7ff fe8c 	bl	81023e6 <memoryProtection_isMemoryRegionProtected>
 81026ce:	4603      	mov	r3, r0
 81026d0:	73fb      	strb	r3, [r7, #15]

	if ( IS_NOT(isMutexInProtectedMemory) )
 81026d2:	7bfb      	ldrb	r3, [r7, #15]
 81026d4:	2b00      	cmp	r3, #0
 81026d6:	d10f      	bne.n	81026f8 <mutex_tryMutex+0x44>
	{
		if (coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 81026d8:	693b      	ldr	r3, [r7, #16]
 81026da:	685b      	ldr	r3, [r3, #4]
 81026dc:	681b      	ldr	r3, [r3, #0]
 81026de:	685b      	ldr	r3, [r3, #4]
 81026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81026e4:	d105      	bne.n	81026f2 <mutex_tryMutex+0x3e>
		{
			mutexState = cosmosApiInternal_mutex_tryMutexInternal(mutexVar);
 81026e6:	6879      	ldr	r1, [r7, #4]
 81026e8:	201a      	movs	r0, #26
 81026ea:	f000 ff9d 	bl	8103628 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 81026ee:	6178      	str	r0, [r7, #20]
 81026f0:	e004      	b.n	81026fc <mutex_tryMutex+0x48>
		}
		else
		{
			mutexState = MUTEX_STATE_ENUM__ERROR_ONLY_THREADS_CAN_MUTEX;
 81026f2:	2305      	movs	r3, #5
 81026f4:	617b      	str	r3, [r7, #20]
 81026f6:	e001      	b.n	81026fc <mutex_tryMutex+0x48>
		}
	}
	else
	{
		mutexState = MUTEX_STATE_ENUM__ERROR_INVALID_MUTEX_ADDRESS;
 81026f8:	2306      	movs	r3, #6
 81026fa:	617b      	str	r3, [r7, #20]
	}

	return mutexState;
 81026fc:	697b      	ldr	r3, [r7, #20]
}
 81026fe:	4618      	mov	r0, r3
 8102700:	3718      	adds	r7, #24
 8102702:	46bd      	mov	sp, r7
 8102704:	bd80      	pop	{r7, pc}

08102706 <mutex_releaseMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_releaseMutex(CosmOS_MutexVariableType * mutexVar)
{
 8102706:	b580      	push	{r7, lr}
 8102708:	b088      	sub	sp, #32
 810270a:	af00      	add	r7, sp, #0
 810270c:	6078      	str	r0, [r7, #4]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 810270e:	464b      	mov	r3, r9
 8102710:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 8102712:	693b      	ldr	r3, [r7, #16]
	CosmOS_MutexStateType mutexState;

	CosmOS_CoreVariableType * coreVar;


	coreVar = CILcore_getCoreVar();
 8102714:	61bb      	str	r3, [r7, #24]

	isMutexInProtectedMemory = memoryProtection_isMemoryRegionProtected(coreVar, (void *)mutexVar, sizeof(mutexVar));
 8102716:	2204      	movs	r2, #4
 8102718:	6879      	ldr	r1, [r7, #4]
 810271a:	69b8      	ldr	r0, [r7, #24]
 810271c:	f7ff fe63 	bl	81023e6 <memoryProtection_isMemoryRegionProtected>
 8102720:	4603      	mov	r3, r0
 8102722:	75fb      	strb	r3, [r7, #23]

	if ( IS_NOT(isMutexInProtectedMemory) )
 8102724:	7dfb      	ldrb	r3, [r7, #23]
 8102726:	2b00      	cmp	r3, #0
 8102728:	d12a      	bne.n	8102780 <mutex_releaseMutex+0x7a>
	{
		if (coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 810272a:	69bb      	ldr	r3, [r7, #24]
 810272c:	685b      	ldr	r3, [r3, #4]
 810272e:	681b      	ldr	r3, [r3, #0]
 8102730:	685b      	ldr	r3, [r3, #4]
 8102732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102736:	d120      	bne.n	810277a <mutex_releaseMutex+0x74>
 8102738:	69bb      	ldr	r3, [r7, #24]
 810273a:	60fb      	str	r3, [r7, #12]
 810273c:	687b      	ldr	r3, [r7, #4]
 810273e:	60bb      	str	r3, [r7, #8]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType mutex_ownsSchedulableMutex(CosmOS_CoreVariableType * coreVar, CosmOS_MutexVariableType * mutexVar)
{
	return (coreVar->schedulableInExecution IS_EQUAL_TO mutexVar->schedulableOwner) ? True : False;
 8102740:	68fb      	ldr	r3, [r7, #12]
 8102742:	685a      	ldr	r2, [r3, #4]
 8102744:	68bb      	ldr	r3, [r7, #8]
 8102746:	685b      	ldr	r3, [r3, #4]
 8102748:	429a      	cmp	r2, r3
 810274a:	bf0c      	ite	eq
 810274c:	2301      	moveq	r3, #1
 810274e:	2300      	movne	r3, #0
 8102750:	b2db      	uxtb	r3, r3
		{
			ownsSchedulableMutex = mutex_ownsSchedulableMutex(coreVar, mutexVar);
 8102752:	75bb      	strb	r3, [r7, #22]
			if ( mutexVar->mutex IS_EQUAL_TO MUTEX_STATE_ENUM__OCCUPIED )
 8102754:	687b      	ldr	r3, [r7, #4]
 8102756:	681b      	ldr	r3, [r3, #0]
 8102758:	2b01      	cmp	r3, #1
 810275a:	d10b      	bne.n	8102774 <mutex_releaseMutex+0x6e>
			{
				if ( ownsSchedulableMutex )
 810275c:	7dbb      	ldrb	r3, [r7, #22]
 810275e:	2b00      	cmp	r3, #0
 8102760:	d005      	beq.n	810276e <mutex_releaseMutex+0x68>
				{
					mutexState = cosmosApiInternal_mutex_releaseMutexInternal(mutexVar);
 8102762:	6879      	ldr	r1, [r7, #4]
 8102764:	201b      	movs	r0, #27
 8102766:	f000 ff5f 	bl	8103628 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 810276a:	61f8      	str	r0, [r7, #28]
 810276c:	e00a      	b.n	8102784 <mutex_releaseMutex+0x7e>
				}
				else
				{
					mutexState = MUTEX_STATE_ENUM__ERROR_SCHEDULABLE_IS_NOT_OWNER;
 810276e:	2303      	movs	r3, #3
 8102770:	61fb      	str	r3, [r7, #28]
 8102772:	e007      	b.n	8102784 <mutex_releaseMutex+0x7e>
				}
			}
			else
			{
				mutexState = MUTEX_STATE_ENUM__ERROR_NOT_IN_OCCUPIED_STATE;
 8102774:	2304      	movs	r3, #4
 8102776:	61fb      	str	r3, [r7, #28]
 8102778:	e004      	b.n	8102784 <mutex_releaseMutex+0x7e>
			}
		}
		else
		{
			mutexState = MUTEX_STATE_ENUM__ERROR_ONLY_THREADS_CAN_MUTEX;
 810277a:	2305      	movs	r3, #5
 810277c:	61fb      	str	r3, [r7, #28]
 810277e:	e001      	b.n	8102784 <mutex_releaseMutex+0x7e>
		}
	}
	else
	{
		mutexState = MUTEX_STATE_ENUM__ERROR_INVALID_MUTEX_ADDRESS;
 8102780:	2306      	movs	r3, #6
 8102782:	61fb      	str	r3, [r7, #28]
	}

	return mutexState;
 8102784:	69fb      	ldr	r3, [r7, #28]
}
 8102786:	4618      	mov	r0, r3
 8102788:	3720      	adds	r7, #32
 810278a:	46bd      	mov	sp, r7
 810278c:	bd80      	pop	{r7, pc}
 810278e:	bf00      	nop

08102790 <os_getOsVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_OsVariableType * os_getOsVar(void)
{
 8102790:	b480      	push	{r7}
 8102792:	af00      	add	r7, sp, #0
    return &OsVar;
 8102794:	4b02      	ldr	r3, [pc, #8]	; (81027a0 <os_getOsVar+0x10>)
}
 8102796:	4618      	mov	r0, r3
 8102798:	46bd      	mov	sp, r7
 810279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810279e:	4770      	bx	lr
 81027a0:	3800835c 	.word	0x3800835c

081027a4 <os_kernelPanic>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_kernelPanic(void)
{
 81027a4:	b580      	push	{r7, lr}
 81027a6:	b082      	sub	sp, #8
 81027a8:	af00      	add	r7, sp, #0
	CosmOS_CoreVariableType * coreVar;


	coreVar = core_getCoreVar();
 81027aa:	f7ff fc70 	bl	810208e <core_getCoreVar>
 81027ae:	6078      	str	r0, [r7, #4]
    coreVar->cfg->kernelPanicHook();
 81027b0:	687b      	ldr	r3, [r7, #4]
 81027b2:	681b      	ldr	r3, [r3, #0]
 81027b4:	691b      	ldr	r3, [r3, #16]
 81027b6:	4798      	blx	r3

	for(;;);
 81027b8:	e7fe      	b.n	81027b8 <os_kernelPanic+0x14>

081027ba <os_start>:
{
 81027ba:	b580      	push	{r7, lr}
 81027bc:	b082      	sub	sp, #8
 81027be:	af00      	add	r7, sp, #0
 81027c0:	6078      	str	r0, [r7, #4]
    scheduler_start();
 81027c2:	f000 fbc7 	bl	8102f54 <scheduler_start>
};
 81027c6:	bf00      	nop
 81027c8:	3708      	adds	r7, #8
 81027ca:	46bd      	mov	sp, r7
 81027cc:	bd80      	pop	{r7, pc}

081027ce <os_write8>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_write8(BitWidthType entityId,uint8_t *address,uint8_t value)
{
 81027ce:	b480      	push	{r7}
 81027d0:	b085      	sub	sp, #20
 81027d2:	af00      	add	r7, sp, #0
 81027d4:	60f8      	str	r0, [r7, #12]
 81027d6:	60b9      	str	r1, [r7, #8]
 81027d8:	4613      	mov	r3, r2
 81027da:	71fb      	strb	r3, [r7, #7]
	//TODO: memoryProtection_isMemoryRegionProtected check
	*address = value;
 81027dc:	68bb      	ldr	r3, [r7, #8]
 81027de:	79fa      	ldrb	r2, [r7, #7]
 81027e0:	701a      	strb	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(entityId);
}
 81027e2:	bf00      	nop
 81027e4:	3714      	adds	r7, #20
 81027e6:	46bd      	mov	sp, r7
 81027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027ec:	4770      	bx	lr

081027ee <os_write16>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_write16(BitWidthType entityId,uint16_t *address,uint16_t value)
{
 81027ee:	b480      	push	{r7}
 81027f0:	b085      	sub	sp, #20
 81027f2:	af00      	add	r7, sp, #0
 81027f4:	60f8      	str	r0, [r7, #12]
 81027f6:	60b9      	str	r1, [r7, #8]
 81027f8:	4613      	mov	r3, r2
 81027fa:	80fb      	strh	r3, [r7, #6]
	//TODO: memoryProtection_isMemoryRegionProtected check
	*address = value;
 81027fc:	68bb      	ldr	r3, [r7, #8]
 81027fe:	88fa      	ldrh	r2, [r7, #6]
 8102800:	801a      	strh	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(entityId);
}
 8102802:	bf00      	nop
 8102804:	3714      	adds	r7, #20
 8102806:	46bd      	mov	sp, r7
 8102808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810280c:	4770      	bx	lr

0810280e <os_write32>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_write32(BitWidthType entityId,uint32_t *address,uint32_t value)
{
 810280e:	b480      	push	{r7}
 8102810:	b085      	sub	sp, #20
 8102812:	af00      	add	r7, sp, #0
 8102814:	60f8      	str	r0, [r7, #12]
 8102816:	60b9      	str	r1, [r7, #8]
 8102818:	607a      	str	r2, [r7, #4]
	//TODO: memoryProtection_isMemoryRegionProtected check
	*address = value;
 810281a:	68bb      	ldr	r3, [r7, #8]
 810281c:	687a      	ldr	r2, [r7, #4]
 810281e:	601a      	str	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(entityId);
}
 8102820:	bf00      	nop
 8102822:	3714      	adds	r7, #20
 8102824:	46bd      	mov	sp, r7
 8102826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810282a:	4770      	bx	lr

0810282c <osBoot_bootValidate>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osBoot_bootValidate(void)
{
 810282c:	b580      	push	{r7, lr}
 810282e:	b08c      	sub	sp, #48	; 0x30
 8102830:	af00      	add	r7, sp, #0
	BitWidthType  coreId,
					programSectionsNumber;

	CosmOS_ProgramSectionConfigurationType * programSections;

	coreId = CILcore_getCoreId();
 8102832:	f001 f83b 	bl	81038ac <CILcore_getCoreId>
 8102836:	62b8      	str	r0, [r7, #40]	; 0x28

	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 8102838:	4a2f      	ldr	r2, [pc, #188]	; (81028f8 <osBoot_bootValidate+0xcc>)
 810283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810283c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8102840:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 8102842:	4a2d      	ldr	r2, [pc, #180]	; (81028f8 <osBoot_bootValidate+0xcc>)
 8102844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102846:	00db      	lsls	r3, r3, #3
 8102848:	4413      	add	r3, r2
 810284a:	685b      	ldr	r3, [r3, #4]
 810284c:	623b      	str	r3, [r7, #32]


	for (BitWidthType i=0; i < programSectionsNumber; i++)
 810284e:	2300      	movs	r3, #0
 8102850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102852:	e047      	b.n	81028e4 <osBoot_bootValidate+0xb8>
	{
		osBoot_validateSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 8102854:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102856:	4613      	mov	r3, r2
 8102858:	005b      	lsls	r3, r3, #1
 810285a:	4413      	add	r3, r2
 810285c:	009b      	lsls	r3, r3, #2
 810285e:	461a      	mov	r2, r3
 8102860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102862:	4413      	add	r3, r2
 8102864:	6818      	ldr	r0, [r3, #0]
 8102866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102868:	4613      	mov	r3, r2
 810286a:	005b      	lsls	r3, r3, #1
 810286c:	4413      	add	r3, r2
 810286e:	009b      	lsls	r3, r3, #2
 8102870:	461a      	mov	r2, r3
 8102872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102874:	4413      	add	r3, r2
 8102876:	6859      	ldr	r1, [r3, #4]
 8102878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810287a:	4613      	mov	r3, r2
 810287c:	005b      	lsls	r3, r3, #1
 810287e:	4413      	add	r3, r2
 8102880:	009b      	lsls	r3, r3, #2
 8102882:	461a      	mov	r2, r3
 8102884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102886:	4413      	add	r3, r2
 8102888:	689b      	ldr	r3, [r3, #8]
 810288a:	61f8      	str	r0, [r7, #28]
 810288c:	61b9      	str	r1, [r7, #24]
 810288e:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8102890:	69ba      	ldr	r2, [r7, #24]
 8102892:	69fb      	ldr	r3, [r7, #28]
 8102894:	1ad3      	subs	r3, r2, r3
 8102896:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 8102898:	69fb      	ldr	r3, [r7, #28]
 810289a:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 810289c:	697b      	ldr	r3, [r7, #20]
 810289e:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(unsigned char)); i++ )
 81028a0:	2300      	movs	r3, #0
 81028a2:	607b      	str	r3, [r7, #4]
 81028a4:	e016      	b.n	81028d4 <osBoot_bootValidate+0xa8>
		cosmosAssert( (*pDst++) IS_EQUAL_TO (*pSrc++) );
 81028a6:	68fb      	ldr	r3, [r7, #12]
 81028a8:	1c5a      	adds	r2, r3, #1
 81028aa:	60fa      	str	r2, [r7, #12]
 81028ac:	781a      	ldrb	r2, [r3, #0]
 81028ae:	68bb      	ldr	r3, [r7, #8]
 81028b0:	1c59      	adds	r1, r3, #1
 81028b2:	60b9      	str	r1, [r7, #8]
 81028b4:	781b      	ldrb	r3, [r3, #0]
 81028b6:	429a      	cmp	r2, r3
 81028b8:	bf0c      	ite	eq
 81028ba:	2301      	moveq	r3, #1
 81028bc:	2300      	movne	r3, #0
 81028be:	b2db      	uxtb	r3, r3
 81028c0:	603b      	str	r3, [r7, #0]
    if ( IS_NOT( result ) )
 81028c2:	683b      	ldr	r3, [r7, #0]
 81028c4:	2b00      	cmp	r3, #0
 81028c6:	d101      	bne.n	81028cc <osBoot_bootValidate+0xa0>
        os_kernelPanic();
 81028c8:	f7ff ff6c 	bl	81027a4 <os_kernelPanic>
}
 81028cc:	bf00      	nop
	for ( BitWidthType i = 0; i < (size * sizeof(unsigned char)); i++ )
 81028ce:	687b      	ldr	r3, [r7, #4]
 81028d0:	3301      	adds	r3, #1
 81028d2:	607b      	str	r3, [r7, #4]
 81028d4:	693a      	ldr	r2, [r7, #16]
 81028d6:	687b      	ldr	r3, [r7, #4]
 81028d8:	429a      	cmp	r2, r3
 81028da:	d8e4      	bhi.n	81028a6 <osBoot_bootValidate+0x7a>
}
 81028dc:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 81028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81028e0:	3301      	adds	r3, #1
 81028e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 81028e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81028e6:	6a3b      	ldr	r3, [r7, #32]
 81028e8:	429a      	cmp	r2, r3
 81028ea:	d3b3      	bcc.n	8102854 <osBoot_bootValidate+0x28>
	}
};
 81028ec:	bf00      	nop
 81028ee:	bf00      	nop
 81028f0:	3730      	adds	r7, #48	; 0x30
 81028f2:	46bd      	mov	sp, r7
 81028f4:	bd80      	pop	{r7, pc}
 81028f6:	bf00      	nop
 81028f8:	0810c1d8 	.word	0x0810c1d8

081028fc <osInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osInit_init(BitWidthType entityId)
{
 81028fc:	b580      	push	{r7, lr}
 81028fe:	b084      	sub	sp, #16
 8102900:	af00      	add	r7, sp, #0
 8102902:	6078      	str	r0, [r7, #4]
    CosmOS_CoreVariableType * coreVar;
    CosmOS_OsVariableType * osVar;
	//TODO check if the os sections were booted and init and start was not called yet

	osVar = os_getOsVar();
 8102904:	f7ff ff44 	bl	8102790 <os_getOsVar>
 8102908:	60f8      	str	r0, [r7, #12]

	CILcore_setCoreVar(osVar);
 810290a:	68f8      	ldr	r0, [r7, #12]
 810290c:	f000 ffda 	bl	81038c4 <CILcore_setCoreVar>

    coreVar = core_getCoreVar();
 8102910:	f7ff fbbd 	bl	810208e <core_getCoreVar>
 8102914:	60b8      	str	r0, [r7, #8]

    switchMemoryProtection_init(coreVar->cfg->codeMemoryHighAddress, \
 8102916:	68bb      	ldr	r3, [r7, #8]
 8102918:	681b      	ldr	r3, [r3, #0]
 810291a:	6a18      	ldr	r0, [r3, #32]
 810291c:	68bb      	ldr	r3, [r7, #8]
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	69d9      	ldr	r1, [r3, #28]
 8102922:	68bb      	ldr	r3, [r7, #8]
 8102924:	681b      	ldr	r3, [r3, #0]
 8102926:	699a      	ldr	r2, [r3, #24]
 8102928:	68bb      	ldr	r3, [r7, #8]
 810292a:	681b      	ldr	r3, [r3, #0]
 810292c:	695b      	ldr	r3, [r3, #20]
 810292e:	f7ff fce1 	bl	81022f4 <memoryProtection_init>
								coreVar->cfg->codeMemoryLowAddress, \
								coreVar->cfg->stackMemoryHighAddress, \
								coreVar->cfg->stackMemoryLowAddress );
	osBoot_bootValidate();
 8102932:	f7ff ff7b 	bl	810282c <osBoot_bootValidate>

    stackInit_init( coreVar );
 8102936:	68b8      	ldr	r0, [r7, #8]
 8102938:	f000 fded 	bl	8103516 <stackInit_init>

	memoryManager_heapInit( coreVar );
 810293c:	68b8      	ldr	r0, [r7, #8]
 810293e:	f7ff fca1 	bl	8102284 <memoryManager_heapInit>

    coreSync_getBarrier( coreVar, OS_INIT_ID );
 8102942:	2100      	movs	r1, #0
 8102944:	68b8      	ldr	r0, [r7, #8]
 8102946:	f7ff fbf9 	bl	810213c <coreSync_getBarrier>

	__SUPRESS_UNUSED_VAR(entityId);

};
 810294a:	bf00      	nop
 810294c:	3710      	adds	r7, #16
 810294e:	46bd      	mov	sp, r7
 8102950:	bd80      	pop	{r7, pc}
	...

08102954 <permission_tryAccess>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_AccessStateType permission_tryAccess(CosmOS_PermissionsConfigurationType * permission,CosmOS_CoreVariableType * coreVar)
{
 8102954:	b580      	push	{r7, lr}
 8102956:	b088      	sub	sp, #32
 8102958:	af00      	add	r7, sp, #0
 810295a:	6078      	str	r0, [r7, #4]
 810295c:	6039      	str	r1, [r7, #0]
 810295e:	683b      	ldr	r3, [r7, #0]
 8102960:	60bb      	str	r3, [r7, #8]
 8102962:	68bb      	ldr	r3, [r7, #8]
 8102964:	685b      	ldr	r3, [r3, #4]
    CosmOS_AccessStateType accessState;

    CosmOS_SchedulableVariableType * schedulableVar;

    schedulableVar = core_getCoreSchedulableInExecution( coreVar );
 8102966:	61fb      	str	r3, [r7, #28]
 8102968:	687b      	ldr	r3, [r7, #4]
 810296a:	617b      	str	r3, [r7, #20]
 810296c:	69fb      	ldr	r3, [r7, #28]
 810296e:	613b      	str	r3, [r7, #16]
    cosmosAssert( IS_NOT( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] & \
 8102970:	697b      	ldr	r3, [r7, #20]
 8102972:	681a      	ldr	r2, [r3, #0]
 8102974:	693b      	ldr	r3, [r7, #16]
 8102976:	681b      	ldr	r3, [r3, #0]
 8102978:	691b      	ldr	r3, [r3, #16]
 810297a:	491c      	ldr	r1, [pc, #112]	; (81029ec <permission_tryAccess+0x98>)
 810297c:	5ccb      	ldrb	r3, [r1, r3]
 810297e:	009b      	lsls	r3, r3, #2
 8102980:	4413      	add	r3, r2
 8102982:	681a      	ldr	r2, [r3, #0]
 8102984:	697b      	ldr	r3, [r7, #20]
 8102986:	6859      	ldr	r1, [r3, #4]
 8102988:	693b      	ldr	r3, [r7, #16]
 810298a:	681b      	ldr	r3, [r3, #0]
 810298c:	691b      	ldr	r3, [r3, #16]
 810298e:	4817      	ldr	r0, [pc, #92]	; (81029ec <permission_tryAccess+0x98>)
 8102990:	5cc3      	ldrb	r3, [r0, r3]
 8102992:	009b      	lsls	r3, r3, #2
 8102994:	440b      	add	r3, r1
 8102996:	681b      	ldr	r3, [r3, #0]
 8102998:	4013      	ands	r3, r2
 810299a:	2b00      	cmp	r3, #0
 810299c:	bf0c      	ite	eq
 810299e:	2301      	moveq	r3, #1
 81029a0:	2300      	movne	r3, #0
 81029a2:	b2db      	uxtb	r3, r3
 81029a4:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 81029a6:	68fb      	ldr	r3, [r7, #12]
 81029a8:	2b00      	cmp	r3, #0
 81029aa:	d101      	bne.n	81029b0 <permission_tryAccess+0x5c>
        os_kernelPanic();
 81029ac:	f7ff fefa 	bl	81027a4 <os_kernelPanic>
}
 81029b0:	bf00      	nop
    return ((( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] >> schedulableVar->cfg->id ) & BITLOCK_MASK ) ? \
 81029b2:	697b      	ldr	r3, [r7, #20]
 81029b4:	681a      	ldr	r2, [r3, #0]
 81029b6:	693b      	ldr	r3, [r7, #16]
 81029b8:	681b      	ldr	r3, [r3, #0]
 81029ba:	691b      	ldr	r3, [r3, #16]
 81029bc:	490b      	ldr	r1, [pc, #44]	; (81029ec <permission_tryAccess+0x98>)
 81029be:	5ccb      	ldrb	r3, [r1, r3]
 81029c0:	009b      	lsls	r3, r3, #2
 81029c2:	4413      	add	r3, r2
 81029c4:	681a      	ldr	r2, [r3, #0]
 81029c6:	693b      	ldr	r3, [r7, #16]
 81029c8:	681b      	ldr	r3, [r3, #0]
 81029ca:	691b      	ldr	r3, [r3, #16]
 81029cc:	fa22 f303 	lsr.w	r3, r2, r3
 81029d0:	f003 0301 	and.w	r3, r3, #1
            ACCESS_STATE_ENUM__ALLOWED : ACCESS_STATE_ENUM__DENIED );
 81029d4:	2b00      	cmp	r3, #0
 81029d6:	d001      	beq.n	81029dc <permission_tryAccess+0x88>
 81029d8:	2300      	movs	r3, #0
 81029da:	e001      	b.n	81029e0 <permission_tryAccess+0x8c>
 81029dc:	f04f 33ff 	mov.w	r3, #4294967295
    accessState = permission_trySchedulableAccess( permission, schedulableVar );
 81029e0:	61bb      	str	r3, [r7, #24]

    return accessState;
 81029e2:	69bb      	ldr	r3, [r7, #24]
}
 81029e4:	4618      	mov	r0, r3
 81029e6:	3720      	adds	r7, #32
 81029e8:	46bd      	mov	sp, r7
 81029ea:	bd80      	pop	{r7, pc}
 81029ec:	38000104 	.word	0x38000104

081029f0 <schedulable_setExecutionStateToFinished>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void schedulable_setExecutionStateToFinished(BitWidthType entityId)
{
 81029f0:	b580      	push	{r7, lr}
 81029f2:	b088      	sub	sp, #32
 81029f4:	af00      	add	r7, sp, #0
 81029f6:	6078      	str	r0, [r7, #4]
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 81029f8:	f7ff fb49 	bl	810208e <core_getCoreVar>
 81029fc:	61f8      	str	r0, [r7, #28]
 81029fe:	69fb      	ldr	r3, [r7, #28]
 8102a00:	60fb      	str	r3, [r7, #12]
 8102a02:	68fb      	ldr	r3, [r7, #12]
 8102a04:	685b      	ldr	r3, [r3, #4]

    schedulableVar = core_getCoreSchedulableInExecution( coreVar );
 8102a06:	61bb      	str	r3, [r7, #24]
 8102a08:	69bb      	ldr	r3, [r7, #24]
 8102a0a:	617b      	str	r3, [r7, #20]
 8102a0c:	2301      	movs	r3, #1
 8102a0e:	613b      	str	r3, [r7, #16]
    schedulable->state = stateParam;
 8102a10:	697b      	ldr	r3, [r7, #20]
 8102a12:	693a      	ldr	r2, [r7, #16]
 8102a14:	605a      	str	r2, [r3, #4]
}
 8102a16:	bf00      	nop

    schedulable_setState( schedulableVar, SCHEDULABLE_STATE_ENUM__EXECUTED );

	__SUPRESS_UNUSED_VAR(entityId);
};
 8102a18:	bf00      	nop
 8102a1a:	3720      	adds	r7, #32
 8102a1c:	46bd      	mov	sp, r7
 8102a1e:	bd80      	pop	{r7, pc}

08102a20 <scheduler_updateAlarms>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_updateAlarms(CosmOS_CoreVariableType * coreVar, BitWidthType priorTickStep)
{
 8102a20:	b580      	push	{r7, lr}
 8102a22:	b08e      	sub	sp, #56	; 0x38
 8102a24:	af00      	add	r7, sp, #0
 8102a26:	6078      	str	r0, [r7, #4]
 8102a28:	6039      	str	r1, [r7, #0]
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	623b      	str	r3, [r7, #32]
    return (core->cfg->numberOfAlarms);
 8102a2e:	6a3b      	ldr	r3, [r7, #32]
 8102a30:	681b      	ldr	r3, [r3, #0]
 8102a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28

	CosmOS_AlarmStateType alarmState;

	CosmOS_AlarmVariableType * alarmVar;

	numberOfAlarms = core_getCoreNumberOfAlarms(coreVar);
 8102a34:	633b      	str	r3, [r7, #48]	; 0x30
	for (BitWidthType iterator = 0; iterator < numberOfAlarms; iterator++)
 8102a36:	2300      	movs	r3, #0
 8102a38:	637b      	str	r3, [r7, #52]	; 0x34
 8102a3a:	e031      	b.n	8102aa0 <scheduler_updateAlarms+0x80>
 8102a3c:	687b      	ldr	r3, [r7, #4]
 8102a3e:	61bb      	str	r3, [r7, #24]
 8102a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102a42:	617b      	str	r3, [r7, #20]
    return (&(core->alarmVars[alarmId]));
 8102a44:	69bb      	ldr	r3, [r7, #24]
 8102a46:	6a19      	ldr	r1, [r3, #32]
 8102a48:	697a      	ldr	r2, [r7, #20]
 8102a4a:	4613      	mov	r3, r2
 8102a4c:	005b      	lsls	r3, r3, #1
 8102a4e:	4413      	add	r3, r2
 8102a50:	009b      	lsls	r3, r3, #2
 8102a52:	440b      	add	r3, r1
	{
		alarmVar = core_getAlarmVar(coreVar, iterator);
 8102a54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a58:	61fb      	str	r3, [r7, #28]
    return (alarm->state);
 8102a5a:	69fb      	ldr	r3, [r7, #28]
 8102a5c:	685b      	ldr	r3, [r3, #4]
		alarmState = alarm_getAlarmState(alarmVar);
 8102a5e:	62bb      	str	r3, [r7, #40]	; 0x28

		if (alarmState IS_EQUAL_TO ALARM_STATE_ENUM__ACTIVATED)
 8102a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a66:	d118      	bne.n	8102a9a <scheduler_updateAlarms+0x7a>
 8102a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a6a:	613b      	str	r3, [r7, #16]
    return (alarm->tickCount);
 8102a6c:	693b      	ldr	r3, [r7, #16]
 8102a6e:	689b      	ldr	r3, [r3, #8]
		{
			tickCount = alarm_getAlarmTickCount(alarmVar);
 8102a70:	627b      	str	r3, [r7, #36]	; 0x24

			if ( tickCount <= priorTickStep )
 8102a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102a74:	683b      	ldr	r3, [r7, #0]
 8102a76:	429a      	cmp	r2, r3
 8102a78:	d803      	bhi.n	8102a82 <scheduler_updateAlarms+0x62>
			{
				alarm_expire(alarmVar);
 8102a7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8102a7c:	f7ff f8b4 	bl	8101be8 <alarm_expire>
 8102a80:	e00b      	b.n	8102a9a <scheduler_updateAlarms+0x7a>
			}
			else
			{
				tickCount -= priorTickStep;
 8102a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102a84:	683b      	ldr	r3, [r7, #0]
 8102a86:	1ad3      	subs	r3, r2, r3
 8102a88:	627b      	str	r3, [r7, #36]	; 0x24
 8102a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a8c:	60fb      	str	r3, [r7, #12]
 8102a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102a90:	60bb      	str	r3, [r7, #8]
    alarm->tickCount = tickCountParam;
 8102a92:	68fb      	ldr	r3, [r7, #12]
 8102a94:	68ba      	ldr	r2, [r7, #8]
 8102a96:	609a      	str	r2, [r3, #8]
}
 8102a98:	bf00      	nop
	for (BitWidthType iterator = 0; iterator < numberOfAlarms; iterator++)
 8102a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102a9c:	3301      	adds	r3, #1
 8102a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8102aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102aa4:	429a      	cmp	r2, r3
 8102aa6:	d3c9      	bcc.n	8102a3c <scheduler_updateAlarms+0x1c>
				alarm_setAlarmTickCount(alarmVar,tickCount);
			}
		}
	}
}
 8102aa8:	bf00      	nop
 8102aaa:	bf00      	nop
 8102aac:	3738      	adds	r7, #56	; 0x38
 8102aae:	46bd      	mov	sp, r7
 8102ab0:	bd80      	pop	{r7, pc}

08102ab2 <scheduler_performanceScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_performanceScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks)
{
 8102ab2:	b480      	push	{r7}
 8102ab4:	b093      	sub	sp, #76	; 0x4c
 8102ab6:	af00      	add	r7, sp, #0
 8102ab8:	60f8      	str	r0, [r7, #12]
 8102aba:	60b9      	str	r1, [r7, #8]
 8102abc:	607a      	str	r2, [r7, #4]
 8102abe:	603b      	str	r3, [r7, #0]
 8102ac0:	68fb      	ldr	r3, [r7, #12]
 8102ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType scheduler_getSchedulerThreadListElementsNum(CosmOS_SchedulerVariableType * scheduler)
{
    return (scheduler->cfg->threadListElementsNum);
 8102ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102ac6:	681b      	ldr	r3, [r3, #0]
 8102ac8:	695b      	ldr	r3, [r3, #20]
	CosmOS_SchedulableStateType schedulableState;

	CosmOS_ThreadVariableType *threadVar;
	CosmOS_SchedulableVariableType *currentSchedulableVar;

    threadListElementsNum = scheduler_getSchedulerThreadListElementsNum(schedulerVar);
 8102aca:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (BitWidthType iterator = 0; iterator < threadListElementsNum; iterator++)
 8102acc:	2300      	movs	r3, #0
 8102ace:	643b      	str	r3, [r7, #64]	; 0x40
 8102ad0:	e01c      	b.n	8102b0c <scheduler_performanceScheduling+0x5a>
 8102ad2:	68fb      	ldr	r3, [r7, #12]
 8102ad4:	623b      	str	r3, [r7, #32]
 8102ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102ad8:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * scheduler_getSchedulerThreadListThreadVar(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIterator)
{
    return (CosmOS_ThreadVariableType *)(scheduler->cfg->threadList[threadListIterator].threadVar);
 8102ada:	6a3b      	ldr	r3, [r7, #32]
 8102adc:	681b      	ldr	r3, [r3, #0]
 8102ade:	685a      	ldr	r2, [r3, #4]
 8102ae0:	69fb      	ldr	r3, [r7, #28]
 8102ae2:	009b      	lsls	r3, r3, #2
 8102ae4:	4413      	add	r3, r2
 8102ae6:	681b      	ldr	r3, [r3, #0]
	{
		threadVar = scheduler_getSchedulerThreadListThreadVar(schedulerVar, iterator);
 8102ae8:	63bb      	str	r3, [r7, #56]	; 0x38
 8102aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102aec:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * thread_getThreadSchedulable(CosmOS_ThreadVariableType * thread)
{
    return (CosmOS_SchedulableVariableType *)(thread->schedulable);
 8102aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102af0:	685b      	ldr	r3, [r3, #4]
		currentSchedulableVar = thread_getThreadSchedulable(threadVar);
 8102af2:	647b      	str	r3, [r7, #68]	; 0x44
 8102af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102af6:	62bb      	str	r3, [r7, #40]	; 0x28
    return (schedulable->state);
 8102af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102afa:	685b      	ldr	r3, [r3, #4]
		schedulableState = schedulable_getState(currentSchedulableVar);
 8102afc:	637b      	str	r3, [r7, #52]	; 0x34

		if (schedulableState IS_EQUAL_TO SCHEDULABLE_STATE_ENUM__READY)
 8102afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b04:	d007      	beq.n	8102b16 <scheduler_performanceScheduling+0x64>
	for (BitWidthType iterator = 0; iterator < threadListElementsNum; iterator++)
 8102b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102b08:	3301      	adds	r3, #1
 8102b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8102b0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8102b0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102b10:	429a      	cmp	r2, r3
 8102b12:	d3de      	bcc.n	8102ad2 <scheduler_performanceScheduling+0x20>
 8102b14:	e000      	b.n	8102b18 <scheduler_performanceScheduling+0x66>
		{
			break;
 8102b16:	bf00      	nop
		}
	}

    *schedulableVar = currentSchedulableVar;
 8102b18:	68bb      	ldr	r3, [r7, #8]
 8102b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8102b1c:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = schedulable_getStackPointer(*schedulableVar);
 8102b1e:	68bb      	ldr	r3, [r7, #8]
 8102b20:	681b      	ldr	r3, [r3, #0]
 8102b22:	617b      	str	r3, [r7, #20]
    return (schedulable->stackPointer);
 8102b24:	697b      	ldr	r3, [r7, #20]
 8102b26:	689a      	ldr	r2, [r3, #8]
 8102b28:	687b      	ldr	r3, [r7, #4]
 8102b2a:	601a      	str	r2, [r3, #0]
 8102b2c:	68fb      	ldr	r3, [r7, #12]
 8102b2e:	61bb      	str	r3, [r7, #24]
    return (scheduler->cfg->preemptTick);
 8102b30:	69bb      	ldr	r3, [r7, #24]
 8102b32:	681b      	ldr	r3, [r3, #0]
 8102b34:	68db      	ldr	r3, [r3, #12]

    preemptTick = scheduler_getSchedulerPreemptTick(schedulerVar);
 8102b36:	633b      	str	r3, [r7, #48]	; 0x30
    *timerTicks = preemptTick;
 8102b38:	683b      	ldr	r3, [r7, #0]
 8102b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102b3c:	601a      	str	r2, [r3, #0]
}
 8102b3e:	bf00      	nop
 8102b40:	374c      	adds	r7, #76	; 0x4c
 8102b42:	46bd      	mov	sp, r7
 8102b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b48:	4770      	bx	lr

08102b4a <scheduler_classicScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_classicScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks, BitWidthType startTick, BitWidthType currentTick)
{
 8102b4a:	b580      	push	{r7, lr}
 8102b4c:	b088      	sub	sp, #32
 8102b4e:	af00      	add	r7, sp, #0
 8102b50:	60f8      	str	r0, [r7, #12]
 8102b52:	60b9      	str	r1, [r7, #8]
 8102b54:	607a      	str	r2, [r7, #4]
 8102b56:	603b      	str	r3, [r7, #0]
 8102b58:	68fb      	ldr	r3, [r7, #12]
 8102b5a:	617b      	str	r3, [r7, #20]
    return (CosmOS_TaskVariableType *)(scheduler->cfg->idleTaskVar);
 8102b5c:	697b      	ldr	r3, [r7, #20]
 8102b5e:	681b      	ldr	r3, [r3, #0]
 8102b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    CosmOS_TaskVariableType * taskVar;


    taskVar = scheduler_getSchedulerIdleTaskVar( schedulerVar );
 8102b62:	61fb      	str	r3, [r7, #28]
 8102b64:	69fb      	ldr	r3, [r7, #28]
 8102b66:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * task_getTaskSchedulable(CosmOS_TaskVariableType * task)
{
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8102b68:	69bb      	ldr	r3, [r7, #24]
 8102b6a:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = task_getTaskSchedulable( taskVar );
 8102b6c:	68bb      	ldr	r3, [r7, #8]
 8102b6e:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8102b70:	68bb      	ldr	r3, [r7, #8]
 8102b72:	681b      	ldr	r3, [r3, #0]
 8102b74:	4618      	mov	r0, r3
 8102b76:	f000 fca8 	bl	81034ca <stackInit_schedulableStackInit>
 8102b7a:	4602      	mov	r2, r0
 8102b7c:	687b      	ldr	r3, [r7, #4]
 8102b7e:	601a      	str	r2, [r3, #0]

    if ( startTick < currentTick )
 8102b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102b84:	429a      	cmp	r2, r3
 8102b86:	d207      	bcs.n	8102b98 <scheduler_classicScheduling+0x4e>
 8102b88:	68fb      	ldr	r3, [r7, #12]
 8102b8a:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->lastToFirstTaskTicks);
 8102b8c:	693b      	ldr	r3, [r7, #16]
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	699a      	ldr	r2, [r3, #24]
    {
        *timerTicks = scheduler_getSchedulerLastToFirstTaskTicks(schedulerVar);
 8102b92:	683b      	ldr	r3, [r7, #0]
 8102b94:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *timerTicks = startTick - currentTick;
    }
}
 8102b96:	e004      	b.n	8102ba2 <scheduler_classicScheduling+0x58>
        *timerTicks = startTick - currentTick;
 8102b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102b9c:	1ad2      	subs	r2, r2, r3
 8102b9e:	683b      	ldr	r3, [r7, #0]
 8102ba0:	601a      	str	r2, [r3, #0]
}
 8102ba2:	bf00      	nop
 8102ba4:	3720      	adds	r7, #32
 8102ba6:	46bd      	mov	sp, r7
 8102ba8:	bd80      	pop	{r7, pc}

08102baa <scheduler_scheduleNextInstance>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType scheduler_scheduleNextInstance(StackPointerType stackPointer)
{
 8102baa:	b580      	push	{r7, lr}
 8102bac:	b0c4      	sub	sp, #272	; 0x110
 8102bae:	af00      	add	r7, sp, #0
 8102bb0:	1d3b      	adds	r3, r7, #4
 8102bb2:	6018      	str	r0, [r3, #0]
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;
    CosmOS_SchedulableVariableType * priorSchedulableVar;


    coreVar = core_getCoreVar();
 8102bb4:	f7ff fa6b 	bl	810208e <core_getCoreVar>
 8102bb8:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8102bbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8102bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    return (core->schedulerVar);
 8102bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8102bc8:	691b      	ldr	r3, [r3, #16]
    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8102bca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8102bce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8102bd2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    return (core->schedulableInExecution);
 8102bd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8102bda:	685b      	ldr	r3, [r3, #4]
    priorSchedulableVar = core_getCoreSchedulableInExecution( coreVar );
 8102bdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8102be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102be4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return (scheduler->rescheduleTriggerState);
 8102be8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8102bec:	6a1b      	ldr	r3, [r3, #32]
	rescheduleTriggerState = scheduler_getSchedulerRescheduleTriggerState( schedulerVar );
 8102bee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	switch ( rescheduleTriggerState )
 8102bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8102bf6:	2b00      	cmp	r3, #0
 8102bf8:	f000 816a 	beq.w	8102ed0 <scheduler_scheduleNextInstance+0x326>
 8102bfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8102c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102c04:	f040 8195 	bne.w	8102f32 <scheduler_scheduleNextInstance+0x388>
 8102c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102c0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->cfg->hyperTick);
 8102c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8102c14:	681b      	ldr	r3, [r3, #0]
 8102c16:	689b      	ldr	r3, [r3, #8]
    {
        case RESCHEDULE_TRIGGER_STATE_ENUM__TIMER :
        {
			hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8102c18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8102c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102c20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->schedulerState);
 8102c24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8102c28:	695b      	ldr	r3, [r3, #20]
			schedulerState = scheduler_getSchedulerState( schedulerVar );
 8102c2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8102c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102c32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    return (scheduler->currentTick);
 8102c36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8102c3a:	685b      	ldr	r3, [r3, #4]
			currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8102c3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8102c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102c44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return (scheduler->cfg->maxTimerTick);
 8102c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8102c4c:	681b      	ldr	r3, [r3, #0]
 8102c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			maxTimerTick = scheduler_getSchedulerMaxTimerTick( schedulerVar );
 8102c50:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8102c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    return (scheduler->priorTickStep);
 8102c5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8102c60:	689b      	ldr	r3, [r3, #8]
			priorTickStep = scheduler_getSchedulerPriorTickStep(schedulerVar);
 8102c62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8102c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    return (scheduler->cfg->timerTickCount);
 8102c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8102c72:	681b      	ldr	r3, [r3, #0]
 8102c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			timerTickCount = scheduler_getSchedulerTimerTickCount( schedulerVar );
 8102c76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8102c7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8102c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    return (schedulable->cfg->instanceType);
 8102c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8102c86:	681b      	ldr	r3, [r3, #0]
 8102c88:	685b      	ldr	r3, [r3, #4]
			priorSchedulableInstanceType = schedulable_getInstanceType( priorSchedulableVar );
 8102c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8102c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    return (scheduler->scheduleTableIterator);
 8102c96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8102c9a:	68db      	ldr	r3, [r3, #12]
			scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8102c9c:	617b      	str	r3, [r7, #20]
 8102c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102ca2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    return (scheduler->cfg->scheduleTableElementsNum);
 8102ca6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	691b      	ldr	r3, [r3, #16]
			scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8102cae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8102cb2:	697b      	ldr	r3, [r7, #20]
 8102cb4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8102cb8:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8102cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8102cc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	681a      	ldr	r2, [r3, #0]
 8102cc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8102ccc:	00db      	lsls	r3, r3, #3
 8102cce:	4413      	add	r3, r2
 8102cd0:	681b      	ldr	r3, [r3, #0]
 8102cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

			//TODO: this should be moved to the sysTick interrupt with higher priority to have faster response - without else, that should stay here
			if ( schedulerState IS_EQUAL_TO SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK )
 8102cd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8102cda:	2b00      	cmp	r3, #0
 8102cdc:	d108      	bne.n	8102cf0 <scheduler_scheduleNextInstance+0x146>
 8102cde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8102ce2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (schedulable->state);
 8102ce6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8102cea:	685b      	ldr	r3, [r3, #4]
			{
				CosmOS_SchedulableStateType schedulableState;

				schedulableState = schedulable_getState( priorSchedulableVar );
 8102cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				{
					/* reaction */
				}
			}

			if ( priorSchedulableInstanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 8102cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8102cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102cf8:	d10d      	bne.n	8102d16 <scheduler_scheduleNextInstance+0x16c>
 8102cfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8102cfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8102d02:	1d3b      	adds	r3, r7, #4
 8102d04:	681b      	ldr	r3, [r3, #0]
 8102d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setStackPointer(CosmOS_SchedulableVariableType * schedulable, StackPointerType stackPointerParam)
{
    schedulable->stackPointer = stackPointerParam;
 8102d0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8102d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8102d12:	609a      	str	r2, [r3, #8]
}
 8102d14:	bf00      	nop
				/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
				switchScheduler_schedulable_setStackPointer( priorSchedulableVar, stackPointer );
			}

			/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
			switchScheduler_updateAlarms(coreVar, priorTickStep);
 8102d16:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8102d1a:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102d1e:	f7ff fe7f 	bl	8102a20 <scheduler_updateAlarms>

			if ( scheduleTableElementsNum AND startTick IS_EQUAL_TO currentTick )
 8102d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8102d26:	2b00      	cmp	r3, #0
 8102d28:	d06e      	beq.n	8102e08 <scheduler_scheduleNextInstance+0x25e>
 8102d2a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8102d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8102d32:	429a      	cmp	r2, r3
 8102d34:	d168      	bne.n	8102e08 <scheduler_scheduleNextInstance+0x25e>
 8102d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8102d3e:	f107 030c 	add.w	r3, r7, #12
 8102d42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8102d46:	f107 0310 	add.w	r3, r7, #16
 8102d4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8102d4e:	f107 0318 	add.w	r3, r7, #24
 8102d52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8102d56:	f107 0314 	add.w	r3, r7, #20
 8102d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8102d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8102d62:	67fb      	str	r3, [r7, #124]	; 0x7c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8102d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8102d68:	681b      	ldr	r3, [r3, #0]
 8102d6a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8102d6e:	67ba      	str	r2, [r7, #120]	; 0x78
 8102d70:	677b      	str	r3, [r7, #116]	; 0x74
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8102d72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102d74:	681b      	ldr	r3, [r3, #0]
 8102d76:	681a      	ldr	r2, [r3, #0]
 8102d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102d7a:	00db      	lsls	r3, r3, #3
 8102d7c:	4413      	add	r3, r2
 8102d7e:	685b      	ldr	r3, [r3, #4]
 8102d80:	673b      	str	r3, [r7, #112]	; 0x70
 8102d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102d84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8102d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102d88:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8102d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8102d8e:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8102d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8102d94:	681b      	ldr	r3, [r3, #0]
 8102d96:	4618      	mov	r0, r3
 8102d98:	f000 fb97 	bl	81034ca <stackInit_schedulableStackInit>
 8102d9c:	4602      	mov	r2, r0
 8102d9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8102da2:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_STATE_ENUM__RUNNING );
 8102da4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8102da8:	681b      	ldr	r3, [r3, #0]
 8102daa:	66bb      	str	r3, [r7, #104]	; 0x68
 8102dac:	2300      	movs	r3, #0
 8102dae:	667b      	str	r3, [r7, #100]	; 0x64
    schedulable->state = stateParam;
 8102db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102db2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8102db4:	605a      	str	r2, [r3, #4]
}
 8102db6:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8102db8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8102dbc:	681b      	ldr	r3, [r3, #0]
 8102dbe:	3301      	adds	r3, #1
 8102dc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8102dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8102dc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8102dc8:	fb01 f202 	mul.w	r2, r1, r2
 8102dcc:	1a9a      	subs	r2, r3, r2
 8102dce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8102dd2:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8102dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8102dd8:	681b      	ldr	r3, [r3, #0]
 8102dda:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8102dde:	663a      	str	r2, [r7, #96]	; 0x60
 8102de0:	65fb      	str	r3, [r7, #92]	; 0x5c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerScheduleTableIterator(CosmOS_SchedulerVariableType * scheduler, BitWidthType scheduleTableIteratorParam)
{
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8102de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102de4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8102de6:	60da      	str	r2, [r3, #12]
}
 8102de8:	bf00      	nop
 8102dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102dec:	65bb      	str	r3, [r7, #88]	; 0x58
    return (task->cfg->wcet);
 8102dee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102df0:	681b      	ldr	r3, [r3, #0]
 8102df2:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8102df4:	657b      	str	r3, [r7, #84]	; 0x54
    *timerTicks = wcet;
 8102df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8102dfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8102dfc:	601a      	str	r2, [r3, #0]
}
 8102dfe:	bf00      	nop
			{
				scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,\
												&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

				schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8102e00:	2300      	movs	r3, #0
 8102e02:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8102e06:	e00c      	b.n	8102e22 <scheduler_scheduleNextInstance+0x278>
			}
			else
			{
				/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
				switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 8102e08:	f107 0318 	add.w	r3, r7, #24
 8102e0c:	f107 0210 	add.w	r2, r7, #16
 8102e10:	f107 010c 	add.w	r1, r7, #12
 8102e14:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8102e18:	f7ff fe4b 	bl	8102ab2 <scheduler_performanceScheduling>
														&stackPointerRetVal, &timerTicks );
				/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
				switchScheduler_classicScheduling( schedulerVar, &schedulableVar,\
													&stackPointerRetVal, &timerTicks, startTick, currentTick );

				schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8102e1c:	2301      	movs	r3, #1
 8102e1e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			}

			schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8102e22:	f107 030c 	add.w	r3, r7, #12
 8102e26:	681a      	ldr	r2, [r3, #0]
 8102e28:	f107 0310 	add.w	r3, r7, #16
 8102e2c:	681b      	ldr	r3, [r3, #0]
 8102e2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8102e30:	647b      	str	r3, [r7, #68]	; 0x44
    schedulable->stackPointer = stackPointerParam;
 8102e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102e34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8102e36:	609a      	str	r2, [r3, #8]
}
 8102e38:	bf00      	nop
			core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8102e3a:	f107 030c 	add.w	r3, r7, #12
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	4619      	mov	r1, r3
 8102e42:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102e46:	f7ff f930 	bl	81020aa <core_setSchedulableIntoCurrentContext>
 8102e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102e4e:	653b      	str	r3, [r7, #80]	; 0x50
 8102e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8102e54:	64fb      	str	r3, [r7, #76]	; 0x4c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_SchedulerStateType schedulerStateParam)
{
    scheduler->schedulerState = schedulerStateParam;
 8102e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102e58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8102e5a:	615a      	str	r2, [r3, #20]
}
 8102e5c:	bf00      	nop

			scheduler_setSchedulerState( schedulerVar, schedulerState );

			if ( maxTimerTick < timerTicks )
 8102e5e:	69bb      	ldr	r3, [r7, #24]
 8102e60:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8102e64:	429a      	cmp	r2, r3
 8102e66:	d202      	bcs.n	8102e6e <scheduler_scheduleNextInstance+0x2c4>
			{
				timerTicks = maxTimerTick;
 8102e68:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8102e6c:	61bb      	str	r3, [r7, #24]
			}

			currentTick = ( ( currentTick + timerTicks ) % hyperTick );
 8102e6e:	69ba      	ldr	r2, [r7, #24]
 8102e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8102e74:	4413      	add	r3, r2
 8102e76:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8102e7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8102e7e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8102e82:	fb01 f202 	mul.w	r2, r1, r2
 8102e86:	1a9b      	subs	r3, r3, r2
 8102e88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
			scheduler_setSchedulerPriorTickStep(schedulerVar, timerTicks);
 8102e8c:	69bb      	ldr	r3, [r7, #24]
 8102e8e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8102e92:	63ba      	str	r2, [r7, #56]	; 0x38
 8102e94:	637b      	str	r3, [r7, #52]	; 0x34
    scheduler->priorTickStep = priorTickStepParam;
 8102e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102e9a:	609a      	str	r2, [r3, #8]
}
 8102e9c:	bf00      	nop
 8102e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102ea2:	643b      	str	r3, [r7, #64]	; 0x40
 8102ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8102ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->currentTick = currentTickParam;
 8102eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102eac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8102eae:	605a      	str	r2, [r3, #4]
}
 8102eb0:	bf00      	nop
			scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

			switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 8102eb2:	f107 030c 	add.w	r3, r7, #12
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	4619      	mov	r1, r3
 8102eba:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102ebe:	f7ff fa2a 	bl	8102316 <memoryProtection_setMemoryProtection>

			CILsysTimer_setTicks( timerTicks, timerTickCount );
 8102ec2:	69bb      	ldr	r3, [r7, #24]
 8102ec4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8102ec8:	4618      	mov	r0, r3
 8102eca:	f001 f941 	bl	8104150 <CILsysTimer_setTicks>
			break;
 8102ece:	e030      	b.n	8102f32 <scheduler_scheduleNextInstance+0x388>
 8102ed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8102ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8102ed6:	1d3b      	adds	r3, r7, #4
 8102ed8:	681b      	ldr	r3, [r3, #0]
 8102eda:	627b      	str	r3, [r7, #36]	; 0x24
    schedulable->stackPointer = stackPointerParam;
 8102edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102ee0:	609a      	str	r2, [r3, #8]
}
 8102ee2:	bf00      	nop
		case RESCHEDULE_TRIGGER_STATE_ENUM__SYSTEM :
        {
			/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
			switchScheduler_schedulable_setStackPointer( priorSchedulableVar, stackPointer );
			/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
			switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 8102ee4:	f107 0318 	add.w	r3, r7, #24
 8102ee8:	f107 0210 	add.w	r2, r7, #16
 8102eec:	f107 010c 	add.w	r1, r7, #12
 8102ef0:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8102ef4:	f7ff fddd 	bl	8102ab2 <scheduler_performanceScheduling>
													&stackPointerRetVal, &timerTicks );

			schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8102ef8:	f107 030c 	add.w	r3, r7, #12
 8102efc:	681a      	ldr	r2, [r3, #0]
 8102efe:	f107 0310 	add.w	r3, r7, #16
 8102f02:	681b      	ldr	r3, [r3, #0]
 8102f04:	633a      	str	r2, [r7, #48]	; 0x30
 8102f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    schedulable->stackPointer = stackPointerParam;
 8102f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102f0c:	609a      	str	r2, [r3, #8]
}
 8102f0e:	bf00      	nop
			core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8102f10:	f107 030c 	add.w	r3, r7, #12
 8102f14:	681b      	ldr	r3, [r3, #0]
 8102f16:	4619      	mov	r1, r3
 8102f18:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102f1c:	f7ff f8c5 	bl	81020aa <core_setSchedulableIntoCurrentContext>

			switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 8102f20:	f107 030c 	add.w	r3, r7, #12
 8102f24:	681b      	ldr	r3, [r3, #0]
 8102f26:	4619      	mov	r1, r3
 8102f28:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102f2c:	f7ff f9f3 	bl	8102316 <memoryProtection_setMemoryProtection>

			break;
 8102f30:	bf00      	nop
 8102f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102f36:	623b      	str	r3, [r7, #32]
 8102f38:	2300      	movs	r3, #0
 8102f3a:	61fb      	str	r3, [r7, #28]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerRescheduleTriggerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_RescheduleTriggerStateType paramRescheduleTriggerState)
{
    scheduler->rescheduleTriggerState = paramRescheduleTriggerState;
 8102f3c:	6a3b      	ldr	r3, [r7, #32]
 8102f3e:	69fa      	ldr	r2, [r7, #28]
 8102f40:	621a      	str	r2, [r3, #32]
}
 8102f42:	bf00      	nop
		}
	}

	scheduler_setSchedulerRescheduleTriggerState( schedulerVar, RESCHEDULE_TRIGGER_STATE_ENUM__SYSTEM );
    return stackPointerRetVal;
 8102f44:	f107 0310 	add.w	r3, r7, #16
 8102f48:	681b      	ldr	r3, [r3, #0]
};
 8102f4a:	4618      	mov	r0, r3
 8102f4c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8102f50:	46bd      	mov	sp, r7
 8102f52:	bd80      	pop	{r7, pc}

08102f54 <scheduler_start>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_start(void)
{
 8102f54:	b580      	push	{r7, lr}
 8102f56:	b0b4      	sub	sp, #208	; 0xd0
 8102f58:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8102f5a:	f7ff f898 	bl	810208e <core_getCoreVar>
 8102f5e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8102f62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8102f66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (core->schedulerVar);
 8102f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8102f6e:	691b      	ldr	r3, [r3, #16]
    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8102f70:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8102f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102f78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->cfg->hyperTick);
 8102f7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8102f80:	681b      	ldr	r3, [r3, #0]
 8102f82:	689b      	ldr	r3, [r3, #8]
    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8102f84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8102f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102f8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->currentTick);
 8102f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8102f94:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8102f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8102f9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102f9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (scheduler->cfg->maxTimerTick);
 8102fa2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	maxTimerTick = scheduler_getSchedulerMaxTimerTick( schedulerVar );
 8102faa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8102fae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->cfg->timerTickCount);
 8102fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8102fba:	681b      	ldr	r3, [r3, #0]
 8102fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	timerTickCount = scheduler_getSchedulerTimerTickCount( schedulerVar );
 8102fbe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8102fc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102fc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->scheduleTableIterator);
 8102fca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8102fce:	68db      	ldr	r3, [r3, #12]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8102fd0:	60bb      	str	r3, [r7, #8]
 8102fd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102fd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    return (scheduler->cfg->scheduleTableElementsNum);
 8102fda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8102fde:	681b      	ldr	r3, [r3, #0]
 8102fe0:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8102fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    if ( scheduleTableElementsNum )
 8102fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8102fea:	2b00      	cmp	r3, #0
 8102fec:	d022      	beq.n	8103034 <scheduler_start+0xe0>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8102fee:	68bb      	ldr	r3, [r7, #8]
 8102ff0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8102ff4:	429a      	cmp	r2, r3
 8102ff6:	bf8c      	ite	hi
 8102ff8:	2301      	movhi	r3, #1
 8102ffa:	2300      	movls	r3, #0
 8102ffc:	b2db      	uxtb	r3, r3
 8102ffe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if ( IS_NOT( result ) )
 8103002:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8103006:	2b00      	cmp	r3, #0
 8103008:	d101      	bne.n	810300e <scheduler_start+0xba>
        os_kernelPanic();
 810300a:	f7ff fbcb 	bl	81027a4 <os_kernelPanic>
}
 810300e:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8103010:	68bb      	ldr	r3, [r7, #8]
 8103012:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8103016:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 810301a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 810301e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8103022:	681b      	ldr	r3, [r3, #0]
 8103024:	681a      	ldr	r2, [r3, #0]
 8103026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 810302a:	00db      	lsls	r3, r3, #3
 810302c:	4413      	add	r3, r2
 810302e:	681b      	ldr	r3, [r3, #0]
 8103030:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    }

    if ( scheduleTableElementsNum AND (startTick IS_EQUAL_TO currentTick) )
 8103034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8103038:	2b00      	cmp	r3, #0
 810303a:	d060      	beq.n	81030fe <scheduler_start+0x1aa>
 810303c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8103040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8103044:	429a      	cmp	r2, r3
 8103046:	d15a      	bne.n	81030fe <scheduler_start+0x1aa>
 8103048:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810304c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8103050:	1d3b      	adds	r3, r7, #4
 8103052:	67fb      	str	r3, [r7, #124]	; 0x7c
 8103054:	f107 030c 	add.w	r3, r7, #12
 8103058:	67bb      	str	r3, [r7, #120]	; 0x78
 810305a:	f107 0310 	add.w	r3, r7, #16
 810305e:	677b      	str	r3, [r7, #116]	; 0x74
 8103060:	f107 0308 	add.w	r3, r7, #8
 8103064:	673b      	str	r3, [r7, #112]	; 0x70
 8103066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 810306a:	66fb      	str	r3, [r7, #108]	; 0x6c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 810306c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810306e:	681b      	ldr	r3, [r3, #0]
 8103070:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8103074:	66ba      	str	r2, [r7, #104]	; 0x68
 8103076:	667b      	str	r3, [r7, #100]	; 0x64
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8103078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	681a      	ldr	r2, [r3, #0]
 810307e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8103080:	00db      	lsls	r3, r3, #3
 8103082:	4413      	add	r3, r2
 8103084:	685b      	ldr	r3, [r3, #4]
 8103086:	663b      	str	r3, [r7, #96]	; 0x60
 8103088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810308a:	65fb      	str	r3, [r7, #92]	; 0x5c
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 810308c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810308e:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8103090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8103092:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8103094:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8103096:	681b      	ldr	r3, [r3, #0]
 8103098:	4618      	mov	r0, r3
 810309a:	f000 fa16 	bl	81034ca <stackInit_schedulableStackInit>
 810309e:	4602      	mov	r2, r0
 81030a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81030a2:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_STATE_ENUM__RUNNING );
 81030a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 81030a6:	681b      	ldr	r3, [r3, #0]
 81030a8:	65bb      	str	r3, [r7, #88]	; 0x58
 81030aa:	2300      	movs	r3, #0
 81030ac:	657b      	str	r3, [r7, #84]	; 0x54
    schedulable->state = stateParam;
 81030ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81030b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 81030b2:	605a      	str	r2, [r3, #4]
}
 81030b4:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 81030b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81030b8:	681b      	ldr	r3, [r3, #0]
 81030ba:	3301      	adds	r3, #1
 81030bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81030be:	fbb3 f2f2 	udiv	r2, r3, r2
 81030c2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 81030c4:	fb01 f202 	mul.w	r2, r1, r2
 81030c8:	1a9a      	subs	r2, r3, r2
 81030ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81030cc:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 81030ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81030d0:	681b      	ldr	r3, [r3, #0]
 81030d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 81030d6:	653a      	str	r2, [r7, #80]	; 0x50
 81030d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 81030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81030dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 81030de:	60da      	str	r2, [r3, #12]
}
 81030e0:	bf00      	nop
 81030e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81030e4:	64bb      	str	r3, [r7, #72]	; 0x48
    return (task->cfg->wcet);
 81030e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81030e8:	681b      	ldr	r3, [r3, #0]
 81030ea:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 81030ec:	647b      	str	r3, [r7, #68]	; 0x44
    *timerTicks = wcet;
 81030ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81030f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81030f2:	601a      	str	r2, [r3, #0]
}
 81030f4:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,\
											&scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 81030f6:	2300      	movs	r3, #0
 81030f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 81030fc:	e00b      	b.n	8103116 <scheduler_start+0x1c2>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 81030fe:	f107 0310 	add.w	r3, r7, #16
 8103102:	f107 020c 	add.w	r2, r7, #12
 8103106:	1d39      	adds	r1, r7, #4
 8103108:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 810310c:	f7ff fcd1 	bl	8102ab2 <scheduler_performanceScheduling>
												&stackPointerRetVal, &timerTicks );
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling( schedulerVar, &schedulableVar,\
											&stackPointerRetVal, &timerTicks, startTick, currentTick );

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8103110:	2301      	movs	r3, #1
 8103112:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8103116:	687a      	ldr	r2, [r7, #4]
 8103118:	68fb      	ldr	r3, [r7, #12]
 810311a:	63ba      	str	r2, [r7, #56]	; 0x38
 810311c:	637b      	str	r3, [r7, #52]	; 0x34
    schedulable->stackPointer = stackPointerParam;
 810311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103120:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103122:	609a      	str	r2, [r3, #8]
}
 8103124:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	4619      	mov	r1, r3
 810312a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 810312e:	f7fe ffbc 	bl	81020aa <core_setSchedulableIntoCurrentContext>
 8103132:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8103136:	643b      	str	r3, [r7, #64]	; 0x40
 8103138:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 810313c:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->schedulerState = schedulerStateParam;
 810313e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103140:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103142:	615a      	str	r2, [r3, #20]
}
 8103144:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );

	if ( maxTimerTick < timerTicks )
 8103146:	693b      	ldr	r3, [r7, #16]
 8103148:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 810314c:	429a      	cmp	r2, r3
 810314e:	d202      	bcs.n	8103156 <scheduler_start+0x202>
	{
		timerTicks = maxTimerTick;
 8103150:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8103154:	613b      	str	r3, [r7, #16]
	}

    currentTick = ( currentTick + timerTicks ) % hyperTick;
 8103156:	693a      	ldr	r2, [r7, #16]
 8103158:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 810315c:	4413      	add	r3, r2
 810315e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8103162:	fbb3 f2f2 	udiv	r2, r3, r2
 8103166:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 810316a:	fb01 f202 	mul.w	r2, r1, r2
 810316e:	1a9b      	subs	r3, r3, r2
 8103170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	scheduler_setSchedulerPriorTickStep(schedulerVar, timerTicks);
 8103174:	693b      	ldr	r3, [r7, #16]
 8103176:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 810317a:	61ba      	str	r2, [r7, #24]
 810317c:	617b      	str	r3, [r7, #20]
    scheduler->priorTickStep = priorTickStepParam;
 810317e:	69bb      	ldr	r3, [r7, #24]
 8103180:	697a      	ldr	r2, [r7, #20]
 8103182:	609a      	str	r2, [r3, #8]
}
 8103184:	bf00      	nop
 8103186:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810318a:	623b      	str	r3, [r7, #32]
 810318c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8103190:	61fb      	str	r3, [r7, #28]
    scheduler->currentTick = currentTickParam;
 8103192:	6a3b      	ldr	r3, [r7, #32]
 8103194:	69fa      	ldr	r2, [r7, #28]
 8103196:	605a      	str	r2, [r3, #4]
}
 8103198:	bf00      	nop
	scheduler_setSchedulerCurrentTick(schedulerVar, currentTick);

	switchMemoryProtection_setMemoryProtection( coreVar , schedulableVar );
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	4619      	mov	r1, r3
 810319e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 81031a2:	f7ff f8b8 	bl	8102316 <memoryProtection_setMemoryProtection>
 81031a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 81031aa:	62bb      	str	r3, [r7, #40]	; 0x28
 81031ac:	2302      	movs	r3, #2
 81031ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreOsState(CosmOS_CoreVariableType * core, CosmOS_OsStateType osStateParam)
{
    core->osState = osStateParam;
 81031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81031b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 81031b8:	761a      	strb	r2, [r3, #24]
}
 81031ba:	bf00      	nop
 81031bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81031c0:	633b      	str	r3, [r7, #48]	; 0x30
 81031c2:	2300      	movs	r3, #0
 81031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    scheduler->rescheduleTriggerState = paramRescheduleTriggerState;
 81031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81031c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81031ca:	621a      	str	r2, [r3, #32]
}
 81031cc:	bf00      	nop

	core_setCoreOsState( coreVar, OS_STATE_ENUM__STARTED );

	scheduler_setSchedulerRescheduleTriggerState( schedulerVar, RESCHEDULE_TRIGGER_STATE_ENUM__SYSTEM );

    CILsysTimer_startTimer( timerTicks, timerTickCount );
 81031ce:	693b      	ldr	r3, [r7, #16]
 81031d0:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 81031d4:	4618      	mov	r0, r3
 81031d6:	f000 ffa1 	bl	810411c <CILsysTimer_startTimer>

    CILstack_setStackPointer( stackPointerRetVal );
 81031da:	68fb      	ldr	r3, [r7, #12]
 81031dc:	4618      	mov	r0, r3
 81031de:	f000 fed3 	bl	8103f88 <CILstack_setStackPointer>
};
 81031e2:	bf00      	nop
 81031e4:	37d0      	adds	r7, #208	; 0xd0
 81031e6:	46bd      	mov	sp, r7
 81031e8:	bd80      	pop	{r7, pc}

081031ea <schedulerSync_sync>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SchedulerSyncStateType schedulerSync_sync(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_CoreVariableType * coreVar, BitWidthType currentTick, BitWidthType hyperTick)
{
 81031ea:	b580      	push	{r7, lr}
 81031ec:	b096      	sub	sp, #88	; 0x58
 81031ee:	af00      	add	r7, sp, #0
 81031f0:	60f8      	str	r0, [r7, #12]
 81031f2:	60b9      	str	r1, [r7, #8]
 81031f4:	607a      	str	r2, [r7, #4]
 81031f6:	603b      	str	r3, [r7, #0]

    CosmOS_BooleanType syncInitState;

    CosmOS_SchedulerSyncStateType schedulerState = SCHEDULER_SYNC_STATE_ENUM__NOT_IN_SYNC;
 81031f8:	2300      	movs	r3, #0
 81031fa:	657b      	str	r3, [r7, #84]	; 0x54
 81031fc:	68fb      	ldr	r3, [r7, #12]
 81031fe:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->syncInitState);
 8103200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103202:	7f1b      	ldrb	r3, [r3, #28]


    syncInitState = scheduler_getSchedulerSyncInitState( schedulerVar );
 8103204:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    if ( __COSMOS_UNLIKELY( syncInitState IS_EQUAL_TO False ) )
 8103208:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 810320c:	2b00      	cmp	r3, #0
 810320e:	bf0c      	ite	eq
 8103210:	2301      	moveq	r3, #1
 8103212:	2300      	movne	r3, #0
 8103214:	b2db      	uxtb	r3, r3
 8103216:	2b00      	cmp	r3, #0
 8103218:	d030      	beq.n	810327c <schedulerSync_sync+0x92>
 810321a:	68fb      	ldr	r3, [r7, #12]
 810321c:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->firstSyncTaskStartTick);
 810321e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103220:	681b      	ldr	r3, [r3, #0]
 8103222:	6a1b      	ldr	r3, [r3, #32]
    {
        BitWidthType firstSyncTaskStartTick;


        firstSyncTaskStartTick = scheduler_getSchedulerFirstSyncTaskStartTick( schedulerVar );
 8103224:	647b      	str	r3, [r7, #68]	; 0x44

        if ( firstSyncTaskStartTick IS_EQUAL_TO currentTick )
 8103226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8103228:	687b      	ldr	r3, [r7, #4]
 810322a:	429a      	cmp	r2, r3
 810322c:	d150      	bne.n	81032d0 <schedulerSync_sync+0xe6>
 810322e:	68fb      	ldr	r3, [r7, #12]
 8103230:	623b      	str	r3, [r7, #32]
    return (scheduler->cfg->syncTicks);
 8103232:	6a3b      	ldr	r3, [r7, #32]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks,
                          nextTick;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8103238:	643b      	str	r3, [r7, #64]	; 0x40

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 810323a:	687a      	ldr	r2, [r7, #4]
 810323c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810323e:	4413      	add	r3, r2
 8103240:	683a      	ldr	r2, [r7, #0]
 8103242:	fbb3 f2f2 	udiv	r2, r3, r2
 8103246:	6839      	ldr	r1, [r7, #0]
 8103248:	fb01 f202 	mul.w	r2, r1, r2
 810324c:	1a9b      	subs	r3, r3, r2
 810324e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8103250:	68fb      	ldr	r3, [r7, #12]
 8103252:	62bb      	str	r3, [r7, #40]	; 0x28
 8103254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103256:	627b      	str	r3, [r7, #36]	; 0x24
    scheduler->nextSyncTick = paramNextSyncTick;
 8103258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810325c:	619a      	str	r2, [r3, #24]
}
 810325e:	bf00      	nop
 8103260:	68fb      	ldr	r3, [r7, #12]
 8103262:	633b      	str	r3, [r7, #48]	; 0x30
 8103264:	2301      	movs	r3, #1
 8103266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scheduler->syncInitState = paramSyncInitState;
 810326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810326c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8103270:	771a      	strb	r2, [r3, #28]
}
 8103272:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            scheduler_setSchedulerSyncInitState( schedulerVar, True );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8103274:	f04f 33ff 	mov.w	r3, #4294967295
 8103278:	657b      	str	r3, [r7, #84]	; 0x54
 810327a:	e029      	b.n	81032d0 <schedulerSync_sync+0xe6>
 810327c:	68fb      	ldr	r3, [r7, #12]
 810327e:	61fb      	str	r3, [r7, #28]
    return (scheduler->nextSyncTick);
 8103280:	69fb      	ldr	r3, [r7, #28]
 8103282:	699b      	ldr	r3, [r3, #24]
    else
    {
        BitWidthType nextTick;


        nextTick = scheduler_getSchedulerNextSyncTick( schedulerVar );
 8103284:	64fb      	str	r3, [r7, #76]	; 0x4c

        if ( __COSMOS_UNLIKELY( nextTick IS_EQUAL_TO currentTick ) )
 8103286:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8103288:	687b      	ldr	r3, [r7, #4]
 810328a:	429a      	cmp	r2, r3
 810328c:	bf0c      	ite	eq
 810328e:	2301      	moveq	r3, #1
 8103290:	2300      	movne	r3, #0
 8103292:	b2db      	uxtb	r3, r3
 8103294:	2b00      	cmp	r3, #0
 8103296:	d01b      	beq.n	81032d0 <schedulerSync_sync+0xe6>
 8103298:	68fb      	ldr	r3, [r7, #12]
 810329a:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->syncTicks);
 810329c:	693b      	ldr	r3, [r7, #16]
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 81032a2:	64bb      	str	r3, [r7, #72]	; 0x48

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 81032a4:	687a      	ldr	r2, [r7, #4]
 81032a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81032a8:	4413      	add	r3, r2
 81032aa:	683a      	ldr	r2, [r7, #0]
 81032ac:	fbb3 f2f2 	udiv	r2, r3, r2
 81032b0:	6839      	ldr	r1, [r7, #0]
 81032b2:	fb01 f202 	mul.w	r2, r1, r2
 81032b6:	1a9b      	subs	r3, r3, r2
 81032b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 81032ba:	68fb      	ldr	r3, [r7, #12]
 81032bc:	61bb      	str	r3, [r7, #24]
 81032be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81032c0:	617b      	str	r3, [r7, #20]
    scheduler->nextSyncTick = paramNextSyncTick;
 81032c2:	69bb      	ldr	r3, [r7, #24]
 81032c4:	697a      	ldr	r2, [r7, #20]
 81032c6:	619a      	str	r2, [r3, #24]
}
 81032c8:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 81032ca:	f04f 33ff 	mov.w	r3, #4294967295
 81032ce:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    if ( schedulerState IS_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 81032d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 81032d6:	d107      	bne.n	81032e8 <schedulerSync_sync+0xfe>
    {
        coreSync_getBarrier( coreVar, SCHEDULERS_SYNC_ID );
 81032d8:	2103      	movs	r1, #3
 81032da:	68b8      	ldr	r0, [r7, #8]
 81032dc:	f7fe ff2e 	bl	810213c <coreSync_getBarrier>
        coreSync_reactivateBarrier( coreVar, SCHEDULERS_SYNC_ID );
 81032e0:	2103      	movs	r1, #3
 81032e2:	68b8      	ldr	r0, [r7, #8]
 81032e4:	f7fe ff98 	bl	8102218 <coreSync_reactivateBarrier>
    }

    return schedulerState;
 81032e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
};
 81032ea:	4618      	mov	r0, r3
 81032ec:	3758      	adds	r7, #88	; 0x58
 81032ee:	46bd      	mov	sp, r7
 81032f0:	bd80      	pop	{r7, pc}

081032f2 <spinlock_getSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_getSpinlock(BitWidthType id)
{
 81032f2:	b580      	push	{r7, lr}
 81032f4:	b090      	sub	sp, #64	; 0x40
 81032f6:	af00      	add	r7, sp, #0
 81032f8:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 81032fa:	f7ff fa49 	bl	8102790 <os_getOsVar>
 81032fe:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8103300:	464b      	mov	r3, r9
 8103302:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 8103304:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 8103306:	637b      	str	r3, [r7, #52]	; 0x34
 8103308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810330a:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 810330c:	693b      	ldr	r3, [r7, #16]
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 8103312:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 8103314:	687a      	ldr	r2, [r7, #4]
 8103316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103318:	429a      	cmp	r2, r3
 810331a:	bf34      	ite	cc
 810331c:	2301      	movcc	r3, #1
 810331e:	2300      	movcs	r3, #0
 8103320:	b2db      	uxtb	r3, r3
 8103322:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 8103324:	697b      	ldr	r3, [r7, #20]
 8103326:	2b00      	cmp	r3, #0
 8103328:	d101      	bne.n	810332e <spinlock_getSpinlock+0x3c>
        os_kernelPanic();
 810332a:	f7ff fa3b 	bl	81027a4 <os_kernelPanic>
}
 810332e:	bf00      	nop
 8103330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103332:	61fb      	str	r3, [r7, #28]
 8103334:	687b      	ldr	r3, [r7, #4]
 8103336:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SpinlockVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SpinlockVariableType * os_getOsSpinlockVar(CosmOS_OsVariableType * osVar, BitWidthType spinlockId)
{
    return (&(osVar->spinlockVars[spinlockId]));
 8103338:	69fb      	ldr	r3, [r7, #28]
 810333a:	691a      	ldr	r2, [r3, #16]
 810333c:	69bb      	ldr	r3, [r7, #24]
 810333e:	00db      	lsls	r3, r3, #3
 8103340:	4413      	add	r3, r2

	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8103342:	62fb      	str	r3, [r7, #44]	; 0x2c
 8103344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103346:	627b      	str	r3, [r7, #36]	; 0x24
 8103348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810334a:	623b      	str	r3, [r7, #32]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType spinlock_willCauseDeadlock(CosmOS_CoreVariableType * coreVar, CosmOS_SpinlockVariableType * spinlockVar)
{
    return ((spinlockVar->spinlock IS_EQUAL_TO SPINLOCK_STATE_ENUM__OCCUPIED)\
 810334c:	6a3b      	ldr	r3, [r7, #32]
 810334e:	681b      	ldr	r3, [r3, #0]
			AND (coreVar->schedulableInExecution IS_EQUAL_TO spinlockVar->schedulableOwner)) ? True : False;
 8103350:	2b01      	cmp	r3, #1
 8103352:	d107      	bne.n	8103364 <spinlock_getSpinlock+0x72>
 8103354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103356:	685a      	ldr	r2, [r3, #4]
 8103358:	6a3b      	ldr	r3, [r7, #32]
 810335a:	685b      	ldr	r3, [r3, #4]
 810335c:	429a      	cmp	r2, r3
 810335e:	d101      	bne.n	8103364 <spinlock_getSpinlock+0x72>
 8103360:	2301      	movs	r3, #1
 8103362:	e000      	b.n	8103366 <spinlock_getSpinlock+0x74>
 8103364:	2300      	movs	r3, #0
 8103366:	b2db      	uxtb	r3, r3

	willCauseDeadlock = spinlock_willCauseDeadlock(coreVar, spinlockVar);
 8103368:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if( willCauseDeadlock )
 810336c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8103370:	2b00      	cmp	r3, #0
 8103372:	d003      	beq.n	810337c <spinlock_getSpinlock+0x8a>
	{
		spinlockState = SPINLOCK_STATE_ENUM__DEADLOCK_WARNING;
 8103374:	f04f 33ff 	mov.w	r3, #4294967295
 8103378:	63fb      	str	r3, [r7, #60]	; 0x3c
 810337a:	e00d      	b.n	8103398 <spinlock_getSpinlock+0xa6>
	}
	else
	{
		spinlockState = CILspinlock_getSpinlock(&(spinlockVar->spinlock), \
 810337c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
												id, \
												coreVar->schedulableInExecution->cfg->id );
 810337e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103380:	685b      	ldr	r3, [r3, #4]
 8103382:	681b      	ldr	r3, [r3, #0]
		spinlockState = CILspinlock_getSpinlock(&(spinlockVar->spinlock), \
 8103384:	691b      	ldr	r3, [r3, #16]
 8103386:	461a      	mov	r2, r3
 8103388:	6879      	ldr	r1, [r7, #4]
 810338a:	f000 fd6a 	bl	8103e62 <CILspinlock_getSpinlock>
 810338e:	63f8      	str	r0, [r7, #60]	; 0x3c
		spinlockVar->schedulableOwner = coreVar->schedulableInExecution;
 8103390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103392:	685a      	ldr	r2, [r3, #4]
 8103394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103396:	605a      	str	r2, [r3, #4]
	}

    return spinlockState;
 8103398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810339a:	4618      	mov	r0, r3
 810339c:	3740      	adds	r7, #64	; 0x40
 810339e:	46bd      	mov	sp, r7
 81033a0:	bd80      	pop	{r7, pc}

081033a2 <spinlock_trySpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_trySpinlock(BitWidthType id)
{
 81033a2:	b580      	push	{r7, lr}
 81033a4:	b08c      	sub	sp, #48	; 0x30
 81033a6:	af00      	add	r7, sp, #0
 81033a8:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 81033aa:	f7ff f9f1 	bl	8102790 <os_getOsVar>
 81033ae:	62f8      	str	r0, [r7, #44]	; 0x2c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81033b0:	464b      	mov	r3, r9
 81033b2:	60bb      	str	r3, [r7, #8]
    return (CosmOS_CoreVariableType *)result;
 81033b4:	68bb      	ldr	r3, [r7, #8]
    coreVar = CILcore_getCoreVar();
 81033b6:	62bb      	str	r3, [r7, #40]	; 0x28
 81033b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81033ba:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfSpinlocks);
 81033bc:	68fb      	ldr	r3, [r7, #12]
 81033be:	681b      	ldr	r3, [r3, #0]
 81033c0:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 81033c2:	627b      	str	r3, [r7, #36]	; 0x24

	cosmosAssert( id < numberOfSpinlocks );
 81033c4:	687a      	ldr	r2, [r7, #4]
 81033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81033c8:	429a      	cmp	r2, r3
 81033ca:	bf34      	ite	cc
 81033cc:	2301      	movcc	r3, #1
 81033ce:	2300      	movcs	r3, #0
 81033d0:	b2db      	uxtb	r3, r3
 81033d2:	613b      	str	r3, [r7, #16]
    if ( IS_NOT( result ) )
 81033d4:	693b      	ldr	r3, [r7, #16]
 81033d6:	2b00      	cmp	r3, #0
 81033d8:	d101      	bne.n	81033de <spinlock_trySpinlock+0x3c>
        os_kernelPanic();
 81033da:	f7ff f9e3 	bl	81027a4 <os_kernelPanic>
}
 81033de:	bf00      	nop
 81033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81033e2:	61bb      	str	r3, [r7, #24]
 81033e4:	687b      	ldr	r3, [r7, #4]
 81033e6:	617b      	str	r3, [r7, #20]
    return (&(osVar->spinlockVars[spinlockId]));
 81033e8:	69bb      	ldr	r3, [r7, #24]
 81033ea:	691a      	ldr	r2, [r3, #16]
 81033ec:	697b      	ldr	r3, [r7, #20]
 81033ee:	00db      	lsls	r3, r3, #3
 81033f0:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 81033f2:	623b      	str	r3, [r7, #32]

	spinlockState = CILspinlock_trySpinlock(&(spinlockVar->spinlock), \
 81033f4:	6a38      	ldr	r0, [r7, #32]
											id, \
											coreVar->schedulableInExecution->cfg->id );
 81033f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81033f8:	685b      	ldr	r3, [r3, #4]
 81033fa:	681b      	ldr	r3, [r3, #0]
	spinlockState = CILspinlock_trySpinlock(&(spinlockVar->spinlock), \
 81033fc:	691b      	ldr	r3, [r3, #16]
 81033fe:	461a      	mov	r2, r3
 8103400:	6879      	ldr	r1, [r7, #4]
 8103402:	f000 fd4e 	bl	8103ea2 <CILspinlock_trySpinlock>
 8103406:	61f8      	str	r0, [r7, #28]

	if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8103408:	69fb      	ldr	r3, [r7, #28]
 810340a:	2b02      	cmp	r3, #2
 810340c:	d103      	bne.n	8103416 <spinlock_trySpinlock+0x74>
	{
		spinlockVar->schedulableOwner = coreVar->schedulableInExecution;
 810340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103410:	685a      	ldr	r2, [r3, #4]
 8103412:	6a3b      	ldr	r3, [r7, #32]
 8103414:	605a      	str	r2, [r3, #4]
	}

    return spinlockState;
 8103416:	69fb      	ldr	r3, [r7, #28]
}
 8103418:	4618      	mov	r0, r3
 810341a:	3730      	adds	r7, #48	; 0x30
 810341c:	46bd      	mov	sp, r7
 810341e:	bd80      	pop	{r7, pc}

08103420 <spinlock_releaseSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_releaseSpinlock(BitWidthType id)
{
 8103420:	b580      	push	{r7, lr}
 8103422:	b090      	sub	sp, #64	; 0x40
 8103424:	af00      	add	r7, sp, #0
 8103426:	6078      	str	r0, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;

    osVar = os_getOsVar();
 8103428:	f7ff f9b2 	bl	8102790 <os_getOsVar>
 810342c:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 810342e:	464b      	mov	r3, r9
 8103430:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 8103432:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 8103434:	637b      	str	r3, [r7, #52]	; 0x34
 8103436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103438:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 810343a:	693b      	ldr	r3, [r7, #16]
 810343c:	681b      	ldr	r3, [r3, #0]
 810343e:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 8103440:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 8103442:	687a      	ldr	r2, [r7, #4]
 8103444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103446:	429a      	cmp	r2, r3
 8103448:	bf34      	ite	cc
 810344a:	2301      	movcc	r3, #1
 810344c:	2300      	movcs	r3, #0
 810344e:	b2db      	uxtb	r3, r3
 8103450:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 8103452:	697b      	ldr	r3, [r7, #20]
 8103454:	2b00      	cmp	r3, #0
 8103456:	d101      	bne.n	810345c <spinlock_releaseSpinlock+0x3c>
        os_kernelPanic();
 8103458:	f7ff f9a4 	bl	81027a4 <os_kernelPanic>
}
 810345c:	bf00      	nop
 810345e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103460:	61fb      	str	r3, [r7, #28]
 8103462:	687b      	ldr	r3, [r7, #4]
 8103464:	61bb      	str	r3, [r7, #24]
    return (&(osVar->spinlockVars[spinlockId]));
 8103466:	69fb      	ldr	r3, [r7, #28]
 8103468:	691a      	ldr	r2, [r3, #16]
 810346a:	69bb      	ldr	r3, [r7, #24]
 810346c:	00db      	lsls	r3, r3, #3
 810346e:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8103470:	62fb      	str	r3, [r7, #44]	; 0x2c
 8103472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103474:	627b      	str	r3, [r7, #36]	; 0x24
 8103476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103478:	623b      	str	r3, [r7, #32]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType spinlock_ownsSchedulableSpinlock(CosmOS_CoreVariableType * coreVar, CosmOS_SpinlockVariableType * spinlockVar)
{
    return (coreVar->schedulableInExecution IS_EQUAL_TO spinlockVar->schedulableOwner) ? True : False;
 810347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810347c:	685a      	ldr	r2, [r3, #4]
 810347e:	6a3b      	ldr	r3, [r7, #32]
 8103480:	685b      	ldr	r3, [r3, #4]
 8103482:	429a      	cmp	r2, r3
 8103484:	bf0c      	ite	eq
 8103486:	2301      	moveq	r3, #1
 8103488:	2300      	movne	r3, #0
 810348a:	b2db      	uxtb	r3, r3

	ownsSchedulableSpinlock = spinlock_ownsSchedulableSpinlock(coreVar, spinlockVar);
 810348c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if ( spinlockVar->spinlock IS_EQUAL_TO SPINLOCK_STATE_ENUM__OCCUPIED )
 8103490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	2b01      	cmp	r3, #1
 8103496:	d111      	bne.n	81034bc <spinlock_releaseSpinlock+0x9c>
	{
		if ( ownsSchedulableSpinlock )
 8103498:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810349c:	2b00      	cmp	r3, #0
 810349e:	d00a      	beq.n	81034b6 <spinlock_releaseSpinlock+0x96>
		{
			spinlockState = CILspinlock_releaseSpinlock(&(spinlockVar->spinlock), \
 81034a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
														id, \
														coreVar->schedulableInExecution->cfg->id );
 81034a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81034a4:	685b      	ldr	r3, [r3, #4]
 81034a6:	681b      	ldr	r3, [r3, #0]
			spinlockState = CILspinlock_releaseSpinlock(&(spinlockVar->spinlock), \
 81034a8:	691b      	ldr	r3, [r3, #16]
 81034aa:	461a      	mov	r2, r3
 81034ac:	6879      	ldr	r1, [r7, #4]
 81034ae:	f000 fd14 	bl	8103eda <CILspinlock_releaseSpinlock>
 81034b2:	63f8      	str	r0, [r7, #60]	; 0x3c
 81034b4:	e004      	b.n	81034c0 <spinlock_releaseSpinlock+0xa0>
		}
		else
		{
			spinlockState = SPINLOCK_STATE_ENUM__ERROR_SCHEDULABLE_IS_NOT_OWNER;
 81034b6:	2303      	movs	r3, #3
 81034b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81034ba:	e001      	b.n	81034c0 <spinlock_releaseSpinlock+0xa0>
		}
	}
	else
	{
		spinlockState = SPINLOCK_STATE_ENUM__ERROR_NOT_IN_OCCUPIED_STATE;
 81034bc:	2304      	movs	r3, #4
 81034be:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	return spinlockState;
 81034c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81034c2:	4618      	mov	r0, r3
 81034c4:	3740      	adds	r7, #64	; 0x40
 81034c6:	46bd      	mov	sp, r7
 81034c8:	bd80      	pop	{r7, pc}

081034ca <stackInit_schedulableStackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType stackInit_schedulableStackInit(CosmOS_SchedulableVariableType  * schedulable)
{
 81034ca:	b580      	push	{r7, lr}
 81034cc:	b08c      	sub	sp, #48	; 0x30
 81034ce:	af00      	add	r7, sp, #0
 81034d0:	6078      	str	r0, [r7, #4]
 81034d2:	687b      	ldr	r3, [r7, #4]
 81034d4:	60fb      	str	r3, [r7, #12]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 81034d6:	68fb      	ldr	r3, [r7, #12]
 81034d8:	681b      	ldr	r3, [r3, #0]
 81034da:	681b      	ldr	r3, [r3, #0]
    StackPointerType stackPointer;

    CosmOS_StackConfigurationType * stack;


    stack = schedulable_getStack( schedulable );
 81034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 81034de:	687b      	ldr	r3, [r7, #4]
 81034e0:	613b      	str	r3, [r7, #16]
    return (schedulable->cfg->handler);
 81034e2:	693b      	ldr	r3, [r7, #16]
 81034e4:	681b      	ldr	r3, [r3, #0]
 81034e6:	689b      	ldr	r3, [r3, #8]
    handler = schedulable_getHandler( schedulable );
 81034e8:	62bb      	str	r3, [r7, #40]	; 0x28
 81034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81034ec:	617b      	str	r3, [r7, #20]
    return (stack->stackLowAddress);
 81034ee:	697b      	ldr	r3, [r7, #20]
 81034f0:	685b      	ldr	r3, [r3, #4]

    stackLowAddress = stack_getStackLowAddress( stack );
 81034f2:	627b      	str	r3, [r7, #36]	; 0x24
 81034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81034f6:	61bb      	str	r3, [r7, #24]
    return (stack->stackHighAddress);
 81034f8:	69bb      	ldr	r3, [r7, #24]
 81034fa:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 81034fc:	623b      	str	r3, [r7, #32]

    stackPointer = CILstack_stackInit( stackLowAddress, stackHighAddress, (BitWidthType)handler );
 81034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103500:	461a      	mov	r2, r3
 8103502:	6a39      	ldr	r1, [r7, #32]
 8103504:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8103506:	f000 fcfc 	bl	8103f02 <CILstack_stackInit>
 810350a:	61f8      	str	r0, [r7, #28]

    return stackPointer;
 810350c:	69fb      	ldr	r3, [r7, #28]
}
 810350e:	4618      	mov	r0, r3
 8103510:	3730      	adds	r7, #48	; 0x30
 8103512:	46bd      	mov	sp, r7
 8103514:	bd80      	pop	{r7, pc}

08103516 <stackInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void stackInit_init(CosmOS_CoreVariableType * coreVar)
{
 8103516:	b580      	push	{r7, lr}
 8103518:	b094      	sub	sp, #80	; 0x50
 810351a:	af00      	add	r7, sp, #0
 810351c:	6078      	str	r0, [r7, #4]
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->cfg->numberOfPrograms);
 8103522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103524:	681b      	ldr	r3, [r3, #0]
 8103526:	685b      	ldr	r3, [r3, #4]
                  stackPointerRetVal;

    CosmOS_ThreadVariableType * threadVar;
    CosmOS_ProgramVariableType * programVar;

    numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 8103528:	647b      	str	r3, [r7, #68]	; 0x44

    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 810352a:	2300      	movs	r3, #0
 810352c:	64fb      	str	r3, [r7, #76]	; 0x4c
 810352e:	e03a      	b.n	81035a6 <stackInit_init+0x90>
 8103530:	687b      	ldr	r3, [r7, #4]
 8103532:	627b      	str	r3, [r7, #36]	; 0x24
 8103534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103536:	623b      	str	r3, [r7, #32]
    return (&(core->programVars[programIterator]));
 8103538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810353a:	68da      	ldr	r2, [r3, #12]
 810353c:	6a3b      	ldr	r3, [r7, #32]
 810353e:	011b      	lsls	r3, r3, #4
 8103540:	4413      	add	r3, r2
    {
        programVar = core_getCoreProgramVar( coreVar, programIterator );
 8103542:	643b      	str	r3, [r7, #64]	; 0x40
 8103544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103546:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->numberOfThreads);
 8103548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810354a:	681b      	ldr	r3, [r3, #0]
 810354c:	689b      	ldr	r3, [r3, #8]
        numberOfThreads = program_getProgramNumberOfThreads( programVar );
 810354e:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8103550:	2300      	movs	r3, #0
 8103552:	64bb      	str	r3, [r7, #72]	; 0x48
 8103554:	e020      	b.n	8103598 <stackInit_init+0x82>
 8103556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103558:	613b      	str	r3, [r7, #16]
 810355a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810355c:	60fb      	str	r3, [r7, #12]
    return (&(program->threadVars[threadIterator]));
 810355e:	693b      	ldr	r3, [r7, #16]
 8103560:	6899      	ldr	r1, [r3, #8]
 8103562:	68fa      	ldr	r2, [r7, #12]
 8103564:	4613      	mov	r3, r2
 8103566:	005b      	lsls	r3, r3, #1
 8103568:	4413      	add	r3, r2
 810356a:	009b      	lsls	r3, r3, #2
 810356c:	440b      	add	r3, r1
        {
            CosmOS_SchedulableVariableType * schedulableVar;


            threadVar = program_getProgramThread( programVar, threadIterator );
 810356e:	63bb      	str	r3, [r7, #56]	; 0x38
 8103570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103572:	617b      	str	r3, [r7, #20]
 8103574:	697b      	ldr	r3, [r7, #20]
 8103576:	685b      	ldr	r3, [r3, #4]
            schedulableVar = thread_getThreadSchedulable( threadVar );
 8103578:	637b      	str	r3, [r7, #52]	; 0x34

            stackPointerRetVal = stackInit_schedulableStackInit( schedulableVar );
 810357a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810357c:	f7ff ffa5 	bl	81034ca <stackInit_schedulableStackInit>
 8103580:	6338      	str	r0, [r7, #48]	; 0x30
 8103582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103584:	61fb      	str	r3, [r7, #28]
 8103586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103588:	61bb      	str	r3, [r7, #24]
    schedulable->stackPointer = stackPointerParam;
 810358a:	69fb      	ldr	r3, [r7, #28]
 810358c:	69ba      	ldr	r2, [r7, #24]
 810358e:	609a      	str	r2, [r3, #8]
}
 8103590:	bf00      	nop
        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8103592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103594:	3301      	adds	r3, #1
 8103596:	64bb      	str	r3, [r7, #72]	; 0x48
 8103598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810359c:	429a      	cmp	r2, r3
 810359e:	d3da      	bcc.n	8103556 <stackInit_init+0x40>
    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 81035a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81035a2:	3301      	adds	r3, #1
 81035a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 81035a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 81035a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81035aa:	429a      	cmp	r2, r3
 81035ac:	d3c0      	bcc.n	8103530 <stackInit_init+0x1a>
            schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
        }
    }
}
 81035ae:	bf00      	nop
 81035b0:	bf00      	nop
 81035b2:	3750      	adds	r7, #80	; 0x50
 81035b4:	46bd      	mov	sp, r7
 81035b6:	bd80      	pop	{r7, pc}

081035b8 <sysCalls_bitWidthType_ret_void>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysCalls_bitWidthType_ret_void(BitWidthType id)
{
 81035b8:	b580      	push	{r7, lr}
 81035ba:	b082      	sub	sp, #8
 81035bc:	af00      	add	r7, sp, #0
 81035be:	6078      	str	r0, [r7, #4]
    CILsysCalls_bitWidthType_ret_void( id );
 81035c0:	6878      	ldr	r0, [r7, #4]
 81035c2:	f000 fd63 	bl	810408c <CILsysCalls_bitWidthType_ret_void>
};
 81035c6:	bf00      	nop
 81035c8:	3708      	adds	r7, #8
 81035ca:	46bd      	mov	sp, r7
 81035cc:	bd80      	pop	{r7, pc}

081035ce <sysCalls_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_ret_bitWidthType(BitWidthType id)
{
 81035ce:	b580      	push	{r7, lr}
 81035d0:	b084      	sub	sp, #16
 81035d2:	af00      	add	r7, sp, #0
 81035d4:	6078      	str	r0, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_ret_bitWidthType( id );
 81035d6:	6878      	ldr	r0, [r7, #4]
 81035d8:	f000 fd63 	bl	81040a2 <CILsysCalls_bitWidthType_ret_bitWidthType>
 81035dc:	60f8      	str	r0, [r7, #12]

    return returnValue;
 81035de:	68fb      	ldr	r3, [r7, #12]
};
 81035e0:	4618      	mov	r0, r3
 81035e2:	3710      	adds	r7, #16
 81035e4:	46bd      	mov	sp, r7
 81035e6:	bd80      	pop	{r7, pc}

081035e8 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_bitWidthType_ret_bitWidthType(BitWidthType id, BitWidthType arg)
{
 81035e8:	b580      	push	{r7, lr}
 81035ea:	b084      	sub	sp, #16
 81035ec:	af00      	add	r7, sp, #0
 81035ee:	6078      	str	r0, [r7, #4]
 81035f0:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType( id, arg );
 81035f2:	6839      	ldr	r1, [r7, #0]
 81035f4:	6878      	ldr	r0, [r7, #4]
 81035f6:	f000 fd62 	bl	81040be <CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
 81035fa:	60f8      	str	r0, [r7, #12]

    return returnValue;
 81035fc:	68fb      	ldr	r3, [r7, #12]
};
 81035fe:	4618      	mov	r0, r3
 8103600:	3710      	adds	r7, #16
 8103602:	46bd      	mov	sp, r7
 8103604:	bd80      	pop	{r7, pc}

08103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType(BitWidthType id, void * ptr, BitWidthType arg)
{
 8103606:	b580      	push	{r7, lr}
 8103608:	b086      	sub	sp, #24
 810360a:	af00      	add	r7, sp, #0
 810360c:	60f8      	str	r0, [r7, #12]
 810360e:	60b9      	str	r1, [r7, #8]
 8103610:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType( id, ptr, arg );
 8103612:	687a      	ldr	r2, [r7, #4]
 8103614:	68b9      	ldr	r1, [r7, #8]
 8103616:	68f8      	ldr	r0, [r7, #12]
 8103618:	f000 fd60 	bl	81040dc <CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 810361c:	6178      	str	r0, [r7, #20]

    return returnValue;
 810361e:	697b      	ldr	r3, [r7, #20]
};
 8103620:	4618      	mov	r0, r3
 8103622:	3718      	adds	r7, #24
 8103624:	46bd      	mov	sp, r7
 8103626:	bd80      	pop	{r7, pc}

08103628 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_voidPtr_ret_bitWidthType(BitWidthType id, void * ptr)
{
 8103628:	b580      	push	{r7, lr}
 810362a:	b084      	sub	sp, #16
 810362c:	af00      	add	r7, sp, #0
 810362e:	6078      	str	r0, [r7, #4]
 8103630:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType( id, ptr );
 8103632:	6839      	ldr	r1, [r7, #0]
 8103634:	6878      	ldr	r0, [r7, #4]
 8103636:	f000 fd61 	bl	81040fc <CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 810363a:	60f8      	str	r0, [r7, #12]

    return returnValue;
 810363c:	68fb      	ldr	r3, [r7, #12]
};
 810363e:	4618      	mov	r0, r3
 8103640:	3710      	adds	r7, #16
 8103642:	46bd      	mov	sp, r7
 8103644:	bd80      	pop	{r7, pc}

08103646 <sysJobs_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysJobs_dispatcher(BitWidthType entityId)
{
 8103646:	b580      	push	{r7, lr}
 8103648:	b098      	sub	sp, #96	; 0x60
 810364a:	af00      	add	r7, sp, #0
 810364c:	6078      	str	r0, [r7, #4]

    CosmOS_CoreVariableType * coreVar;
    CosmOS_SysJobsVariableType * sysJobsVar;


    coreVar = core_getCoreVar();
 810364e:	f7fe fd1e 	bl	810208e <core_getCoreVar>
 8103652:	6578      	str	r0, [r7, #84]	; 0x54
 8103654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103656:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->sysJobs);
 8103658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810365a:	69db      	ldr	r3, [r3, #28]
    sysJobsVar = core_getCoreSysJobs( coreVar );
 810365c:	653b      	str	r3, [r7, #80]	; 0x50
 810365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103660:	633b      	str	r3, [r7, #48]	; 0x30
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs)
{
    return (sysJobs->currentTick);
 8103662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103664:	685b      	ldr	r3, [r3, #4]

    sysJobsCurrentTick = sysJobs_getSysJobsCurrentTick( sysJobsVar );
 8103666:	64fb      	str	r3, [r7, #76]	; 0x4c
 8103668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810366a:	637b      	str	r3, [r7, #52]	; 0x34
    return (sysJobs->cfg->numOfGroups);
 810366c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	685b      	ldr	r3, [r3, #4]
    numOfGroups = sysJobs_getSysJobsNumOfGroups( sysJobsVar );
 8103672:	64bb      	str	r3, [r7, #72]	; 0x48

    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8103674:	2300      	movs	r3, #0
 8103676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8103678:	e049      	b.n	810370e <sysJobs_dispatcher+0xc8>
 810367a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810367c:	62bb      	str	r3, [r7, #40]	; 0x28
 810367e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103680:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsGroupTickMultiplicator(CosmOS_SysJobsVariableType * sysJobs, BitWidthType groupId)
{
    return (sysJobs->cfg->groups[groupId].tickMultiplicator);
 8103682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103684:	681b      	ldr	r3, [r3, #0]
 8103686:	6819      	ldr	r1, [r3, #0]
 8103688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810368a:	4613      	mov	r3, r2
 810368c:	005b      	lsls	r3, r3, #1
 810368e:	4413      	add	r3, r2
 8103690:	009b      	lsls	r3, r3, #2
 8103692:	440b      	add	r3, r1
 8103694:	689b      	ldr	r3, [r3, #8]
    {
        BitWidthType  groupTickMultiplicator;


        groupTickMultiplicator = sysJobs_getSysJobsGroupTickMultiplicator( sysJobsVar, groupIterator );
 8103696:	643b      	str	r3, [r7, #64]	; 0x40

        if ( IS_NOT( sysJobsCurrentTick % groupTickMultiplicator ) )
 8103698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810369a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 810369c:	fbb3 f2f2 	udiv	r2, r3, r2
 81036a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 81036a2:	fb01 f202 	mul.w	r2, r1, r2
 81036a6:	1a9b      	subs	r3, r3, r2
 81036a8:	2b00      	cmp	r3, #0
 81036aa:	d12d      	bne.n	8103708 <sysJobs_dispatcher+0xc2>
 81036ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81036ae:	61bb      	str	r3, [r7, #24]
 81036b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81036b2:	617b      	str	r3, [r7, #20]
    return (CosmOS_GenericVoidType *)(sysJobs->cfg->groups[groupId].handlers);
 81036b4:	69bb      	ldr	r3, [r7, #24]
 81036b6:	681b      	ldr	r3, [r3, #0]
 81036b8:	6819      	ldr	r1, [r3, #0]
 81036ba:	697a      	ldr	r2, [r7, #20]
 81036bc:	4613      	mov	r3, r2
 81036be:	005b      	lsls	r3, r3, #1
 81036c0:	4413      	add	r3, r2
 81036c2:	009b      	lsls	r3, r3, #2
 81036c4:	440b      	add	r3, r1
 81036c6:	681b      	ldr	r3, [r3, #0]
        {
            BitWidthType numOfHandlers;
            CosmOS_GenericVoidType * handlers;


            handlers = sysJobs_getSysJobsGroupHandlers( sysJobsVar, groupIterator );
 81036c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 81036ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81036cc:	623b      	str	r3, [r7, #32]
 81036ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81036d0:	61fb      	str	r3, [r7, #28]
    return (sysJobs->cfg->groups[groupId].numOfHandlers);
 81036d2:	6a3b      	ldr	r3, [r7, #32]
 81036d4:	681b      	ldr	r3, [r3, #0]
 81036d6:	6819      	ldr	r1, [r3, #0]
 81036d8:	69fa      	ldr	r2, [r7, #28]
 81036da:	4613      	mov	r3, r2
 81036dc:	005b      	lsls	r3, r3, #1
 81036de:	4413      	add	r3, r2
 81036e0:	009b      	lsls	r3, r3, #2
 81036e2:	440b      	add	r3, r1
 81036e4:	685b      	ldr	r3, [r3, #4]
            numOfHandlers = sysJobs_getSysJobsGroupNumOfHandlers( sysJobsVar, groupIterator );
 81036e6:	63bb      	str	r3, [r7, #56]	; 0x38

            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 81036e8:	2300      	movs	r3, #0
 81036ea:	65bb      	str	r3, [r7, #88]	; 0x58
 81036ec:	e008      	b.n	8103700 <sysJobs_dispatcher+0xba>
            {
                handlers[handlerIterator]();
 81036ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81036f0:	009b      	lsls	r3, r3, #2
 81036f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81036f4:	4413      	add	r3, r2
 81036f6:	681b      	ldr	r3, [r3, #0]
 81036f8:	4798      	blx	r3
            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 81036fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81036fc:	3301      	adds	r3, #1
 81036fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8103700:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8103702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103704:	429a      	cmp	r2, r3
 8103706:	d3f2      	bcc.n	81036ee <sysJobs_dispatcher+0xa8>
    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8103708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810370a:	3301      	adds	r3, #1
 810370c:	65fb      	str	r3, [r7, #92]	; 0x5c
 810370e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8103710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103712:	429a      	cmp	r2, r3
 8103714:	d3b1      	bcc.n	810367a <sysJobs_dispatcher+0x34>
 8103716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103718:	60bb      	str	r3, [r7, #8]
    return (sysJobs->cfg->hyperTick);
 810371a:	68bb      	ldr	r3, [r7, #8]
 810371c:	681b      	ldr	r3, [r3, #0]
 810371e:	689b      	ldr	r3, [r3, #8]
            }
        }
    }

    hyperTick = sysJobs_getSysJobsHyperTick( sysJobsVar );
 8103720:	647b      	str	r3, [r7, #68]	; 0x44

    sysJobsCurrentTick = ( ( sysJobsCurrentTick + 1 ) % hyperTick );
 8103722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103724:	3301      	adds	r3, #1
 8103726:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8103728:	fbb3 f2f2 	udiv	r2, r3, r2
 810372c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810372e:	fb01 f202 	mul.w	r2, r1, r2
 8103732:	1a9b      	subs	r3, r3, r2
 8103734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8103736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103738:	613b      	str	r3, [r7, #16]
 810373a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810373c:	60fb      	str	r3, [r7, #12]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void sysJobs_setSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs, BitWidthType currentTickParam)
{
    sysJobs->currentTick = currentTickParam;
 810373e:	693b      	ldr	r3, [r7, #16]
 8103740:	68fa      	ldr	r2, [r7, #12]
 8103742:	605a      	str	r2, [r3, #4]
}
 8103744:	bf00      	nop
    sysJobs_setSysJobsCurrentTick( sysJobsVar, sysJobsCurrentTick );

	__SUPRESS_UNUSED_VAR(entityId);

};
 8103746:	bf00      	nop
 8103748:	3760      	adds	r7, #96	; 0x60
 810374a:	46bd      	mov	sp, r7
 810374c:	bd80      	pop	{r7, pc}
	...

08103750 <thread_sleepMsInternal>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SleepStateType thread_sleepMsInternal(BitWidthType entityId, CosmOS_CoreVariableType * coreVar, BitWidthType tickCount)
{
 8103750:	b480      	push	{r7}
 8103752:	b093      	sub	sp, #76	; 0x4c
 8103754:	af00      	add	r7, sp, #0
 8103756:	60f8      	str	r0, [r7, #12]
 8103758:	60b9      	str	r1, [r7, #8]
 810375a:	607a      	str	r2, [r7, #4]
 810375c:	68bb      	ldr	r3, [r7, #8]
 810375e:	613b      	str	r3, [r7, #16]
    return (core->schedulableInExecution);
 8103760:	693b      	ldr	r3, [r7, #16]
 8103762:	685b      	ldr	r3, [r3, #4]

	CosmOS_AlarmVariableType * alarmVar;
    CosmOS_SchedulableVariableType * schedulableVar;


	schedulableVar = core_getCoreSchedulableInExecution(coreVar);
 8103764:	647b      	str	r3, [r7, #68]	; 0x44
 8103766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103768:	617b      	str	r3, [r7, #20]
    return (schedulable->cfg->alarmId);
 810376a:	697b      	ldr	r3, [r7, #20]
 810376c:	681b      	ldr	r3, [r3, #0]
 810376e:	6a1b      	ldr	r3, [r3, #32]

	alarmId = schedulable_getAlarmId(schedulableVar);
 8103770:	643b      	str	r3, [r7, #64]	; 0x40
 8103772:	68bb      	ldr	r3, [r7, #8]
 8103774:	61fb      	str	r3, [r7, #28]
 8103776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103778:	61bb      	str	r3, [r7, #24]
    return (&(core->alarmVars[alarmId]));
 810377a:	69fb      	ldr	r3, [r7, #28]
 810377c:	6a19      	ldr	r1, [r3, #32]
 810377e:	69ba      	ldr	r2, [r7, #24]
 8103780:	4613      	mov	r3, r2
 8103782:	005b      	lsls	r3, r3, #1
 8103784:	4413      	add	r3, r2
 8103786:	009b      	lsls	r3, r3, #2
 8103788:	440b      	add	r3, r1
	alarmVar = core_getAlarmVar(coreVar, alarmId);
 810378a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810378c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810378e:	627b      	str	r3, [r7, #36]	; 0x24
 8103790:	2303      	movs	r3, #3
 8103792:	623b      	str	r3, [r7, #32]
    schedulable->state = stateParam;
 8103794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103796:	6a3a      	ldr	r2, [r7, #32]
 8103798:	605a      	str	r2, [r3, #4]
}
 810379a:	bf00      	nop
 810379c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810379e:	62fb      	str	r3, [r7, #44]	; 0x2c
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	62bb      	str	r3, [r7, #40]	; 0x28
    alarm->tickCount = tickCountParam;
 81037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81037a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81037a8:	609a      	str	r2, [r3, #8]
}
 81037aa:	bf00      	nop
 81037ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81037ae:	637b      	str	r3, [r7, #52]	; 0x34
 81037b0:	f04f 33ff 	mov.w	r3, #4294967295
 81037b4:	633b      	str	r3, [r7, #48]	; 0x30
    alarm->state = stateParam;
 81037b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81037b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81037ba:	605a      	str	r2, [r3, #4]
}
 81037bc:	bf00      	nop

	schedulable_setState(schedulableVar, SCHEDULABLE_STATE_ENUM__SLEEP);
	alarm_setAlarmTickCount(alarmVar,tickCount);
	alarm_setAlarmState(alarmVar,ALARM_STATE_ENUM__ACTIVATED);

	sleepStateReturn = SLEEP_STATE_ENUM__OK;
 81037be:	2303      	movs	r3, #3
 81037c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 81037c4:	4b07      	ldr	r3, [pc, #28]	; (81037e4 <thread_sleepMsInternal+0x94>)
 81037c6:	685b      	ldr	r3, [r3, #4]
 81037c8:	4a06      	ldr	r2, [pc, #24]	; (81037e4 <thread_sleepMsInternal+0x94>)
 81037ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81037ce:	6053      	str	r3, [r2, #4]
}
 81037d0:	bf00      	nop

	CILinterrupt_contextSwitchRoutineTrigger();

	return sleepStateReturn;
 81037d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
	__SUPRESS_UNUSED_VAR(entityId);
};
 81037d6:	4618      	mov	r0, r3
 81037d8:	374c      	adds	r7, #76	; 0x4c
 81037da:	46bd      	mov	sp, r7
 81037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e0:	4770      	bx	lr
 81037e2:	bf00      	nop
 81037e4:	e000ed00 	.word	0xe000ed00

081037e8 <thread_sleepMs>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SleepStateType thread_sleepMs(BitWidthType delayMs)
{
 81037e8:	b590      	push	{r4, r7, lr}
 81037ea:	b08d      	sub	sp, #52	; 0x34
 81037ec:	af00      	add	r7, sp, #0
 81037ee:	6078      	str	r0, [r7, #4]

	CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


	if ( delayMs )
 81037f0:	687b      	ldr	r3, [r7, #4]
 81037f2:	2b00      	cmp	r3, #0
 81037f4:	d050      	beq.n	8103898 <thread_sleepMs+0xb0>
	{
		coreVar = core_getCoreVar();
 81037f6:	f7fe fc4a 	bl	810208e <core_getCoreVar>
 81037fa:	62b8      	str	r0, [r7, #40]	; 0x28
 81037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81037fe:	613b      	str	r3, [r7, #16]
    return (core->cfg->msToTicks);
 8103800:	693b      	ldr	r3, [r7, #16]
 8103802:	681b      	ldr	r3, [r3, #0]
 8103804:	6a5b      	ldr	r3, [r3, #36]	; 0x24

		msToTicks = core_getMsToTicks(coreVar);
 8103806:	627b      	str	r3, [r7, #36]	; 0x24
 8103808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810380a:	617b      	str	r3, [r7, #20]
    return (core->schedulableInExecution);
 810380c:	697b      	ldr	r3, [r7, #20]
 810380e:	685b      	ldr	r3, [r3, #4]

		schedulableVar = core_getCoreSchedulableInExecution(coreVar);
 8103810:	623b      	str	r3, [r7, #32]
 8103812:	6a3b      	ldr	r3, [r7, #32]
 8103814:	61bb      	str	r3, [r7, #24]
    return (schedulable->cfg->instanceType);
 8103816:	69bb      	ldr	r3, [r7, #24]
 8103818:	681b      	ldr	r3, [r3, #0]
 810381a:	685b      	ldr	r3, [r3, #4]
		schedulableInstanceType = schedulable_getInstanceType(schedulableVar);
 810381c:	61fb      	str	r3, [r7, #28]

		if (schedulableInstanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD)
 810381e:	69fb      	ldr	r3, [r7, #28]
 8103820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103824:	d134      	bne.n	8103890 <thread_sleepMs+0xa8>
		{
			if ( __MUL_OVERFLOW(delayMs,msToTicks,&tickCount) )
 8103826:	2400      	movs	r4, #0
 8103828:	687a      	ldr	r2, [r7, #4]
 810382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810382c:	fba2 0103 	umull	r0, r1, r2, r3
 8103830:	f04f 0200 	mov.w	r2, #0
 8103834:	f04f 0300 	mov.w	r3, #0
 8103838:	000a      	movs	r2, r1
 810383a:	2300      	movs	r3, #0
 810383c:	2a00      	cmp	r2, #0
 810383e:	d000      	beq.n	8103842 <thread_sleepMs+0x5a>
 8103840:	2401      	movs	r4, #1
 8103842:	4603      	mov	r3, r0
 8103844:	60fb      	str	r3, [r7, #12]
 8103846:	4623      	mov	r3, r4
 8103848:	f003 0301 	and.w	r3, r3, #1
 810384c:	b2db      	uxtb	r3, r3
 810384e:	2b00      	cmp	r3, #0
 8103850:	d003      	beq.n	810385a <thread_sleepMs+0x72>
			{
				sleepStateReturn = SLEEP_STATE_ENUM__ERROR_EXCEEDING_MAX;
 8103852:	2301      	movs	r3, #1
 8103854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8103858:	e021      	b.n	810389e <thread_sleepMs+0xb6>
			}
			else
			{
				if ( __ADD_OVERFLOW(tickCount,(BitWidthType)1,&tickCount) )
 810385a:	68fb      	ldr	r3, [r7, #12]
 810385c:	2100      	movs	r1, #0
 810385e:	2201      	movs	r2, #1
 8103860:	189b      	adds	r3, r3, r2
 8103862:	d300      	bcc.n	8103866 <thread_sleepMs+0x7e>
 8103864:	2101      	movs	r1, #1
 8103866:	60fb      	str	r3, [r7, #12]
 8103868:	460b      	mov	r3, r1
 810386a:	f003 0301 	and.w	r3, r3, #1
 810386e:	b2db      	uxtb	r3, r3
 8103870:	2b00      	cmp	r3, #0
 8103872:	d003      	beq.n	810387c <thread_sleepMs+0x94>
				{
					sleepStateReturn = SLEEP_STATE_ENUM__ERROR_EXCEEDING_MAX;
 8103874:	2301      	movs	r3, #1
 8103876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 810387a:	e010      	b.n	810389e <thread_sleepMs+0xb6>
				}
				else
				{
					sleepStateReturn = cosmosApiInternal_thread_sleepMsInternal(coreVar, tickCount);
 810387c:	68fb      	ldr	r3, [r7, #12]
 810387e:	461a      	mov	r2, r3
 8103880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8103882:	2015      	movs	r0, #21
 8103884:	f7ff febf 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 8103888:	4603      	mov	r3, r0
 810388a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 810388e:	e006      	b.n	810389e <thread_sleepMs+0xb6>
				}
			}
		}
		else
		{
			sleepStateReturn = SLEEP_STATE_ENUM__ERROR_ONLY_THREADS_CAN_SLEEP;
 8103890:	2300      	movs	r3, #0
 8103892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8103896:	e002      	b.n	810389e <thread_sleepMs+0xb6>
		}
	}
	else
	{
		sleepStateReturn = SLEEP_STATE_ENUM__ERROR_MIN;
 8103898:	2302      	movs	r3, #2
 810389a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return sleepStateReturn;
 810389e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 81038a2:	4618      	mov	r0, r3
 81038a4:	3734      	adds	r7, #52	; 0x34
 81038a6:	46bd      	mov	sp, r7
 81038a8:	bd90      	pop	{r4, r7, pc}
 81038aa:	bf00      	nop

081038ac <CILcore_getCoreId>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILcore_getCoreId(void)
{
 81038ac:	b580      	push	{r7, lr}
 81038ae:	af00      	add	r7, sp, #0
    return (HAL_GetCurrentCPUID() == CM7_CPUID) ? CORE_0_ID : CORE_1_ID;
 81038b0:	f006 f948 	bl	8109b44 <HAL_GetCurrentCPUID>
 81038b4:	4603      	mov	r3, r0
 81038b6:	2b03      	cmp	r3, #3
 81038b8:	bf14      	ite	ne
 81038ba:	2301      	movne	r3, #1
 81038bc:	2300      	moveq	r3, #0
 81038be:	b2db      	uxtb	r3, r3
}
 81038c0:	4618      	mov	r0, r3
 81038c2:	bd80      	pop	{r7, pc}

081038c4 <CILcore_setCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILcore_setCoreVar(CosmOS_OsVariableType * osVar)
{
 81038c4:	b580      	push	{r7, lr}
 81038c6:	b08a      	sub	sp, #40	; 0x28
 81038c8:	af00      	add	r7, sp, #0
 81038ca:	6078      	str	r0, [r7, #4]
    BitWidthType coreId,
                numberOfCores;

    CosmOS_CoreVariableType * coreVar;

    coreId = CILcore_getCoreId();
 81038cc:	f7ff ffee 	bl	81038ac <CILcore_getCoreId>
 81038d0:	6278      	str	r0, [r7, #36]	; 0x24
 81038d2:	687b      	ldr	r3, [r7, #4]
 81038d4:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfCores);
 81038d6:	68fb      	ldr	r3, [r7, #12]
 81038d8:	681b      	ldr	r3, [r3, #0]
 81038da:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 81038dc:	623b      	str	r3, [r7, #32]

    cosmosAssert( coreId < numberOfCores );
 81038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81038e0:	6a3b      	ldr	r3, [r7, #32]
 81038e2:	429a      	cmp	r2, r3
 81038e4:	bf34      	ite	cc
 81038e6:	2301      	movcc	r3, #1
 81038e8:	2300      	movcs	r3, #0
 81038ea:	b2db      	uxtb	r3, r3
 81038ec:	613b      	str	r3, [r7, #16]
    if ( IS_NOT( result ) )
 81038ee:	693b      	ldr	r3, [r7, #16]
 81038f0:	2b00      	cmp	r3, #0
 81038f2:	d101      	bne.n	81038f8 <CILcore_setCoreVar+0x34>
        os_kernelPanic();
 81038f4:	f7fe ff56 	bl	81027a4 <os_kernelPanic>
}
 81038f8:	bf00      	nop
 81038fa:	687b      	ldr	r3, [r7, #4]
 81038fc:	61bb      	str	r3, [r7, #24]
 81038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103900:	617b      	str	r3, [r7, #20]
    return (&(osVar->coreVars[coreId]));
 8103902:	69bb      	ldr	r3, [r7, #24]
 8103904:	6859      	ldr	r1, [r3, #4]
 8103906:	697a      	ldr	r2, [r7, #20]
 8103908:	4613      	mov	r3, r2
 810390a:	00db      	lsls	r3, r3, #3
 810390c:	4413      	add	r3, r2
 810390e:	009b      	lsls	r3, r3, #2
 8103910:	440b      	add	r3, r1

    coreVar = os_getCoreVar( osVar, coreId );
 8103912:	61fb      	str	r3, [r7, #28]

    //must be changed, not valid for all compilers
    __asm volatile("MOV R9,%[coreVariable]" : [coreVariable] "=r" (coreVar));
 8103914:	4699      	mov	r9, r3
 8103916:	61fb      	str	r3, [r7, #28]
}
 8103918:	bf00      	nop
 810391a:	3728      	adds	r7, #40	; 0x28
 810391c:	46bd      	mov	sp, r7
 810391e:	bd80      	pop	{r7, pc}

08103920 <CILGPIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILGPIO_togglePin(void *GPIOx, BitWidthType GPIO_Pin)
{
 8103920:	b580      	push	{r7, lr}
 8103922:	b082      	sub	sp, #8
 8103924:	af00      	add	r7, sp, #0
 8103926:	6078      	str	r0, [r7, #4]
 8103928:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin( GPIOx, (uint16_t)GPIO_Pin );
 810392a:	683b      	ldr	r3, [r7, #0]
 810392c:	b29b      	uxth	r3, r3
 810392e:	4619      	mov	r1, r3
 8103930:	6878      	ldr	r0, [r7, #4]
 8103932:	f006 fefa 	bl	810a72a <HAL_GPIO_TogglePin>
}
 8103936:	bf00      	nop
 8103938:	3708      	adds	r7, #8
 810393a:	46bd      	mov	sp, r7
 810393c:	bd80      	pop	{r7, pc}
	...

08103940 <CILmemoryProtection_init>:
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_init(AddressType codeMemoryHighAddress,\
												AddressType codeMemoryLowAddress, \
												AddressType stackMemoryHighAddress, \
												AddressType stackMemoryLowAddress)
{
 8103940:	b580      	push	{r7, lr}
 8103942:	b090      	sub	sp, #64	; 0x40
 8103944:	af00      	add	r7, sp, #0
 8103946:	60f8      	str	r0, [r7, #12]
 8103948:	60b9      	str	r1, [r7, #8]
 810394a:	607a      	str	r2, [r7, #4]
 810394c:	603b      	str	r3, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 810394e:	f107 0310 	add.w	r3, r7, #16
 8103952:	2200      	movs	r2, #0
 8103954:	601a      	str	r2, [r3, #0]
 8103956:	605a      	str	r2, [r3, #4]
 8103958:	609a      	str	r2, [r3, #8]
 810395a:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 810395c:	f006 f876 	bl	8109a4c <HAL_MPU_Disable>
    //MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
    //MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
    //MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

	//TODO: Patched cause MPU should take in count whole FLASH - functions from the routes are used from the local core flash bank which booted the os consts to RAM
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103960:	2301      	movs	r3, #1
 8103962:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8103964:	2300      	movs	r3, #0
 8103966:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = 0x08000000;
 8103968:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810396c:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 810396e:	2314      	movs	r3, #20
 8103970:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103972:	2300      	movs	r3, #0
 8103974:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8103976:	2301      	movs	r3, #1
 8103978:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 810397a:	2306      	movs	r3, #6
 810397c:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 810397e:	2300      	movs	r3, #0
 8103980:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103982:	2301      	movs	r3, #1
 8103984:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8103986:	2301      	movs	r3, #1
 8103988:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 810398a:	2301      	movs	r3, #1
 810398c:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 810398e:	f107 0310 	add.w	r3, r7, #16
 8103992:	4618      	mov	r0, r3
 8103994:	f006 f892 	bl	8109abc <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103998:	2301      	movs	r3, #1
 810399a:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 810399c:	2301      	movs	r3, #1
 810399e:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = stackMemoryLowAddress;
 81039a0:	683b      	ldr	r3, [r7, #0]
 81039a2:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( stackMemoryHighAddress - stackMemoryLowAddress )));
 81039a4:	687a      	ldr	r2, [r7, #4]
 81039a6:	683b      	ldr	r3, [r7, #0]
 81039a8:	1ad3      	subs	r3, r2, r3
 81039aa:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 1;
 81039ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81039ae:	085b      	lsrs	r3, r3, #1
 81039b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81039b2:	4313      	orrs	r3, r2
 81039b4:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 2;
 81039b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81039b8:	089b      	lsrs	r3, r3, #2
 81039ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81039bc:	4313      	orrs	r3, r2
 81039be:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 4;
 81039c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81039c2:	091b      	lsrs	r3, r3, #4
 81039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81039c6:	4313      	orrs	r3, r2
 81039c8:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 8;
 81039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81039cc:	0a1b      	lsrs	r3, r3, #8
 81039ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81039d0:	4313      	orrs	r3, r2
 81039d2:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 16;
 81039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81039d6:	0c1b      	lsrs	r3, r3, #16
 81039d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81039da:	4313      	orrs	r3, r2
 81039dc:	627b      	str	r3, [r7, #36]	; 0x24
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 81039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81039e0:	4a77      	ldr	r2, [pc, #476]	; (8103bc0 <CILmemoryProtection_init+0x280>)
 81039e2:	fb02 f303 	mul.w	r3, r2, r3
 81039e6:	0edb      	lsrs	r3, r3, #27
 81039e8:	4a76      	ldr	r2, [pc, #472]	; (8103bc4 <CILmemoryProtection_init+0x284>)
 81039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81039ee:	623b      	str	r3, [r7, #32]
    return (result-1);
 81039f0:	6a3b      	ldr	r3, [r7, #32]
 81039f2:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( stackMemoryHighAddress - stackMemoryLowAddress )));
 81039f4:	b2db      	uxtb	r3, r3
 81039f6:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 81039f8:	2300      	movs	r3, #0
 81039fa:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 81039fc:	2301      	movs	r3, #1
 81039fe:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8103a00:	2302      	movs	r3, #2
 8103a02:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103a04:	2300      	movs	r3, #0
 8103a06:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103a08:	2301      	movs	r3, #1
 8103a0a:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8103a0c:	2301      	movs	r3, #1
 8103a0e:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103a10:	2301      	movs	r3, #1
 8103a12:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103a14:	f107 0310 	add.w	r3, r7, #16
 8103a18:	4618      	mov	r0, r3
 8103a1a:	f006 f84f 	bl	8109abc <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103a1e:	2301      	movs	r3, #1
 8103a20:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8103a22:	2302      	movs	r3, #2
 8103a24:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress =  (BitWidthType)_s_os_section_consts;
 8103a26:	4b68      	ldr	r3, [pc, #416]	; (8103bc8 <CILmemoryProtection_init+0x288>)
 8103a28:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8103a2a:	4a68      	ldr	r2, [pc, #416]	; (8103bcc <CILmemoryProtection_init+0x28c>)
 8103a2c:	4b66      	ldr	r3, [pc, #408]	; (8103bc8 <CILmemoryProtection_init+0x288>)
 8103a2e:	1ad3      	subs	r3, r2, r3
 8103a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 1;
 8103a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a34:	085b      	lsrs	r3, r3, #1
 8103a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103a38:	4313      	orrs	r3, r2
 8103a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 2;
 8103a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a3e:	089b      	lsrs	r3, r3, #2
 8103a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103a42:	4313      	orrs	r3, r2
 8103a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 4;
 8103a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a48:	091b      	lsrs	r3, r3, #4
 8103a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103a4c:	4313      	orrs	r3, r2
 8103a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 8;
 8103a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a52:	0a1b      	lsrs	r3, r3, #8
 8103a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103a56:	4313      	orrs	r3, r2
 8103a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 16;
 8103a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a5c:	0c1b      	lsrs	r3, r3, #16
 8103a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103a60:	4313      	orrs	r3, r2
 8103a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103a66:	4a56      	ldr	r2, [pc, #344]	; (8103bc0 <CILmemoryProtection_init+0x280>)
 8103a68:	fb02 f303 	mul.w	r3, r2, r3
 8103a6c:	0edb      	lsrs	r3, r3, #27
 8103a6e:	4a55      	ldr	r2, [pc, #340]	; (8103bc4 <CILmemoryProtection_init+0x284>)
 8103a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103a74:	62bb      	str	r3, [r7, #40]	; 0x28
    return (result-1);
 8103a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103a78:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8103a7a:	b2db      	uxtb	r3, r3
 8103a7c:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103a7e:	2300      	movs	r3, #0
 8103a80:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8103a82:	2301      	movs	r3, #1
 8103a84:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8103a86:	2306      	movs	r3, #6
 8103a88:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103a8a:	2300      	movs	r3, #0
 8103a8c:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103a8e:	2301      	movs	r3, #1
 8103a90:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8103a92:	2301      	movs	r3, #1
 8103a94:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103a96:	2301      	movs	r3, #1
 8103a98:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103a9a:	f107 0310 	add.w	r3, r7, #16
 8103a9e:	4618      	mov	r0, r3
 8103aa0:	f006 f80c 	bl	8109abc <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103aa4:	2301      	movs	r3, #1
 8103aa6:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8103aa8:	2303      	movs	r3, #3
 8103aaa:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_os_section_vars;
 8103aac:	4b48      	ldr	r3, [pc, #288]	; (8103bd0 <CILmemoryProtection_init+0x290>)
 8103aae:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8103ab0:	4a48      	ldr	r2, [pc, #288]	; (8103bd4 <CILmemoryProtection_init+0x294>)
 8103ab2:	4b47      	ldr	r3, [pc, #284]	; (8103bd0 <CILmemoryProtection_init+0x290>)
 8103ab4:	1ad3      	subs	r3, r2, r3
 8103ab6:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 1;
 8103ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103aba:	085b      	lsrs	r3, r3, #1
 8103abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103abe:	4313      	orrs	r3, r2
 8103ac0:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 2;
 8103ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103ac4:	089b      	lsrs	r3, r3, #2
 8103ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103ac8:	4313      	orrs	r3, r2
 8103aca:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 4;
 8103acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103ace:	091b      	lsrs	r3, r3, #4
 8103ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103ad2:	4313      	orrs	r3, r2
 8103ad4:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 8;
 8103ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103ad8:	0a1b      	lsrs	r3, r3, #8
 8103ada:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103adc:	4313      	orrs	r3, r2
 8103ade:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 16;
 8103ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103ae2:	0c1b      	lsrs	r3, r3, #16
 8103ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103ae6:	4313      	orrs	r3, r2
 8103ae8:	637b      	str	r3, [r7, #52]	; 0x34
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103aec:	4a34      	ldr	r2, [pc, #208]	; (8103bc0 <CILmemoryProtection_init+0x280>)
 8103aee:	fb02 f303 	mul.w	r3, r2, r3
 8103af2:	0edb      	lsrs	r3, r3, #27
 8103af4:	4a33      	ldr	r2, [pc, #204]	; (8103bc4 <CILmemoryProtection_init+0x284>)
 8103af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103afa:	633b      	str	r3, [r7, #48]	; 0x30
    return (result-1);
 8103afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103afe:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8103b00:	b2db      	uxtb	r3, r3
 8103b02:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103b04:	2300      	movs	r3, #0
 8103b06:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8103b08:	2301      	movs	r3, #1
 8103b0a:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8103b0c:	2302      	movs	r3, #2
 8103b0e:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103b10:	2300      	movs	r3, #0
 8103b12:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103b14:	2301      	movs	r3, #1
 8103b16:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8103b18:	2300      	movs	r3, #0
 8103b1a:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8103b1c:	2300      	movs	r3, #0
 8103b1e:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103b20:	f107 0310 	add.w	r3, r7, #16
 8103b24:	4618      	mov	r0, r3
 8103b26:	f005 ffc9 	bl	8109abc <HAL_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103b2a:	2301      	movs	r3, #1
 8103b2c:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8103b2e:	2304      	movs	r3, #4
 8103b30:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_unprotected_section;
 8103b32:	4b29      	ldr	r3, [pc, #164]	; (8103bd8 <CILmemoryProtection_init+0x298>)
 8103b34:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_unprotected_section - _s_unprotected_section )));
 8103b36:	4a29      	ldr	r2, [pc, #164]	; (8103bdc <CILmemoryProtection_init+0x29c>)
 8103b38:	4b27      	ldr	r3, [pc, #156]	; (8103bd8 <CILmemoryProtection_init+0x298>)
 8103b3a:	1ad3      	subs	r3, r2, r3
 8103b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 1;
 8103b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b40:	085b      	lsrs	r3, r3, #1
 8103b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103b44:	4313      	orrs	r3, r2
 8103b46:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 2;
 8103b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b4a:	089b      	lsrs	r3, r3, #2
 8103b4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103b4e:	4313      	orrs	r3, r2
 8103b50:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 4;
 8103b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b54:	091b      	lsrs	r3, r3, #4
 8103b56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103b58:	4313      	orrs	r3, r2
 8103b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 8;
 8103b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b5e:	0a1b      	lsrs	r3, r3, #8
 8103b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103b62:	4313      	orrs	r3, r2
 8103b64:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 16;
 8103b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b68:	0c1b      	lsrs	r3, r3, #16
 8103b6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103b6c:	4313      	orrs	r3, r2
 8103b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103b72:	4a13      	ldr	r2, [pc, #76]	; (8103bc0 <CILmemoryProtection_init+0x280>)
 8103b74:	fb02 f303 	mul.w	r3, r2, r3
 8103b78:	0edb      	lsrs	r3, r3, #27
 8103b7a:	4a12      	ldr	r2, [pc, #72]	; (8103bc4 <CILmemoryProtection_init+0x284>)
 8103b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103b80:	63bb      	str	r3, [r7, #56]	; 0x38
    return (result-1);
 8103b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103b84:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_unprotected_section - _s_unprotected_section )));
 8103b86:	b2db      	uxtb	r3, r3
 8103b88:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103b8a:	2300      	movs	r3, #0
 8103b8c:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8103b8e:	2300      	movs	r3, #0
 8103b90:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8103b92:	2303      	movs	r3, #3
 8103b94:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103b96:	2300      	movs	r3, #0
 8103b98:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103b9a:	2301      	movs	r3, #1
 8103b9c:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8103b9e:	2300      	movs	r3, #0
 8103ba0:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103ba2:	2301      	movs	r3, #1
 8103ba4:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103ba6:	f107 0310 	add.w	r3, r7, #16
 8103baa:	4618      	mov	r0, r3
 8103bac:	f005 ff86 	bl	8109abc <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8103bb0:	2006      	movs	r0, #6
 8103bb2:	f005 ff63 	bl	8109a7c <HAL_MPU_Enable>

	__SUPRESS_UNUSED_VAR(codeMemoryHighAddress);
	__SUPRESS_UNUSED_VAR(codeMemoryLowAddress);
}
 8103bb6:	bf00      	nop
 8103bb8:	3740      	adds	r7, #64	; 0x40
 8103bba:	46bd      	mov	sp, r7
 8103bbc:	bd80      	pop	{r7, pc}
 8103bbe:	bf00      	nop
 8103bc0:	07c4acdd 	.word	0x07c4acdd
 8103bc4:	380007b4 	.word	0x380007b4
 8103bc8:	38000000 	.word	0x38000000
 8103bcc:	38001000 	.word	0x38001000
 8103bd0:	38008000 	.word	0x38008000
 8103bd4:	38008800 	.word	0x38008800
 8103bd8:	30040000 	.word	0x30040000
 8103bdc:	30040100 	.word	0x30040100

08103be0 <CILmemoryProtection_setStackOverflowProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setStackOverflowProtection(AddressType stackLowAddress, AddressType stackHighAddress)
{
 8103be0:	b580      	push	{r7, lr}
 8103be2:	b088      	sub	sp, #32
 8103be4:	af00      	add	r7, sp, #0
 8103be6:	6078      	str	r0, [r7, #4]
 8103be8:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8103bea:	f107 0308 	add.w	r3, r7, #8
 8103bee:	2200      	movs	r2, #0
 8103bf0:	601a      	str	r2, [r3, #0]
 8103bf2:	605a      	str	r2, [r3, #4]
 8103bf4:	609a      	str	r2, [r3, #8]
 8103bf6:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8103bf8:	f005 ff28 	bl	8109a4c <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103bfc:	2301      	movs	r3, #1
 8103bfe:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 8103c00:	2307      	movs	r3, #7
 8103c02:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (stackLowAddress);
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8103c08:	683a      	ldr	r2, [r7, #0]
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	1ad3      	subs	r3, r2, r3
 8103c0e:	61fb      	str	r3, [r7, #28]
    size |= size >> 1;
 8103c10:	69fb      	ldr	r3, [r7, #28]
 8103c12:	085b      	lsrs	r3, r3, #1
 8103c14:	69fa      	ldr	r2, [r7, #28]
 8103c16:	4313      	orrs	r3, r2
 8103c18:	61fb      	str	r3, [r7, #28]
    size |= size >> 2;
 8103c1a:	69fb      	ldr	r3, [r7, #28]
 8103c1c:	089b      	lsrs	r3, r3, #2
 8103c1e:	69fa      	ldr	r2, [r7, #28]
 8103c20:	4313      	orrs	r3, r2
 8103c22:	61fb      	str	r3, [r7, #28]
    size |= size >> 4;
 8103c24:	69fb      	ldr	r3, [r7, #28]
 8103c26:	091b      	lsrs	r3, r3, #4
 8103c28:	69fa      	ldr	r2, [r7, #28]
 8103c2a:	4313      	orrs	r3, r2
 8103c2c:	61fb      	str	r3, [r7, #28]
    size |= size >> 8;
 8103c2e:	69fb      	ldr	r3, [r7, #28]
 8103c30:	0a1b      	lsrs	r3, r3, #8
 8103c32:	69fa      	ldr	r2, [r7, #28]
 8103c34:	4313      	orrs	r3, r2
 8103c36:	61fb      	str	r3, [r7, #28]
    size |= size >> 16;
 8103c38:	69fb      	ldr	r3, [r7, #28]
 8103c3a:	0c1b      	lsrs	r3, r3, #16
 8103c3c:	69fa      	ldr	r2, [r7, #28]
 8103c3e:	4313      	orrs	r3, r2
 8103c40:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103c42:	69fb      	ldr	r3, [r7, #28]
 8103c44:	4a12      	ldr	r2, [pc, #72]	; (8103c90 <CILmemoryProtection_setStackOverflowProtection+0xb0>)
 8103c46:	fb02 f303 	mul.w	r3, r2, r3
 8103c4a:	0edb      	lsrs	r3, r3, #27
 8103c4c:	4a11      	ldr	r2, [pc, #68]	; (8103c94 <CILmemoryProtection_setStackOverflowProtection+0xb4>)
 8103c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103c52:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8103c54:	69bb      	ldr	r3, [r7, #24]
 8103c56:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8103c58:	b2db      	uxtb	r3, r3
 8103c5a:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103c5c:	2300      	movs	r3, #0
 8103c5e:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8103c60:	2301      	movs	r3, #1
 8103c62:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8103c64:	2303      	movs	r3, #3
 8103c66:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103c68:	2300      	movs	r3, #0
 8103c6a:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103c6c:	2301      	movs	r3, #1
 8103c6e:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8103c70:	2301      	movs	r3, #1
 8103c72:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103c74:	2301      	movs	r3, #1
 8103c76:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103c78:	f107 0308 	add.w	r3, r7, #8
 8103c7c:	4618      	mov	r0, r3
 8103c7e:	f005 ff1d 	bl	8109abc <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8103c82:	2006      	movs	r0, #6
 8103c84:	f005 fefa 	bl	8109a7c <HAL_MPU_Enable>
}
 8103c88:	bf00      	nop
 8103c8a:	3720      	adds	r7, #32
 8103c8c:	46bd      	mov	sp, r7
 8103c8e:	bd80      	pop	{r7, pc}
 8103c90:	07c4acdd 	.word	0x07c4acdd
 8103c94:	380007b4 	.word	0x380007b4

08103c98 <CILmemoryProtection_setProgramMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setProgramMemoryProtection(AddressType lowAddress, AddressType highAddress)
{
 8103c98:	b580      	push	{r7, lr}
 8103c9a:	b088      	sub	sp, #32
 8103c9c:	af00      	add	r7, sp, #0
 8103c9e:	6078      	str	r0, [r7, #4]
 8103ca0:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8103ca2:	f107 0308 	add.w	r3, r7, #8
 8103ca6:	2200      	movs	r2, #0
 8103ca8:	601a      	str	r2, [r3, #0]
 8103caa:	605a      	str	r2, [r3, #4]
 8103cac:	609a      	str	r2, [r3, #8]
 8103cae:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8103cb0:	f005 fecc 	bl	8109a4c <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103cb4:	2301      	movs	r3, #1
 8103cb6:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 8103cb8:	2306      	movs	r3, #6
 8103cba:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 8103cbc:	687b      	ldr	r3, [r7, #4]
 8103cbe:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8103cc0:	683a      	ldr	r2, [r7, #0]
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	1ad3      	subs	r3, r2, r3
 8103cc6:	61fb      	str	r3, [r7, #28]
    size |= size >> 1;
 8103cc8:	69fb      	ldr	r3, [r7, #28]
 8103cca:	085b      	lsrs	r3, r3, #1
 8103ccc:	69fa      	ldr	r2, [r7, #28]
 8103cce:	4313      	orrs	r3, r2
 8103cd0:	61fb      	str	r3, [r7, #28]
    size |= size >> 2;
 8103cd2:	69fb      	ldr	r3, [r7, #28]
 8103cd4:	089b      	lsrs	r3, r3, #2
 8103cd6:	69fa      	ldr	r2, [r7, #28]
 8103cd8:	4313      	orrs	r3, r2
 8103cda:	61fb      	str	r3, [r7, #28]
    size |= size >> 4;
 8103cdc:	69fb      	ldr	r3, [r7, #28]
 8103cde:	091b      	lsrs	r3, r3, #4
 8103ce0:	69fa      	ldr	r2, [r7, #28]
 8103ce2:	4313      	orrs	r3, r2
 8103ce4:	61fb      	str	r3, [r7, #28]
    size |= size >> 8;
 8103ce6:	69fb      	ldr	r3, [r7, #28]
 8103ce8:	0a1b      	lsrs	r3, r3, #8
 8103cea:	69fa      	ldr	r2, [r7, #28]
 8103cec:	4313      	orrs	r3, r2
 8103cee:	61fb      	str	r3, [r7, #28]
    size |= size >> 16;
 8103cf0:	69fb      	ldr	r3, [r7, #28]
 8103cf2:	0c1b      	lsrs	r3, r3, #16
 8103cf4:	69fa      	ldr	r2, [r7, #28]
 8103cf6:	4313      	orrs	r3, r2
 8103cf8:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103cfa:	69fb      	ldr	r3, [r7, #28]
 8103cfc:	4a12      	ldr	r2, [pc, #72]	; (8103d48 <CILmemoryProtection_setProgramMemoryProtection+0xb0>)
 8103cfe:	fb02 f303 	mul.w	r3, r2, r3
 8103d02:	0edb      	lsrs	r3, r3, #27
 8103d04:	4a11      	ldr	r2, [pc, #68]	; (8103d4c <CILmemoryProtection_setProgramMemoryProtection+0xb4>)
 8103d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103d0a:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8103d0c:	69bb      	ldr	r3, [r7, #24]
 8103d0e:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8103d10:	b2db      	uxtb	r3, r3
 8103d12:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103d14:	2300      	movs	r3, #0
 8103d16:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8103d18:	2301      	movs	r3, #1
 8103d1a:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8103d1c:	2303      	movs	r3, #3
 8103d1e:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103d20:	2300      	movs	r3, #0
 8103d22:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103d24:	2301      	movs	r3, #1
 8103d26:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8103d28:	2301      	movs	r3, #1
 8103d2a:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103d2c:	2301      	movs	r3, #1
 8103d2e:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103d30:	f107 0308 	add.w	r3, r7, #8
 8103d34:	4618      	mov	r0, r3
 8103d36:	f005 fec1 	bl	8109abc <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8103d3a:	2006      	movs	r0, #6
 8103d3c:	f005 fe9e 	bl	8109a7c <HAL_MPU_Enable>
}
 8103d40:	bf00      	nop
 8103d42:	3720      	adds	r7, #32
 8103d44:	46bd      	mov	sp, r7
 8103d46:	bd80      	pop	{r7, pc}
 8103d48:	07c4acdd 	.word	0x07c4acdd
 8103d4c:	380007b4 	.word	0x380007b4

08103d50 <CILmemoryProtection_setSchedulablePeripheralProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setSchedulablePeripheralProtection(AddressType lowAddress, AddressType highAddress)
{
 8103d50:	b580      	push	{r7, lr}
 8103d52:	b088      	sub	sp, #32
 8103d54:	af00      	add	r7, sp, #0
 8103d56:	6078      	str	r0, [r7, #4]
 8103d58:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8103d5a:	f107 0308 	add.w	r3, r7, #8
 8103d5e:	2200      	movs	r2, #0
 8103d60:	601a      	str	r2, [r3, #0]
 8103d62:	605a      	str	r2, [r3, #4]
 8103d64:	609a      	str	r2, [r3, #8]
 8103d66:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8103d68:	f005 fe70 	bl	8109a4c <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103d6c:	2301      	movs	r3, #1
 8103d6e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8103d70:	2305      	movs	r3, #5
 8103d72:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 8103d74:	687b      	ldr	r3, [r7, #4]
 8103d76:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8103d78:	683a      	ldr	r2, [r7, #0]
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	1ad3      	subs	r3, r2, r3
 8103d7e:	61fb      	str	r3, [r7, #28]
    size |= size >> 1;
 8103d80:	69fb      	ldr	r3, [r7, #28]
 8103d82:	085b      	lsrs	r3, r3, #1
 8103d84:	69fa      	ldr	r2, [r7, #28]
 8103d86:	4313      	orrs	r3, r2
 8103d88:	61fb      	str	r3, [r7, #28]
    size |= size >> 2;
 8103d8a:	69fb      	ldr	r3, [r7, #28]
 8103d8c:	089b      	lsrs	r3, r3, #2
 8103d8e:	69fa      	ldr	r2, [r7, #28]
 8103d90:	4313      	orrs	r3, r2
 8103d92:	61fb      	str	r3, [r7, #28]
    size |= size >> 4;
 8103d94:	69fb      	ldr	r3, [r7, #28]
 8103d96:	091b      	lsrs	r3, r3, #4
 8103d98:	69fa      	ldr	r2, [r7, #28]
 8103d9a:	4313      	orrs	r3, r2
 8103d9c:	61fb      	str	r3, [r7, #28]
    size |= size >> 8;
 8103d9e:	69fb      	ldr	r3, [r7, #28]
 8103da0:	0a1b      	lsrs	r3, r3, #8
 8103da2:	69fa      	ldr	r2, [r7, #28]
 8103da4:	4313      	orrs	r3, r2
 8103da6:	61fb      	str	r3, [r7, #28]
    size |= size >> 16;
 8103da8:	69fb      	ldr	r3, [r7, #28]
 8103daa:	0c1b      	lsrs	r3, r3, #16
 8103dac:	69fa      	ldr	r2, [r7, #28]
 8103dae:	4313      	orrs	r3, r2
 8103db0:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103db2:	69fb      	ldr	r3, [r7, #28]
 8103db4:	4a12      	ldr	r2, [pc, #72]	; (8103e00 <CILmemoryProtection_setSchedulablePeripheralProtection+0xb0>)
 8103db6:	fb02 f303 	mul.w	r3, r2, r3
 8103dba:	0edb      	lsrs	r3, r3, #27
 8103dbc:	4a11      	ldr	r2, [pc, #68]	; (8103e04 <CILmemoryProtection_setSchedulablePeripheralProtection+0xb4>)
 8103dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103dc2:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8103dc4:	69bb      	ldr	r3, [r7, #24]
 8103dc6:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8103dc8:	b2db      	uxtb	r3, r3
 8103dca:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103dcc:	2300      	movs	r3, #0
 8103dce:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8103dd0:	2300      	movs	r3, #0
 8103dd2:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8103dd4:	2303      	movs	r3, #3
 8103dd6:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8103dd8:	2301      	movs	r3, #1
 8103dda:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103ddc:	2301      	movs	r3, #1
 8103dde:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8103de0:	2300      	movs	r3, #0
 8103de2:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103de4:	2301      	movs	r3, #1
 8103de6:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103de8:	f107 0308 	add.w	r3, r7, #8
 8103dec:	4618      	mov	r0, r3
 8103dee:	f005 fe65 	bl	8109abc <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8103df2:	2006      	movs	r0, #6
 8103df4:	f005 fe42 	bl	8109a7c <HAL_MPU_Enable>
}
 8103df8:	bf00      	nop
 8103dfa:	3720      	adds	r7, #32
 8103dfc:	46bd      	mov	sp, r7
 8103dfe:	bd80      	pop	{r7, pc}
 8103e00:	07c4acdd 	.word	0x07c4acdd
 8103e04:	380007b4 	.word	0x380007b4

08103e08 <CILmutex_tryMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType CILmutex_tryMutex(AddressType * mutexPointer)
{
 8103e08:	b480      	push	{r7}
 8103e0a:	b085      	sub	sp, #20
 8103e0c:	af00      	add	r7, sp, #0
 8103e0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8103e10:	b672      	cpsid	i
}
 8103e12:	bf00      	nop
    CosmOS_MutexStateType mutexState;

	__disable_irq();
	__asm volatile("MOV R1, #0x1");
 8103e14:	f04f 0101 	mov.w	r1, #1
	__asm volatile("LDR R3, [R0]");
 8103e18:	6803      	ldr	r3, [r0, #0]
	__asm volatile("CMP R3, #0");
 8103e1a:	2b00      	cmp	r3, #0
	__asm volatile("ITTE EQ");
 8103e1c:	bf06      	itte	eq
	__asm volatile("STREQ R1, [R0]");
 8103e1e:	6001      	streq	r1, [r0, #0]
	__asm volatile("MOVEQ R1, #0x2");
 8103e20:	2102      	moveq	r1, #2
	__asm volatile("MOVNE R1, #0x1");
 8103e22:	2101      	movne	r1, #1
	__asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );
 8103e24:	460b      	mov	r3, r1
 8103e26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8103e28:	b662      	cpsie	i
}
 8103e2a:	bf00      	nop
	//__asm volatile("MOVNE R1, #0x1");
	//__asm volatile("MOVEQ R1, #0x2");
	//__asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );

	__SUPRESS_UNUSED_VAR(mutexPointer);
    return mutexState;
 8103e2c:	68fb      	ldr	r3, [r7, #12]
}
 8103e2e:	4618      	mov	r0, r3
 8103e30:	3714      	adds	r7, #20
 8103e32:	46bd      	mov	sp, r7
 8103e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e38:	4770      	bx	lr

08103e3a <CILmutex_releaseMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType CILmutex_releaseMutex(AddressType * mutexPointer)
{
 8103e3a:	b480      	push	{r7}
 8103e3c:	b085      	sub	sp, #20
 8103e3e:	af00      	add	r7, sp, #0
 8103e40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8103e42:	b672      	cpsid	i
}
 8103e44:	bf00      	nop
    CosmOS_MutexStateType mutexState;

	__disable_irq();
	__asm volatile("MOV R1, #0x0");
 8103e46:	f04f 0100 	mov.w	r1, #0
	__asm volatile("STR R1, [R0]");
 8103e4a:	6001      	str	r1, [r0, #0]
    __asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );
 8103e4c:	460b      	mov	r3, r1
 8103e4e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8103e50:	b662      	cpsie	i
}
 8103e52:	bf00      	nop
	//__asm volatile("BNE tryUnlock");
	//__asm volatile("released:");
    //__asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );

	__SUPRESS_UNUSED_VAR(mutexPointer);
    return mutexState;
 8103e54:	68fb      	ldr	r3, [r7, #12]
}
 8103e56:	4618      	mov	r0, r3
 8103e58:	3714      	adds	r7, #20
 8103e5a:	46bd      	mov	sp, r7
 8103e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e60:	4770      	bx	lr

08103e62 <CILspinlock_getSpinlock>:
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_getSpinlock(AddressType * spinlockPointer, \
																	BitWidthType spinlockId, \
																	BitWidthType schedulableId )
{
 8103e62:	b580      	push	{r7, lr}
 8103e64:	b086      	sub	sp, #24
 8103e66:	af00      	add	r7, sp, #0
 8103e68:	60f8      	str	r0, [r7, #12]
 8103e6a:	60b9      	str	r1, [r7, #8]
 8103e6c:	607a      	str	r2, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	HAL_StatusTypeDef hsem_take_status;


	hsem_take_status = HAL_HSEM_Take(spinlockId, schedulableId);
 8103e6e:	6879      	ldr	r1, [r7, #4]
 8103e70:	68b8      	ldr	r0, [r7, #8]
 8103e72:	f006 fc75 	bl	810a760 <HAL_HSEM_Take>
 8103e76:	4603      	mov	r3, r0
 8103e78:	75fb      	strb	r3, [r7, #23]
	while ( hsem_take_status IS_NOT_EQUAL_TO HAL_OK )
 8103e7a:	e005      	b.n	8103e88 <CILspinlock_getSpinlock+0x26>
	{
		hsem_take_status = HAL_HSEM_Take(spinlockId, schedulableId);
 8103e7c:	6879      	ldr	r1, [r7, #4]
 8103e7e:	68b8      	ldr	r0, [r7, #8]
 8103e80:	f006 fc6e 	bl	810a760 <HAL_HSEM_Take>
 8103e84:	4603      	mov	r3, r0
 8103e86:	75fb      	strb	r3, [r7, #23]
	while ( hsem_take_status IS_NOT_EQUAL_TO HAL_OK )
 8103e88:	7dfb      	ldrb	r3, [r7, #23]
 8103e8a:	2b00      	cmp	r3, #0
 8103e8c:	d1f6      	bne.n	8103e7c <CILspinlock_getSpinlock+0x1a>
	}

	*spinlockPointer = 1;
 8103e8e:	68fb      	ldr	r3, [r7, #12]
 8103e90:	2201      	movs	r2, #1
 8103e92:	601a      	str	r2, [r3, #0]
	spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8103e94:	2302      	movs	r3, #2
 8103e96:	613b      	str	r3, [r7, #16]
	//__asm volatile("MOVEQ R1, #0x2");
	//__asm volatile("BNE tryLock");
    //__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
	//__SUPRESS_UNUSED_VAR(spinlockPointer);

    return spinlockState;
 8103e98:	693b      	ldr	r3, [r7, #16]
}
 8103e9a:	4618      	mov	r0, r3
 8103e9c:	3718      	adds	r7, #24
 8103e9e:	46bd      	mov	sp, r7
 8103ea0:	bd80      	pop	{r7, pc}

08103ea2 <CILspinlock_trySpinlock>:
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_trySpinlock(AddressType * spinlockPointer, \
																	BitWidthType spinlockId, \
																	BitWidthType schedulableId )
{
 8103ea2:	b580      	push	{r7, lr}
 8103ea4:	b086      	sub	sp, #24
 8103ea6:	af00      	add	r7, sp, #0
 8103ea8:	60f8      	str	r0, [r7, #12]
 8103eaa:	60b9      	str	r1, [r7, #8]
 8103eac:	607a      	str	r2, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	HAL_StatusTypeDef hsem_take_status;


	hsem_take_status = HAL_HSEM_Take(spinlockId, schedulableId);
 8103eae:	6879      	ldr	r1, [r7, #4]
 8103eb0:	68b8      	ldr	r0, [r7, #8]
 8103eb2:	f006 fc55 	bl	810a760 <HAL_HSEM_Take>
 8103eb6:	4603      	mov	r3, r0
 8103eb8:	74fb      	strb	r3, [r7, #19]
	if ( hsem_take_status IS_EQUAL_TO HAL_OK)
 8103eba:	7cfb      	ldrb	r3, [r7, #19]
 8103ebc:	2b00      	cmp	r3, #0
 8103ebe:	d105      	bne.n	8103ecc <CILspinlock_trySpinlock+0x2a>
	{
		*spinlockPointer = 1;
 8103ec0:	68fb      	ldr	r3, [r7, #12]
 8103ec2:	2201      	movs	r2, #1
 8103ec4:	601a      	str	r2, [r3, #0]
		spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8103ec6:	2302      	movs	r3, #2
 8103ec8:	617b      	str	r3, [r7, #20]
 8103eca:	e001      	b.n	8103ed0 <CILspinlock_trySpinlock+0x2e>
	}
	else
	{
		__SUPRESS_UNUSED_VAR(spinlockPointer);
		spinlockState = SPINLOCK_STATE_ENUM__OCCUPIED;
 8103ecc:	2301      	movs	r3, #1
 8103ece:	617b      	str	r3, [r7, #20]
	//__asm volatile("MOVNE R1, #0x1");
	//__asm volatile("MOVEQ R1, #0x2");
	//__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
	//__SUPRESS_UNUSED_VAR(spinlockPointer);

    return spinlockState;
 8103ed0:	697b      	ldr	r3, [r7, #20]
}
 8103ed2:	4618      	mov	r0, r3
 8103ed4:	3718      	adds	r7, #24
 8103ed6:	46bd      	mov	sp, r7
 8103ed8:	bd80      	pop	{r7, pc}

08103eda <CILspinlock_releaseSpinlock>:
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_releaseSpinlock(AddressType * spinlockPointer, \
																		BitWidthType spinlockId, \
																		BitWidthType schedulableId )
{
 8103eda:	b580      	push	{r7, lr}
 8103edc:	b086      	sub	sp, #24
 8103ede:	af00      	add	r7, sp, #0
 8103ee0:	60f8      	str	r0, [r7, #12]
 8103ee2:	60b9      	str	r1, [r7, #8]
 8103ee4:	607a      	str	r2, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;


	HAL_HSEM_Release(spinlockId, schedulableId);
 8103ee6:	6879      	ldr	r1, [r7, #4]
 8103ee8:	68b8      	ldr	r0, [r7, #8]
 8103eea:	f006 fc7f 	bl	810a7ec <HAL_HSEM_Release>

	*spinlockPointer = 0;
 8103eee:	68fb      	ldr	r3, [r7, #12]
 8103ef0:	2200      	movs	r2, #0
 8103ef2:	601a      	str	r2, [r3, #0]
	spinlockState = SPINLOCK_STATE_ENUM__RELEASED;
 8103ef4:	2300      	movs	r3, #0
 8103ef6:	617b      	str	r3, [r7, #20]
	//__asm volatile("BNE tryUnlock");
	//__asm volatile("released:");
    //__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
	//__SUPRESS_UNUSED_VAR(spinlockPointer);

    return spinlockState;
 8103ef8:	697b      	ldr	r3, [r7, #20]
}
 8103efa:	4618      	mov	r0, r3
 8103efc:	3718      	adds	r7, #24
 8103efe:	46bd      	mov	sp, r7
 8103f00:	bd80      	pop	{r7, pc}

08103f02 <CILstack_stackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType CILstack_stackInit(AddressType stackLowAddress, AddressType stackHighAddress, AddressType handlerAddress)
{
 8103f02:	b480      	push	{r7}
 8103f04:	b087      	sub	sp, #28
 8103f06:	af00      	add	r7, sp, #0
 8103f08:	60f8      	str	r0, [r7, #12]
 8103f0a:	60b9      	str	r1, [r7, #8]
 8103f0c:	607a      	str	r2, [r7, #4]
    CosmOS_ContextType *stack = ( CosmOS_ContextType* )( stackHighAddress - (AddressType)sizeof(CosmOS_ContextType) );
 8103f0e:	68bb      	ldr	r3, [r7, #8]
 8103f10:	3b40      	subs	r3, #64	; 0x40
 8103f12:	617b      	str	r3, [r7, #20]

    stack->XPSR  = 0x01000000;
 8103f14:	697b      	ldr	r3, [r7, #20]
 8103f16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8103f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    stack->PC    = handlerAddress;
 8103f1c:	697b      	ldr	r3, [r7, #20]
 8103f1e:	687a      	ldr	r2, [r7, #4]
 8103f20:	639a      	str	r2, [r3, #56]	; 0x38
    stack->LR    = 0xFFFFFFFD;
 8103f22:	697b      	ldr	r3, [r7, #20]
 8103f24:	f06f 0202 	mvn.w	r2, #2
 8103f28:	635a      	str	r2, [r3, #52]	; 0x34
    stack->R12   = 0;
 8103f2a:	697b      	ldr	r3, [r7, #20]
 8103f2c:	2200      	movs	r2, #0
 8103f2e:	631a      	str	r2, [r3, #48]	; 0x30
    stack->R3    = 0;
 8103f30:	697b      	ldr	r3, [r7, #20]
 8103f32:	2200      	movs	r2, #0
 8103f34:	62da      	str	r2, [r3, #44]	; 0x2c
    stack->R2    = 0;
 8103f36:	697b      	ldr	r3, [r7, #20]
 8103f38:	2200      	movs	r2, #0
 8103f3a:	629a      	str	r2, [r3, #40]	; 0x28
    stack->R1    = 0;
 8103f3c:	697b      	ldr	r3, [r7, #20]
 8103f3e:	2200      	movs	r2, #0
 8103f40:	625a      	str	r2, [r3, #36]	; 0x24
    stack->R0    = 0;
 8103f42:	697b      	ldr	r3, [r7, #20]
 8103f44:	2200      	movs	r2, #0
 8103f46:	621a      	str	r2, [r3, #32]
    stack->R14   = 0xFFFFFFFD;
 8103f48:	697b      	ldr	r3, [r7, #20]
 8103f4a:	f06f 0202 	mvn.w	r2, #2
 8103f4e:	61da      	str	r2, [r3, #28]
    stack->R11   = 0;
 8103f50:	697b      	ldr	r3, [r7, #20]
 8103f52:	2200      	movs	r2, #0
 8103f54:	619a      	str	r2, [r3, #24]
    stack->R10   = 0;
 8103f56:	697b      	ldr	r3, [r7, #20]
 8103f58:	2200      	movs	r2, #0
 8103f5a:	615a      	str	r2, [r3, #20]
    stack->R8    = 0;
 8103f5c:	697b      	ldr	r3, [r7, #20]
 8103f5e:	2200      	movs	r2, #0
 8103f60:	611a      	str	r2, [r3, #16]
    stack->R7    = 0;
 8103f62:	697b      	ldr	r3, [r7, #20]
 8103f64:	2200      	movs	r2, #0
 8103f66:	60da      	str	r2, [r3, #12]
    stack->R6    = 0;
 8103f68:	697b      	ldr	r3, [r7, #20]
 8103f6a:	2200      	movs	r2, #0
 8103f6c:	609a      	str	r2, [r3, #8]
    stack->R5    = 0;
 8103f6e:	697b      	ldr	r3, [r7, #20]
 8103f70:	2200      	movs	r2, #0
 8103f72:	605a      	str	r2, [r3, #4]
    stack->R4    = 0;
 8103f74:	697b      	ldr	r3, [r7, #20]
 8103f76:	2200      	movs	r2, #0
 8103f78:	601a      	str	r2, [r3, #0]

	__SUPRESS_UNUSED_VAR(stackLowAddress);
    return (StackPointerType)(&(stack->R4));
 8103f7a:	697b      	ldr	r3, [r7, #20]
}
 8103f7c:	4618      	mov	r0, r3
 8103f7e:	371c      	adds	r7, #28
 8103f80:	46bd      	mov	sp, r7
 8103f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f86:	4770      	bx	lr

08103f88 <CILstack_setStackPointer>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION __NAKED void CILstack_setStackPointer(AddressType address)
{
    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8103f88:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
	__asm volatile ("MSR PSP,R0");
 8103f8c:	f380 8809 	msr	PSP, r0
    __asm volatile ("MOV R0, #0x3");
 8103f90:	f04f 0003 	mov.w	r0, #3
    __asm volatile ("MSR CONTROL, R0");
 8103f94:	f380 8814 	msr	CONTROL, r0
    __asm volatile ("ISB");
 8103f98:	f3bf 8f6f 	isb	sy
    __asm volatile ("BX R14");
 8103f9c:	4770      	bx	lr

	__SUPRESS_UNUSED_VAR(address);
}
 8103f9e:	bf00      	nop

08103fa0 <CILsysCalls_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_dispatcher(BitWidthType *sp)
{
 8103fa0:	b580      	push	{r7, lr}
 8103fa2:	b08e      	sub	sp, #56	; 0x38
 8103fa4:	af00      	add	r7, sp, #0
 8103fa6:	6078      	str	r0, [r7, #4]
    CosmOS_GenericVoidType sysCall;
    CosmOS_OsVariableType * osVar;
    CosmOS_RoutesConfigurationType * routeVar;


    uint8_t *pc = (uint8_t*)(sp[6]);
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	3318      	adds	r3, #24
 8103fac:	681b      	ldr	r3, [r3, #0]
 8103fae:	633b      	str	r3, [r7, #48]	; 0x30

    pc-=2;
 8103fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103fb2:	3b02      	subs	r3, #2
 8103fb4:	633b      	str	r3, [r7, #48]	; 0x30

    osVar = os_getOsVar();
 8103fb6:	f7fe fbeb 	bl	8102790 <os_getOsVar>
 8103fba:	62f8      	str	r0, [r7, #44]	; 0x2c

    uint8_t sysCallId = *pc;
 8103fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103fbe:	781b      	ldrb	r3, [r3, #0]
 8103fc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8103fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103fc6:	60bb      	str	r3, [r7, #8]
    return (CosmOS_RoutesConfigurationType *)(osVar->cfg->route);
 8103fc8:	68bb      	ldr	r3, [r7, #8]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	691b      	ldr	r3, [r3, #16]

    routeVar = os_getOsRoutes( osVar );
 8103fce:	627b      	str	r3, [r7, #36]	; 0x24

    sysCall = route_getRoutesFunc( routeVar, sp[0] );
 8103fd0:	687b      	ldr	r3, [r7, #4]
 8103fd2:	681b      	ldr	r3, [r3, #0]
 8103fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103fd6:	613a      	str	r2, [r7, #16]
 8103fd8:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_GenericVoidType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_GenericVoidType route_getRoutesFunc(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (CosmOS_GenericVoidType)(route->routeFunc[route->routeIdToFunc[callId]]);
 8103fda:	693b      	ldr	r3, [r7, #16]
 8103fdc:	681a      	ldr	r2, [r3, #0]
 8103fde:	693b      	ldr	r3, [r7, #16]
 8103fe0:	6859      	ldr	r1, [r3, #4]
 8103fe2:	68fb      	ldr	r3, [r7, #12]
 8103fe4:	009b      	lsls	r3, r3, #2
 8103fe6:	440b      	add	r3, r1
 8103fe8:	681b      	ldr	r3, [r3, #0]
 8103fea:	009b      	lsls	r3, r3, #2
 8103fec:	4413      	add	r3, r2
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	623b      	str	r3, [r7, #32]
    entityId = route_getRoutesEntityId( routeVar, sp[0] );
 8103ff2:	687b      	ldr	r3, [r7, #4]
 8103ff4:	681b      	ldr	r3, [r3, #0]
 8103ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103ff8:	61ba      	str	r2, [r7, #24]
 8103ffa:	617b      	str	r3, [r7, #20]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType route_getRoutesEntityId(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (route->routeIdToEntity[callId]);
 8103ffc:	69bb      	ldr	r3, [r7, #24]
 8103ffe:	689a      	ldr	r2, [r3, #8]
 8104000:	697b      	ldr	r3, [r7, #20]
 8104002:	009b      	lsls	r3, r3, #2
 8104004:	4413      	add	r3, r2
 8104006:	681b      	ldr	r3, [r3, #0]
 8104008:	61fb      	str	r3, [r7, #28]

    switch ( sysCallId )
 810400a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810400e:	2b04      	cmp	r3, #4
 8104010:	d834      	bhi.n	810407c <CILsysCalls_dispatcher+0xdc>
 8104012:	a201      	add	r2, pc, #4	; (adr r2, 8104018 <CILsysCalls_dispatcher+0x78>)
 8104014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104018:	0810402d 	.word	0x0810402d
 810401c:	08104035 	.word	0x08104035
 8104020:	0810403f 	.word	0x0810403f
 8104024:	08104051 	.word	0x08104051
 8104028:	08104069 	.word	0x08104069
    {
        case 0 :
        {
            ((CosmOS_Generic_bitWidthType_ret_void)sysCall)(entityId);
 810402c:	6a3b      	ldr	r3, [r7, #32]
 810402e:	69f8      	ldr	r0, [r7, #28]
 8104030:	4798      	blx	r3
            break;
 8104032:	e024      	b.n	810407e <CILsysCalls_dispatcher+0xde>
        }

		case 1 :
        {
            returnValue = ((CosmOS_Generic_bitWidthType_ret_bitWidthType)sysCall)(entityId);
 8104034:	6a3b      	ldr	r3, [r7, #32]
 8104036:	69f8      	ldr	r0, [r7, #28]
 8104038:	4798      	blx	r3
 810403a:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 810403c:	e01f      	b.n	810407e <CILsysCalls_dispatcher+0xde>
        }

        case 2 :
        {
            returnValue = ((CosmOS_Generic_bitWidthType_bitWidthType_ret_bitWidthType)sysCall)(entityId, (BitWidthType)sp[1]);
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	3304      	adds	r3, #4
 8104042:	681a      	ldr	r2, [r3, #0]
 8104044:	6a3b      	ldr	r3, [r7, #32]
 8104046:	4611      	mov	r1, r2
 8104048:	69f8      	ldr	r0, [r7, #28]
 810404a:	4798      	blx	r3
 810404c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 810404e:	e016      	b.n	810407e <CILsysCalls_dispatcher+0xde>
        }

        case 3 :
        {
			returnValue = ((CosmOS_Generic_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType)sysCall)(entityId, (void *)sp[1], sp[2]);
 8104050:	687b      	ldr	r3, [r7, #4]
 8104052:	3304      	adds	r3, #4
 8104054:	681b      	ldr	r3, [r3, #0]
 8104056:	4619      	mov	r1, r3
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	3308      	adds	r3, #8
 810405c:	681a      	ldr	r2, [r3, #0]
 810405e:	6a3b      	ldr	r3, [r7, #32]
 8104060:	69f8      	ldr	r0, [r7, #28]
 8104062:	4798      	blx	r3
 8104064:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8104066:	e00a      	b.n	810407e <CILsysCalls_dispatcher+0xde>
        }

		case 4 :
        {
			returnValue = ((CosmOS_Generic_bitWidthType_voidPtr_ret_bitWidthType)sysCall)(entityId, (void *)sp[1]);
 8104068:	687b      	ldr	r3, [r7, #4]
 810406a:	3304      	adds	r3, #4
 810406c:	681b      	ldr	r3, [r3, #0]
 810406e:	461a      	mov	r2, r3
 8104070:	6a3b      	ldr	r3, [r7, #32]
 8104072:	4611      	mov	r1, r2
 8104074:	69f8      	ldr	r0, [r7, #28]
 8104076:	4798      	blx	r3
 8104078:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 810407a:	e000      	b.n	810407e <CILsysCalls_dispatcher+0xde>
        }

        default :
        {
            /* PANIC */
            break;
 810407c:	bf00      	nop
        }
    }

    sp[0] = returnValue;
 810407e:	687b      	ldr	r3, [r7, #4]
 8104080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8104082:	601a      	str	r2, [r3, #0]
}
 8104084:	bf00      	nop
 8104086:	3738      	adds	r7, #56	; 0x38
 8104088:	46bd      	mov	sp, r7
 810408a:	bd80      	pop	{r7, pc}

0810408c <CILsysCalls_bitWidthType_ret_void>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_bitWidthType_ret_void(BitWidthType id)
{
 810408c:	b480      	push	{r7}
 810408e:	b083      	sub	sp, #12
 8104090:	af00      	add	r7, sp, #0
 8104092:	6078      	str	r0, [r7, #4]
    __asm volatile("SVC #0");
 8104094:	df00      	svc	0

	__SUPRESS_UNUSED_VAR(id);
}
 8104096:	bf00      	nop
 8104098:	370c      	adds	r7, #12
 810409a:	46bd      	mov	sp, r7
 810409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040a0:	4770      	bx	lr

081040a2 <CILsysCalls_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_ret_bitWidthType(BitWidthType id)
{
 81040a2:	b480      	push	{r7}
 81040a4:	b085      	sub	sp, #20
 81040a6:	af00      	add	r7, sp, #0
 81040a8:	6078      	str	r0, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #1");
 81040aa:	df01      	svc	1
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 81040ac:	4603      	mov	r3, r0
 81040ae:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
    return returnValue;
 81040b0:	68fb      	ldr	r3, [r7, #12]
}
 81040b2:	4618      	mov	r0, r3
 81040b4:	3714      	adds	r7, #20
 81040b6:	46bd      	mov	sp, r7
 81040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040bc:	4770      	bx	lr

081040be <CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType(BitWidthType id, BitWidthType arg)
{
 81040be:	b480      	push	{r7}
 81040c0:	b085      	sub	sp, #20
 81040c2:	af00      	add	r7, sp, #0
 81040c4:	6078      	str	r0, [r7, #4]
 81040c6:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    __asm volatile("SVC #2");
 81040c8:	df02      	svc	2
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 81040ca:	4603      	mov	r3, r0
 81040cc:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(arg);
    return returnValue;
 81040ce:	68fb      	ldr	r3, [r7, #12]
}
 81040d0:	4618      	mov	r0, r3
 81040d2:	3714      	adds	r7, #20
 81040d4:	46bd      	mov	sp, r7
 81040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040da:	4770      	bx	lr

081040dc <CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType(BitWidthType id, void * ptr, BitWidthType arg)
{
 81040dc:	b480      	push	{r7}
 81040de:	b087      	sub	sp, #28
 81040e0:	af00      	add	r7, sp, #0
 81040e2:	60f8      	str	r0, [r7, #12]
 81040e4:	60b9      	str	r1, [r7, #8]
 81040e6:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #3");
 81040e8:	df03      	svc	3
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 81040ea:	4603      	mov	r3, r0
 81040ec:	617b      	str	r3, [r7, #20]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(ptr);
	__SUPRESS_UNUSED_VAR(arg);
    return returnValue;
 81040ee:	697b      	ldr	r3, [r7, #20]
}
 81040f0:	4618      	mov	r0, r3
 81040f2:	371c      	adds	r7, #28
 81040f4:	46bd      	mov	sp, r7
 81040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040fa:	4770      	bx	lr

081040fc <CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType(BitWidthType id, void * ptr)
{
 81040fc:	b480      	push	{r7}
 81040fe:	b085      	sub	sp, #20
 8104100:	af00      	add	r7, sp, #0
 8104102:	6078      	str	r0, [r7, #4]
 8104104:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    __asm volatile("SVC #4");
 8104106:	df04      	svc	4
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8104108:	4603      	mov	r3, r0
 810410a:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(ptr);
    return returnValue;
 810410c:	68fb      	ldr	r3, [r7, #12]
}
 810410e:	4618      	mov	r0, r3
 8104110:	3714      	adds	r7, #20
 8104112:	46bd      	mov	sp, r7
 8104114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104118:	4770      	bx	lr
 810411a:	bf00      	nop

0810411c <CILsysTimer_startTimer>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_startTimer(BitWidthType ticks, BitWidthType timerTickCount)
{
 810411c:	b480      	push	{r7}
 810411e:	b083      	sub	sp, #12
 8104120:	af00      	add	r7, sp, #0
 8104122:	6078      	str	r0, [r7, #4]
 8104124:	6039      	str	r1, [r7, #0]

	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)) - 1UL);
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	683a      	ldr	r2, [r7, #0]
 810412a:	fb02 f303 	mul.w	r3, r2, r3
 810412e:	4a07      	ldr	r2, [pc, #28]	; (810414c <CILsysTimer_startTimer+0x30>)
 8104130:	3b01      	subs	r3, #1
 8104132:	6053      	str	r3, [r2, #4]
	SysTick->VAL   = 0UL;
 8104134:	4b05      	ldr	r3, [pc, #20]	; (810414c <CILsysTimer_startTimer+0x30>)
 8104136:	2200      	movs	r2, #0
 8104138:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = 	SysTick_CTRL_CLKSOURCE_Msk |
 810413a:	4b04      	ldr	r3, [pc, #16]	; (810414c <CILsysTimer_startTimer+0x30>)
 810413c:	2207      	movs	r2, #7
 810413e:	601a      	str	r2, [r3, #0]
						SysTick_CTRL_TICKINT_Msk   |
						SysTick_CTRL_ENABLE_Msk;
}
 8104140:	bf00      	nop
 8104142:	370c      	adds	r7, #12
 8104144:	46bd      	mov	sp, r7
 8104146:	f85d 7b04 	ldr.w	r7, [sp], #4
 810414a:	4770      	bx	lr
 810414c:	e000e010 	.word	0xe000e010

08104150 <CILsysTimer_setTicks>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_setTicks(BitWidthType ticks, BitWidthType timerTickCount)
{
 8104150:	b480      	push	{r7}
 8104152:	b083      	sub	sp, #12
 8104154:	af00      	add	r7, sp, #0
 8104156:	6078      	str	r0, [r7, #4]
 8104158:	6039      	str	r1, [r7, #0]
	SysTick->CTRL = 0;
 810415a:	4b0e      	ldr	r3, [pc, #56]	; (8104194 <CILsysTimer_setTicks+0x44>)
 810415c:	2200      	movs	r2, #0
 810415e:	601a      	str	r2, [r3, #0]

	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)-\
 8104160:	687b      	ldr	r3, [r7, #4]
 8104162:	683a      	ldr	r2, [r7, #0]
 8104164:	fb02 f203 	mul.w	r2, r2, r3
								(SysTick->LOAD - SysTick->VAL)) - 1UL);
 8104168:	4b0a      	ldr	r3, [pc, #40]	; (8104194 <CILsysTimer_setTicks+0x44>)
 810416a:	6899      	ldr	r1, [r3, #8]
 810416c:	4b09      	ldr	r3, [pc, #36]	; (8104194 <CILsysTimer_setTicks+0x44>)
 810416e:	685b      	ldr	r3, [r3, #4]
 8104170:	1acb      	subs	r3, r1, r3
	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)-\
 8104172:	4413      	add	r3, r2
 8104174:	4a07      	ldr	r2, [pc, #28]	; (8104194 <CILsysTimer_setTicks+0x44>)
 8104176:	3b01      	subs	r3, #1
 8104178:	6053      	str	r3, [r2, #4]

	SysTick->VAL   = 0UL;
 810417a:	4b06      	ldr	r3, [pc, #24]	; (8104194 <CILsysTimer_setTicks+0x44>)
 810417c:	2200      	movs	r2, #0
 810417e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = 	SysTick_CTRL_CLKSOURCE_Msk |
 8104180:	4b04      	ldr	r3, [pc, #16]	; (8104194 <CILsysTimer_setTicks+0x44>)
 8104182:	2207      	movs	r2, #7
 8104184:	601a      	str	r2, [r3, #0]
						SysTick_CTRL_TICKINT_Msk   |
						SysTick_CTRL_ENABLE_Msk;
}
 8104186:	bf00      	nop
 8104188:	370c      	adds	r7, #12
 810418a:	46bd      	mov	sp, r7
 810418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104190:	4770      	bx	lr
 8104192:	bf00      	nop
 8104194:	e000e010 	.word	0xe000e010

08104198 <CILuart_sysJob>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILuart_sysJob()
{
 8104198:	b480      	push	{r7}
 810419a:	af00      	add	r7, sp, #0

    //TX SIDE
    //check where is DMA and switch it if its buffer is empty
    //check if user is in red zone, if yes check if DMA is on the same buffer, then switch to the other
    //HAL_UART_Receive_DMA()
}
 810419c:	bf00      	nop
 810419e:	46bd      	mov	sp, r7
 81041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041a4:	4770      	bx	lr

081041a6 <_e_funcs_align_helper>:
	...

Disassembly of section .application_section_funcs_CM7:

08080000 <Idle_CM7>:
  * @{
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 8080000:	b480      	push	{r7}
 8080002:	af00      	add	r7, sp, #0
 8080004:	bf00      	nop
 8080006:	46bd      	mov	sp, r7
 8080008:	f85d 7b04 	ldr.w	r7, [sp], #4
 808000c:	4770      	bx	lr

0808000e <sysJobs_CM7>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 808000e:	b480      	push	{r7}
 8080010:	af00      	add	r7, sp, #0
 8080012:	bf00      	nop
 8080014:	46bd      	mov	sp, r7
 8080016:	f85d 7b04 	ldr.w	r7, [sp], #4
 808001a:	4770      	bx	lr
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 808001c:	b480      	push	{r7}
 808001e:	af00      	add	r7, sp, #0
 8080020:	bf00      	nop
 8080022:	46bd      	mov	sp, r7
 8080024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080028:	4770      	bx	lr

0808002a <IdleThread_CM7>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM4)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 808002a:	b480      	push	{r7}
 808002c:	af00      	add	r7, sp, #0
 808002e:	bf00      	nop
 8080030:	46bd      	mov	sp, r7
 8080032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080036:	4770      	bx	lr
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 8080038:	b480      	push	{r7}
 808003a:	af00      	add	r7, sp, #0
 808003c:	bf00      	nop
 808003e:	46bd      	mov	sp, r7
 8080040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080044:	4770      	bx	lr
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM4)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Logger_thread(void){};
 8080046:	b480      	push	{r7}
 8080048:	af00      	add	r7, sp, #0
 808004a:	bf00      	nop
 808004c:	46bd      	mov	sp, r7
 808004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080052:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 8080054:	b480      	push	{r7}
 8080056:	af00      	add	r7, sp, #0
 8080058:	bf00      	nop
 808005a:	46bd      	mov	sp, r7
 808005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080060:	4770      	bx	lr

08080062 <wrapped_Idle_CM7>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Idle_CM7(void)
{
 8080062:	b580      	push	{r7, lr}
 8080064:	af00      	add	r7, sp, #0
    Idle_CM7();
 8080066:	f7ff ffcb 	bl	8080000 <Idle_CM7>
    for(;;);
 808006a:	e7fe      	b.n	808006a <wrapped_Idle_CM7+0x8>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 808006c:	b480      	push	{r7}
 808006e:	af00      	add	r7, sp, #0
 8080070:	bf00      	nop
 8080072:	46bd      	mov	sp, r7
 8080074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080078:	4770      	bx	lr

0808007a <wrapped_sysJobs_CM7>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_sysJobs_CM7(void)
{
 808007a:	b580      	push	{r7, lr}
 808007c:	af00      	add	r7, sp, #0
    cosmosApiInternal_sysJobs_dispatcher();
 808007e:	2012      	movs	r0, #18
 8080080:	f083 fa9a 	bl	81035b8 <sysCalls_bitWidthType_ret_void>
    cosmosApiInternal_schedulable_setExecutionStateToFinished();
 8080084:	2011      	movs	r0, #17
 8080086:	f083 fa97 	bl	81035b8 <sysCalls_bitWidthType_ret_void>
    for(;;);
 808008a:	e7fe      	b.n	808008a <wrapped_sysJobs_CM7+0x10>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 808008c:	b480      	push	{r7}
 808008e:	af00      	add	r7, sp, #0
 8080090:	bf00      	nop
 8080092:	46bd      	mov	sp, r7
 8080094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080098:	4770      	bx	lr

0808009a <wrapped_Task_0_Core_0_Handler>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Task_0_Core_0_Handler(void)
{
 808009a:	b580      	push	{r7, lr}
 808009c:	af00      	add	r7, sp, #0
    Task_0_Core_0_Handler();
 808009e:	f000 f883 	bl	80801a8 <Task_0_Core_0_Handler>
    cosmosApiInternal_schedulable_setExecutionStateToFinished();
 80800a2:	2011      	movs	r0, #17
 80800a4:	f083 fa88 	bl	81035b8 <sysCalls_bitWidthType_ret_void>
    for(;;);
 80800a8:	e7fe      	b.n	80800a8 <wrapped_Task_0_Core_0_Handler+0xe>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 80800aa:	b480      	push	{r7}
 80800ac:	af00      	add	r7, sp, #0
 80800ae:	bf00      	nop
 80800b0:	46bd      	mov	sp, r7
 80800b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800b6:	4770      	bx	lr

080800b8 <wrapped_IdleThread_CM7>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_IdleThread_CM7(void)
{
 80800b8:	b580      	push	{r7, lr}
 80800ba:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM7();
 80800bc:	f7ff ffb5 	bl	808002a <IdleThread_CM7>
 80800c0:	e7fc      	b.n	80800bc <wrapped_IdleThread_CM7+0x4>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 80800c2:	b480      	push	{r7}
 80800c4:	af00      	add	r7, sp, #0
 80800c6:	bf00      	nop
 80800c8:	46bd      	mov	sp, r7
 80800ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800ce:	4770      	bx	lr

080800d0 <wrapped_Thread_Core_0>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Thread_Core_0(void)
{
 80800d0:	b580      	push	{r7, lr}
 80800d2:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        Thread_Core_0();
 80800d4:	f000 f8b6 	bl	8080244 <Thread_Core_0>
 80800d8:	e7fc      	b.n	80800d4 <wrapped_Thread_Core_0+0x4>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Logger_thread(void){};
 80800da:	b480      	push	{r7}
 80800dc:	af00      	add	r7, sp, #0
 80800de:	bf00      	nop
 80800e0:	46bd      	mov	sp, r7
 80800e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800e6:	4770      	bx	lr

080800e8 <wrapped_Logger_thread>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Logger_thread(void)
{
 80800e8:	b580      	push	{r7, lr}
 80800ea:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        Logger_thread();
 80800ec:	f000 f919 	bl	8080322 <Logger_thread>
 80800f0:	e7fc      	b.n	80800ec <wrapped_Logger_thread+0x4>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 80800f2:	b480      	push	{r7}
 80800f4:	af00      	add	r7, sp, #0
 80800f6:	bf00      	nop
 80800f8:	46bd      	mov	sp, r7
 80800fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800fe:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 8080100:	b480      	push	{r7}
 8080102:	af00      	add	r7, sp, #0
 8080104:	bf00      	nop
 8080106:	46bd      	mov	sp, r7
 8080108:	f85d 7b04 	ldr.w	r7, [sp], #4
 808010c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 808010e:	b480      	push	{r7}
 8080110:	af00      	add	r7, sp, #0
 8080112:	bf00      	nop
 8080114:	46bd      	mov	sp, r7
 8080116:	f85d 7b04 	ldr.w	r7, [sp], #4
 808011a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 808011c:	b480      	push	{r7}
 808011e:	af00      	add	r7, sp, #0
 8080120:	bf00      	nop
 8080122:	46bd      	mov	sp, r7
 8080124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080128:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 808012a:	b480      	push	{r7}
 808012c:	af00      	add	r7, sp, #0
 808012e:	bf00      	nop
 8080130:	46bd      	mov	sp, r7
 8080132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080136:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Logger_thread(void){};
 8080138:	b480      	push	{r7}
 808013a:	af00      	add	r7, sp, #0
 808013c:	bf00      	nop
 808013e:	46bd      	mov	sp, r7
 8080140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080144:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 8080146:	b480      	push	{r7}
 8080148:	af00      	add	r7, sp, #0
 808014a:	bf00      	nop
 808014c:	46bd      	mov	sp, r7
 808014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080152:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 8080154:	b480      	push	{r7}
 8080156:	af00      	add	r7, sp, #0
 8080158:	bf00      	nop
 808015a:	46bd      	mov	sp, r7
 808015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080160:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 8080162:	b480      	push	{r7}
 8080164:	af00      	add	r7, sp, #0
 8080166:	bf00      	nop
 8080168:	46bd      	mov	sp, r7
 808016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808016e:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 8080170:	b480      	push	{r7}
 8080172:	af00      	add	r7, sp, #0
 8080174:	bf00      	nop
 8080176:	46bd      	mov	sp, r7
 8080178:	f85d 7b04 	ldr.w	r7, [sp], #4
 808017c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 808017e:	b480      	push	{r7}
 8080180:	af00      	add	r7, sp, #0
 8080182:	bf00      	nop
 8080184:	46bd      	mov	sp, r7
 8080186:	f85d 7b04 	ldr.w	r7, [sp], #4
 808018a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Logger_thread(void){};
 808018c:	b480      	push	{r7}
 808018e:	af00      	add	r7, sp, #0
 8080190:	bf00      	nop
 8080192:	46bd      	mov	sp, r7
 8080194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080198:	4770      	bx	lr

0808019a <userKernelPanicHook_CM7>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void userKernelPanicHook_CM7(void)
{
 808019a:	b480      	push	{r7}
 808019c:	af00      	add	r7, sp, #0

/********************************************************************************
** stop_name =userKernelPanicHook_CM7.cfunc
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 808019e:	bf00      	nop
 80801a0:	46bd      	mov	sp, r7
 80801a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80801a6:	4770      	bx	lr

080801a8 <Task_0_Core_0_Handler>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void Task_0_Core_0_Handler(void)
{
 80801a8:	b580      	push	{r7, lr}
 80801aa:	b084      	sub	sp, #16
 80801ac:	af00      	add	r7, sp, #0
********************************************************************************/
	CosmOS_SpinlockStateType spinlockState;
	CosmOS_BufferStateType bufferState;
	CosmOS_MutexStateType mutexState;

	cosmosApi_deviceIO_togglePin(GPIOF, GPIO_PIN_11); //Timing measurement with logic analyzer, pls dont remove
 80801ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80801b2:	4920      	ldr	r1, [pc, #128]	; (8080234 <Task_0_Core_0_Handler+0x8c>)
 80801b4:	200e      	movs	r0, #14
 80801b6:	f083 fa26 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	if (counter > 100)
 80801ba:	4b1f      	ldr	r3, [pc, #124]	; (8080238 <Task_0_Core_0_Handler+0x90>)
 80801bc:	681b      	ldr	r3, [r3, #0]
 80801be:	2b64      	cmp	r3, #100	; 0x64
 80801c0:	dd26      	ble.n	8080210 <Task_0_Core_0_Handler+0x68>
	{
		counter = 0;
 80801c2:	4b1d      	ldr	r3, [pc, #116]	; (8080238 <Task_0_Core_0_Handler+0x90>)
 80801c4:	2200      	movs	r2, #0
 80801c6:	601a      	str	r2, [r3, #0]

		bufferReader_cm7 = 100;
 80801c8:	4b1c      	ldr	r3, [pc, #112]	; (808023c <Task_0_Core_0_Handler+0x94>)
 80801ca:	2264      	movs	r2, #100	; 0x64
 80801cc:	601a      	str	r2, [r3, #0]
		bufferState = cosmosApi_write_buffer_x_core_buffer_1(&bufferReader_cm7,sizeof(bufferReader_cm7));
 80801ce:	2204      	movs	r2, #4
 80801d0:	491a      	ldr	r1, [pc, #104]	; (808023c <Task_0_Core_0_Handler+0x94>)
 80801d2:	200b      	movs	r0, #11
 80801d4:	f083 fa17 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 80801d8:	4603      	mov	r3, r0
 80801da:	73fb      	strb	r3, [r7, #15]

		bufferReader_cm7 = 0;
 80801dc:	4b17      	ldr	r3, [pc, #92]	; (808023c <Task_0_Core_0_Handler+0x94>)
 80801de:	2200      	movs	r2, #0
 80801e0:	601a      	str	r2, [r3, #0]
		bufferState = cosmosApi_read_buffer_x_core_buffer_1(&bufferReader_cm7,sizeof(bufferReader_cm7));
 80801e2:	2204      	movs	r2, #4
 80801e4:	4915      	ldr	r1, [pc, #84]	; (808023c <Task_0_Core_0_Handler+0x94>)
 80801e6:	200a      	movs	r0, #10
 80801e8:	f083 fa0d 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 80801ec:	4603      	mov	r3, r0
 80801ee:	73fb      	strb	r3, [r7, #15]

		spinlockState = cosmosApi_try_spinlock_uart_buffer_read();
 80801f0:	2001      	movs	r0, #1
 80801f2:	f083 f9ec 	bl	81035ce <sysCalls_bitWidthType_ret_bitWidthType>
 80801f6:	4603      	mov	r3, r0
 80801f8:	60bb      	str	r3, [r7, #8]
		spinlockState = cosmosApi_release_spinlock_uart_buffer_read();
 80801fa:	2002      	movs	r0, #2
 80801fc:	f083 f9e7 	bl	81035ce <sysCalls_bitWidthType_ret_bitWidthType>
 8080200:	4603      	mov	r3, r0
 8080202:	60bb      	str	r3, [r7, #8]

		mutexState = mutex_getMutex(&gpio_e_mutex); //trying if kernel will return err cause task cannot use mutexes
 8080204:	480e      	ldr	r0, [pc, #56]	; (8080240 <Task_0_Core_0_Handler+0x98>)
 8080206:	f082 f97b 	bl	8102500 <mutex_getMutex>
 808020a:	4603      	mov	r3, r0
 808020c:	607b      	str	r3, [r7, #4]
 808020e:	e004      	b.n	808021a <Task_0_Core_0_Handler+0x72>

	}
	else
	{
		counter++;
 8080210:	4b09      	ldr	r3, [pc, #36]	; (8080238 <Task_0_Core_0_Handler+0x90>)
 8080212:	681b      	ldr	r3, [r3, #0]
 8080214:	3301      	adds	r3, #1
 8080216:	4a08      	ldr	r2, [pc, #32]	; (8080238 <Task_0_Core_0_Handler+0x90>)
 8080218:	6013      	str	r3, [r2, #0]
	}
	__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 808021a:	ee20 0a20 	vmul.f32	s0, s0, s1
	cosmosApi_deviceIO_togglePin(GPIOF, GPIO_PIN_11); //Timing measurement with logic analyzer, pls dont remove
 808021e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8080222:	4904      	ldr	r1, [pc, #16]	; (8080234 <Task_0_Core_0_Handler+0x8c>)
 8080224:	200e      	movs	r0, #14
 8080226:	f083 f9ee 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	__SUPRESS_UNUSED_VAR(bufferState);
/********************************************************************************
** stop_name =Task_0_Core_0_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 808022a:	bf00      	nop
 808022c:	3710      	adds	r7, #16
 808022e:	46bd      	mov	sp, r7
 8080230:	bd80      	pop	{r7, pc}
 8080232:	bf00      	nop
 8080234:	58021400 	.word	0x58021400
 8080238:	20001c08 	.word	0x20001c08
 808023c:	20001c10 	.word	0x20001c10
 8080240:	20001c14 	.word	0x20001c14

08080244 <Thread_Core_0>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void Thread_Core_0(void)
{
 8080244:	b5b0      	push	{r4, r5, r7, lr}
 8080246:	b08e      	sub	sp, #56	; 0x38
 8080248:	af00      	add	r7, sp, #0
** start_name =Thread_Core_0
********************************************************************************/
	CosmOS_MutexStateType mutexState;
	CosmOS_SleepStateType sleepState;

	uint8_t togglePinMessage[] = "Toggeling pin with thread 0 !!!\r\n"; //Data to send
 808024a:	4b22      	ldr	r3, [pc, #136]	; (80802d4 <Thread_Core_0+0x90>)
 808024c:	1d3c      	adds	r4, r7, #4
 808024e:	461d      	mov	r5, r3
 8080250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080258:	682b      	ldr	r3, [r5, #0]
 808025a:	8023      	strh	r3, [r4, #0]

	int * integerArr = new int[10];
 808025c:	2028      	movs	r0, #40	; 0x28
 808025e:	f08b fc68 	bl	810bb32 <_Znaj>
 8080262:	4603      	mov	r3, r0
 8080264:	637b      	str	r3, [r7, #52]	; 0x34
	delete integerArr;
 8080266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8080268:	2b00      	cmp	r3, #0
 808026a:	d003      	beq.n	8080274 <Thread_Core_0+0x30>
 808026c:	2104      	movs	r1, #4
 808026e:	4618      	mov	r0, r3
 8080270:	f08b f9a0 	bl	810b5b4 <_ZdlPvj>

	GPIO * gpio_e = new GPIO(GPIOE);
 8080274:	2004      	movs	r0, #4
 8080276:	f08b f989 	bl	810b58c <_Znwj>
 808027a:	4603      	mov	r3, r0
 808027c:	461c      	mov	r4, r3
 808027e:	4916      	ldr	r1, [pc, #88]	; (80802d8 <Thread_Core_0+0x94>)
 8080280:	4620      	mov	r0, r4
 8080282:	f08b f9a3 	bl	810b5cc <_ZN4GPIOC1EPv>
 8080286:	633c      	str	r4, [r7, #48]	; 0x30

	sleepState = thread_sleep(1);
 8080288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808028c:	f083 faac 	bl	81037e8 <thread_sleepMs>
 8080290:	4603      	mov	r3, r0
 8080292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	mutexState = mutex_getMutex(&gpio_e_mutex);
 8080296:	4811      	ldr	r0, [pc, #68]	; (80802dc <Thread_Core_0+0x98>)
 8080298:	f082 f932 	bl	8102500 <mutex_getMutex>
 808029c:	4603      	mov	r3, r0
 808029e:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_e->togglePin(GPIO_PIN_1);
 80802a0:	2102      	movs	r1, #2
 80802a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80802a4:	f000 f81c 	bl	80802e0 <_ZN4GPIO9togglePinEj>
	mutexState = mutex_releaseMutex(&gpio_e_mutex);
 80802a8:	480c      	ldr	r0, [pc, #48]	; (80802dc <Thread_Core_0+0x98>)
 80802aa:	f082 fa2c 	bl	8102706 <mutex_releaseMutex>
 80802ae:	4603      	mov	r3, r0
 80802b0:	62bb      	str	r3, [r7, #40]	; 0x28

	user_log(togglePinMessage, sizeof(togglePinMessage));
 80802b2:	1d3b      	adds	r3, r7, #4
 80802b4:	2122      	movs	r1, #34	; 0x22
 80802b6:	4618      	mov	r0, r3
 80802b8:	f000 f822 	bl	8080300 <user_log>

	delete gpio_e;
 80802bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80802be:	2b00      	cmp	r3, #0
 80802c0:	d003      	beq.n	80802ca <Thread_Core_0+0x86>
 80802c2:	2104      	movs	r1, #4
 80802c4:	4618      	mov	r0, r3
 80802c6:	f08b f975 	bl	810b5b4 <_ZdlPvj>
	__SUPRESS_UNUSED_VAR(sleepState);
/********************************************************************************
** stop_name =Thread_Core_0
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 80802ca:	bf00      	nop
 80802cc:	3738      	adds	r7, #56	; 0x38
 80802ce:	46bd      	mov	sp, r7
 80802d0:	bdb0      	pop	{r4, r5, r7, pc}
 80802d2:	bf00      	nop
 80802d4:	0810c114 	.word	0x0810c114
 80802d8:	58021000 	.word	0x58021000
 80802dc:	20001c14 	.word	0x20001c14

080802e0 <_ZN4GPIO9togglePinEj>:
/********************************************************************************
** DO NOT MODIFY THIS COMMENT ! Code                 USER SECTION | Start      **
** start_name =blinking_led_CM7_userCodeFree
********************************************************************************/
__APPLICATION_FUNC_SECTION_CM7 void GPIO::togglePin(BitWidthType pinNumber)
{
 80802e0:	b580      	push	{r7, lr}
 80802e2:	b082      	sub	sp, #8
 80802e4:	af00      	add	r7, sp, #0
 80802e6:	6078      	str	r0, [r7, #4]
 80802e8:	6039      	str	r1, [r7, #0]
	cosmosApi_deviceIO_togglePin(address, pinNumber);
 80802ea:	687b      	ldr	r3, [r7, #4]
 80802ec:	681b      	ldr	r3, [r3, #0]
 80802ee:	683a      	ldr	r2, [r7, #0]
 80802f0:	4619      	mov	r1, r3
 80802f2:	200e      	movs	r0, #14
 80802f4:	f083 f987 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
}
 80802f8:	bf00      	nop
 80802fa:	3708      	adds	r7, #8
 80802fc:	46bd      	mov	sp, r7
 80802fe:	bd80      	pop	{r7, pc}

08080300 <user_log>:
/********************************************************************************
** DO NOT MODIFY THIS COMMENT ! Code                 USER SECTION | Start      **
** start_name =logger_userCodeFree
********************************************************************************/
__APPLICATION_FUNC_SECTION_CM7 CosmOS_BufferStateType user_log(void * ptr, BitWidthType size)
{
 8080300:	b580      	push	{r7, lr}
 8080302:	b084      	sub	sp, #16
 8080304:	af00      	add	r7, sp, #0
 8080306:	6078      	str	r0, [r7, #4]
 8080308:	6039      	str	r1, [r7, #0]
	CosmOS_BufferStateType bufferState;
	bufferState = cosmosApi_write_buffer_logger_buffer(ptr, size);
 808030a:	683a      	ldr	r2, [r7, #0]
 808030c:	6879      	ldr	r1, [r7, #4]
 808030e:	200d      	movs	r0, #13
 8080310:	f083 f979 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 8080314:	4603      	mov	r3, r0
 8080316:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8080318:	7bfb      	ldrb	r3, [r7, #15]
};
 808031a:	4618      	mov	r0, r3
 808031c:	3710      	adds	r7, #16
 808031e:	46bd      	mov	sp, r7
 8080320:	bd80      	pop	{r7, pc}

08080322 <Logger_thread>:
{
 8080322:	b580      	push	{r7, lr}
 8080324:	b08e      	sub	sp, #56	; 0x38
 8080326:	af00      	add	r7, sp, #0
	thread_sleepMs(10);
 8080328:	200a      	movs	r0, #10
 808032a:	f083 fa5d 	bl	81037e8 <thread_sleepMs>
	cosmosApi_interrupt_disableInterrupt(USART3_IRQn);
 808032e:	2127      	movs	r1, #39	; 0x27
 8080330:	201c      	movs	r0, #28
 8080332:	f083 f959 	bl	81035e8 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
	cosmosApi_interrupt_disableInterrupt(DMA1_Stream0_IRQn);
 8080336:	210b      	movs	r1, #11
 8080338:	201c      	movs	r0, #28
 808033a:	f083 f955 	bl	81035e8 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
	osVar = os_getOsVar();
 808033e:	f082 fa27 	bl	8102790 <os_getOsVar>
 8080342:	4603      	mov	r3, r0
 8080344:	633b      	str	r3, [r7, #48]	; 0x30
 8080346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8080348:	60bb      	str	r3, [r7, #8]
 808034a:	2303      	movs	r3, #3
 808034c:	607b      	str	r3, [r7, #4]
    return (&(osVar->bufferVars[bufferId]));
 808034e:	68bb      	ldr	r3, [r7, #8]
 8080350:	689a      	ldr	r2, [r3, #8]
 8080352:	687b      	ldr	r3, [r7, #4]
 8080354:	011b      	lsls	r3, r3, #4
 8080356:	4413      	add	r3, r2
	loggerBufferVar = os_getOsBufferVar(osVar, logger_buffer_id);
 8080358:	62fb      	str	r3, [r7, #44]	; 0x2c
 808035a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808035c:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 808035e:	68fb      	ldr	r3, [r7, #12]
 8080360:	681b      	ldr	r3, [r3, #0]
 8080362:	681b      	ldr	r3, [r3, #0]
	bufferArr = buffer_getBuffer(loggerBufferVar);
 8080364:	62bb      	str	r3, [r7, #40]	; 0x28
 8080366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8080368:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->size);
 808036a:	693b      	ldr	r3, [r7, #16]
 808036c:	681b      	ldr	r3, [r3, #0]
 808036e:	689b      	ldr	r3, [r3, #8]
	bufferSize = buffer_getBufferSize(loggerBufferVar);
 8080370:	627b      	str	r3, [r7, #36]	; 0x24
 8080372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8080374:	617b      	str	r3, [r7, #20]
    return (bufferVar->tail);
 8080376:	697b      	ldr	r3, [r7, #20]
 8080378:	689b      	ldr	r3, [r3, #8]
	bufferTail = buffer_getBufferTail(loggerBufferVar);
 808037a:	623b      	str	r3, [r7, #32]
 808037c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 808037e:	61bb      	str	r3, [r7, #24]
    return (bufferVar->fullCells);
 8080380:	69bb      	ldr	r3, [r7, #24]
 8080382:	68db      	ldr	r3, [r3, #12]
	bufferFullCellsNum = buffer_getFullCellsNum(loggerBufferVar);
 8080384:	61fb      	str	r3, [r7, #28]
	if ( bufferFullCellsNum )
 8080386:	69fb      	ldr	r3, [r7, #28]
 8080388:	2b00      	cmp	r3, #0
 808038a:	d01a      	beq.n	80803c2 <Logger_thread+0xa0>
		if ((AddressType)bufferArr + bufferSize < ((AddressType)bufferArr + bufferTail + bufferFullCellsNum))
 808038c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 808038e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8080390:	441a      	add	r2, r3
 8080392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8080394:	6a3b      	ldr	r3, [r7, #32]
 8080396:	4419      	add	r1, r3
 8080398:	69fb      	ldr	r3, [r7, #28]
 808039a:	440b      	add	r3, r1
 808039c:	429a      	cmp	r2, r3
 808039e:	d204      	bcs.n	80803aa <Logger_thread+0x88>
			sizeToSend = bufferSize - bufferTail;
 80803a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80803a2:	6a3b      	ldr	r3, [r7, #32]
 80803a4:	1ad3      	subs	r3, r2, r3
 80803a6:	637b      	str	r3, [r7, #52]	; 0x34
 80803a8:	e001      	b.n	80803ae <Logger_thread+0x8c>
			sizeToSend = bufferFullCellsNum;
 80803aa:	69fb      	ldr	r3, [r7, #28]
 80803ac:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_UART_Transmit_DMA(&huart3, (unsigned char *)((AddressType)bufferArr + (AddressType)bufferTail), sizeToSend);
 80803ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80803b0:	6a3b      	ldr	r3, [r7, #32]
 80803b2:	4413      	add	r3, r2
 80803b4:	4619      	mov	r1, r3
 80803b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80803b8:	b29b      	uxth	r3, r3
 80803ba:	461a      	mov	r2, r3
 80803bc:	4807      	ldr	r0, [pc, #28]	; (80803dc <Logger_thread+0xba>)
 80803be:	f08a ff7d 	bl	810b2bc <HAL_UART_Transmit_DMA>
	cosmosApi_interrupt_enableInterrupt(USART3_IRQn);
 80803c2:	2127      	movs	r1, #39	; 0x27
 80803c4:	201d      	movs	r0, #29
 80803c6:	f083 f90f 	bl	81035e8 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
	cosmosApi_interrupt_enableInterrupt(DMA1_Stream0_IRQn);
 80803ca:	210b      	movs	r1, #11
 80803cc:	201d      	movs	r0, #29
 80803ce:	f083 f90b 	bl	81035e8 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
};
 80803d2:	bf00      	nop
 80803d4:	3738      	adds	r7, #56	; 0x38
 80803d6:	46bd      	mov	sp, r7
 80803d8:	bd80      	pop	{r7, pc}
 80803da:	bf00      	nop
 80803dc:	20002008 	.word	0x20002008

080803e0 <HAL_UART_TxCpltCallback>:

__APPLICATION_FUNC_SECTION_CM7 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80803e0:	b580      	push	{r7, lr}
 80803e2:	b086      	sub	sp, #24
 80803e4:	af00      	add	r7, sp, #0
 80803e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80803e8:	b672      	cpsid	i
}
 80803ea:	bf00      	nop
	__disable_irq();
	CosmOS_BufferVariableType *loggerBufferVar;
	CosmOS_OsVariableType *osVar;

	osVar = os_getOsVar();
 80803ec:	f082 f9d0 	bl	8102790 <os_getOsVar>
 80803f0:	4603      	mov	r3, r0
 80803f2:	617b      	str	r3, [r7, #20]
 80803f4:	697b      	ldr	r3, [r7, #20]
 80803f6:	60fb      	str	r3, [r7, #12]
 80803f8:	2303      	movs	r3, #3
 80803fa:	60bb      	str	r3, [r7, #8]
 80803fc:	68fb      	ldr	r3, [r7, #12]
 80803fe:	689a      	ldr	r2, [r3, #8]
 8080400:	68bb      	ldr	r3, [r7, #8]
 8080402:	011b      	lsls	r3, r3, #4
 8080404:	4413      	add	r3, r2
	loggerBufferVar = os_getOsBufferVar(osVar, logger_buffer_id);
 8080406:	613b      	str	r3, [r7, #16]

	loggerBufferVar->fullCells = (loggerBufferVar->fullCells - huart->TxXferSize);
 8080408:	693b      	ldr	r3, [r7, #16]
 808040a:	68db      	ldr	r3, [r3, #12]
 808040c:	687a      	ldr	r2, [r7, #4]
 808040e:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8080412:	1a9a      	subs	r2, r3, r2
 8080414:	693b      	ldr	r3, [r7, #16]
 8080416:	60da      	str	r2, [r3, #12]
	loggerBufferVar->tail = ( ( loggerBufferVar->tail + huart->TxXferSize ) % loggerBufferVar->cfg->size );
 8080418:	693b      	ldr	r3, [r7, #16]
 808041a:	689b      	ldr	r3, [r3, #8]
 808041c:	687a      	ldr	r2, [r7, #4]
 808041e:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8080422:	4413      	add	r3, r2
 8080424:	693a      	ldr	r2, [r7, #16]
 8080426:	6812      	ldr	r2, [r2, #0]
 8080428:	6892      	ldr	r2, [r2, #8]
 808042a:	fbb3 f1f2 	udiv	r1, r3, r2
 808042e:	fb02 f201 	mul.w	r2, r2, r1
 8080432:	1a9a      	subs	r2, r3, r2
 8080434:	693b      	ldr	r3, [r7, #16]
 8080436:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8080438:	b662      	cpsie	i
}
 808043a:	bf00      	nop
	__enable_irq();
};
 808043c:	bf00      	nop
 808043e:	3718      	adds	r7, #24
 8080440:	46bd      	mov	sp, r7
 8080442:	bd80      	pop	{r7, pc}

Disassembly of section .application_section_funcs_CM4:

08180000 <Idle_CM4>:
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 8180000:	b480      	push	{r7}
 8180002:	af00      	add	r7, sp, #0
 8180004:	bf00      	nop
 8180006:	46bd      	mov	sp, r7
 8180008:	f85d 7b04 	ldr.w	r7, [sp], #4
 818000c:	4770      	bx	lr

0818000e <sysJobs_CM4>:
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 818000e:	b480      	push	{r7}
 8180010:	af00      	add	r7, sp, #0
 8180012:	bf00      	nop
 8180014:	46bd      	mov	sp, r7
 8180016:	f85d 7b04 	ldr.w	r7, [sp], #4
 818001a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 818001c:	b480      	push	{r7}
 818001e:	af00      	add	r7, sp, #0
 8180020:	bf00      	nop
 8180022:	46bd      	mov	sp, r7
 8180024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180028:	4770      	bx	lr

0818002a <IdleThread_CM4>:
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 818002a:	b480      	push	{r7}
 818002c:	af00      	add	r7, sp, #0
 818002e:	bf00      	nop
 8180030:	46bd      	mov	sp, r7
 8180032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180036:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 8180038:	b480      	push	{r7}
 818003a:	af00      	add	r7, sp, #0
 818003c:	bf00      	nop
 818003e:	46bd      	mov	sp, r7
 8180040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180044:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 8180046:	b480      	push	{r7}
 8180048:	af00      	add	r7, sp, #0
 818004a:	bf00      	nop
 818004c:	46bd      	mov	sp, r7
 818004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180052:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 8180054:	b480      	push	{r7}
 8180056:	af00      	add	r7, sp, #0
 8180058:	bf00      	nop
 818005a:	46bd      	mov	sp, r7
 818005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180060:	4770      	bx	lr

08180062 <wrapped_Idle_CM4>:
{
 8180062:	b580      	push	{r7, lr}
 8180064:	af00      	add	r7, sp, #0
    Idle_CM4();
 8180066:	f7ff ffcb 	bl	8180000 <Idle_CM4>
    for(;;);
 818006a:	e7fe      	b.n	818006a <wrapped_Idle_CM4+0x8>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 818006c:	b480      	push	{r7}
 818006e:	af00      	add	r7, sp, #0
 8180070:	bf00      	nop
 8180072:	46bd      	mov	sp, r7
 8180074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180078:	4770      	bx	lr

0818007a <wrapped_sysJobs_CM4>:
{
 818007a:	b580      	push	{r7, lr}
 818007c:	af00      	add	r7, sp, #0
    cosmosApiInternal_sysJobs_dispatcher();
 818007e:	2012      	movs	r0, #18
 8180080:	f783 fa9a 	bl	81035b8 <sysCalls_bitWidthType_ret_void>
    cosmosApiInternal_schedulable_setExecutionStateToFinished();
 8180084:	2011      	movs	r0, #17
 8180086:	f783 fa97 	bl	81035b8 <sysCalls_bitWidthType_ret_void>
    for(;;);
 818008a:	e7fe      	b.n	818008a <wrapped_sysJobs_CM4+0x10>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 818008c:	b480      	push	{r7}
 818008e:	af00      	add	r7, sp, #0
 8180090:	bf00      	nop
 8180092:	46bd      	mov	sp, r7
 8180094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180098:	4770      	bx	lr

0818009a <wrapped_Task_0_Core_1_Handler>:
{
 818009a:	b580      	push	{r7, lr}
 818009c:	af00      	add	r7, sp, #0
    Task_0_Core_1_Handler();
 818009e:	f000 f883 	bl	81801a8 <Task_0_Core_1_Handler>
    cosmosApiInternal_schedulable_setExecutionStateToFinished();
 81800a2:	2011      	movs	r0, #17
 81800a4:	f783 fa88 	bl	81035b8 <sysCalls_bitWidthType_ret_void>
    for(;;);
 81800a8:	e7fe      	b.n	81800a8 <wrapped_Task_0_Core_1_Handler+0xe>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 81800aa:	b480      	push	{r7}
 81800ac:	af00      	add	r7, sp, #0
 81800ae:	bf00      	nop
 81800b0:	46bd      	mov	sp, r7
 81800b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800b6:	4770      	bx	lr

081800b8 <wrapped_IdleThread_CM4>:
{
 81800b8:	b580      	push	{r7, lr}
 81800ba:	af00      	add	r7, sp, #0
        IdleThread_CM4();
 81800bc:	f7ff ffb5 	bl	818002a <IdleThread_CM4>
 81800c0:	e7fc      	b.n	81800bc <wrapped_IdleThread_CM4+0x4>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 81800c2:	b480      	push	{r7}
 81800c4:	af00      	add	r7, sp, #0
 81800c6:	bf00      	nop
 81800c8:	46bd      	mov	sp, r7
 81800ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800ce:	4770      	bx	lr

081800d0 <wrapped_Thread_Core_1>:
{
 81800d0:	b580      	push	{r7, lr}
 81800d2:	af00      	add	r7, sp, #0
        Thread_Core_1();
 81800d4:	f000 f8a6 	bl	8180224 <Thread_Core_1>
 81800d8:	e7fc      	b.n	81800d4 <wrapped_Thread_Core_1+0x4>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 81800da:	b480      	push	{r7}
 81800dc:	af00      	add	r7, sp, #0
 81800de:	bf00      	nop
 81800e0:	46bd      	mov	sp, r7
 81800e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800e6:	4770      	bx	lr

081800e8 <wrapped_Thread_mutex_test_CM4>:
{
 81800e8:	b580      	push	{r7, lr}
 81800ea:	af00      	add	r7, sp, #0
        Thread_mutex_test_CM4();
 81800ec:	f000 f8cc 	bl	8180288 <Thread_mutex_test_CM4>
 81800f0:	e7fc      	b.n	81800ec <wrapped_Thread_mutex_test_CM4+0x4>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 81800f2:	b480      	push	{r7}
 81800f4:	af00      	add	r7, sp, #0
 81800f6:	bf00      	nop
 81800f8:	46bd      	mov	sp, r7
 81800fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800fe:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 8180100:	b480      	push	{r7}
 8180102:	af00      	add	r7, sp, #0
 8180104:	bf00      	nop
 8180106:	46bd      	mov	sp, r7
 8180108:	f85d 7b04 	ldr.w	r7, [sp], #4
 818010c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 818010e:	b480      	push	{r7}
 8180110:	af00      	add	r7, sp, #0
 8180112:	bf00      	nop
 8180114:	46bd      	mov	sp, r7
 8180116:	f85d 7b04 	ldr.w	r7, [sp], #4
 818011a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 818011c:	b480      	push	{r7}
 818011e:	af00      	add	r7, sp, #0
 8180120:	bf00      	nop
 8180122:	46bd      	mov	sp, r7
 8180124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180128:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 818012a:	b480      	push	{r7}
 818012c:	af00      	add	r7, sp, #0
 818012e:	bf00      	nop
 8180130:	46bd      	mov	sp, r7
 8180132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180136:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 8180138:	b480      	push	{r7}
 818013a:	af00      	add	r7, sp, #0
 818013c:	bf00      	nop
 818013e:	46bd      	mov	sp, r7
 8180140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180144:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 8180146:	b480      	push	{r7}
 8180148:	af00      	add	r7, sp, #0
 818014a:	bf00      	nop
 818014c:	46bd      	mov	sp, r7
 818014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180152:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 8180154:	b480      	push	{r7}
 8180156:	af00      	add	r7, sp, #0
 8180158:	bf00      	nop
 818015a:	46bd      	mov	sp, r7
 818015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180160:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 8180162:	b480      	push	{r7}
 8180164:	af00      	add	r7, sp, #0
 8180166:	bf00      	nop
 8180168:	46bd      	mov	sp, r7
 818016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 818016e:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 8180170:	b480      	push	{r7}
 8180172:	af00      	add	r7, sp, #0
 8180174:	bf00      	nop
 8180176:	46bd      	mov	sp, r7
 8180178:	f85d 7b04 	ldr.w	r7, [sp], #4
 818017c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 818017e:	b480      	push	{r7}
 8180180:	af00      	add	r7, sp, #0
 8180182:	bf00      	nop
 8180184:	46bd      	mov	sp, r7
 8180186:	f85d 7b04 	ldr.w	r7, [sp], #4
 818018a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 818018c:	b480      	push	{r7}
 818018e:	af00      	add	r7, sp, #0
 8180190:	bf00      	nop
 8180192:	46bd      	mov	sp, r7
 8180194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180198:	4770      	bx	lr

0818019a <userKernelPanicHook_CM4>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void userKernelPanicHook_CM4(void)
{
 818019a:	b480      	push	{r7}
 818019c:	af00      	add	r7, sp, #0

/********************************************************************************
** stop_name =userKernelPanicHook_CM4.cfunc
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 818019e:	bf00      	nop
 81801a0:	46bd      	mov	sp, r7
 81801a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81801a6:	4770      	bx	lr

081801a8 <Task_0_Core_1_Handler>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Task_0_Core_1_Handler(void)
{
 81801a8:	b580      	push	{r7, lr}
 81801aa:	b084      	sub	sp, #16
 81801ac:	af00      	add	r7, sp, #0
	CosmOS_BufferStateType bufferState;
	CosmOS_MutexStateType mutexState;

	//cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove

	bufferReader_cm4 = 100;
 81801ae:	4b1a      	ldr	r3, [pc, #104]	; (8180218 <Task_0_Core_1_Handler+0x70>)
 81801b0:	2264      	movs	r2, #100	; 0x64
 81801b2:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_write_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 81801b4:	2204      	movs	r2, #4
 81801b6:	4918      	ldr	r1, [pc, #96]	; (8180218 <Task_0_Core_1_Handler+0x70>)
 81801b8:	200b      	movs	r0, #11
 81801ba:	f783 fa24 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 81801be:	4603      	mov	r3, r0
 81801c0:	73fb      	strb	r3, [r7, #15]

	bufferReader_cm4 = 0;
 81801c2:	4b15      	ldr	r3, [pc, #84]	; (8180218 <Task_0_Core_1_Handler+0x70>)
 81801c4:	2200      	movs	r2, #0
 81801c6:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_read_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 81801c8:	2204      	movs	r2, #4
 81801ca:	4913      	ldr	r1, [pc, #76]	; (8180218 <Task_0_Core_1_Handler+0x70>)
 81801cc:	200a      	movs	r0, #10
 81801ce:	f783 fa1a 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 81801d2:	4603      	mov	r3, r0
 81801d4:	73fb      	strb	r3, [r7, #15]

	spinlockState = cosmosApi_try_spinlock_uart_buffer_read();
 81801d6:	2001      	movs	r0, #1
 81801d8:	f783 f9f9 	bl	81035ce <sysCalls_bitWidthType_ret_bitWidthType>
 81801dc:	4603      	mov	r3, r0
 81801de:	60bb      	str	r3, [r7, #8]
	spinlockState = cosmosApi_release_spinlock_uart_buffer_read();
 81801e0:	2002      	movs	r0, #2
 81801e2:	f783 f9f4 	bl	81035ce <sysCalls_bitWidthType_ret_bitWidthType>
 81801e6:	4603      	mov	r3, r0
 81801e8:	60bb      	str	r3, [r7, #8]

	mutexState = mutex_getMutex(&resourcesMutex); //trying if kernel will return err cause task cannot use mutexes
 81801ea:	480c      	ldr	r0, [pc, #48]	; (818021c <Task_0_Core_1_Handler+0x74>)
 81801ec:	f782 f988 	bl	8102500 <mutex_getMutex>
 81801f0:	4603      	mov	r3, r0
 81801f2:	607b      	str	r3, [r7, #4]

	if ( counter_cm4 > 100 )
 81801f4:	4b0a      	ldr	r3, [pc, #40]	; (8180220 <Task_0_Core_1_Handler+0x78>)
 81801f6:	681b      	ldr	r3, [r3, #0]
 81801f8:	2b64      	cmp	r3, #100	; 0x64
 81801fa:	dd03      	ble.n	8180204 <Task_0_Core_1_Handler+0x5c>
	{
		counter_cm4 = 0;
 81801fc:	4b08      	ldr	r3, [pc, #32]	; (8180220 <Task_0_Core_1_Handler+0x78>)
 81801fe:	2200      	movs	r2, #0
 8180200:	601a      	str	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(bufferState);
/********************************************************************************
** stop_name =Task_0_Core_1_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8180202:	e004      	b.n	818020e <Task_0_Core_1_Handler+0x66>
		counter_cm4++;
 8180204:	4b06      	ldr	r3, [pc, #24]	; (8180220 <Task_0_Core_1_Handler+0x78>)
 8180206:	681b      	ldr	r3, [r3, #0]
 8180208:	3301      	adds	r3, #1
 818020a:	4a05      	ldr	r2, [pc, #20]	; (8180220 <Task_0_Core_1_Handler+0x78>)
 818020c:	6013      	str	r3, [r2, #0]
};
 818020e:	bf00      	nop
 8180210:	3710      	adds	r7, #16
 8180212:	46bd      	mov	sp, r7
 8180214:	bd80      	pop	{r7, pc}
 8180216:	bf00      	nop
 8180218:	1000180c 	.word	0x1000180c
 818021c:	10001810 	.word	0x10001810
 8180220:	10001808 	.word	0x10001808

08180224 <Thread_Core_1>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Thread_Core_1(void)
{
 8180224:	b580      	push	{r7, lr}
 8180226:	b084      	sub	sp, #16
 8180228:	af00      	add	r7, sp, #0
** start_name =Thread_Core_1
********************************************************************************/
	CosmOS_SleepStateType sleepState;
	CosmOS_MutexStateType mutexState;

	int *integerPointer = new int(100);
 818022a:	2004      	movs	r0, #4
 818022c:	f78b f9ae 	bl	810b58c <_Znwj>
 8180230:	4603      	mov	r3, r0
 8180232:	2264      	movs	r2, #100	; 0x64
 8180234:	601a      	str	r2, [r3, #0]
 8180236:	60fb      	str	r3, [r7, #12]
	delete integerPointer;
 8180238:	68fb      	ldr	r3, [r7, #12]
 818023a:	2b00      	cmp	r3, #0
 818023c:	d003      	beq.n	8180246 <Thread_Core_1+0x22>
 818023e:	2104      	movs	r1, #4
 8180240:	4618      	mov	r0, r3
 8180242:	f78b f9b7 	bl	810b5b4 <_ZdlPvj>

	//sleepState = thread_sleepMs(1);
	//cosmosApi_deviceIO_togglePin(GPIOB, GPIO_PIN_0); //GREEN LED

	mutexState = mutex_getMutex(&resourcesMutex);
 8180246:	480e      	ldr	r0, [pc, #56]	; (8180280 <Thread_Core_1+0x5c>)
 8180248:	f782 f95a 	bl	8102500 <mutex_getMutex>
 818024c:	4603      	mov	r3, r0
 818024e:	60bb      	str	r3, [r7, #8]
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 8180250:	2210      	movs	r2, #16
 8180252:	490c      	ldr	r1, [pc, #48]	; (8180284 <Thread_Core_1+0x60>)
 8180254:	200e      	movs	r0, #14
 8180256:	f783 f9d6 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	sleepState = thread_sleepMs(10);
 818025a:	200a      	movs	r0, #10
 818025c:	f783 fac4 	bl	81037e8 <thread_sleepMs>
 8180260:	4603      	mov	r3, r0
 8180262:	71fb      	strb	r3, [r7, #7]
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 8180264:	2210      	movs	r2, #16
 8180266:	4907      	ldr	r1, [pc, #28]	; (8180284 <Thread_Core_1+0x60>)
 8180268:	200e      	movs	r0, #14
 818026a:	f783 f9cc 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	mutexState = mutex_releaseMutex(&resourcesMutex);
 818026e:	4804      	ldr	r0, [pc, #16]	; (8180280 <Thread_Core_1+0x5c>)
 8180270:	f782 fa49 	bl	8102706 <mutex_releaseMutex>
 8180274:	4603      	mov	r3, r0
 8180276:	60bb      	str	r3, [r7, #8]
	__SUPRESS_UNUSED_VAR(sleepState);
/********************************************************************************
** stop_name =Thread_Core_1
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8180278:	bf00      	nop
 818027a:	3710      	adds	r7, #16
 818027c:	46bd      	mov	sp, r7
 818027e:	bd80      	pop	{r7, pc}
 8180280:	10001810 	.word	0x10001810
 8180284:	58020000 	.word	0x58020000

08180288 <Thread_mutex_test_CM4>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Thread_mutex_test_CM4(void)
{
 8180288:	b5b0      	push	{r4, r5, r7, lr}
 818028a:	b090      	sub	sp, #64	; 0x40
 818028c:	af00      	add	r7, sp, #0
** start_name =Thread_mutex_test_CM4
********************************************************************************/
	CosmOS_MutexStateType mutexState;
	CosmOS_SleepStateType sleepState;

	mutexState = mutex_getMutex(&resourcesMutex);
 818028e:	481b      	ldr	r0, [pc, #108]	; (81802fc <Thread_mutex_test_CM4+0x74>)
 8180290:	f782 f936 	bl	8102500 <mutex_getMutex>
 8180294:	4603      	mov	r3, r0
 8180296:	63fb      	str	r3, [r7, #60]	; 0x3c
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 8180298:	2210      	movs	r2, #16
 818029a:	4919      	ldr	r1, [pc, #100]	; (8180300 <Thread_mutex_test_CM4+0x78>)
 818029c:	200e      	movs	r0, #14
 818029e:	f783 f9b2 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	sleepState = thread_sleepMs(100);
 81802a2:	2064      	movs	r0, #100	; 0x64
 81802a4:	f783 faa0 	bl	81037e8 <thread_sleepMs>
 81802a8:	4603      	mov	r3, r0
 81802aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 81802ae:	2210      	movs	r2, #16
 81802b0:	4913      	ldr	r1, [pc, #76]	; (8180300 <Thread_mutex_test_CM4+0x78>)
 81802b2:	200e      	movs	r0, #14
 81802b4:	f783 f9a7 	bl	8103606 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	mutexState = mutex_releaseMutex(&resourcesMutex);
 81802b8:	4810      	ldr	r0, [pc, #64]	; (81802fc <Thread_mutex_test_CM4+0x74>)
 81802ba:	f782 fa24 	bl	8102706 <mutex_releaseMutex>
 81802be:	4603      	mov	r3, r0
 81802c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sleepState = thread_sleepMs(500);
 81802c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81802c6:	f783 fa8f 	bl	81037e8 <thread_sleepMs>
 81802ca:	4603      	mov	r3, r0
 81802cc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	uint8_t togglePinMessage[] = "Thread_mutex_test_CM4 released mutex for resources !!!\r\n"; //Data to send
 81802d0:	4b0c      	ldr	r3, [pc, #48]	; (8180304 <Thread_mutex_test_CM4+0x7c>)
 81802d2:	463c      	mov	r4, r7
 81802d4:	461d      	mov	r5, r3
 81802d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81802d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81802da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81802dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81802de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81802e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81802e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 81802e6:	c403      	stmia	r4!, {r0, r1}
 81802e8:	7022      	strb	r2, [r4, #0]

	user_log(togglePinMessage, sizeof(togglePinMessage));
 81802ea:	463b      	mov	r3, r7
 81802ec:	2139      	movs	r1, #57	; 0x39
 81802ee:	4618      	mov	r0, r3
 81802f0:	f700 f806 	bl	8080300 <user_log>
	__SUPRESS_UNUSED_VAR(sleepState);
/********************************************************************************
** stop_name =Thread_mutex_test_CM4
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 81802f4:	bf00      	nop
 81802f6:	3740      	adds	r7, #64	; 0x40
 81802f8:	46bd      	mov	sp, r7
 81802fa:	bdb0      	pop	{r4, r5, r7, pc}
 81802fc:	10001810 	.word	0x10001810
 8180300:	58020000 	.word	0x58020000
 8180304:	0810c0d8 	.word	0x0810c0d8

Disassembly of section .text:

08108000 <__do_global_dtors_aux>:
 8108000:	b510      	push	{r4, lr}
 8108002:	4c05      	ldr	r4, [pc, #20]	; (8108018 <_e_os_section_funcs+0x18>)
 8108004:	7823      	ldrb	r3, [r4, #0]
 8108006:	b933      	cbnz	r3, 8108016 <__do_global_dtors_aux+0x16>
 8108008:	4b04      	ldr	r3, [pc, #16]	; (810801c <_e_os_section_funcs+0x1c>)
 810800a:	b113      	cbz	r3, 8108012 <__do_global_dtors_aux+0x12>
 810800c:	4804      	ldr	r0, [pc, #16]	; (8108020 <_e_os_section_funcs+0x20>)
 810800e:	f3af 8000 	nop.w
 8108012:	2301      	movs	r3, #1
 8108014:	7023      	strb	r3, [r4, #0]
 8108016:	bd10      	pop	{r4, pc}
 8108018:	3004007c 	.word	0x3004007c
 810801c:	00000000 	.word	0x00000000
 8108020:	0810c0c0 	.word	0x0810c0c0

08108024 <frame_dummy>:
 8108024:	b508      	push	{r3, lr}
 8108026:	4b03      	ldr	r3, [pc, #12]	; (8108034 <frame_dummy+0x10>)
 8108028:	b11b      	cbz	r3, 8108032 <frame_dummy+0xe>
 810802a:	4903      	ldr	r1, [pc, #12]	; (8108038 <frame_dummy+0x14>)
 810802c:	4803      	ldr	r0, [pc, #12]	; (810803c <frame_dummy+0x18>)
 810802e:	f3af 8000 	nop.w
 8108032:	bd08      	pop	{r3, pc}
 8108034:	00000000 	.word	0x00000000
 8108038:	30040080 	.word	0x30040080
 810803c:	0810c0c0 	.word	0x0810c0c0

08108040 <strcmp>:
 8108040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8108044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8108048:	2a01      	cmp	r2, #1
 810804a:	bf28      	it	cs
 810804c:	429a      	cmpcs	r2, r3
 810804e:	d0f7      	beq.n	8108040 <strcmp>
 8108050:	1ad0      	subs	r0, r2, r3
 8108052:	4770      	bx	lr

08108054 <selfrel_offset31>:
 8108054:	6803      	ldr	r3, [r0, #0]
 8108056:	005a      	lsls	r2, r3, #1
 8108058:	bf4c      	ite	mi
 810805a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 810805e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8108062:	4418      	add	r0, r3
 8108064:	4770      	bx	lr
 8108066:	bf00      	nop

08108068 <search_EIT_table>:
 8108068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810806c:	b329      	cbz	r1, 81080ba <search_EIT_table+0x52>
 810806e:	1e4f      	subs	r7, r1, #1
 8108070:	4604      	mov	r4, r0
 8108072:	4615      	mov	r5, r2
 8108074:	463e      	mov	r6, r7
 8108076:	f04f 0800 	mov.w	r8, #0
 810807a:	eb08 0106 	add.w	r1, r8, r6
 810807e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8108082:	1049      	asrs	r1, r1, #1
 8108084:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8108088:	4648      	mov	r0, r9
 810808a:	f7ff ffe3 	bl	8108054 <selfrel_offset31>
 810808e:	4603      	mov	r3, r0
 8108090:	00c8      	lsls	r0, r1, #3
 8108092:	3008      	adds	r0, #8
 8108094:	428f      	cmp	r7, r1
 8108096:	4420      	add	r0, r4
 8108098:	d009      	beq.n	81080ae <search_EIT_table+0x46>
 810809a:	42ab      	cmp	r3, r5
 810809c:	d809      	bhi.n	81080b2 <search_EIT_table+0x4a>
 810809e:	f7ff ffd9 	bl	8108054 <selfrel_offset31>
 81080a2:	3801      	subs	r0, #1
 81080a4:	42a8      	cmp	r0, r5
 81080a6:	d20a      	bcs.n	81080be <search_EIT_table+0x56>
 81080a8:	f101 0801 	add.w	r8, r1, #1
 81080ac:	e7e5      	b.n	810807a <search_EIT_table+0x12>
 81080ae:	42ab      	cmp	r3, r5
 81080b0:	d905      	bls.n	81080be <search_EIT_table+0x56>
 81080b2:	4588      	cmp	r8, r1
 81080b4:	d001      	beq.n	81080ba <search_EIT_table+0x52>
 81080b6:	1e4e      	subs	r6, r1, #1
 81080b8:	e7df      	b.n	810807a <search_EIT_table+0x12>
 81080ba:	f04f 0900 	mov.w	r9, #0
 81080be:	4648      	mov	r0, r9
 81080c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

081080c4 <__gnu_unwind_get_pr_addr>:
 81080c4:	2801      	cmp	r0, #1
 81080c6:	d007      	beq.n	81080d8 <__gnu_unwind_get_pr_addr+0x14>
 81080c8:	2802      	cmp	r0, #2
 81080ca:	d007      	beq.n	81080dc <__gnu_unwind_get_pr_addr+0x18>
 81080cc:	4b04      	ldr	r3, [pc, #16]	; (81080e0 <__gnu_unwind_get_pr_addr+0x1c>)
 81080ce:	2800      	cmp	r0, #0
 81080d0:	bf0c      	ite	eq
 81080d2:	4618      	moveq	r0, r3
 81080d4:	2000      	movne	r0, #0
 81080d6:	4770      	bx	lr
 81080d8:	4802      	ldr	r0, [pc, #8]	; (81080e4 <__gnu_unwind_get_pr_addr+0x20>)
 81080da:	4770      	bx	lr
 81080dc:	4802      	ldr	r0, [pc, #8]	; (81080e8 <__gnu_unwind_get_pr_addr+0x24>)
 81080de:	4770      	bx	lr
 81080e0:	08108789 	.word	0x08108789
 81080e4:	0810878d 	.word	0x0810878d
 81080e8:	08108791 	.word	0x08108791

081080ec <get_eit_entry>:
 81080ec:	b530      	push	{r4, r5, lr}
 81080ee:	4b23      	ldr	r3, [pc, #140]	; (810817c <get_eit_entry+0x90>)
 81080f0:	b083      	sub	sp, #12
 81080f2:	4604      	mov	r4, r0
 81080f4:	1e8d      	subs	r5, r1, #2
 81080f6:	b33b      	cbz	r3, 8108148 <get_eit_entry+0x5c>
 81080f8:	a901      	add	r1, sp, #4
 81080fa:	4628      	mov	r0, r5
 81080fc:	f3af 8000 	nop.w
 8108100:	b1e8      	cbz	r0, 810813e <get_eit_entry+0x52>
 8108102:	9901      	ldr	r1, [sp, #4]
 8108104:	462a      	mov	r2, r5
 8108106:	f7ff ffaf 	bl	8108068 <search_EIT_table>
 810810a:	4601      	mov	r1, r0
 810810c:	b1b8      	cbz	r0, 810813e <get_eit_entry+0x52>
 810810e:	f7ff ffa1 	bl	8108054 <selfrel_offset31>
 8108112:	684b      	ldr	r3, [r1, #4]
 8108114:	64a0      	str	r0, [r4, #72]	; 0x48
 8108116:	2b01      	cmp	r3, #1
 8108118:	d02b      	beq.n	8108172 <get_eit_entry+0x86>
 810811a:	2b00      	cmp	r3, #0
 810811c:	f101 0004 	add.w	r0, r1, #4
 8108120:	db23      	blt.n	810816a <get_eit_entry+0x7e>
 8108122:	f7ff ff97 	bl	8108054 <selfrel_offset31>
 8108126:	2300      	movs	r3, #0
 8108128:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 810812c:	6803      	ldr	r3, [r0, #0]
 810812e:	2b00      	cmp	r3, #0
 8108130:	db10      	blt.n	8108154 <get_eit_entry+0x68>
 8108132:	f7ff ff8f 	bl	8108054 <selfrel_offset31>
 8108136:	6120      	str	r0, [r4, #16]
 8108138:	2000      	movs	r0, #0
 810813a:	b003      	add	sp, #12
 810813c:	bd30      	pop	{r4, r5, pc}
 810813e:	2300      	movs	r3, #0
 8108140:	2009      	movs	r0, #9
 8108142:	6123      	str	r3, [r4, #16]
 8108144:	b003      	add	sp, #12
 8108146:	bd30      	pop	{r4, r5, pc}
 8108148:	490d      	ldr	r1, [pc, #52]	; (8108180 <get_eit_entry+0x94>)
 810814a:	480e      	ldr	r0, [pc, #56]	; (8108184 <get_eit_entry+0x98>)
 810814c:	1a09      	subs	r1, r1, r0
 810814e:	10c9      	asrs	r1, r1, #3
 8108150:	9101      	str	r1, [sp, #4]
 8108152:	e7d7      	b.n	8108104 <get_eit_entry+0x18>
 8108154:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8108158:	f7ff ffb4 	bl	81080c4 <__gnu_unwind_get_pr_addr>
 810815c:	2800      	cmp	r0, #0
 810815e:	6120      	str	r0, [r4, #16]
 8108160:	bf14      	ite	ne
 8108162:	2000      	movne	r0, #0
 8108164:	2009      	moveq	r0, #9
 8108166:	b003      	add	sp, #12
 8108168:	bd30      	pop	{r4, r5, pc}
 810816a:	2301      	movs	r3, #1
 810816c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8108170:	e7dc      	b.n	810812c <get_eit_entry+0x40>
 8108172:	2300      	movs	r3, #0
 8108174:	6123      	str	r3, [r4, #16]
 8108176:	2005      	movs	r0, #5
 8108178:	e7df      	b.n	810813a <get_eit_entry+0x4e>
 810817a:	bf00      	nop
 810817c:	00000000 	.word	0x00000000
 8108180:	0810c4e4 	.word	0x0810c4e4
 8108184:	0810c3c4 	.word	0x0810c3c4

08108188 <restore_non_core_regs>:
 8108188:	6803      	ldr	r3, [r0, #0]
 810818a:	07da      	lsls	r2, r3, #31
 810818c:	b510      	push	{r4, lr}
 810818e:	4604      	mov	r4, r0
 8108190:	d406      	bmi.n	81081a0 <restore_non_core_regs+0x18>
 8108192:	079b      	lsls	r3, r3, #30
 8108194:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8108198:	d509      	bpl.n	81081ae <restore_non_core_regs+0x26>
 810819a:	f000 fc4b 	bl	8108a34 <__gnu_Unwind_Restore_VFP_D>
 810819e:	6823      	ldr	r3, [r4, #0]
 81081a0:	0759      	lsls	r1, r3, #29
 81081a2:	d509      	bpl.n	81081b8 <restore_non_core_regs+0x30>
 81081a4:	071a      	lsls	r2, r3, #28
 81081a6:	d50e      	bpl.n	81081c6 <restore_non_core_regs+0x3e>
 81081a8:	06db      	lsls	r3, r3, #27
 81081aa:	d513      	bpl.n	81081d4 <restore_non_core_regs+0x4c>
 81081ac:	bd10      	pop	{r4, pc}
 81081ae:	f000 fc39 	bl	8108a24 <__gnu_Unwind_Restore_VFP>
 81081b2:	6823      	ldr	r3, [r4, #0]
 81081b4:	0759      	lsls	r1, r3, #29
 81081b6:	d4f5      	bmi.n	81081a4 <restore_non_core_regs+0x1c>
 81081b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 81081bc:	f000 fc42 	bl	8108a44 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 81081c0:	6823      	ldr	r3, [r4, #0]
 81081c2:	071a      	lsls	r2, r3, #28
 81081c4:	d4f0      	bmi.n	81081a8 <restore_non_core_regs+0x20>
 81081c6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 81081ca:	f000 fc43 	bl	8108a54 <__gnu_Unwind_Restore_WMMXD>
 81081ce:	6823      	ldr	r3, [r4, #0]
 81081d0:	06db      	lsls	r3, r3, #27
 81081d2:	d4eb      	bmi.n	81081ac <restore_non_core_regs+0x24>
 81081d4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 81081d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81081dc:	f000 bc7e 	b.w	8108adc <__gnu_Unwind_Restore_WMMXC>

081081e0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 81081e0:	4603      	mov	r3, r0
 81081e2:	6800      	ldr	r0, [r0, #0]
 81081e4:	b100      	cbz	r0, 81081e8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 81081e6:	4418      	add	r0, r3
 81081e8:	4770      	bx	lr
 81081ea:	bf00      	nop

081081ec <__gnu_unwind_24bit.isra.0>:
 81081ec:	2009      	movs	r0, #9
 81081ee:	4770      	bx	lr

081081f0 <_Unwind_DebugHook>:
 81081f0:	4770      	bx	lr
 81081f2:	bf00      	nop

081081f4 <unwind_phase2>:
 81081f4:	b570      	push	{r4, r5, r6, lr}
 81081f6:	4604      	mov	r4, r0
 81081f8:	460e      	mov	r6, r1
 81081fa:	6c31      	ldr	r1, [r6, #64]	; 0x40
 81081fc:	4620      	mov	r0, r4
 81081fe:	f7ff ff75 	bl	81080ec <get_eit_entry>
 8108202:	4605      	mov	r5, r0
 8108204:	b988      	cbnz	r0, 810822a <unwind_phase2+0x36>
 8108206:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8108208:	6163      	str	r3, [r4, #20]
 810820a:	4632      	mov	r2, r6
 810820c:	6923      	ldr	r3, [r4, #16]
 810820e:	4621      	mov	r1, r4
 8108210:	2001      	movs	r0, #1
 8108212:	4798      	blx	r3
 8108214:	2808      	cmp	r0, #8
 8108216:	d0f0      	beq.n	81081fa <unwind_phase2+0x6>
 8108218:	2807      	cmp	r0, #7
 810821a:	d106      	bne.n	810822a <unwind_phase2+0x36>
 810821c:	4628      	mov	r0, r5
 810821e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8108220:	f7ff ffe6 	bl	81081f0 <_Unwind_DebugHook>
 8108224:	1d30      	adds	r0, r6, #4
 8108226:	f000 fbf1 	bl	8108a0c <__restore_core_regs>
 810822a:	f003 feb3 	bl	810bf94 <abort>
 810822e:	bf00      	nop

08108230 <unwind_phase2_forced>:
 8108230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108234:	1d0d      	adds	r5, r1, #4
 8108236:	4606      	mov	r6, r0
 8108238:	4614      	mov	r4, r2
 810823a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810823c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8108240:	f10d 0c0c 	add.w	ip, sp, #12
 8108244:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8108248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810824a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 810824e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8108254:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8108258:	ad02      	add	r5, sp, #8
 810825a:	68f7      	ldr	r7, [r6, #12]
 810825c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8108260:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8108264:	2300      	movs	r3, #0
 8108266:	602b      	str	r3, [r5, #0]
 8108268:	e021      	b.n	81082ae <unwind_phase2_forced+0x7e>
 810826a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 810826c:	6173      	str	r3, [r6, #20]
 810826e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8108272:	4629      	mov	r1, r5
 8108274:	a87a      	add	r0, sp, #488	; 0x1e8
 8108276:	f003 ff03 	bl	810c080 <memcpy>
 810827a:	6933      	ldr	r3, [r6, #16]
 810827c:	aa7a      	add	r2, sp, #488	; 0x1e8
 810827e:	4631      	mov	r1, r6
 8108280:	4650      	mov	r0, sl
 8108282:	4798      	blx	r3
 8108284:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8108286:	e9cd 5800 	strd	r5, r8, [sp]
 810828a:	4621      	mov	r1, r4
 810828c:	646b      	str	r3, [r5, #68]	; 0x44
 810828e:	4681      	mov	r9, r0
 8108290:	4633      	mov	r3, r6
 8108292:	4632      	mov	r2, r6
 8108294:	2001      	movs	r0, #1
 8108296:	47b8      	blx	r7
 8108298:	4604      	mov	r4, r0
 810829a:	b9e8      	cbnz	r0, 81082d8 <unwind_phase2_forced+0xa8>
 810829c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 81082a0:	a97a      	add	r1, sp, #488	; 0x1e8
 81082a2:	4628      	mov	r0, r5
 81082a4:	f003 feec 	bl	810c080 <memcpy>
 81082a8:	f1b9 0f08 	cmp.w	r9, #8
 81082ac:	d11b      	bne.n	81082e6 <unwind_phase2_forced+0xb6>
 81082ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 81082b0:	4630      	mov	r0, r6
 81082b2:	f7ff ff1b 	bl	81080ec <get_eit_entry>
 81082b6:	3409      	adds	r4, #9
 81082b8:	fa5f fa84 	uxtb.w	sl, r4
 81082bc:	4681      	mov	r9, r0
 81082be:	2800      	cmp	r0, #0
 81082c0:	d0d3      	beq.n	810826a <unwind_phase2_forced+0x3a>
 81082c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 81082c4:	f04a 0110 	orr.w	r1, sl, #16
 81082c8:	e9cd 5800 	strd	r5, r8, [sp]
 81082cc:	4632      	mov	r2, r6
 81082ce:	646b      	str	r3, [r5, #68]	; 0x44
 81082d0:	2001      	movs	r0, #1
 81082d2:	4633      	mov	r3, r6
 81082d4:	47b8      	blx	r7
 81082d6:	b108      	cbz	r0, 81082dc <unwind_phase2_forced+0xac>
 81082d8:	f04f 0909 	mov.w	r9, #9
 81082dc:	4648      	mov	r0, r9
 81082de:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 81082e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81082e6:	f1b9 0f07 	cmp.w	r9, #7
 81082ea:	d1f5      	bne.n	81082d8 <unwind_phase2_forced+0xa8>
 81082ec:	4620      	mov	r0, r4
 81082ee:	6c29      	ldr	r1, [r5, #64]	; 0x40
 81082f0:	f7ff ff7e 	bl	81081f0 <_Unwind_DebugHook>
 81082f4:	a803      	add	r0, sp, #12
 81082f6:	f000 fb89 	bl	8108a0c <__restore_core_regs>
 81082fa:	bf00      	nop

081082fc <_Unwind_GetCFA>:
 81082fc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 81082fe:	4770      	bx	lr

08108300 <__gnu_Unwind_RaiseException>:
 8108300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108302:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8108304:	640b      	str	r3, [r1, #64]	; 0x40
 8108306:	1d0e      	adds	r6, r1, #4
 8108308:	460f      	mov	r7, r1
 810830a:	4605      	mov	r5, r0
 810830c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 810830e:	b0f9      	sub	sp, #484	; 0x1e4
 8108310:	ac01      	add	r4, sp, #4
 8108312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108314:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8108316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108318:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 810831a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810831c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8108320:	f04f 36ff 	mov.w	r6, #4294967295
 8108324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8108328:	9600      	str	r6, [sp, #0]
 810832a:	e006      	b.n	810833a <__gnu_Unwind_RaiseException+0x3a>
 810832c:	692b      	ldr	r3, [r5, #16]
 810832e:	466a      	mov	r2, sp
 8108330:	4629      	mov	r1, r5
 8108332:	4798      	blx	r3
 8108334:	2808      	cmp	r0, #8
 8108336:	4604      	mov	r4, r0
 8108338:	d108      	bne.n	810834c <__gnu_Unwind_RaiseException+0x4c>
 810833a:	9910      	ldr	r1, [sp, #64]	; 0x40
 810833c:	4628      	mov	r0, r5
 810833e:	f7ff fed5 	bl	81080ec <get_eit_entry>
 8108342:	2800      	cmp	r0, #0
 8108344:	d0f2      	beq.n	810832c <__gnu_Unwind_RaiseException+0x2c>
 8108346:	2009      	movs	r0, #9
 8108348:	b079      	add	sp, #484	; 0x1e4
 810834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810834c:	4668      	mov	r0, sp
 810834e:	f7ff ff1b 	bl	8108188 <restore_non_core_regs>
 8108352:	2c06      	cmp	r4, #6
 8108354:	d1f7      	bne.n	8108346 <__gnu_Unwind_RaiseException+0x46>
 8108356:	4639      	mov	r1, r7
 8108358:	4628      	mov	r0, r5
 810835a:	f7ff ff4b 	bl	81081f4 <unwind_phase2>
 810835e:	bf00      	nop

08108360 <__gnu_Unwind_ForcedUnwind>:
 8108360:	b430      	push	{r4, r5}
 8108362:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8108364:	60c1      	str	r1, [r0, #12]
 8108366:	6182      	str	r2, [r0, #24]
 8108368:	4619      	mov	r1, r3
 810836a:	641d      	str	r5, [r3, #64]	; 0x40
 810836c:	2200      	movs	r2, #0
 810836e:	bc30      	pop	{r4, r5}
 8108370:	e75e      	b.n	8108230 <unwind_phase2_forced>
 8108372:	bf00      	nop

08108374 <__gnu_Unwind_Resume>:
 8108374:	b570      	push	{r4, r5, r6, lr}
 8108376:	68c6      	ldr	r6, [r0, #12]
 8108378:	6943      	ldr	r3, [r0, #20]
 810837a:	640b      	str	r3, [r1, #64]	; 0x40
 810837c:	b9ae      	cbnz	r6, 81083aa <__gnu_Unwind_Resume+0x36>
 810837e:	6903      	ldr	r3, [r0, #16]
 8108380:	460a      	mov	r2, r1
 8108382:	4604      	mov	r4, r0
 8108384:	460d      	mov	r5, r1
 8108386:	4601      	mov	r1, r0
 8108388:	2002      	movs	r0, #2
 810838a:	4798      	blx	r3
 810838c:	2807      	cmp	r0, #7
 810838e:	d005      	beq.n	810839c <__gnu_Unwind_Resume+0x28>
 8108390:	2808      	cmp	r0, #8
 8108392:	d10f      	bne.n	81083b4 <__gnu_Unwind_Resume+0x40>
 8108394:	4629      	mov	r1, r5
 8108396:	4620      	mov	r0, r4
 8108398:	f7ff ff2c 	bl	81081f4 <unwind_phase2>
 810839c:	4630      	mov	r0, r6
 810839e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 81083a0:	f7ff ff26 	bl	81081f0 <_Unwind_DebugHook>
 81083a4:	1d28      	adds	r0, r5, #4
 81083a6:	f000 fb31 	bl	8108a0c <__restore_core_regs>
 81083aa:	2201      	movs	r2, #1
 81083ac:	f7ff ff40 	bl	8108230 <unwind_phase2_forced>
 81083b0:	f003 fdf0 	bl	810bf94 <abort>
 81083b4:	f003 fdee 	bl	810bf94 <abort>

081083b8 <__gnu_Unwind_Resume_or_Rethrow>:
 81083b8:	68c2      	ldr	r2, [r0, #12]
 81083ba:	b11a      	cbz	r2, 81083c4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 81083bc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 81083be:	640a      	str	r2, [r1, #64]	; 0x40
 81083c0:	2200      	movs	r2, #0
 81083c2:	e735      	b.n	8108230 <unwind_phase2_forced>
 81083c4:	e79c      	b.n	8108300 <__gnu_Unwind_RaiseException>
 81083c6:	bf00      	nop

081083c8 <_Unwind_Complete>:
 81083c8:	4770      	bx	lr
 81083ca:	bf00      	nop

081083cc <_Unwind_DeleteException>:
 81083cc:	6883      	ldr	r3, [r0, #8]
 81083ce:	4601      	mov	r1, r0
 81083d0:	b10b      	cbz	r3, 81083d6 <_Unwind_DeleteException+0xa>
 81083d2:	2001      	movs	r0, #1
 81083d4:	4718      	bx	r3
 81083d6:	4770      	bx	lr

081083d8 <_Unwind_VRS_Get>:
 81083d8:	2901      	cmp	r1, #1
 81083da:	d012      	beq.n	8108402 <_Unwind_VRS_Get+0x2a>
 81083dc:	d809      	bhi.n	81083f2 <_Unwind_VRS_Get+0x1a>
 81083de:	b973      	cbnz	r3, 81083fe <_Unwind_VRS_Get+0x26>
 81083e0:	2a0f      	cmp	r2, #15
 81083e2:	d80c      	bhi.n	81083fe <_Unwind_VRS_Get+0x26>
 81083e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 81083e8:	4618      	mov	r0, r3
 81083ea:	6853      	ldr	r3, [r2, #4]
 81083ec:	9a00      	ldr	r2, [sp, #0]
 81083ee:	6013      	str	r3, [r2, #0]
 81083f0:	4770      	bx	lr
 81083f2:	3903      	subs	r1, #3
 81083f4:	2901      	cmp	r1, #1
 81083f6:	bf94      	ite	ls
 81083f8:	2001      	movls	r0, #1
 81083fa:	2002      	movhi	r0, #2
 81083fc:	4770      	bx	lr
 81083fe:	2002      	movs	r0, #2
 8108400:	4770      	bx	lr
 8108402:	4608      	mov	r0, r1
 8108404:	4770      	bx	lr
 8108406:	bf00      	nop

08108408 <_Unwind_GetGR>:
 8108408:	b510      	push	{r4, lr}
 810840a:	b084      	sub	sp, #16
 810840c:	2300      	movs	r3, #0
 810840e:	ac03      	add	r4, sp, #12
 8108410:	460a      	mov	r2, r1
 8108412:	9400      	str	r4, [sp, #0]
 8108414:	4619      	mov	r1, r3
 8108416:	f7ff ffdf 	bl	81083d8 <_Unwind_VRS_Get>
 810841a:	9803      	ldr	r0, [sp, #12]
 810841c:	b004      	add	sp, #16
 810841e:	bd10      	pop	{r4, pc}

08108420 <_Unwind_VRS_Set>:
 8108420:	2901      	cmp	r1, #1
 8108422:	d012      	beq.n	810844a <_Unwind_VRS_Set+0x2a>
 8108424:	d809      	bhi.n	810843a <_Unwind_VRS_Set+0x1a>
 8108426:	b973      	cbnz	r3, 8108446 <_Unwind_VRS_Set+0x26>
 8108428:	2a0f      	cmp	r2, #15
 810842a:	d80c      	bhi.n	8108446 <_Unwind_VRS_Set+0x26>
 810842c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8108430:	9a00      	ldr	r2, [sp, #0]
 8108432:	6812      	ldr	r2, [r2, #0]
 8108434:	6042      	str	r2, [r0, #4]
 8108436:	4618      	mov	r0, r3
 8108438:	4770      	bx	lr
 810843a:	3903      	subs	r1, #3
 810843c:	2901      	cmp	r1, #1
 810843e:	bf94      	ite	ls
 8108440:	2001      	movls	r0, #1
 8108442:	2002      	movhi	r0, #2
 8108444:	4770      	bx	lr
 8108446:	2002      	movs	r0, #2
 8108448:	4770      	bx	lr
 810844a:	4608      	mov	r0, r1
 810844c:	4770      	bx	lr
 810844e:	bf00      	nop

08108450 <_Unwind_SetGR>:
 8108450:	b510      	push	{r4, lr}
 8108452:	b084      	sub	sp, #16
 8108454:	2300      	movs	r3, #0
 8108456:	ac03      	add	r4, sp, #12
 8108458:	9203      	str	r2, [sp, #12]
 810845a:	9400      	str	r4, [sp, #0]
 810845c:	460a      	mov	r2, r1
 810845e:	4619      	mov	r1, r3
 8108460:	f7ff ffde 	bl	8108420 <_Unwind_VRS_Set>
 8108464:	b004      	add	sp, #16
 8108466:	bd10      	pop	{r4, pc}

08108468 <__gnu_Unwind_Backtrace>:
 8108468:	b5f0      	push	{r4, r5, r6, r7, lr}
 810846a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 810846c:	6413      	str	r3, [r2, #64]	; 0x40
 810846e:	1d15      	adds	r5, r2, #4
 8108470:	468c      	mov	ip, r1
 8108472:	4606      	mov	r6, r0
 8108474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108476:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 810847a:	ac17      	add	r4, sp, #92	; 0x5c
 810847c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810847e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108486:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810848a:	f04f 37ff 	mov.w	r7, #4294967295
 810848e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8108492:	4665      	mov	r5, ip
 8108494:	9716      	str	r7, [sp, #88]	; 0x58
 8108496:	e010      	b.n	81084ba <__gnu_Unwind_Backtrace+0x52>
 8108498:	f7ff ffda 	bl	8108450 <_Unwind_SetGR>
 810849c:	4629      	mov	r1, r5
 810849e:	a816      	add	r0, sp, #88	; 0x58
 81084a0:	47b0      	blx	r6
 81084a2:	4603      	mov	r3, r0
 81084a4:	aa16      	add	r2, sp, #88	; 0x58
 81084a6:	4669      	mov	r1, sp
 81084a8:	2008      	movs	r0, #8
 81084aa:	b983      	cbnz	r3, 81084ce <__gnu_Unwind_Backtrace+0x66>
 81084ac:	9b04      	ldr	r3, [sp, #16]
 81084ae:	4798      	blx	r3
 81084b0:	2805      	cmp	r0, #5
 81084b2:	4604      	mov	r4, r0
 81084b4:	d00c      	beq.n	81084d0 <__gnu_Unwind_Backtrace+0x68>
 81084b6:	2809      	cmp	r0, #9
 81084b8:	d009      	beq.n	81084ce <__gnu_Unwind_Backtrace+0x66>
 81084ba:	9926      	ldr	r1, [sp, #152]	; 0x98
 81084bc:	4668      	mov	r0, sp
 81084be:	f7ff fe15 	bl	81080ec <get_eit_entry>
 81084c2:	4603      	mov	r3, r0
 81084c4:	466a      	mov	r2, sp
 81084c6:	210c      	movs	r1, #12
 81084c8:	a816      	add	r0, sp, #88	; 0x58
 81084ca:	2b00      	cmp	r3, #0
 81084cc:	d0e4      	beq.n	8108498 <__gnu_Unwind_Backtrace+0x30>
 81084ce:	2409      	movs	r4, #9
 81084d0:	a816      	add	r0, sp, #88	; 0x58
 81084d2:	f7ff fe59 	bl	8108188 <restore_non_core_regs>
 81084d6:	4620      	mov	r0, r4
 81084d8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 81084dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81084de:	bf00      	nop

081084e0 <__gnu_unwind_pr_common>:
 81084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81084e4:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 81084e6:	b089      	sub	sp, #36	; 0x24
 81084e8:	460d      	mov	r5, r1
 81084ea:	f854 1b04 	ldr.w	r1, [r4], #4
 81084ee:	9406      	str	r4, [sp, #24]
 81084f0:	4617      	mov	r7, r2
 81084f2:	f000 0803 	and.w	r8, r0, #3
 81084f6:	461e      	mov	r6, r3
 81084f8:	2b00      	cmp	r3, #0
 81084fa:	d079      	beq.n	81085f0 <__gnu_unwind_pr_common+0x110>
 81084fc:	0c0b      	lsrs	r3, r1, #16
 81084fe:	b2da      	uxtb	r2, r3
 8108500:	0409      	lsls	r1, r1, #16
 8108502:	f88d 301d 	strb.w	r3, [sp, #29]
 8108506:	2302      	movs	r3, #2
 8108508:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 810850c:	9105      	str	r1, [sp, #20]
 810850e:	f88d 301c 	strb.w	r3, [sp, #28]
 8108512:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8108514:	f1b8 0f02 	cmp.w	r8, #2
 8108518:	bf08      	it	eq
 810851a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 810851c:	f013 0301 	ands.w	r3, r3, #1
 8108520:	d00c      	beq.n	810853c <__gnu_unwind_pr_common+0x5c>
 8108522:	4638      	mov	r0, r7
 8108524:	a905      	add	r1, sp, #20
 8108526:	f000 fb73 	bl	8108c10 <__gnu_unwind_execute>
 810852a:	b918      	cbnz	r0, 8108534 <__gnu_unwind_pr_common+0x54>
 810852c:	2008      	movs	r0, #8
 810852e:	b009      	add	sp, #36	; 0x24
 8108530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108534:	2009      	movs	r0, #9
 8108536:	b009      	add	sp, #36	; 0x24
 8108538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810853c:	f8d4 a000 	ldr.w	sl, [r4]
 8108540:	f1ba 0f00 	cmp.w	sl, #0
 8108544:	d0ed      	beq.n	8108522 <__gnu_unwind_pr_common+0x42>
 8108546:	9301      	str	r3, [sp, #4]
 8108548:	f000 0308 	and.w	r3, r0, #8
 810854c:	9302      	str	r3, [sp, #8]
 810854e:	2e02      	cmp	r6, #2
 8108550:	d04a      	beq.n	81085e8 <__gnu_unwind_pr_common+0x108>
 8108552:	f8b4 a000 	ldrh.w	sl, [r4]
 8108556:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 810855a:	3404      	adds	r4, #4
 810855c:	6caa      	ldr	r2, [r5, #72]	; 0x48
 810855e:	f029 0b01 	bic.w	fp, r9, #1
 8108562:	210f      	movs	r1, #15
 8108564:	4638      	mov	r0, r7
 8108566:	4493      	add	fp, r2
 8108568:	f7ff ff4e 	bl	8108408 <_Unwind_GetGR>
 810856c:	4583      	cmp	fp, r0
 810856e:	d839      	bhi.n	81085e4 <__gnu_unwind_pr_common+0x104>
 8108570:	f02a 0201 	bic.w	r2, sl, #1
 8108574:	445a      	add	r2, fp
 8108576:	4282      	cmp	r2, r0
 8108578:	bf94      	ite	ls
 810857a:	2000      	movls	r0, #0
 810857c:	2001      	movhi	r0, #1
 810857e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8108582:	f003 0302 	and.w	r3, r3, #2
 8108586:	f00a 0a01 	and.w	sl, sl, #1
 810858a:	ea43 030a 	orr.w	r3, r3, sl
 810858e:	2b01      	cmp	r3, #1
 8108590:	d049      	beq.n	8108626 <__gnu_unwind_pr_common+0x146>
 8108592:	2b02      	cmp	r3, #2
 8108594:	d032      	beq.n	81085fc <__gnu_unwind_pr_common+0x11c>
 8108596:	2b00      	cmp	r3, #0
 8108598:	d1cc      	bne.n	8108534 <__gnu_unwind_pr_common+0x54>
 810859a:	f1b8 0f00 	cmp.w	r8, #0
 810859e:	d002      	beq.n	81085a6 <__gnu_unwind_pr_common+0xc6>
 81085a0:	2800      	cmp	r0, #0
 81085a2:	f040 80cd 	bne.w	8108740 <__gnu_unwind_pr_common+0x260>
 81085a6:	3404      	adds	r4, #4
 81085a8:	f8d4 a000 	ldr.w	sl, [r4]
 81085ac:	f1ba 0f00 	cmp.w	sl, #0
 81085b0:	d1cd      	bne.n	810854e <__gnu_unwind_pr_common+0x6e>
 81085b2:	a905      	add	r1, sp, #20
 81085b4:	4638      	mov	r0, r7
 81085b6:	f000 fb2b 	bl	8108c10 <__gnu_unwind_execute>
 81085ba:	2800      	cmp	r0, #0
 81085bc:	d1ba      	bne.n	8108534 <__gnu_unwind_pr_common+0x54>
 81085be:	9b01      	ldr	r3, [sp, #4]
 81085c0:	2b00      	cmp	r3, #0
 81085c2:	d0b3      	beq.n	810852c <__gnu_unwind_pr_common+0x4c>
 81085c4:	210f      	movs	r1, #15
 81085c6:	4638      	mov	r0, r7
 81085c8:	f7ff ff1e 	bl	8108408 <_Unwind_GetGR>
 81085cc:	210e      	movs	r1, #14
 81085ce:	4602      	mov	r2, r0
 81085d0:	4638      	mov	r0, r7
 81085d2:	f7ff ff3d 	bl	8108450 <_Unwind_SetGR>
 81085d6:	4638      	mov	r0, r7
 81085d8:	4a6a      	ldr	r2, [pc, #424]	; (8108784 <__gnu_unwind_pr_common+0x2a4>)
 81085da:	210f      	movs	r1, #15
 81085dc:	f7ff ff38 	bl	8108450 <_Unwind_SetGR>
 81085e0:	2007      	movs	r0, #7
 81085e2:	e7a8      	b.n	8108536 <__gnu_unwind_pr_common+0x56>
 81085e4:	2000      	movs	r0, #0
 81085e6:	e7ca      	b.n	810857e <__gnu_unwind_pr_common+0x9e>
 81085e8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 81085ec:	3408      	adds	r4, #8
 81085ee:	e7b5      	b.n	810855c <__gnu_unwind_pr_common+0x7c>
 81085f0:	0209      	lsls	r1, r1, #8
 81085f2:	2303      	movs	r3, #3
 81085f4:	9105      	str	r1, [sp, #20]
 81085f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 81085fa:	e78a      	b.n	8108512 <__gnu_unwind_pr_common+0x32>
 81085fc:	6823      	ldr	r3, [r4, #0]
 81085fe:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8108602:	f1b8 0f00 	cmp.w	r8, #0
 8108606:	d145      	bne.n	8108694 <__gnu_unwind_pr_common+0x1b4>
 8108608:	b128      	cbz	r0, 8108616 <__gnu_unwind_pr_common+0x136>
 810860a:	9a02      	ldr	r2, [sp, #8]
 810860c:	2a00      	cmp	r2, #0
 810860e:	d05c      	beq.n	81086ca <__gnu_unwind_pr_common+0x1ea>
 8108610:	f1bb 0f00 	cmp.w	fp, #0
 8108614:	d074      	beq.n	8108700 <__gnu_unwind_pr_common+0x220>
 8108616:	2b00      	cmp	r3, #0
 8108618:	da00      	bge.n	810861c <__gnu_unwind_pr_common+0x13c>
 810861a:	3404      	adds	r4, #4
 810861c:	f10b 0b01 	add.w	fp, fp, #1
 8108620:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8108624:	e7c0      	b.n	81085a8 <__gnu_unwind_pr_common+0xc8>
 8108626:	f1b8 0f00 	cmp.w	r8, #0
 810862a:	d119      	bne.n	8108660 <__gnu_unwind_pr_common+0x180>
 810862c:	b1b0      	cbz	r0, 810865c <__gnu_unwind_pr_common+0x17c>
 810862e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8108632:	1c99      	adds	r1, r3, #2
 8108634:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8108638:	f43f af7c 	beq.w	8108534 <__gnu_unwind_pr_common+0x54>
 810863c:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8108640:	3301      	adds	r3, #1
 8108642:	9104      	str	r1, [sp, #16]
 8108644:	f000 8090 	beq.w	8108768 <__gnu_unwind_pr_common+0x288>
 8108648:	1d20      	adds	r0, r4, #4
 810864a:	f7ff fdc9 	bl	81081e0 <_Unwind_decode_typeinfo_ptr.isra.0>
 810864e:	ab04      	add	r3, sp, #16
 8108650:	4601      	mov	r1, r0
 8108652:	4628      	mov	r0, r5
 8108654:	f003 fa8c 	bl	810bb70 <__cxa_type_match>
 8108658:	2800      	cmp	r0, #0
 810865a:	d15b      	bne.n	8108714 <__gnu_unwind_pr_common+0x234>
 810865c:	3408      	adds	r4, #8
 810865e:	e7a3      	b.n	81085a8 <__gnu_unwind_pr_common+0xc8>
 8108660:	210d      	movs	r1, #13
 8108662:	4638      	mov	r0, r7
 8108664:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8108668:	f7ff fece 	bl	8108408 <_Unwind_GetGR>
 810866c:	4581      	cmp	r9, r0
 810866e:	d1f5      	bne.n	810865c <__gnu_unwind_pr_common+0x17c>
 8108670:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8108672:	429c      	cmp	r4, r3
 8108674:	d1f2      	bne.n	810865c <__gnu_unwind_pr_common+0x17c>
 8108676:	4620      	mov	r0, r4
 8108678:	f7ff fcec 	bl	8108054 <selfrel_offset31>
 810867c:	210f      	movs	r1, #15
 810867e:	4602      	mov	r2, r0
 8108680:	4638      	mov	r0, r7
 8108682:	f7ff fee5 	bl	8108450 <_Unwind_SetGR>
 8108686:	4638      	mov	r0, r7
 8108688:	462a      	mov	r2, r5
 810868a:	2100      	movs	r1, #0
 810868c:	f7ff fee0 	bl	8108450 <_Unwind_SetGR>
 8108690:	2007      	movs	r0, #7
 8108692:	e750      	b.n	8108536 <__gnu_unwind_pr_common+0x56>
 8108694:	210d      	movs	r1, #13
 8108696:	4638      	mov	r0, r7
 8108698:	f8d5 9020 	ldr.w	r9, [r5, #32]
 810869c:	f7ff feb4 	bl	8108408 <_Unwind_GetGR>
 81086a0:	4581      	cmp	r9, r0
 81086a2:	d001      	beq.n	81086a8 <__gnu_unwind_pr_common+0x1c8>
 81086a4:	6823      	ldr	r3, [r4, #0]
 81086a6:	e7b6      	b.n	8108616 <__gnu_unwind_pr_common+0x136>
 81086a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 81086aa:	429c      	cmp	r4, r3
 81086ac:	d1fa      	bne.n	81086a4 <__gnu_unwind_pr_common+0x1c4>
 81086ae:	2204      	movs	r2, #4
 81086b0:	2100      	movs	r1, #0
 81086b2:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 81086b6:	18a3      	adds	r3, r4, r2
 81086b8:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 81086bc:	636b      	str	r3, [r5, #52]	; 0x34
 81086be:	6823      	ldr	r3, [r4, #0]
 81086c0:	428b      	cmp	r3, r1
 81086c2:	db59      	blt.n	8108778 <__gnu_unwind_pr_common+0x298>
 81086c4:	2301      	movs	r3, #1
 81086c6:	9301      	str	r3, [sp, #4]
 81086c8:	e7a8      	b.n	810861c <__gnu_unwind_pr_common+0x13c>
 81086ca:	f105 0358 	add.w	r3, r5, #88	; 0x58
 81086ce:	f8cd 800c 	str.w	r8, [sp, #12]
 81086d2:	f104 0a04 	add.w	sl, r4, #4
 81086d6:	46b0      	mov	r8, r6
 81086d8:	4691      	mov	r9, r2
 81086da:	461e      	mov	r6, r3
 81086dc:	e00d      	b.n	81086fa <__gnu_unwind_pr_common+0x21a>
 81086de:	9604      	str	r6, [sp, #16]
 81086e0:	f7ff fd7e 	bl	81081e0 <_Unwind_decode_typeinfo_ptr.isra.0>
 81086e4:	ab04      	add	r3, sp, #16
 81086e6:	4601      	mov	r1, r0
 81086e8:	2200      	movs	r2, #0
 81086ea:	4628      	mov	r0, r5
 81086ec:	f003 fa40 	bl	810bb70 <__cxa_type_match>
 81086f0:	f109 0901 	add.w	r9, r9, #1
 81086f4:	f10a 0a04 	add.w	sl, sl, #4
 81086f8:	b9e8      	cbnz	r0, 8108736 <__gnu_unwind_pr_common+0x256>
 81086fa:	45d9      	cmp	r9, fp
 81086fc:	4650      	mov	r0, sl
 81086fe:	d1ee      	bne.n	81086de <__gnu_unwind_pr_common+0x1fe>
 8108700:	4638      	mov	r0, r7
 8108702:	210d      	movs	r1, #13
 8108704:	f7ff fe80 	bl	8108408 <_Unwind_GetGR>
 8108708:	9b04      	ldr	r3, [sp, #16]
 810870a:	6228      	str	r0, [r5, #32]
 810870c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8108710:	2006      	movs	r0, #6
 8108712:	e710      	b.n	8108536 <__gnu_unwind_pr_common+0x56>
 8108714:	4681      	mov	r9, r0
 8108716:	210d      	movs	r1, #13
 8108718:	4638      	mov	r0, r7
 810871a:	f7ff fe75 	bl	8108408 <_Unwind_GetGR>
 810871e:	f1b9 0f02 	cmp.w	r9, #2
 8108722:	6228      	str	r0, [r5, #32]
 8108724:	d125      	bne.n	8108772 <__gnu_unwind_pr_common+0x292>
 8108726:	462b      	mov	r3, r5
 8108728:	9a04      	ldr	r2, [sp, #16]
 810872a:	f843 2f2c 	str.w	r2, [r3, #44]!
 810872e:	626b      	str	r3, [r5, #36]	; 0x24
 8108730:	62ac      	str	r4, [r5, #40]	; 0x28
 8108732:	2006      	movs	r0, #6
 8108734:	e6ff      	b.n	8108536 <__gnu_unwind_pr_common+0x56>
 8108736:	4646      	mov	r6, r8
 8108738:	6823      	ldr	r3, [r4, #0]
 810873a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810873e:	e76a      	b.n	8108616 <__gnu_unwind_pr_common+0x136>
 8108740:	4620      	mov	r0, r4
 8108742:	f7ff fc87 	bl	8108054 <selfrel_offset31>
 8108746:	3404      	adds	r4, #4
 8108748:	4602      	mov	r2, r0
 810874a:	63ac      	str	r4, [r5, #56]	; 0x38
 810874c:	4628      	mov	r0, r5
 810874e:	4614      	mov	r4, r2
 8108750:	f003 fa6c 	bl	810bc2c <__cxa_begin_cleanup>
 8108754:	2800      	cmp	r0, #0
 8108756:	f43f aeed 	beq.w	8108534 <__gnu_unwind_pr_common+0x54>
 810875a:	4638      	mov	r0, r7
 810875c:	4622      	mov	r2, r4
 810875e:	210f      	movs	r1, #15
 8108760:	f7ff fe76 	bl	8108450 <_Unwind_SetGR>
 8108764:	2007      	movs	r0, #7
 8108766:	e6e6      	b.n	8108536 <__gnu_unwind_pr_common+0x56>
 8108768:	4638      	mov	r0, r7
 810876a:	210d      	movs	r1, #13
 810876c:	f7ff fe4c 	bl	8108408 <_Unwind_GetGR>
 8108770:	6228      	str	r0, [r5, #32]
 8108772:	9b04      	ldr	r3, [sp, #16]
 8108774:	626b      	str	r3, [r5, #36]	; 0x24
 8108776:	e7db      	b.n	8108730 <__gnu_unwind_pr_common+0x250>
 8108778:	f10b 0001 	add.w	r0, fp, #1
 810877c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8108780:	e77a      	b.n	8108678 <__gnu_unwind_pr_common+0x198>
 8108782:	bf00      	nop
 8108784:	0810bcbf 	.word	0x0810bcbf

08108788 <__aeabi_unwind_cpp_pr0>:
 8108788:	2300      	movs	r3, #0
 810878a:	e6a9      	b.n	81084e0 <__gnu_unwind_pr_common>

0810878c <__aeabi_unwind_cpp_pr1>:
 810878c:	2301      	movs	r3, #1
 810878e:	e6a7      	b.n	81084e0 <__gnu_unwind_pr_common>

08108790 <__aeabi_unwind_cpp_pr2>:
 8108790:	2302      	movs	r3, #2
 8108792:	e6a5      	b.n	81084e0 <__gnu_unwind_pr_common>

08108794 <_Unwind_VRS_Pop>:
 8108794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108798:	4606      	mov	r6, r0
 810879a:	b0c3      	sub	sp, #268	; 0x10c
 810879c:	4615      	mov	r5, r2
 810879e:	461c      	mov	r4, r3
 81087a0:	2904      	cmp	r1, #4
 81087a2:	f200 80b9 	bhi.w	8108918 <_Unwind_VRS_Pop+0x184>
 81087a6:	e8df f001 	tbb	[pc, r1]
 81087aa:	539a      	.short	0x539a
 81087ac:	29b7      	.short	0x29b7
 81087ae:	03          	.byte	0x03
 81087af:	00          	.byte	0x00
 81087b0:	2c00      	cmp	r4, #0
 81087b2:	f040 80b1 	bne.w	8108918 <_Unwind_VRS_Pop+0x184>
 81087b6:	2a10      	cmp	r2, #16
 81087b8:	f200 80ae 	bhi.w	8108918 <_Unwind_VRS_Pop+0x184>
 81087bc:	6803      	ldr	r3, [r0, #0]
 81087be:	06d8      	lsls	r0, r3, #27
 81087c0:	f100 80f3 	bmi.w	81089aa <_Unwind_VRS_Pop+0x216>
 81087c4:	af20      	add	r7, sp, #128	; 0x80
 81087c6:	4638      	mov	r0, r7
 81087c8:	f000 f992 	bl	8108af0 <__gnu_Unwind_Save_WMMXC>
 81087cc:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 81087ce:	2300      	movs	r3, #0
 81087d0:	2401      	movs	r4, #1
 81087d2:	fa04 f203 	lsl.w	r2, r4, r3
 81087d6:	422a      	tst	r2, r5
 81087d8:	4601      	mov	r1, r0
 81087da:	d004      	beq.n	81087e6 <_Unwind_VRS_Pop+0x52>
 81087dc:	f851 2b04 	ldr.w	r2, [r1], #4
 81087e0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 81087e4:	4608      	mov	r0, r1
 81087e6:	3301      	adds	r3, #1
 81087e8:	2b04      	cmp	r3, #4
 81087ea:	d1f2      	bne.n	81087d2 <_Unwind_VRS_Pop+0x3e>
 81087ec:	63b0      	str	r0, [r6, #56]	; 0x38
 81087ee:	4638      	mov	r0, r7
 81087f0:	f000 f974 	bl	8108adc <__gnu_Unwind_Restore_WMMXC>
 81087f4:	2000      	movs	r0, #0
 81087f6:	b043      	add	sp, #268	; 0x10c
 81087f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81087fc:	2c03      	cmp	r4, #3
 81087fe:	f040 808b 	bne.w	8108918 <_Unwind_VRS_Pop+0x184>
 8108802:	b294      	uxth	r4, r2
 8108804:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8108808:	2b10      	cmp	r3, #16
 810880a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 810880e:	f200 8083 	bhi.w	8108918 <_Unwind_VRS_Pop+0x184>
 8108812:	6803      	ldr	r3, [r0, #0]
 8108814:	071f      	lsls	r7, r3, #28
 8108816:	f100 80d0 	bmi.w	81089ba <_Unwind_VRS_Pop+0x226>
 810881a:	af20      	add	r7, sp, #128	; 0x80
 810881c:	4638      	mov	r0, r7
 810881e:	f000 f93b 	bl	8108a98 <__gnu_Unwind_Save_WMMXD>
 8108822:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8108826:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8108828:	b154      	cbz	r4, 8108840 <_Unwind_VRS_Pop+0xac>
 810882a:	460b      	mov	r3, r1
 810882c:	1ae8      	subs	r0, r5, r3
 810882e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8108832:	00e4      	lsls	r4, r4, #3
 8108834:	581a      	ldr	r2, [r3, r0]
 8108836:	f843 2b04 	str.w	r2, [r3], #4
 810883a:	428b      	cmp	r3, r1
 810883c:	d1fa      	bne.n	8108834 <_Unwind_VRS_Pop+0xa0>
 810883e:	4425      	add	r5, r4
 8108840:	4638      	mov	r0, r7
 8108842:	63b5      	str	r5, [r6, #56]	; 0x38
 8108844:	f000 f906 	bl	8108a54 <__gnu_Unwind_Restore_WMMXD>
 8108848:	2000      	movs	r0, #0
 810884a:	b043      	add	sp, #268	; 0x10c
 810884c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108850:	2c01      	cmp	r4, #1
 8108852:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8108856:	b295      	uxth	r5, r2
 8108858:	d05a      	beq.n	8108910 <_Unwind_VRS_Pop+0x17c>
 810885a:	2c05      	cmp	r4, #5
 810885c:	d15c      	bne.n	8108918 <_Unwind_VRS_Pop+0x184>
 810885e:	eb08 0905 	add.w	r9, r8, r5
 8108862:	f1b9 0f20 	cmp.w	r9, #32
 8108866:	d857      	bhi.n	8108918 <_Unwind_VRS_Pop+0x184>
 8108868:	f1b8 0f0f 	cmp.w	r8, #15
 810886c:	d977      	bls.n	810895e <_Unwind_VRS_Pop+0x1ca>
 810886e:	46a9      	mov	r9, r5
 8108870:	2d00      	cmp	r5, #0
 8108872:	f040 8088 	bne.w	8108986 <_Unwind_VRS_Pop+0x1f2>
 8108876:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8108878:	b36d      	cbz	r5, 81088d6 <_Unwind_VRS_Pop+0x142>
 810887a:	af20      	add	r7, sp, #128	; 0x80
 810887c:	f04f 0900 	mov.w	r9, #0
 8108880:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8108884:	3f04      	subs	r7, #4
 8108886:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 810888a:	f853 1b04 	ldr.w	r1, [r3], #4
 810888e:	f847 1f04 	str.w	r1, [r7, #4]!
 8108892:	42ab      	cmp	r3, r5
 8108894:	d1f9      	bne.n	810888a <_Unwind_VRS_Pop+0xf6>
 8108896:	f1b9 0f00 	cmp.w	r9, #0
 810889a:	d00f      	beq.n	81088bc <_Unwind_VRS_Pop+0x128>
 810889c:	466f      	mov	r7, sp
 810889e:	4641      	mov	r1, r8
 81088a0:	2910      	cmp	r1, #16
 81088a2:	bf38      	it	cc
 81088a4:	2110      	movcc	r1, #16
 81088a6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 81088aa:	3984      	subs	r1, #132	; 0x84
 81088ac:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 81088b0:	f853 0b04 	ldr.w	r0, [r3], #4
 81088b4:	f841 0f04 	str.w	r0, [r1, #4]!
 81088b8:	42ab      	cmp	r3, r5
 81088ba:	d1f9      	bne.n	81088b0 <_Unwind_VRS_Pop+0x11c>
 81088bc:	2c01      	cmp	r4, #1
 81088be:	f000 8084 	beq.w	81089ca <_Unwind_VRS_Pop+0x236>
 81088c2:	f1b8 0f0f 	cmp.w	r8, #15
 81088c6:	63b5      	str	r5, [r6, #56]	; 0x38
 81088c8:	d945      	bls.n	8108956 <_Unwind_VRS_Pop+0x1c2>
 81088ca:	f1b9 0f00 	cmp.w	r9, #0
 81088ce:	d002      	beq.n	81088d6 <_Unwind_VRS_Pop+0x142>
 81088d0:	4668      	mov	r0, sp
 81088d2:	f000 f8b7 	bl	8108a44 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 81088d6:	2000      	movs	r0, #0
 81088d8:	b043      	add	sp, #268	; 0x10c
 81088da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81088de:	b9dc      	cbnz	r4, 8108918 <_Unwind_VRS_Pop+0x184>
 81088e0:	6b87      	ldr	r7, [r0, #56]	; 0x38
 81088e2:	4623      	mov	r3, r4
 81088e4:	2001      	movs	r0, #1
 81088e6:	b294      	uxth	r4, r2
 81088e8:	f106 0c04 	add.w	ip, r6, #4
 81088ec:	fa00 f203 	lsl.w	r2, r0, r3
 81088f0:	4222      	tst	r2, r4
 81088f2:	4639      	mov	r1, r7
 81088f4:	d004      	beq.n	8108900 <_Unwind_VRS_Pop+0x16c>
 81088f6:	f851 2b04 	ldr.w	r2, [r1], #4
 81088fa:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 81088fe:	460f      	mov	r7, r1
 8108900:	3301      	adds	r3, #1
 8108902:	2b10      	cmp	r3, #16
 8108904:	d1f2      	bne.n	81088ec <_Unwind_VRS_Pop+0x158>
 8108906:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 810890a:	d1e4      	bne.n	81088d6 <_Unwind_VRS_Pop+0x142>
 810890c:	63b7      	str	r7, [r6, #56]	; 0x38
 810890e:	e004      	b.n	810891a <_Unwind_VRS_Pop+0x186>
 8108910:	eb08 0305 	add.w	r3, r8, r5
 8108914:	2b10      	cmp	r3, #16
 8108916:	d903      	bls.n	8108920 <_Unwind_VRS_Pop+0x18c>
 8108918:	2002      	movs	r0, #2
 810891a:	b043      	add	sp, #268	; 0x10c
 810891c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108920:	f1b8 0f0f 	cmp.w	r8, #15
 8108924:	d8f8      	bhi.n	8108918 <_Unwind_VRS_Pop+0x184>
 8108926:	6833      	ldr	r3, [r6, #0]
 8108928:	07da      	lsls	r2, r3, #31
 810892a:	d506      	bpl.n	810893a <_Unwind_VRS_Pop+0x1a6>
 810892c:	4630      	mov	r0, r6
 810892e:	f023 0303 	bic.w	r3, r3, #3
 8108932:	f840 3b48 	str.w	r3, [r0], #72
 8108936:	f000 f879 	bl	8108a2c <__gnu_Unwind_Save_VFP>
 810893a:	af20      	add	r7, sp, #128	; 0x80
 810893c:	4638      	mov	r0, r7
 810893e:	f000 f875 	bl	8108a2c <__gnu_Unwind_Save_VFP>
 8108942:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8108944:	2d00      	cmp	r5, #0
 8108946:	d199      	bne.n	810887c <_Unwind_VRS_Pop+0xe8>
 8108948:	461d      	mov	r5, r3
 810894a:	3504      	adds	r5, #4
 810894c:	63b5      	str	r5, [r6, #56]	; 0x38
 810894e:	4638      	mov	r0, r7
 8108950:	f000 f868 	bl	8108a24 <__gnu_Unwind_Restore_VFP>
 8108954:	e7bf      	b.n	81088d6 <_Unwind_VRS_Pop+0x142>
 8108956:	a820      	add	r0, sp, #128	; 0x80
 8108958:	f000 f86c 	bl	8108a34 <__gnu_Unwind_Restore_VFP_D>
 810895c:	e7b5      	b.n	81088ca <_Unwind_VRS_Pop+0x136>
 810895e:	f1b9 0f10 	cmp.w	r9, #16
 8108962:	d940      	bls.n	81089e6 <_Unwind_VRS_Pop+0x252>
 8108964:	f1a9 0910 	sub.w	r9, r9, #16
 8108968:	6833      	ldr	r3, [r6, #0]
 810896a:	07d9      	lsls	r1, r3, #31
 810896c:	d508      	bpl.n	8108980 <_Unwind_VRS_Pop+0x1ec>
 810896e:	f023 0301 	bic.w	r3, r3, #1
 8108972:	4630      	mov	r0, r6
 8108974:	f043 0302 	orr.w	r3, r3, #2
 8108978:	f840 3b48 	str.w	r3, [r0], #72
 810897c:	f000 f85e 	bl	8108a3c <__gnu_Unwind_Save_VFP_D>
 8108980:	f1b9 0f00 	cmp.w	r9, #0
 8108984:	d032      	beq.n	81089ec <_Unwind_VRS_Pop+0x258>
 8108986:	6833      	ldr	r3, [r6, #0]
 8108988:	075a      	lsls	r2, r3, #29
 810898a:	d420      	bmi.n	81089ce <_Unwind_VRS_Pop+0x23a>
 810898c:	f1b8 0f0f 	cmp.w	r8, #15
 8108990:	d925      	bls.n	81089de <_Unwind_VRS_Pop+0x24a>
 8108992:	466f      	mov	r7, sp
 8108994:	4638      	mov	r0, r7
 8108996:	f1c8 0510 	rsb	r5, r8, #16
 810899a:	f000 f857 	bl	8108a4c <__gnu_Unwind_Save_VFP_D_16_to_31>
 810899e:	2d00      	cmp	r5, #0
 81089a0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 81089a2:	f77f af7c 	ble.w	810889e <_Unwind_VRS_Pop+0x10a>
 81089a6:	af20      	add	r7, sp, #128	; 0x80
 81089a8:	e76a      	b.n	8108880 <_Unwind_VRS_Pop+0xec>
 81089aa:	f023 0310 	bic.w	r3, r3, #16
 81089ae:	6033      	str	r3, [r6, #0]
 81089b0:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 81089b4:	f000 f89c 	bl	8108af0 <__gnu_Unwind_Save_WMMXC>
 81089b8:	e704      	b.n	81087c4 <_Unwind_VRS_Pop+0x30>
 81089ba:	f023 0308 	bic.w	r3, r3, #8
 81089be:	6003      	str	r3, [r0, #0]
 81089c0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 81089c4:	f000 f868 	bl	8108a98 <__gnu_Unwind_Save_WMMXD>
 81089c8:	e727      	b.n	810881a <_Unwind_VRS_Pop+0x86>
 81089ca:	af20      	add	r7, sp, #128	; 0x80
 81089cc:	e7bd      	b.n	810894a <_Unwind_VRS_Pop+0x1b6>
 81089ce:	4630      	mov	r0, r6
 81089d0:	f023 0304 	bic.w	r3, r3, #4
 81089d4:	f840 3bd0 	str.w	r3, [r0], #208
 81089d8:	f000 f838 	bl	8108a4c <__gnu_Unwind_Save_VFP_D_16_to_31>
 81089dc:	e7d6      	b.n	810898c <_Unwind_VRS_Pop+0x1f8>
 81089de:	a820      	add	r0, sp, #128	; 0x80
 81089e0:	f000 f82c 	bl	8108a3c <__gnu_Unwind_Save_VFP_D>
 81089e4:	e7d5      	b.n	8108992 <_Unwind_VRS_Pop+0x1fe>
 81089e6:	f04f 0900 	mov.w	r9, #0
 81089ea:	e7bd      	b.n	8108968 <_Unwind_VRS_Pop+0x1d4>
 81089ec:	f1b8 0f0f 	cmp.w	r8, #15
 81089f0:	f63f af41 	bhi.w	8108876 <_Unwind_VRS_Pop+0xe2>
 81089f4:	af20      	add	r7, sp, #128	; 0x80
 81089f6:	4638      	mov	r0, r7
 81089f8:	f000 f820 	bl	8108a3c <__gnu_Unwind_Save_VFP_D>
 81089fc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 81089fe:	2d00      	cmp	r5, #0
 8108a00:	f47f af3c 	bne.w	810887c <_Unwind_VRS_Pop+0xe8>
 8108a04:	4638      	mov	r0, r7
 8108a06:	f000 f815 	bl	8108a34 <__gnu_Unwind_Restore_VFP_D>
 8108a0a:	e764      	b.n	81088d6 <_Unwind_VRS_Pop+0x142>

08108a0c <__restore_core_regs>:
 8108a0c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8108a10:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8108a14:	469c      	mov	ip, r3
 8108a16:	46a6      	mov	lr, r4
 8108a18:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8108a1c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8108a20:	46e5      	mov	sp, ip
 8108a22:	bd00      	pop	{pc}

08108a24 <__gnu_Unwind_Restore_VFP>:
 8108a24:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8108a28:	4770      	bx	lr
 8108a2a:	bf00      	nop

08108a2c <__gnu_Unwind_Save_VFP>:
 8108a2c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8108a30:	4770      	bx	lr
 8108a32:	bf00      	nop

08108a34 <__gnu_Unwind_Restore_VFP_D>:
 8108a34:	ec90 0b20 	vldmia	r0, {d0-d15}
 8108a38:	4770      	bx	lr
 8108a3a:	bf00      	nop

08108a3c <__gnu_Unwind_Save_VFP_D>:
 8108a3c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8108a40:	4770      	bx	lr
 8108a42:	bf00      	nop

08108a44 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8108a44:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8108a48:	4770      	bx	lr
 8108a4a:	bf00      	nop

08108a4c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8108a4c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8108a50:	4770      	bx	lr
 8108a52:	bf00      	nop

08108a54 <__gnu_Unwind_Restore_WMMXD>:
 8108a54:	ecf0 0102 	ldfe	f0, [r0], #8
 8108a58:	ecf0 1102 	ldfe	f1, [r0], #8
 8108a5c:	ecf0 2102 	ldfe	f2, [r0], #8
 8108a60:	ecf0 3102 	ldfe	f3, [r0], #8
 8108a64:	ecf0 4102 	ldfe	f4, [r0], #8
 8108a68:	ecf0 5102 	ldfe	f5, [r0], #8
 8108a6c:	ecf0 6102 	ldfe	f6, [r0], #8
 8108a70:	ecf0 7102 	ldfe	f7, [r0], #8
 8108a74:	ecf0 8102 	ldfp	f0, [r0], #8
 8108a78:	ecf0 9102 	ldfp	f1, [r0], #8
 8108a7c:	ecf0 a102 	ldfp	f2, [r0], #8
 8108a80:	ecf0 b102 	ldfp	f3, [r0], #8
 8108a84:	ecf0 c102 	ldfp	f4, [r0], #8
 8108a88:	ecf0 d102 	ldfp	f5, [r0], #8
 8108a8c:	ecf0 e102 	ldfp	f6, [r0], #8
 8108a90:	ecf0 f102 	ldfp	f7, [r0], #8
 8108a94:	4770      	bx	lr
 8108a96:	bf00      	nop

08108a98 <__gnu_Unwind_Save_WMMXD>:
 8108a98:	ece0 0102 	stfe	f0, [r0], #8
 8108a9c:	ece0 1102 	stfe	f1, [r0], #8
 8108aa0:	ece0 2102 	stfe	f2, [r0], #8
 8108aa4:	ece0 3102 	stfe	f3, [r0], #8
 8108aa8:	ece0 4102 	stfe	f4, [r0], #8
 8108aac:	ece0 5102 	stfe	f5, [r0], #8
 8108ab0:	ece0 6102 	stfe	f6, [r0], #8
 8108ab4:	ece0 7102 	stfe	f7, [r0], #8
 8108ab8:	ece0 8102 	stfp	f0, [r0], #8
 8108abc:	ece0 9102 	stfp	f1, [r0], #8
 8108ac0:	ece0 a102 	stfp	f2, [r0], #8
 8108ac4:	ece0 b102 	stfp	f3, [r0], #8
 8108ac8:	ece0 c102 	stfp	f4, [r0], #8
 8108acc:	ece0 d102 	stfp	f5, [r0], #8
 8108ad0:	ece0 e102 	stfp	f6, [r0], #8
 8108ad4:	ece0 f102 	stfp	f7, [r0], #8
 8108ad8:	4770      	bx	lr
 8108ada:	bf00      	nop

08108adc <__gnu_Unwind_Restore_WMMXC>:
 8108adc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8108ae0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8108ae4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8108ae8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8108aec:	4770      	bx	lr
 8108aee:	bf00      	nop

08108af0 <__gnu_Unwind_Save_WMMXC>:
 8108af0:	fca0 8101 	stc2	1, cr8, [r0], #4
 8108af4:	fca0 9101 	stc2	1, cr9, [r0], #4
 8108af8:	fca0 a101 	stc2	1, cr10, [r0], #4
 8108afc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8108b00:	4770      	bx	lr
 8108b02:	bf00      	nop

08108b04 <_Unwind_RaiseException>:
 8108b04:	46ec      	mov	ip, sp
 8108b06:	b500      	push	{lr}
 8108b08:	e92d 5000 	stmdb	sp!, {ip, lr}
 8108b0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8108b10:	f04f 0300 	mov.w	r3, #0
 8108b14:	e92d 000c 	stmdb	sp!, {r2, r3}
 8108b18:	a901      	add	r1, sp, #4
 8108b1a:	f7ff fbf1 	bl	8108300 <__gnu_Unwind_RaiseException>
 8108b1e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8108b22:	b012      	add	sp, #72	; 0x48
 8108b24:	4770      	bx	lr
 8108b26:	bf00      	nop

08108b28 <_Unwind_Resume>:
 8108b28:	46ec      	mov	ip, sp
 8108b2a:	b500      	push	{lr}
 8108b2c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8108b30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8108b34:	f04f 0300 	mov.w	r3, #0
 8108b38:	e92d 000c 	stmdb	sp!, {r2, r3}
 8108b3c:	a901      	add	r1, sp, #4
 8108b3e:	f7ff fc19 	bl	8108374 <__gnu_Unwind_Resume>
 8108b42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8108b46:	b012      	add	sp, #72	; 0x48
 8108b48:	4770      	bx	lr
 8108b4a:	bf00      	nop

08108b4c <_Unwind_Resume_or_Rethrow>:
 8108b4c:	46ec      	mov	ip, sp
 8108b4e:	b500      	push	{lr}
 8108b50:	e92d 5000 	stmdb	sp!, {ip, lr}
 8108b54:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8108b58:	f04f 0300 	mov.w	r3, #0
 8108b5c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8108b60:	a901      	add	r1, sp, #4
 8108b62:	f7ff fc29 	bl	81083b8 <__gnu_Unwind_Resume_or_Rethrow>
 8108b66:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8108b6a:	b012      	add	sp, #72	; 0x48
 8108b6c:	4770      	bx	lr
 8108b6e:	bf00      	nop

08108b70 <_Unwind_ForcedUnwind>:
 8108b70:	46ec      	mov	ip, sp
 8108b72:	b500      	push	{lr}
 8108b74:	e92d 5000 	stmdb	sp!, {ip, lr}
 8108b78:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8108b7c:	f04f 0300 	mov.w	r3, #0
 8108b80:	e92d 000c 	stmdb	sp!, {r2, r3}
 8108b84:	ab01      	add	r3, sp, #4
 8108b86:	f7ff fbeb 	bl	8108360 <__gnu_Unwind_ForcedUnwind>
 8108b8a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8108b8e:	b012      	add	sp, #72	; 0x48
 8108b90:	4770      	bx	lr
 8108b92:	bf00      	nop

08108b94 <_Unwind_Backtrace>:
 8108b94:	46ec      	mov	ip, sp
 8108b96:	b500      	push	{lr}
 8108b98:	e92d 5000 	stmdb	sp!, {ip, lr}
 8108b9c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8108ba0:	f04f 0300 	mov.w	r3, #0
 8108ba4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8108ba8:	aa01      	add	r2, sp, #4
 8108baa:	f7ff fc5d 	bl	8108468 <__gnu_Unwind_Backtrace>
 8108bae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8108bb2:	b012      	add	sp, #72	; 0x48
 8108bb4:	4770      	bx	lr
 8108bb6:	bf00      	nop

08108bb8 <next_unwind_byte>:
 8108bb8:	7a02      	ldrb	r2, [r0, #8]
 8108bba:	b97a      	cbnz	r2, 8108bdc <next_unwind_byte+0x24>
 8108bbc:	7a43      	ldrb	r3, [r0, #9]
 8108bbe:	b1a3      	cbz	r3, 8108bea <next_unwind_byte+0x32>
 8108bc0:	6842      	ldr	r2, [r0, #4]
 8108bc2:	3b01      	subs	r3, #1
 8108bc4:	b410      	push	{r4}
 8108bc6:	7243      	strb	r3, [r0, #9]
 8108bc8:	6813      	ldr	r3, [r2, #0]
 8108bca:	2103      	movs	r1, #3
 8108bcc:	1d14      	adds	r4, r2, #4
 8108bce:	7201      	strb	r1, [r0, #8]
 8108bd0:	021a      	lsls	r2, r3, #8
 8108bd2:	6044      	str	r4, [r0, #4]
 8108bd4:	6002      	str	r2, [r0, #0]
 8108bd6:	bc10      	pop	{r4}
 8108bd8:	0e18      	lsrs	r0, r3, #24
 8108bda:	4770      	bx	lr
 8108bdc:	6803      	ldr	r3, [r0, #0]
 8108bde:	3a01      	subs	r2, #1
 8108be0:	7202      	strb	r2, [r0, #8]
 8108be2:	021a      	lsls	r2, r3, #8
 8108be4:	6002      	str	r2, [r0, #0]
 8108be6:	0e18      	lsrs	r0, r3, #24
 8108be8:	4770      	bx	lr
 8108bea:	20b0      	movs	r0, #176	; 0xb0
 8108bec:	4770      	bx	lr
 8108bee:	bf00      	nop

08108bf0 <_Unwind_GetGR.constprop.0>:
 8108bf0:	b500      	push	{lr}
 8108bf2:	b085      	sub	sp, #20
 8108bf4:	aa03      	add	r2, sp, #12
 8108bf6:	2300      	movs	r3, #0
 8108bf8:	9200      	str	r2, [sp, #0]
 8108bfa:	4619      	mov	r1, r3
 8108bfc:	220c      	movs	r2, #12
 8108bfe:	f7ff fbeb 	bl	81083d8 <_Unwind_VRS_Get>
 8108c02:	9803      	ldr	r0, [sp, #12]
 8108c04:	b005      	add	sp, #20
 8108c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8108c0a:	bf00      	nop

08108c0c <unwind_UCB_from_context>:
 8108c0c:	e7f0      	b.n	8108bf0 <_Unwind_GetGR.constprop.0>
 8108c0e:	bf00      	nop

08108c10 <__gnu_unwind_execute>:
 8108c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108c14:	4605      	mov	r5, r0
 8108c16:	b085      	sub	sp, #20
 8108c18:	460e      	mov	r6, r1
 8108c1a:	f04f 0800 	mov.w	r8, #0
 8108c1e:	4630      	mov	r0, r6
 8108c20:	f7ff ffca 	bl	8108bb8 <next_unwind_byte>
 8108c24:	28b0      	cmp	r0, #176	; 0xb0
 8108c26:	4604      	mov	r4, r0
 8108c28:	f000 80b2 	beq.w	8108d90 <__gnu_unwind_execute+0x180>
 8108c2c:	0607      	lsls	r7, r0, #24
 8108c2e:	d520      	bpl.n	8108c72 <__gnu_unwind_execute+0x62>
 8108c30:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8108c34:	2b80      	cmp	r3, #128	; 0x80
 8108c36:	d04d      	beq.n	8108cd4 <__gnu_unwind_execute+0xc4>
 8108c38:	2b90      	cmp	r3, #144	; 0x90
 8108c3a:	d036      	beq.n	8108caa <__gnu_unwind_execute+0x9a>
 8108c3c:	2ba0      	cmp	r3, #160	; 0xa0
 8108c3e:	d060      	beq.n	8108d02 <__gnu_unwind_execute+0xf2>
 8108c40:	2bb0      	cmp	r3, #176	; 0xb0
 8108c42:	d074      	beq.n	8108d2e <__gnu_unwind_execute+0x11e>
 8108c44:	2bc0      	cmp	r3, #192	; 0xc0
 8108c46:	f000 808b 	beq.w	8108d60 <__gnu_unwind_execute+0x150>
 8108c4a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8108c4e:	2bd0      	cmp	r3, #208	; 0xd0
 8108c50:	d10b      	bne.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108c52:	f000 0207 	and.w	r2, r0, #7
 8108c56:	3201      	adds	r2, #1
 8108c58:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8108c5c:	2305      	movs	r3, #5
 8108c5e:	2101      	movs	r1, #1
 8108c60:	4628      	mov	r0, r5
 8108c62:	f7ff fd97 	bl	8108794 <_Unwind_VRS_Pop>
 8108c66:	2800      	cmp	r0, #0
 8108c68:	d0d9      	beq.n	8108c1e <__gnu_unwind_execute+0xe>
 8108c6a:	2009      	movs	r0, #9
 8108c6c:	b005      	add	sp, #20
 8108c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108c72:	f10d 090c 	add.w	r9, sp, #12
 8108c76:	2300      	movs	r3, #0
 8108c78:	4619      	mov	r1, r3
 8108c7a:	0087      	lsls	r7, r0, #2
 8108c7c:	f8cd 9000 	str.w	r9, [sp]
 8108c80:	220d      	movs	r2, #13
 8108c82:	4628      	mov	r0, r5
 8108c84:	f7ff fba8 	bl	81083d8 <_Unwind_VRS_Get>
 8108c88:	b2ff      	uxtb	r7, r7
 8108c8a:	9b03      	ldr	r3, [sp, #12]
 8108c8c:	f8cd 9000 	str.w	r9, [sp]
 8108c90:	3704      	adds	r7, #4
 8108c92:	0660      	lsls	r0, r4, #25
 8108c94:	bf4c      	ite	mi
 8108c96:	1bdf      	submi	r7, r3, r7
 8108c98:	18ff      	addpl	r7, r7, r3
 8108c9a:	2300      	movs	r3, #0
 8108c9c:	4619      	mov	r1, r3
 8108c9e:	220d      	movs	r2, #13
 8108ca0:	4628      	mov	r0, r5
 8108ca2:	9703      	str	r7, [sp, #12]
 8108ca4:	f7ff fbbc 	bl	8108420 <_Unwind_VRS_Set>
 8108ca8:	e7b9      	b.n	8108c1e <__gnu_unwind_execute+0xe>
 8108caa:	f000 030d 	and.w	r3, r0, #13
 8108cae:	2b0d      	cmp	r3, #13
 8108cb0:	d0db      	beq.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108cb2:	af03      	add	r7, sp, #12
 8108cb4:	2300      	movs	r3, #0
 8108cb6:	f000 020f 	and.w	r2, r0, #15
 8108cba:	4619      	mov	r1, r3
 8108cbc:	9700      	str	r7, [sp, #0]
 8108cbe:	4628      	mov	r0, r5
 8108cc0:	f7ff fb8a 	bl	81083d8 <_Unwind_VRS_Get>
 8108cc4:	2300      	movs	r3, #0
 8108cc6:	9700      	str	r7, [sp, #0]
 8108cc8:	4619      	mov	r1, r3
 8108cca:	220d      	movs	r2, #13
 8108ccc:	4628      	mov	r0, r5
 8108cce:	f7ff fba7 	bl	8108420 <_Unwind_VRS_Set>
 8108cd2:	e7a4      	b.n	8108c1e <__gnu_unwind_execute+0xe>
 8108cd4:	4630      	mov	r0, r6
 8108cd6:	f7ff ff6f 	bl	8108bb8 <next_unwind_byte>
 8108cda:	0224      	lsls	r4, r4, #8
 8108cdc:	4320      	orrs	r0, r4
 8108cde:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8108ce2:	d0c2      	beq.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108ce4:	0104      	lsls	r4, r0, #4
 8108ce6:	2300      	movs	r3, #0
 8108ce8:	b2a2      	uxth	r2, r4
 8108cea:	4619      	mov	r1, r3
 8108cec:	4628      	mov	r0, r5
 8108cee:	f7ff fd51 	bl	8108794 <_Unwind_VRS_Pop>
 8108cf2:	2800      	cmp	r0, #0
 8108cf4:	d1b9      	bne.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108cf6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8108cfa:	bf18      	it	ne
 8108cfc:	f04f 0801 	movne.w	r8, #1
 8108d00:	e78d      	b.n	8108c1e <__gnu_unwind_execute+0xe>
 8108d02:	43c2      	mvns	r2, r0
 8108d04:	f002 0307 	and.w	r3, r2, #7
 8108d08:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8108d0c:	411a      	asrs	r2, r3
 8108d0e:	0701      	lsls	r1, r0, #28
 8108d10:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8108d14:	f04f 0300 	mov.w	r3, #0
 8108d18:	bf48      	it	mi
 8108d1a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8108d1e:	4619      	mov	r1, r3
 8108d20:	4628      	mov	r0, r5
 8108d22:	f7ff fd37 	bl	8108794 <_Unwind_VRS_Pop>
 8108d26:	2800      	cmp	r0, #0
 8108d28:	f43f af79 	beq.w	8108c1e <__gnu_unwind_execute+0xe>
 8108d2c:	e79d      	b.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108d2e:	28b1      	cmp	r0, #177	; 0xb1
 8108d30:	d033      	beq.n	8108d9a <__gnu_unwind_execute+0x18a>
 8108d32:	28b2      	cmp	r0, #178	; 0xb2
 8108d34:	f000 808b 	beq.w	8108e4e <__gnu_unwind_execute+0x23e>
 8108d38:	28b3      	cmp	r0, #179	; 0xb3
 8108d3a:	d039      	beq.n	8108db0 <__gnu_unwind_execute+0x1a0>
 8108d3c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8108d40:	2bb4      	cmp	r3, #180	; 0xb4
 8108d42:	d092      	beq.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108d44:	f000 0207 	and.w	r2, r0, #7
 8108d48:	3201      	adds	r2, #1
 8108d4a:	2301      	movs	r3, #1
 8108d4c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8108d50:	4619      	mov	r1, r3
 8108d52:	4628      	mov	r0, r5
 8108d54:	f7ff fd1e 	bl	8108794 <_Unwind_VRS_Pop>
 8108d58:	2800      	cmp	r0, #0
 8108d5a:	f43f af60 	beq.w	8108c1e <__gnu_unwind_execute+0xe>
 8108d5e:	e784      	b.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108d60:	28c6      	cmp	r0, #198	; 0xc6
 8108d62:	d042      	beq.n	8108dea <__gnu_unwind_execute+0x1da>
 8108d64:	28c7      	cmp	r0, #199	; 0xc7
 8108d66:	d04c      	beq.n	8108e02 <__gnu_unwind_execute+0x1f2>
 8108d68:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8108d6c:	2bc0      	cmp	r3, #192	; 0xc0
 8108d6e:	d05b      	beq.n	8108e28 <__gnu_unwind_execute+0x218>
 8108d70:	28c8      	cmp	r0, #200	; 0xc8
 8108d72:	d060      	beq.n	8108e36 <__gnu_unwind_execute+0x226>
 8108d74:	28c9      	cmp	r0, #201	; 0xc9
 8108d76:	f47f af78 	bne.w	8108c6a <__gnu_unwind_execute+0x5a>
 8108d7a:	4630      	mov	r0, r6
 8108d7c:	f7ff ff1c 	bl	8108bb8 <next_unwind_byte>
 8108d80:	0302      	lsls	r2, r0, #12
 8108d82:	f000 000f 	and.w	r0, r0, #15
 8108d86:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8108d8a:	3001      	adds	r0, #1
 8108d8c:	4302      	orrs	r2, r0
 8108d8e:	e765      	b.n	8108c5c <__gnu_unwind_execute+0x4c>
 8108d90:	f1b8 0f00 	cmp.w	r8, #0
 8108d94:	d018      	beq.n	8108dc8 <__gnu_unwind_execute+0x1b8>
 8108d96:	2000      	movs	r0, #0
 8108d98:	e768      	b.n	8108c6c <__gnu_unwind_execute+0x5c>
 8108d9a:	4630      	mov	r0, r6
 8108d9c:	f7ff ff0c 	bl	8108bb8 <next_unwind_byte>
 8108da0:	4602      	mov	r2, r0
 8108da2:	2800      	cmp	r0, #0
 8108da4:	f43f af61 	beq.w	8108c6a <__gnu_unwind_execute+0x5a>
 8108da8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8108dac:	d0d0      	beq.n	8108d50 <__gnu_unwind_execute+0x140>
 8108dae:	e75c      	b.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108db0:	4630      	mov	r0, r6
 8108db2:	f7ff ff01 	bl	8108bb8 <next_unwind_byte>
 8108db6:	0301      	lsls	r1, r0, #12
 8108db8:	f000 000f 	and.w	r0, r0, #15
 8108dbc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8108dc0:	1c42      	adds	r2, r0, #1
 8108dc2:	2301      	movs	r3, #1
 8108dc4:	430a      	orrs	r2, r1
 8108dc6:	e7c3      	b.n	8108d50 <__gnu_unwind_execute+0x140>
 8108dc8:	ac03      	add	r4, sp, #12
 8108dca:	4643      	mov	r3, r8
 8108dcc:	220e      	movs	r2, #14
 8108dce:	4641      	mov	r1, r8
 8108dd0:	9400      	str	r4, [sp, #0]
 8108dd2:	4628      	mov	r0, r5
 8108dd4:	f7ff fb00 	bl	81083d8 <_Unwind_VRS_Get>
 8108dd8:	9400      	str	r4, [sp, #0]
 8108dda:	4628      	mov	r0, r5
 8108ddc:	4643      	mov	r3, r8
 8108dde:	220f      	movs	r2, #15
 8108de0:	4641      	mov	r1, r8
 8108de2:	f7ff fb1d 	bl	8108420 <_Unwind_VRS_Set>
 8108de6:	4640      	mov	r0, r8
 8108de8:	e740      	b.n	8108c6c <__gnu_unwind_execute+0x5c>
 8108dea:	4630      	mov	r0, r6
 8108dec:	f7ff fee4 	bl	8108bb8 <next_unwind_byte>
 8108df0:	0301      	lsls	r1, r0, #12
 8108df2:	f000 000f 	and.w	r0, r0, #15
 8108df6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8108dfa:	1c42      	adds	r2, r0, #1
 8108dfc:	2303      	movs	r3, #3
 8108dfe:	430a      	orrs	r2, r1
 8108e00:	e7a6      	b.n	8108d50 <__gnu_unwind_execute+0x140>
 8108e02:	4630      	mov	r0, r6
 8108e04:	f7ff fed8 	bl	8108bb8 <next_unwind_byte>
 8108e08:	4602      	mov	r2, r0
 8108e0a:	2800      	cmp	r0, #0
 8108e0c:	f43f af2d 	beq.w	8108c6a <__gnu_unwind_execute+0x5a>
 8108e10:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8108e14:	f47f af29 	bne.w	8108c6a <__gnu_unwind_execute+0x5a>
 8108e18:	2104      	movs	r1, #4
 8108e1a:	4628      	mov	r0, r5
 8108e1c:	f7ff fcba 	bl	8108794 <_Unwind_VRS_Pop>
 8108e20:	2800      	cmp	r0, #0
 8108e22:	f43f aefc 	beq.w	8108c1e <__gnu_unwind_execute+0xe>
 8108e26:	e720      	b.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108e28:	f000 020f 	and.w	r2, r0, #15
 8108e2c:	3201      	adds	r2, #1
 8108e2e:	2303      	movs	r3, #3
 8108e30:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8108e34:	e78c      	b.n	8108d50 <__gnu_unwind_execute+0x140>
 8108e36:	4630      	mov	r0, r6
 8108e38:	f7ff febe 	bl	8108bb8 <next_unwind_byte>
 8108e3c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8108e40:	f000 030f 	and.w	r3, r0, #15
 8108e44:	3210      	adds	r2, #16
 8108e46:	3301      	adds	r3, #1
 8108e48:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8108e4c:	e706      	b.n	8108c5c <__gnu_unwind_execute+0x4c>
 8108e4e:	2300      	movs	r3, #0
 8108e50:	f10d 090c 	add.w	r9, sp, #12
 8108e54:	220d      	movs	r2, #13
 8108e56:	4619      	mov	r1, r3
 8108e58:	f8cd 9000 	str.w	r9, [sp]
 8108e5c:	4628      	mov	r0, r5
 8108e5e:	f7ff fabb 	bl	81083d8 <_Unwind_VRS_Get>
 8108e62:	4630      	mov	r0, r6
 8108e64:	f7ff fea8 	bl	8108bb8 <next_unwind_byte>
 8108e68:	0602      	lsls	r2, r0, #24
 8108e6a:	f04f 0702 	mov.w	r7, #2
 8108e6e:	d50c      	bpl.n	8108e8a <__gnu_unwind_execute+0x27a>
 8108e70:	9b03      	ldr	r3, [sp, #12]
 8108e72:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8108e76:	40b8      	lsls	r0, r7
 8108e78:	4403      	add	r3, r0
 8108e7a:	4630      	mov	r0, r6
 8108e7c:	9303      	str	r3, [sp, #12]
 8108e7e:	f7ff fe9b 	bl	8108bb8 <next_unwind_byte>
 8108e82:	0603      	lsls	r3, r0, #24
 8108e84:	f107 0707 	add.w	r7, r7, #7
 8108e88:	d4f2      	bmi.n	8108e70 <__gnu_unwind_execute+0x260>
 8108e8a:	9b03      	ldr	r3, [sp, #12]
 8108e8c:	f8cd 9000 	str.w	r9, [sp]
 8108e90:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8108e94:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8108e98:	40bc      	lsls	r4, r7
 8108e9a:	2300      	movs	r3, #0
 8108e9c:	4414      	add	r4, r2
 8108e9e:	4619      	mov	r1, r3
 8108ea0:	220d      	movs	r2, #13
 8108ea2:	4628      	mov	r0, r5
 8108ea4:	9403      	str	r4, [sp, #12]
 8108ea6:	f7ff fabb 	bl	8108420 <_Unwind_VRS_Set>
 8108eaa:	e6b8      	b.n	8108c1e <__gnu_unwind_execute+0xe>

08108eac <__gnu_unwind_frame>:
 8108eac:	b510      	push	{r4, lr}
 8108eae:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8108eb0:	b084      	sub	sp, #16
 8108eb2:	6853      	ldr	r3, [r2, #4]
 8108eb4:	2403      	movs	r4, #3
 8108eb6:	f88d 400c 	strb.w	r4, [sp, #12]
 8108eba:	021b      	lsls	r3, r3, #8
 8108ebc:	f102 0408 	add.w	r4, r2, #8
 8108ec0:	4608      	mov	r0, r1
 8108ec2:	79d2      	ldrb	r2, [r2, #7]
 8108ec4:	9301      	str	r3, [sp, #4]
 8108ec6:	a901      	add	r1, sp, #4
 8108ec8:	9402      	str	r4, [sp, #8]
 8108eca:	f88d 200d 	strb.w	r2, [sp, #13]
 8108ece:	f7ff fe9f 	bl	8108c10 <__gnu_unwind_execute>
 8108ed2:	b004      	add	sp, #16
 8108ed4:	bd10      	pop	{r4, pc}
 8108ed6:	bf00      	nop

08108ed8 <_Unwind_GetRegionStart>:
 8108ed8:	b508      	push	{r3, lr}
 8108eda:	f7ff fe97 	bl	8108c0c <unwind_UCB_from_context>
 8108ede:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8108ee0:	bd08      	pop	{r3, pc}
 8108ee2:	bf00      	nop

08108ee4 <_Unwind_GetLanguageSpecificData>:
 8108ee4:	b508      	push	{r3, lr}
 8108ee6:	f7ff fe91 	bl	8108c0c <unwind_UCB_from_context>
 8108eea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8108eec:	79c3      	ldrb	r3, [r0, #7]
 8108eee:	3302      	adds	r3, #2
 8108ef0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8108ef4:	bd08      	pop	{r3, pc}
 8108ef6:	bf00      	nop

08108ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8108ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8108f30 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8108efc:	f002 fb2a 	bl	810b554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8108f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8108f02:	e003      	b.n	8108f0c <LoopCopyDataInit>

08108f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8108f04:	4b0b      	ldr	r3, [pc, #44]	; (8108f34 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8108f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8108f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8108f0a:	3104      	adds	r1, #4

08108f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8108f0c:	480a      	ldr	r0, [pc, #40]	; (8108f38 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8108f0e:	4b0b      	ldr	r3, [pc, #44]	; (8108f3c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8108f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8108f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8108f14:	d3f6      	bcc.n	8108f04 <CopyDataInit>
  ldr  r2, =_sbss
 8108f16:	4a0a      	ldr	r2, [pc, #40]	; (8108f40 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8108f18:	e002      	b.n	8108f20 <LoopFillZerobss>

08108f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8108f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8108f1c:	f842 3b04 	str.w	r3, [r2], #4

08108f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8108f20:	4b08      	ldr	r3, [pc, #32]	; (8108f44 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8108f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8108f24:	d3f9      	bcc.n	8108f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8108f26:	f003 f83d 	bl	810bfa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8108f2a:	f000 f839 	bl	8108fa0 <main>
  bx  lr    
 8108f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8108f30:	10020000 	.word	0x10020000
  ldr  r3, =_sidata
 8108f34:	0810c4ec 	.word	0x0810c4ec
  ldr  r0, =_sdata
 8108f38:	30040000 	.word	0x30040000
  ldr  r3, =_edata
 8108f3c:	3004007c 	.word	0x3004007c
  ldr  r2, =_sbss
 8108f40:	3004007c 	.word	0x3004007c
  ldr  r3, = _ebss
 8108f44:	300400f8 	.word	0x300400f8

08108f48 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8108f48:	e7fe      	b.n	8108f48 <ADC3_IRQHandler>
	...

08108f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8108f4c:	b480      	push	{r7}
 8108f4e:	b083      	sub	sp, #12
 8108f50:	af00      	add	r7, sp, #0
 8108f52:	4603      	mov	r3, r0
 8108f54:	6039      	str	r1, [r7, #0]
 8108f56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8108f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108f5c:	2b00      	cmp	r3, #0
 8108f5e:	db0a      	blt.n	8108f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8108f60:	683b      	ldr	r3, [r7, #0]
 8108f62:	b2da      	uxtb	r2, r3
 8108f64:	490c      	ldr	r1, [pc, #48]	; (8108f98 <__NVIC_SetPriority+0x4c>)
 8108f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108f6a:	0112      	lsls	r2, r2, #4
 8108f6c:	b2d2      	uxtb	r2, r2
 8108f6e:	440b      	add	r3, r1
 8108f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8108f74:	e00a      	b.n	8108f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8108f76:	683b      	ldr	r3, [r7, #0]
 8108f78:	b2da      	uxtb	r2, r3
 8108f7a:	4908      	ldr	r1, [pc, #32]	; (8108f9c <__NVIC_SetPriority+0x50>)
 8108f7c:	88fb      	ldrh	r3, [r7, #6]
 8108f7e:	f003 030f 	and.w	r3, r3, #15
 8108f82:	3b04      	subs	r3, #4
 8108f84:	0112      	lsls	r2, r2, #4
 8108f86:	b2d2      	uxtb	r2, r2
 8108f88:	440b      	add	r3, r1
 8108f8a:	761a      	strb	r2, [r3, #24]
}
 8108f8c:	bf00      	nop
 8108f8e:	370c      	adds	r7, #12
 8108f90:	46bd      	mov	sp, r7
 8108f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f96:	4770      	bx	lr
 8108f98:	e000e100 	.word	0xe000e100
 8108f9c:	e000ed00 	.word	0xe000ed00

08108fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8108fa0:	b580      	push	{r7, lr}
 8108fa2:	b082      	sub	sp, #8
 8108fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	cosmosApi_boot();
 8108fa6:	f000 f98b 	bl	81092c0 <osBoot_boot>
	NVIC_SetPriority(SVCall_IRQn,3);
 8108faa:	2103      	movs	r1, #3
 8108fac:	f06f 0004 	mvn.w	r0, #4
 8108fb0:	f7ff ffcc 	bl	8108f4c <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn,4);
 8108fb4:	2104      	movs	r1, #4
 8108fb6:	f06f 0001 	mvn.w	r0, #1
 8108fba:	f7ff ffc7 	bl	8108f4c <__NVIC_SetPriority>
  NVIC_SetPriority (SysTick_IRQn, 0);         /* set Priority for Systick Interrupt */
 8108fbe:	2100      	movs	r1, #0
 8108fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8108fc4:	f7ff ffc2 	bl	8108f4c <__NVIC_SetPriority>
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8108fc8:	4b26      	ldr	r3, [pc, #152]	; (8109064 <main+0xc4>)
 8108fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8108fce:	4a25      	ldr	r2, [pc, #148]	; (8109064 <main+0xc4>)
 8108fd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8108fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8108fd8:	4b22      	ldr	r3, [pc, #136]	; (8109064 <main+0xc4>)
 8108fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8108fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108fe2:	607b      	str	r3, [r7, #4]
 8108fe4:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8108fe6:	2001      	movs	r0, #1
 8108fe8:	f001 fc24 	bl	810a834 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8108fec:	f001 fcbc 	bl	810a968 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8108ff0:	2201      	movs	r2, #1
 8108ff2:	2102      	movs	r1, #2
 8108ff4:	2000      	movs	r0, #0
 8108ff6:	f001 fc3d 	bl	810a874 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8108ffa:	4b1b      	ldr	r3, [pc, #108]	; (8109068 <main+0xc8>)
 8108ffc:	681b      	ldr	r3, [r3, #0]
 8108ffe:	091b      	lsrs	r3, r3, #4
 8109000:	f003 030f 	and.w	r3, r3, #15
 8109004:	2b07      	cmp	r3, #7
 8109006:	d108      	bne.n	810901a <main+0x7a>
 8109008:	4b18      	ldr	r3, [pc, #96]	; (810906c <main+0xcc>)
 810900a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810900e:	4a17      	ldr	r2, [pc, #92]	; (810906c <main+0xcc>)
 8109010:	f043 0301 	orr.w	r3, r3, #1
 8109014:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8109018:	e007      	b.n	810902a <main+0x8a>
 810901a:	4b14      	ldr	r3, [pc, #80]	; (810906c <main+0xcc>)
 810901c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8109020:	4a12      	ldr	r2, [pc, #72]	; (810906c <main+0xcc>)
 8109022:	f043 0301 	orr.w	r3, r3, #1
 8109026:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  __HAL_RCC_HSEM_CLK_ENABLE();
 810902a:	4b0e      	ldr	r3, [pc, #56]	; (8109064 <main+0xc4>)
 810902c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8109030:	4a0c      	ldr	r2, [pc, #48]	; (8109064 <main+0xc4>)
 8109032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8109036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810903a:	4b0a      	ldr	r3, [pc, #40]	; (8109064 <main+0xc4>)
 810903c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8109040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109044:	603b      	str	r3, [r7, #0]
 8109046:	683b      	ldr	r3, [r7, #0]
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8109048:	f000 fbae 	bl	81097a8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810904c:	f000 f82a 	bl	81090a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8109050:	f000 f80e 	bl	8109070 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
	cosmosApi_osInit_init();
 8109054:	200f      	movs	r0, #15
 8109056:	f7fa faaf 	bl	81035b8 <sysCalls_bitWidthType_ret_void>
	cosmosApi_os_start();
 810905a:	2010      	movs	r0, #16
 810905c:	f7fa faac 	bl	81035b8 <sysCalls_bitWidthType_ret_void>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8109060:	e7fe      	b.n	8109060 <main+0xc0>
 8109062:	bf00      	nop
 8109064:	58024400 	.word	0x58024400
 8109068:	e000ed00 	.word	0xe000ed00
 810906c:	58026400 	.word	0x58026400

08109070 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8109070:	b480      	push	{r7}
 8109072:	b083      	sub	sp, #12
 8109074:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8109076:	4b0a      	ldr	r3, [pc, #40]	; (81090a0 <MX_DMA_Init+0x30>)
 8109078:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810907c:	4a08      	ldr	r2, [pc, #32]	; (81090a0 <MX_DMA_Init+0x30>)
 810907e:	f043 0301 	orr.w	r3, r3, #1
 8109082:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8109086:	4b06      	ldr	r3, [pc, #24]	; (81090a0 <MX_DMA_Init+0x30>)
 8109088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810908c:	f003 0301 	and.w	r3, r3, #1
 8109090:	607b      	str	r3, [r7, #4]
 8109092:	687b      	ldr	r3, [r7, #4]

}
 8109094:	bf00      	nop
 8109096:	370c      	adds	r7, #12
 8109098:	46bd      	mov	sp, r7
 810909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810909e:	4770      	bx	lr
 81090a0:	58024400 	.word	0x58024400

081090a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81090a4:	b580      	push	{r7, lr}
 81090a6:	b088      	sub	sp, #32
 81090a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81090aa:	f107 030c 	add.w	r3, r7, #12
 81090ae:	2200      	movs	r2, #0
 81090b0:	601a      	str	r2, [r3, #0]
 81090b2:	605a      	str	r2, [r3, #4]
 81090b4:	609a      	str	r2, [r3, #8]
 81090b6:	60da      	str	r2, [r3, #12]
 81090b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81090ba:	4b24      	ldr	r3, [pc, #144]	; (810914c <MX_GPIO_Init+0xa8>)
 81090bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81090c0:	4a22      	ldr	r2, [pc, #136]	; (810914c <MX_GPIO_Init+0xa8>)
 81090c2:	f043 0301 	orr.w	r3, r3, #1
 81090c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81090ca:	4b20      	ldr	r3, [pc, #128]	; (810914c <MX_GPIO_Init+0xa8>)
 81090cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81090d0:	f003 0301 	and.w	r3, r3, #1
 81090d4:	60bb      	str	r3, [r7, #8]
 81090d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81090d8:	4b1c      	ldr	r3, [pc, #112]	; (810914c <MX_GPIO_Init+0xa8>)
 81090da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81090de:	4a1b      	ldr	r2, [pc, #108]	; (810914c <MX_GPIO_Init+0xa8>)
 81090e0:	f043 0302 	orr.w	r3, r3, #2
 81090e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81090e8:	4b18      	ldr	r3, [pc, #96]	; (810914c <MX_GPIO_Init+0xa8>)
 81090ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81090ee:	f003 0302 	and.w	r3, r3, #2
 81090f2:	607b      	str	r3, [r7, #4]
 81090f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81090f6:	2200      	movs	r2, #0
 81090f8:	2110      	movs	r1, #16
 81090fa:	4815      	ldr	r0, [pc, #84]	; (8109150 <MX_GPIO_Init+0xac>)
 81090fc:	f001 fafc 	bl	810a6f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8109100:	2200      	movs	r2, #0
 8109102:	2101      	movs	r1, #1
 8109104:	4813      	ldr	r0, [pc, #76]	; (8109154 <MX_GPIO_Init+0xb0>)
 8109106:	f001 faf7 	bl	810a6f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 810910a:	2310      	movs	r3, #16
 810910c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810910e:	2301      	movs	r3, #1
 8109110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8109112:	2300      	movs	r3, #0
 8109114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8109116:	2303      	movs	r3, #3
 8109118:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810911a:	f107 030c 	add.w	r3, r7, #12
 810911e:	4619      	mov	r1, r3
 8109120:	480b      	ldr	r0, [pc, #44]	; (8109150 <MX_GPIO_Init+0xac>)
 8109122:	f001 f939 	bl	810a398 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8109126:	2301      	movs	r3, #1
 8109128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810912a:	2301      	movs	r3, #1
 810912c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810912e:	2300      	movs	r3, #0
 8109130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8109132:	2303      	movs	r3, #3
 8109134:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8109136:	f107 030c 	add.w	r3, r7, #12
 810913a:	4619      	mov	r1, r3
 810913c:	4805      	ldr	r0, [pc, #20]	; (8109154 <MX_GPIO_Init+0xb0>)
 810913e:	f001 f92b 	bl	810a398 <HAL_GPIO_Init>

}
 8109142:	bf00      	nop
 8109144:	3720      	adds	r7, #32
 8109146:	46bd      	mov	sp, r7
 8109148:	bd80      	pop	{r7, pc}
 810914a:	bf00      	nop
 810914c:	58024400 	.word	0x58024400
 8109150:	58020000 	.word	0x58020000
 8109154:	58020400 	.word	0x58020400

08109158 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8109158:	b580      	push	{r7, lr}
 810915a:	b082      	sub	sp, #8
 810915c:	af00      	add	r7, sp, #0
 810915e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8109160:	687b      	ldr	r3, [r7, #4]
 8109162:	681b      	ldr	r3, [r3, #0]
 8109164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109168:	d101      	bne.n	810916e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810916a:	f000 fb7b 	bl	8109864 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810916e:	bf00      	nop
 8109170:	3708      	adds	r7, #8
 8109172:	46bd      	mov	sp, r7
 8109174:	bd80      	pop	{r7, pc}
	...

08109178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8109178:	b480      	push	{r7}
 810917a:	b083      	sub	sp, #12
 810917c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810917e:	4b0a      	ldr	r3, [pc, #40]	; (81091a8 <HAL_MspInit+0x30>)
 8109180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8109184:	4a08      	ldr	r2, [pc, #32]	; (81091a8 <HAL_MspInit+0x30>)
 8109186:	f043 0302 	orr.w	r3, r3, #2
 810918a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810918e:	4b06      	ldr	r3, [pc, #24]	; (81091a8 <HAL_MspInit+0x30>)
 8109190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8109194:	f003 0302 	and.w	r3, r3, #2
 8109198:	607b      	str	r3, [r7, #4]
 810919a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810919c:	bf00      	nop
 810919e:	370c      	adds	r7, #12
 81091a0:	46bd      	mov	sp, r7
 81091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091a6:	4770      	bx	lr
 81091a8:	58024400 	.word	0x58024400

081091ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81091ac:	b580      	push	{r7, lr}
 81091ae:	b090      	sub	sp, #64	; 0x40
 81091b0:	af00      	add	r7, sp, #0
 81091b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	2b0f      	cmp	r3, #15
 81091b8:	d827      	bhi.n	810920a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 81091ba:	2200      	movs	r2, #0
 81091bc:	6879      	ldr	r1, [r7, #4]
 81091be:	201c      	movs	r0, #28
 81091c0:	f000 fc1c 	bl	81099fc <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81091c4:	201c      	movs	r0, #28
 81091c6:	f000 fc33 	bl	8109a30 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 81091ca:	4a29      	ldr	r2, [pc, #164]	; (8109270 <HAL_InitTick+0xc4>)
 81091cc:	687b      	ldr	r3, [r7, #4]
 81091ce:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 81091d0:	4b28      	ldr	r3, [pc, #160]	; (8109274 <HAL_InitTick+0xc8>)
 81091d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81091d6:	4a27      	ldr	r2, [pc, #156]	; (8109274 <HAL_InitTick+0xc8>)
 81091d8:	f043 0301 	orr.w	r3, r3, #1
 81091dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81091e0:	4b24      	ldr	r3, [pc, #144]	; (8109274 <HAL_InitTick+0xc8>)
 81091e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81091e6:	f003 0301 	and.w	r3, r3, #1
 81091ea:	60fb      	str	r3, [r7, #12]
 81091ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81091ee:	f107 0210 	add.w	r2, r7, #16
 81091f2:	f107 0314 	add.w	r3, r7, #20
 81091f6:	4611      	mov	r1, r2
 81091f8:	4618      	mov	r0, r3
 81091fa:	f001 fd85 	bl	810ad08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81091fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109200:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8109202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109204:	2b00      	cmp	r3, #0
 8109206:	d106      	bne.n	8109216 <HAL_InitTick+0x6a>
 8109208:	e001      	b.n	810920e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810920a:	2301      	movs	r3, #1
 810920c:	e02c      	b.n	8109268 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810920e:	f001 fd65 	bl	810acdc <HAL_RCC_GetPCLK1Freq>
 8109212:	63f8      	str	r0, [r7, #60]	; 0x3c
 8109214:	e004      	b.n	8109220 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8109216:	f001 fd61 	bl	810acdc <HAL_RCC_GetPCLK1Freq>
 810921a:	4603      	mov	r3, r0
 810921c:	005b      	lsls	r3, r3, #1
 810921e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8109220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109222:	4a15      	ldr	r2, [pc, #84]	; (8109278 <HAL_InitTick+0xcc>)
 8109224:	fba2 2303 	umull	r2, r3, r2, r3
 8109228:	0c9b      	lsrs	r3, r3, #18
 810922a:	3b01      	subs	r3, #1
 810922c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 810922e:	4b13      	ldr	r3, [pc, #76]	; (810927c <HAL_InitTick+0xd0>)
 8109230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8109234:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8109236:	4b11      	ldr	r3, [pc, #68]	; (810927c <HAL_InitTick+0xd0>)
 8109238:	f240 32e7 	movw	r2, #999	; 0x3e7
 810923c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 810923e:	4a0f      	ldr	r2, [pc, #60]	; (810927c <HAL_InitTick+0xd0>)
 8109240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109242:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8109244:	4b0d      	ldr	r3, [pc, #52]	; (810927c <HAL_InitTick+0xd0>)
 8109246:	2200      	movs	r2, #0
 8109248:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810924a:	4b0c      	ldr	r3, [pc, #48]	; (810927c <HAL_InitTick+0xd0>)
 810924c:	2200      	movs	r2, #0
 810924e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8109250:	480a      	ldr	r0, [pc, #40]	; (810927c <HAL_InitTick+0xd0>)
 8109252:	f001 fd9b 	bl	810ad8c <HAL_TIM_Base_Init>
 8109256:	4603      	mov	r3, r0
 8109258:	2b00      	cmp	r3, #0
 810925a:	d104      	bne.n	8109266 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 810925c:	4807      	ldr	r0, [pc, #28]	; (810927c <HAL_InitTick+0xd0>)
 810925e:	f001 fdf7 	bl	810ae50 <HAL_TIM_Base_Start_IT>
 8109262:	4603      	mov	r3, r0
 8109264:	e000      	b.n	8109268 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8109266:	2301      	movs	r3, #1
}
 8109268:	4618      	mov	r0, r3
 810926a:	3740      	adds	r7, #64	; 0x40
 810926c:	46bd      	mov	sp, r7
 810926e:	bd80      	pop	{r7, pc}
 8109270:	30040000 	.word	0x30040000
 8109274:	58024400 	.word	0x58024400
 8109278:	431bde83 	.word	0x431bde83
 810927c:	300400a4 	.word	0x300400a4

08109280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8109280:	b480      	push	{r7}
 8109282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8109284:	e7fe      	b.n	8109284 <NMI_Handler+0x4>

08109286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8109286:	b480      	push	{r7}
 8109288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810928a:	e7fe      	b.n	810928a <HardFault_Handler+0x4>

0810928c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810928c:	b480      	push	{r7}
 810928e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8109290:	e7fe      	b.n	8109290 <MemManage_Handler+0x4>

08109292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8109292:	b480      	push	{r7}
 8109294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8109296:	e7fe      	b.n	8109296 <BusFault_Handler+0x4>

08109298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8109298:	b480      	push	{r7}
 810929a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810929c:	e7fe      	b.n	810929c <UsageFault_Handler+0x4>

0810929e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810929e:	b480      	push	{r7}
 81092a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81092a2:	bf00      	nop
 81092a4:	46bd      	mov	sp, r7
 81092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092aa:	4770      	bx	lr

081092ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81092ac:	b580      	push	{r7, lr}
 81092ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81092b0:	4802      	ldr	r0, [pc, #8]	; (81092bc <TIM2_IRQHandler+0x10>)
 81092b2:	f001 fe03 	bl	810aebc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81092b6:	bf00      	nop
 81092b8:	bd80      	pop	{r7, pc}
 81092ba:	bf00      	nop
 81092bc:	300400a4 	.word	0x300400a4

081092c0 <osBoot_boot>:
{
 81092c0:	b580      	push	{r7, lr}
 81092c2:	b094      	sub	sp, #80	; 0x50
 81092c4:	af00      	add	r7, sp, #0
	coreId = CILcore_getCoreId();
 81092c6:	f7fa faf1 	bl	81038ac <CILcore_getCoreId>
 81092ca:	6478      	str	r0, [r7, #68]	; 0x44
	clearProgramSections = (CosmOS_ProgramSectionConfigurationType *)clearSections[coreId].programSections;
 81092cc:	4a48      	ldr	r2, [pc, #288]	; (81093f0 <osBoot_boot+0x130>)
 81092ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81092d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81092d4:	643b      	str	r3, [r7, #64]	; 0x40
	clearSectionsNumber = clearSections[coreId].programSectionsNumber;
 81092d6:	4a46      	ldr	r2, [pc, #280]	; (81093f0 <osBoot_boot+0x130>)
 81092d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81092da:	00db      	lsls	r3, r3, #3
 81092dc:	4413      	add	r3, r2
 81092de:	685b      	ldr	r3, [r3, #4]
 81092e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (BitWidthType i=0; i < clearSectionsNumber; i++)
 81092e2:	2300      	movs	r3, #0
 81092e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 81092e6:	e02c      	b.n	8109342 <osBoot_boot+0x82>
		osBoot_clearSection(clearProgramSections[i].startAddress,clearProgramSections[i].endAddress);
 81092e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 81092ea:	4613      	mov	r3, r2
 81092ec:	005b      	lsls	r3, r3, #1
 81092ee:	4413      	add	r3, r2
 81092f0:	009b      	lsls	r3, r3, #2
 81092f2:	461a      	mov	r2, r3
 81092f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81092f6:	4413      	add	r3, r2
 81092f8:	6819      	ldr	r1, [r3, #0]
 81092fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 81092fc:	4613      	mov	r3, r2
 81092fe:	005b      	lsls	r3, r3, #1
 8109300:	4413      	add	r3, r2
 8109302:	009b      	lsls	r3, r3, #2
 8109304:	461a      	mov	r2, r3
 8109306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8109308:	4413      	add	r3, r2
 810930a:	685b      	ldr	r3, [r3, #4]
 810930c:	6339      	str	r1, [r7, #48]	; 0x30
 810930e:	62fb      	str	r3, [r7, #44]	; 0x2c
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8109310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8109312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109314:	1ad3      	subs	r3, r2, r3
 8109316:	62bb      	str	r3, [r7, #40]	; 0x28
	unsigned char *pDst = sectionStart;
 8109318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810931a:	627b      	str	r3, [r7, #36]	; 0x24
	for ( BitWidthType i = 0; i < (size * sizeof(unsigned char)); i++ )
 810931c:	2300      	movs	r3, #0
 810931e:	623b      	str	r3, [r7, #32]
 8109320:	e007      	b.n	8109332 <osBoot_boot+0x72>
		*pDst++=0;
 8109322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109324:	1c5a      	adds	r2, r3, #1
 8109326:	627a      	str	r2, [r7, #36]	; 0x24
 8109328:	2200      	movs	r2, #0
 810932a:	701a      	strb	r2, [r3, #0]
	for ( BitWidthType i = 0; i < (size * sizeof(unsigned char)); i++ )
 810932c:	6a3b      	ldr	r3, [r7, #32]
 810932e:	3301      	adds	r3, #1
 8109330:	623b      	str	r3, [r7, #32]
 8109332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8109334:	6a3b      	ldr	r3, [r7, #32]
 8109336:	429a      	cmp	r2, r3
 8109338:	d8f3      	bhi.n	8109322 <osBoot_boot+0x62>
}
 810933a:	bf00      	nop
	for (BitWidthType i=0; i < clearSectionsNumber; i++)
 810933c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810933e:	3301      	adds	r3, #1
 8109340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8109342:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8109344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109346:	429a      	cmp	r2, r3
 8109348:	d3ce      	bcc.n	81092e8 <osBoot_boot+0x28>
	bootProgramSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 810934a:	4a2a      	ldr	r2, [pc, #168]	; (81093f4 <osBoot_boot+0x134>)
 810934c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810934e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8109352:	63bb      	str	r3, [r7, #56]	; 0x38
	bootSectionsNumber = bootSections[coreId].programSectionsNumber;
 8109354:	4a27      	ldr	r2, [pc, #156]	; (81093f4 <osBoot_boot+0x134>)
 8109356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8109358:	00db      	lsls	r3, r3, #3
 810935a:	4413      	add	r3, r2
 810935c:	685b      	ldr	r3, [r3, #4]
 810935e:	637b      	str	r3, [r7, #52]	; 0x34
	for (BitWidthType i=0; i < bootSectionsNumber; i++)
 8109360:	2300      	movs	r3, #0
 8109362:	64bb      	str	r3, [r7, #72]	; 0x48
 8109364:	e03b      	b.n	81093de <osBoot_boot+0x11e>
		osBoot_bootSection(bootProgramSections[i].startAddress,bootProgramSections[i].endAddress,bootProgramSections[i].flashAddress);
 8109366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8109368:	4613      	mov	r3, r2
 810936a:	005b      	lsls	r3, r3, #1
 810936c:	4413      	add	r3, r2
 810936e:	009b      	lsls	r3, r3, #2
 8109370:	461a      	mov	r2, r3
 8109372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109374:	4413      	add	r3, r2
 8109376:	6818      	ldr	r0, [r3, #0]
 8109378:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810937a:	4613      	mov	r3, r2
 810937c:	005b      	lsls	r3, r3, #1
 810937e:	4413      	add	r3, r2
 8109380:	009b      	lsls	r3, r3, #2
 8109382:	461a      	mov	r2, r3
 8109384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109386:	4413      	add	r3, r2
 8109388:	6859      	ldr	r1, [r3, #4]
 810938a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810938c:	4613      	mov	r3, r2
 810938e:	005b      	lsls	r3, r3, #1
 8109390:	4413      	add	r3, r2
 8109392:	009b      	lsls	r3, r3, #2
 8109394:	461a      	mov	r2, r3
 8109396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109398:	4413      	add	r3, r2
 810939a:	689b      	ldr	r3, [r3, #8]
 810939c:	61f8      	str	r0, [r7, #28]
 810939e:	61b9      	str	r1, [r7, #24]
 81093a0:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 81093a2:	69ba      	ldr	r2, [r7, #24]
 81093a4:	69fb      	ldr	r3, [r7, #28]
 81093a6:	1ad3      	subs	r3, r2, r3
 81093a8:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 81093aa:	69fb      	ldr	r3, [r7, #28]
 81093ac:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 81093ae:	697b      	ldr	r3, [r7, #20]
 81093b0:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(unsigned char)); i++ )
 81093b2:	2300      	movs	r3, #0
 81093b4:	607b      	str	r3, [r7, #4]
 81093b6:	e00a      	b.n	81093ce <osBoot_boot+0x10e>
		*pDst++=*pSrc++;
 81093b8:	68ba      	ldr	r2, [r7, #8]
 81093ba:	1c53      	adds	r3, r2, #1
 81093bc:	60bb      	str	r3, [r7, #8]
 81093be:	68fb      	ldr	r3, [r7, #12]
 81093c0:	1c59      	adds	r1, r3, #1
 81093c2:	60f9      	str	r1, [r7, #12]
 81093c4:	7812      	ldrb	r2, [r2, #0]
 81093c6:	701a      	strb	r2, [r3, #0]
	for ( BitWidthType i = 0; i < (size * sizeof(unsigned char)); i++ )
 81093c8:	687b      	ldr	r3, [r7, #4]
 81093ca:	3301      	adds	r3, #1
 81093cc:	607b      	str	r3, [r7, #4]
 81093ce:	693a      	ldr	r2, [r7, #16]
 81093d0:	687b      	ldr	r3, [r7, #4]
 81093d2:	429a      	cmp	r2, r3
 81093d4:	d8f0      	bhi.n	81093b8 <osBoot_boot+0xf8>
}
 81093d6:	bf00      	nop
	for (BitWidthType i=0; i < bootSectionsNumber; i++)
 81093d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81093da:	3301      	adds	r3, #1
 81093dc:	64bb      	str	r3, [r7, #72]	; 0x48
 81093de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81093e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81093e2:	429a      	cmp	r2, r3
 81093e4:	d3bf      	bcc.n	8109366 <osBoot_boot+0xa6>
};
 81093e6:	bf00      	nop
 81093e8:	bf00      	nop
 81093ea:	3750      	adds	r7, #80	; 0x50
 81093ec:	46bd      	mov	sp, r7
 81093ee:	bd80      	pop	{r7, pc}
 81093f0:	0810c1c8 	.word	0x0810c1c8
 81093f4:	0810c1d8 	.word	0x0810c1d8

081093f8 <malloc_varAlloc>:
  *
  * @return CosmOS_MallocVariableType *
********************************************************************************/
static CosmOS_MallocVariableType * malloc_varAlloc( AddressType nextAvailableAddress, AddressType priorMallocAddress,\
													AddressType nextMallocAddress, BitWidthType size )
{
 81093f8:	b480      	push	{r7}
 81093fa:	b087      	sub	sp, #28
 81093fc:	af00      	add	r7, sp, #0
 81093fe:	60f8      	str	r0, [r7, #12]
 8109400:	60b9      	str	r1, [r7, #8]
 8109402:	607a      	str	r2, [r7, #4]
 8109404:	603b      	str	r3, [r7, #0]
	CosmOS_MallocVariableType * newMallocVar = (CosmOS_MallocVariableType *)nextAvailableAddress;
 8109406:	68fb      	ldr	r3, [r7, #12]
 8109408:	617b      	str	r3, [r7, #20]

	newMallocVar->prior = (CosmOS_MallocVariableType *)priorMallocAddress;
 810940a:	68ba      	ldr	r2, [r7, #8]
 810940c:	697b      	ldr	r3, [r7, #20]
 810940e:	601a      	str	r2, [r3, #0]
	newMallocVar->next = (CosmOS_MallocVariableType *)nextMallocAddress;
 8109410:	687a      	ldr	r2, [r7, #4]
 8109412:	697b      	ldr	r3, [r7, #20]
 8109414:	605a      	str	r2, [r3, #4]
	newMallocVar->size = (ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType)) + \
							(AddressType)ALIGN(size,sizeof(AddressType)));
 8109416:	683b      	ldr	r3, [r7, #0]
 8109418:	3303      	adds	r3, #3
 810941a:	f023 0303 	bic.w	r3, r3, #3
	newMallocVar->size = (ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType)) + \
 810941e:	f103 020c 	add.w	r2, r3, #12
 8109422:	697b      	ldr	r3, [r7, #20]
 8109424:	609a      	str	r2, [r3, #8]

	return newMallocVar;
 8109426:	697b      	ldr	r3, [r7, #20]
}
 8109428:	4618      	mov	r0, r3
 810942a:	371c      	adds	r7, #28
 810942c:	46bd      	mov	sp, r7
 810942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109432:	4770      	bx	lr

08109434 <malloc_internal>:
  * @param[in]  size_t size
  *
  * @return void *
********************************************************************************/
void *malloc_internal(size_t size)
{
 8109434:	b580      	push	{r7, lr}
 8109436:	b092      	sub	sp, #72	; 0x48
 8109438:	af00      	add	r7, sp, #0
 810943a:	6078      	str	r0, [r7, #4]
	CosmOS_ProgramVariableType *programVar;
	CosmOS_MallocVariableType *currentMallocVar,
								*newMallocVar;


	coreVar = core_getCoreVar();
 810943c:	f7f8 fe27 	bl	810208e <core_getCoreVar>
 8109440:	63b8      	str	r0, [r7, #56]	; 0x38
	returnAddress = (AddressType)NULL;
 8109442:	2300      	movs	r3, #0
 8109444:	647b      	str	r3, [r7, #68]	; 0x44

	if ( coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 8109446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109448:	685b      	ldr	r3, [r3, #4]
 810944a:	681b      	ldr	r3, [r3, #0]
 810944c:	685b      	ldr	r3, [r3, #4]
 810944e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109452:	f040 808d 	bne.w	8109570 <malloc_internal+0x13c>
 8109456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109458:	613b      	str	r3, [r7, #16]
    return (core->programInExecution);
 810945a:	693b      	ldr	r3, [r7, #16]
 810945c:	689b      	ldr	r3, [r3, #8]
	{

		programVar = core_getCoreProgramInExecution(coreVar);
 810945e:	637b      	str	r3, [r7, #52]	; 0x34
 8109460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109462:	617b      	str	r3, [r7, #20]
    return (program->cfg->programHeapLowAddress);
 8109464:	697b      	ldr	r3, [r7, #20]
 8109466:	681b      	ldr	r3, [r3, #0]
 8109468:	69db      	ldr	r3, [r3, #28]

		heapLowAddress = program_getProgramHeapLowAddress(programVar);
 810946a:	633b      	str	r3, [r7, #48]	; 0x30
 810946c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810946e:	61bb      	str	r3, [r7, #24]
    return (program->cfg->programHeapHighAddress);
 8109470:	69bb      	ldr	r3, [r7, #24]
 8109472:	681b      	ldr	r3, [r3, #0]
 8109474:	6a1b      	ldr	r3, [r3, #32]
		heapHighAddress = program_getProgramHeapHighAddress(programVar);
 8109476:	62fb      	str	r3, [r7, #44]	; 0x2c

		allocated = False;
 8109478:	2300      	movs	r3, #0
 810947a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		currentMallocVar = (CosmOS_MallocVariableType *)heapLowAddress;
 810947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109480:	63fb      	str	r3, [r7, #60]	; 0x3c

		mutexState = mutex_getMutex(programVar->cfg->heapMutex);
 8109482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109484:	681b      	ldr	r3, [r3, #0]
 8109486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109488:	4618      	mov	r0, r3
 810948a:	f7f9 f839 	bl	8102500 <mutex_getMutex>
 810948e:	62b8      	str	r0, [r7, #40]	; 0x28

		//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
		cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED);
 8109490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109492:	2b02      	cmp	r3, #2
 8109494:	bf0c      	ite	eq
 8109496:	2301      	moveq	r3, #1
 8109498:	2300      	movne	r3, #0
 810949a:	b2db      	uxtb	r3, r3
 810949c:	61fb      	str	r3, [r7, #28]
    if ( IS_NOT( result ) )
 810949e:	69fb      	ldr	r3, [r7, #28]
 81094a0:	2b00      	cmp	r3, #0
 81094a2:	d101      	bne.n	81094a8 <malloc_internal+0x74>
        os_kernelPanic();
 81094a4:	f7f9 f97e 	bl	81027a4 <os_kernelPanic>
}
 81094a8:	bf00      	nop

		do
		{
			if (currentMallocVar->next IS_NOT_EQUAL_TO NULL)
 81094aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81094ac:	685b      	ldr	r3, [r3, #4]
 81094ae:	2b00      	cmp	r3, #0
 81094b0:	d027      	beq.n	8109502 <malloc_internal+0xce>
			{
				nextAvailableAddress = (AddressType)currentMallocVar + (AddressType)currentMallocVar->size;
 81094b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81094b4:	689a      	ldr	r2, [r3, #8]
 81094b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81094b8:	4413      	add	r3, r2
 81094ba:	627b      	str	r3, [r7, #36]	; 0x24
				if (size < ((AddressType)currentMallocVar->next - nextAvailableAddress))
 81094bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81094be:	685b      	ldr	r3, [r3, #4]
 81094c0:	461a      	mov	r2, r3
 81094c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81094c4:	1ad3      	subs	r3, r2, r3
 81094c6:	687a      	ldr	r2, [r7, #4]
 81094c8:	429a      	cmp	r2, r3
 81094ca:	d216      	bcs.n	81094fa <malloc_internal+0xc6>
				{
					newMallocVar = malloc_varAlloc(nextAvailableAddress,
 81094cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
													(AddressType)currentMallocVar,
													(AddressType)currentMallocVar->next,
 81094ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81094d0:	685b      	ldr	r3, [r3, #4]
					newMallocVar = malloc_varAlloc(nextAvailableAddress,
 81094d2:	461a      	mov	r2, r3
 81094d4:	687b      	ldr	r3, [r7, #4]
 81094d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81094d8:	f7ff ff8e 	bl	81093f8 <malloc_varAlloc>
 81094dc:	6238      	str	r0, [r7, #32]
													size);

					((CosmOS_MallocVariableType *)currentMallocVar->next)->prior = newMallocVar;
 81094de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81094e0:	685b      	ldr	r3, [r3, #4]
 81094e2:	6a3a      	ldr	r2, [r7, #32]
 81094e4:	601a      	str	r2, [r3, #0]
					currentMallocVar->next = newMallocVar;
 81094e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81094e8:	6a3a      	ldr	r2, [r7, #32]
 81094ea:	605a      	str	r2, [r3, #4]

					returnAddress = (AddressType)newMallocVar +
 81094ec:	6a3b      	ldr	r3, [r7, #32]
 81094ee:	330c      	adds	r3, #12
 81094f0:	647b      	str	r3, [r7, #68]	; 0x44
									(AddressType)ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType));
					allocated = True;
 81094f2:	2301      	movs	r3, #1
 81094f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81094f8:	e01e      	b.n	8109538 <malloc_internal+0x104>
				}
				else
				{
					currentMallocVar = currentMallocVar->next;
 81094fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81094fc:	685b      	ldr	r3, [r3, #4]
 81094fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8109500:	e01a      	b.n	8109538 <malloc_internal+0x104>
				}
			}
			else
			{
				nextAvailableAddress = (AddressType)currentMallocVar + (AddressType)currentMallocVar->size;
 8109502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109504:	689a      	ldr	r2, [r3, #8]
 8109506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109508:	4413      	add	r3, r2
 810950a:	627b      	str	r3, [r7, #36]	; 0x24
				if (size < (heapHighAddress - nextAvailableAddress))
 810950c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109510:	1ad3      	subs	r3, r2, r3
 8109512:	687a      	ldr	r2, [r7, #4]
 8109514:	429a      	cmp	r2, r3
 8109516:	d20f      	bcs.n	8109538 <malloc_internal+0x104>
				{
					newMallocVar = malloc_varAlloc(nextAvailableAddress,
 8109518:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810951a:	687b      	ldr	r3, [r7, #4]
 810951c:	2200      	movs	r2, #0
 810951e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8109520:	f7ff ff6a 	bl	81093f8 <malloc_varAlloc>
 8109524:	6238      	str	r0, [r7, #32]
													(AddressType)currentMallocVar,
													(AddressType)NULL,
													size);

					currentMallocVar->next = newMallocVar;
 8109526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109528:	6a3a      	ldr	r2, [r7, #32]
 810952a:	605a      	str	r2, [r3, #4]

					returnAddress = (AddressType)newMallocVar +
 810952c:	6a3b      	ldr	r3, [r7, #32]
 810952e:	330c      	adds	r3, #12
 8109530:	647b      	str	r3, [r7, #68]	; 0x44
									(AddressType)ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType));
					allocated = True;
 8109532:	2301      	movs	r3, #1
 8109534:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				}
			}
		} while (currentMallocVar->next AND IS_NOT(allocated));
 8109538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810953a:	685b      	ldr	r3, [r3, #4]
 810953c:	2b00      	cmp	r3, #0
 810953e:	d003      	beq.n	8109548 <malloc_internal+0x114>
 8109540:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8109544:	2b00      	cmp	r3, #0
 8109546:	d0b0      	beq.n	81094aa <malloc_internal+0x76>

		mutexState = mutex_releaseMutex(programVar->cfg->heapMutex);
 8109548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810954a:	681b      	ldr	r3, [r3, #0]
 810954c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810954e:	4618      	mov	r0, r3
 8109550:	f7f9 f8d9 	bl	8102706 <mutex_releaseMutex>
 8109554:	62b8      	str	r0, [r7, #40]	; 0x28

		//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
		cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__RELEASED);
 8109556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109558:	2b00      	cmp	r3, #0
 810955a:	bf0c      	ite	eq
 810955c:	2301      	moveq	r3, #1
 810955e:	2300      	movne	r3, #0
 8109560:	b2db      	uxtb	r3, r3
 8109562:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 8109564:	68fb      	ldr	r3, [r7, #12]
 8109566:	2b00      	cmp	r3, #0
 8109568:	d101      	bne.n	810956e <malloc_internal+0x13a>
        os_kernelPanic();
 810956a:	f7f9 f91b 	bl	81027a4 <os_kernelPanic>
}
 810956e:	bf00      	nop
	}

	return (void *)returnAddress;
 8109570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8109572:	4618      	mov	r0, r3
 8109574:	3748      	adds	r7, #72	; 0x48
 8109576:	46bd      	mov	sp, r7
 8109578:	bd80      	pop	{r7, pc}

0810957a <free_internal>:
  * @param[in]  void * ptr
  *
  * @return none
********************************************************************************/
void free_internal(void *ptr)
{
 810957a:	b580      	push	{r7, lr}
 810957c:	b08a      	sub	sp, #40	; 0x28
 810957e:	af00      	add	r7, sp, #0
 8109580:	6078      	str	r0, [r7, #4]

	CosmOS_CoreVariableType *coreVar;
	CosmOS_ProgramVariableType *programVar;

	CosmOS_MallocVariableType *mallocVarToFree =
	(CosmOS_MallocVariableType *)((AddressType)ptr - ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType)));
 8109582:	687b      	ldr	r3, [r7, #4]
 8109584:	3b0c      	subs	r3, #12
	CosmOS_MallocVariableType *mallocVarToFree =
 8109586:	627b      	str	r3, [r7, #36]	; 0x24


	coreVar = core_getCoreVar();
 8109588:	f7f8 fd81 	bl	810208e <core_getCoreVar>
 810958c:	6238      	str	r0, [r7, #32]
	if ( coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 810958e:	6a3b      	ldr	r3, [r7, #32]
 8109590:	685b      	ldr	r3, [r3, #4]
 8109592:	681b      	ldr	r3, [r3, #0]
 8109594:	685b      	ldr	r3, [r3, #4]
 8109596:	f1b3 3fff 	cmp.w	r3, #4294967295
 810959a:	d13e      	bne.n	810961a <free_internal+0xa0>
 810959c:	6a3b      	ldr	r3, [r7, #32]
 810959e:	613b      	str	r3, [r7, #16]
 81095a0:	693b      	ldr	r3, [r7, #16]
 81095a2:	689b      	ldr	r3, [r3, #8]
	{
		//TODO: check if the pointer is one of the allocated heap variables
		programVar = core_getCoreProgramInExecution(coreVar);
 81095a4:	61fb      	str	r3, [r7, #28]

		mutexState = mutex_getMutex(programVar->cfg->heapMutex);
 81095a6:	69fb      	ldr	r3, [r7, #28]
 81095a8:	681b      	ldr	r3, [r3, #0]
 81095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81095ac:	4618      	mov	r0, r3
 81095ae:	f7f8 ffa7 	bl	8102500 <mutex_getMutex>
 81095b2:	61b8      	str	r0, [r7, #24]

		//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
		cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED);
 81095b4:	69bb      	ldr	r3, [r7, #24]
 81095b6:	2b02      	cmp	r3, #2
 81095b8:	bf0c      	ite	eq
 81095ba:	2301      	moveq	r3, #1
 81095bc:	2300      	movne	r3, #0
 81095be:	b2db      	uxtb	r3, r3
 81095c0:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 81095c2:	697b      	ldr	r3, [r7, #20]
 81095c4:	2b00      	cmp	r3, #0
 81095c6:	d101      	bne.n	81095cc <free_internal+0x52>
        os_kernelPanic();
 81095c8:	f7f9 f8ec 	bl	81027a4 <os_kernelPanic>
}
 81095cc:	bf00      	nop

		if (mallocVarToFree->prior)
 81095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81095d0:	681b      	ldr	r3, [r3, #0]
 81095d2:	2b00      	cmp	r3, #0
 81095d4:	d004      	beq.n	81095e0 <free_internal+0x66>
		{
			((CosmOS_MallocVariableType *)mallocVarToFree->prior)->next =
 81095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81095d8:	681b      	ldr	r3, [r3, #0]
				mallocVarToFree->next ? mallocVarToFree->next : NULL;
 81095da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81095dc:	6852      	ldr	r2, [r2, #4]
			((CosmOS_MallocVariableType *)mallocVarToFree->prior)->next =
 81095de:	605a      	str	r2, [r3, #4]
		}

		if (mallocVarToFree->next)
 81095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81095e2:	685b      	ldr	r3, [r3, #4]
 81095e4:	2b00      	cmp	r3, #0
 81095e6:	d004      	beq.n	81095f2 <free_internal+0x78>
		{
			((CosmOS_MallocVariableType *)mallocVarToFree->next)->prior =
 81095e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81095ea:	685b      	ldr	r3, [r3, #4]
				mallocVarToFree->prior ? mallocVarToFree->prior : NULL;
 81095ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81095ee:	6812      	ldr	r2, [r2, #0]
			((CosmOS_MallocVariableType *)mallocVarToFree->next)->prior =
 81095f0:	601a      	str	r2, [r3, #0]
		}

		mutexState = mutex_releaseMutex(programVar->cfg->heapMutex);
 81095f2:	69fb      	ldr	r3, [r7, #28]
 81095f4:	681b      	ldr	r3, [r3, #0]
 81095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81095f8:	4618      	mov	r0, r3
 81095fa:	f7f9 f884 	bl	8102706 <mutex_releaseMutex>
 81095fe:	61b8      	str	r0, [r7, #24]

		//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
		cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__RELEASED);
 8109600:	69bb      	ldr	r3, [r7, #24]
 8109602:	2b00      	cmp	r3, #0
 8109604:	bf0c      	ite	eq
 8109606:	2301      	moveq	r3, #1
 8109608:	2300      	movne	r3, #0
 810960a:	b2db      	uxtb	r3, r3
 810960c:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 810960e:	68fb      	ldr	r3, [r7, #12]
 8109610:	2b00      	cmp	r3, #0
 8109612:	d101      	bne.n	8109618 <free_internal+0x9e>
        os_kernelPanic();
 8109614:	f7f9 f8c6 	bl	81027a4 <os_kernelPanic>
}
 8109618:	bf00      	nop
	}
}
 810961a:	bf00      	nop
 810961c:	3728      	adds	r7, #40	; 0x28
 810961e:	46bd      	mov	sp, r7
 8109620:	bd80      	pop	{r7, pc}
	...

08109624 <__NVIC_EnableIRQ>:
{
 8109624:	b480      	push	{r7}
 8109626:	b083      	sub	sp, #12
 8109628:	af00      	add	r7, sp, #0
 810962a:	4603      	mov	r3, r0
 810962c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810962e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8109632:	2b00      	cmp	r3, #0
 8109634:	db0b      	blt.n	810964e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8109636:	88fb      	ldrh	r3, [r7, #6]
 8109638:	f003 021f 	and.w	r2, r3, #31
 810963c:	4907      	ldr	r1, [pc, #28]	; (810965c <__NVIC_EnableIRQ+0x38>)
 810963e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8109642:	095b      	lsrs	r3, r3, #5
 8109644:	2001      	movs	r0, #1
 8109646:	fa00 f202 	lsl.w	r2, r0, r2
 810964a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 810964e:	bf00      	nop
 8109650:	370c      	adds	r7, #12
 8109652:	46bd      	mov	sp, r7
 8109654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109658:	4770      	bx	lr
 810965a:	bf00      	nop
 810965c:	e000e100 	.word	0xe000e100

08109660 <__NVIC_DisableIRQ>:
{
 8109660:	b480      	push	{r7}
 8109662:	b083      	sub	sp, #12
 8109664:	af00      	add	r7, sp, #0
 8109666:	4603      	mov	r3, r0
 8109668:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810966a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810966e:	2b00      	cmp	r3, #0
 8109670:	db12      	blt.n	8109698 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8109672:	88fb      	ldrh	r3, [r7, #6]
 8109674:	f003 021f 	and.w	r2, r3, #31
 8109678:	490a      	ldr	r1, [pc, #40]	; (81096a4 <__NVIC_DisableIRQ+0x44>)
 810967a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810967e:	095b      	lsrs	r3, r3, #5
 8109680:	2001      	movs	r0, #1
 8109682:	fa00 f202 	lsl.w	r2, r0, r2
 8109686:	3320      	adds	r3, #32
 8109688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810968c:	f3bf 8f4f 	dsb	sy
}
 8109690:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109692:	f3bf 8f6f 	isb	sy
}
 8109696:	bf00      	nop
}
 8109698:	bf00      	nop
 810969a:	370c      	adds	r7, #12
 810969c:	46bd      	mov	sp, r7
 810969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096a2:	4770      	bx	lr
 81096a4:	e000e100 	.word	0xe000e100

081096a8 <interrupt_enableInterrupts>:
  * @param[in] BitWidthType entityId
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_enableInterrupts(BitWidthType entityId)
{
 81096a8:	b480      	push	{r7}
 81096aa:	b083      	sub	sp, #12
 81096ac:	af00      	add	r7, sp, #0
 81096ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 81096b0:	b662      	cpsie	i
}
 81096b2:	bf00      	nop
}
 81096b4:	bf00      	nop
	CILinterrupt_enableInterrupts();

	__SUPRESS_UNUSED_VAR(entityId);
}
 81096b6:	bf00      	nop
 81096b8:	370c      	adds	r7, #12
 81096ba:	46bd      	mov	sp, r7
 81096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096c0:	4770      	bx	lr

081096c2 <interrupt_enableInterrupt>:
  * @param[in]  BitWidthType ISR
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_enableInterrupt(BitWidthType entityId,BitWidthType ISR)
{
 81096c2:	b580      	push	{r7, lr}
 81096c4:	b084      	sub	sp, #16
 81096c6:	af00      	add	r7, sp, #0
 81096c8:	6078      	str	r0, [r7, #4]
 81096ca:	6039      	str	r1, [r7, #0]
 81096cc:	683b      	ldr	r3, [r7, #0]
 81096ce:	60fb      	str	r3, [r7, #12]
		__NVIC_EnableIRQ(ISR);
 81096d0:	68fb      	ldr	r3, [r7, #12]
 81096d2:	b21b      	sxth	r3, r3
 81096d4:	4618      	mov	r0, r3
 81096d6:	f7ff ffa5 	bl	8109624 <__NVIC_EnableIRQ>
}
 81096da:	bf00      	nop
	CILinterrupt_enableInterrupt(ISR);

	__SUPRESS_UNUSED_VAR(entityId);
	__SUPRESS_UNUSED_VAR(ISR);
}
 81096dc:	bf00      	nop
 81096de:	3710      	adds	r7, #16
 81096e0:	46bd      	mov	sp, r7
 81096e2:	bd80      	pop	{r7, pc}

081096e4 <interrupt_disableInterrupts>:
  * @param[in]  BitWidthType entityId
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_disableInterrupts(BitWidthType entityId)
{
 81096e4:	b480      	push	{r7}
 81096e6:	b083      	sub	sp, #12
 81096e8:	af00      	add	r7, sp, #0
 81096ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 81096ec:	b672      	cpsid	i
}
 81096ee:	bf00      	nop
}
 81096f0:	bf00      	nop
	CILinterrupt_disableInterrupts();

	__SUPRESS_UNUSED_VAR(entityId);
}
 81096f2:	bf00      	nop
 81096f4:	370c      	adds	r7, #12
 81096f6:	46bd      	mov	sp, r7
 81096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096fc:	4770      	bx	lr

081096fe <interrupt_disableInterrupt>:
  * @param[in]  BitWidthType ISR
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_disableInterrupt(BitWidthType entityId,BitWidthType ISR)
{
 81096fe:	b580      	push	{r7, lr}
 8109700:	b084      	sub	sp, #16
 8109702:	af00      	add	r7, sp, #0
 8109704:	6078      	str	r0, [r7, #4]
 8109706:	6039      	str	r1, [r7, #0]
 8109708:	683b      	ldr	r3, [r7, #0]
 810970a:	60fb      	str	r3, [r7, #12]
		__NVIC_DisableIRQ(ISR);
 810970c:	68fb      	ldr	r3, [r7, #12]
 810970e:	b21b      	sxth	r3, r3
 8109710:	4618      	mov	r0, r3
 8109712:	f7ff ffa5 	bl	8109660 <__NVIC_DisableIRQ>
}
 8109716:	bf00      	nop
	CILinterrupt_disableInterrupt(ISR);

	__SUPRESS_UNUSED_VAR(entityId);
	__SUPRESS_UNUSED_VAR(ISR);
}
 8109718:	bf00      	nop
 810971a:	3710      	adds	r7, #16
 810971c:	46bd      	mov	sp, r7
 810971e:	bd80      	pop	{r7, pc}

08109720 <PendSV_Handler>:
  *
  * @return none
********************************************************************************/
__NAKED void PendSV_Handler(void)
{
	__asm volatile ("cpsid i" : : : "memory");
 8109720:	b672      	cpsid	i
    __asm volatile ("MRS R0,PSP");
 8109722:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("ISB");
 8109726:	f3bf 8f6f 	isb	sy

    __asm volatile ("TST R14, #16");
 810972a:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 810972e:	bf08      	it	eq
    __asm volatile ("VSTMDBEQ R0!,{S16-S31}"); /* If fp is true save floating point registers on stack */
 8109730:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    __asm volatile ("STMDB R0!,{R4-R8,R10,R11,R14}");
 8109734:	e920 4df0 	stmdb	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}

    __asm volatile ("BL scheduler_scheduleNextInstance");
 8109738:	f7f9 fa37 	bl	8102baa <scheduler_scheduleNextInstance>
    __asm volatile ("ISB");
 810973c:	f3bf 8f6f 	isb	sy

    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8109740:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
    __asm volatile ("TST R14, #16");
 8109744:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 8109748:	bf08      	it	eq
    __asm volatile ("VLDMIAEQ R0!,{S16-S31}"); /* If fp is true restore floating point registers on stack */
 810974a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    __asm volatile ("MSR PSP,R0");
 810974e:	f380 8809 	msr	PSP, r0
    __asm volatile ("ISB");
 8109752:	f3bf 8f6f 	isb	sy
	__asm volatile ("cpsie i" : : : "memory");
 8109756:	b662      	cpsie	i
    __asm volatile ("BX R14");
 8109758:	4770      	bx	lr
}
 810975a:	bf00      	nop

0810975c <SysTick_Handler>:
  * @param[in]  none
  *
  * @return none
********************************************************************************/
void SysTick_Handler( void )
{
 810975c:	b580      	push	{r7, lr}
 810975e:	b084      	sub	sp, #16
 8109760:	af00      	add	r7, sp, #0
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SchedulerVariableType * schedulerVar;


	coreVar = core_getCoreVar();
 8109762:	f7f8 fc94 	bl	810208e <core_getCoreVar>
 8109766:	60f8      	str	r0, [r7, #12]
 8109768:	68fb      	ldr	r3, [r7, #12]
 810976a:	607b      	str	r3, [r7, #4]
    return (core->schedulerVar);
 810976c:	687b      	ldr	r3, [r7, #4]
 810976e:	691b      	ldr	r3, [r3, #16]
	schedulerVar = core_getCoreSchedulerVar( coreVar );
 8109770:	60bb      	str	r3, [r7, #8]

	schedulerVar->rescheduleTriggerState = RESCHEDULE_TRIGGER_STATE_ENUM__TIMER;
 8109772:	68bb      	ldr	r3, [r7, #8]
 8109774:	f04f 32ff 	mov.w	r2, #4294967295
 8109778:	621a      	str	r2, [r3, #32]
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 810977a:	4b05      	ldr	r3, [pc, #20]	; (8109790 <SysTick_Handler+0x34>)
 810977c:	685b      	ldr	r3, [r3, #4]
 810977e:	4a04      	ldr	r2, [pc, #16]	; (8109790 <SysTick_Handler+0x34>)
 8109780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8109784:	6053      	str	r3, [r2, #4]
}
 8109786:	bf00      	nop

	CILinterrupt_contextSwitchRoutineTrigger();
}
 8109788:	bf00      	nop
 810978a:	3710      	adds	r7, #16
 810978c:	46bd      	mov	sp, r7
 810978e:	bd80      	pop	{r7, pc}
 8109790:	e000ed00 	.word	0xe000ed00

08109794 <SVC_Handler>:
  *
  * @return none
********************************************************************************/
__NAKED void SVC_Handler( void )
{
    __asm volatile ("TST LR, #4");
 8109794:	f01e 0f04 	tst.w	lr, #4
    __asm volatile ("ITE EQ");
 8109798:	bf0c      	ite	eq
    __asm volatile ("MRSEQ r0, MSP");
 810979a:	f3ef 8008 	mrseq	r0, MSP
    __asm volatile ("MRSNE r0, PSP");
 810979e:	f3ef 8009 	mrsne	r0, PSP
    __asm volatile ( "B CILsysCalls_dispatcher");
 81097a2:	f7fa bbfd 	b.w	8103fa0 <CILsysCalls_dispatcher>
}
 81097a6:	bf00      	nop

081097a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81097a8:	b580      	push	{r7, lr}
 81097aa:	b082      	sub	sp, #8
 81097ac:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81097ae:	4b28      	ldr	r3, [pc, #160]	; (8109850 <HAL_Init+0xa8>)
 81097b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81097b4:	4a26      	ldr	r2, [pc, #152]	; (8109850 <HAL_Init+0xa8>)
 81097b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 81097ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81097be:	4b24      	ldr	r3, [pc, #144]	; (8109850 <HAL_Init+0xa8>)
 81097c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81097c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 81097c8:	603b      	str	r3, [r7, #0]
 81097ca:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81097cc:	4b21      	ldr	r3, [pc, #132]	; (8109854 <HAL_Init+0xac>)
 81097ce:	681b      	ldr	r3, [r3, #0]
 81097d0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81097d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81097d8:	4a1e      	ldr	r2, [pc, #120]	; (8109854 <HAL_Init+0xac>)
 81097da:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81097de:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81097e0:	4b1c      	ldr	r3, [pc, #112]	; (8109854 <HAL_Init+0xac>)
 81097e2:	681b      	ldr	r3, [r3, #0]
 81097e4:	4a1b      	ldr	r2, [pc, #108]	; (8109854 <HAL_Init+0xac>)
 81097e6:	f043 0301 	orr.w	r3, r3, #1
 81097ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81097ec:	2003      	movs	r0, #3
 81097ee:	f000 f8fa 	bl	81099e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81097f2:	f001 f8c7 	bl	810a984 <HAL_RCC_GetSysClockFreq>
 81097f6:	4602      	mov	r2, r0
 81097f8:	4b15      	ldr	r3, [pc, #84]	; (8109850 <HAL_Init+0xa8>)
 81097fa:	699b      	ldr	r3, [r3, #24]
 81097fc:	0a1b      	lsrs	r3, r3, #8
 81097fe:	f003 030f 	and.w	r3, r3, #15
 8109802:	4915      	ldr	r1, [pc, #84]	; (8109858 <HAL_Init+0xb0>)
 8109804:	5ccb      	ldrb	r3, [r1, r3]
 8109806:	f003 031f 	and.w	r3, r3, #31
 810980a:	fa22 f303 	lsr.w	r3, r2, r3
 810980e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8109810:	4b0f      	ldr	r3, [pc, #60]	; (8109850 <HAL_Init+0xa8>)
 8109812:	699b      	ldr	r3, [r3, #24]
 8109814:	f003 030f 	and.w	r3, r3, #15
 8109818:	4a0f      	ldr	r2, [pc, #60]	; (8109858 <HAL_Init+0xb0>)
 810981a:	5cd3      	ldrb	r3, [r2, r3]
 810981c:	f003 031f 	and.w	r3, r3, #31
 8109820:	687a      	ldr	r2, [r7, #4]
 8109822:	fa22 f303 	lsr.w	r3, r2, r3
 8109826:	4a0d      	ldr	r2, [pc, #52]	; (810985c <HAL_Init+0xb4>)
 8109828:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810982a:	4b0c      	ldr	r3, [pc, #48]	; (810985c <HAL_Init+0xb4>)
 810982c:	681b      	ldr	r3, [r3, #0]
 810982e:	4a0c      	ldr	r2, [pc, #48]	; (8109860 <HAL_Init+0xb8>)
 8109830:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8109832:	2000      	movs	r0, #0
 8109834:	f7ff fcba 	bl	81091ac <HAL_InitTick>
 8109838:	4603      	mov	r3, r0
 810983a:	2b00      	cmp	r3, #0
 810983c:	d001      	beq.n	8109842 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810983e:	2301      	movs	r3, #1
 8109840:	e002      	b.n	8109848 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8109842:	f7ff fc99 	bl	8109178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8109846:	2300      	movs	r3, #0
}
 8109848:	4618      	mov	r0, r3
 810984a:	3708      	adds	r7, #8
 810984c:	46bd      	mov	sp, r7
 810984e:	bd80      	pop	{r7, pc}
 8109850:	58024400 	.word	0x58024400
 8109854:	40024400 	.word	0x40024400
 8109858:	0810c1e8 	.word	0x0810c1e8
 810985c:	3004000c 	.word	0x3004000c
 8109860:	30040008 	.word	0x30040008

08109864 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8109864:	b480      	push	{r7}
 8109866:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8109868:	4b06      	ldr	r3, [pc, #24]	; (8109884 <HAL_IncTick+0x20>)
 810986a:	781b      	ldrb	r3, [r3, #0]
 810986c:	461a      	mov	r2, r3
 810986e:	4b06      	ldr	r3, [pc, #24]	; (8109888 <HAL_IncTick+0x24>)
 8109870:	681b      	ldr	r3, [r3, #0]
 8109872:	4413      	add	r3, r2
 8109874:	4a04      	ldr	r2, [pc, #16]	; (8109888 <HAL_IncTick+0x24>)
 8109876:	6013      	str	r3, [r2, #0]
}
 8109878:	bf00      	nop
 810987a:	46bd      	mov	sp, r7
 810987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109880:	4770      	bx	lr
 8109882:	bf00      	nop
 8109884:	30040004 	.word	0x30040004
 8109888:	300400f0 	.word	0x300400f0

0810988c <__NVIC_SetPriorityGrouping>:
{
 810988c:	b480      	push	{r7}
 810988e:	b085      	sub	sp, #20
 8109890:	af00      	add	r7, sp, #0
 8109892:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8109894:	687b      	ldr	r3, [r7, #4]
 8109896:	f003 0307 	and.w	r3, r3, #7
 810989a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810989c:	4b0c      	ldr	r3, [pc, #48]	; (81098d0 <__NVIC_SetPriorityGrouping+0x44>)
 810989e:	68db      	ldr	r3, [r3, #12]
 81098a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81098a2:	68ba      	ldr	r2, [r7, #8]
 81098a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81098a8:	4013      	ands	r3, r2
 81098aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81098ac:	68fb      	ldr	r3, [r7, #12]
 81098ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81098b0:	68bb      	ldr	r3, [r7, #8]
 81098b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81098b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 81098b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81098bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81098be:	4a04      	ldr	r2, [pc, #16]	; (81098d0 <__NVIC_SetPriorityGrouping+0x44>)
 81098c0:	68bb      	ldr	r3, [r7, #8]
 81098c2:	60d3      	str	r3, [r2, #12]
}
 81098c4:	bf00      	nop
 81098c6:	3714      	adds	r7, #20
 81098c8:	46bd      	mov	sp, r7
 81098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098ce:	4770      	bx	lr
 81098d0:	e000ed00 	.word	0xe000ed00

081098d4 <__NVIC_GetPriorityGrouping>:
{
 81098d4:	b480      	push	{r7}
 81098d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81098d8:	4b04      	ldr	r3, [pc, #16]	; (81098ec <__NVIC_GetPriorityGrouping+0x18>)
 81098da:	68db      	ldr	r3, [r3, #12]
 81098dc:	0a1b      	lsrs	r3, r3, #8
 81098de:	f003 0307 	and.w	r3, r3, #7
}
 81098e2:	4618      	mov	r0, r3
 81098e4:	46bd      	mov	sp, r7
 81098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098ea:	4770      	bx	lr
 81098ec:	e000ed00 	.word	0xe000ed00

081098f0 <__NVIC_EnableIRQ>:
{
 81098f0:	b480      	push	{r7}
 81098f2:	b083      	sub	sp, #12
 81098f4:	af00      	add	r7, sp, #0
 81098f6:	4603      	mov	r3, r0
 81098f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81098fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81098fe:	2b00      	cmp	r3, #0
 8109900:	db0b      	blt.n	810991a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8109902:	88fb      	ldrh	r3, [r7, #6]
 8109904:	f003 021f 	and.w	r2, r3, #31
 8109908:	4907      	ldr	r1, [pc, #28]	; (8109928 <__NVIC_EnableIRQ+0x38>)
 810990a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810990e:	095b      	lsrs	r3, r3, #5
 8109910:	2001      	movs	r0, #1
 8109912:	fa00 f202 	lsl.w	r2, r0, r2
 8109916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 810991a:	bf00      	nop
 810991c:	370c      	adds	r7, #12
 810991e:	46bd      	mov	sp, r7
 8109920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109924:	4770      	bx	lr
 8109926:	bf00      	nop
 8109928:	e000e100 	.word	0xe000e100

0810992c <__NVIC_SetPriority>:
{
 810992c:	b480      	push	{r7}
 810992e:	b083      	sub	sp, #12
 8109930:	af00      	add	r7, sp, #0
 8109932:	4603      	mov	r3, r0
 8109934:	6039      	str	r1, [r7, #0]
 8109936:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8109938:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810993c:	2b00      	cmp	r3, #0
 810993e:	db0a      	blt.n	8109956 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8109940:	683b      	ldr	r3, [r7, #0]
 8109942:	b2da      	uxtb	r2, r3
 8109944:	490c      	ldr	r1, [pc, #48]	; (8109978 <__NVIC_SetPriority+0x4c>)
 8109946:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810994a:	0112      	lsls	r2, r2, #4
 810994c:	b2d2      	uxtb	r2, r2
 810994e:	440b      	add	r3, r1
 8109950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8109954:	e00a      	b.n	810996c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8109956:	683b      	ldr	r3, [r7, #0]
 8109958:	b2da      	uxtb	r2, r3
 810995a:	4908      	ldr	r1, [pc, #32]	; (810997c <__NVIC_SetPriority+0x50>)
 810995c:	88fb      	ldrh	r3, [r7, #6]
 810995e:	f003 030f 	and.w	r3, r3, #15
 8109962:	3b04      	subs	r3, #4
 8109964:	0112      	lsls	r2, r2, #4
 8109966:	b2d2      	uxtb	r2, r2
 8109968:	440b      	add	r3, r1
 810996a:	761a      	strb	r2, [r3, #24]
}
 810996c:	bf00      	nop
 810996e:	370c      	adds	r7, #12
 8109970:	46bd      	mov	sp, r7
 8109972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109976:	4770      	bx	lr
 8109978:	e000e100 	.word	0xe000e100
 810997c:	e000ed00 	.word	0xe000ed00

08109980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8109980:	b480      	push	{r7}
 8109982:	b089      	sub	sp, #36	; 0x24
 8109984:	af00      	add	r7, sp, #0
 8109986:	60f8      	str	r0, [r7, #12]
 8109988:	60b9      	str	r1, [r7, #8]
 810998a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810998c:	68fb      	ldr	r3, [r7, #12]
 810998e:	f003 0307 	and.w	r3, r3, #7
 8109992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8109994:	69fb      	ldr	r3, [r7, #28]
 8109996:	f1c3 0307 	rsb	r3, r3, #7
 810999a:	2b04      	cmp	r3, #4
 810999c:	bf28      	it	cs
 810999e:	2304      	movcs	r3, #4
 81099a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81099a2:	69fb      	ldr	r3, [r7, #28]
 81099a4:	3304      	adds	r3, #4
 81099a6:	2b06      	cmp	r3, #6
 81099a8:	d902      	bls.n	81099b0 <NVIC_EncodePriority+0x30>
 81099aa:	69fb      	ldr	r3, [r7, #28]
 81099ac:	3b03      	subs	r3, #3
 81099ae:	e000      	b.n	81099b2 <NVIC_EncodePriority+0x32>
 81099b0:	2300      	movs	r3, #0
 81099b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81099b4:	f04f 32ff 	mov.w	r2, #4294967295
 81099b8:	69bb      	ldr	r3, [r7, #24]
 81099ba:	fa02 f303 	lsl.w	r3, r2, r3
 81099be:	43da      	mvns	r2, r3
 81099c0:	68bb      	ldr	r3, [r7, #8]
 81099c2:	401a      	ands	r2, r3
 81099c4:	697b      	ldr	r3, [r7, #20]
 81099c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81099c8:	f04f 31ff 	mov.w	r1, #4294967295
 81099cc:	697b      	ldr	r3, [r7, #20]
 81099ce:	fa01 f303 	lsl.w	r3, r1, r3
 81099d2:	43d9      	mvns	r1, r3
 81099d4:	687b      	ldr	r3, [r7, #4]
 81099d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81099d8:	4313      	orrs	r3, r2
         );
}
 81099da:	4618      	mov	r0, r3
 81099dc:	3724      	adds	r7, #36	; 0x24
 81099de:	46bd      	mov	sp, r7
 81099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099e4:	4770      	bx	lr

081099e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81099e6:	b580      	push	{r7, lr}
 81099e8:	b082      	sub	sp, #8
 81099ea:	af00      	add	r7, sp, #0
 81099ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81099ee:	6878      	ldr	r0, [r7, #4]
 81099f0:	f7ff ff4c 	bl	810988c <__NVIC_SetPriorityGrouping>
}
 81099f4:	bf00      	nop
 81099f6:	3708      	adds	r7, #8
 81099f8:	46bd      	mov	sp, r7
 81099fa:	bd80      	pop	{r7, pc}

081099fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81099fc:	b580      	push	{r7, lr}
 81099fe:	b086      	sub	sp, #24
 8109a00:	af00      	add	r7, sp, #0
 8109a02:	4603      	mov	r3, r0
 8109a04:	60b9      	str	r1, [r7, #8]
 8109a06:	607a      	str	r2, [r7, #4]
 8109a08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8109a0a:	f7ff ff63 	bl	81098d4 <__NVIC_GetPriorityGrouping>
 8109a0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8109a10:	687a      	ldr	r2, [r7, #4]
 8109a12:	68b9      	ldr	r1, [r7, #8]
 8109a14:	6978      	ldr	r0, [r7, #20]
 8109a16:	f7ff ffb3 	bl	8109980 <NVIC_EncodePriority>
 8109a1a:	4602      	mov	r2, r0
 8109a1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8109a20:	4611      	mov	r1, r2
 8109a22:	4618      	mov	r0, r3
 8109a24:	f7ff ff82 	bl	810992c <__NVIC_SetPriority>
}
 8109a28:	bf00      	nop
 8109a2a:	3718      	adds	r7, #24
 8109a2c:	46bd      	mov	sp, r7
 8109a2e:	bd80      	pop	{r7, pc}

08109a30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8109a30:	b580      	push	{r7, lr}
 8109a32:	b082      	sub	sp, #8
 8109a34:	af00      	add	r7, sp, #0
 8109a36:	4603      	mov	r3, r0
 8109a38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8109a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8109a3e:	4618      	mov	r0, r3
 8109a40:	f7ff ff56 	bl	81098f0 <__NVIC_EnableIRQ>
}
 8109a44:	bf00      	nop
 8109a46:	3708      	adds	r7, #8
 8109a48:	46bd      	mov	sp, r7
 8109a4a:	bd80      	pop	{r7, pc}

08109a4c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8109a4c:	b480      	push	{r7}
 8109a4e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8109a50:	f3bf 8f5f 	dmb	sy
}
 8109a54:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8109a56:	4b07      	ldr	r3, [pc, #28]	; (8109a74 <HAL_MPU_Disable+0x28>)
 8109a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109a5a:	4a06      	ldr	r2, [pc, #24]	; (8109a74 <HAL_MPU_Disable+0x28>)
 8109a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8109a60:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8109a62:	4b05      	ldr	r3, [pc, #20]	; (8109a78 <HAL_MPU_Disable+0x2c>)
 8109a64:	2200      	movs	r2, #0
 8109a66:	605a      	str	r2, [r3, #4]
}
 8109a68:	bf00      	nop
 8109a6a:	46bd      	mov	sp, r7
 8109a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a70:	4770      	bx	lr
 8109a72:	bf00      	nop
 8109a74:	e000ed00 	.word	0xe000ed00
 8109a78:	e000ed90 	.word	0xe000ed90

08109a7c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8109a7c:	b480      	push	{r7}
 8109a7e:	b083      	sub	sp, #12
 8109a80:	af00      	add	r7, sp, #0
 8109a82:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8109a84:	4a0b      	ldr	r2, [pc, #44]	; (8109ab4 <HAL_MPU_Enable+0x38>)
 8109a86:	687b      	ldr	r3, [r7, #4]
 8109a88:	f043 0301 	orr.w	r3, r3, #1
 8109a8c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8109a8e:	4b0a      	ldr	r3, [pc, #40]	; (8109ab8 <HAL_MPU_Enable+0x3c>)
 8109a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109a92:	4a09      	ldr	r2, [pc, #36]	; (8109ab8 <HAL_MPU_Enable+0x3c>)
 8109a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8109a98:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8109a9a:	f3bf 8f4f 	dsb	sy
}
 8109a9e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109aa0:	f3bf 8f6f 	isb	sy
}
 8109aa4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8109aa6:	bf00      	nop
 8109aa8:	370c      	adds	r7, #12
 8109aaa:	46bd      	mov	sp, r7
 8109aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ab0:	4770      	bx	lr
 8109ab2:	bf00      	nop
 8109ab4:	e000ed90 	.word	0xe000ed90
 8109ab8:	e000ed00 	.word	0xe000ed00

08109abc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8109abc:	b480      	push	{r7}
 8109abe:	b083      	sub	sp, #12
 8109ac0:	af00      	add	r7, sp, #0
 8109ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8109ac4:	687b      	ldr	r3, [r7, #4]
 8109ac6:	785a      	ldrb	r2, [r3, #1]
 8109ac8:	4b1d      	ldr	r3, [pc, #116]	; (8109b40 <HAL_MPU_ConfigRegion+0x84>)
 8109aca:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8109acc:	687b      	ldr	r3, [r7, #4]
 8109ace:	781b      	ldrb	r3, [r3, #0]
 8109ad0:	2b00      	cmp	r3, #0
 8109ad2:	d029      	beq.n	8109b28 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8109ad4:	4a1a      	ldr	r2, [pc, #104]	; (8109b40 <HAL_MPU_ConfigRegion+0x84>)
 8109ad6:	687b      	ldr	r3, [r7, #4]
 8109ad8:	685b      	ldr	r3, [r3, #4]
 8109ada:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8109adc:	687b      	ldr	r3, [r7, #4]
 8109ade:	7b1b      	ldrb	r3, [r3, #12]
 8109ae0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8109ae2:	687b      	ldr	r3, [r7, #4]
 8109ae4:	7adb      	ldrb	r3, [r3, #11]
 8109ae6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8109ae8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8109aea:	687b      	ldr	r3, [r7, #4]
 8109aec:	7a9b      	ldrb	r3, [r3, #10]
 8109aee:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8109af0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	7b5b      	ldrb	r3, [r3, #13]
 8109af6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8109af8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8109afa:	687b      	ldr	r3, [r7, #4]
 8109afc:	7b9b      	ldrb	r3, [r3, #14]
 8109afe:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8109b00:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8109b02:	687b      	ldr	r3, [r7, #4]
 8109b04:	7bdb      	ldrb	r3, [r3, #15]
 8109b06:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8109b08:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8109b0a:	687b      	ldr	r3, [r7, #4]
 8109b0c:	7a5b      	ldrb	r3, [r3, #9]
 8109b0e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8109b10:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8109b12:	687b      	ldr	r3, [r7, #4]
 8109b14:	7a1b      	ldrb	r3, [r3, #8]
 8109b16:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8109b18:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8109b1a:	687a      	ldr	r2, [r7, #4]
 8109b1c:	7812      	ldrb	r2, [r2, #0]
 8109b1e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8109b20:	4a07      	ldr	r2, [pc, #28]	; (8109b40 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8109b22:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8109b24:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8109b26:	e005      	b.n	8109b34 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8109b28:	4b05      	ldr	r3, [pc, #20]	; (8109b40 <HAL_MPU_ConfigRegion+0x84>)
 8109b2a:	2200      	movs	r2, #0
 8109b2c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8109b2e:	4b04      	ldr	r3, [pc, #16]	; (8109b40 <HAL_MPU_ConfigRegion+0x84>)
 8109b30:	2200      	movs	r2, #0
 8109b32:	611a      	str	r2, [r3, #16]
}
 8109b34:	bf00      	nop
 8109b36:	370c      	adds	r7, #12
 8109b38:	46bd      	mov	sp, r7
 8109b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b3e:	4770      	bx	lr
 8109b40:	e000ed90 	.word	0xe000ed90

08109b44 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8109b44:	b480      	push	{r7}
 8109b46:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8109b48:	4b07      	ldr	r3, [pc, #28]	; (8109b68 <HAL_GetCurrentCPUID+0x24>)
 8109b4a:	681b      	ldr	r3, [r3, #0]
 8109b4c:	091b      	lsrs	r3, r3, #4
 8109b4e:	f003 030f 	and.w	r3, r3, #15
 8109b52:	2b07      	cmp	r3, #7
 8109b54:	d101      	bne.n	8109b5a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8109b56:	2303      	movs	r3, #3
 8109b58:	e000      	b.n	8109b5c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8109b5a:	2301      	movs	r3, #1
  }
}
 8109b5c:	4618      	mov	r0, r3
 8109b5e:	46bd      	mov	sp, r7
 8109b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b64:	4770      	bx	lr
 8109b66:	bf00      	nop
 8109b68:	e000ed00 	.word	0xe000ed00

08109b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8109b6c:	b580      	push	{r7, lr}
 8109b6e:	b086      	sub	sp, #24
 8109b70:	af00      	add	r7, sp, #0
 8109b72:	60f8      	str	r0, [r7, #12]
 8109b74:	60b9      	str	r1, [r7, #8]
 8109b76:	607a      	str	r2, [r7, #4]
 8109b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8109b7a:	2300      	movs	r3, #0
 8109b7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8109b7e:	68fb      	ldr	r3, [r7, #12]
 8109b80:	2b00      	cmp	r3, #0
 8109b82:	d101      	bne.n	8109b88 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8109b84:	2301      	movs	r3, #1
 8109b86:	e226      	b.n	8109fd6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8109b88:	68fb      	ldr	r3, [r7, #12]
 8109b8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8109b8e:	2b01      	cmp	r3, #1
 8109b90:	d101      	bne.n	8109b96 <HAL_DMA_Start_IT+0x2a>
 8109b92:	2302      	movs	r3, #2
 8109b94:	e21f      	b.n	8109fd6 <HAL_DMA_Start_IT+0x46a>
 8109b96:	68fb      	ldr	r3, [r7, #12]
 8109b98:	2201      	movs	r2, #1
 8109b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8109b9e:	68fb      	ldr	r3, [r7, #12]
 8109ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8109ba4:	b2db      	uxtb	r3, r3
 8109ba6:	2b01      	cmp	r3, #1
 8109ba8:	f040 820a 	bne.w	8109fc0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8109bac:	68fb      	ldr	r3, [r7, #12]
 8109bae:	2202      	movs	r2, #2
 8109bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8109bb4:	68fb      	ldr	r3, [r7, #12]
 8109bb6:	2200      	movs	r2, #0
 8109bb8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8109bba:	68fb      	ldr	r3, [r7, #12]
 8109bbc:	681b      	ldr	r3, [r3, #0]
 8109bbe:	4a68      	ldr	r2, [pc, #416]	; (8109d60 <HAL_DMA_Start_IT+0x1f4>)
 8109bc0:	4293      	cmp	r3, r2
 8109bc2:	d04a      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109bc4:	68fb      	ldr	r3, [r7, #12]
 8109bc6:	681b      	ldr	r3, [r3, #0]
 8109bc8:	4a66      	ldr	r2, [pc, #408]	; (8109d64 <HAL_DMA_Start_IT+0x1f8>)
 8109bca:	4293      	cmp	r3, r2
 8109bcc:	d045      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109bce:	68fb      	ldr	r3, [r7, #12]
 8109bd0:	681b      	ldr	r3, [r3, #0]
 8109bd2:	4a65      	ldr	r2, [pc, #404]	; (8109d68 <HAL_DMA_Start_IT+0x1fc>)
 8109bd4:	4293      	cmp	r3, r2
 8109bd6:	d040      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109bd8:	68fb      	ldr	r3, [r7, #12]
 8109bda:	681b      	ldr	r3, [r3, #0]
 8109bdc:	4a63      	ldr	r2, [pc, #396]	; (8109d6c <HAL_DMA_Start_IT+0x200>)
 8109bde:	4293      	cmp	r3, r2
 8109be0:	d03b      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109be2:	68fb      	ldr	r3, [r7, #12]
 8109be4:	681b      	ldr	r3, [r3, #0]
 8109be6:	4a62      	ldr	r2, [pc, #392]	; (8109d70 <HAL_DMA_Start_IT+0x204>)
 8109be8:	4293      	cmp	r3, r2
 8109bea:	d036      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109bec:	68fb      	ldr	r3, [r7, #12]
 8109bee:	681b      	ldr	r3, [r3, #0]
 8109bf0:	4a60      	ldr	r2, [pc, #384]	; (8109d74 <HAL_DMA_Start_IT+0x208>)
 8109bf2:	4293      	cmp	r3, r2
 8109bf4:	d031      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109bf6:	68fb      	ldr	r3, [r7, #12]
 8109bf8:	681b      	ldr	r3, [r3, #0]
 8109bfa:	4a5f      	ldr	r2, [pc, #380]	; (8109d78 <HAL_DMA_Start_IT+0x20c>)
 8109bfc:	4293      	cmp	r3, r2
 8109bfe:	d02c      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109c00:	68fb      	ldr	r3, [r7, #12]
 8109c02:	681b      	ldr	r3, [r3, #0]
 8109c04:	4a5d      	ldr	r2, [pc, #372]	; (8109d7c <HAL_DMA_Start_IT+0x210>)
 8109c06:	4293      	cmp	r3, r2
 8109c08:	d027      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109c0a:	68fb      	ldr	r3, [r7, #12]
 8109c0c:	681b      	ldr	r3, [r3, #0]
 8109c0e:	4a5c      	ldr	r2, [pc, #368]	; (8109d80 <HAL_DMA_Start_IT+0x214>)
 8109c10:	4293      	cmp	r3, r2
 8109c12:	d022      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109c14:	68fb      	ldr	r3, [r7, #12]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	4a5a      	ldr	r2, [pc, #360]	; (8109d84 <HAL_DMA_Start_IT+0x218>)
 8109c1a:	4293      	cmp	r3, r2
 8109c1c:	d01d      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109c1e:	68fb      	ldr	r3, [r7, #12]
 8109c20:	681b      	ldr	r3, [r3, #0]
 8109c22:	4a59      	ldr	r2, [pc, #356]	; (8109d88 <HAL_DMA_Start_IT+0x21c>)
 8109c24:	4293      	cmp	r3, r2
 8109c26:	d018      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109c28:	68fb      	ldr	r3, [r7, #12]
 8109c2a:	681b      	ldr	r3, [r3, #0]
 8109c2c:	4a57      	ldr	r2, [pc, #348]	; (8109d8c <HAL_DMA_Start_IT+0x220>)
 8109c2e:	4293      	cmp	r3, r2
 8109c30:	d013      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109c32:	68fb      	ldr	r3, [r7, #12]
 8109c34:	681b      	ldr	r3, [r3, #0]
 8109c36:	4a56      	ldr	r2, [pc, #344]	; (8109d90 <HAL_DMA_Start_IT+0x224>)
 8109c38:	4293      	cmp	r3, r2
 8109c3a:	d00e      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109c3c:	68fb      	ldr	r3, [r7, #12]
 8109c3e:	681b      	ldr	r3, [r3, #0]
 8109c40:	4a54      	ldr	r2, [pc, #336]	; (8109d94 <HAL_DMA_Start_IT+0x228>)
 8109c42:	4293      	cmp	r3, r2
 8109c44:	d009      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109c46:	68fb      	ldr	r3, [r7, #12]
 8109c48:	681b      	ldr	r3, [r3, #0]
 8109c4a:	4a53      	ldr	r2, [pc, #332]	; (8109d98 <HAL_DMA_Start_IT+0x22c>)
 8109c4c:	4293      	cmp	r3, r2
 8109c4e:	d004      	beq.n	8109c5a <HAL_DMA_Start_IT+0xee>
 8109c50:	68fb      	ldr	r3, [r7, #12]
 8109c52:	681b      	ldr	r3, [r3, #0]
 8109c54:	4a51      	ldr	r2, [pc, #324]	; (8109d9c <HAL_DMA_Start_IT+0x230>)
 8109c56:	4293      	cmp	r3, r2
 8109c58:	d108      	bne.n	8109c6c <HAL_DMA_Start_IT+0x100>
 8109c5a:	68fb      	ldr	r3, [r7, #12]
 8109c5c:	681b      	ldr	r3, [r3, #0]
 8109c5e:	681a      	ldr	r2, [r3, #0]
 8109c60:	68fb      	ldr	r3, [r7, #12]
 8109c62:	681b      	ldr	r3, [r3, #0]
 8109c64:	f022 0201 	bic.w	r2, r2, #1
 8109c68:	601a      	str	r2, [r3, #0]
 8109c6a:	e007      	b.n	8109c7c <HAL_DMA_Start_IT+0x110>
 8109c6c:	68fb      	ldr	r3, [r7, #12]
 8109c6e:	681b      	ldr	r3, [r3, #0]
 8109c70:	681a      	ldr	r2, [r3, #0]
 8109c72:	68fb      	ldr	r3, [r7, #12]
 8109c74:	681b      	ldr	r3, [r3, #0]
 8109c76:	f022 0201 	bic.w	r2, r2, #1
 8109c7a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8109c7c:	683b      	ldr	r3, [r7, #0]
 8109c7e:	687a      	ldr	r2, [r7, #4]
 8109c80:	68b9      	ldr	r1, [r7, #8]
 8109c82:	68f8      	ldr	r0, [r7, #12]
 8109c84:	f000 f9dc 	bl	810a040 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8109c88:	68fb      	ldr	r3, [r7, #12]
 8109c8a:	681b      	ldr	r3, [r3, #0]
 8109c8c:	4a34      	ldr	r2, [pc, #208]	; (8109d60 <HAL_DMA_Start_IT+0x1f4>)
 8109c8e:	4293      	cmp	r3, r2
 8109c90:	d04a      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109c92:	68fb      	ldr	r3, [r7, #12]
 8109c94:	681b      	ldr	r3, [r3, #0]
 8109c96:	4a33      	ldr	r2, [pc, #204]	; (8109d64 <HAL_DMA_Start_IT+0x1f8>)
 8109c98:	4293      	cmp	r3, r2
 8109c9a:	d045      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109c9c:	68fb      	ldr	r3, [r7, #12]
 8109c9e:	681b      	ldr	r3, [r3, #0]
 8109ca0:	4a31      	ldr	r2, [pc, #196]	; (8109d68 <HAL_DMA_Start_IT+0x1fc>)
 8109ca2:	4293      	cmp	r3, r2
 8109ca4:	d040      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109ca6:	68fb      	ldr	r3, [r7, #12]
 8109ca8:	681b      	ldr	r3, [r3, #0]
 8109caa:	4a30      	ldr	r2, [pc, #192]	; (8109d6c <HAL_DMA_Start_IT+0x200>)
 8109cac:	4293      	cmp	r3, r2
 8109cae:	d03b      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109cb0:	68fb      	ldr	r3, [r7, #12]
 8109cb2:	681b      	ldr	r3, [r3, #0]
 8109cb4:	4a2e      	ldr	r2, [pc, #184]	; (8109d70 <HAL_DMA_Start_IT+0x204>)
 8109cb6:	4293      	cmp	r3, r2
 8109cb8:	d036      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109cba:	68fb      	ldr	r3, [r7, #12]
 8109cbc:	681b      	ldr	r3, [r3, #0]
 8109cbe:	4a2d      	ldr	r2, [pc, #180]	; (8109d74 <HAL_DMA_Start_IT+0x208>)
 8109cc0:	4293      	cmp	r3, r2
 8109cc2:	d031      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109cc4:	68fb      	ldr	r3, [r7, #12]
 8109cc6:	681b      	ldr	r3, [r3, #0]
 8109cc8:	4a2b      	ldr	r2, [pc, #172]	; (8109d78 <HAL_DMA_Start_IT+0x20c>)
 8109cca:	4293      	cmp	r3, r2
 8109ccc:	d02c      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109cce:	68fb      	ldr	r3, [r7, #12]
 8109cd0:	681b      	ldr	r3, [r3, #0]
 8109cd2:	4a2a      	ldr	r2, [pc, #168]	; (8109d7c <HAL_DMA_Start_IT+0x210>)
 8109cd4:	4293      	cmp	r3, r2
 8109cd6:	d027      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109cd8:	68fb      	ldr	r3, [r7, #12]
 8109cda:	681b      	ldr	r3, [r3, #0]
 8109cdc:	4a28      	ldr	r2, [pc, #160]	; (8109d80 <HAL_DMA_Start_IT+0x214>)
 8109cde:	4293      	cmp	r3, r2
 8109ce0:	d022      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109ce2:	68fb      	ldr	r3, [r7, #12]
 8109ce4:	681b      	ldr	r3, [r3, #0]
 8109ce6:	4a27      	ldr	r2, [pc, #156]	; (8109d84 <HAL_DMA_Start_IT+0x218>)
 8109ce8:	4293      	cmp	r3, r2
 8109cea:	d01d      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109cec:	68fb      	ldr	r3, [r7, #12]
 8109cee:	681b      	ldr	r3, [r3, #0]
 8109cf0:	4a25      	ldr	r2, [pc, #148]	; (8109d88 <HAL_DMA_Start_IT+0x21c>)
 8109cf2:	4293      	cmp	r3, r2
 8109cf4:	d018      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109cf6:	68fb      	ldr	r3, [r7, #12]
 8109cf8:	681b      	ldr	r3, [r3, #0]
 8109cfa:	4a24      	ldr	r2, [pc, #144]	; (8109d8c <HAL_DMA_Start_IT+0x220>)
 8109cfc:	4293      	cmp	r3, r2
 8109cfe:	d013      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109d00:	68fb      	ldr	r3, [r7, #12]
 8109d02:	681b      	ldr	r3, [r3, #0]
 8109d04:	4a22      	ldr	r2, [pc, #136]	; (8109d90 <HAL_DMA_Start_IT+0x224>)
 8109d06:	4293      	cmp	r3, r2
 8109d08:	d00e      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109d0a:	68fb      	ldr	r3, [r7, #12]
 8109d0c:	681b      	ldr	r3, [r3, #0]
 8109d0e:	4a21      	ldr	r2, [pc, #132]	; (8109d94 <HAL_DMA_Start_IT+0x228>)
 8109d10:	4293      	cmp	r3, r2
 8109d12:	d009      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109d14:	68fb      	ldr	r3, [r7, #12]
 8109d16:	681b      	ldr	r3, [r3, #0]
 8109d18:	4a1f      	ldr	r2, [pc, #124]	; (8109d98 <HAL_DMA_Start_IT+0x22c>)
 8109d1a:	4293      	cmp	r3, r2
 8109d1c:	d004      	beq.n	8109d28 <HAL_DMA_Start_IT+0x1bc>
 8109d1e:	68fb      	ldr	r3, [r7, #12]
 8109d20:	681b      	ldr	r3, [r3, #0]
 8109d22:	4a1e      	ldr	r2, [pc, #120]	; (8109d9c <HAL_DMA_Start_IT+0x230>)
 8109d24:	4293      	cmp	r3, r2
 8109d26:	d101      	bne.n	8109d2c <HAL_DMA_Start_IT+0x1c0>
 8109d28:	2301      	movs	r3, #1
 8109d2a:	e000      	b.n	8109d2e <HAL_DMA_Start_IT+0x1c2>
 8109d2c:	2300      	movs	r3, #0
 8109d2e:	2b00      	cmp	r3, #0
 8109d30:	d036      	beq.n	8109da0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8109d32:	68fb      	ldr	r3, [r7, #12]
 8109d34:	681b      	ldr	r3, [r3, #0]
 8109d36:	681b      	ldr	r3, [r3, #0]
 8109d38:	f023 021e 	bic.w	r2, r3, #30
 8109d3c:	68fb      	ldr	r3, [r7, #12]
 8109d3e:	681b      	ldr	r3, [r3, #0]
 8109d40:	f042 0216 	orr.w	r2, r2, #22
 8109d44:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8109d46:	68fb      	ldr	r3, [r7, #12]
 8109d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109d4a:	2b00      	cmp	r3, #0
 8109d4c:	d03e      	beq.n	8109dcc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8109d4e:	68fb      	ldr	r3, [r7, #12]
 8109d50:	681b      	ldr	r3, [r3, #0]
 8109d52:	681a      	ldr	r2, [r3, #0]
 8109d54:	68fb      	ldr	r3, [r7, #12]
 8109d56:	681b      	ldr	r3, [r3, #0]
 8109d58:	f042 0208 	orr.w	r2, r2, #8
 8109d5c:	601a      	str	r2, [r3, #0]
 8109d5e:	e035      	b.n	8109dcc <HAL_DMA_Start_IT+0x260>
 8109d60:	40020010 	.word	0x40020010
 8109d64:	40020028 	.word	0x40020028
 8109d68:	40020040 	.word	0x40020040
 8109d6c:	40020058 	.word	0x40020058
 8109d70:	40020070 	.word	0x40020070
 8109d74:	40020088 	.word	0x40020088
 8109d78:	400200a0 	.word	0x400200a0
 8109d7c:	400200b8 	.word	0x400200b8
 8109d80:	40020410 	.word	0x40020410
 8109d84:	40020428 	.word	0x40020428
 8109d88:	40020440 	.word	0x40020440
 8109d8c:	40020458 	.word	0x40020458
 8109d90:	40020470 	.word	0x40020470
 8109d94:	40020488 	.word	0x40020488
 8109d98:	400204a0 	.word	0x400204a0
 8109d9c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8109da0:	68fb      	ldr	r3, [r7, #12]
 8109da2:	681b      	ldr	r3, [r3, #0]
 8109da4:	681b      	ldr	r3, [r3, #0]
 8109da6:	f023 020e 	bic.w	r2, r3, #14
 8109daa:	68fb      	ldr	r3, [r7, #12]
 8109dac:	681b      	ldr	r3, [r3, #0]
 8109dae:	f042 020a 	orr.w	r2, r2, #10
 8109db2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8109db4:	68fb      	ldr	r3, [r7, #12]
 8109db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109db8:	2b00      	cmp	r3, #0
 8109dba:	d007      	beq.n	8109dcc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8109dbc:	68fb      	ldr	r3, [r7, #12]
 8109dbe:	681b      	ldr	r3, [r3, #0]
 8109dc0:	681a      	ldr	r2, [r3, #0]
 8109dc2:	68fb      	ldr	r3, [r7, #12]
 8109dc4:	681b      	ldr	r3, [r3, #0]
 8109dc6:	f042 0204 	orr.w	r2, r2, #4
 8109dca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8109dcc:	68fb      	ldr	r3, [r7, #12]
 8109dce:	681b      	ldr	r3, [r3, #0]
 8109dd0:	4a83      	ldr	r2, [pc, #524]	; (8109fe0 <HAL_DMA_Start_IT+0x474>)
 8109dd2:	4293      	cmp	r3, r2
 8109dd4:	d072      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109dd6:	68fb      	ldr	r3, [r7, #12]
 8109dd8:	681b      	ldr	r3, [r3, #0]
 8109dda:	4a82      	ldr	r2, [pc, #520]	; (8109fe4 <HAL_DMA_Start_IT+0x478>)
 8109ddc:	4293      	cmp	r3, r2
 8109dde:	d06d      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109de0:	68fb      	ldr	r3, [r7, #12]
 8109de2:	681b      	ldr	r3, [r3, #0]
 8109de4:	4a80      	ldr	r2, [pc, #512]	; (8109fe8 <HAL_DMA_Start_IT+0x47c>)
 8109de6:	4293      	cmp	r3, r2
 8109de8:	d068      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109dea:	68fb      	ldr	r3, [r7, #12]
 8109dec:	681b      	ldr	r3, [r3, #0]
 8109dee:	4a7f      	ldr	r2, [pc, #508]	; (8109fec <HAL_DMA_Start_IT+0x480>)
 8109df0:	4293      	cmp	r3, r2
 8109df2:	d063      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109df4:	68fb      	ldr	r3, [r7, #12]
 8109df6:	681b      	ldr	r3, [r3, #0]
 8109df8:	4a7d      	ldr	r2, [pc, #500]	; (8109ff0 <HAL_DMA_Start_IT+0x484>)
 8109dfa:	4293      	cmp	r3, r2
 8109dfc:	d05e      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109dfe:	68fb      	ldr	r3, [r7, #12]
 8109e00:	681b      	ldr	r3, [r3, #0]
 8109e02:	4a7c      	ldr	r2, [pc, #496]	; (8109ff4 <HAL_DMA_Start_IT+0x488>)
 8109e04:	4293      	cmp	r3, r2
 8109e06:	d059      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e08:	68fb      	ldr	r3, [r7, #12]
 8109e0a:	681b      	ldr	r3, [r3, #0]
 8109e0c:	4a7a      	ldr	r2, [pc, #488]	; (8109ff8 <HAL_DMA_Start_IT+0x48c>)
 8109e0e:	4293      	cmp	r3, r2
 8109e10:	d054      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e12:	68fb      	ldr	r3, [r7, #12]
 8109e14:	681b      	ldr	r3, [r3, #0]
 8109e16:	4a79      	ldr	r2, [pc, #484]	; (8109ffc <HAL_DMA_Start_IT+0x490>)
 8109e18:	4293      	cmp	r3, r2
 8109e1a:	d04f      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e1c:	68fb      	ldr	r3, [r7, #12]
 8109e1e:	681b      	ldr	r3, [r3, #0]
 8109e20:	4a77      	ldr	r2, [pc, #476]	; (810a000 <HAL_DMA_Start_IT+0x494>)
 8109e22:	4293      	cmp	r3, r2
 8109e24:	d04a      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e26:	68fb      	ldr	r3, [r7, #12]
 8109e28:	681b      	ldr	r3, [r3, #0]
 8109e2a:	4a76      	ldr	r2, [pc, #472]	; (810a004 <HAL_DMA_Start_IT+0x498>)
 8109e2c:	4293      	cmp	r3, r2
 8109e2e:	d045      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e30:	68fb      	ldr	r3, [r7, #12]
 8109e32:	681b      	ldr	r3, [r3, #0]
 8109e34:	4a74      	ldr	r2, [pc, #464]	; (810a008 <HAL_DMA_Start_IT+0x49c>)
 8109e36:	4293      	cmp	r3, r2
 8109e38:	d040      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e3a:	68fb      	ldr	r3, [r7, #12]
 8109e3c:	681b      	ldr	r3, [r3, #0]
 8109e3e:	4a73      	ldr	r2, [pc, #460]	; (810a00c <HAL_DMA_Start_IT+0x4a0>)
 8109e40:	4293      	cmp	r3, r2
 8109e42:	d03b      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e44:	68fb      	ldr	r3, [r7, #12]
 8109e46:	681b      	ldr	r3, [r3, #0]
 8109e48:	4a71      	ldr	r2, [pc, #452]	; (810a010 <HAL_DMA_Start_IT+0x4a4>)
 8109e4a:	4293      	cmp	r3, r2
 8109e4c:	d036      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e4e:	68fb      	ldr	r3, [r7, #12]
 8109e50:	681b      	ldr	r3, [r3, #0]
 8109e52:	4a70      	ldr	r2, [pc, #448]	; (810a014 <HAL_DMA_Start_IT+0x4a8>)
 8109e54:	4293      	cmp	r3, r2
 8109e56:	d031      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e58:	68fb      	ldr	r3, [r7, #12]
 8109e5a:	681b      	ldr	r3, [r3, #0]
 8109e5c:	4a6e      	ldr	r2, [pc, #440]	; (810a018 <HAL_DMA_Start_IT+0x4ac>)
 8109e5e:	4293      	cmp	r3, r2
 8109e60:	d02c      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e62:	68fb      	ldr	r3, [r7, #12]
 8109e64:	681b      	ldr	r3, [r3, #0]
 8109e66:	4a6d      	ldr	r2, [pc, #436]	; (810a01c <HAL_DMA_Start_IT+0x4b0>)
 8109e68:	4293      	cmp	r3, r2
 8109e6a:	d027      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e6c:	68fb      	ldr	r3, [r7, #12]
 8109e6e:	681b      	ldr	r3, [r3, #0]
 8109e70:	4a6b      	ldr	r2, [pc, #428]	; (810a020 <HAL_DMA_Start_IT+0x4b4>)
 8109e72:	4293      	cmp	r3, r2
 8109e74:	d022      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e76:	68fb      	ldr	r3, [r7, #12]
 8109e78:	681b      	ldr	r3, [r3, #0]
 8109e7a:	4a6a      	ldr	r2, [pc, #424]	; (810a024 <HAL_DMA_Start_IT+0x4b8>)
 8109e7c:	4293      	cmp	r3, r2
 8109e7e:	d01d      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e80:	68fb      	ldr	r3, [r7, #12]
 8109e82:	681b      	ldr	r3, [r3, #0]
 8109e84:	4a68      	ldr	r2, [pc, #416]	; (810a028 <HAL_DMA_Start_IT+0x4bc>)
 8109e86:	4293      	cmp	r3, r2
 8109e88:	d018      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e8a:	68fb      	ldr	r3, [r7, #12]
 8109e8c:	681b      	ldr	r3, [r3, #0]
 8109e8e:	4a67      	ldr	r2, [pc, #412]	; (810a02c <HAL_DMA_Start_IT+0x4c0>)
 8109e90:	4293      	cmp	r3, r2
 8109e92:	d013      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e94:	68fb      	ldr	r3, [r7, #12]
 8109e96:	681b      	ldr	r3, [r3, #0]
 8109e98:	4a65      	ldr	r2, [pc, #404]	; (810a030 <HAL_DMA_Start_IT+0x4c4>)
 8109e9a:	4293      	cmp	r3, r2
 8109e9c:	d00e      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109e9e:	68fb      	ldr	r3, [r7, #12]
 8109ea0:	681b      	ldr	r3, [r3, #0]
 8109ea2:	4a64      	ldr	r2, [pc, #400]	; (810a034 <HAL_DMA_Start_IT+0x4c8>)
 8109ea4:	4293      	cmp	r3, r2
 8109ea6:	d009      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109ea8:	68fb      	ldr	r3, [r7, #12]
 8109eaa:	681b      	ldr	r3, [r3, #0]
 8109eac:	4a62      	ldr	r2, [pc, #392]	; (810a038 <HAL_DMA_Start_IT+0x4cc>)
 8109eae:	4293      	cmp	r3, r2
 8109eb0:	d004      	beq.n	8109ebc <HAL_DMA_Start_IT+0x350>
 8109eb2:	68fb      	ldr	r3, [r7, #12]
 8109eb4:	681b      	ldr	r3, [r3, #0]
 8109eb6:	4a61      	ldr	r2, [pc, #388]	; (810a03c <HAL_DMA_Start_IT+0x4d0>)
 8109eb8:	4293      	cmp	r3, r2
 8109eba:	d101      	bne.n	8109ec0 <HAL_DMA_Start_IT+0x354>
 8109ebc:	2301      	movs	r3, #1
 8109ebe:	e000      	b.n	8109ec2 <HAL_DMA_Start_IT+0x356>
 8109ec0:	2300      	movs	r3, #0
 8109ec2:	2b00      	cmp	r3, #0
 8109ec4:	d01a      	beq.n	8109efc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8109ec6:	68fb      	ldr	r3, [r7, #12]
 8109ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109eca:	681b      	ldr	r3, [r3, #0]
 8109ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109ed0:	2b00      	cmp	r3, #0
 8109ed2:	d007      	beq.n	8109ee4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8109ed4:	68fb      	ldr	r3, [r7, #12]
 8109ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109ed8:	681a      	ldr	r2, [r3, #0]
 8109eda:	68fb      	ldr	r3, [r7, #12]
 8109edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8109ee2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8109ee4:	68fb      	ldr	r3, [r7, #12]
 8109ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109ee8:	2b00      	cmp	r3, #0
 8109eea:	d007      	beq.n	8109efc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8109eec:	68fb      	ldr	r3, [r7, #12]
 8109eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109ef0:	681a      	ldr	r2, [r3, #0]
 8109ef2:	68fb      	ldr	r3, [r7, #12]
 8109ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8109efa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8109efc:	68fb      	ldr	r3, [r7, #12]
 8109efe:	681b      	ldr	r3, [r3, #0]
 8109f00:	4a37      	ldr	r2, [pc, #220]	; (8109fe0 <HAL_DMA_Start_IT+0x474>)
 8109f02:	4293      	cmp	r3, r2
 8109f04:	d04a      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f06:	68fb      	ldr	r3, [r7, #12]
 8109f08:	681b      	ldr	r3, [r3, #0]
 8109f0a:	4a36      	ldr	r2, [pc, #216]	; (8109fe4 <HAL_DMA_Start_IT+0x478>)
 8109f0c:	4293      	cmp	r3, r2
 8109f0e:	d045      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f10:	68fb      	ldr	r3, [r7, #12]
 8109f12:	681b      	ldr	r3, [r3, #0]
 8109f14:	4a34      	ldr	r2, [pc, #208]	; (8109fe8 <HAL_DMA_Start_IT+0x47c>)
 8109f16:	4293      	cmp	r3, r2
 8109f18:	d040      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f1a:	68fb      	ldr	r3, [r7, #12]
 8109f1c:	681b      	ldr	r3, [r3, #0]
 8109f1e:	4a33      	ldr	r2, [pc, #204]	; (8109fec <HAL_DMA_Start_IT+0x480>)
 8109f20:	4293      	cmp	r3, r2
 8109f22:	d03b      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f24:	68fb      	ldr	r3, [r7, #12]
 8109f26:	681b      	ldr	r3, [r3, #0]
 8109f28:	4a31      	ldr	r2, [pc, #196]	; (8109ff0 <HAL_DMA_Start_IT+0x484>)
 8109f2a:	4293      	cmp	r3, r2
 8109f2c:	d036      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f2e:	68fb      	ldr	r3, [r7, #12]
 8109f30:	681b      	ldr	r3, [r3, #0]
 8109f32:	4a30      	ldr	r2, [pc, #192]	; (8109ff4 <HAL_DMA_Start_IT+0x488>)
 8109f34:	4293      	cmp	r3, r2
 8109f36:	d031      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f38:	68fb      	ldr	r3, [r7, #12]
 8109f3a:	681b      	ldr	r3, [r3, #0]
 8109f3c:	4a2e      	ldr	r2, [pc, #184]	; (8109ff8 <HAL_DMA_Start_IT+0x48c>)
 8109f3e:	4293      	cmp	r3, r2
 8109f40:	d02c      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f42:	68fb      	ldr	r3, [r7, #12]
 8109f44:	681b      	ldr	r3, [r3, #0]
 8109f46:	4a2d      	ldr	r2, [pc, #180]	; (8109ffc <HAL_DMA_Start_IT+0x490>)
 8109f48:	4293      	cmp	r3, r2
 8109f4a:	d027      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f4c:	68fb      	ldr	r3, [r7, #12]
 8109f4e:	681b      	ldr	r3, [r3, #0]
 8109f50:	4a2b      	ldr	r2, [pc, #172]	; (810a000 <HAL_DMA_Start_IT+0x494>)
 8109f52:	4293      	cmp	r3, r2
 8109f54:	d022      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f56:	68fb      	ldr	r3, [r7, #12]
 8109f58:	681b      	ldr	r3, [r3, #0]
 8109f5a:	4a2a      	ldr	r2, [pc, #168]	; (810a004 <HAL_DMA_Start_IT+0x498>)
 8109f5c:	4293      	cmp	r3, r2
 8109f5e:	d01d      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f60:	68fb      	ldr	r3, [r7, #12]
 8109f62:	681b      	ldr	r3, [r3, #0]
 8109f64:	4a28      	ldr	r2, [pc, #160]	; (810a008 <HAL_DMA_Start_IT+0x49c>)
 8109f66:	4293      	cmp	r3, r2
 8109f68:	d018      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f6a:	68fb      	ldr	r3, [r7, #12]
 8109f6c:	681b      	ldr	r3, [r3, #0]
 8109f6e:	4a27      	ldr	r2, [pc, #156]	; (810a00c <HAL_DMA_Start_IT+0x4a0>)
 8109f70:	4293      	cmp	r3, r2
 8109f72:	d013      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f74:	68fb      	ldr	r3, [r7, #12]
 8109f76:	681b      	ldr	r3, [r3, #0]
 8109f78:	4a25      	ldr	r2, [pc, #148]	; (810a010 <HAL_DMA_Start_IT+0x4a4>)
 8109f7a:	4293      	cmp	r3, r2
 8109f7c:	d00e      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f7e:	68fb      	ldr	r3, [r7, #12]
 8109f80:	681b      	ldr	r3, [r3, #0]
 8109f82:	4a24      	ldr	r2, [pc, #144]	; (810a014 <HAL_DMA_Start_IT+0x4a8>)
 8109f84:	4293      	cmp	r3, r2
 8109f86:	d009      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f88:	68fb      	ldr	r3, [r7, #12]
 8109f8a:	681b      	ldr	r3, [r3, #0]
 8109f8c:	4a22      	ldr	r2, [pc, #136]	; (810a018 <HAL_DMA_Start_IT+0x4ac>)
 8109f8e:	4293      	cmp	r3, r2
 8109f90:	d004      	beq.n	8109f9c <HAL_DMA_Start_IT+0x430>
 8109f92:	68fb      	ldr	r3, [r7, #12]
 8109f94:	681b      	ldr	r3, [r3, #0]
 8109f96:	4a21      	ldr	r2, [pc, #132]	; (810a01c <HAL_DMA_Start_IT+0x4b0>)
 8109f98:	4293      	cmp	r3, r2
 8109f9a:	d108      	bne.n	8109fae <HAL_DMA_Start_IT+0x442>
 8109f9c:	68fb      	ldr	r3, [r7, #12]
 8109f9e:	681b      	ldr	r3, [r3, #0]
 8109fa0:	681a      	ldr	r2, [r3, #0]
 8109fa2:	68fb      	ldr	r3, [r7, #12]
 8109fa4:	681b      	ldr	r3, [r3, #0]
 8109fa6:	f042 0201 	orr.w	r2, r2, #1
 8109faa:	601a      	str	r2, [r3, #0]
 8109fac:	e012      	b.n	8109fd4 <HAL_DMA_Start_IT+0x468>
 8109fae:	68fb      	ldr	r3, [r7, #12]
 8109fb0:	681b      	ldr	r3, [r3, #0]
 8109fb2:	681a      	ldr	r2, [r3, #0]
 8109fb4:	68fb      	ldr	r3, [r7, #12]
 8109fb6:	681b      	ldr	r3, [r3, #0]
 8109fb8:	f042 0201 	orr.w	r2, r2, #1
 8109fbc:	601a      	str	r2, [r3, #0]
 8109fbe:	e009      	b.n	8109fd4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8109fc0:	68fb      	ldr	r3, [r7, #12]
 8109fc2:	2200      	movs	r2, #0
 8109fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8109fc8:	68fb      	ldr	r3, [r7, #12]
 8109fca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8109fce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8109fd0:	2301      	movs	r3, #1
 8109fd2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8109fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8109fd6:	4618      	mov	r0, r3
 8109fd8:	3718      	adds	r7, #24
 8109fda:	46bd      	mov	sp, r7
 8109fdc:	bd80      	pop	{r7, pc}
 8109fde:	bf00      	nop
 8109fe0:	40020010 	.word	0x40020010
 8109fe4:	40020028 	.word	0x40020028
 8109fe8:	40020040 	.word	0x40020040
 8109fec:	40020058 	.word	0x40020058
 8109ff0:	40020070 	.word	0x40020070
 8109ff4:	40020088 	.word	0x40020088
 8109ff8:	400200a0 	.word	0x400200a0
 8109ffc:	400200b8 	.word	0x400200b8
 810a000:	40020410 	.word	0x40020410
 810a004:	40020428 	.word	0x40020428
 810a008:	40020440 	.word	0x40020440
 810a00c:	40020458 	.word	0x40020458
 810a010:	40020470 	.word	0x40020470
 810a014:	40020488 	.word	0x40020488
 810a018:	400204a0 	.word	0x400204a0
 810a01c:	400204b8 	.word	0x400204b8
 810a020:	58025408 	.word	0x58025408
 810a024:	5802541c 	.word	0x5802541c
 810a028:	58025430 	.word	0x58025430
 810a02c:	58025444 	.word	0x58025444
 810a030:	58025458 	.word	0x58025458
 810a034:	5802546c 	.word	0x5802546c
 810a038:	58025480 	.word	0x58025480
 810a03c:	58025494 	.word	0x58025494

0810a040 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 810a040:	b480      	push	{r7}
 810a042:	b087      	sub	sp, #28
 810a044:	af00      	add	r7, sp, #0
 810a046:	60f8      	str	r0, [r7, #12]
 810a048:	60b9      	str	r1, [r7, #8]
 810a04a:	607a      	str	r2, [r7, #4]
 810a04c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 810a04e:	68fb      	ldr	r3, [r7, #12]
 810a050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a052:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 810a054:	68fb      	ldr	r3, [r7, #12]
 810a056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810a058:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810a05a:	68fb      	ldr	r3, [r7, #12]
 810a05c:	681b      	ldr	r3, [r3, #0]
 810a05e:	4a84      	ldr	r2, [pc, #528]	; (810a270 <DMA_SetConfig+0x230>)
 810a060:	4293      	cmp	r3, r2
 810a062:	d072      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a064:	68fb      	ldr	r3, [r7, #12]
 810a066:	681b      	ldr	r3, [r3, #0]
 810a068:	4a82      	ldr	r2, [pc, #520]	; (810a274 <DMA_SetConfig+0x234>)
 810a06a:	4293      	cmp	r3, r2
 810a06c:	d06d      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a06e:	68fb      	ldr	r3, [r7, #12]
 810a070:	681b      	ldr	r3, [r3, #0]
 810a072:	4a81      	ldr	r2, [pc, #516]	; (810a278 <DMA_SetConfig+0x238>)
 810a074:	4293      	cmp	r3, r2
 810a076:	d068      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a078:	68fb      	ldr	r3, [r7, #12]
 810a07a:	681b      	ldr	r3, [r3, #0]
 810a07c:	4a7f      	ldr	r2, [pc, #508]	; (810a27c <DMA_SetConfig+0x23c>)
 810a07e:	4293      	cmp	r3, r2
 810a080:	d063      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a082:	68fb      	ldr	r3, [r7, #12]
 810a084:	681b      	ldr	r3, [r3, #0]
 810a086:	4a7e      	ldr	r2, [pc, #504]	; (810a280 <DMA_SetConfig+0x240>)
 810a088:	4293      	cmp	r3, r2
 810a08a:	d05e      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a08c:	68fb      	ldr	r3, [r7, #12]
 810a08e:	681b      	ldr	r3, [r3, #0]
 810a090:	4a7c      	ldr	r2, [pc, #496]	; (810a284 <DMA_SetConfig+0x244>)
 810a092:	4293      	cmp	r3, r2
 810a094:	d059      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a096:	68fb      	ldr	r3, [r7, #12]
 810a098:	681b      	ldr	r3, [r3, #0]
 810a09a:	4a7b      	ldr	r2, [pc, #492]	; (810a288 <DMA_SetConfig+0x248>)
 810a09c:	4293      	cmp	r3, r2
 810a09e:	d054      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a0a0:	68fb      	ldr	r3, [r7, #12]
 810a0a2:	681b      	ldr	r3, [r3, #0]
 810a0a4:	4a79      	ldr	r2, [pc, #484]	; (810a28c <DMA_SetConfig+0x24c>)
 810a0a6:	4293      	cmp	r3, r2
 810a0a8:	d04f      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a0aa:	68fb      	ldr	r3, [r7, #12]
 810a0ac:	681b      	ldr	r3, [r3, #0]
 810a0ae:	4a78      	ldr	r2, [pc, #480]	; (810a290 <DMA_SetConfig+0x250>)
 810a0b0:	4293      	cmp	r3, r2
 810a0b2:	d04a      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a0b4:	68fb      	ldr	r3, [r7, #12]
 810a0b6:	681b      	ldr	r3, [r3, #0]
 810a0b8:	4a76      	ldr	r2, [pc, #472]	; (810a294 <DMA_SetConfig+0x254>)
 810a0ba:	4293      	cmp	r3, r2
 810a0bc:	d045      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a0be:	68fb      	ldr	r3, [r7, #12]
 810a0c0:	681b      	ldr	r3, [r3, #0]
 810a0c2:	4a75      	ldr	r2, [pc, #468]	; (810a298 <DMA_SetConfig+0x258>)
 810a0c4:	4293      	cmp	r3, r2
 810a0c6:	d040      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a0c8:	68fb      	ldr	r3, [r7, #12]
 810a0ca:	681b      	ldr	r3, [r3, #0]
 810a0cc:	4a73      	ldr	r2, [pc, #460]	; (810a29c <DMA_SetConfig+0x25c>)
 810a0ce:	4293      	cmp	r3, r2
 810a0d0:	d03b      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a0d2:	68fb      	ldr	r3, [r7, #12]
 810a0d4:	681b      	ldr	r3, [r3, #0]
 810a0d6:	4a72      	ldr	r2, [pc, #456]	; (810a2a0 <DMA_SetConfig+0x260>)
 810a0d8:	4293      	cmp	r3, r2
 810a0da:	d036      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a0dc:	68fb      	ldr	r3, [r7, #12]
 810a0de:	681b      	ldr	r3, [r3, #0]
 810a0e0:	4a70      	ldr	r2, [pc, #448]	; (810a2a4 <DMA_SetConfig+0x264>)
 810a0e2:	4293      	cmp	r3, r2
 810a0e4:	d031      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a0e6:	68fb      	ldr	r3, [r7, #12]
 810a0e8:	681b      	ldr	r3, [r3, #0]
 810a0ea:	4a6f      	ldr	r2, [pc, #444]	; (810a2a8 <DMA_SetConfig+0x268>)
 810a0ec:	4293      	cmp	r3, r2
 810a0ee:	d02c      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a0f0:	68fb      	ldr	r3, [r7, #12]
 810a0f2:	681b      	ldr	r3, [r3, #0]
 810a0f4:	4a6d      	ldr	r2, [pc, #436]	; (810a2ac <DMA_SetConfig+0x26c>)
 810a0f6:	4293      	cmp	r3, r2
 810a0f8:	d027      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a0fa:	68fb      	ldr	r3, [r7, #12]
 810a0fc:	681b      	ldr	r3, [r3, #0]
 810a0fe:	4a6c      	ldr	r2, [pc, #432]	; (810a2b0 <DMA_SetConfig+0x270>)
 810a100:	4293      	cmp	r3, r2
 810a102:	d022      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a104:	68fb      	ldr	r3, [r7, #12]
 810a106:	681b      	ldr	r3, [r3, #0]
 810a108:	4a6a      	ldr	r2, [pc, #424]	; (810a2b4 <DMA_SetConfig+0x274>)
 810a10a:	4293      	cmp	r3, r2
 810a10c:	d01d      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a10e:	68fb      	ldr	r3, [r7, #12]
 810a110:	681b      	ldr	r3, [r3, #0]
 810a112:	4a69      	ldr	r2, [pc, #420]	; (810a2b8 <DMA_SetConfig+0x278>)
 810a114:	4293      	cmp	r3, r2
 810a116:	d018      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a118:	68fb      	ldr	r3, [r7, #12]
 810a11a:	681b      	ldr	r3, [r3, #0]
 810a11c:	4a67      	ldr	r2, [pc, #412]	; (810a2bc <DMA_SetConfig+0x27c>)
 810a11e:	4293      	cmp	r3, r2
 810a120:	d013      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a122:	68fb      	ldr	r3, [r7, #12]
 810a124:	681b      	ldr	r3, [r3, #0]
 810a126:	4a66      	ldr	r2, [pc, #408]	; (810a2c0 <DMA_SetConfig+0x280>)
 810a128:	4293      	cmp	r3, r2
 810a12a:	d00e      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a12c:	68fb      	ldr	r3, [r7, #12]
 810a12e:	681b      	ldr	r3, [r3, #0]
 810a130:	4a64      	ldr	r2, [pc, #400]	; (810a2c4 <DMA_SetConfig+0x284>)
 810a132:	4293      	cmp	r3, r2
 810a134:	d009      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a136:	68fb      	ldr	r3, [r7, #12]
 810a138:	681b      	ldr	r3, [r3, #0]
 810a13a:	4a63      	ldr	r2, [pc, #396]	; (810a2c8 <DMA_SetConfig+0x288>)
 810a13c:	4293      	cmp	r3, r2
 810a13e:	d004      	beq.n	810a14a <DMA_SetConfig+0x10a>
 810a140:	68fb      	ldr	r3, [r7, #12]
 810a142:	681b      	ldr	r3, [r3, #0]
 810a144:	4a61      	ldr	r2, [pc, #388]	; (810a2cc <DMA_SetConfig+0x28c>)
 810a146:	4293      	cmp	r3, r2
 810a148:	d101      	bne.n	810a14e <DMA_SetConfig+0x10e>
 810a14a:	2301      	movs	r3, #1
 810a14c:	e000      	b.n	810a150 <DMA_SetConfig+0x110>
 810a14e:	2300      	movs	r3, #0
 810a150:	2b00      	cmp	r3, #0
 810a152:	d00d      	beq.n	810a170 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810a154:	68fb      	ldr	r3, [r7, #12]
 810a156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a158:	68fa      	ldr	r2, [r7, #12]
 810a15a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810a15c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810a15e:	68fb      	ldr	r3, [r7, #12]
 810a160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a162:	2b00      	cmp	r3, #0
 810a164:	d004      	beq.n	810a170 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810a166:	68fb      	ldr	r3, [r7, #12]
 810a168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a16a:	68fa      	ldr	r2, [r7, #12]
 810a16c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810a16e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810a170:	68fb      	ldr	r3, [r7, #12]
 810a172:	681b      	ldr	r3, [r3, #0]
 810a174:	4a3e      	ldr	r2, [pc, #248]	; (810a270 <DMA_SetConfig+0x230>)
 810a176:	4293      	cmp	r3, r2
 810a178:	d04a      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a17a:	68fb      	ldr	r3, [r7, #12]
 810a17c:	681b      	ldr	r3, [r3, #0]
 810a17e:	4a3d      	ldr	r2, [pc, #244]	; (810a274 <DMA_SetConfig+0x234>)
 810a180:	4293      	cmp	r3, r2
 810a182:	d045      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a184:	68fb      	ldr	r3, [r7, #12]
 810a186:	681b      	ldr	r3, [r3, #0]
 810a188:	4a3b      	ldr	r2, [pc, #236]	; (810a278 <DMA_SetConfig+0x238>)
 810a18a:	4293      	cmp	r3, r2
 810a18c:	d040      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a18e:	68fb      	ldr	r3, [r7, #12]
 810a190:	681b      	ldr	r3, [r3, #0]
 810a192:	4a3a      	ldr	r2, [pc, #232]	; (810a27c <DMA_SetConfig+0x23c>)
 810a194:	4293      	cmp	r3, r2
 810a196:	d03b      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a198:	68fb      	ldr	r3, [r7, #12]
 810a19a:	681b      	ldr	r3, [r3, #0]
 810a19c:	4a38      	ldr	r2, [pc, #224]	; (810a280 <DMA_SetConfig+0x240>)
 810a19e:	4293      	cmp	r3, r2
 810a1a0:	d036      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a1a2:	68fb      	ldr	r3, [r7, #12]
 810a1a4:	681b      	ldr	r3, [r3, #0]
 810a1a6:	4a37      	ldr	r2, [pc, #220]	; (810a284 <DMA_SetConfig+0x244>)
 810a1a8:	4293      	cmp	r3, r2
 810a1aa:	d031      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a1ac:	68fb      	ldr	r3, [r7, #12]
 810a1ae:	681b      	ldr	r3, [r3, #0]
 810a1b0:	4a35      	ldr	r2, [pc, #212]	; (810a288 <DMA_SetConfig+0x248>)
 810a1b2:	4293      	cmp	r3, r2
 810a1b4:	d02c      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a1b6:	68fb      	ldr	r3, [r7, #12]
 810a1b8:	681b      	ldr	r3, [r3, #0]
 810a1ba:	4a34      	ldr	r2, [pc, #208]	; (810a28c <DMA_SetConfig+0x24c>)
 810a1bc:	4293      	cmp	r3, r2
 810a1be:	d027      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a1c0:	68fb      	ldr	r3, [r7, #12]
 810a1c2:	681b      	ldr	r3, [r3, #0]
 810a1c4:	4a32      	ldr	r2, [pc, #200]	; (810a290 <DMA_SetConfig+0x250>)
 810a1c6:	4293      	cmp	r3, r2
 810a1c8:	d022      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a1ca:	68fb      	ldr	r3, [r7, #12]
 810a1cc:	681b      	ldr	r3, [r3, #0]
 810a1ce:	4a31      	ldr	r2, [pc, #196]	; (810a294 <DMA_SetConfig+0x254>)
 810a1d0:	4293      	cmp	r3, r2
 810a1d2:	d01d      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a1d4:	68fb      	ldr	r3, [r7, #12]
 810a1d6:	681b      	ldr	r3, [r3, #0]
 810a1d8:	4a2f      	ldr	r2, [pc, #188]	; (810a298 <DMA_SetConfig+0x258>)
 810a1da:	4293      	cmp	r3, r2
 810a1dc:	d018      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a1de:	68fb      	ldr	r3, [r7, #12]
 810a1e0:	681b      	ldr	r3, [r3, #0]
 810a1e2:	4a2e      	ldr	r2, [pc, #184]	; (810a29c <DMA_SetConfig+0x25c>)
 810a1e4:	4293      	cmp	r3, r2
 810a1e6:	d013      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a1e8:	68fb      	ldr	r3, [r7, #12]
 810a1ea:	681b      	ldr	r3, [r3, #0]
 810a1ec:	4a2c      	ldr	r2, [pc, #176]	; (810a2a0 <DMA_SetConfig+0x260>)
 810a1ee:	4293      	cmp	r3, r2
 810a1f0:	d00e      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a1f2:	68fb      	ldr	r3, [r7, #12]
 810a1f4:	681b      	ldr	r3, [r3, #0]
 810a1f6:	4a2b      	ldr	r2, [pc, #172]	; (810a2a4 <DMA_SetConfig+0x264>)
 810a1f8:	4293      	cmp	r3, r2
 810a1fa:	d009      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a1fc:	68fb      	ldr	r3, [r7, #12]
 810a1fe:	681b      	ldr	r3, [r3, #0]
 810a200:	4a29      	ldr	r2, [pc, #164]	; (810a2a8 <DMA_SetConfig+0x268>)
 810a202:	4293      	cmp	r3, r2
 810a204:	d004      	beq.n	810a210 <DMA_SetConfig+0x1d0>
 810a206:	68fb      	ldr	r3, [r7, #12]
 810a208:	681b      	ldr	r3, [r3, #0]
 810a20a:	4a28      	ldr	r2, [pc, #160]	; (810a2ac <DMA_SetConfig+0x26c>)
 810a20c:	4293      	cmp	r3, r2
 810a20e:	d101      	bne.n	810a214 <DMA_SetConfig+0x1d4>
 810a210:	2301      	movs	r3, #1
 810a212:	e000      	b.n	810a216 <DMA_SetConfig+0x1d6>
 810a214:	2300      	movs	r3, #0
 810a216:	2b00      	cmp	r3, #0
 810a218:	d05a      	beq.n	810a2d0 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810a21a:	68fb      	ldr	r3, [r7, #12]
 810a21c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a21e:	f003 031f 	and.w	r3, r3, #31
 810a222:	223f      	movs	r2, #63	; 0x3f
 810a224:	409a      	lsls	r2, r3
 810a226:	697b      	ldr	r3, [r7, #20]
 810a228:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810a22a:	68fb      	ldr	r3, [r7, #12]
 810a22c:	681b      	ldr	r3, [r3, #0]
 810a22e:	681a      	ldr	r2, [r3, #0]
 810a230:	68fb      	ldr	r3, [r7, #12]
 810a232:	681b      	ldr	r3, [r3, #0]
 810a234:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 810a238:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 810a23a:	68fb      	ldr	r3, [r7, #12]
 810a23c:	681b      	ldr	r3, [r3, #0]
 810a23e:	683a      	ldr	r2, [r7, #0]
 810a240:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810a242:	68fb      	ldr	r3, [r7, #12]
 810a244:	689b      	ldr	r3, [r3, #8]
 810a246:	2b40      	cmp	r3, #64	; 0x40
 810a248:	d108      	bne.n	810a25c <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 810a24a:	68fb      	ldr	r3, [r7, #12]
 810a24c:	681b      	ldr	r3, [r3, #0]
 810a24e:	687a      	ldr	r2, [r7, #4]
 810a250:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 810a252:	68fb      	ldr	r3, [r7, #12]
 810a254:	681b      	ldr	r3, [r3, #0]
 810a256:	68ba      	ldr	r2, [r7, #8]
 810a258:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810a25a:	e087      	b.n	810a36c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 810a25c:	68fb      	ldr	r3, [r7, #12]
 810a25e:	681b      	ldr	r3, [r3, #0]
 810a260:	68ba      	ldr	r2, [r7, #8]
 810a262:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 810a264:	68fb      	ldr	r3, [r7, #12]
 810a266:	681b      	ldr	r3, [r3, #0]
 810a268:	687a      	ldr	r2, [r7, #4]
 810a26a:	60da      	str	r2, [r3, #12]
}
 810a26c:	e07e      	b.n	810a36c <DMA_SetConfig+0x32c>
 810a26e:	bf00      	nop
 810a270:	40020010 	.word	0x40020010
 810a274:	40020028 	.word	0x40020028
 810a278:	40020040 	.word	0x40020040
 810a27c:	40020058 	.word	0x40020058
 810a280:	40020070 	.word	0x40020070
 810a284:	40020088 	.word	0x40020088
 810a288:	400200a0 	.word	0x400200a0
 810a28c:	400200b8 	.word	0x400200b8
 810a290:	40020410 	.word	0x40020410
 810a294:	40020428 	.word	0x40020428
 810a298:	40020440 	.word	0x40020440
 810a29c:	40020458 	.word	0x40020458
 810a2a0:	40020470 	.word	0x40020470
 810a2a4:	40020488 	.word	0x40020488
 810a2a8:	400204a0 	.word	0x400204a0
 810a2ac:	400204b8 	.word	0x400204b8
 810a2b0:	58025408 	.word	0x58025408
 810a2b4:	5802541c 	.word	0x5802541c
 810a2b8:	58025430 	.word	0x58025430
 810a2bc:	58025444 	.word	0x58025444
 810a2c0:	58025458 	.word	0x58025458
 810a2c4:	5802546c 	.word	0x5802546c
 810a2c8:	58025480 	.word	0x58025480
 810a2cc:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810a2d0:	68fb      	ldr	r3, [r7, #12]
 810a2d2:	681b      	ldr	r3, [r3, #0]
 810a2d4:	4a28      	ldr	r2, [pc, #160]	; (810a378 <DMA_SetConfig+0x338>)
 810a2d6:	4293      	cmp	r3, r2
 810a2d8:	d022      	beq.n	810a320 <DMA_SetConfig+0x2e0>
 810a2da:	68fb      	ldr	r3, [r7, #12]
 810a2dc:	681b      	ldr	r3, [r3, #0]
 810a2de:	4a27      	ldr	r2, [pc, #156]	; (810a37c <DMA_SetConfig+0x33c>)
 810a2e0:	4293      	cmp	r3, r2
 810a2e2:	d01d      	beq.n	810a320 <DMA_SetConfig+0x2e0>
 810a2e4:	68fb      	ldr	r3, [r7, #12]
 810a2e6:	681b      	ldr	r3, [r3, #0]
 810a2e8:	4a25      	ldr	r2, [pc, #148]	; (810a380 <DMA_SetConfig+0x340>)
 810a2ea:	4293      	cmp	r3, r2
 810a2ec:	d018      	beq.n	810a320 <DMA_SetConfig+0x2e0>
 810a2ee:	68fb      	ldr	r3, [r7, #12]
 810a2f0:	681b      	ldr	r3, [r3, #0]
 810a2f2:	4a24      	ldr	r2, [pc, #144]	; (810a384 <DMA_SetConfig+0x344>)
 810a2f4:	4293      	cmp	r3, r2
 810a2f6:	d013      	beq.n	810a320 <DMA_SetConfig+0x2e0>
 810a2f8:	68fb      	ldr	r3, [r7, #12]
 810a2fa:	681b      	ldr	r3, [r3, #0]
 810a2fc:	4a22      	ldr	r2, [pc, #136]	; (810a388 <DMA_SetConfig+0x348>)
 810a2fe:	4293      	cmp	r3, r2
 810a300:	d00e      	beq.n	810a320 <DMA_SetConfig+0x2e0>
 810a302:	68fb      	ldr	r3, [r7, #12]
 810a304:	681b      	ldr	r3, [r3, #0]
 810a306:	4a21      	ldr	r2, [pc, #132]	; (810a38c <DMA_SetConfig+0x34c>)
 810a308:	4293      	cmp	r3, r2
 810a30a:	d009      	beq.n	810a320 <DMA_SetConfig+0x2e0>
 810a30c:	68fb      	ldr	r3, [r7, #12]
 810a30e:	681b      	ldr	r3, [r3, #0]
 810a310:	4a1f      	ldr	r2, [pc, #124]	; (810a390 <DMA_SetConfig+0x350>)
 810a312:	4293      	cmp	r3, r2
 810a314:	d004      	beq.n	810a320 <DMA_SetConfig+0x2e0>
 810a316:	68fb      	ldr	r3, [r7, #12]
 810a318:	681b      	ldr	r3, [r3, #0]
 810a31a:	4a1e      	ldr	r2, [pc, #120]	; (810a394 <DMA_SetConfig+0x354>)
 810a31c:	4293      	cmp	r3, r2
 810a31e:	d101      	bne.n	810a324 <DMA_SetConfig+0x2e4>
 810a320:	2301      	movs	r3, #1
 810a322:	e000      	b.n	810a326 <DMA_SetConfig+0x2e6>
 810a324:	2300      	movs	r3, #0
 810a326:	2b00      	cmp	r3, #0
 810a328:	d020      	beq.n	810a36c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810a32a:	68fb      	ldr	r3, [r7, #12]
 810a32c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a32e:	f003 031f 	and.w	r3, r3, #31
 810a332:	2201      	movs	r2, #1
 810a334:	409a      	lsls	r2, r3
 810a336:	693b      	ldr	r3, [r7, #16]
 810a338:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810a33a:	68fb      	ldr	r3, [r7, #12]
 810a33c:	681b      	ldr	r3, [r3, #0]
 810a33e:	683a      	ldr	r2, [r7, #0]
 810a340:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810a342:	68fb      	ldr	r3, [r7, #12]
 810a344:	689b      	ldr	r3, [r3, #8]
 810a346:	2b40      	cmp	r3, #64	; 0x40
 810a348:	d108      	bne.n	810a35c <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810a34a:	68fb      	ldr	r3, [r7, #12]
 810a34c:	681b      	ldr	r3, [r3, #0]
 810a34e:	687a      	ldr	r2, [r7, #4]
 810a350:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 810a352:	68fb      	ldr	r3, [r7, #12]
 810a354:	681b      	ldr	r3, [r3, #0]
 810a356:	68ba      	ldr	r2, [r7, #8]
 810a358:	60da      	str	r2, [r3, #12]
}
 810a35a:	e007      	b.n	810a36c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 810a35c:	68fb      	ldr	r3, [r7, #12]
 810a35e:	681b      	ldr	r3, [r3, #0]
 810a360:	68ba      	ldr	r2, [r7, #8]
 810a362:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 810a364:	68fb      	ldr	r3, [r7, #12]
 810a366:	681b      	ldr	r3, [r3, #0]
 810a368:	687a      	ldr	r2, [r7, #4]
 810a36a:	60da      	str	r2, [r3, #12]
}
 810a36c:	bf00      	nop
 810a36e:	371c      	adds	r7, #28
 810a370:	46bd      	mov	sp, r7
 810a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a376:	4770      	bx	lr
 810a378:	58025408 	.word	0x58025408
 810a37c:	5802541c 	.word	0x5802541c
 810a380:	58025430 	.word	0x58025430
 810a384:	58025444 	.word	0x58025444
 810a388:	58025458 	.word	0x58025458
 810a38c:	5802546c 	.word	0x5802546c
 810a390:	58025480 	.word	0x58025480
 810a394:	58025494 	.word	0x58025494

0810a398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810a398:	b480      	push	{r7}
 810a39a:	b089      	sub	sp, #36	; 0x24
 810a39c:	af00      	add	r7, sp, #0
 810a39e:	6078      	str	r0, [r7, #4]
 810a3a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810a3a2:	2300      	movs	r3, #0
 810a3a4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810a3a6:	4b89      	ldr	r3, [pc, #548]	; (810a5cc <HAL_GPIO_Init+0x234>)
 810a3a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810a3aa:	e194      	b.n	810a6d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810a3ac:	683b      	ldr	r3, [r7, #0]
 810a3ae:	681a      	ldr	r2, [r3, #0]
 810a3b0:	2101      	movs	r1, #1
 810a3b2:	69fb      	ldr	r3, [r7, #28]
 810a3b4:	fa01 f303 	lsl.w	r3, r1, r3
 810a3b8:	4013      	ands	r3, r2
 810a3ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810a3bc:	693b      	ldr	r3, [r7, #16]
 810a3be:	2b00      	cmp	r3, #0
 810a3c0:	f000 8186 	beq.w	810a6d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810a3c4:	683b      	ldr	r3, [r7, #0]
 810a3c6:	685b      	ldr	r3, [r3, #4]
 810a3c8:	2b01      	cmp	r3, #1
 810a3ca:	d00b      	beq.n	810a3e4 <HAL_GPIO_Init+0x4c>
 810a3cc:	683b      	ldr	r3, [r7, #0]
 810a3ce:	685b      	ldr	r3, [r3, #4]
 810a3d0:	2b02      	cmp	r3, #2
 810a3d2:	d007      	beq.n	810a3e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810a3d4:	683b      	ldr	r3, [r7, #0]
 810a3d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810a3d8:	2b11      	cmp	r3, #17
 810a3da:	d003      	beq.n	810a3e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810a3dc:	683b      	ldr	r3, [r7, #0]
 810a3de:	685b      	ldr	r3, [r3, #4]
 810a3e0:	2b12      	cmp	r3, #18
 810a3e2:	d130      	bne.n	810a446 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810a3e4:	687b      	ldr	r3, [r7, #4]
 810a3e6:	689b      	ldr	r3, [r3, #8]
 810a3e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810a3ea:	69fb      	ldr	r3, [r7, #28]
 810a3ec:	005b      	lsls	r3, r3, #1
 810a3ee:	2203      	movs	r2, #3
 810a3f0:	fa02 f303 	lsl.w	r3, r2, r3
 810a3f4:	43db      	mvns	r3, r3
 810a3f6:	69ba      	ldr	r2, [r7, #24]
 810a3f8:	4013      	ands	r3, r2
 810a3fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810a3fc:	683b      	ldr	r3, [r7, #0]
 810a3fe:	68da      	ldr	r2, [r3, #12]
 810a400:	69fb      	ldr	r3, [r7, #28]
 810a402:	005b      	lsls	r3, r3, #1
 810a404:	fa02 f303 	lsl.w	r3, r2, r3
 810a408:	69ba      	ldr	r2, [r7, #24]
 810a40a:	4313      	orrs	r3, r2
 810a40c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810a40e:	687b      	ldr	r3, [r7, #4]
 810a410:	69ba      	ldr	r2, [r7, #24]
 810a412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810a414:	687b      	ldr	r3, [r7, #4]
 810a416:	685b      	ldr	r3, [r3, #4]
 810a418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810a41a:	2201      	movs	r2, #1
 810a41c:	69fb      	ldr	r3, [r7, #28]
 810a41e:	fa02 f303 	lsl.w	r3, r2, r3
 810a422:	43db      	mvns	r3, r3
 810a424:	69ba      	ldr	r2, [r7, #24]
 810a426:	4013      	ands	r3, r2
 810a428:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810a42a:	683b      	ldr	r3, [r7, #0]
 810a42c:	685b      	ldr	r3, [r3, #4]
 810a42e:	091b      	lsrs	r3, r3, #4
 810a430:	f003 0201 	and.w	r2, r3, #1
 810a434:	69fb      	ldr	r3, [r7, #28]
 810a436:	fa02 f303 	lsl.w	r3, r2, r3
 810a43a:	69ba      	ldr	r2, [r7, #24]
 810a43c:	4313      	orrs	r3, r2
 810a43e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810a440:	687b      	ldr	r3, [r7, #4]
 810a442:	69ba      	ldr	r2, [r7, #24]
 810a444:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810a446:	687b      	ldr	r3, [r7, #4]
 810a448:	68db      	ldr	r3, [r3, #12]
 810a44a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810a44c:	69fb      	ldr	r3, [r7, #28]
 810a44e:	005b      	lsls	r3, r3, #1
 810a450:	2203      	movs	r2, #3
 810a452:	fa02 f303 	lsl.w	r3, r2, r3
 810a456:	43db      	mvns	r3, r3
 810a458:	69ba      	ldr	r2, [r7, #24]
 810a45a:	4013      	ands	r3, r2
 810a45c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810a45e:	683b      	ldr	r3, [r7, #0]
 810a460:	689a      	ldr	r2, [r3, #8]
 810a462:	69fb      	ldr	r3, [r7, #28]
 810a464:	005b      	lsls	r3, r3, #1
 810a466:	fa02 f303 	lsl.w	r3, r2, r3
 810a46a:	69ba      	ldr	r2, [r7, #24]
 810a46c:	4313      	orrs	r3, r2
 810a46e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810a470:	687b      	ldr	r3, [r7, #4]
 810a472:	69ba      	ldr	r2, [r7, #24]
 810a474:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810a476:	683b      	ldr	r3, [r7, #0]
 810a478:	685b      	ldr	r3, [r3, #4]
 810a47a:	2b02      	cmp	r3, #2
 810a47c:	d003      	beq.n	810a486 <HAL_GPIO_Init+0xee>
 810a47e:	683b      	ldr	r3, [r7, #0]
 810a480:	685b      	ldr	r3, [r3, #4]
 810a482:	2b12      	cmp	r3, #18
 810a484:	d123      	bne.n	810a4ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810a486:	69fb      	ldr	r3, [r7, #28]
 810a488:	08da      	lsrs	r2, r3, #3
 810a48a:	687b      	ldr	r3, [r7, #4]
 810a48c:	3208      	adds	r2, #8
 810a48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810a492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810a494:	69fb      	ldr	r3, [r7, #28]
 810a496:	f003 0307 	and.w	r3, r3, #7
 810a49a:	009b      	lsls	r3, r3, #2
 810a49c:	220f      	movs	r2, #15
 810a49e:	fa02 f303 	lsl.w	r3, r2, r3
 810a4a2:	43db      	mvns	r3, r3
 810a4a4:	69ba      	ldr	r2, [r7, #24]
 810a4a6:	4013      	ands	r3, r2
 810a4a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810a4aa:	683b      	ldr	r3, [r7, #0]
 810a4ac:	691a      	ldr	r2, [r3, #16]
 810a4ae:	69fb      	ldr	r3, [r7, #28]
 810a4b0:	f003 0307 	and.w	r3, r3, #7
 810a4b4:	009b      	lsls	r3, r3, #2
 810a4b6:	fa02 f303 	lsl.w	r3, r2, r3
 810a4ba:	69ba      	ldr	r2, [r7, #24]
 810a4bc:	4313      	orrs	r3, r2
 810a4be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810a4c0:	69fb      	ldr	r3, [r7, #28]
 810a4c2:	08da      	lsrs	r2, r3, #3
 810a4c4:	687b      	ldr	r3, [r7, #4]
 810a4c6:	3208      	adds	r2, #8
 810a4c8:	69b9      	ldr	r1, [r7, #24]
 810a4ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810a4ce:	687b      	ldr	r3, [r7, #4]
 810a4d0:	681b      	ldr	r3, [r3, #0]
 810a4d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810a4d4:	69fb      	ldr	r3, [r7, #28]
 810a4d6:	005b      	lsls	r3, r3, #1
 810a4d8:	2203      	movs	r2, #3
 810a4da:	fa02 f303 	lsl.w	r3, r2, r3
 810a4de:	43db      	mvns	r3, r3
 810a4e0:	69ba      	ldr	r2, [r7, #24]
 810a4e2:	4013      	ands	r3, r2
 810a4e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810a4e6:	683b      	ldr	r3, [r7, #0]
 810a4e8:	685b      	ldr	r3, [r3, #4]
 810a4ea:	f003 0203 	and.w	r2, r3, #3
 810a4ee:	69fb      	ldr	r3, [r7, #28]
 810a4f0:	005b      	lsls	r3, r3, #1
 810a4f2:	fa02 f303 	lsl.w	r3, r2, r3
 810a4f6:	69ba      	ldr	r2, [r7, #24]
 810a4f8:	4313      	orrs	r3, r2
 810a4fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810a4fc:	687b      	ldr	r3, [r7, #4]
 810a4fe:	69ba      	ldr	r2, [r7, #24]
 810a500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810a502:	683b      	ldr	r3, [r7, #0]
 810a504:	685b      	ldr	r3, [r3, #4]
 810a506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810a50a:	2b00      	cmp	r3, #0
 810a50c:	f000 80e0 	beq.w	810a6d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810a510:	4b2f      	ldr	r3, [pc, #188]	; (810a5d0 <HAL_GPIO_Init+0x238>)
 810a512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810a516:	4a2e      	ldr	r2, [pc, #184]	; (810a5d0 <HAL_GPIO_Init+0x238>)
 810a518:	f043 0302 	orr.w	r3, r3, #2
 810a51c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810a520:	4b2b      	ldr	r3, [pc, #172]	; (810a5d0 <HAL_GPIO_Init+0x238>)
 810a522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810a526:	f003 0302 	and.w	r3, r3, #2
 810a52a:	60fb      	str	r3, [r7, #12]
 810a52c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810a52e:	4a29      	ldr	r2, [pc, #164]	; (810a5d4 <HAL_GPIO_Init+0x23c>)
 810a530:	69fb      	ldr	r3, [r7, #28]
 810a532:	089b      	lsrs	r3, r3, #2
 810a534:	3302      	adds	r3, #2
 810a536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810a53a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810a53c:	69fb      	ldr	r3, [r7, #28]
 810a53e:	f003 0303 	and.w	r3, r3, #3
 810a542:	009b      	lsls	r3, r3, #2
 810a544:	220f      	movs	r2, #15
 810a546:	fa02 f303 	lsl.w	r3, r2, r3
 810a54a:	43db      	mvns	r3, r3
 810a54c:	69ba      	ldr	r2, [r7, #24]
 810a54e:	4013      	ands	r3, r2
 810a550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810a552:	687b      	ldr	r3, [r7, #4]
 810a554:	4a20      	ldr	r2, [pc, #128]	; (810a5d8 <HAL_GPIO_Init+0x240>)
 810a556:	4293      	cmp	r3, r2
 810a558:	d052      	beq.n	810a600 <HAL_GPIO_Init+0x268>
 810a55a:	687b      	ldr	r3, [r7, #4]
 810a55c:	4a1f      	ldr	r2, [pc, #124]	; (810a5dc <HAL_GPIO_Init+0x244>)
 810a55e:	4293      	cmp	r3, r2
 810a560:	d031      	beq.n	810a5c6 <HAL_GPIO_Init+0x22e>
 810a562:	687b      	ldr	r3, [r7, #4]
 810a564:	4a1e      	ldr	r2, [pc, #120]	; (810a5e0 <HAL_GPIO_Init+0x248>)
 810a566:	4293      	cmp	r3, r2
 810a568:	d02b      	beq.n	810a5c2 <HAL_GPIO_Init+0x22a>
 810a56a:	687b      	ldr	r3, [r7, #4]
 810a56c:	4a1d      	ldr	r2, [pc, #116]	; (810a5e4 <HAL_GPIO_Init+0x24c>)
 810a56e:	4293      	cmp	r3, r2
 810a570:	d025      	beq.n	810a5be <HAL_GPIO_Init+0x226>
 810a572:	687b      	ldr	r3, [r7, #4]
 810a574:	4a1c      	ldr	r2, [pc, #112]	; (810a5e8 <HAL_GPIO_Init+0x250>)
 810a576:	4293      	cmp	r3, r2
 810a578:	d01f      	beq.n	810a5ba <HAL_GPIO_Init+0x222>
 810a57a:	687b      	ldr	r3, [r7, #4]
 810a57c:	4a1b      	ldr	r2, [pc, #108]	; (810a5ec <HAL_GPIO_Init+0x254>)
 810a57e:	4293      	cmp	r3, r2
 810a580:	d019      	beq.n	810a5b6 <HAL_GPIO_Init+0x21e>
 810a582:	687b      	ldr	r3, [r7, #4]
 810a584:	4a1a      	ldr	r2, [pc, #104]	; (810a5f0 <HAL_GPIO_Init+0x258>)
 810a586:	4293      	cmp	r3, r2
 810a588:	d013      	beq.n	810a5b2 <HAL_GPIO_Init+0x21a>
 810a58a:	687b      	ldr	r3, [r7, #4]
 810a58c:	4a19      	ldr	r2, [pc, #100]	; (810a5f4 <HAL_GPIO_Init+0x25c>)
 810a58e:	4293      	cmp	r3, r2
 810a590:	d00d      	beq.n	810a5ae <HAL_GPIO_Init+0x216>
 810a592:	687b      	ldr	r3, [r7, #4]
 810a594:	4a18      	ldr	r2, [pc, #96]	; (810a5f8 <HAL_GPIO_Init+0x260>)
 810a596:	4293      	cmp	r3, r2
 810a598:	d007      	beq.n	810a5aa <HAL_GPIO_Init+0x212>
 810a59a:	687b      	ldr	r3, [r7, #4]
 810a59c:	4a17      	ldr	r2, [pc, #92]	; (810a5fc <HAL_GPIO_Init+0x264>)
 810a59e:	4293      	cmp	r3, r2
 810a5a0:	d101      	bne.n	810a5a6 <HAL_GPIO_Init+0x20e>
 810a5a2:	2309      	movs	r3, #9
 810a5a4:	e02d      	b.n	810a602 <HAL_GPIO_Init+0x26a>
 810a5a6:	230a      	movs	r3, #10
 810a5a8:	e02b      	b.n	810a602 <HAL_GPIO_Init+0x26a>
 810a5aa:	2308      	movs	r3, #8
 810a5ac:	e029      	b.n	810a602 <HAL_GPIO_Init+0x26a>
 810a5ae:	2307      	movs	r3, #7
 810a5b0:	e027      	b.n	810a602 <HAL_GPIO_Init+0x26a>
 810a5b2:	2306      	movs	r3, #6
 810a5b4:	e025      	b.n	810a602 <HAL_GPIO_Init+0x26a>
 810a5b6:	2305      	movs	r3, #5
 810a5b8:	e023      	b.n	810a602 <HAL_GPIO_Init+0x26a>
 810a5ba:	2304      	movs	r3, #4
 810a5bc:	e021      	b.n	810a602 <HAL_GPIO_Init+0x26a>
 810a5be:	2303      	movs	r3, #3
 810a5c0:	e01f      	b.n	810a602 <HAL_GPIO_Init+0x26a>
 810a5c2:	2302      	movs	r3, #2
 810a5c4:	e01d      	b.n	810a602 <HAL_GPIO_Init+0x26a>
 810a5c6:	2301      	movs	r3, #1
 810a5c8:	e01b      	b.n	810a602 <HAL_GPIO_Init+0x26a>
 810a5ca:	bf00      	nop
 810a5cc:	580000c0 	.word	0x580000c0
 810a5d0:	58024400 	.word	0x58024400
 810a5d4:	58000400 	.word	0x58000400
 810a5d8:	58020000 	.word	0x58020000
 810a5dc:	58020400 	.word	0x58020400
 810a5e0:	58020800 	.word	0x58020800
 810a5e4:	58020c00 	.word	0x58020c00
 810a5e8:	58021000 	.word	0x58021000
 810a5ec:	58021400 	.word	0x58021400
 810a5f0:	58021800 	.word	0x58021800
 810a5f4:	58021c00 	.word	0x58021c00
 810a5f8:	58022000 	.word	0x58022000
 810a5fc:	58022400 	.word	0x58022400
 810a600:	2300      	movs	r3, #0
 810a602:	69fa      	ldr	r2, [r7, #28]
 810a604:	f002 0203 	and.w	r2, r2, #3
 810a608:	0092      	lsls	r2, r2, #2
 810a60a:	4093      	lsls	r3, r2
 810a60c:	69ba      	ldr	r2, [r7, #24]
 810a60e:	4313      	orrs	r3, r2
 810a610:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810a612:	4938      	ldr	r1, [pc, #224]	; (810a6f4 <HAL_GPIO_Init+0x35c>)
 810a614:	69fb      	ldr	r3, [r7, #28]
 810a616:	089b      	lsrs	r3, r3, #2
 810a618:	3302      	adds	r3, #2
 810a61a:	69ba      	ldr	r2, [r7, #24]
 810a61c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810a620:	697b      	ldr	r3, [r7, #20]
 810a622:	681b      	ldr	r3, [r3, #0]
 810a624:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a626:	693b      	ldr	r3, [r7, #16]
 810a628:	43db      	mvns	r3, r3
 810a62a:	69ba      	ldr	r2, [r7, #24]
 810a62c:	4013      	ands	r3, r2
 810a62e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 810a630:	683b      	ldr	r3, [r7, #0]
 810a632:	685b      	ldr	r3, [r3, #4]
 810a634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810a638:	2b00      	cmp	r3, #0
 810a63a:	d003      	beq.n	810a644 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 810a63c:	69ba      	ldr	r2, [r7, #24]
 810a63e:	693b      	ldr	r3, [r7, #16]
 810a640:	4313      	orrs	r3, r2
 810a642:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810a644:	697b      	ldr	r3, [r7, #20]
 810a646:	69ba      	ldr	r2, [r7, #24]
 810a648:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810a64a:	697b      	ldr	r3, [r7, #20]
 810a64c:	685b      	ldr	r3, [r3, #4]
 810a64e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a650:	693b      	ldr	r3, [r7, #16]
 810a652:	43db      	mvns	r3, r3
 810a654:	69ba      	ldr	r2, [r7, #24]
 810a656:	4013      	ands	r3, r2
 810a658:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810a65a:	683b      	ldr	r3, [r7, #0]
 810a65c:	685b      	ldr	r3, [r3, #4]
 810a65e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810a662:	2b00      	cmp	r3, #0
 810a664:	d003      	beq.n	810a66e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810a666:	69ba      	ldr	r2, [r7, #24]
 810a668:	693b      	ldr	r3, [r7, #16]
 810a66a:	4313      	orrs	r3, r2
 810a66c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810a66e:	697b      	ldr	r3, [r7, #20]
 810a670:	69ba      	ldr	r2, [r7, #24]
 810a672:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810a674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810a678:	681b      	ldr	r3, [r3, #0]
 810a67a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a67c:	693b      	ldr	r3, [r7, #16]
 810a67e:	43db      	mvns	r3, r3
 810a680:	69ba      	ldr	r2, [r7, #24]
 810a682:	4013      	ands	r3, r2
 810a684:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810a686:	683b      	ldr	r3, [r7, #0]
 810a688:	685b      	ldr	r3, [r3, #4]
 810a68a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810a68e:	2b00      	cmp	r3, #0
 810a690:	d003      	beq.n	810a69a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 810a692:	69ba      	ldr	r2, [r7, #24]
 810a694:	693b      	ldr	r3, [r7, #16]
 810a696:	4313      	orrs	r3, r2
 810a698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810a69a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810a69e:	69bb      	ldr	r3, [r7, #24]
 810a6a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810a6a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810a6a6:	685b      	ldr	r3, [r3, #4]
 810a6a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a6aa:	693b      	ldr	r3, [r7, #16]
 810a6ac:	43db      	mvns	r3, r3
 810a6ae:	69ba      	ldr	r2, [r7, #24]
 810a6b0:	4013      	ands	r3, r2
 810a6b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 810a6b4:	683b      	ldr	r3, [r7, #0]
 810a6b6:	685b      	ldr	r3, [r3, #4]
 810a6b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810a6bc:	2b00      	cmp	r3, #0
 810a6be:	d003      	beq.n	810a6c8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 810a6c0:	69ba      	ldr	r2, [r7, #24]
 810a6c2:	693b      	ldr	r3, [r7, #16]
 810a6c4:	4313      	orrs	r3, r2
 810a6c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810a6c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810a6cc:	69bb      	ldr	r3, [r7, #24]
 810a6ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 810a6d0:	69fb      	ldr	r3, [r7, #28]
 810a6d2:	3301      	adds	r3, #1
 810a6d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810a6d6:	683b      	ldr	r3, [r7, #0]
 810a6d8:	681a      	ldr	r2, [r3, #0]
 810a6da:	69fb      	ldr	r3, [r7, #28]
 810a6dc:	fa22 f303 	lsr.w	r3, r2, r3
 810a6e0:	2b00      	cmp	r3, #0
 810a6e2:	f47f ae63 	bne.w	810a3ac <HAL_GPIO_Init+0x14>
  }
}
 810a6e6:	bf00      	nop
 810a6e8:	bf00      	nop
 810a6ea:	3724      	adds	r7, #36	; 0x24
 810a6ec:	46bd      	mov	sp, r7
 810a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6f2:	4770      	bx	lr
 810a6f4:	58000400 	.word	0x58000400

0810a6f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810a6f8:	b480      	push	{r7}
 810a6fa:	b083      	sub	sp, #12
 810a6fc:	af00      	add	r7, sp, #0
 810a6fe:	6078      	str	r0, [r7, #4]
 810a700:	460b      	mov	r3, r1
 810a702:	807b      	strh	r3, [r7, #2]
 810a704:	4613      	mov	r3, r2
 810a706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 810a708:	787b      	ldrb	r3, [r7, #1]
 810a70a:	2b00      	cmp	r3, #0
 810a70c:	d003      	beq.n	810a716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810a70e:	887a      	ldrh	r2, [r7, #2]
 810a710:	687b      	ldr	r3, [r7, #4]
 810a712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810a714:	e003      	b.n	810a71e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810a716:	887b      	ldrh	r3, [r7, #2]
 810a718:	041a      	lsls	r2, r3, #16
 810a71a:	687b      	ldr	r3, [r7, #4]
 810a71c:	619a      	str	r2, [r3, #24]
}
 810a71e:	bf00      	nop
 810a720:	370c      	adds	r7, #12
 810a722:	46bd      	mov	sp, r7
 810a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a728:	4770      	bx	lr

0810a72a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810a72a:	b480      	push	{r7}
 810a72c:	b083      	sub	sp, #12
 810a72e:	af00      	add	r7, sp, #0
 810a730:	6078      	str	r0, [r7, #4]
 810a732:	460b      	mov	r3, r1
 810a734:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 810a736:	687b      	ldr	r3, [r7, #4]
 810a738:	695a      	ldr	r2, [r3, #20]
 810a73a:	887b      	ldrh	r3, [r7, #2]
 810a73c:	401a      	ands	r2, r3
 810a73e:	887b      	ldrh	r3, [r7, #2]
 810a740:	429a      	cmp	r2, r3
 810a742:	d104      	bne.n	810a74e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810a744:	887b      	ldrh	r3, [r7, #2]
 810a746:	041a      	lsls	r2, r3, #16
 810a748:	687b      	ldr	r3, [r7, #4]
 810a74a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 810a74c:	e002      	b.n	810a754 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 810a74e:	887a      	ldrh	r2, [r7, #2]
 810a750:	687b      	ldr	r3, [r7, #4]
 810a752:	619a      	str	r2, [r3, #24]
}
 810a754:	bf00      	nop
 810a756:	370c      	adds	r7, #12
 810a758:	46bd      	mov	sp, r7
 810a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a75e:	4770      	bx	lr

0810a760 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 810a760:	b5b0      	push	{r4, r5, r7, lr}
 810a762:	b086      	sub	sp, #24
 810a764:	af00      	add	r7, sp, #0
 810a766:	6078      	str	r0, [r7, #4]
 810a768:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

#if  USE_MULTI_CORE_SHARED_CODE != 0U
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = ((ProcessID & HSEM_R_PROCID) | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID) | HSEM_R_LOCK);
 810a76a:	683b      	ldr	r3, [r7, #0]
 810a76c:	b2dc      	uxtb	r4, r3
 810a76e:	f7ff f9e9 	bl	8109b44 <HAL_GetCurrentCPUID>
 810a772:	4602      	mov	r2, r0
 810a774:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 810a778:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810a77a:	68fb      	ldr	r3, [r7, #12]
 810a77c:	fa93 f3a3 	rbit	r3, r3
 810a780:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 810a782:	68bb      	ldr	r3, [r7, #8]
 810a784:	fab3 f383 	clz	r3, r3
 810a788:	b2db      	uxtb	r3, r3
 810a78a:	fa02 f303 	lsl.w	r3, r2, r3
 810a78e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 810a792:	4323      	orrs	r3, r4
 810a794:	4914      	ldr	r1, [pc, #80]	; (810a7e8 <HAL_HSEM_Take+0x88>)
 810a796:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 810a79a:	687b      	ldr	r3, [r7, #4]
 810a79c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == ((ProcessID & HSEM_R_PROCID) | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID) | HSEM_R_LOCK))
 810a7a0:	4a11      	ldr	r2, [pc, #68]	; (810a7e8 <HAL_HSEM_Take+0x88>)
 810a7a2:	687b      	ldr	r3, [r7, #4]
 810a7a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810a7a8:	683b      	ldr	r3, [r7, #0]
 810a7aa:	b2dd      	uxtb	r5, r3
 810a7ac:	f7ff f9ca 	bl	8109b44 <HAL_GetCurrentCPUID>
 810a7b0:	4602      	mov	r2, r0
 810a7b2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 810a7b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810a7b8:	697b      	ldr	r3, [r7, #20]
 810a7ba:	fa93 f3a3 	rbit	r3, r3
 810a7be:	613b      	str	r3, [r7, #16]
  return result;
 810a7c0:	693b      	ldr	r3, [r7, #16]
 810a7c2:	fab3 f383 	clz	r3, r3
 810a7c6:	b2db      	uxtb	r3, r3
 810a7c8:	fa02 f303 	lsl.w	r3, r2, r3
 810a7cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 810a7d0:	432b      	orrs	r3, r5
 810a7d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810a7d6:	429c      	cmp	r4, r3
 810a7d8:	d101      	bne.n	810a7de <HAL_HSEM_Take+0x7e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 810a7da:	2300      	movs	r3, #0
 810a7dc:	e000      	b.n	810a7e0 <HAL_HSEM_Take+0x80>
    return HAL_OK;
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810a7de:	2301      	movs	r3, #1
}
 810a7e0:	4618      	mov	r0, r3
 810a7e2:	3718      	adds	r7, #24
 810a7e4:	46bd      	mov	sp, r7
 810a7e6:	bdb0      	pop	{r4, r5, r7, pc}
 810a7e8:	58026400 	.word	0x58026400

0810a7ec <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 810a7ec:	b580      	push	{r7, lr}
 810a7ee:	b084      	sub	sp, #16
 810a7f0:	af00      	add	r7, sp, #0
 810a7f2:	6078      	str	r0, [r7, #4]
 810a7f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
 810a7f6:	f7ff f9a5 	bl	8109b44 <HAL_GetCurrentCPUID>
 810a7fa:	4602      	mov	r2, r0
 810a7fc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 810a800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810a802:	68fb      	ldr	r3, [r7, #12]
 810a804:	fa93 f3a3 	rbit	r3, r3
 810a808:	60bb      	str	r3, [r7, #8]
  return result;
 810a80a:	68bb      	ldr	r3, [r7, #8]
 810a80c:	fab3 f383 	clz	r3, r3
 810a810:	b2db      	uxtb	r3, r3
 810a812:	fa02 f303 	lsl.w	r3, r2, r3
 810a816:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 810a81a:	4905      	ldr	r1, [pc, #20]	; (810a830 <HAL_HSEM_Release+0x44>)
 810a81c:	683b      	ldr	r3, [r7, #0]
 810a81e:	431a      	orrs	r2, r3
 810a820:	687b      	ldr	r3, [r7, #4]
 810a822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
#endif

}
 810a826:	bf00      	nop
 810a828:	3710      	adds	r7, #16
 810a82a:	46bd      	mov	sp, r7
 810a82c:	bd80      	pop	{r7, pc}
 810a82e:	bf00      	nop
 810a830:	58026400 	.word	0x58026400

0810a834 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810a834:	b580      	push	{r7, lr}
 810a836:	b082      	sub	sp, #8
 810a838:	af00      	add	r7, sp, #0
 810a83a:	6078      	str	r0, [r7, #4]
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  /*enable the semaphore mask interrupts */
  if (HAL_GetCurrentCPUID() == HSEM_CPU1_COREID)
 810a83c:	f7ff f982 	bl	8109b44 <HAL_GetCurrentCPUID>
 810a840:	4603      	mov	r3, r0
 810a842:	2b03      	cmp	r3, #3
 810a844:	d108      	bne.n	810a858 <HAL_HSEM_ActivateNotification+0x24>
  {
    /*Use interrupt line 0 for CPU1 Master */
    HSEM->C1IER |= SemMask;
 810a846:	4b0a      	ldr	r3, [pc, #40]	; (810a870 <HAL_HSEM_ActivateNotification+0x3c>)
 810a848:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 810a84c:	4908      	ldr	r1, [pc, #32]	; (810a870 <HAL_HSEM_ActivateNotification+0x3c>)
 810a84e:	687b      	ldr	r3, [r7, #4]
 810a850:	4313      	orrs	r3, r2
 810a852:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
#endif
}
 810a856:	e007      	b.n	810a868 <HAL_HSEM_ActivateNotification+0x34>
    HSEM->C2IER |= SemMask;
 810a858:	4b05      	ldr	r3, [pc, #20]	; (810a870 <HAL_HSEM_ActivateNotification+0x3c>)
 810a85a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 810a85e:	4904      	ldr	r1, [pc, #16]	; (810a870 <HAL_HSEM_ActivateNotification+0x3c>)
 810a860:	687b      	ldr	r3, [r7, #4]
 810a862:	4313      	orrs	r3, r2
 810a864:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
}
 810a868:	bf00      	nop
 810a86a:	3708      	adds	r7, #8
 810a86c:	46bd      	mov	sp, r7
 810a86e:	bd80      	pop	{r7, pc}
 810a870:	58026400 	.word	0x58026400

0810a874 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810a874:	b580      	push	{r7, lr}
 810a876:	b084      	sub	sp, #16
 810a878:	af00      	add	r7, sp, #0
 810a87a:	60f8      	str	r0, [r7, #12]
 810a87c:	460b      	mov	r3, r1
 810a87e:	607a      	str	r2, [r7, #4]
 810a880:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810a882:	4b37      	ldr	r3, [pc, #220]	; (810a960 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a884:	681b      	ldr	r3, [r3, #0]
 810a886:	f023 0201 	bic.w	r2, r3, #1
 810a88a:	4935      	ldr	r1, [pc, #212]	; (810a960 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a88c:	68fb      	ldr	r3, [r7, #12]
 810a88e:	4313      	orrs	r3, r2
 810a890:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810a892:	687b      	ldr	r3, [r7, #4]
 810a894:	2b00      	cmp	r3, #0
 810a896:	d123      	bne.n	810a8e0 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810a898:	f7ff f954 	bl	8109b44 <HAL_GetCurrentCPUID>
 810a89c:	4603      	mov	r3, r0
 810a89e:	2b03      	cmp	r3, #3
 810a8a0:	d158      	bne.n	810a954 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810a8a2:	4b2f      	ldr	r3, [pc, #188]	; (810a960 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a8a4:	691b      	ldr	r3, [r3, #16]
 810a8a6:	4a2e      	ldr	r2, [pc, #184]	; (810a960 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a8a8:	f023 0301 	bic.w	r3, r3, #1
 810a8ac:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810a8ae:	4b2d      	ldr	r3, [pc, #180]	; (810a964 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a8b0:	691b      	ldr	r3, [r3, #16]
 810a8b2:	4a2c      	ldr	r2, [pc, #176]	; (810a964 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a8b4:	f043 0304 	orr.w	r3, r3, #4
 810a8b8:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810a8ba:	f3bf 8f4f 	dsb	sy
}
 810a8be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810a8c0:	f3bf 8f6f 	isb	sy
}
 810a8c4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810a8c6:	7afb      	ldrb	r3, [r7, #11]
 810a8c8:	2b01      	cmp	r3, #1
 810a8ca:	d101      	bne.n	810a8d0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810a8cc:	bf30      	wfi
 810a8ce:	e000      	b.n	810a8d2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810a8d0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810a8d2:	4b24      	ldr	r3, [pc, #144]	; (810a964 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a8d4:	691b      	ldr	r3, [r3, #16]
 810a8d6:	4a23      	ldr	r2, [pc, #140]	; (810a964 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a8d8:	f023 0304 	bic.w	r3, r3, #4
 810a8dc:	6113      	str	r3, [r2, #16]
 810a8de:	e03c      	b.n	810a95a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810a8e0:	687b      	ldr	r3, [r7, #4]
 810a8e2:	2b01      	cmp	r3, #1
 810a8e4:	d123      	bne.n	810a92e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810a8e6:	f7ff f92d 	bl	8109b44 <HAL_GetCurrentCPUID>
 810a8ea:	4603      	mov	r3, r0
 810a8ec:	2b01      	cmp	r3, #1
 810a8ee:	d133      	bne.n	810a958 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810a8f0:	4b1b      	ldr	r3, [pc, #108]	; (810a960 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a8f2:	695b      	ldr	r3, [r3, #20]
 810a8f4:	4a1a      	ldr	r2, [pc, #104]	; (810a960 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a8f6:	f023 0302 	bic.w	r3, r3, #2
 810a8fa:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810a8fc:	4b19      	ldr	r3, [pc, #100]	; (810a964 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a8fe:	691b      	ldr	r3, [r3, #16]
 810a900:	4a18      	ldr	r2, [pc, #96]	; (810a964 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a902:	f043 0304 	orr.w	r3, r3, #4
 810a906:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810a908:	f3bf 8f4f 	dsb	sy
}
 810a90c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810a90e:	f3bf 8f6f 	isb	sy
}
 810a912:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810a914:	7afb      	ldrb	r3, [r7, #11]
 810a916:	2b01      	cmp	r3, #1
 810a918:	d101      	bne.n	810a91e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810a91a:	bf30      	wfi
 810a91c:	e000      	b.n	810a920 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810a91e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810a920:	4b10      	ldr	r3, [pc, #64]	; (810a964 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a922:	691b      	ldr	r3, [r3, #16]
 810a924:	4a0f      	ldr	r2, [pc, #60]	; (810a964 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a926:	f023 0304 	bic.w	r3, r3, #4
 810a92a:	6113      	str	r3, [r2, #16]
 810a92c:	e015      	b.n	810a95a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810a92e:	f7ff f909 	bl	8109b44 <HAL_GetCurrentCPUID>
 810a932:	4603      	mov	r3, r0
 810a934:	2b03      	cmp	r3, #3
 810a936:	d106      	bne.n	810a946 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810a938:	4b09      	ldr	r3, [pc, #36]	; (810a960 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a93a:	691b      	ldr	r3, [r3, #16]
 810a93c:	4a08      	ldr	r2, [pc, #32]	; (810a960 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a93e:	f023 0304 	bic.w	r3, r3, #4
 810a942:	6113      	str	r3, [r2, #16]
 810a944:	e009      	b.n	810a95a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810a946:	4b06      	ldr	r3, [pc, #24]	; (810a960 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a948:	695b      	ldr	r3, [r3, #20]
 810a94a:	4a05      	ldr	r2, [pc, #20]	; (810a960 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a94c:	f023 0304 	bic.w	r3, r3, #4
 810a950:	6153      	str	r3, [r2, #20]
 810a952:	e002      	b.n	810a95a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810a954:	bf00      	nop
 810a956:	e000      	b.n	810a95a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810a958:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810a95a:	3710      	adds	r7, #16
 810a95c:	46bd      	mov	sp, r7
 810a95e:	bd80      	pop	{r7, pc}
 810a960:	58024800 	.word	0x58024800
 810a964:	e000ed00 	.word	0xe000ed00

0810a968 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810a968:	b580      	push	{r7, lr}
 810a96a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810a96c:	f7ff f8ea 	bl	8109b44 <HAL_GetCurrentCPUID>
 810a970:	4603      	mov	r3, r0
 810a972:	2b03      	cmp	r3, #3
 810a974:	d101      	bne.n	810a97a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810a976:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810a978:	e001      	b.n	810a97e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810a97a:	bf40      	sev
    __WFE ();
 810a97c:	bf20      	wfe
}
 810a97e:	bf00      	nop
 810a980:	bd80      	pop	{r7, pc}
	...

0810a984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810a984:	b480      	push	{r7}
 810a986:	b089      	sub	sp, #36	; 0x24
 810a988:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810a98a:	4bb3      	ldr	r3, [pc, #716]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a98c:	691b      	ldr	r3, [r3, #16]
 810a98e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810a992:	2b18      	cmp	r3, #24
 810a994:	f200 8155 	bhi.w	810ac42 <HAL_RCC_GetSysClockFreq+0x2be>
 810a998:	a201      	add	r2, pc, #4	; (adr r2, 810a9a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 810a99a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a99e:	bf00      	nop
 810a9a0:	0810aa05 	.word	0x0810aa05
 810a9a4:	0810ac43 	.word	0x0810ac43
 810a9a8:	0810ac43 	.word	0x0810ac43
 810a9ac:	0810ac43 	.word	0x0810ac43
 810a9b0:	0810ac43 	.word	0x0810ac43
 810a9b4:	0810ac43 	.word	0x0810ac43
 810a9b8:	0810ac43 	.word	0x0810ac43
 810a9bc:	0810ac43 	.word	0x0810ac43
 810a9c0:	0810aa2b 	.word	0x0810aa2b
 810a9c4:	0810ac43 	.word	0x0810ac43
 810a9c8:	0810ac43 	.word	0x0810ac43
 810a9cc:	0810ac43 	.word	0x0810ac43
 810a9d0:	0810ac43 	.word	0x0810ac43
 810a9d4:	0810ac43 	.word	0x0810ac43
 810a9d8:	0810ac43 	.word	0x0810ac43
 810a9dc:	0810ac43 	.word	0x0810ac43
 810a9e0:	0810aa31 	.word	0x0810aa31
 810a9e4:	0810ac43 	.word	0x0810ac43
 810a9e8:	0810ac43 	.word	0x0810ac43
 810a9ec:	0810ac43 	.word	0x0810ac43
 810a9f0:	0810ac43 	.word	0x0810ac43
 810a9f4:	0810ac43 	.word	0x0810ac43
 810a9f8:	0810ac43 	.word	0x0810ac43
 810a9fc:	0810ac43 	.word	0x0810ac43
 810aa00:	0810aa37 	.word	0x0810aa37
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810aa04:	4b94      	ldr	r3, [pc, #592]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa06:	681b      	ldr	r3, [r3, #0]
 810aa08:	f003 0320 	and.w	r3, r3, #32
 810aa0c:	2b00      	cmp	r3, #0
 810aa0e:	d009      	beq.n	810aa24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810aa10:	4b91      	ldr	r3, [pc, #580]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa12:	681b      	ldr	r3, [r3, #0]
 810aa14:	08db      	lsrs	r3, r3, #3
 810aa16:	f003 0303 	and.w	r3, r3, #3
 810aa1a:	4a90      	ldr	r2, [pc, #576]	; (810ac5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810aa1c:	fa22 f303 	lsr.w	r3, r2, r3
 810aa20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810aa22:	e111      	b.n	810ac48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810aa24:	4b8d      	ldr	r3, [pc, #564]	; (810ac5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810aa26:	61bb      	str	r3, [r7, #24]
    break;
 810aa28:	e10e      	b.n	810ac48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810aa2a:	4b8d      	ldr	r3, [pc, #564]	; (810ac60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810aa2c:	61bb      	str	r3, [r7, #24]
    break;
 810aa2e:	e10b      	b.n	810ac48 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810aa30:	4b8c      	ldr	r3, [pc, #560]	; (810ac64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810aa32:	61bb      	str	r3, [r7, #24]
    break;
 810aa34:	e108      	b.n	810ac48 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810aa36:	4b88      	ldr	r3, [pc, #544]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa3a:	f003 0303 	and.w	r3, r3, #3
 810aa3e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810aa40:	4b85      	ldr	r3, [pc, #532]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810aa44:	091b      	lsrs	r3, r3, #4
 810aa46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810aa4a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810aa4c:	4b82      	ldr	r3, [pc, #520]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810aa50:	f003 0301 	and.w	r3, r3, #1
 810aa54:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810aa56:	4b80      	ldr	r3, [pc, #512]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810aa5a:	08db      	lsrs	r3, r3, #3
 810aa5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810aa60:	68fa      	ldr	r2, [r7, #12]
 810aa62:	fb02 f303 	mul.w	r3, r2, r3
 810aa66:	ee07 3a90 	vmov	s15, r3
 810aa6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810aa6e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810aa72:	693b      	ldr	r3, [r7, #16]
 810aa74:	2b00      	cmp	r3, #0
 810aa76:	f000 80e1 	beq.w	810ac3c <HAL_RCC_GetSysClockFreq+0x2b8>
 810aa7a:	697b      	ldr	r3, [r7, #20]
 810aa7c:	2b02      	cmp	r3, #2
 810aa7e:	f000 8083 	beq.w	810ab88 <HAL_RCC_GetSysClockFreq+0x204>
 810aa82:	697b      	ldr	r3, [r7, #20]
 810aa84:	2b02      	cmp	r3, #2
 810aa86:	f200 80a1 	bhi.w	810abcc <HAL_RCC_GetSysClockFreq+0x248>
 810aa8a:	697b      	ldr	r3, [r7, #20]
 810aa8c:	2b00      	cmp	r3, #0
 810aa8e:	d003      	beq.n	810aa98 <HAL_RCC_GetSysClockFreq+0x114>
 810aa90:	697b      	ldr	r3, [r7, #20]
 810aa92:	2b01      	cmp	r3, #1
 810aa94:	d056      	beq.n	810ab44 <HAL_RCC_GetSysClockFreq+0x1c0>
 810aa96:	e099      	b.n	810abcc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810aa98:	4b6f      	ldr	r3, [pc, #444]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa9a:	681b      	ldr	r3, [r3, #0]
 810aa9c:	f003 0320 	and.w	r3, r3, #32
 810aaa0:	2b00      	cmp	r3, #0
 810aaa2:	d02d      	beq.n	810ab00 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810aaa4:	4b6c      	ldr	r3, [pc, #432]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aaa6:	681b      	ldr	r3, [r3, #0]
 810aaa8:	08db      	lsrs	r3, r3, #3
 810aaaa:	f003 0303 	and.w	r3, r3, #3
 810aaae:	4a6b      	ldr	r2, [pc, #428]	; (810ac5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 810aab0:	fa22 f303 	lsr.w	r3, r2, r3
 810aab4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810aab6:	687b      	ldr	r3, [r7, #4]
 810aab8:	ee07 3a90 	vmov	s15, r3
 810aabc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810aac0:	693b      	ldr	r3, [r7, #16]
 810aac2:	ee07 3a90 	vmov	s15, r3
 810aac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810aaca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810aace:	4b62      	ldr	r3, [pc, #392]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810aad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810aad6:	ee07 3a90 	vmov	s15, r3
 810aada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810aade:	ed97 6a02 	vldr	s12, [r7, #8]
 810aae2:	eddf 5a61 	vldr	s11, [pc, #388]	; 810ac68 <HAL_RCC_GetSysClockFreq+0x2e4>
 810aae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810aaea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810aaee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810aaf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810aaf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 810aafa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810aafe:	e087      	b.n	810ac10 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810ab00:	693b      	ldr	r3, [r7, #16]
 810ab02:	ee07 3a90 	vmov	s15, r3
 810ab06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ab0a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810ac6c <HAL_RCC_GetSysClockFreq+0x2e8>
 810ab0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810ab12:	4b51      	ldr	r3, [pc, #324]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810ab14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810ab16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810ab1a:	ee07 3a90 	vmov	s15, r3
 810ab1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810ab22:	ed97 6a02 	vldr	s12, [r7, #8]
 810ab26:	eddf 5a50 	vldr	s11, [pc, #320]	; 810ac68 <HAL_RCC_GetSysClockFreq+0x2e4>
 810ab2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810ab2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810ab32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810ab36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810ab3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810ab3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810ab42:	e065      	b.n	810ac10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810ab44:	693b      	ldr	r3, [r7, #16]
 810ab46:	ee07 3a90 	vmov	s15, r3
 810ab4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ab4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 810ac70 <HAL_RCC_GetSysClockFreq+0x2ec>
 810ab52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810ab56:	4b40      	ldr	r3, [pc, #256]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810ab5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810ab5e:	ee07 3a90 	vmov	s15, r3
 810ab62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810ab66:	ed97 6a02 	vldr	s12, [r7, #8]
 810ab6a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810ac68 <HAL_RCC_GetSysClockFreq+0x2e4>
 810ab6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810ab72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810ab76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810ab7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810ab7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 810ab82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810ab86:	e043      	b.n	810ac10 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810ab88:	693b      	ldr	r3, [r7, #16]
 810ab8a:	ee07 3a90 	vmov	s15, r3
 810ab8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ab92:	eddf 6a38 	vldr	s13, [pc, #224]	; 810ac74 <HAL_RCC_GetSysClockFreq+0x2f0>
 810ab96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810ab9a:	4b2f      	ldr	r3, [pc, #188]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810ab9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810ab9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810aba2:	ee07 3a90 	vmov	s15, r3
 810aba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810abaa:	ed97 6a02 	vldr	s12, [r7, #8]
 810abae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810ac68 <HAL_RCC_GetSysClockFreq+0x2e4>
 810abb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810abb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810abba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810abbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810abc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 810abc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810abca:	e021      	b.n	810ac10 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810abcc:	693b      	ldr	r3, [r7, #16]
 810abce:	ee07 3a90 	vmov	s15, r3
 810abd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810abd6:	eddf 6a26 	vldr	s13, [pc, #152]	; 810ac70 <HAL_RCC_GetSysClockFreq+0x2ec>
 810abda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810abde:	4b1e      	ldr	r3, [pc, #120]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810abe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810abe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810abe6:	ee07 3a90 	vmov	s15, r3
 810abea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810abee:	ed97 6a02 	vldr	s12, [r7, #8]
 810abf2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810ac68 <HAL_RCC_GetSysClockFreq+0x2e4>
 810abf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810abfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810abfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810ac02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810ac06:	ee67 7a27 	vmul.f32	s15, s14, s15
 810ac0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810ac0e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810ac10:	4b11      	ldr	r3, [pc, #68]	; (810ac58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810ac12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810ac14:	0a5b      	lsrs	r3, r3, #9
 810ac16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810ac1a:	3301      	adds	r3, #1
 810ac1c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810ac1e:	683b      	ldr	r3, [r7, #0]
 810ac20:	ee07 3a90 	vmov	s15, r3
 810ac24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810ac28:	edd7 6a07 	vldr	s13, [r7, #28]
 810ac2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810ac30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810ac34:	ee17 3a90 	vmov	r3, s15
 810ac38:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810ac3a:	e005      	b.n	810ac48 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810ac3c:	2300      	movs	r3, #0
 810ac3e:	61bb      	str	r3, [r7, #24]
    break;
 810ac40:	e002      	b.n	810ac48 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810ac42:	4b07      	ldr	r3, [pc, #28]	; (810ac60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810ac44:	61bb      	str	r3, [r7, #24]
    break;
 810ac46:	bf00      	nop
  }

  return sysclockfreq;
 810ac48:	69bb      	ldr	r3, [r7, #24]
}
 810ac4a:	4618      	mov	r0, r3
 810ac4c:	3724      	adds	r7, #36	; 0x24
 810ac4e:	46bd      	mov	sp, r7
 810ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac54:	4770      	bx	lr
 810ac56:	bf00      	nop
 810ac58:	58024400 	.word	0x58024400
 810ac5c:	03d09000 	.word	0x03d09000
 810ac60:	003d0900 	.word	0x003d0900
 810ac64:	007a1200 	.word	0x007a1200
 810ac68:	46000000 	.word	0x46000000
 810ac6c:	4c742400 	.word	0x4c742400
 810ac70:	4a742400 	.word	0x4a742400
 810ac74:	4af42400 	.word	0x4af42400

0810ac78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810ac78:	b580      	push	{r7, lr}
 810ac7a:	b082      	sub	sp, #8
 810ac7c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810ac7e:	f7ff fe81 	bl	810a984 <HAL_RCC_GetSysClockFreq>
 810ac82:	4602      	mov	r2, r0
 810ac84:	4b11      	ldr	r3, [pc, #68]	; (810accc <HAL_RCC_GetHCLKFreq+0x54>)
 810ac86:	699b      	ldr	r3, [r3, #24]
 810ac88:	0a1b      	lsrs	r3, r3, #8
 810ac8a:	f003 030f 	and.w	r3, r3, #15
 810ac8e:	4910      	ldr	r1, [pc, #64]	; (810acd0 <HAL_RCC_GetHCLKFreq+0x58>)
 810ac90:	5ccb      	ldrb	r3, [r1, r3]
 810ac92:	f003 031f 	and.w	r3, r3, #31
 810ac96:	fa22 f303 	lsr.w	r3, r2, r3
 810ac9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810ac9c:	4b0b      	ldr	r3, [pc, #44]	; (810accc <HAL_RCC_GetHCLKFreq+0x54>)
 810ac9e:	699b      	ldr	r3, [r3, #24]
 810aca0:	f003 030f 	and.w	r3, r3, #15
 810aca4:	4a0a      	ldr	r2, [pc, #40]	; (810acd0 <HAL_RCC_GetHCLKFreq+0x58>)
 810aca6:	5cd3      	ldrb	r3, [r2, r3]
 810aca8:	f003 031f 	and.w	r3, r3, #31
 810acac:	687a      	ldr	r2, [r7, #4]
 810acae:	fa22 f303 	lsr.w	r3, r2, r3
 810acb2:	4a08      	ldr	r2, [pc, #32]	; (810acd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 810acb4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810acb6:	4b07      	ldr	r3, [pc, #28]	; (810acd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 810acb8:	681b      	ldr	r3, [r3, #0]
 810acba:	4a07      	ldr	r2, [pc, #28]	; (810acd8 <HAL_RCC_GetHCLKFreq+0x60>)
 810acbc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810acbe:	4b05      	ldr	r3, [pc, #20]	; (810acd4 <HAL_RCC_GetHCLKFreq+0x5c>)
 810acc0:	681b      	ldr	r3, [r3, #0]
}
 810acc2:	4618      	mov	r0, r3
 810acc4:	3708      	adds	r7, #8
 810acc6:	46bd      	mov	sp, r7
 810acc8:	bd80      	pop	{r7, pc}
 810acca:	bf00      	nop
 810accc:	58024400 	.word	0x58024400
 810acd0:	0810c1e8 	.word	0x0810c1e8
 810acd4:	3004000c 	.word	0x3004000c
 810acd8:	30040008 	.word	0x30040008

0810acdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810acdc:	b580      	push	{r7, lr}
 810acde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810ace0:	f7ff ffca 	bl	810ac78 <HAL_RCC_GetHCLKFreq>
 810ace4:	4602      	mov	r2, r0
 810ace6:	4b06      	ldr	r3, [pc, #24]	; (810ad00 <HAL_RCC_GetPCLK1Freq+0x24>)
 810ace8:	69db      	ldr	r3, [r3, #28]
 810acea:	091b      	lsrs	r3, r3, #4
 810acec:	f003 0307 	and.w	r3, r3, #7
 810acf0:	4904      	ldr	r1, [pc, #16]	; (810ad04 <HAL_RCC_GetPCLK1Freq+0x28>)
 810acf2:	5ccb      	ldrb	r3, [r1, r3]
 810acf4:	f003 031f 	and.w	r3, r3, #31
 810acf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810acfc:	4618      	mov	r0, r3
 810acfe:	bd80      	pop	{r7, pc}
 810ad00:	58024400 	.word	0x58024400
 810ad04:	0810c1e8 	.word	0x0810c1e8

0810ad08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810ad08:	b480      	push	{r7}
 810ad0a:	b083      	sub	sp, #12
 810ad0c:	af00      	add	r7, sp, #0
 810ad0e:	6078      	str	r0, [r7, #4]
 810ad10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810ad12:	687b      	ldr	r3, [r7, #4]
 810ad14:	223f      	movs	r2, #63	; 0x3f
 810ad16:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810ad18:	4b1a      	ldr	r3, [pc, #104]	; (810ad84 <HAL_RCC_GetClockConfig+0x7c>)
 810ad1a:	691b      	ldr	r3, [r3, #16]
 810ad1c:	f003 0207 	and.w	r2, r3, #7
 810ad20:	687b      	ldr	r3, [r7, #4]
 810ad22:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810ad24:	4b17      	ldr	r3, [pc, #92]	; (810ad84 <HAL_RCC_GetClockConfig+0x7c>)
 810ad26:	699b      	ldr	r3, [r3, #24]
 810ad28:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 810ad2c:	687b      	ldr	r3, [r7, #4]
 810ad2e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810ad30:	4b14      	ldr	r3, [pc, #80]	; (810ad84 <HAL_RCC_GetClockConfig+0x7c>)
 810ad32:	699b      	ldr	r3, [r3, #24]
 810ad34:	f003 020f 	and.w	r2, r3, #15
 810ad38:	687b      	ldr	r3, [r7, #4]
 810ad3a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810ad3c:	4b11      	ldr	r3, [pc, #68]	; (810ad84 <HAL_RCC_GetClockConfig+0x7c>)
 810ad3e:	699b      	ldr	r3, [r3, #24]
 810ad40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810ad44:	687b      	ldr	r3, [r7, #4]
 810ad46:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810ad48:	4b0e      	ldr	r3, [pc, #56]	; (810ad84 <HAL_RCC_GetClockConfig+0x7c>)
 810ad4a:	69db      	ldr	r3, [r3, #28]
 810ad4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810ad50:	687b      	ldr	r3, [r7, #4]
 810ad52:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810ad54:	4b0b      	ldr	r3, [pc, #44]	; (810ad84 <HAL_RCC_GetClockConfig+0x7c>)
 810ad56:	69db      	ldr	r3, [r3, #28]
 810ad58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810ad5c:	687b      	ldr	r3, [r7, #4]
 810ad5e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810ad60:	4b08      	ldr	r3, [pc, #32]	; (810ad84 <HAL_RCC_GetClockConfig+0x7c>)
 810ad62:	6a1b      	ldr	r3, [r3, #32]
 810ad64:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810ad68:	687b      	ldr	r3, [r7, #4]
 810ad6a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810ad6c:	4b06      	ldr	r3, [pc, #24]	; (810ad88 <HAL_RCC_GetClockConfig+0x80>)
 810ad6e:	681b      	ldr	r3, [r3, #0]
 810ad70:	f003 020f 	and.w	r2, r3, #15
 810ad74:	683b      	ldr	r3, [r7, #0]
 810ad76:	601a      	str	r2, [r3, #0]
}
 810ad78:	bf00      	nop
 810ad7a:	370c      	adds	r7, #12
 810ad7c:	46bd      	mov	sp, r7
 810ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad82:	4770      	bx	lr
 810ad84:	58024400 	.word	0x58024400
 810ad88:	52002000 	.word	0x52002000

0810ad8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810ad8c:	b580      	push	{r7, lr}
 810ad8e:	b082      	sub	sp, #8
 810ad90:	af00      	add	r7, sp, #0
 810ad92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ad94:	687b      	ldr	r3, [r7, #4]
 810ad96:	2b00      	cmp	r3, #0
 810ad98:	d101      	bne.n	810ad9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810ad9a:	2301      	movs	r3, #1
 810ad9c:	e049      	b.n	810ae32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ad9e:	687b      	ldr	r3, [r7, #4]
 810ada0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810ada4:	b2db      	uxtb	r3, r3
 810ada6:	2b00      	cmp	r3, #0
 810ada8:	d106      	bne.n	810adb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810adaa:	687b      	ldr	r3, [r7, #4]
 810adac:	2200      	movs	r2, #0
 810adae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810adb2:	6878      	ldr	r0, [r7, #4]
 810adb4:	f000 f841 	bl	810ae3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810adb8:	687b      	ldr	r3, [r7, #4]
 810adba:	2202      	movs	r2, #2
 810adbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810adc0:	687b      	ldr	r3, [r7, #4]
 810adc2:	681a      	ldr	r2, [r3, #0]
 810adc4:	687b      	ldr	r3, [r7, #4]
 810adc6:	3304      	adds	r3, #4
 810adc8:	4619      	mov	r1, r3
 810adca:	4610      	mov	r0, r2
 810adcc:	f000 f9be 	bl	810b14c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810add0:	687b      	ldr	r3, [r7, #4]
 810add2:	2201      	movs	r2, #1
 810add4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810add8:	687b      	ldr	r3, [r7, #4]
 810adda:	2201      	movs	r2, #1
 810addc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810ade0:	687b      	ldr	r3, [r7, #4]
 810ade2:	2201      	movs	r2, #1
 810ade4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810ade8:	687b      	ldr	r3, [r7, #4]
 810adea:	2201      	movs	r2, #1
 810adec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810adf0:	687b      	ldr	r3, [r7, #4]
 810adf2:	2201      	movs	r2, #1
 810adf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810adf8:	687b      	ldr	r3, [r7, #4]
 810adfa:	2201      	movs	r2, #1
 810adfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810ae00:	687b      	ldr	r3, [r7, #4]
 810ae02:	2201      	movs	r2, #1
 810ae04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ae08:	687b      	ldr	r3, [r7, #4]
 810ae0a:	2201      	movs	r2, #1
 810ae0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810ae10:	687b      	ldr	r3, [r7, #4]
 810ae12:	2201      	movs	r2, #1
 810ae14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810ae18:	687b      	ldr	r3, [r7, #4]
 810ae1a:	2201      	movs	r2, #1
 810ae1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810ae20:	687b      	ldr	r3, [r7, #4]
 810ae22:	2201      	movs	r2, #1
 810ae24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810ae28:	687b      	ldr	r3, [r7, #4]
 810ae2a:	2201      	movs	r2, #1
 810ae2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810ae30:	2300      	movs	r3, #0
}
 810ae32:	4618      	mov	r0, r3
 810ae34:	3708      	adds	r7, #8
 810ae36:	46bd      	mov	sp, r7
 810ae38:	bd80      	pop	{r7, pc}

0810ae3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810ae3a:	b480      	push	{r7}
 810ae3c:	b083      	sub	sp, #12
 810ae3e:	af00      	add	r7, sp, #0
 810ae40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810ae42:	bf00      	nop
 810ae44:	370c      	adds	r7, #12
 810ae46:	46bd      	mov	sp, r7
 810ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae4c:	4770      	bx	lr
	...

0810ae50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810ae50:	b480      	push	{r7}
 810ae52:	b085      	sub	sp, #20
 810ae54:	af00      	add	r7, sp, #0
 810ae56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810ae58:	687b      	ldr	r3, [r7, #4]
 810ae5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810ae5e:	b2db      	uxtb	r3, r3
 810ae60:	2b01      	cmp	r3, #1
 810ae62:	d001      	beq.n	810ae68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810ae64:	2301      	movs	r3, #1
 810ae66:	e021      	b.n	810aeac <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ae68:	687b      	ldr	r3, [r7, #4]
 810ae6a:	2202      	movs	r2, #2
 810ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810ae70:	687b      	ldr	r3, [r7, #4]
 810ae72:	681b      	ldr	r3, [r3, #0]
 810ae74:	68da      	ldr	r2, [r3, #12]
 810ae76:	687b      	ldr	r3, [r7, #4]
 810ae78:	681b      	ldr	r3, [r3, #0]
 810ae7a:	f042 0201 	orr.w	r2, r2, #1
 810ae7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810ae80:	687b      	ldr	r3, [r7, #4]
 810ae82:	681b      	ldr	r3, [r3, #0]
 810ae84:	689a      	ldr	r2, [r3, #8]
 810ae86:	4b0c      	ldr	r3, [pc, #48]	; (810aeb8 <HAL_TIM_Base_Start_IT+0x68>)
 810ae88:	4013      	ands	r3, r2
 810ae8a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ae8c:	68fb      	ldr	r3, [r7, #12]
 810ae8e:	2b06      	cmp	r3, #6
 810ae90:	d00b      	beq.n	810aeaa <HAL_TIM_Base_Start_IT+0x5a>
 810ae92:	68fb      	ldr	r3, [r7, #12]
 810ae94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810ae98:	d007      	beq.n	810aeaa <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 810ae9a:	687b      	ldr	r3, [r7, #4]
 810ae9c:	681b      	ldr	r3, [r3, #0]
 810ae9e:	681a      	ldr	r2, [r3, #0]
 810aea0:	687b      	ldr	r3, [r7, #4]
 810aea2:	681b      	ldr	r3, [r3, #0]
 810aea4:	f042 0201 	orr.w	r2, r2, #1
 810aea8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 810aeaa:	2300      	movs	r3, #0
}
 810aeac:	4618      	mov	r0, r3
 810aeae:	3714      	adds	r7, #20
 810aeb0:	46bd      	mov	sp, r7
 810aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aeb6:	4770      	bx	lr
 810aeb8:	00010007 	.word	0x00010007

0810aebc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810aebc:	b580      	push	{r7, lr}
 810aebe:	b082      	sub	sp, #8
 810aec0:	af00      	add	r7, sp, #0
 810aec2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810aec4:	687b      	ldr	r3, [r7, #4]
 810aec6:	681b      	ldr	r3, [r3, #0]
 810aec8:	691b      	ldr	r3, [r3, #16]
 810aeca:	f003 0302 	and.w	r3, r3, #2
 810aece:	2b02      	cmp	r3, #2
 810aed0:	d122      	bne.n	810af18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810aed2:	687b      	ldr	r3, [r7, #4]
 810aed4:	681b      	ldr	r3, [r3, #0]
 810aed6:	68db      	ldr	r3, [r3, #12]
 810aed8:	f003 0302 	and.w	r3, r3, #2
 810aedc:	2b02      	cmp	r3, #2
 810aede:	d11b      	bne.n	810af18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810aee0:	687b      	ldr	r3, [r7, #4]
 810aee2:	681b      	ldr	r3, [r3, #0]
 810aee4:	f06f 0202 	mvn.w	r2, #2
 810aee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810aeea:	687b      	ldr	r3, [r7, #4]
 810aeec:	2201      	movs	r2, #1
 810aeee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810aef0:	687b      	ldr	r3, [r7, #4]
 810aef2:	681b      	ldr	r3, [r3, #0]
 810aef4:	699b      	ldr	r3, [r3, #24]
 810aef6:	f003 0303 	and.w	r3, r3, #3
 810aefa:	2b00      	cmp	r3, #0
 810aefc:	d003      	beq.n	810af06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810aefe:	6878      	ldr	r0, [r7, #4]
 810af00:	f000 f905 	bl	810b10e <HAL_TIM_IC_CaptureCallback>
 810af04:	e005      	b.n	810af12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810af06:	6878      	ldr	r0, [r7, #4]
 810af08:	f000 f8f7 	bl	810b0fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810af0c:	6878      	ldr	r0, [r7, #4]
 810af0e:	f000 f908 	bl	810b122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810af12:	687b      	ldr	r3, [r7, #4]
 810af14:	2200      	movs	r2, #0
 810af16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810af18:	687b      	ldr	r3, [r7, #4]
 810af1a:	681b      	ldr	r3, [r3, #0]
 810af1c:	691b      	ldr	r3, [r3, #16]
 810af1e:	f003 0304 	and.w	r3, r3, #4
 810af22:	2b04      	cmp	r3, #4
 810af24:	d122      	bne.n	810af6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810af26:	687b      	ldr	r3, [r7, #4]
 810af28:	681b      	ldr	r3, [r3, #0]
 810af2a:	68db      	ldr	r3, [r3, #12]
 810af2c:	f003 0304 	and.w	r3, r3, #4
 810af30:	2b04      	cmp	r3, #4
 810af32:	d11b      	bne.n	810af6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810af34:	687b      	ldr	r3, [r7, #4]
 810af36:	681b      	ldr	r3, [r3, #0]
 810af38:	f06f 0204 	mvn.w	r2, #4
 810af3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810af3e:	687b      	ldr	r3, [r7, #4]
 810af40:	2202      	movs	r2, #2
 810af42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810af44:	687b      	ldr	r3, [r7, #4]
 810af46:	681b      	ldr	r3, [r3, #0]
 810af48:	699b      	ldr	r3, [r3, #24]
 810af4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810af4e:	2b00      	cmp	r3, #0
 810af50:	d003      	beq.n	810af5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810af52:	6878      	ldr	r0, [r7, #4]
 810af54:	f000 f8db 	bl	810b10e <HAL_TIM_IC_CaptureCallback>
 810af58:	e005      	b.n	810af66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810af5a:	6878      	ldr	r0, [r7, #4]
 810af5c:	f000 f8cd 	bl	810b0fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810af60:	6878      	ldr	r0, [r7, #4]
 810af62:	f000 f8de 	bl	810b122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810af66:	687b      	ldr	r3, [r7, #4]
 810af68:	2200      	movs	r2, #0
 810af6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810af6c:	687b      	ldr	r3, [r7, #4]
 810af6e:	681b      	ldr	r3, [r3, #0]
 810af70:	691b      	ldr	r3, [r3, #16]
 810af72:	f003 0308 	and.w	r3, r3, #8
 810af76:	2b08      	cmp	r3, #8
 810af78:	d122      	bne.n	810afc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810af7a:	687b      	ldr	r3, [r7, #4]
 810af7c:	681b      	ldr	r3, [r3, #0]
 810af7e:	68db      	ldr	r3, [r3, #12]
 810af80:	f003 0308 	and.w	r3, r3, #8
 810af84:	2b08      	cmp	r3, #8
 810af86:	d11b      	bne.n	810afc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810af88:	687b      	ldr	r3, [r7, #4]
 810af8a:	681b      	ldr	r3, [r3, #0]
 810af8c:	f06f 0208 	mvn.w	r2, #8
 810af90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810af92:	687b      	ldr	r3, [r7, #4]
 810af94:	2204      	movs	r2, #4
 810af96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810af98:	687b      	ldr	r3, [r7, #4]
 810af9a:	681b      	ldr	r3, [r3, #0]
 810af9c:	69db      	ldr	r3, [r3, #28]
 810af9e:	f003 0303 	and.w	r3, r3, #3
 810afa2:	2b00      	cmp	r3, #0
 810afa4:	d003      	beq.n	810afae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810afa6:	6878      	ldr	r0, [r7, #4]
 810afa8:	f000 f8b1 	bl	810b10e <HAL_TIM_IC_CaptureCallback>
 810afac:	e005      	b.n	810afba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810afae:	6878      	ldr	r0, [r7, #4]
 810afb0:	f000 f8a3 	bl	810b0fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810afb4:	6878      	ldr	r0, [r7, #4]
 810afb6:	f000 f8b4 	bl	810b122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810afba:	687b      	ldr	r3, [r7, #4]
 810afbc:	2200      	movs	r2, #0
 810afbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810afc0:	687b      	ldr	r3, [r7, #4]
 810afc2:	681b      	ldr	r3, [r3, #0]
 810afc4:	691b      	ldr	r3, [r3, #16]
 810afc6:	f003 0310 	and.w	r3, r3, #16
 810afca:	2b10      	cmp	r3, #16
 810afcc:	d122      	bne.n	810b014 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810afce:	687b      	ldr	r3, [r7, #4]
 810afd0:	681b      	ldr	r3, [r3, #0]
 810afd2:	68db      	ldr	r3, [r3, #12]
 810afd4:	f003 0310 	and.w	r3, r3, #16
 810afd8:	2b10      	cmp	r3, #16
 810afda:	d11b      	bne.n	810b014 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810afdc:	687b      	ldr	r3, [r7, #4]
 810afde:	681b      	ldr	r3, [r3, #0]
 810afe0:	f06f 0210 	mvn.w	r2, #16
 810afe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810afe6:	687b      	ldr	r3, [r7, #4]
 810afe8:	2208      	movs	r2, #8
 810afea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810afec:	687b      	ldr	r3, [r7, #4]
 810afee:	681b      	ldr	r3, [r3, #0]
 810aff0:	69db      	ldr	r3, [r3, #28]
 810aff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810aff6:	2b00      	cmp	r3, #0
 810aff8:	d003      	beq.n	810b002 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810affa:	6878      	ldr	r0, [r7, #4]
 810affc:	f000 f887 	bl	810b10e <HAL_TIM_IC_CaptureCallback>
 810b000:	e005      	b.n	810b00e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810b002:	6878      	ldr	r0, [r7, #4]
 810b004:	f000 f879 	bl	810b0fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810b008:	6878      	ldr	r0, [r7, #4]
 810b00a:	f000 f88a 	bl	810b122 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810b00e:	687b      	ldr	r3, [r7, #4]
 810b010:	2200      	movs	r2, #0
 810b012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810b014:	687b      	ldr	r3, [r7, #4]
 810b016:	681b      	ldr	r3, [r3, #0]
 810b018:	691b      	ldr	r3, [r3, #16]
 810b01a:	f003 0301 	and.w	r3, r3, #1
 810b01e:	2b01      	cmp	r3, #1
 810b020:	d10e      	bne.n	810b040 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810b022:	687b      	ldr	r3, [r7, #4]
 810b024:	681b      	ldr	r3, [r3, #0]
 810b026:	68db      	ldr	r3, [r3, #12]
 810b028:	f003 0301 	and.w	r3, r3, #1
 810b02c:	2b01      	cmp	r3, #1
 810b02e:	d107      	bne.n	810b040 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810b030:	687b      	ldr	r3, [r7, #4]
 810b032:	681b      	ldr	r3, [r3, #0]
 810b034:	f06f 0201 	mvn.w	r2, #1
 810b038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810b03a:	6878      	ldr	r0, [r7, #4]
 810b03c:	f7fe f88c 	bl	8109158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 810b040:	687b      	ldr	r3, [r7, #4]
 810b042:	681b      	ldr	r3, [r3, #0]
 810b044:	691b      	ldr	r3, [r3, #16]
 810b046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b04a:	2b80      	cmp	r3, #128	; 0x80
 810b04c:	d10e      	bne.n	810b06c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810b04e:	687b      	ldr	r3, [r7, #4]
 810b050:	681b      	ldr	r3, [r3, #0]
 810b052:	68db      	ldr	r3, [r3, #12]
 810b054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b058:	2b80      	cmp	r3, #128	; 0x80
 810b05a:	d107      	bne.n	810b06c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810b05c:	687b      	ldr	r3, [r7, #4]
 810b05e:	681b      	ldr	r3, [r3, #0]
 810b060:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810b064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810b066:	6878      	ldr	r0, [r7, #4]
 810b068:	f000 f914 	bl	810b294 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810b06c:	687b      	ldr	r3, [r7, #4]
 810b06e:	681b      	ldr	r3, [r3, #0]
 810b070:	691b      	ldr	r3, [r3, #16]
 810b072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810b076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b07a:	d10e      	bne.n	810b09a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810b07c:	687b      	ldr	r3, [r7, #4]
 810b07e:	681b      	ldr	r3, [r3, #0]
 810b080:	68db      	ldr	r3, [r3, #12]
 810b082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b086:	2b80      	cmp	r3, #128	; 0x80
 810b088:	d107      	bne.n	810b09a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810b08a:	687b      	ldr	r3, [r7, #4]
 810b08c:	681b      	ldr	r3, [r3, #0]
 810b08e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810b092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810b094:	6878      	ldr	r0, [r7, #4]
 810b096:	f000 f907 	bl	810b2a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810b09a:	687b      	ldr	r3, [r7, #4]
 810b09c:	681b      	ldr	r3, [r3, #0]
 810b09e:	691b      	ldr	r3, [r3, #16]
 810b0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b0a4:	2b40      	cmp	r3, #64	; 0x40
 810b0a6:	d10e      	bne.n	810b0c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810b0a8:	687b      	ldr	r3, [r7, #4]
 810b0aa:	681b      	ldr	r3, [r3, #0]
 810b0ac:	68db      	ldr	r3, [r3, #12]
 810b0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b0b2:	2b40      	cmp	r3, #64	; 0x40
 810b0b4:	d107      	bne.n	810b0c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810b0b6:	687b      	ldr	r3, [r7, #4]
 810b0b8:	681b      	ldr	r3, [r3, #0]
 810b0ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810b0be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810b0c0:	6878      	ldr	r0, [r7, #4]
 810b0c2:	f000 f838 	bl	810b136 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810b0c6:	687b      	ldr	r3, [r7, #4]
 810b0c8:	681b      	ldr	r3, [r3, #0]
 810b0ca:	691b      	ldr	r3, [r3, #16]
 810b0cc:	f003 0320 	and.w	r3, r3, #32
 810b0d0:	2b20      	cmp	r3, #32
 810b0d2:	d10e      	bne.n	810b0f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810b0d4:	687b      	ldr	r3, [r7, #4]
 810b0d6:	681b      	ldr	r3, [r3, #0]
 810b0d8:	68db      	ldr	r3, [r3, #12]
 810b0da:	f003 0320 	and.w	r3, r3, #32
 810b0de:	2b20      	cmp	r3, #32
 810b0e0:	d107      	bne.n	810b0f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810b0e2:	687b      	ldr	r3, [r7, #4]
 810b0e4:	681b      	ldr	r3, [r3, #0]
 810b0e6:	f06f 0220 	mvn.w	r2, #32
 810b0ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810b0ec:	6878      	ldr	r0, [r7, #4]
 810b0ee:	f000 f8c7 	bl	810b280 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810b0f2:	bf00      	nop
 810b0f4:	3708      	adds	r7, #8
 810b0f6:	46bd      	mov	sp, r7
 810b0f8:	bd80      	pop	{r7, pc}

0810b0fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810b0fa:	b480      	push	{r7}
 810b0fc:	b083      	sub	sp, #12
 810b0fe:	af00      	add	r7, sp, #0
 810b100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810b102:	bf00      	nop
 810b104:	370c      	adds	r7, #12
 810b106:	46bd      	mov	sp, r7
 810b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b10c:	4770      	bx	lr

0810b10e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810b10e:	b480      	push	{r7}
 810b110:	b083      	sub	sp, #12
 810b112:	af00      	add	r7, sp, #0
 810b114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810b116:	bf00      	nop
 810b118:	370c      	adds	r7, #12
 810b11a:	46bd      	mov	sp, r7
 810b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b120:	4770      	bx	lr

0810b122 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810b122:	b480      	push	{r7}
 810b124:	b083      	sub	sp, #12
 810b126:	af00      	add	r7, sp, #0
 810b128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810b12a:	bf00      	nop
 810b12c:	370c      	adds	r7, #12
 810b12e:	46bd      	mov	sp, r7
 810b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b134:	4770      	bx	lr

0810b136 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810b136:	b480      	push	{r7}
 810b138:	b083      	sub	sp, #12
 810b13a:	af00      	add	r7, sp, #0
 810b13c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810b13e:	bf00      	nop
 810b140:	370c      	adds	r7, #12
 810b142:	46bd      	mov	sp, r7
 810b144:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b148:	4770      	bx	lr
	...

0810b14c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810b14c:	b480      	push	{r7}
 810b14e:	b085      	sub	sp, #20
 810b150:	af00      	add	r7, sp, #0
 810b152:	6078      	str	r0, [r7, #4]
 810b154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810b156:	687b      	ldr	r3, [r7, #4]
 810b158:	681b      	ldr	r3, [r3, #0]
 810b15a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810b15c:	687b      	ldr	r3, [r7, #4]
 810b15e:	4a40      	ldr	r2, [pc, #256]	; (810b260 <TIM_Base_SetConfig+0x114>)
 810b160:	4293      	cmp	r3, r2
 810b162:	d013      	beq.n	810b18c <TIM_Base_SetConfig+0x40>
 810b164:	687b      	ldr	r3, [r7, #4]
 810b166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b16a:	d00f      	beq.n	810b18c <TIM_Base_SetConfig+0x40>
 810b16c:	687b      	ldr	r3, [r7, #4]
 810b16e:	4a3d      	ldr	r2, [pc, #244]	; (810b264 <TIM_Base_SetConfig+0x118>)
 810b170:	4293      	cmp	r3, r2
 810b172:	d00b      	beq.n	810b18c <TIM_Base_SetConfig+0x40>
 810b174:	687b      	ldr	r3, [r7, #4]
 810b176:	4a3c      	ldr	r2, [pc, #240]	; (810b268 <TIM_Base_SetConfig+0x11c>)
 810b178:	4293      	cmp	r3, r2
 810b17a:	d007      	beq.n	810b18c <TIM_Base_SetConfig+0x40>
 810b17c:	687b      	ldr	r3, [r7, #4]
 810b17e:	4a3b      	ldr	r2, [pc, #236]	; (810b26c <TIM_Base_SetConfig+0x120>)
 810b180:	4293      	cmp	r3, r2
 810b182:	d003      	beq.n	810b18c <TIM_Base_SetConfig+0x40>
 810b184:	687b      	ldr	r3, [r7, #4]
 810b186:	4a3a      	ldr	r2, [pc, #232]	; (810b270 <TIM_Base_SetConfig+0x124>)
 810b188:	4293      	cmp	r3, r2
 810b18a:	d108      	bne.n	810b19e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810b18c:	68fb      	ldr	r3, [r7, #12]
 810b18e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810b192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810b194:	683b      	ldr	r3, [r7, #0]
 810b196:	685b      	ldr	r3, [r3, #4]
 810b198:	68fa      	ldr	r2, [r7, #12]
 810b19a:	4313      	orrs	r3, r2
 810b19c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810b19e:	687b      	ldr	r3, [r7, #4]
 810b1a0:	4a2f      	ldr	r2, [pc, #188]	; (810b260 <TIM_Base_SetConfig+0x114>)
 810b1a2:	4293      	cmp	r3, r2
 810b1a4:	d01f      	beq.n	810b1e6 <TIM_Base_SetConfig+0x9a>
 810b1a6:	687b      	ldr	r3, [r7, #4]
 810b1a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b1ac:	d01b      	beq.n	810b1e6 <TIM_Base_SetConfig+0x9a>
 810b1ae:	687b      	ldr	r3, [r7, #4]
 810b1b0:	4a2c      	ldr	r2, [pc, #176]	; (810b264 <TIM_Base_SetConfig+0x118>)
 810b1b2:	4293      	cmp	r3, r2
 810b1b4:	d017      	beq.n	810b1e6 <TIM_Base_SetConfig+0x9a>
 810b1b6:	687b      	ldr	r3, [r7, #4]
 810b1b8:	4a2b      	ldr	r2, [pc, #172]	; (810b268 <TIM_Base_SetConfig+0x11c>)
 810b1ba:	4293      	cmp	r3, r2
 810b1bc:	d013      	beq.n	810b1e6 <TIM_Base_SetConfig+0x9a>
 810b1be:	687b      	ldr	r3, [r7, #4]
 810b1c0:	4a2a      	ldr	r2, [pc, #168]	; (810b26c <TIM_Base_SetConfig+0x120>)
 810b1c2:	4293      	cmp	r3, r2
 810b1c4:	d00f      	beq.n	810b1e6 <TIM_Base_SetConfig+0x9a>
 810b1c6:	687b      	ldr	r3, [r7, #4]
 810b1c8:	4a29      	ldr	r2, [pc, #164]	; (810b270 <TIM_Base_SetConfig+0x124>)
 810b1ca:	4293      	cmp	r3, r2
 810b1cc:	d00b      	beq.n	810b1e6 <TIM_Base_SetConfig+0x9a>
 810b1ce:	687b      	ldr	r3, [r7, #4]
 810b1d0:	4a28      	ldr	r2, [pc, #160]	; (810b274 <TIM_Base_SetConfig+0x128>)
 810b1d2:	4293      	cmp	r3, r2
 810b1d4:	d007      	beq.n	810b1e6 <TIM_Base_SetConfig+0x9a>
 810b1d6:	687b      	ldr	r3, [r7, #4]
 810b1d8:	4a27      	ldr	r2, [pc, #156]	; (810b278 <TIM_Base_SetConfig+0x12c>)
 810b1da:	4293      	cmp	r3, r2
 810b1dc:	d003      	beq.n	810b1e6 <TIM_Base_SetConfig+0x9a>
 810b1de:	687b      	ldr	r3, [r7, #4]
 810b1e0:	4a26      	ldr	r2, [pc, #152]	; (810b27c <TIM_Base_SetConfig+0x130>)
 810b1e2:	4293      	cmp	r3, r2
 810b1e4:	d108      	bne.n	810b1f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810b1e6:	68fb      	ldr	r3, [r7, #12]
 810b1e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810b1ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810b1ee:	683b      	ldr	r3, [r7, #0]
 810b1f0:	68db      	ldr	r3, [r3, #12]
 810b1f2:	68fa      	ldr	r2, [r7, #12]
 810b1f4:	4313      	orrs	r3, r2
 810b1f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810b1f8:	68fb      	ldr	r3, [r7, #12]
 810b1fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810b1fe:	683b      	ldr	r3, [r7, #0]
 810b200:	695b      	ldr	r3, [r3, #20]
 810b202:	4313      	orrs	r3, r2
 810b204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810b206:	687b      	ldr	r3, [r7, #4]
 810b208:	68fa      	ldr	r2, [r7, #12]
 810b20a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810b20c:	683b      	ldr	r3, [r7, #0]
 810b20e:	689a      	ldr	r2, [r3, #8]
 810b210:	687b      	ldr	r3, [r7, #4]
 810b212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810b214:	683b      	ldr	r3, [r7, #0]
 810b216:	681a      	ldr	r2, [r3, #0]
 810b218:	687b      	ldr	r3, [r7, #4]
 810b21a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810b21c:	687b      	ldr	r3, [r7, #4]
 810b21e:	4a10      	ldr	r2, [pc, #64]	; (810b260 <TIM_Base_SetConfig+0x114>)
 810b220:	4293      	cmp	r3, r2
 810b222:	d00f      	beq.n	810b244 <TIM_Base_SetConfig+0xf8>
 810b224:	687b      	ldr	r3, [r7, #4]
 810b226:	4a12      	ldr	r2, [pc, #72]	; (810b270 <TIM_Base_SetConfig+0x124>)
 810b228:	4293      	cmp	r3, r2
 810b22a:	d00b      	beq.n	810b244 <TIM_Base_SetConfig+0xf8>
 810b22c:	687b      	ldr	r3, [r7, #4]
 810b22e:	4a11      	ldr	r2, [pc, #68]	; (810b274 <TIM_Base_SetConfig+0x128>)
 810b230:	4293      	cmp	r3, r2
 810b232:	d007      	beq.n	810b244 <TIM_Base_SetConfig+0xf8>
 810b234:	687b      	ldr	r3, [r7, #4]
 810b236:	4a10      	ldr	r2, [pc, #64]	; (810b278 <TIM_Base_SetConfig+0x12c>)
 810b238:	4293      	cmp	r3, r2
 810b23a:	d003      	beq.n	810b244 <TIM_Base_SetConfig+0xf8>
 810b23c:	687b      	ldr	r3, [r7, #4]
 810b23e:	4a0f      	ldr	r2, [pc, #60]	; (810b27c <TIM_Base_SetConfig+0x130>)
 810b240:	4293      	cmp	r3, r2
 810b242:	d103      	bne.n	810b24c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810b244:	683b      	ldr	r3, [r7, #0]
 810b246:	691a      	ldr	r2, [r3, #16]
 810b248:	687b      	ldr	r3, [r7, #4]
 810b24a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810b24c:	687b      	ldr	r3, [r7, #4]
 810b24e:	2201      	movs	r2, #1
 810b250:	615a      	str	r2, [r3, #20]
}
 810b252:	bf00      	nop
 810b254:	3714      	adds	r7, #20
 810b256:	46bd      	mov	sp, r7
 810b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b25c:	4770      	bx	lr
 810b25e:	bf00      	nop
 810b260:	40010000 	.word	0x40010000
 810b264:	40000400 	.word	0x40000400
 810b268:	40000800 	.word	0x40000800
 810b26c:	40000c00 	.word	0x40000c00
 810b270:	40010400 	.word	0x40010400
 810b274:	40014000 	.word	0x40014000
 810b278:	40014400 	.word	0x40014400
 810b27c:	40014800 	.word	0x40014800

0810b280 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810b280:	b480      	push	{r7}
 810b282:	b083      	sub	sp, #12
 810b284:	af00      	add	r7, sp, #0
 810b286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810b288:	bf00      	nop
 810b28a:	370c      	adds	r7, #12
 810b28c:	46bd      	mov	sp, r7
 810b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b292:	4770      	bx	lr

0810b294 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810b294:	b480      	push	{r7}
 810b296:	b083      	sub	sp, #12
 810b298:	af00      	add	r7, sp, #0
 810b29a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810b29c:	bf00      	nop
 810b29e:	370c      	adds	r7, #12
 810b2a0:	46bd      	mov	sp, r7
 810b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2a6:	4770      	bx	lr

0810b2a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810b2a8:	b480      	push	{r7}
 810b2aa:	b083      	sub	sp, #12
 810b2ac:	af00      	add	r7, sp, #0
 810b2ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810b2b0:	bf00      	nop
 810b2b2:	370c      	adds	r7, #12
 810b2b4:	46bd      	mov	sp, r7
 810b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2ba:	4770      	bx	lr

0810b2bc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810b2bc:	b580      	push	{r7, lr}
 810b2be:	b084      	sub	sp, #16
 810b2c0:	af00      	add	r7, sp, #0
 810b2c2:	60f8      	str	r0, [r7, #12]
 810b2c4:	60b9      	str	r1, [r7, #8]
 810b2c6:	4613      	mov	r3, r2
 810b2c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810b2ca:	68fb      	ldr	r3, [r7, #12]
 810b2cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810b2d0:	2b20      	cmp	r3, #32
 810b2d2:	d168      	bne.n	810b3a6 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810b2d4:	68bb      	ldr	r3, [r7, #8]
 810b2d6:	2b00      	cmp	r3, #0
 810b2d8:	d002      	beq.n	810b2e0 <HAL_UART_Transmit_DMA+0x24>
 810b2da:	88fb      	ldrh	r3, [r7, #6]
 810b2dc:	2b00      	cmp	r3, #0
 810b2de:	d101      	bne.n	810b2e4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810b2e0:	2301      	movs	r3, #1
 810b2e2:	e061      	b.n	810b3a8 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810b2e4:	68fb      	ldr	r3, [r7, #12]
 810b2e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810b2ea:	2b01      	cmp	r3, #1
 810b2ec:	d101      	bne.n	810b2f2 <HAL_UART_Transmit_DMA+0x36>
 810b2ee:	2302      	movs	r3, #2
 810b2f0:	e05a      	b.n	810b3a8 <HAL_UART_Transmit_DMA+0xec>
 810b2f2:	68fb      	ldr	r3, [r7, #12]
 810b2f4:	2201      	movs	r2, #1
 810b2f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 810b2fa:	68fb      	ldr	r3, [r7, #12]
 810b2fc:	68ba      	ldr	r2, [r7, #8]
 810b2fe:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810b300:	68fb      	ldr	r3, [r7, #12]
 810b302:	88fa      	ldrh	r2, [r7, #6]
 810b304:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810b308:	68fb      	ldr	r3, [r7, #12]
 810b30a:	88fa      	ldrh	r2, [r7, #6]
 810b30c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b310:	68fb      	ldr	r3, [r7, #12]
 810b312:	2200      	movs	r2, #0
 810b314:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810b318:	68fb      	ldr	r3, [r7, #12]
 810b31a:	2221      	movs	r2, #33	; 0x21
 810b31c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 810b320:	68fb      	ldr	r3, [r7, #12]
 810b322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b324:	2b00      	cmp	r3, #0
 810b326:	d02c      	beq.n	810b382 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810b328:	68fb      	ldr	r3, [r7, #12]
 810b32a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b32c:	4a20      	ldr	r2, [pc, #128]	; (810b3b0 <HAL_UART_Transmit_DMA+0xf4>)
 810b32e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810b330:	68fb      	ldr	r3, [r7, #12]
 810b332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b334:	4a1f      	ldr	r2, [pc, #124]	; (810b3b4 <HAL_UART_Transmit_DMA+0xf8>)
 810b336:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810b338:	68fb      	ldr	r3, [r7, #12]
 810b33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b33c:	4a1e      	ldr	r2, [pc, #120]	; (810b3b8 <HAL_UART_Transmit_DMA+0xfc>)
 810b33e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810b340:	68fb      	ldr	r3, [r7, #12]
 810b342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b344:	2200      	movs	r2, #0
 810b346:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810b348:	68fb      	ldr	r3, [r7, #12]
 810b34a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 810b34c:	68fb      	ldr	r3, [r7, #12]
 810b34e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b350:	4619      	mov	r1, r3
 810b352:	68fb      	ldr	r3, [r7, #12]
 810b354:	681b      	ldr	r3, [r3, #0]
 810b356:	3328      	adds	r3, #40	; 0x28
 810b358:	461a      	mov	r2, r3
 810b35a:	88fb      	ldrh	r3, [r7, #6]
 810b35c:	f7fe fc06 	bl	8109b6c <HAL_DMA_Start_IT>
 810b360:	4603      	mov	r3, r0
 810b362:	2b00      	cmp	r3, #0
 810b364:	d00d      	beq.n	810b382 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810b366:	68fb      	ldr	r3, [r7, #12]
 810b368:	2210      	movs	r2, #16
 810b36a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810b36e:	68fb      	ldr	r3, [r7, #12]
 810b370:	2200      	movs	r2, #0
 810b372:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810b376:	68fb      	ldr	r3, [r7, #12]
 810b378:	2220      	movs	r2, #32
 810b37a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 810b37e:	2301      	movs	r3, #1
 810b380:	e012      	b.n	810b3a8 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810b382:	68fb      	ldr	r3, [r7, #12]
 810b384:	681b      	ldr	r3, [r3, #0]
 810b386:	2240      	movs	r2, #64	; 0x40
 810b388:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810b38a:	68fb      	ldr	r3, [r7, #12]
 810b38c:	2200      	movs	r2, #0
 810b38e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810b392:	68fb      	ldr	r3, [r7, #12]
 810b394:	681b      	ldr	r3, [r3, #0]
 810b396:	689a      	ldr	r2, [r3, #8]
 810b398:	68fb      	ldr	r3, [r7, #12]
 810b39a:	681b      	ldr	r3, [r3, #0]
 810b39c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810b3a0:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810b3a2:	2300      	movs	r3, #0
 810b3a4:	e000      	b.n	810b3a8 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810b3a6:	2302      	movs	r3, #2
  }
}
 810b3a8:	4618      	mov	r0, r3
 810b3aa:	3710      	adds	r7, #16
 810b3ac:	46bd      	mov	sp, r7
 810b3ae:	bd80      	pop	{r7, pc}
 810b3b0:	0810b467 	.word	0x0810b467
 810b3b4:	0810b4b7 	.word	0x0810b4b7
 810b3b8:	0810b4d3 	.word	0x0810b4d3

0810b3bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810b3bc:	b480      	push	{r7}
 810b3be:	b083      	sub	sp, #12
 810b3c0:	af00      	add	r7, sp, #0
 810b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810b3c4:	bf00      	nop
 810b3c6:	370c      	adds	r7, #12
 810b3c8:	46bd      	mov	sp, r7
 810b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3ce:	4770      	bx	lr

0810b3d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810b3d0:	b480      	push	{r7}
 810b3d2:	b083      	sub	sp, #12
 810b3d4:	af00      	add	r7, sp, #0
 810b3d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810b3d8:	bf00      	nop
 810b3da:	370c      	adds	r7, #12
 810b3dc:	46bd      	mov	sp, r7
 810b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3e2:	4770      	bx	lr

0810b3e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810b3e4:	b480      	push	{r7}
 810b3e6:	b083      	sub	sp, #12
 810b3e8:	af00      	add	r7, sp, #0
 810b3ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810b3ec:	687b      	ldr	r3, [r7, #4]
 810b3ee:	681b      	ldr	r3, [r3, #0]
 810b3f0:	681a      	ldr	r2, [r3, #0]
 810b3f2:	687b      	ldr	r3, [r7, #4]
 810b3f4:	681b      	ldr	r3, [r3, #0]
 810b3f6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810b3fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810b3fc:	687b      	ldr	r3, [r7, #4]
 810b3fe:	681b      	ldr	r3, [r3, #0]
 810b400:	689a      	ldr	r2, [r3, #8]
 810b402:	687b      	ldr	r3, [r7, #4]
 810b404:	681b      	ldr	r3, [r3, #0]
 810b406:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810b40a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810b40c:	687b      	ldr	r3, [r7, #4]
 810b40e:	2220      	movs	r2, #32
 810b410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 810b414:	bf00      	nop
 810b416:	370c      	adds	r7, #12
 810b418:	46bd      	mov	sp, r7
 810b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b41e:	4770      	bx	lr

0810b420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810b420:	b480      	push	{r7}
 810b422:	b083      	sub	sp, #12
 810b424:	af00      	add	r7, sp, #0
 810b426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b428:	687b      	ldr	r3, [r7, #4]
 810b42a:	681b      	ldr	r3, [r3, #0]
 810b42c:	681a      	ldr	r2, [r3, #0]
 810b42e:	687b      	ldr	r3, [r7, #4]
 810b430:	681b      	ldr	r3, [r3, #0]
 810b432:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810b436:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b438:	687b      	ldr	r3, [r7, #4]
 810b43a:	681b      	ldr	r3, [r3, #0]
 810b43c:	689b      	ldr	r3, [r3, #8]
 810b43e:	687a      	ldr	r2, [r7, #4]
 810b440:	6812      	ldr	r2, [r2, #0]
 810b442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810b446:	f023 0301 	bic.w	r3, r3, #1
 810b44a:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810b44c:	687b      	ldr	r3, [r7, #4]
 810b44e:	2220      	movs	r2, #32
 810b450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810b454:	687b      	ldr	r3, [r7, #4]
 810b456:	2200      	movs	r2, #0
 810b458:	66da      	str	r2, [r3, #108]	; 0x6c
}
 810b45a:	bf00      	nop
 810b45c:	370c      	adds	r7, #12
 810b45e:	46bd      	mov	sp, r7
 810b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b464:	4770      	bx	lr

0810b466 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810b466:	b580      	push	{r7, lr}
 810b468:	b084      	sub	sp, #16
 810b46a:	af00      	add	r7, sp, #0
 810b46c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b46e:	687b      	ldr	r3, [r7, #4]
 810b470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b472:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810b474:	687b      	ldr	r3, [r7, #4]
 810b476:	69db      	ldr	r3, [r3, #28]
 810b478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b47c:	d014      	beq.n	810b4a8 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810b47e:	68fb      	ldr	r3, [r7, #12]
 810b480:	2200      	movs	r2, #0
 810b482:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810b486:	68fb      	ldr	r3, [r7, #12]
 810b488:	681b      	ldr	r3, [r3, #0]
 810b48a:	689a      	ldr	r2, [r3, #8]
 810b48c:	68fb      	ldr	r3, [r7, #12]
 810b48e:	681b      	ldr	r3, [r3, #0]
 810b490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810b494:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810b496:	68fb      	ldr	r3, [r7, #12]
 810b498:	681b      	ldr	r3, [r3, #0]
 810b49a:	681a      	ldr	r2, [r3, #0]
 810b49c:	68fb      	ldr	r3, [r7, #12]
 810b49e:	681b      	ldr	r3, [r3, #0]
 810b4a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810b4a4:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810b4a6:	e002      	b.n	810b4ae <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810b4a8:	68f8      	ldr	r0, [r7, #12]
 810b4aa:	f774 ff99 	bl	80803e0 <HAL_UART_TxCpltCallback>
}
 810b4ae:	bf00      	nop
 810b4b0:	3710      	adds	r7, #16
 810b4b2:	46bd      	mov	sp, r7
 810b4b4:	bd80      	pop	{r7, pc}

0810b4b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810b4b6:	b580      	push	{r7, lr}
 810b4b8:	b084      	sub	sp, #16
 810b4ba:	af00      	add	r7, sp, #0
 810b4bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b4be:	687b      	ldr	r3, [r7, #4]
 810b4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b4c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810b4c4:	68f8      	ldr	r0, [r7, #12]
 810b4c6:	f7ff ff79 	bl	810b3bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b4ca:	bf00      	nop
 810b4cc:	3710      	adds	r7, #16
 810b4ce:	46bd      	mov	sp, r7
 810b4d0:	bd80      	pop	{r7, pc}

0810b4d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810b4d2:	b580      	push	{r7, lr}
 810b4d4:	b086      	sub	sp, #24
 810b4d6:	af00      	add	r7, sp, #0
 810b4d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b4da:	687b      	ldr	r3, [r7, #4]
 810b4dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b4de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810b4e0:	697b      	ldr	r3, [r7, #20]
 810b4e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810b4e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810b4e8:	697b      	ldr	r3, [r7, #20]
 810b4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b4ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810b4f0:	697b      	ldr	r3, [r7, #20]
 810b4f2:	681b      	ldr	r3, [r3, #0]
 810b4f4:	689b      	ldr	r3, [r3, #8]
 810b4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b4fa:	2b80      	cmp	r3, #128	; 0x80
 810b4fc:	d109      	bne.n	810b512 <UART_DMAError+0x40>
 810b4fe:	693b      	ldr	r3, [r7, #16]
 810b500:	2b21      	cmp	r3, #33	; 0x21
 810b502:	d106      	bne.n	810b512 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810b504:	697b      	ldr	r3, [r7, #20]
 810b506:	2200      	movs	r2, #0
 810b508:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810b50c:	6978      	ldr	r0, [r7, #20]
 810b50e:	f7ff ff69 	bl	810b3e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810b512:	697b      	ldr	r3, [r7, #20]
 810b514:	681b      	ldr	r3, [r3, #0]
 810b516:	689b      	ldr	r3, [r3, #8]
 810b518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b51c:	2b40      	cmp	r3, #64	; 0x40
 810b51e:	d109      	bne.n	810b534 <UART_DMAError+0x62>
 810b520:	68fb      	ldr	r3, [r7, #12]
 810b522:	2b22      	cmp	r3, #34	; 0x22
 810b524:	d106      	bne.n	810b534 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810b526:	697b      	ldr	r3, [r7, #20]
 810b528:	2200      	movs	r2, #0
 810b52a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810b52e:	6978      	ldr	r0, [r7, #20]
 810b530:	f7ff ff76 	bl	810b420 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810b534:	697b      	ldr	r3, [r7, #20]
 810b536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810b53a:	f043 0210 	orr.w	r2, r3, #16
 810b53e:	697b      	ldr	r3, [r7, #20]
 810b540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810b544:	6978      	ldr	r0, [r7, #20]
 810b546:	f7ff ff43 	bl	810b3d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b54a:	bf00      	nop
 810b54c:	3718      	adds	r7, #24
 810b54e:	46bd      	mov	sp, r7
 810b550:	bd80      	pop	{r7, pc}
	...

0810b554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810b554:	b480      	push	{r7}
 810b556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810b558:	4b0b      	ldr	r3, [pc, #44]	; (810b588 <SystemInit+0x34>)
 810b55a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810b55e:	4a0a      	ldr	r2, [pc, #40]	; (810b588 <SystemInit+0x34>)
 810b560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810b564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810b568:	4b07      	ldr	r3, [pc, #28]	; (810b588 <SystemInit+0x34>)
 810b56a:	691b      	ldr	r3, [r3, #16]
 810b56c:	4a06      	ldr	r2, [pc, #24]	; (810b588 <SystemInit+0x34>)
 810b56e:	f043 0310 	orr.w	r3, r3, #16
 810b572:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810b574:	4b04      	ldr	r3, [pc, #16]	; (810b588 <SystemInit+0x34>)
 810b576:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810b57a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810b57c:	bf00      	nop
 810b57e:	46bd      	mov	sp, r7
 810b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b584:	4770      	bx	lr
 810b586:	bf00      	nop
 810b588:	e000ed00 	.word	0xe000ed00

0810b58c <_Znwj>:
  * @param[in]  size_t size
  *
  * @return void *
********************************************************************************/
void * operator new(size_t size) noexcept
{
 810b58c:	b580      	push	{r7, lr}
 810b58e:	b084      	sub	sp, #16
 810b590:	af00      	add	r7, sp, #0
 810b592:	6078      	str	r0, [r7, #4]
	void *ptr;

	if ( IS_NOT( size ) )
 810b594:	687b      	ldr	r3, [r7, #4]
 810b596:	2b00      	cmp	r3, #0
 810b598:	d102      	bne.n	810b5a0 <_Znwj+0x14>
	{
		++size;
 810b59a:	687b      	ldr	r3, [r7, #4]
 810b59c:	3301      	adds	r3, #1
 810b59e:	607b      	str	r3, [r7, #4]
	}

	ptr = malloc_internal(size);
 810b5a0:	6878      	ldr	r0, [r7, #4]
 810b5a2:	f7fd ff47 	bl	8109434 <malloc_internal>
 810b5a6:	4603      	mov	r3, r0
 810b5a8:	60fb      	str	r3, [r7, #12]

	return ptr;
 810b5aa:	68fb      	ldr	r3, [r7, #12]
}
 810b5ac:	4618      	mov	r0, r3
 810b5ae:	3710      	adds	r7, #16
 810b5b0:	46bd      	mov	sp, r7
 810b5b2:	bd80      	pop	{r7, pc}

0810b5b4 <_ZdlPvj>:
  * @param[in]  size_t size
	*
  * @return none
********************************************************************************/
void operator delete(void* ptr, size_t size) noexcept
{
 810b5b4:	b580      	push	{r7, lr}
 810b5b6:	b082      	sub	sp, #8
 810b5b8:	af00      	add	r7, sp, #0
 810b5ba:	6078      	str	r0, [r7, #4]
 810b5bc:	6039      	str	r1, [r7, #0]
	free_internal(ptr);
 810b5be:	6878      	ldr	r0, [r7, #4]
 810b5c0:	f7fd ffdb 	bl	810957a <free_internal>
	__SUPRESS_UNUSED_VAR(size);
}
 810b5c4:	bf00      	nop
 810b5c6:	3708      	adds	r7, #8
 810b5c8:	46bd      	mov	sp, r7
 810b5ca:	bd80      	pop	{r7, pc}

0810b5cc <_ZN4GPIOC1EPv>:
********************************************************************************/
class GPIO
{
  void * address;
  public:
  GPIO(void * addr) { address = addr; }
 810b5cc:	b480      	push	{r7}
 810b5ce:	b083      	sub	sp, #12
 810b5d0:	af00      	add	r7, sp, #0
 810b5d2:	6078      	str	r0, [r7, #4]
 810b5d4:	6039      	str	r1, [r7, #0]
 810b5d6:	687b      	ldr	r3, [r7, #4]
 810b5d8:	683a      	ldr	r2, [r7, #0]
 810b5da:	601a      	str	r2, [r3, #0]
 810b5dc:	687b      	ldr	r3, [r7, #4]
 810b5de:	4618      	mov	r0, r3
 810b5e0:	370c      	adds	r7, #12
 810b5e2:	46bd      	mov	sp, r7
 810b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5e8:	4770      	bx	lr

0810b5ea <_ZL12read_uleb128PKhPm>:
 810b5ea:	b530      	push	{r4, r5, lr}
 810b5ec:	2300      	movs	r3, #0
 810b5ee:	461a      	mov	r2, r3
 810b5f0:	f810 5b01 	ldrb.w	r5, [r0], #1
 810b5f4:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 810b5f8:	4094      	lsls	r4, r2
 810b5fa:	4323      	orrs	r3, r4
 810b5fc:	062c      	lsls	r4, r5, #24
 810b5fe:	f102 0207 	add.w	r2, r2, #7
 810b602:	d4f5      	bmi.n	810b5f0 <_ZL12read_uleb128PKhPm+0x6>
 810b604:	600b      	str	r3, [r1, #0]
 810b606:	bd30      	pop	{r4, r5, pc}

0810b608 <_ZL12read_sleb128PKhPl>:
 810b608:	b530      	push	{r4, r5, lr}
 810b60a:	2300      	movs	r3, #0
 810b60c:	461a      	mov	r2, r3
 810b60e:	f810 4b01 	ldrb.w	r4, [r0], #1
 810b612:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 810b616:	4095      	lsls	r5, r2
 810b618:	432b      	orrs	r3, r5
 810b61a:	0625      	lsls	r5, r4, #24
 810b61c:	f102 0207 	add.w	r2, r2, #7
 810b620:	d4f5      	bmi.n	810b60e <_ZL12read_sleb128PKhPl+0x6>
 810b622:	2a1f      	cmp	r2, #31
 810b624:	d806      	bhi.n	810b634 <_ZL12read_sleb128PKhPl+0x2c>
 810b626:	0664      	lsls	r4, r4, #25
 810b628:	bf42      	ittt	mi
 810b62a:	f04f 34ff 	movmi.w	r4, #4294967295
 810b62e:	fa04 f202 	lslmi.w	r2, r4, r2
 810b632:	4313      	orrmi	r3, r2
 810b634:	600b      	str	r3, [r1, #0]
 810b636:	bd30      	pop	{r4, r5, pc}

0810b638 <_ZL28read_encoded_value_with_basehjPKhPj>:
 810b638:	2850      	cmp	r0, #80	; 0x50
 810b63a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 810b63e:	4606      	mov	r6, r0
 810b640:	4688      	mov	r8, r1
 810b642:	4615      	mov	r5, r2
 810b644:	461f      	mov	r7, r3
 810b646:	d108      	bne.n	810b65a <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 810b648:	3203      	adds	r2, #3
 810b64a:	f022 0003 	bic.w	r0, r2, #3
 810b64e:	f850 4b04 	ldr.w	r4, [r0], #4
 810b652:	603c      	str	r4, [r7, #0]
 810b654:	b002      	add	sp, #8
 810b656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b65a:	f000 030f 	and.w	r3, r0, #15
 810b65e:	2b0c      	cmp	r3, #12
 810b660:	d82e      	bhi.n	810b6c0 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 810b662:	e8df f003 	tbb	[pc, r3]
 810b666:	0725      	.short	0x0725
 810b668:	2d29251d 	.word	0x2d29251d
 810b66c:	182d2d2d 	.word	0x182d2d2d
 810b670:	2521      	.short	0x2521
 810b672:	29          	.byte	0x29
 810b673:	00          	.byte	0x00
 810b674:	a901      	add	r1, sp, #4
 810b676:	4628      	mov	r0, r5
 810b678:	f7ff ffb7 	bl	810b5ea <_ZL12read_uleb128PKhPm>
 810b67c:	9c01      	ldr	r4, [sp, #4]
 810b67e:	2c00      	cmp	r4, #0
 810b680:	d0e7      	beq.n	810b652 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 810b682:	f006 0370 	and.w	r3, r6, #112	; 0x70
 810b686:	2b10      	cmp	r3, #16
 810b688:	bf08      	it	eq
 810b68a:	46a8      	moveq	r8, r5
 810b68c:	4444      	add	r4, r8
 810b68e:	0633      	lsls	r3, r6, #24
 810b690:	bf48      	it	mi
 810b692:	6824      	ldrmi	r4, [r4, #0]
 810b694:	e7dd      	b.n	810b652 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 810b696:	a901      	add	r1, sp, #4
 810b698:	4628      	mov	r0, r5
 810b69a:	f7ff ffb5 	bl	810b608 <_ZL12read_sleb128PKhPl>
 810b69e:	e7ed      	b.n	810b67c <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 810b6a0:	4628      	mov	r0, r5
 810b6a2:	f830 4b02 	ldrh.w	r4, [r0], #2
 810b6a6:	e7ea      	b.n	810b67e <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 810b6a8:	4628      	mov	r0, r5
 810b6aa:	f930 4b02 	ldrsh.w	r4, [r0], #2
 810b6ae:	e7e6      	b.n	810b67e <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 810b6b0:	4628      	mov	r0, r5
 810b6b2:	f850 4b04 	ldr.w	r4, [r0], #4
 810b6b6:	e7e2      	b.n	810b67e <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 810b6b8:	4628      	mov	r0, r5
 810b6ba:	f850 4b08 	ldr.w	r4, [r0], #8
 810b6be:	e7de      	b.n	810b67e <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 810b6c0:	f000 fc68 	bl	810bf94 <abort>

0810b6c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 810b6c4:	b508      	push	{r3, lr}
 810b6c6:	4603      	mov	r3, r0
 810b6c8:	2bff      	cmp	r3, #255	; 0xff
 810b6ca:	4608      	mov	r0, r1
 810b6cc:	d010      	beq.n	810b6f0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 810b6ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810b6d2:	2a30      	cmp	r2, #48	; 0x30
 810b6d4:	d012      	beq.n	810b6fc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 810b6d6:	d807      	bhi.n	810b6e8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 810b6d8:	2a20      	cmp	r2, #32
 810b6da:	d00b      	beq.n	810b6f4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 810b6dc:	d802      	bhi.n	810b6e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 810b6de:	f013 0f60 	tst.w	r3, #96	; 0x60
 810b6e2:	d005      	beq.n	810b6f0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 810b6e4:	f000 fc56 	bl	810bf94 <abort>
 810b6e8:	2a40      	cmp	r2, #64	; 0x40
 810b6ea:	d00b      	beq.n	810b704 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 810b6ec:	2a50      	cmp	r2, #80	; 0x50
 810b6ee:	d1f9      	bne.n	810b6e4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 810b6f0:	2000      	movs	r0, #0
 810b6f2:	bd08      	pop	{r3, pc}
 810b6f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810b6f8:	f000 bcbf 	b.w	810c07a <_Unwind_GetTextRelBase>
 810b6fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810b700:	f000 bcb8 	b.w	810c074 <_Unwind_GetDataRelBase>
 810b704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810b708:	f7fd bbe6 	b.w	8108ed8 <_Unwind_GetRegionStart>

0810b70c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 810b70c:	b513      	push	{r0, r1, r4, lr}
 810b70e:	460c      	mov	r4, r1
 810b710:	4601      	mov	r1, r0
 810b712:	4620      	mov	r0, r4
 810b714:	e9cd 3200 	strd	r3, r2, [sp]
 810b718:	f7ff ffd4 	bl	810b6c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 810b71c:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b720:	4601      	mov	r1, r0
 810b722:	4620      	mov	r0, r4
 810b724:	b002      	add	sp, #8
 810b726:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b72a:	f7ff bf85 	b.w	810b638 <_ZL28read_encoded_value_with_basehjPKhPj>

0810b72e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 810b72e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810b730:	460c      	mov	r4, r1
 810b732:	4615      	mov	r5, r2
 810b734:	4606      	mov	r6, r0
 810b736:	b328      	cbz	r0, 810b784 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 810b738:	f7fd fbce 	bl	8108ed8 <_Unwind_GetRegionStart>
 810b73c:	4603      	mov	r3, r0
 810b73e:	4620      	mov	r0, r4
 810b740:	602b      	str	r3, [r5, #0]
 810b742:	f810 1b01 	ldrb.w	r1, [r0], #1
 810b746:	29ff      	cmp	r1, #255	; 0xff
 810b748:	d01e      	beq.n	810b788 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 810b74a:	4602      	mov	r2, r0
 810b74c:	1d2b      	adds	r3, r5, #4
 810b74e:	4630      	mov	r0, r6
 810b750:	f7ff ffdc 	bl	810b70c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 810b754:	f810 3b01 	ldrb.w	r3, [r0], #1
 810b758:	752b      	strb	r3, [r5, #20]
 810b75a:	2bff      	cmp	r3, #255	; 0xff
 810b75c:	d016      	beq.n	810b78c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 810b75e:	2310      	movs	r3, #16
 810b760:	752b      	strb	r3, [r5, #20]
 810b762:	a901      	add	r1, sp, #4
 810b764:	f7ff ff41 	bl	810b5ea <_ZL12read_uleb128PKhPm>
 810b768:	9b01      	ldr	r3, [sp, #4]
 810b76a:	4403      	add	r3, r0
 810b76c:	60eb      	str	r3, [r5, #12]
 810b76e:	f810 3b01 	ldrb.w	r3, [r0], #1
 810b772:	756b      	strb	r3, [r5, #21]
 810b774:	a901      	add	r1, sp, #4
 810b776:	f7ff ff38 	bl	810b5ea <_ZL12read_uleb128PKhPm>
 810b77a:	9b01      	ldr	r3, [sp, #4]
 810b77c:	4403      	add	r3, r0
 810b77e:	612b      	str	r3, [r5, #16]
 810b780:	b002      	add	sp, #8
 810b782:	bd70      	pop	{r4, r5, r6, pc}
 810b784:	4603      	mov	r3, r0
 810b786:	e7da      	b.n	810b73e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 810b788:	606b      	str	r3, [r5, #4]
 810b78a:	e7e3      	b.n	810b754 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 810b78c:	2300      	movs	r3, #0
 810b78e:	e7ed      	b.n	810b76c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

0810b790 <_Unwind_GetGR>:
 810b790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810b792:	ab03      	add	r3, sp, #12
 810b794:	9300      	str	r3, [sp, #0]
 810b796:	2300      	movs	r3, #0
 810b798:	460a      	mov	r2, r1
 810b79a:	4619      	mov	r1, r3
 810b79c:	f7fc fe1c 	bl	81083d8 <_Unwind_VRS_Get>
 810b7a0:	9803      	ldr	r0, [sp, #12]
 810b7a2:	b005      	add	sp, #20
 810b7a4:	f85d fb04 	ldr.w	pc, [sp], #4

0810b7a8 <__gxx_personality_v0>:
 810b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b7ac:	b091      	sub	sp, #68	; 0x44
 810b7ae:	2300      	movs	r3, #0
 810b7b0:	9305      	str	r3, [sp, #20]
 810b7b2:	f000 0303 	and.w	r3, r0, #3
 810b7b6:	2b01      	cmp	r3, #1
 810b7b8:	4606      	mov	r6, r0
 810b7ba:	460c      	mov	r4, r1
 810b7bc:	4617      	mov	r7, r2
 810b7be:	d00e      	beq.n	810b7de <__gxx_personality_v0+0x36>
 810b7c0:	2b02      	cmp	r3, #2
 810b7c2:	d003      	beq.n	810b7cc <__gxx_personality_v0+0x24>
 810b7c4:	2b00      	cmp	r3, #0
 810b7c6:	d13b      	bne.n	810b840 <__gxx_personality_v0+0x98>
 810b7c8:	0701      	lsls	r1, r0, #28
 810b7ca:	d53b      	bpl.n	810b844 <__gxx_personality_v0+0x9c>
 810b7cc:	4639      	mov	r1, r7
 810b7ce:	4620      	mov	r0, r4
 810b7d0:	f7fd fb6c 	bl	8108eac <__gnu_unwind_frame>
 810b7d4:	b390      	cbz	r0, 810b83c <__gxx_personality_v0+0x94>
 810b7d6:	2009      	movs	r0, #9
 810b7d8:	b011      	add	sp, #68	; 0x44
 810b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b7de:	0702      	lsls	r2, r0, #28
 810b7e0:	d406      	bmi.n	810b7f0 <__gxx_personality_v0+0x48>
 810b7e2:	6a0d      	ldr	r5, [r1, #32]
 810b7e4:	4638      	mov	r0, r7
 810b7e6:	210d      	movs	r1, #13
 810b7e8:	f7ff ffd2 	bl	810b790 <_Unwind_GetGR>
 810b7ec:	4285      	cmp	r5, r0
 810b7ee:	d02b      	beq.n	810b848 <__gxx_personality_v0+0xa0>
 810b7f0:	2002      	movs	r0, #2
 810b7f2:	2300      	movs	r3, #0
 810b7f4:	f006 0608 	and.w	r6, r6, #8
 810b7f8:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 810b7fc:	4306      	orrs	r6, r0
 810b7fe:	f8cd a000 	str.w	sl, [sp]
 810b802:	220c      	movs	r2, #12
 810b804:	4619      	mov	r1, r3
 810b806:	4638      	mov	r0, r7
 810b808:	940a      	str	r4, [sp, #40]	; 0x28
 810b80a:	f7fc fe09 	bl	8108420 <_Unwind_VRS_Set>
 810b80e:	2e06      	cmp	r6, #6
 810b810:	d11c      	bne.n	810b84c <__gxx_personality_v0+0xa4>
 810b812:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 810b816:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 810b81a:	f1b8 0f00 	cmp.w	r8, #0
 810b81e:	bf0c      	ite	eq
 810b820:	f04f 0b01 	moveq.w	fp, #1
 810b824:	f04f 0b03 	movne.w	fp, #3
 810b828:	f016 0608 	ands.w	r6, r6, #8
 810b82c:	f000 810c 	beq.w	810ba48 <__gxx_personality_v0+0x2a0>
 810b830:	f1bb 0f01 	cmp.w	fp, #1
 810b834:	f040 8104 	bne.w	810ba40 <__gxx_personality_v0+0x298>
 810b838:	f000 f964 	bl	810bb04 <_ZSt9terminatev>
 810b83c:	2008      	movs	r0, #8
 810b83e:	e7cb      	b.n	810b7d8 <__gxx_personality_v0+0x30>
 810b840:	f000 fba8 	bl	810bf94 <abort>
 810b844:	2001      	movs	r0, #1
 810b846:	e7d4      	b.n	810b7f2 <__gxx_personality_v0+0x4a>
 810b848:	2006      	movs	r0, #6
 810b84a:	e7d2      	b.n	810b7f2 <__gxx_personality_v0+0x4a>
 810b84c:	4638      	mov	r0, r7
 810b84e:	f7fd fb49 	bl	8108ee4 <_Unwind_GetLanguageSpecificData>
 810b852:	4681      	mov	r9, r0
 810b854:	2800      	cmp	r0, #0
 810b856:	d0b9      	beq.n	810b7cc <__gxx_personality_v0+0x24>
 810b858:	4652      	mov	r2, sl
 810b85a:	4601      	mov	r1, r0
 810b85c:	4638      	mov	r0, r7
 810b85e:	f7ff ff66 	bl	810b72e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 810b862:	4639      	mov	r1, r7
 810b864:	4605      	mov	r5, r0
 810b866:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 810b86a:	f7ff ff2b 	bl	810b6c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 810b86e:	210f      	movs	r1, #15
 810b870:	900c      	str	r0, [sp, #48]	; 0x30
 810b872:	4638      	mov	r0, r7
 810b874:	f7ff ff8c 	bl	810b790 <_Unwind_GetGR>
 810b878:	f020 0801 	bic.w	r8, r0, #1
 810b87c:	f108 38ff 	add.w	r8, r8, #4294967295
 810b880:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b882:	42ab      	cmp	r3, r5
 810b884:	f240 80c4 	bls.w	810ba10 <__gxx_personality_v0+0x268>
 810b888:	462a      	mov	r2, r5
 810b88a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 810b88e:	ab06      	add	r3, sp, #24
 810b890:	2000      	movs	r0, #0
 810b892:	f7ff ff3b 	bl	810b70c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 810b896:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 810b89a:	4602      	mov	r2, r0
 810b89c:	ab07      	add	r3, sp, #28
 810b89e:	2000      	movs	r0, #0
 810b8a0:	f7ff ff34 	bl	810b70c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 810b8a4:	ab08      	add	r3, sp, #32
 810b8a6:	4602      	mov	r2, r0
 810b8a8:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 810b8ac:	2000      	movs	r0, #0
 810b8ae:	f7ff ff2d 	bl	810b70c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 810b8b2:	a909      	add	r1, sp, #36	; 0x24
 810b8b4:	f7ff fe99 	bl	810b5ea <_ZL12read_uleb128PKhPm>
 810b8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b8ba:	9a06      	ldr	r2, [sp, #24]
 810b8bc:	4413      	add	r3, r2
 810b8be:	4543      	cmp	r3, r8
 810b8c0:	4605      	mov	r5, r0
 810b8c2:	d901      	bls.n	810b8c8 <__gxx_personality_v0+0x120>
 810b8c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 810b8c6:	e7db      	b.n	810b880 <__gxx_personality_v0+0xd8>
 810b8c8:	9a07      	ldr	r2, [sp, #28]
 810b8ca:	4413      	add	r3, r2
 810b8cc:	4543      	cmp	r3, r8
 810b8ce:	d9d7      	bls.n	810b880 <__gxx_personality_v0+0xd8>
 810b8d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810b8d4:	f1b8 0f00 	cmp.w	r8, #0
 810b8d8:	d001      	beq.n	810b8de <__gxx_personality_v0+0x136>
 810b8da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b8dc:	4498      	add	r8, r3
 810b8de:	9d09      	ldr	r5, [sp, #36]	; 0x24
 810b8e0:	b115      	cbz	r5, 810b8e8 <__gxx_personality_v0+0x140>
 810b8e2:	980e      	ldr	r0, [sp, #56]	; 0x38
 810b8e4:	3d01      	subs	r5, #1
 810b8e6:	4405      	add	r5, r0
 810b8e8:	f1b8 0f00 	cmp.w	r8, #0
 810b8ec:	f43f af6e 	beq.w	810b7cc <__gxx_personality_v0+0x24>
 810b8f0:	2d00      	cmp	r5, #0
 810b8f2:	f000 80f7 	beq.w	810bae4 <__gxx_personality_v0+0x33c>
 810b8f6:	f016 0308 	ands.w	r3, r6, #8
 810b8fa:	9302      	str	r3, [sp, #8]
 810b8fc:	d034      	beq.n	810b968 <__gxx_personality_v0+0x1c0>
 810b8fe:	2347      	movs	r3, #71	; 0x47
 810b900:	7023      	strb	r3, [r4, #0]
 810b902:	234e      	movs	r3, #78	; 0x4e
 810b904:	7063      	strb	r3, [r4, #1]
 810b906:	2355      	movs	r3, #85	; 0x55
 810b908:	70a3      	strb	r3, [r4, #2]
 810b90a:	2343      	movs	r3, #67	; 0x43
 810b90c:	70e3      	strb	r3, [r4, #3]
 810b90e:	2346      	movs	r3, #70	; 0x46
 810b910:	7123      	strb	r3, [r4, #4]
 810b912:	234f      	movs	r3, #79	; 0x4f
 810b914:	7163      	strb	r3, [r4, #5]
 810b916:	2352      	movs	r3, #82	; 0x52
 810b918:	71a3      	strb	r3, [r4, #6]
 810b91a:	2300      	movs	r3, #0
 810b91c:	71e3      	strb	r3, [r4, #7]
 810b91e:	f04f 0b00 	mov.w	fp, #0
 810b922:	a907      	add	r1, sp, #28
 810b924:	4628      	mov	r0, r5
 810b926:	f7ff fe6f 	bl	810b608 <_ZL12read_sleb128PKhPl>
 810b92a:	a908      	add	r1, sp, #32
 810b92c:	9003      	str	r0, [sp, #12]
 810b92e:	f7ff fe6b 	bl	810b608 <_ZL12read_sleb128PKhPl>
 810b932:	9907      	ldr	r1, [sp, #28]
 810b934:	2900      	cmp	r1, #0
 810b936:	d068      	beq.n	810ba0a <__gxx_personality_v0+0x262>
 810b938:	dd3a      	ble.n	810b9b0 <__gxx_personality_v0+0x208>
 810b93a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 810b93e:	28ff      	cmp	r0, #255	; 0xff
 810b940:	d032      	beq.n	810b9a8 <__gxx_personality_v0+0x200>
 810b942:	f000 0307 	and.w	r3, r0, #7
 810b946:	2b04      	cmp	r3, #4
 810b948:	f63f af7a 	bhi.w	810b840 <__gxx_personality_v0+0x98>
 810b94c:	a201      	add	r2, pc, #4	; (adr r2, 810b954 <__gxx_personality_v0+0x1ac>)
 810b94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b952:	bf00      	nop
 810b954:	0810b9ad 	.word	0x0810b9ad
 810b958:	0810b841 	.word	0x0810b841
 810b95c:	0810b97b 	.word	0x0810b97b
 810b960:	0810b9ad 	.word	0x0810b9ad
 810b964:	0810b9a5 	.word	0x0810b9a5
 810b968:	79e3      	ldrb	r3, [r4, #7]
 810b96a:	2b01      	cmp	r3, #1
 810b96c:	bf0c      	ite	eq
 810b96e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 810b972:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 810b976:	9305      	str	r3, [sp, #20]
 810b978:	e7d1      	b.n	810b91e <__gxx_personality_v0+0x176>
 810b97a:	2502      	movs	r5, #2
 810b97c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b97e:	ab09      	add	r3, sp, #36	; 0x24
 810b980:	fb05 2211 	mls	r2, r5, r1, r2
 810b984:	990c      	ldr	r1, [sp, #48]	; 0x30
 810b986:	f7ff fe57 	bl	810b638 <_ZL28read_encoded_value_with_basehjPKhPj>
 810b98a:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b98c:	b131      	cbz	r1, 810b99c <__gxx_personality_v0+0x1f4>
 810b98e:	b37c      	cbz	r4, 810b9f0 <__gxx_personality_v0+0x248>
 810b990:	ab05      	add	r3, sp, #20
 810b992:	2200      	movs	r2, #0
 810b994:	4620      	mov	r0, r4
 810b996:	f000 f8eb 	bl	810bb70 <__cxa_type_match>
 810b99a:	b348      	cbz	r0, 810b9f0 <__gxx_personality_v0+0x248>
 810b99c:	9d07      	ldr	r5, [sp, #28]
 810b99e:	f04f 0b03 	mov.w	fp, #3
 810b9a2:	e039      	b.n	810ba18 <__gxx_personality_v0+0x270>
 810b9a4:	2508      	movs	r5, #8
 810b9a6:	e7e9      	b.n	810b97c <__gxx_personality_v0+0x1d4>
 810b9a8:	2500      	movs	r5, #0
 810b9aa:	e7e7      	b.n	810b97c <__gxx_personality_v0+0x1d4>
 810b9ac:	2504      	movs	r5, #4
 810b9ae:	e7e5      	b.n	810b97c <__gxx_personality_v0+0x1d4>
 810b9b0:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 810b9b4:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 810b9b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b9ba:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 810b9be:	313f      	adds	r1, #63	; 0x3f
 810b9c0:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 810b9c4:	b1dc      	cbz	r4, 810b9fe <__gxx_personality_v0+0x256>
 810b9c6:	9a02      	ldr	r2, [sp, #8]
 810b9c8:	b9ca      	cbnz	r2, 810b9fe <__gxx_personality_v0+0x256>
 810b9ca:	9b05      	ldr	r3, [sp, #20]
 810b9cc:	9309      	str	r3, [sp, #36]	; 0x24
 810b9ce:	3d04      	subs	r5, #4
 810b9d0:	f855 1f04 	ldr.w	r1, [r5, #4]!
 810b9d4:	b141      	cbz	r1, 810b9e8 <__gxx_personality_v0+0x240>
 810b9d6:	ab09      	add	r3, sp, #36	; 0x24
 810b9d8:	2200      	movs	r2, #0
 810b9da:	4429      	add	r1, r5
 810b9dc:	4620      	mov	r0, r4
 810b9de:	f000 f8c7 	bl	810bb70 <__cxa_type_match>
 810b9e2:	2800      	cmp	r0, #0
 810b9e4:	d0f4      	beq.n	810b9d0 <__gxx_personality_v0+0x228>
 810b9e6:	2101      	movs	r1, #1
 810b9e8:	f081 0101 	eor.w	r1, r1, #1
 810b9ec:	2900      	cmp	r1, #0
 810b9ee:	d1d5      	bne.n	810b99c <__gxx_personality_v0+0x1f4>
 810b9f0:	9d08      	ldr	r5, [sp, #32]
 810b9f2:	2d00      	cmp	r5, #0
 810b9f4:	d072      	beq.n	810badc <__gxx_personality_v0+0x334>
 810b9f6:	9b03      	ldr	r3, [sp, #12]
 810b9f8:	442b      	add	r3, r5
 810b9fa:	461d      	mov	r5, r3
 810b9fc:	e791      	b.n	810b922 <__gxx_personality_v0+0x17a>
 810b9fe:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 810ba02:	fab1 f181 	clz	r1, r1
 810ba06:	0949      	lsrs	r1, r1, #5
 810ba08:	e7f0      	b.n	810b9ec <__gxx_personality_v0+0x244>
 810ba0a:	f04f 0b01 	mov.w	fp, #1
 810ba0e:	e7ef      	b.n	810b9f0 <__gxx_personality_v0+0x248>
 810ba10:	2500      	movs	r5, #0
 810ba12:	46a8      	mov	r8, r5
 810ba14:	f04f 0b01 	mov.w	fp, #1
 810ba18:	07f3      	lsls	r3, r6, #31
 810ba1a:	f57f af05 	bpl.w	810b828 <__gxx_personality_v0+0x80>
 810ba1e:	f1bb 0f02 	cmp.w	fp, #2
 810ba22:	f43f aed3 	beq.w	810b7cc <__gxx_personality_v0+0x24>
 810ba26:	210d      	movs	r1, #13
 810ba28:	4638      	mov	r0, r7
 810ba2a:	9e05      	ldr	r6, [sp, #20]
 810ba2c:	f7ff feb0 	bl	810b790 <_Unwind_GetGR>
 810ba30:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 810ba34:	e9c4 0608 	strd	r0, r6, [r4, #32]
 810ba38:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 810ba3c:	2006      	movs	r0, #6
 810ba3e:	e6cb      	b.n	810b7d8 <__gxx_personality_v0+0x30>
 810ba40:	2d00      	cmp	r5, #0
 810ba42:	da22      	bge.n	810ba8a <__gxx_personality_v0+0x2e2>
 810ba44:	f000 f870 	bl	810bb28 <_ZSt10unexpectedv>
 810ba48:	f1bb 0f01 	cmp.w	fp, #1
 810ba4c:	d102      	bne.n	810ba54 <__gxx_personality_v0+0x2ac>
 810ba4e:	4620      	mov	r0, r4
 810ba50:	f000 f926 	bl	810bca0 <__cxa_call_terminate>
 810ba54:	2d00      	cmp	r5, #0
 810ba56:	da18      	bge.n	810ba8a <__gxx_personality_v0+0x2e2>
 810ba58:	4652      	mov	r2, sl
 810ba5a:	4649      	mov	r1, r9
 810ba5c:	4638      	mov	r0, r7
 810ba5e:	f7ff fe66 	bl	810b72e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 810ba62:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 810ba66:	4639      	mov	r1, r7
 810ba68:	f7ff fe2c 	bl	810b6c4 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 810ba6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810ba6e:	900c      	str	r0, [sp, #48]	; 0x30
 810ba70:	43eb      	mvns	r3, r5
 810ba72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810ba76:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 810ba7a:	b10a      	cbz	r2, 810ba80 <__gxx_personality_v0+0x2d8>
 810ba7c:	3601      	adds	r6, #1
 810ba7e:	e7fa      	b.n	810ba76 <__gxx_personality_v0+0x2ce>
 810ba80:	2204      	movs	r2, #4
 810ba82:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 810ba86:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 810ba8a:	2300      	movs	r3, #0
 810ba8c:	ae09      	add	r6, sp, #36	; 0x24
 810ba8e:	461a      	mov	r2, r3
 810ba90:	4619      	mov	r1, r3
 810ba92:	9600      	str	r6, [sp, #0]
 810ba94:	4638      	mov	r0, r7
 810ba96:	9409      	str	r4, [sp, #36]	; 0x24
 810ba98:	f7fc fcc2 	bl	8108420 <_Unwind_VRS_Set>
 810ba9c:	2300      	movs	r3, #0
 810ba9e:	4619      	mov	r1, r3
 810baa0:	2201      	movs	r2, #1
 810baa2:	9600      	str	r6, [sp, #0]
 810baa4:	4638      	mov	r0, r7
 810baa6:	9509      	str	r5, [sp, #36]	; 0x24
 810baa8:	f7fc fcba 	bl	8108420 <_Unwind_VRS_Set>
 810baac:	210f      	movs	r1, #15
 810baae:	4638      	mov	r0, r7
 810bab0:	f7ff fe6e 	bl	810b790 <_Unwind_GetGR>
 810bab4:	f000 0001 	and.w	r0, r0, #1
 810bab8:	ea40 0008 	orr.w	r0, r0, r8
 810babc:	2300      	movs	r3, #0
 810babe:	9009      	str	r0, [sp, #36]	; 0x24
 810bac0:	9600      	str	r6, [sp, #0]
 810bac2:	220f      	movs	r2, #15
 810bac4:	4619      	mov	r1, r3
 810bac6:	4638      	mov	r0, r7
 810bac8:	f7fc fcaa 	bl	8108420 <_Unwind_VRS_Set>
 810bacc:	f1bb 0f02 	cmp.w	fp, #2
 810bad0:	d102      	bne.n	810bad8 <__gxx_personality_v0+0x330>
 810bad2:	4620      	mov	r0, r4
 810bad4:	f000 f8aa 	bl	810bc2c <__cxa_begin_cleanup>
 810bad8:	2007      	movs	r0, #7
 810bada:	e67d      	b.n	810b7d8 <__gxx_personality_v0+0x30>
 810badc:	f1bb 0f00 	cmp.w	fp, #0
 810bae0:	f43f ae74 	beq.w	810b7cc <__gxx_personality_v0+0x24>
 810bae4:	f04f 0b02 	mov.w	fp, #2
 810bae8:	e796      	b.n	810ba18 <__gxx_personality_v0+0x270>
 810baea:	bf00      	nop

0810baec <_ZN10__cxxabiv111__terminateEPFvvE>:
 810baec:	b508      	push	{r3, lr}
 810baee:	4780      	blx	r0
 810baf0:	f000 fa50 	bl	810bf94 <abort>

0810baf4 <_ZSt13get_terminatev>:
 810baf4:	4b02      	ldr	r3, [pc, #8]	; (810bb00 <_ZSt13get_terminatev+0xc>)
 810baf6:	6818      	ldr	r0, [r3, #0]
 810baf8:	f3bf 8f5b 	dmb	ish
 810bafc:	4770      	bx	lr
 810bafe:	bf00      	nop
 810bb00:	30040014 	.word	0x30040014

0810bb04 <_ZSt9terminatev>:
 810bb04:	b508      	push	{r3, lr}
 810bb06:	f7ff fff5 	bl	810baf4 <_ZSt13get_terminatev>
 810bb0a:	f7ff ffef 	bl	810baec <_ZN10__cxxabiv111__terminateEPFvvE>

0810bb0e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 810bb0e:	b508      	push	{r3, lr}
 810bb10:	4780      	blx	r0
 810bb12:	f7ff fff7 	bl	810bb04 <_ZSt9terminatev>
	...

0810bb18 <_ZSt14get_unexpectedv>:
 810bb18:	4b02      	ldr	r3, [pc, #8]	; (810bb24 <_ZSt14get_unexpectedv+0xc>)
 810bb1a:	6818      	ldr	r0, [r3, #0]
 810bb1c:	f3bf 8f5b 	dmb	ish
 810bb20:	4770      	bx	lr
 810bb22:	bf00      	nop
 810bb24:	30040010 	.word	0x30040010

0810bb28 <_ZSt10unexpectedv>:
 810bb28:	b508      	push	{r3, lr}
 810bb2a:	f7ff fff5 	bl	810bb18 <_ZSt14get_unexpectedv>
 810bb2e:	f7ff ffee 	bl	810bb0e <_ZN10__cxxabiv112__unexpectedEPFvvE>

0810bb32 <_Znaj>:
 810bb32:	f7ff bd2b 	b.w	810b58c <_Znwj>

0810bb36 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 810bb36:	7803      	ldrb	r3, [r0, #0]
 810bb38:	2b47      	cmp	r3, #71	; 0x47
 810bb3a:	d117      	bne.n	810bb6c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bb3c:	7843      	ldrb	r3, [r0, #1]
 810bb3e:	2b4e      	cmp	r3, #78	; 0x4e
 810bb40:	d114      	bne.n	810bb6c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bb42:	7883      	ldrb	r3, [r0, #2]
 810bb44:	2b55      	cmp	r3, #85	; 0x55
 810bb46:	d111      	bne.n	810bb6c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bb48:	78c3      	ldrb	r3, [r0, #3]
 810bb4a:	2b43      	cmp	r3, #67	; 0x43
 810bb4c:	d10e      	bne.n	810bb6c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bb4e:	7903      	ldrb	r3, [r0, #4]
 810bb50:	2b43      	cmp	r3, #67	; 0x43
 810bb52:	d10b      	bne.n	810bb6c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bb54:	7943      	ldrb	r3, [r0, #5]
 810bb56:	2b2b      	cmp	r3, #43	; 0x2b
 810bb58:	d108      	bne.n	810bb6c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bb5a:	7983      	ldrb	r3, [r0, #6]
 810bb5c:	2b2b      	cmp	r3, #43	; 0x2b
 810bb5e:	d105      	bne.n	810bb6c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bb60:	79c0      	ldrb	r0, [r0, #7]
 810bb62:	2801      	cmp	r0, #1
 810bb64:	bf8c      	ite	hi
 810bb66:	2000      	movhi	r0, #0
 810bb68:	2001      	movls	r0, #1
 810bb6a:	4770      	bx	lr
 810bb6c:	2000      	movs	r0, #0
 810bb6e:	4770      	bx	lr

0810bb70 <__cxa_type_match>:
 810bb70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 810bb74:	461d      	mov	r5, r3
 810bb76:	7803      	ldrb	r3, [r0, #0]
 810bb78:	2b47      	cmp	r3, #71	; 0x47
 810bb7a:	460e      	mov	r6, r1
 810bb7c:	4602      	mov	r2, r0
 810bb7e:	79c1      	ldrb	r1, [r0, #7]
 810bb80:	d113      	bne.n	810bbaa <__cxa_type_match+0x3a>
 810bb82:	7843      	ldrb	r3, [r0, #1]
 810bb84:	2b4e      	cmp	r3, #78	; 0x4e
 810bb86:	d110      	bne.n	810bbaa <__cxa_type_match+0x3a>
 810bb88:	7883      	ldrb	r3, [r0, #2]
 810bb8a:	2b55      	cmp	r3, #85	; 0x55
 810bb8c:	d10d      	bne.n	810bbaa <__cxa_type_match+0x3a>
 810bb8e:	78c3      	ldrb	r3, [r0, #3]
 810bb90:	2b43      	cmp	r3, #67	; 0x43
 810bb92:	d10a      	bne.n	810bbaa <__cxa_type_match+0x3a>
 810bb94:	7903      	ldrb	r3, [r0, #4]
 810bb96:	2b46      	cmp	r3, #70	; 0x46
 810bb98:	d107      	bne.n	810bbaa <__cxa_type_match+0x3a>
 810bb9a:	7943      	ldrb	r3, [r0, #5]
 810bb9c:	2b4f      	cmp	r3, #79	; 0x4f
 810bb9e:	d104      	bne.n	810bbaa <__cxa_type_match+0x3a>
 810bba0:	7983      	ldrb	r3, [r0, #6]
 810bba2:	2b52      	cmp	r3, #82	; 0x52
 810bba4:	d101      	bne.n	810bbaa <__cxa_type_match+0x3a>
 810bba6:	2900      	cmp	r1, #0
 810bba8:	d031      	beq.n	810bc0e <__cxa_type_match+0x9e>
 810bbaa:	4610      	mov	r0, r2
 810bbac:	f7ff ffc3 	bl	810bb36 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 810bbb0:	f080 0001 	eor.w	r0, r0, #1
 810bbb4:	b2c0      	uxtb	r0, r0
 810bbb6:	2300      	movs	r3, #0
 810bbb8:	2400      	movs	r4, #0
 810bbba:	9401      	str	r4, [sp, #4]
 810bbbc:	bb53      	cbnz	r3, 810bc14 <__cxa_type_match+0xa4>
 810bbbe:	bb58      	cbnz	r0, 810bc18 <__cxa_type_match+0xa8>
 810bbc0:	2901      	cmp	r1, #1
 810bbc2:	bf0a      	itet	eq
 810bbc4:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 810bbc8:	f1a2 0320 	subne.w	r3, r2, #32
 810bbcc:	3b78      	subeq	r3, #120	; 0x78
 810bbce:	2901      	cmp	r1, #1
 810bbd0:	bf08      	it	eq
 810bbd2:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 810bbd6:	681c      	ldr	r4, [r3, #0]
 810bbd8:	bf18      	it	ne
 810bbda:	3258      	addne	r2, #88	; 0x58
 810bbdc:	9201      	str	r2, [sp, #4]
 810bbde:	6823      	ldr	r3, [r4, #0]
 810bbe0:	4620      	mov	r0, r4
 810bbe2:	689b      	ldr	r3, [r3, #8]
 810bbe4:	4798      	blx	r3
 810bbe6:	b1c8      	cbz	r0, 810bc1c <__cxa_type_match+0xac>
 810bbe8:	9b01      	ldr	r3, [sp, #4]
 810bbea:	681b      	ldr	r3, [r3, #0]
 810bbec:	9301      	str	r3, [sp, #4]
 810bbee:	2702      	movs	r7, #2
 810bbf0:	6833      	ldr	r3, [r6, #0]
 810bbf2:	aa01      	add	r2, sp, #4
 810bbf4:	f8d3 8010 	ldr.w	r8, [r3, #16]
 810bbf8:	4621      	mov	r1, r4
 810bbfa:	2301      	movs	r3, #1
 810bbfc:	4630      	mov	r0, r6
 810bbfe:	47c0      	blx	r8
 810bc00:	b170      	cbz	r0, 810bc20 <__cxa_type_match+0xb0>
 810bc02:	9b01      	ldr	r3, [sp, #4]
 810bc04:	602b      	str	r3, [r5, #0]
 810bc06:	4638      	mov	r0, r7
 810bc08:	b002      	add	sp, #8
 810bc0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bc0e:	2301      	movs	r3, #1
 810bc10:	4608      	mov	r0, r1
 810bc12:	e7d1      	b.n	810bbb8 <__cxa_type_match+0x48>
 810bc14:	4c03      	ldr	r4, [pc, #12]	; (810bc24 <__cxa_type_match+0xb4>)
 810bc16:	e7e2      	b.n	810bbde <__cxa_type_match+0x6e>
 810bc18:	4c03      	ldr	r4, [pc, #12]	; (810bc28 <__cxa_type_match+0xb8>)
 810bc1a:	e7e0      	b.n	810bbde <__cxa_type_match+0x6e>
 810bc1c:	2701      	movs	r7, #1
 810bc1e:	e7e7      	b.n	810bbf0 <__cxa_type_match+0x80>
 810bc20:	4607      	mov	r7, r0
 810bc22:	e7f0      	b.n	810bc06 <__cxa_type_match+0x96>
 810bc24:	0810c1f8 	.word	0x0810c1f8
 810bc28:	0810c200 	.word	0x0810c200

0810bc2c <__cxa_begin_cleanup>:
 810bc2c:	b510      	push	{r4, lr}
 810bc2e:	4604      	mov	r4, r0
 810bc30:	f000 f8a0 	bl	810bd74 <__cxa_get_globals>
 810bc34:	4602      	mov	r2, r0
 810bc36:	4620      	mov	r0, r4
 810bc38:	f1a4 0120 	sub.w	r1, r4, #32
 810bc3c:	f7ff ff7b 	bl	810bb36 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 810bc40:	b160      	cbz	r0, 810bc5c <__cxa_begin_cleanup+0x30>
 810bc42:	f854 3c04 	ldr.w	r3, [r4, #-4]
 810bc46:	3301      	adds	r3, #1
 810bc48:	2b01      	cmp	r3, #1
 810bc4a:	f844 3c04 	str.w	r3, [r4, #-4]
 810bc4e:	d103      	bne.n	810bc58 <__cxa_begin_cleanup+0x2c>
 810bc50:	6893      	ldr	r3, [r2, #8]
 810bc52:	f844 3c08 	str.w	r3, [r4, #-8]
 810bc56:	6091      	str	r1, [r2, #8]
 810bc58:	2001      	movs	r0, #1
 810bc5a:	bd10      	pop	{r4, pc}
 810bc5c:	6893      	ldr	r3, [r2, #8]
 810bc5e:	2b00      	cmp	r3, #0
 810bc60:	d0f9      	beq.n	810bc56 <__cxa_begin_cleanup+0x2a>
 810bc62:	f7ff ff4f 	bl	810bb04 <_ZSt9terminatev>

0810bc66 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 810bc66:	7803      	ldrb	r3, [r0, #0]
 810bc68:	2b47      	cmp	r3, #71	; 0x47
 810bc6a:	d117      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc6c:	7843      	ldrb	r3, [r0, #1]
 810bc6e:	2b4e      	cmp	r3, #78	; 0x4e
 810bc70:	d114      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc72:	7883      	ldrb	r3, [r0, #2]
 810bc74:	2b55      	cmp	r3, #85	; 0x55
 810bc76:	d111      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc78:	78c3      	ldrb	r3, [r0, #3]
 810bc7a:	2b43      	cmp	r3, #67	; 0x43
 810bc7c:	d10e      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc7e:	7903      	ldrb	r3, [r0, #4]
 810bc80:	2b43      	cmp	r3, #67	; 0x43
 810bc82:	d10b      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc84:	7943      	ldrb	r3, [r0, #5]
 810bc86:	2b2b      	cmp	r3, #43	; 0x2b
 810bc88:	d108      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc8a:	7983      	ldrb	r3, [r0, #6]
 810bc8c:	2b2b      	cmp	r3, #43	; 0x2b
 810bc8e:	d105      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc90:	79c0      	ldrb	r0, [r0, #7]
 810bc92:	2801      	cmp	r0, #1
 810bc94:	bf8c      	ite	hi
 810bc96:	2000      	movhi	r0, #0
 810bc98:	2001      	movls	r0, #1
 810bc9a:	4770      	bx	lr
 810bc9c:	2000      	movs	r0, #0
 810bc9e:	4770      	bx	lr

0810bca0 <__cxa_call_terminate>:
 810bca0:	b510      	push	{r4, lr}
 810bca2:	4604      	mov	r4, r0
 810bca4:	b148      	cbz	r0, 810bcba <__cxa_call_terminate+0x1a>
 810bca6:	f000 f83b 	bl	810bd20 <__cxa_begin_catch>
 810bcaa:	4620      	mov	r0, r4
 810bcac:	f7ff ffdb 	bl	810bc66 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 810bcb0:	b118      	cbz	r0, 810bcba <__cxa_call_terminate+0x1a>
 810bcb2:	f854 0c14 	ldr.w	r0, [r4, #-20]
 810bcb6:	f7ff ff19 	bl	810baec <_ZN10__cxxabiv111__terminateEPFvvE>
 810bcba:	f7ff ff23 	bl	810bb04 <_ZSt9terminatev>

0810bcbe <__cxa_call_unexpected>:
 810bcbe:	b538      	push	{r3, r4, r5, lr}
 810bcc0:	4602      	mov	r2, r0
 810bcc2:	f7ff ffd0 	bl	810bc66 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 810bcc6:	b140      	cbz	r0, 810bcda <__cxa_call_unexpected+0x1c>
 810bcc8:	f852 4c18 	ldr.w	r4, [r2, #-24]
 810bccc:	2500      	movs	r5, #0
 810bcce:	4610      	mov	r0, r2
 810bcd0:	f000 f826 	bl	810bd20 <__cxa_begin_catch>
 810bcd4:	b125      	cbz	r5, 810bce0 <__cxa_call_unexpected+0x22>
 810bcd6:	f7ff ff27 	bl	810bb28 <_ZSt10unexpectedv>
 810bcda:	4604      	mov	r4, r0
 810bcdc:	2501      	movs	r5, #1
 810bcde:	e7f6      	b.n	810bcce <__cxa_call_unexpected+0x10>
 810bce0:	4620      	mov	r0, r4
 810bce2:	f7ff ff14 	bl	810bb0e <_ZN10__cxxabiv112__unexpectedEPFvvE>

0810bce6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 810bce6:	7803      	ldrb	r3, [r0, #0]
 810bce8:	2b47      	cmp	r3, #71	; 0x47
 810bcea:	d117      	bne.n	810bd1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bcec:	7843      	ldrb	r3, [r0, #1]
 810bcee:	2b4e      	cmp	r3, #78	; 0x4e
 810bcf0:	d114      	bne.n	810bd1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bcf2:	7883      	ldrb	r3, [r0, #2]
 810bcf4:	2b55      	cmp	r3, #85	; 0x55
 810bcf6:	d111      	bne.n	810bd1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bcf8:	78c3      	ldrb	r3, [r0, #3]
 810bcfa:	2b43      	cmp	r3, #67	; 0x43
 810bcfc:	d10e      	bne.n	810bd1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bcfe:	7903      	ldrb	r3, [r0, #4]
 810bd00:	2b43      	cmp	r3, #67	; 0x43
 810bd02:	d10b      	bne.n	810bd1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bd04:	7943      	ldrb	r3, [r0, #5]
 810bd06:	2b2b      	cmp	r3, #43	; 0x2b
 810bd08:	d108      	bne.n	810bd1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bd0a:	7983      	ldrb	r3, [r0, #6]
 810bd0c:	2b2b      	cmp	r3, #43	; 0x2b
 810bd0e:	d105      	bne.n	810bd1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bd10:	79c0      	ldrb	r0, [r0, #7]
 810bd12:	2801      	cmp	r0, #1
 810bd14:	bf8c      	ite	hi
 810bd16:	2000      	movhi	r0, #0
 810bd18:	2001      	movls	r0, #1
 810bd1a:	4770      	bx	lr
 810bd1c:	2000      	movs	r0, #0
 810bd1e:	4770      	bx	lr

0810bd20 <__cxa_begin_catch>:
 810bd20:	b538      	push	{r3, r4, r5, lr}
 810bd22:	4604      	mov	r4, r0
 810bd24:	f000 f826 	bl	810bd74 <__cxa_get_globals>
 810bd28:	6805      	ldr	r5, [r0, #0]
 810bd2a:	4602      	mov	r2, r0
 810bd2c:	4620      	mov	r0, r4
 810bd2e:	f1a4 0120 	sub.w	r1, r4, #32
 810bd32:	f7ff ffd8 	bl	810bce6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 810bd36:	b928      	cbnz	r0, 810bd44 <__cxa_begin_catch+0x24>
 810bd38:	b10d      	cbz	r5, 810bd3e <__cxa_begin_catch+0x1e>
 810bd3a:	f7ff fee3 	bl	810bb04 <_ZSt9terminatev>
 810bd3e:	6011      	str	r1, [r2, #0]
 810bd40:	4628      	mov	r0, r5
 810bd42:	bd38      	pop	{r3, r4, r5, pc}
 810bd44:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 810bd48:	2b00      	cmp	r3, #0
 810bd4a:	bfb4      	ite	lt
 810bd4c:	f1c3 0301 	rsblt	r3, r3, #1
 810bd50:	3301      	addge	r3, #1
 810bd52:	f844 3c0c 	str.w	r3, [r4, #-12]
 810bd56:	6853      	ldr	r3, [r2, #4]
 810bd58:	428d      	cmp	r5, r1
 810bd5a:	f103 33ff 	add.w	r3, r3, #4294967295
 810bd5e:	6053      	str	r3, [r2, #4]
 810bd60:	4620      	mov	r0, r4
 810bd62:	bf1c      	itt	ne
 810bd64:	f844 5c10 	strne.w	r5, [r4, #-16]
 810bd68:	6011      	strne	r1, [r2, #0]
 810bd6a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 810bd6c:	f7fc fb2c 	bl	81083c8 <_Unwind_Complete>
 810bd70:	e7e6      	b.n	810bd40 <__cxa_begin_catch+0x20>
	...

0810bd74 <__cxa_get_globals>:
 810bd74:	4800      	ldr	r0, [pc, #0]	; (810bd78 <__cxa_get_globals+0x4>)
 810bd76:	4770      	bx	lr
 810bd78:	30040098 	.word	0x30040098

0810bd7c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 810bd7c:	b510      	push	{r4, lr}
 810bd7e:	4b03      	ldr	r3, [pc, #12]	; (810bd8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 810bd80:	6003      	str	r3, [r0, #0]
 810bd82:	4604      	mov	r4, r0
 810bd84:	f000 f8b2 	bl	810beec <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810bd88:	4620      	mov	r0, r4
 810bd8a:	bd10      	pop	{r4, pc}
 810bd8c:	0810c288 	.word	0x0810c288

0810bd90 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 810bd90:	b510      	push	{r4, lr}
 810bd92:	4604      	mov	r4, r0
 810bd94:	f7ff fff2 	bl	810bd7c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 810bd98:	4620      	mov	r0, r4
 810bd9a:	210c      	movs	r1, #12
 810bd9c:	f7ff fc0a 	bl	810b5b4 <_ZdlPvj>
 810bda0:	4620      	mov	r0, r4
 810bda2:	bd10      	pop	{r4, pc}

0810bda4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 810bda4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810bda6:	9f08      	ldr	r7, [sp, #32]
 810bda8:	4297      	cmp	r7, r2
 810bdaa:	4605      	mov	r5, r0
 810bdac:	460e      	mov	r6, r1
 810bdae:	4614      	mov	r4, r2
 810bdb0:	d00a      	beq.n	810bdc8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 810bdb2:	68a8      	ldr	r0, [r5, #8]
 810bdb4:	6802      	ldr	r2, [r0, #0]
 810bdb6:	9708      	str	r7, [sp, #32]
 810bdb8:	6a15      	ldr	r5, [r2, #32]
 810bdba:	4631      	mov	r1, r6
 810bdbc:	4622      	mov	r2, r4
 810bdbe:	46ac      	mov	ip, r5
 810bdc0:	b003      	add	sp, #12
 810bdc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 810bdc6:	4760      	bx	ip
 810bdc8:	4619      	mov	r1, r3
 810bdca:	9301      	str	r3, [sp, #4]
 810bdcc:	f000 f858 	bl	810be80 <_ZNKSt9type_infoeqERKS_>
 810bdd0:	9b01      	ldr	r3, [sp, #4]
 810bdd2:	2800      	cmp	r0, #0
 810bdd4:	d0ed      	beq.n	810bdb2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 810bdd6:	2006      	movs	r0, #6
 810bdd8:	b003      	add	sp, #12
 810bdda:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810bddc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 810bddc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bde0:	460d      	mov	r5, r1
 810bde2:	4619      	mov	r1, r3
 810bde4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 810bde8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 810bdec:	4681      	mov	r9, r0
 810bdee:	4617      	mov	r7, r2
 810bdf0:	4698      	mov	r8, r3
 810bdf2:	f000 f845 	bl	810be80 <_ZNKSt9type_infoeqERKS_>
 810bdf6:	b190      	cbz	r0, 810be1e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 810bdf8:	2d00      	cmp	r5, #0
 810bdfa:	6034      	str	r4, [r6, #0]
 810bdfc:	7137      	strb	r7, [r6, #4]
 810bdfe:	db09      	blt.n	810be14 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 810be00:	1961      	adds	r1, r4, r5
 810be02:	458a      	cmp	sl, r1
 810be04:	bf0c      	ite	eq
 810be06:	2106      	moveq	r1, #6
 810be08:	2101      	movne	r1, #1
 810be0a:	71b1      	strb	r1, [r6, #6]
 810be0c:	2000      	movs	r0, #0
 810be0e:	b001      	add	sp, #4
 810be10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810be14:	3502      	adds	r5, #2
 810be16:	d1f9      	bne.n	810be0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810be18:	2301      	movs	r3, #1
 810be1a:	71b3      	strb	r3, [r6, #6]
 810be1c:	e7f6      	b.n	810be0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810be1e:	4554      	cmp	r4, sl
 810be20:	d106      	bne.n	810be30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810be22:	4659      	mov	r1, fp
 810be24:	4648      	mov	r0, r9
 810be26:	f000 f82b 	bl	810be80 <_ZNKSt9type_infoeqERKS_>
 810be2a:	b108      	cbz	r0, 810be30 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810be2c:	7177      	strb	r7, [r6, #5]
 810be2e:	e7ed      	b.n	810be0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810be30:	f8d9 0008 	ldr.w	r0, [r9, #8]
 810be34:	6803      	ldr	r3, [r0, #0]
 810be36:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 810be3a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 810be3e:	69dc      	ldr	r4, [r3, #28]
 810be40:	463a      	mov	r2, r7
 810be42:	4643      	mov	r3, r8
 810be44:	4629      	mov	r1, r5
 810be46:	46a4      	mov	ip, r4
 810be48:	b001      	add	sp, #4
 810be4a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810be4e:	4760      	bx	ip

0810be50 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 810be50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810be54:	4607      	mov	r7, r0
 810be56:	460c      	mov	r4, r1
 810be58:	4615      	mov	r5, r2
 810be5a:	461e      	mov	r6, r3
 810be5c:	f000 f879 	bl	810bf52 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 810be60:	b948      	cbnz	r0, 810be76 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 810be62:	68b8      	ldr	r0, [r7, #8]
 810be64:	6803      	ldr	r3, [r0, #0]
 810be66:	699f      	ldr	r7, [r3, #24]
 810be68:	462a      	mov	r2, r5
 810be6a:	4633      	mov	r3, r6
 810be6c:	4621      	mov	r1, r4
 810be6e:	46bc      	mov	ip, r7
 810be70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810be74:	4760      	bx	ip
 810be76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810be7a <_ZNSt9type_infoD1Ev>:
 810be7a:	4770      	bx	lr

0810be7c <_ZNKSt9type_info14__is_pointer_pEv>:
 810be7c:	2000      	movs	r0, #0
 810be7e:	4770      	bx	lr

0810be80 <_ZNKSt9type_infoeqERKS_>:
 810be80:	4281      	cmp	r1, r0
 810be82:	b508      	push	{r3, lr}
 810be84:	d00e      	beq.n	810bea4 <_ZNKSt9type_infoeqERKS_+0x24>
 810be86:	6840      	ldr	r0, [r0, #4]
 810be88:	7803      	ldrb	r3, [r0, #0]
 810be8a:	2b2a      	cmp	r3, #42	; 0x2a
 810be8c:	d00c      	beq.n	810bea8 <_ZNKSt9type_infoeqERKS_+0x28>
 810be8e:	6849      	ldr	r1, [r1, #4]
 810be90:	780b      	ldrb	r3, [r1, #0]
 810be92:	2b2a      	cmp	r3, #42	; 0x2a
 810be94:	bf08      	it	eq
 810be96:	3101      	addeq	r1, #1
 810be98:	f7fc f8d2 	bl	8108040 <strcmp>
 810be9c:	fab0 f080 	clz	r0, r0
 810bea0:	0940      	lsrs	r0, r0, #5
 810bea2:	bd08      	pop	{r3, pc}
 810bea4:	2001      	movs	r0, #1
 810bea6:	e7fc      	b.n	810bea2 <_ZNKSt9type_infoeqERKS_+0x22>
 810bea8:	2000      	movs	r0, #0
 810beaa:	e7fa      	b.n	810bea2 <_ZNKSt9type_infoeqERKS_+0x22>

0810beac <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 810beac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 810beae:	2400      	movs	r4, #0
 810beb0:	2310      	movs	r3, #16
 810beb2:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810beb6:	6803      	ldr	r3, [r0, #0]
 810beb8:	9400      	str	r4, [sp, #0]
 810beba:	699e      	ldr	r6, [r3, #24]
 810bebc:	f88d 4004 	strb.w	r4, [sp, #4]
 810bec0:	4615      	mov	r5, r2
 810bec2:	466b      	mov	r3, sp
 810bec4:	6812      	ldr	r2, [r2, #0]
 810bec6:	47b0      	blx	r6
 810bec8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 810becc:	f003 0306 	and.w	r3, r3, #6
 810bed0:	2b06      	cmp	r3, #6
 810bed2:	bf03      	ittte	eq
 810bed4:	9b00      	ldreq	r3, [sp, #0]
 810bed6:	602b      	streq	r3, [r5, #0]
 810bed8:	2001      	moveq	r0, #1
 810beda:	4620      	movne	r0, r4
 810bedc:	b004      	add	sp, #16
 810bede:	bd70      	pop	{r4, r5, r6, pc}

0810bee0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 810bee0:	9800      	ldr	r0, [sp, #0]
 810bee2:	4290      	cmp	r0, r2
 810bee4:	bf14      	ite	ne
 810bee6:	2001      	movne	r0, #1
 810bee8:	2006      	moveq	r0, #6
 810beea:	4770      	bx	lr

0810beec <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 810beec:	b510      	push	{r4, lr}
 810beee:	4b03      	ldr	r3, [pc, #12]	; (810befc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 810bef0:	6003      	str	r3, [r0, #0]
 810bef2:	4604      	mov	r4, r0
 810bef4:	f7ff ffc1 	bl	810be7a <_ZNSt9type_infoD1Ev>
 810bef8:	4620      	mov	r0, r4
 810befa:	bd10      	pop	{r4, pc}
 810befc:	0810c2fc 	.word	0x0810c2fc

0810bf00 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 810bf00:	b510      	push	{r4, lr}
 810bf02:	4604      	mov	r4, r0
 810bf04:	f7ff fff2 	bl	810beec <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810bf08:	4620      	mov	r0, r4
 810bf0a:	2108      	movs	r1, #8
 810bf0c:	f7ff fb52 	bl	810b5b4 <_ZdlPvj>
 810bf10:	4620      	mov	r0, r4
 810bf12:	bd10      	pop	{r4, pc}

0810bf14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 810bf14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bf18:	461f      	mov	r7, r3
 810bf1a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 810bf1e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 810bf22:	4598      	cmp	r8, r3
 810bf24:	4606      	mov	r6, r0
 810bf26:	4615      	mov	r5, r2
 810bf28:	d107      	bne.n	810bf3a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 810bf2a:	9907      	ldr	r1, [sp, #28]
 810bf2c:	f7ff ffa8 	bl	810be80 <_ZNKSt9type_infoeqERKS_>
 810bf30:	b118      	cbz	r0, 810bf3a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 810bf32:	7165      	strb	r5, [r4, #5]
 810bf34:	2000      	movs	r0, #0
 810bf36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bf3a:	4639      	mov	r1, r7
 810bf3c:	4630      	mov	r0, r6
 810bf3e:	f7ff ff9f 	bl	810be80 <_ZNKSt9type_infoeqERKS_>
 810bf42:	2800      	cmp	r0, #0
 810bf44:	d0f6      	beq.n	810bf34 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 810bf46:	2301      	movs	r3, #1
 810bf48:	f8c4 8000 	str.w	r8, [r4]
 810bf4c:	7125      	strb	r5, [r4, #4]
 810bf4e:	71a3      	strb	r3, [r4, #6]
 810bf50:	e7f0      	b.n	810bf34 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0810bf52 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 810bf52:	b538      	push	{r3, r4, r5, lr}
 810bf54:	4615      	mov	r5, r2
 810bf56:	461c      	mov	r4, r3
 810bf58:	f7ff ff92 	bl	810be80 <_ZNKSt9type_infoeqERKS_>
 810bf5c:	b120      	cbz	r0, 810bf68 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 810bf5e:	2308      	movs	r3, #8
 810bf60:	60e3      	str	r3, [r4, #12]
 810bf62:	2306      	movs	r3, #6
 810bf64:	6025      	str	r5, [r4, #0]
 810bf66:	7123      	strb	r3, [r4, #4]
 810bf68:	bd38      	pop	{r3, r4, r5, pc}

0810bf6a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 810bf6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810bf6c:	4605      	mov	r5, r0
 810bf6e:	460c      	mov	r4, r1
 810bf70:	9201      	str	r2, [sp, #4]
 810bf72:	461e      	mov	r6, r3
 810bf74:	f7ff ff84 	bl	810be80 <_ZNKSt9type_infoeqERKS_>
 810bf78:	b950      	cbnz	r0, 810bf90 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810bf7a:	2e03      	cmp	r6, #3
 810bf7c:	d808      	bhi.n	810bf90 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810bf7e:	6823      	ldr	r3, [r4, #0]
 810bf80:	9a01      	ldr	r2, [sp, #4]
 810bf82:	695b      	ldr	r3, [r3, #20]
 810bf84:	4629      	mov	r1, r5
 810bf86:	4620      	mov	r0, r4
 810bf88:	b002      	add	sp, #8
 810bf8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810bf8e:	4718      	bx	r3
 810bf90:	b002      	add	sp, #8
 810bf92:	bd70      	pop	{r4, r5, r6, pc}

0810bf94 <abort>:
 810bf94:	b508      	push	{r3, lr}
 810bf96:	2006      	movs	r0, #6
 810bf98:	f000 f850 	bl	810c03c <raise>
 810bf9c:	2001      	movs	r0, #1
 810bf9e:	f000 f88d 	bl	810c0bc <_exit>
	...

0810bfa4 <__libc_init_array>:
 810bfa4:	b570      	push	{r4, r5, r6, lr}
 810bfa6:	4d0d      	ldr	r5, [pc, #52]	; (810bfdc <__libc_init_array+0x38>)
 810bfa8:	4c0d      	ldr	r4, [pc, #52]	; (810bfe0 <__libc_init_array+0x3c>)
 810bfaa:	1b64      	subs	r4, r4, r5
 810bfac:	10a4      	asrs	r4, r4, #2
 810bfae:	2600      	movs	r6, #0
 810bfb0:	42a6      	cmp	r6, r4
 810bfb2:	d109      	bne.n	810bfc8 <__libc_init_array+0x24>
 810bfb4:	4d0b      	ldr	r5, [pc, #44]	; (810bfe4 <__libc_init_array+0x40>)
 810bfb6:	4c0c      	ldr	r4, [pc, #48]	; (810bfe8 <__libc_init_array+0x44>)
 810bfb8:	f000 f882 	bl	810c0c0 <_init>
 810bfbc:	1b64      	subs	r4, r4, r5
 810bfbe:	10a4      	asrs	r4, r4, #2
 810bfc0:	2600      	movs	r6, #0
 810bfc2:	42a6      	cmp	r6, r4
 810bfc4:	d105      	bne.n	810bfd2 <__libc_init_array+0x2e>
 810bfc6:	bd70      	pop	{r4, r5, r6, pc}
 810bfc8:	f855 3b04 	ldr.w	r3, [r5], #4
 810bfcc:	4798      	blx	r3
 810bfce:	3601      	adds	r6, #1
 810bfd0:	e7ee      	b.n	810bfb0 <__libc_init_array+0xc>
 810bfd2:	f855 3b04 	ldr.w	r3, [r5], #4
 810bfd6:	4798      	blx	r3
 810bfd8:	3601      	adds	r6, #1
 810bfda:	e7f2      	b.n	810bfc2 <__libc_init_array+0x1e>
 810bfdc:	0810c4e4 	.word	0x0810c4e4
 810bfe0:	0810c4e4 	.word	0x0810c4e4
 810bfe4:	0810c4e4 	.word	0x0810c4e4
 810bfe8:	0810c4e8 	.word	0x0810c4e8

0810bfec <_raise_r>:
 810bfec:	291f      	cmp	r1, #31
 810bfee:	b538      	push	{r3, r4, r5, lr}
 810bff0:	4604      	mov	r4, r0
 810bff2:	460d      	mov	r5, r1
 810bff4:	d904      	bls.n	810c000 <_raise_r+0x14>
 810bff6:	2316      	movs	r3, #22
 810bff8:	6003      	str	r3, [r0, #0]
 810bffa:	f04f 30ff 	mov.w	r0, #4294967295
 810bffe:	bd38      	pop	{r3, r4, r5, pc}
 810c000:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810c002:	b112      	cbz	r2, 810c00a <_raise_r+0x1e>
 810c004:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810c008:	b94b      	cbnz	r3, 810c01e <_raise_r+0x32>
 810c00a:	4620      	mov	r0, r4
 810c00c:	f000 f830 	bl	810c070 <_getpid_r>
 810c010:	462a      	mov	r2, r5
 810c012:	4601      	mov	r1, r0
 810c014:	4620      	mov	r0, r4
 810c016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810c01a:	f000 b817 	b.w	810c04c <_kill_r>
 810c01e:	2b01      	cmp	r3, #1
 810c020:	d00a      	beq.n	810c038 <_raise_r+0x4c>
 810c022:	1c59      	adds	r1, r3, #1
 810c024:	d103      	bne.n	810c02e <_raise_r+0x42>
 810c026:	2316      	movs	r3, #22
 810c028:	6003      	str	r3, [r0, #0]
 810c02a:	2001      	movs	r0, #1
 810c02c:	e7e7      	b.n	810bffe <_raise_r+0x12>
 810c02e:	2400      	movs	r4, #0
 810c030:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810c034:	4628      	mov	r0, r5
 810c036:	4798      	blx	r3
 810c038:	2000      	movs	r0, #0
 810c03a:	e7e0      	b.n	810bffe <_raise_r+0x12>

0810c03c <raise>:
 810c03c:	4b02      	ldr	r3, [pc, #8]	; (810c048 <raise+0xc>)
 810c03e:	4601      	mov	r1, r0
 810c040:	6818      	ldr	r0, [r3, #0]
 810c042:	f7ff bfd3 	b.w	810bfec <_raise_r>
 810c046:	bf00      	nop
 810c048:	30040018 	.word	0x30040018

0810c04c <_kill_r>:
 810c04c:	b538      	push	{r3, r4, r5, lr}
 810c04e:	4d07      	ldr	r5, [pc, #28]	; (810c06c <_kill_r+0x20>)
 810c050:	2300      	movs	r3, #0
 810c052:	4604      	mov	r4, r0
 810c054:	4608      	mov	r0, r1
 810c056:	4611      	mov	r1, r2
 810c058:	602b      	str	r3, [r5, #0]
 810c05a:	f000 f827 	bl	810c0ac <_kill>
 810c05e:	1c43      	adds	r3, r0, #1
 810c060:	d102      	bne.n	810c068 <_kill_r+0x1c>
 810c062:	682b      	ldr	r3, [r5, #0]
 810c064:	b103      	cbz	r3, 810c068 <_kill_r+0x1c>
 810c066:	6023      	str	r3, [r4, #0]
 810c068:	bd38      	pop	{r3, r4, r5, pc}
 810c06a:	bf00      	nop
 810c06c:	300400f4 	.word	0x300400f4

0810c070 <_getpid_r>:
 810c070:	f000 b814 	b.w	810c09c <_getpid>

0810c074 <_Unwind_GetDataRelBase>:
 810c074:	b508      	push	{r3, lr}
 810c076:	f7ff ff8d 	bl	810bf94 <abort>

0810c07a <_Unwind_GetTextRelBase>:
 810c07a:	b508      	push	{r3, lr}
 810c07c:	f7ff fffa 	bl	810c074 <_Unwind_GetDataRelBase>

0810c080 <memcpy>:
 810c080:	440a      	add	r2, r1
 810c082:	4291      	cmp	r1, r2
 810c084:	f100 33ff 	add.w	r3, r0, #4294967295
 810c088:	d100      	bne.n	810c08c <memcpy+0xc>
 810c08a:	4770      	bx	lr
 810c08c:	b510      	push	{r4, lr}
 810c08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c092:	f803 4f01 	strb.w	r4, [r3, #1]!
 810c096:	4291      	cmp	r1, r2
 810c098:	d1f9      	bne.n	810c08e <memcpy+0xe>
 810c09a:	bd10      	pop	{r4, pc}

0810c09c <_getpid>:
 810c09c:	4b02      	ldr	r3, [pc, #8]	; (810c0a8 <_getpid+0xc>)
 810c09e:	2258      	movs	r2, #88	; 0x58
 810c0a0:	601a      	str	r2, [r3, #0]
 810c0a2:	f04f 30ff 	mov.w	r0, #4294967295
 810c0a6:	4770      	bx	lr
 810c0a8:	300400f4 	.word	0x300400f4

0810c0ac <_kill>:
 810c0ac:	4b02      	ldr	r3, [pc, #8]	; (810c0b8 <_kill+0xc>)
 810c0ae:	2258      	movs	r2, #88	; 0x58
 810c0b0:	601a      	str	r2, [r3, #0]
 810c0b2:	f04f 30ff 	mov.w	r0, #4294967295
 810c0b6:	4770      	bx	lr
 810c0b8:	300400f4 	.word	0x300400f4

0810c0bc <_exit>:
 810c0bc:	e7fe      	b.n	810c0bc <_exit>
 810c0be:	bf00      	nop

0810c0c0 <_init>:
 810c0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c0c2:	bf00      	nop
 810c0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c0c6:	bc08      	pop	{r3}
 810c0c8:	469e      	mov	lr, r3
 810c0ca:	4770      	bx	lr

0810c0cc <_fini>:
 810c0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c0ce:	bf00      	nop
 810c0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c0d2:	bc08      	pop	{r3}
 810c0d4:	469e      	mov	lr, r3
 810c0d6:	4770      	bx	lr
