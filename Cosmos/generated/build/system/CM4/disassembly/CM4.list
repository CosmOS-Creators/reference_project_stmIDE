
../../../../../../Cosmos/generated/build/system/CM4/bin/CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .program_default_CM7_section_init 00000008  20000c00  08100298  00010c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .program_default_CM7_section_noInit 00000000  20000c08  20000c08  00051810  2**0
                  CONTENTS
  3 .program_blinking_led_CM7_section_init 00000008  20001000  081002a0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .program_blinking_led_CM7_section_noInit 00000000  20001008  20001008  00051810  2**0
                  CONTENTS
  5 .program_default_CM4_section_init 00000004  10000c00  081002a8  00020c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .program_default_CM4_section_noInit 00000000  10000c04  10000c04  00051810  2**0
                  CONTENTS
  7 .program_blinking_led_CM4_section_init 00000004  10001000  081002ac  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .program_blinking_led_CM4_section_noInit 00000000  10001004  10001004  00051810  2**0
                  CONTENTS
  9 .os_section_consts 00000800  38000000  081002b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .os_section_vars 00000400  38008000  08100ab0  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .os_section_funcs 00001648  08100eb0  08100eb0  00040eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         000018ac  081024f8  081024f8  000424f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .rodata       000000e8  08103da4  08103da4  00043da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .init_array   00000004  08103e8c  08103e8c  00043e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .fini_array   00000004  08103e90  08103e90  00043e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .data         00000010  10001800  08103e94  00051800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .bss          0000006c  10001810  08103ea4  00051810  2**2
                  ALLOC
 18 .ARM.attributes 0000002e  00000000  00000000  00051810  2**0
                  CONTENTS, READONLY
 19 .debug_line   0002227b  00000000  00000000  0005183e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_info   00031460  00000000  00000000  00073ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_abbrev 00006ad4  00000000  00000000  000a4f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00001388  00000000  00000000  000ab9f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    0018d41e  00000000  00000000  000acd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_ranges 00000f60  00000000  00000000  0023a198  2**3
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_macro  000406d6  00000000  00000000  0023b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000079  00000000  00000000  0027b7ce  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00004138  00000000  00000000  0027b848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .os_section_funcs:

08100eb0 <buffer_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_readArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8100eb0:	b580      	push	{r7, lr}
 8100eb2:	b094      	sub	sp, #80	; 0x50
 8100eb4:	af00      	add	r7, sp, #0
 8100eb6:	60f8      	str	r0, [r7, #12]
 8100eb8:	60b9      	str	r1, [r7, #8]
 8100eba:	607a      	str	r2, [r7, #4]
    CosmOS_BufferStateType bufferState;

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;

    osVar = os_getOsVar();
 8100ebc:	f000 fb42 	bl	8101544 <os_getOsVar>
 8100ec0:	6478      	str	r0, [r7, #68]	; 0x44
  * @return CosmOS_CoreVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_CoreVariableType * CILcore_getCoreVar(void)
{
    uint32_t result;
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8100ec2:	464b      	mov	r3, r9
 8100ec4:	627b      	str	r3, [r7, #36]	; 0x24
    return (CosmOS_CoreVariableType *)result;
 8100ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    coreVar = CILcore_getCoreVar();
 8100ec8:	643b      	str	r3, [r7, #64]	; 0x40

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8100eca:	687a      	ldr	r2, [r7, #4]
 8100ecc:	68b9      	ldr	r1, [r7, #8]
 8100ece:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8100ed0:	f000 fae8 	bl	81014a4 <memoryProtection_isMemoryRegionProtected>
 8100ed4:	4603      	mov	r3, r0
 8100ed6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    if ( isMemoryRegionProtected )
 8100eda:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8100ede:	2b00      	cmp	r3, #0
 8100ee0:	d003      	beq.n	8100eea <buffer_readArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_IS_PROTECTED;
 8100ee2:	2304      	movs	r3, #4
 8100ee4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8100ee8:	e03f      	b.n	8100f6a <buffer_readArray+0xba>
 8100eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8100eec:	61fb      	str	r3, [r7, #28]
 8100eee:	68fb      	ldr	r3, [r7, #12]
 8100ef0:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * os_getOsBufferVar(CosmOS_OsVariableType * osVar, BitWidthType bufferId)
{
    return (&(osVar->bufferVars[bufferId]));
 8100ef2:	69fb      	ldr	r3, [r7, #28]
 8100ef4:	689a      	ldr	r2, [r3, #8]
 8100ef6:	69bb      	ldr	r3, [r7, #24]
 8100ef8:	011b      	lsls	r3, r3, #4
 8100efa:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * readPermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8100efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8100efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100f00:	623b      	str	r3, [r7, #32]
  *
  * @return CosmOS_PermissionsConfigurationType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_PermissionsConfigurationType * buffer_getBufferReadPermission(CosmOS_BufferVariableType * bufferVar)
{
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->readPermission);
 8100f02:	6a3b      	ldr	r3, [r7, #32]
 8100f04:	681b      	ldr	r3, [r3, #0]
 8100f06:	68db      	ldr	r3, [r3, #12]

        readPermission = buffer_getBufferReadPermission( bufferVar );
 8100f08:	637b      	str	r3, [r7, #52]	; 0x34
        accessState = permission_tryAccess( readPermission, coreVar );
 8100f0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8100f0c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8100f0e:	f000 fb43 	bl	8101598 <permission_tryAccess>
 8100f12:	6338      	str	r0, [r7, #48]	; 0x30

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8100f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100f16:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8100f1a:	d103      	bne.n	8100f24 <buffer_readArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8100f1c:	2303      	movs	r3, #3
 8100f1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8100f22:	e022      	b.n	8100f6a <buffer_readArray+0xba>
 8100f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100f26:	617b      	str	r3, [r7, #20]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getFullCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return (bufferVar->fullCells);
 8100f28:	697b      	ldr	r3, [r7, #20]
 8100f2a:	68db      	ldr	r3, [r3, #12]
        else
        {
            BitWidthType fullCellsNum;


            fullCellsNum = buffer_getFullCellsNum( bufferVar );
 8100f2c:	62fb      	str	r3, [r7, #44]	; 0x2c

            if ( fullCellsNum >= size)
 8100f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8100f30:	687b      	ldr	r3, [r7, #4]
 8100f32:	429a      	cmp	r2, r3
 8100f34:	d316      	bcc.n	8100f64 <buffer_readArray+0xb4>
                BitWidthType userBufferIndex;

                unsigned char * userBuffer;


                userBuffer = buffer;
 8100f36:	68bb      	ldr	r3, [r7, #8]
 8100f38:	62bb      	str	r3, [r7, #40]	; 0x28
                userBufferIndex = 0;
 8100f3a:	2300      	movs	r3, #0
 8100f3c:	64bb      	str	r3, [r7, #72]	; 0x48

                while ( ( userBufferIndex < size ) )
 8100f3e:	e00c      	b.n	8100f5a <buffer_readArray+0xaa>
                {
                    bufferState = buffer_pull( bufferVar, ( userBuffer + userBufferIndex ) );
 8100f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8100f42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8100f44:	4413      	add	r3, r2
 8100f46:	4619      	mov	r1, r3
 8100f48:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8100f4a:	f000 f87c 	bl	8101046 <buffer_pull>
 8100f4e:	4603      	mov	r3, r0
 8100f50:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    userBufferIndex++;
 8100f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8100f56:	3301      	adds	r3, #1
 8100f58:	64bb      	str	r3, [r7, #72]	; 0x48
                while ( ( userBufferIndex < size ) )
 8100f5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8100f5c:	687b      	ldr	r3, [r7, #4]
 8100f5e:	429a      	cmp	r2, r3
 8100f60:	d3ee      	bcc.n	8100f40 <buffer_readArray+0x90>
 8100f62:	e002      	b.n	8100f6a <buffer_readArray+0xba>
                }
            }
            else
            {
                bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM;
 8100f64:	2306      	movs	r3, #6
 8100f66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8100f6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8100f6e:	4618      	mov	r0, r3
 8100f70:	3750      	adds	r7, #80	; 0x50
 8100f72:	46bd      	mov	sp, r7
 8100f74:	bd80      	pop	{r7, pc}

08100f76 <buffer_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_writeArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8100f76:	b580      	push	{r7, lr}
 8100f78:	b094      	sub	sp, #80	; 0x50
 8100f7a:	af00      	add	r7, sp, #0
 8100f7c:	60f8      	str	r0, [r7, #12]
 8100f7e:	60b9      	str	r1, [r7, #8]
 8100f80:	607a      	str	r2, [r7, #4]
    CosmOS_BufferStateType bufferState;

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;

    osVar = os_getOsVar();
 8100f82:	f000 fadf 	bl	8101544 <os_getOsVar>
 8100f86:	6478      	str	r0, [r7, #68]	; 0x44
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8100f88:	464b      	mov	r3, r9
 8100f8a:	627b      	str	r3, [r7, #36]	; 0x24
    return (CosmOS_CoreVariableType *)result;
 8100f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    coreVar = CILcore_getCoreVar();
 8100f8e:	643b      	str	r3, [r7, #64]	; 0x40

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8100f90:	687a      	ldr	r2, [r7, #4]
 8100f92:	68b9      	ldr	r1, [r7, #8]
 8100f94:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8100f96:	f000 fa85 	bl	81014a4 <memoryProtection_isMemoryRegionProtected>
 8100f9a:	4603      	mov	r3, r0
 8100f9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    if ( isMemoryRegionProtected )
 8100fa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8100fa4:	2b00      	cmp	r3, #0
 8100fa6:	d003      	beq.n	8100fb0 <buffer_writeArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_IS_PROTECTED;
 8100fa8:	2304      	movs	r3, #4
 8100faa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8100fae:	e044      	b.n	810103a <buffer_writeArray+0xc4>
 8100fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8100fb2:	61fb      	str	r3, [r7, #28]
 8100fb4:	68fb      	ldr	r3, [r7, #12]
 8100fb6:	61bb      	str	r3, [r7, #24]
 8100fb8:	69fb      	ldr	r3, [r7, #28]
 8100fba:	689a      	ldr	r2, [r3, #8]
 8100fbc:	69bb      	ldr	r3, [r7, #24]
 8100fbe:	011b      	lsls	r3, r3, #4
 8100fc0:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * writePermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8100fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8100fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100fc6:	623b      	str	r3, [r7, #32]
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->writePermission);
 8100fc8:	6a3b      	ldr	r3, [r7, #32]
 8100fca:	681b      	ldr	r3, [r3, #0]
 8100fcc:	691b      	ldr	r3, [r3, #16]

        writePermission = buffer_getBufferWritePermission( bufferVar );
 8100fce:	637b      	str	r3, [r7, #52]	; 0x34
        accessState = permission_tryAccess( writePermission, coreVar );
 8100fd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8100fd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8100fd4:	f000 fae0 	bl	8101598 <permission_tryAccess>
 8100fd8:	6338      	str	r0, [r7, #48]	; 0x30

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8100fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8100fdc:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8100fe0:	d103      	bne.n	8100fea <buffer_writeArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8100fe2:	2303      	movs	r3, #3
 8100fe4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8100fe8:	e027      	b.n	810103a <buffer_writeArray+0xc4>
 8100fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100fec:	617b      	str	r3, [r7, #20]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getEmptyCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return ((bufferVar->cfg->size) - (bufferVar->fullCells));
 8100fee:	697b      	ldr	r3, [r7, #20]
 8100ff0:	681b      	ldr	r3, [r3, #0]
 8100ff2:	689a      	ldr	r2, [r3, #8]
 8100ff4:	697b      	ldr	r3, [r7, #20]
 8100ff6:	68db      	ldr	r3, [r3, #12]
 8100ff8:	1ad3      	subs	r3, r2, r3
        else
        {
            BitWidthType emptyCellsNum;


            emptyCellsNum = buffer_getEmptyCellsNum( bufferVar );
 8100ffa:	62fb      	str	r3, [r7, #44]	; 0x2c

            if ( emptyCellsNum >= size)
 8100ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8100ffe:	687b      	ldr	r3, [r7, #4]
 8101000:	429a      	cmp	r2, r3
 8101002:	d317      	bcc.n	8101034 <buffer_writeArray+0xbe>
                BitWidthType userBufferIndex;

                unsigned char * userBuffer;


                userBuffer = buffer;
 8101004:	68bb      	ldr	r3, [r7, #8]
 8101006:	62bb      	str	r3, [r7, #40]	; 0x28
                userBufferIndex = 0;
 8101008:	2300      	movs	r3, #0
 810100a:	64bb      	str	r3, [r7, #72]	; 0x48

                while ( ( userBufferIndex < size ) )
 810100c:	e00d      	b.n	810102a <buffer_writeArray+0xb4>
                {
                    bufferState = buffer_push( bufferVar, *( userBuffer + userBufferIndex ) );
 810100e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101012:	4413      	add	r3, r2
 8101014:	781b      	ldrb	r3, [r3, #0]
 8101016:	4619      	mov	r1, r3
 8101018:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 810101a:	f000 f84e 	bl	81010ba <buffer_push>
 810101e:	4603      	mov	r3, r0
 8101020:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                    userBufferIndex++;
 8101024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101026:	3301      	adds	r3, #1
 8101028:	64bb      	str	r3, [r7, #72]	; 0x48
                while ( ( userBufferIndex < size ) )
 810102a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810102c:	687b      	ldr	r3, [r7, #4]
 810102e:	429a      	cmp	r2, r3
 8101030:	d3ed      	bcc.n	810100e <buffer_writeArray+0x98>
 8101032:	e002      	b.n	810103a <buffer_writeArray+0xc4>
                }
            }
            else
            {
                bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS;
 8101034:	2305      	movs	r3, #5
 8101036:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 810103a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 810103e:	4618      	mov	r0, r3
 8101040:	3750      	adds	r7, #80	; 0x50
 8101042:	46bd      	mov	sp, r7
 8101044:	bd80      	pop	{r7, pc}

08101046 <buffer_pull>:
{
 8101046:	b480      	push	{r7}
 8101048:	b089      	sub	sp, #36	; 0x24
 810104a:	af00      	add	r7, sp, #0
 810104c:	6078      	str	r0, [r7, #4]
 810104e:	6039      	str	r1, [r7, #0]
 8101050:	687b      	ldr	r3, [r7, #4]
 8101052:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8101054:	68bb      	ldr	r3, [r7, #8]
 8101056:	681b      	ldr	r3, [r3, #0]
 8101058:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 810105a:	61fb      	str	r3, [r7, #28]
 810105c:	687b      	ldr	r3, [r7, #4]
 810105e:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8101060:	68fb      	ldr	r3, [r7, #12]
 8101062:	681b      	ldr	r3, [r3, #0]
 8101064:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8101066:	61bb      	str	r3, [r7, #24]
    *data = *( osBuffer + bufferVar->tail );
 8101068:	687b      	ldr	r3, [r7, #4]
 810106a:	689b      	ldr	r3, [r3, #8]
 810106c:	69ba      	ldr	r2, [r7, #24]
 810106e:	4413      	add	r3, r2
 8101070:	781a      	ldrb	r2, [r3, #0]
 8101072:	683b      	ldr	r3, [r7, #0]
 8101074:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells--;
 8101076:	687b      	ldr	r3, [r7, #4]
 8101078:	68db      	ldr	r3, [r3, #12]
 810107a:	1e5a      	subs	r2, r3, #1
 810107c:	687b      	ldr	r3, [r7, #4]
 810107e:	60da      	str	r2, [r3, #12]
    bufferVar->tail = ( ( bufferVar->tail + 1 ) % bufferSize );
 8101080:	687b      	ldr	r3, [r7, #4]
 8101082:	689b      	ldr	r3, [r3, #8]
 8101084:	3301      	adds	r3, #1
 8101086:	69fa      	ldr	r2, [r7, #28]
 8101088:	fbb3 f2f2 	udiv	r2, r3, r2
 810108c:	69f9      	ldr	r1, [r7, #28]
 810108e:	fb01 f202 	mul.w	r2, r1, r2
 8101092:	1a9a      	subs	r2, r3, r2
 8101094:	687b      	ldr	r3, [r7, #4]
 8101096:	609a      	str	r2, [r3, #8]
 8101098:	687b      	ldr	r3, [r7, #4]
 810109a:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isEmpty(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT(bufferVar->fullCells) ? BUFFER_STATE_ENUM__EMPTY : BUFFER_STATE_ENUM__OK);
 810109c:	693b      	ldr	r3, [r7, #16]
 810109e:	68db      	ldr	r3, [r3, #12]
 81010a0:	2b00      	cmp	r3, #0
 81010a2:	bf0c      	ite	eq
 81010a4:	2301      	moveq	r3, #1
 81010a6:	2300      	movne	r3, #0
 81010a8:	b2db      	uxtb	r3, r3
    bufferState = buffer_isEmpty( bufferVar );
 81010aa:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 81010ac:	7dfb      	ldrb	r3, [r7, #23]
}
 81010ae:	4618      	mov	r0, r3
 81010b0:	3724      	adds	r7, #36	; 0x24
 81010b2:	46bd      	mov	sp, r7
 81010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010b8:	4770      	bx	lr

081010ba <buffer_push>:
{
 81010ba:	b480      	push	{r7}
 81010bc:	b089      	sub	sp, #36	; 0x24
 81010be:	af00      	add	r7, sp, #0
 81010c0:	6078      	str	r0, [r7, #4]
 81010c2:	460b      	mov	r3, r1
 81010c4:	70fb      	strb	r3, [r7, #3]
 81010c6:	687b      	ldr	r3, [r7, #4]
 81010c8:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 81010ca:	68bb      	ldr	r3, [r7, #8]
 81010cc:	681b      	ldr	r3, [r3, #0]
 81010ce:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 81010d0:	61fb      	str	r3, [r7, #28]
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 81010d6:	68fb      	ldr	r3, [r7, #12]
 81010d8:	681b      	ldr	r3, [r3, #0]
 81010da:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 81010dc:	61bb      	str	r3, [r7, #24]
    *( osBuffer + bufferVar->head ) = data;
 81010de:	687b      	ldr	r3, [r7, #4]
 81010e0:	685b      	ldr	r3, [r3, #4]
 81010e2:	69ba      	ldr	r2, [r7, #24]
 81010e4:	4413      	add	r3, r2
 81010e6:	78fa      	ldrb	r2, [r7, #3]
 81010e8:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells++;
 81010ea:	687b      	ldr	r3, [r7, #4]
 81010ec:	68db      	ldr	r3, [r3, #12]
 81010ee:	1c5a      	adds	r2, r3, #1
 81010f0:	687b      	ldr	r3, [r7, #4]
 81010f2:	60da      	str	r2, [r3, #12]
    bufferVar->head = ( ( bufferVar->head + 1 ) % bufferSize );
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	685b      	ldr	r3, [r3, #4]
 81010f8:	3301      	adds	r3, #1
 81010fa:	69fa      	ldr	r2, [r7, #28]
 81010fc:	fbb3 f2f2 	udiv	r2, r3, r2
 8101100:	69f9      	ldr	r1, [r7, #28]
 8101102:	fb01 f202 	mul.w	r2, r1, r2
 8101106:	1a9a      	subs	r2, r3, r2
 8101108:	687b      	ldr	r3, [r7, #4]
 810110a:	605a      	str	r2, [r3, #4]
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isFull(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT((bufferVar->cfg->size) ^ (bufferVar->fullCells)) ? \
 8101110:	693b      	ldr	r3, [r7, #16]
 8101112:	681b      	ldr	r3, [r3, #0]
 8101114:	689a      	ldr	r2, [r3, #8]
 8101116:	693b      	ldr	r3, [r7, #16]
 8101118:	68db      	ldr	r3, [r3, #12]
    BUFFER_STATE_ENUM__FULL : BUFFER_STATE_ENUM__OK);
 810111a:	429a      	cmp	r2, r3
 810111c:	d101      	bne.n	8101122 <buffer_push+0x68>
 810111e:	2302      	movs	r3, #2
 8101120:	e000      	b.n	8101124 <buffer_push+0x6a>
 8101122:	2300      	movs	r3, #0
    bufferState = buffer_isFull( bufferVar );
 8101124:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8101126:	7dfb      	ldrb	r3, [r7, #23]
}
 8101128:	4618      	mov	r0, r3
 810112a:	3724      	adds	r7, #36	; 0x24
 810112c:	46bd      	mov	sp, r7
 810112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101132:	4770      	bx	lr

08101134 <bufferDouble_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_readArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8101134:	b580      	push	{r7, lr}
 8101136:	b08e      	sub	sp, #56	; 0x38
 8101138:	af00      	add	r7, sp, #0
 810113a:	60f8      	str	r0, [r7, #12]
 810113c:	60b9      	str	r1, [r7, #8]
 810113e:	607a      	str	r2, [r7, #4]
 8101140:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8101142:	f000 f9ff 	bl	8101544 <os_getOsVar>
 8101146:	6338      	str	r0, [r7, #48]	; 0x30
 8101148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810114a:	623b      	str	r3, [r7, #32]
 810114c:	68fb      	ldr	r3, [r7, #12]
 810114e:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferDoubleVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferDoubleVariableType * os_getOsBufferDoubleVar(CosmOS_OsVariableType * osVar, BitWidthType bufferDoubleId)
{
    return (&(osVar->bufferDoubleVars[bufferDoubleId]));
 8101150:	6a3b      	ldr	r3, [r7, #32]
 8101152:	68d9      	ldr	r1, [r3, #12]
 8101154:	69fa      	ldr	r2, [r7, #28]
 8101156:	4613      	mov	r3, r2
 8101158:	005b      	lsls	r3, r3, #1
 810115a:	4413      	add	r3, r2
 810115c:	009b      	lsls	r3, r3, #2
 810115e:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8101160:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8101162:	78fb      	ldrb	r3, [r7, #3]
 8101164:	2b00      	cmp	r3, #0
 8101166:	d002      	beq.n	810116e <bufferDouble_readArray+0x3a>
 8101168:	2b01      	cmp	r3, #1
 810116a:	d00b      	beq.n	8101184 <bufferDouble_readArray+0x50>
        }

        default :
        {
            /* PANIC */
            break;
 810116c:	e015      	b.n	810119a <bufferDouble_readArray+0x66>
 810116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101170:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * bufferDouble_getBufferDoubleUserBuffer(CosmOS_BufferDoubleVariableType * bufferDoubleVar)
{
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8101172:	69bb      	ldr	r3, [r7, #24]
 8101174:	681b      	ldr	r3, [r3, #0]
 8101176:	681a      	ldr	r2, [r3, #0]
 8101178:	69bb      	ldr	r3, [r7, #24]
 810117a:	689b      	ldr	r3, [r3, #8]
 810117c:	009b      	lsls	r3, r3, #2
 810117e:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8101180:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101182:	e00a      	b.n	810119a <bufferDouble_readArray+0x66>
 8101184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101186:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8101188:	697b      	ldr	r3, [r7, #20]
 810118a:	681b      	ldr	r3, [r3, #0]
 810118c:	681a      	ldr	r2, [r3, #0]
 810118e:	697b      	ldr	r3, [r7, #20]
 8101190:	685b      	ldr	r3, [r3, #4]
 8101192:	009b      	lsls	r3, r3, #2
 8101194:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8101196:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101198:	bf00      	nop
 810119a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810119c:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->id);
 810119e:	693b      	ldr	r3, [r7, #16]
 81011a0:	681b      	ldr	r3, [r3, #0]
 81011a2:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 81011a4:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_readArray( bufferId, buffer, size );
 81011a6:	687a      	ldr	r2, [r7, #4]
 81011a8:	68b9      	ldr	r1, [r7, #8]
 81011aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81011ac:	f7ff fe80 	bl	8100eb0 <buffer_readArray>
 81011b0:	4603      	mov	r3, r0
 81011b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 81011b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81011ba:	4618      	mov	r0, r3
 81011bc:	3738      	adds	r7, #56	; 0x38
 81011be:	46bd      	mov	sp, r7
 81011c0:	bd80      	pop	{r7, pc}

081011c2 <bufferDouble_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_writeArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 81011c2:	b580      	push	{r7, lr}
 81011c4:	b08e      	sub	sp, #56	; 0x38
 81011c6:	af00      	add	r7, sp, #0
 81011c8:	60f8      	str	r0, [r7, #12]
 81011ca:	60b9      	str	r1, [r7, #8]
 81011cc:	607a      	str	r2, [r7, #4]
 81011ce:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 81011d0:	f000 f9b8 	bl	8101544 <os_getOsVar>
 81011d4:	6338      	str	r0, [r7, #48]	; 0x30
 81011d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81011d8:	623b      	str	r3, [r7, #32]
 81011da:	68fb      	ldr	r3, [r7, #12]
 81011dc:	61fb      	str	r3, [r7, #28]
 81011de:	6a3b      	ldr	r3, [r7, #32]
 81011e0:	68d9      	ldr	r1, [r3, #12]
 81011e2:	69fa      	ldr	r2, [r7, #28]
 81011e4:	4613      	mov	r3, r2
 81011e6:	005b      	lsls	r3, r3, #1
 81011e8:	4413      	add	r3, r2
 81011ea:	009b      	lsls	r3, r3, #2
 81011ec:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 81011ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 81011f0:	78fb      	ldrb	r3, [r7, #3]
 81011f2:	2b00      	cmp	r3, #0
 81011f4:	d002      	beq.n	81011fc <bufferDouble_writeArray+0x3a>
 81011f6:	2b01      	cmp	r3, #1
 81011f8:	d00b      	beq.n	8101212 <bufferDouble_writeArray+0x50>
        }

        default :
        {
            /* PANIC */
            break;
 81011fa:	e015      	b.n	8101228 <bufferDouble_writeArray+0x66>
 81011fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81011fe:	61bb      	str	r3, [r7, #24]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8101200:	69bb      	ldr	r3, [r7, #24]
 8101202:	681b      	ldr	r3, [r3, #0]
 8101204:	681a      	ldr	r2, [r3, #0]
 8101206:	69bb      	ldr	r3, [r7, #24]
 8101208:	689b      	ldr	r3, [r3, #8]
 810120a:	009b      	lsls	r3, r3, #2
 810120c:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 810120e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101210:	e00a      	b.n	8101228 <bufferDouble_writeArray+0x66>
 8101212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101214:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8101216:	697b      	ldr	r3, [r7, #20]
 8101218:	681b      	ldr	r3, [r3, #0]
 810121a:	681a      	ldr	r2, [r3, #0]
 810121c:	697b      	ldr	r3, [r7, #20]
 810121e:	685b      	ldr	r3, [r3, #4]
 8101220:	009b      	lsls	r3, r3, #2
 8101222:	4413      	add	r3, r2
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8101224:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101226:	bf00      	nop
 8101228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810122a:	613b      	str	r3, [r7, #16]
 810122c:	693b      	ldr	r3, [r7, #16]
 810122e:	681b      	ldr	r3, [r3, #0]
 8101230:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 8101232:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_writeArray( bufferId, buffer, size );
 8101234:	687a      	ldr	r2, [r7, #4]
 8101236:	68b9      	ldr	r1, [r7, #8]
 8101238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810123a:	f7ff fe9c 	bl	8100f76 <buffer_writeArray>
 810123e:	4603      	mov	r3, r0
 8101240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8101244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8101248:	4618      	mov	r0, r3
 810124a:	3738      	adds	r7, #56	; 0x38
 810124c:	46bd      	mov	sp, r7
 810124e:	bd80      	pop	{r7, pc}

08101250 <core_getCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_CoreVariableType * core_getCoreVar(void)
{
 8101250:	b480      	push	{r7}
 8101252:	b083      	sub	sp, #12
 8101254:	af00      	add	r7, sp, #0
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101256:	464b      	mov	r3, r9
 8101258:	607b      	str	r3, [r7, #4]
    return (CosmOS_CoreVariableType *)result;
 810125a:	687b      	ldr	r3, [r7, #4]
    return CILcore_getCoreVar();
}
 810125c:	4618      	mov	r0, r3
 810125e:	370c      	adds	r7, #12
 8101260:	46bd      	mov	sp, r7
 8101262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101266:	4770      	bx	lr

08101268 <core_setSchedulableIntoCurrentContext>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void core_setSchedulableIntoCurrentContext(CosmOS_CoreVariableType * coreVar, CosmOS_SchedulableVariableType * schedulableVar)
{
 8101268:	b480      	push	{r7}
 810126a:	b08d      	sub	sp, #52	; 0x34
 810126c:	af00      	add	r7, sp, #0
 810126e:	6078      	str	r0, [r7, #4]
 8101270:	6039      	str	r1, [r7, #0]
 8101272:	683b      	ldr	r3, [r7, #0]
 8101274:	60fb      	str	r3, [r7, #12]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType schedulable_getProgramId(CosmOS_SchedulableVariableType * schedulable)
{
    return (schedulable->cfg->programId);
 8101276:	68fb      	ldr	r3, [r7, #12]
 8101278:	681b      	ldr	r3, [r3, #0]
 810127a:	699b      	ldr	r3, [r3, #24]
    BitWidthType programId;

    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulableVar );
 810127c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810127e:	687b      	ldr	r3, [r7, #4]
 8101280:	617b      	str	r3, [r7, #20]
 8101282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101284:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_ProgramVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ProgramVariableType * core_getCoreProgramVar(CosmOS_CoreVariableType * core, BitWidthType programIterator)
{
    return (&(core->programVars[programIterator]));
 8101286:	697b      	ldr	r3, [r7, #20]
 8101288:	68d9      	ldr	r1, [r3, #12]
 810128a:	693a      	ldr	r2, [r7, #16]
 810128c:	4613      	mov	r3, r2
 810128e:	005b      	lsls	r3, r3, #1
 8101290:	4413      	add	r3, r2
 8101292:	009b      	lsls	r3, r3, #2
 8101294:	440b      	add	r3, r1
    programVar = core_getCoreProgramVar( coreVar, programId );
 8101296:	62bb      	str	r3, [r7, #40]	; 0x28
 8101298:	687b      	ldr	r3, [r7, #4]
 810129a:	61fb      	str	r3, [r7, #28]
 810129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810129e:	61bb      	str	r3, [r7, #24]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreProgramInExecution(CosmOS_CoreVariableType * core, CosmOS_ProgramVariableType * programInExecutionParam)
{
    core->programInExecution = programInExecutionParam;
 81012a0:	69fb      	ldr	r3, [r7, #28]
 81012a2:	69ba      	ldr	r2, [r7, #24]
 81012a4:	609a      	str	r2, [r3, #8]
}
 81012a6:	bf00      	nop
 81012a8:	687b      	ldr	r3, [r7, #4]
 81012aa:	627b      	str	r3, [r7, #36]	; 0x24
 81012ac:	683b      	ldr	r3, [r7, #0]
 81012ae:	623b      	str	r3, [r7, #32]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreSchedulableInExecution(CosmOS_CoreVariableType * core, CosmOS_SchedulableVariableType * schedulableInExecutionParam)
{
    core->schedulableInExecution = schedulableInExecutionParam;
 81012b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012b2:	6a3a      	ldr	r2, [r7, #32]
 81012b4:	605a      	str	r2, [r3, #4]
}
 81012b6:	bf00      	nop

    core_setCoreProgramInExecution( coreVar, programVar );
    core_setCoreSchedulableInExecution( coreVar, schedulableVar );
}
 81012b8:	bf00      	nop
 81012ba:	3734      	adds	r7, #52	; 0x34
 81012bc:	46bd      	mov	sp, r7
 81012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012c2:	4770      	bx	lr

081012c4 <coreSync_getBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_getBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 81012c4:	b580      	push	{r7, lr}
 81012c6:	b096      	sub	sp, #88	; 0x58
 81012c8:	af00      	add	r7, sp, #0
 81012ca:	6078      	str	r0, [r7, #4]
 81012cc:	6039      	str	r1, [r7, #0]
 81012ce:	687b      	ldr	r3, [r7, #4]
 81012d0:	62bb      	str	r3, [r7, #40]	; 0x28
 81012d2:	683b      	ldr	r3, [r7, #0]
 81012d4:	627b      	str	r3, [r7, #36]	; 0x24
    return (&(core->barrierVars[barrierId]));
 81012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81012d8:	695a      	ldr	r2, [r3, #20]
 81012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81012dc:	009b      	lsls	r3, r3, #2
 81012de:	4413      	add	r3, r2
    CosmOS_BarrierVariableType * barrierVar;

    volatile CosmOS_BarrierStateType barrierState;


    barrierVar = core_getBarrierVar( coreVar, barrierId );
 81012e0:	653b      	str	r3, [r7, #80]	; 0x50
 81012e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81012e4:	633b      	str	r3, [r7, #48]	; 0x30
 81012e6:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 81012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void coreSync_setBarrierState(CosmOS_BarrierVariableType * barrier, CosmOS_BarrierStateType barrierStateParam)
{
    barrier->barrierState = barrierStateParam;
 81012ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81012ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81012f0:	601a      	str	r2, [r3, #0]
}
 81012f2:	bf00      	nop
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__REACHED);

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    osVar = os_getOsVar();
 81012f4:	f000 f926 	bl	8101544 <os_getOsVar>
 81012f8:	64f8      	str	r0, [r7, #76]	; 0x4c
 81012fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81012fc:	637b      	str	r3, [r7, #52]	; 0x34
    return (osVar->cfg->numberOfCores);
 81012fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101300:	681b      	ldr	r3, [r3, #0]
 8101302:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 8101304:	64bb      	str	r3, [r7, #72]	; 0x48

    numberOfSynchronizedCores = 0;
 8101306:	2300      	movs	r3, #0
 8101308:	657b      	str	r3, [r7, #84]	; 0x54
 810130a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810130c:	63fb      	str	r3, [r7, #60]	; 0x3c
 810130e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101310:	63bb      	str	r3, [r7, #56]	; 0x38
    return (&(osVar->coreVars[coreId]));
 8101312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101314:	685a      	ldr	r2, [r3, #4]
 8101316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101318:	015b      	lsls	r3, r3, #5
 810131a:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, numberOfSynchronizedCores );
 810131c:	607b      	str	r3, [r7, #4]
 810131e:	687b      	ldr	r3, [r7, #4]
 8101320:	647b      	str	r3, [r7, #68]	; 0x44
 8101322:	683b      	ldr	r3, [r7, #0]
 8101324:	643b      	str	r3, [r7, #64]	; 0x40
 8101326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101328:	695a      	ldr	r2, [r3, #20]
 810132a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810132c:	009b      	lsls	r3, r3, #2
 810132e:	4413      	add	r3, r2
    barrierVar = core_getBarrierVar( coreVar, barrierId );
 8101330:	653b      	str	r3, [r7, #80]	; 0x50

    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 8101332:	e026      	b.n	8101382 <coreSync_getBarrier+0xbe>
 8101334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101336:	623b      	str	r3, [r7, #32]
    return (barrier->barrierState);
 8101338:	6a3b      	ldr	r3, [r7, #32]
 810133a:	681b      	ldr	r3, [r3, #0]
    {
        barrierState = coreSync_getBarrierState( barrierVar );
 810133c:	60fb      	str	r3, [r7, #12]

        if ( ( barrierState IS_EQUAL_TO BARRIER_STATE_ENUM__REACHED ) )
 810133e:	68fb      	ldr	r3, [r7, #12]
 8101340:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8101344:	d11d      	bne.n	8101382 <coreSync_getBarrier+0xbe>
        {
            numberOfSynchronizedCores++;
 8101346:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101348:	3301      	adds	r3, #1
 810134a:	657b      	str	r3, [r7, #84]	; 0x54

            coreVar = os_getCoreVar( osVar, ( numberOfSynchronizedCores % numberOfCores ) );
 810134c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810134e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8101350:	fbb3 f2f2 	udiv	r2, r3, r2
 8101354:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8101356:	fb01 f202 	mul.w	r2, r1, r2
 810135a:	1a9b      	subs	r3, r3, r2
 810135c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 810135e:	617a      	str	r2, [r7, #20]
 8101360:	613b      	str	r3, [r7, #16]
 8101362:	697b      	ldr	r3, [r7, #20]
 8101364:	685a      	ldr	r2, [r3, #4]
 8101366:	693b      	ldr	r3, [r7, #16]
 8101368:	015b      	lsls	r3, r3, #5
 810136a:	4413      	add	r3, r2
 810136c:	607b      	str	r3, [r7, #4]
 810136e:	687b      	ldr	r3, [r7, #4]
 8101370:	61fb      	str	r3, [r7, #28]
 8101372:	683b      	ldr	r3, [r7, #0]
 8101374:	61bb      	str	r3, [r7, #24]
 8101376:	69fb      	ldr	r3, [r7, #28]
 8101378:	695a      	ldr	r2, [r3, #20]
 810137a:	69bb      	ldr	r3, [r7, #24]
 810137c:	009b      	lsls	r3, r3, #2
 810137e:	4413      	add	r3, r2
            barrierVar = core_getBarrierVar( coreVar, barrierId );
 8101380:	653b      	str	r3, [r7, #80]	; 0x50
    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 8101382:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8101384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101386:	429a      	cmp	r2, r3
 8101388:	d1d4      	bne.n	8101334 <coreSync_getBarrier+0x70>
        }
    }
}
 810138a:	bf00      	nop
 810138c:	bf00      	nop
 810138e:	3758      	adds	r7, #88	; 0x58
 8101390:	46bd      	mov	sp, r7
 8101392:	bd80      	pop	{r7, pc}

08101394 <coreSync_reactivateBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_reactivateBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 8101394:	b480      	push	{r7}
 8101396:	b089      	sub	sp, #36	; 0x24
 8101398:	af00      	add	r7, sp, #0
 810139a:	6078      	str	r0, [r7, #4]
 810139c:	6039      	str	r1, [r7, #0]
    CosmOS_BarrierVariableType * barrierVar;

    cosmosAssert( barrierId IS_EQUAL_TO SCHEDULERS_SYNC_ID );
 810139e:	683b      	ldr	r3, [r7, #0]
 81013a0:	2b03      	cmp	r3, #3
 81013a2:	bf0c      	ite	eq
 81013a4:	2301      	moveq	r3, #1
 81013a6:	2300      	movne	r3, #0
 81013a8:	b2db      	uxtb	r3, r3
 81013aa:	60bb      	str	r3, [r7, #8]
    }
    else
    {

    }
}
 81013ac:	bf00      	nop
 81013ae:	687b      	ldr	r3, [r7, #4]
 81013b0:	613b      	str	r3, [r7, #16]
 81013b2:	683b      	ldr	r3, [r7, #0]
 81013b4:	60fb      	str	r3, [r7, #12]
 81013b6:	693b      	ldr	r3, [r7, #16]
 81013b8:	695a      	ldr	r2, [r3, #20]
 81013ba:	68fb      	ldr	r3, [r7, #12]
 81013bc:	009b      	lsls	r3, r3, #2
 81013be:	4413      	add	r3, r2

    barrierVar = core_getBarrierVar( coreVar, barrierId );
 81013c0:	61fb      	str	r3, [r7, #28]
 81013c2:	69fb      	ldr	r3, [r7, #28]
 81013c4:	61bb      	str	r3, [r7, #24]
 81013c6:	2300      	movs	r3, #0
 81013c8:	617b      	str	r3, [r7, #20]
    barrier->barrierState = barrierStateParam;
 81013ca:	69bb      	ldr	r3, [r7, #24]
 81013cc:	697a      	ldr	r2, [r7, #20]
 81013ce:	601a      	str	r2, [r3, #0]
}
 81013d0:	bf00      	nop
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__ACTIVATED );

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */
}
 81013d2:	bf00      	nop
 81013d4:	3724      	adds	r7, #36	; 0x24
 81013d6:	46bd      	mov	sp, r7
 81013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013dc:	4770      	bx	lr

081013de <deviceIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void deviceIO_togglePin(BitWidthType id, void *GPIOx, BitWidthType GPIO_Pin)
{
 81013de:	b580      	push	{r7, lr}
 81013e0:	b084      	sub	sp, #16
 81013e2:	af00      	add	r7, sp, #0
 81013e4:	60f8      	str	r0, [r7, #12]
 81013e6:	60b9      	str	r1, [r7, #8]
 81013e8:	607a      	str	r2, [r7, #4]
    CILGPIO_togglePin( GPIOx, GPIO_Pin );
 81013ea:	6879      	ldr	r1, [r7, #4]
 81013ec:	68b8      	ldr	r0, [r7, #8]
 81013ee:	f000 fdc0 	bl	8101f72 <CILGPIO_togglePin>
}
 81013f2:	bf00      	nop
 81013f4:	3710      	adds	r7, #16
 81013f6:	46bd      	mov	sp, r7
 81013f8:	bd80      	pop	{r7, pc}

081013fa <memoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_init(void)
{
 81013fa:	b580      	push	{r7, lr}
 81013fc:	af00      	add	r7, sp, #0
    CILmemoryProtection_init();
 81013fe:	f000 fdc7 	bl	8101f90 <CILmemoryProtection_init>
}
 8101402:	bf00      	nop
 8101404:	bd80      	pop	{r7, pc}

08101406 <memoryProtection_setMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_setMemoryProtection(CosmOS_CoreVariableType * core,CosmOS_SchedulableVariableType  * schedulable)
{
 8101406:	b580      	push	{r7, lr}
 8101408:	b096      	sub	sp, #88	; 0x58
 810140a:	af00      	add	r7, sp, #0
 810140c:	6078      	str	r0, [r7, #4]
 810140e:	6039      	str	r1, [r7, #0]
 8101410:	683b      	ldr	r3, [r7, #0]
 8101412:	60fb      	str	r3, [r7, #12]
 8101414:	68fb      	ldr	r3, [r7, #12]
 8101416:	681b      	ldr	r3, [r3, #0]
 8101418:	699b      	ldr	r3, [r3, #24]

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulable );
 810141a:	657b      	str	r3, [r7, #84]	; 0x54
 810141c:	687b      	ldr	r3, [r7, #4]
 810141e:	617b      	str	r3, [r7, #20]
 8101420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101422:	613b      	str	r3, [r7, #16]
    return (&(core->programVars[programIterator]));
 8101424:	697b      	ldr	r3, [r7, #20]
 8101426:	68d9      	ldr	r1, [r3, #12]
 8101428:	693a      	ldr	r2, [r7, #16]
 810142a:	4613      	mov	r3, r2
 810142c:	005b      	lsls	r3, r3, #1
 810142e:	4413      	add	r3, r2
 8101430:	009b      	lsls	r3, r3, #2
 8101432:	440b      	add	r3, r1
    programVar = core_getCoreProgramVar( core, programId );
 8101434:	653b      	str	r3, [r7, #80]	; 0x50
 8101436:	683b      	ldr	r3, [r7, #0]
 8101438:	61bb      	str	r3, [r7, #24]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 810143a:	69bb      	ldr	r3, [r7, #24]
 810143c:	681b      	ldr	r3, [r3, #0]
 810143e:	681b      	ldr	r3, [r3, #0]

    stack = schedulable_getStack( schedulable );
 8101440:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101444:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101448:	62bb      	str	r3, [r7, #40]	; 0x28
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackLowAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackLowAddress);
 810144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810144c:	685b      	ldr	r3, [r3, #4]
    lowAddress = stack_getStackLowAddress( stack );
 810144e:	627b      	str	r3, [r7, #36]	; 0x24
 8101450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101452:	623b      	str	r3, [r7, #32]
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackHighAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackHighAddress);
 8101454:	6a3b      	ldr	r3, [r7, #32]
 8101456:	689b      	ldr	r3, [r3, #8]
    highAddress = stack_getStackHighAddress( stack );
 8101458:	61fb      	str	r3, [r7, #28]
    CILmemoryProtection_setStackOverflowProtection( lowAddress, highAddress );
 810145a:	69f9      	ldr	r1, [r7, #28]
 810145c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810145e:	f000 fe97 	bl	8102190 <CILmemoryProtection_setStackOverflowProtection>
}
 8101462:	bf00      	nop
 8101464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101466:	64bb      	str	r3, [r7, #72]	; 0x48
 8101468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810146a:	647b      	str	r3, [r7, #68]	; 0x44
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemorySize(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemorySize);
 810146c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810146e:	681b      	ldr	r3, [r3, #0]
 8101470:	68db      	ldr	r3, [r3, #12]
    size = program_getProgramMemorySize( program );
 8101472:	643b      	str	r3, [r7, #64]	; 0x40
 8101474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101476:	63fb      	str	r3, [r7, #60]	; 0x3c
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryLowAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryLowAddress);
 8101478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810147a:	681b      	ldr	r3, [r3, #0]
 810147c:	691b      	ldr	r3, [r3, #16]
    lowAddress = program_getProgramMemoryLowAddress( program );
 810147e:	63bb      	str	r3, [r7, #56]	; 0x38
 8101480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101482:	637b      	str	r3, [r7, #52]	; 0x34
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryHighAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryHighAddress);
 8101484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101486:	681b      	ldr	r3, [r3, #0]
 8101488:	695b      	ldr	r3, [r3, #20]
    highAddress = program_getProgramMemoryHighAddress( program );
 810148a:	633b      	str	r3, [r7, #48]	; 0x30
    if ( size )
 810148c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810148e:	2b00      	cmp	r3, #0
 8101490:	d003      	beq.n	810149a <memoryProtection_setMemoryProtection+0x94>
        CILmemoryProtection_setProgramMemoryProtection( lowAddress, highAddress );
 8101492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8101494:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8101496:	f000 fed7 	bl	8102248 <CILmemoryProtection_setProgramMemoryProtection>
}
 810149a:	bf00      	nop

    memoryProtection_setStackOverflowProtection( stack );
    memoryProtection_setProgramMemoryProtection( programVar );
}
 810149c:	bf00      	nop
 810149e:	3758      	adds	r7, #88	; 0x58
 81014a0:	46bd      	mov	sp, r7
 81014a2:	bd80      	pop	{r7, pc}

081014a4 <memoryProtection_isMemoryRegionProtected>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BooleanType memoryProtection_isMemoryRegionProtected(CosmOS_CoreVariableType * core, void * regionLowAddressPointer, BitWidthType size)
{
 81014a4:	b480      	push	{r7}
 81014a6:	b097      	sub	sp, #92	; 0x5c
 81014a8:	af00      	add	r7, sp, #0
 81014aa:	60f8      	str	r0, [r7, #12]
 81014ac:	60b9      	str	r1, [r7, #8]
 81014ae:	607a      	str	r2, [r7, #4]
				programLowAddress,
				programHighAddress,
				regionLowAddress,
				regionHighAddress;

	CosmOS_BooleanType returnValue = True;
 81014b0:	2301      	movs	r3, #1
 81014b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;
	CosmOS_SchedulableVariableType * schedulable;

	regionLowAddress = (AddressType)regionLowAddressPointer;
 81014b6:	68bb      	ldr	r3, [r7, #8]
 81014b8:	653b      	str	r3, [r7, #80]	; 0x50
 81014ba:	68fb      	ldr	r3, [r7, #12]
 81014bc:	617b      	str	r3, [r7, #20]
    return (core->programInExecution);
 81014be:	697b      	ldr	r3, [r7, #20]
 81014c0:	689b      	ldr	r3, [r3, #8]

    programVar = core_getCoreProgramInExecution( core );
 81014c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 81014c4:	68fb      	ldr	r3, [r7, #12]
 81014c6:	61bb      	str	r3, [r7, #24]
    return (core->schedulableInExecution);
 81014c8:	69bb      	ldr	r3, [r7, #24]
 81014ca:	685b      	ldr	r3, [r3, #4]
	schedulable = core_getCoreSchedulableInCurrentContext( core );
 81014cc:	64bb      	str	r3, [r7, #72]	; 0x48
 81014ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81014d0:	61fb      	str	r3, [r7, #28]
 81014d2:	69fb      	ldr	r3, [r7, #28]
 81014d4:	681b      	ldr	r3, [r3, #0]
 81014d6:	681b      	ldr	r3, [r3, #0]
    stack = schedulable_getStack( schedulable );
 81014d8:	647b      	str	r3, [r7, #68]	; 0x44
 81014da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81014dc:	623b      	str	r3, [r7, #32]
    return (stack->stackLowAddress);
 81014de:	6a3b      	ldr	r3, [r7, #32]
 81014e0:	685b      	ldr	r3, [r3, #4]

	stackLowAddress = stack_getStackLowAddress( stack );
 81014e2:	643b      	str	r3, [r7, #64]	; 0x40
 81014e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81014e6:	627b      	str	r3, [r7, #36]	; 0x24
    return (stack->stackHighAddress);
 81014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81014ea:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 81014ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 81014ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81014f0:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->programMemoryLowAddress);
 81014f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81014f4:	681b      	ldr	r3, [r3, #0]
 81014f6:	691b      	ldr	r3, [r3, #16]

    programLowAddress = program_getProgramMemoryLowAddress( programVar );
 81014f8:	63bb      	str	r3, [r7, #56]	; 0x38
 81014fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (program->cfg->programMemoryHighAddress);
 81014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101500:	681b      	ldr	r3, [r3, #0]
 8101502:	695b      	ldr	r3, [r3, #20]
    programHighAddress = program_getProgramMemoryHighAddress( programVar );
 8101504:	637b      	str	r3, [r7, #52]	; 0x34

	regionHighAddress = regionLowAddress + (AddressType)size;
 8101506:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101508:	687b      	ldr	r3, [r7, #4]
 810150a:	4413      	add	r3, r2
 810150c:	633b      	str	r3, [r7, #48]	; 0x30

	if (((regionHighAddress < stackHighAddress) && (regionLowAddress > stackLowAddress)) && \
 810150e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101512:	429a      	cmp	r2, r3
 8101514:	d20e      	bcs.n	8101534 <memoryProtection_isMemoryRegionProtected+0x90>
 8101516:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810151a:	429a      	cmp	r2, r3
 810151c:	d90a      	bls.n	8101534 <memoryProtection_isMemoryRegionProtected+0x90>
 810151e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101520:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101522:	429a      	cmp	r2, r3
 8101524:	d206      	bcs.n	8101534 <memoryProtection_isMemoryRegionProtected+0x90>
		((regionHighAddress < programHighAddress) && (regionLowAddress > programLowAddress)))
 8101526:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810152a:	429a      	cmp	r2, r3
 810152c:	d902      	bls.n	8101534 <memoryProtection_isMemoryRegionProtected+0x90>
	{
		returnValue = False;
 810152e:	2300      	movs	r3, #0
 8101530:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
}
 8101534:	bf00      	nop
 8101536:	4618      	mov	r0, r3
 8101538:	375c      	adds	r7, #92	; 0x5c
 810153a:	46bd      	mov	sp, r7
 810153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101540:	4770      	bx	lr
	...

08101544 <os_getOsVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_OsVariableType * os_getOsVar(void)
{
 8101544:	b480      	push	{r7}
 8101546:	af00      	add	r7, sp, #0
    return &OsVar;
 8101548:	4b02      	ldr	r3, [pc, #8]	; (8101554 <os_getOsVar+0x10>)
}
 810154a:	4618      	mov	r0, r3
 810154c:	46bd      	mov	sp, r7
 810154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101552:	4770      	bx	lr
 8101554:	380080fc 	.word	0x380080fc

08101558 <os_start>:
{
 8101558:	b580      	push	{r7, lr}
 810155a:	af00      	add	r7, sp, #0
    scheduler_start();
 810155c:	f000 fa3b 	bl	81019d6 <scheduler_start>
};
 8101560:	bf00      	nop
 8101562:	bd80      	pop	{r7, pc}

08101564 <osInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osInit_init(void)
{
 8101564:	b580      	push	{r7, lr}
 8101566:	b082      	sub	sp, #8
 8101568:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_OsVariableType * osVar;

    switchMemoryProtection_init();
 810156a:	f7ff ff46 	bl	81013fa <memoryProtection_init>

    osVar = os_getOsVar();
 810156e:	f7ff ffe9 	bl	8101544 <os_getOsVar>
 8101572:	6078      	str	r0, [r7, #4]

    CILcore_setCoreVar(osVar);
 8101574:	6878      	ldr	r0, [r7, #4]
 8101576:	f000 fcd6 	bl	8101f26 <CILcore_setCoreVar>

    coreVar = core_getCoreVar();
 810157a:	f7ff fe69 	bl	8101250 <core_getCoreVar>
 810157e:	6038      	str	r0, [r7, #0]

    stackInit_init( coreVar );
 8101580:	6838      	ldr	r0, [r7, #0]
 8101582:	f000 fbd4 	bl	8101d2e <stackInit_init>

    //init MPU
    //init DMA to buffers
    //Maybe better have here CILmicroInit()

    coreSync_getBarrier( coreVar, OS_INIT_ID );
 8101586:	2100      	movs	r1, #0
 8101588:	6838      	ldr	r0, [r7, #0]
 810158a:	f7ff fe9b 	bl	81012c4 <coreSync_getBarrier>

};
 810158e:	bf00      	nop
 8101590:	3708      	adds	r7, #8
 8101592:	46bd      	mov	sp, r7
 8101594:	bd80      	pop	{r7, pc}
	...

08101598 <permission_tryAccess>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_AccessStateType permission_tryAccess(CosmOS_PermissionsConfigurationType * permission,CosmOS_CoreVariableType * coreVar)
{
 8101598:	b480      	push	{r7}
 810159a:	b089      	sub	sp, #36	; 0x24
 810159c:	af00      	add	r7, sp, #0
 810159e:	6078      	str	r0, [r7, #4]
 81015a0:	6039      	str	r1, [r7, #0]
 81015a2:	683b      	ldr	r3, [r7, #0]
 81015a4:	60bb      	str	r3, [r7, #8]
 81015a6:	68bb      	ldr	r3, [r7, #8]
 81015a8:	685b      	ldr	r3, [r3, #4]
    CosmOS_AccessStateType accessState;

    CosmOS_SchedulableVariableType * schedulableVar;

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 81015aa:	61fb      	str	r3, [r7, #28]
 81015ac:	687b      	ldr	r3, [r7, #4]
 81015ae:	617b      	str	r3, [r7, #20]
 81015b0:	69fb      	ldr	r3, [r7, #28]
 81015b2:	613b      	str	r3, [r7, #16]
    cosmosAssert( IS_NOT( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] & \
 81015b4:	697b      	ldr	r3, [r7, #20]
 81015b6:	681a      	ldr	r2, [r3, #0]
 81015b8:	693b      	ldr	r3, [r7, #16]
 81015ba:	681b      	ldr	r3, [r3, #0]
 81015bc:	691b      	ldr	r3, [r3, #16]
 81015be:	491b      	ldr	r1, [pc, #108]	; (810162c <permission_tryAccess+0x94>)
 81015c0:	5ccb      	ldrb	r3, [r1, r3]
 81015c2:	009b      	lsls	r3, r3, #2
 81015c4:	4413      	add	r3, r2
 81015c6:	681a      	ldr	r2, [r3, #0]
 81015c8:	697b      	ldr	r3, [r7, #20]
 81015ca:	6859      	ldr	r1, [r3, #4]
 81015cc:	693b      	ldr	r3, [r7, #16]
 81015ce:	681b      	ldr	r3, [r3, #0]
 81015d0:	691b      	ldr	r3, [r3, #16]
 81015d2:	4816      	ldr	r0, [pc, #88]	; (810162c <permission_tryAccess+0x94>)
 81015d4:	5cc3      	ldrb	r3, [r0, r3]
 81015d6:	009b      	lsls	r3, r3, #2
 81015d8:	440b      	add	r3, r1
 81015da:	681b      	ldr	r3, [r3, #0]
 81015dc:	4013      	ands	r3, r2
 81015de:	2b00      	cmp	r3, #0
 81015e0:	bf0c      	ite	eq
 81015e2:	2301      	moveq	r3, #1
 81015e4:	2300      	movne	r3, #0
 81015e6:	b2db      	uxtb	r3, r3
 81015e8:	60fb      	str	r3, [r7, #12]
 81015ea:	bf00      	nop
    return ((( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] >> schedulableVar->cfg->id ) & BITLOCK_MASK ) ? \
 81015ec:	697b      	ldr	r3, [r7, #20]
 81015ee:	681a      	ldr	r2, [r3, #0]
 81015f0:	693b      	ldr	r3, [r7, #16]
 81015f2:	681b      	ldr	r3, [r3, #0]
 81015f4:	691b      	ldr	r3, [r3, #16]
 81015f6:	490d      	ldr	r1, [pc, #52]	; (810162c <permission_tryAccess+0x94>)
 81015f8:	5ccb      	ldrb	r3, [r1, r3]
 81015fa:	009b      	lsls	r3, r3, #2
 81015fc:	4413      	add	r3, r2
 81015fe:	681a      	ldr	r2, [r3, #0]
 8101600:	693b      	ldr	r3, [r7, #16]
 8101602:	681b      	ldr	r3, [r3, #0]
 8101604:	691b      	ldr	r3, [r3, #16]
 8101606:	fa22 f303 	lsr.w	r3, r2, r3
 810160a:	f003 0301 	and.w	r3, r3, #1
            ACCESS_STATE_ENUM__ALLOWED : ACCESS_STATE_ENUM__DENIED );
 810160e:	2b00      	cmp	r3, #0
 8101610:	d001      	beq.n	8101616 <permission_tryAccess+0x7e>
 8101612:	2300      	movs	r3, #0
 8101614:	e001      	b.n	810161a <permission_tryAccess+0x82>
 8101616:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    accessState = permission_trySchedulableAccess( permission, schedulableVar );
 810161a:	61bb      	str	r3, [r7, #24]

    return accessState;
 810161c:	69bb      	ldr	r3, [r7, #24]
}
 810161e:	4618      	mov	r0, r3
 8101620:	3724      	adds	r7, #36	; 0x24
 8101622:	46bd      	mov	sp, r7
 8101624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101628:	4770      	bx	lr
 810162a:	bf00      	nop
 810162c:	38000074 	.word	0x38000074

08101630 <schedulable_setExecutionStateToFinished>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void schedulable_setExecutionStateToFinished(void)
{
 8101630:	b580      	push	{r7, lr}
 8101632:	b086      	sub	sp, #24
 8101634:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8101636:	f7ff fe0b 	bl	8101250 <core_getCoreVar>
 810163a:	6178      	str	r0, [r7, #20]
 810163c:	697b      	ldr	r3, [r7, #20]
 810163e:	607b      	str	r3, [r7, #4]
 8101640:	687b      	ldr	r3, [r7, #4]
 8101642:	685b      	ldr	r3, [r3, #4]

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 8101644:	613b      	str	r3, [r7, #16]
 8101646:	693b      	ldr	r3, [r7, #16]
 8101648:	60fb      	str	r3, [r7, #12]
 810164a:	2302      	movs	r3, #2
 810164c:	72fb      	strb	r3, [r7, #11]
  *
  * @return CosmOS_SchedulableStateType
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setState(CosmOS_SchedulableVariableType * schedulable, CosmOS_SchedulableStateType stateParam)
{
    schedulable->state = stateParam;
 810164e:	68fb      	ldr	r3, [r7, #12]
 8101650:	7afa      	ldrb	r2, [r7, #11]
 8101652:	711a      	strb	r2, [r3, #4]
}
 8101654:	bf00      	nop

    schedulable_setState( schedulableVar, SCHEDULABLE_INSTANCE_ENUM__EXECUTED );
};
 8101656:	bf00      	nop
 8101658:	3718      	adds	r7, #24
 810165a:	46bd      	mov	sp, r7
 810165c:	bd80      	pop	{r7, pc}

0810165e <scheduler_performanceScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_performanceScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks)
{
 810165e:	b480      	push	{r7}
 8101660:	b093      	sub	sp, #76	; 0x4c
 8101662:	af00      	add	r7, sp, #0
 8101664:	60f8      	str	r0, [r7, #12]
 8101666:	60b9      	str	r1, [r7, #8]
 8101668:	607a      	str	r2, [r7, #4]
 810166a:	603b      	str	r3, [r7, #0]
 810166c:	68fb      	ldr	r3, [r7, #12]
 810166e:	613b      	str	r3, [r7, #16]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType scheduler_getSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler)
{
    return (scheduler->threadListIterator);
 8101670:	693b      	ldr	r3, [r7, #16]
 8101672:	68db      	ldr	r3, [r3, #12]
        threadListElementsNum;

    CosmOS_ThreadVariableType *threadVar;


    threadListIterator = scheduler_getSchedulerThreadListIterator(schedulerVar);
 8101674:	647b      	str	r3, [r7, #68]	; 0x44
 8101676:	68fb      	ldr	r3, [r7, #12]
 8101678:	617b      	str	r3, [r7, #20]
    return (scheduler->cfg->threadListElementsNum);
 810167a:	697b      	ldr	r3, [r7, #20]
 810167c:	681b      	ldr	r3, [r3, #0]
 810167e:	695b      	ldr	r3, [r3, #20]
    threadListElementsNum = scheduler_getSchedulerThreadListElementsNum(schedulerVar);
 8101680:	643b      	str	r3, [r7, #64]	; 0x40

    cosmosAssert(threadListIterator < threadListElementsNum);
 8101682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8101684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101686:	429a      	cmp	r2, r3
 8101688:	bf34      	ite	cc
 810168a:	2301      	movcc	r3, #1
 810168c:	2300      	movcs	r3, #0
 810168e:	b2db      	uxtb	r3, r3
 8101690:	61bb      	str	r3, [r7, #24]
 8101692:	bf00      	nop
 8101694:	68fb      	ldr	r3, [r7, #12]
 8101696:	623b      	str	r3, [r7, #32]
 8101698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810169a:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * scheduler_getSchedulerThreadListThreadVar(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIterator)
{
    return (CosmOS_ThreadVariableType *)(scheduler->cfg->threadList[threadListIterator].threadVar);
 810169c:	6a3b      	ldr	r3, [r7, #32]
 810169e:	681b      	ldr	r3, [r3, #0]
 81016a0:	685a      	ldr	r2, [r3, #4]
 81016a2:	69fb      	ldr	r3, [r7, #28]
 81016a4:	009b      	lsls	r3, r3, #2
 81016a6:	4413      	add	r3, r2
 81016a8:	681b      	ldr	r3, [r3, #0]

    threadVar = scheduler_getSchedulerThreadListThreadVar(schedulerVar, threadListIterator);
 81016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 81016ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81016ae:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * thread_getThreadSchedulable(CosmOS_ThreadVariableType * thread)
{
    return (CosmOS_SchedulableVariableType *)(thread->schedulable);
 81016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016b2:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = thread_getThreadSchedulable(threadVar);
 81016b4:	68bb      	ldr	r3, [r7, #8]
 81016b6:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = schedulable_getStackPointer(*schedulableVar);
 81016b8:	68bb      	ldr	r3, [r7, #8]
 81016ba:	681b      	ldr	r3, [r3, #0]
 81016bc:	62bb      	str	r3, [r7, #40]	; 0x28
    return (schedulable->stackPointer);
 81016be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81016c0:	689a      	ldr	r2, [r3, #8]
 81016c2:	687b      	ldr	r3, [r7, #4]
 81016c4:	601a      	str	r2, [r3, #0]

    threadListIterator = ((threadListIterator + 1) % threadListElementsNum);
 81016c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81016c8:	3301      	adds	r3, #1
 81016ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81016cc:	fbb3 f2f2 	udiv	r2, r3, r2
 81016d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 81016d2:	fb01 f202 	mul.w	r2, r1, r2
 81016d6:	1a9b      	subs	r3, r3, r2
 81016d8:	647b      	str	r3, [r7, #68]	; 0x44
 81016da:	68fb      	ldr	r3, [r7, #12]
 81016dc:	633b      	str	r3, [r7, #48]	; 0x30
 81016de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81016e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIteratorParam)
{
    scheduler->threadListIterator = threadListIteratorParam;
 81016e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81016e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81016e6:	60da      	str	r2, [r3, #12]
}
 81016e8:	bf00      	nop
 81016ea:	68fb      	ldr	r3, [r7, #12]
 81016ec:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->preemptTick);
 81016ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81016f0:	681b      	ldr	r3, [r3, #0]
 81016f2:	68db      	ldr	r3, [r3, #12]
    scheduler_setSchedulerThreadListIterator(schedulerVar, threadListIterator);

    preemptTick = scheduler_getSchedulerPreemptTick(schedulerVar);
 81016f4:	63bb      	str	r3, [r7, #56]	; 0x38
    *timerTicks = preemptTick;
 81016f6:	683b      	ldr	r3, [r7, #0]
 81016f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81016fa:	601a      	str	r2, [r3, #0]
}
 81016fc:	bf00      	nop
 81016fe:	374c      	adds	r7, #76	; 0x4c
 8101700:	46bd      	mov	sp, r7
 8101702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101706:	4770      	bx	lr

08101708 <scheduler_classicScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_classicScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks, BitWidthType startTick, BitWidthType currentTick)
{
 8101708:	b580      	push	{r7, lr}
 810170a:	b088      	sub	sp, #32
 810170c:	af00      	add	r7, sp, #0
 810170e:	60f8      	str	r0, [r7, #12]
 8101710:	60b9      	str	r1, [r7, #8]
 8101712:	607a      	str	r2, [r7, #4]
 8101714:	603b      	str	r3, [r7, #0]
 8101716:	68fb      	ldr	r3, [r7, #12]
 8101718:	617b      	str	r3, [r7, #20]
    return (CosmOS_TaskVariableType *)(scheduler->cfg->idleTaskVar);
 810171a:	697b      	ldr	r3, [r7, #20]
 810171c:	681b      	ldr	r3, [r3, #0]
 810171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    CosmOS_TaskVariableType * taskVar;


    taskVar = scheduler_getSchedulerIdleTaskVar( schedulerVar );
 8101720:	61fb      	str	r3, [r7, #28]
 8101722:	69fb      	ldr	r3, [r7, #28]
 8101724:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * task_getTaskSchedulable(CosmOS_TaskVariableType * task)
{
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8101726:	69bb      	ldr	r3, [r7, #24]
 8101728:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = task_getTaskSchedulable( taskVar );
 810172a:	68bb      	ldr	r3, [r7, #8]
 810172c:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 810172e:	68bb      	ldr	r3, [r7, #8]
 8101730:	681b      	ldr	r3, [r3, #0]
 8101732:	4618      	mov	r0, r3
 8101734:	f000 fad5 	bl	8101ce2 <stackInit_schedulableStackInit>
 8101738:	4602      	mov	r2, r0
 810173a:	687b      	ldr	r3, [r7, #4]
 810173c:	601a      	str	r2, [r3, #0]

    if ( startTick < currentTick )
 810173e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101742:	429a      	cmp	r2, r3
 8101744:	d207      	bcs.n	8101756 <scheduler_classicScheduling+0x4e>
 8101746:	68fb      	ldr	r3, [r7, #12]
 8101748:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->lastToFirstTaskTicks);
 810174a:	693b      	ldr	r3, [r7, #16]
 810174c:	681b      	ldr	r3, [r3, #0]
 810174e:	699a      	ldr	r2, [r3, #24]
    {
        *timerTicks = scheduler_getSchedulerLastToFirstTaskTicks( schedulerVar );
 8101750:	683b      	ldr	r3, [r7, #0]
 8101752:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *timerTicks = startTick - currentTick;
    }
}
 8101754:	e004      	b.n	8101760 <scheduler_classicScheduling+0x58>
        *timerTicks = startTick - currentTick;
 8101756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810175a:	1ad2      	subs	r2, r2, r3
 810175c:	683b      	ldr	r3, [r7, #0]
 810175e:	601a      	str	r2, [r3, #0]
}
 8101760:	bf00      	nop
 8101762:	3720      	adds	r7, #32
 8101764:	46bd      	mov	sp, r7
 8101766:	bd80      	pop	{r7, pc}

08101768 <scheduler_scheduleNextInstance>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType scheduler_scheduleNextInstance(StackPointerType stackPointer)
{
 8101768:	b580      	push	{r7, lr}
 810176a:	b0b4      	sub	sp, #208	; 0xd0
 810176c:	af00      	add	r7, sp, #0
 810176e:	6078      	str	r0, [r7, #4]
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;
    CosmOS_SchedulableVariableType * priorSchedulableVar;


    coreVar = core_getCoreVar();
 8101770:	f7ff fd6e 	bl	8101250 <core_getCoreVar>
 8101774:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8101778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 810177c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return (core->schedulerVar);
 8101780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101784:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8101786:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 810178a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 810178e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (core->schedulableInExecution);
 8101792:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101796:	685b      	ldr	r3, [r3, #4]
    priorSchedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 8101798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810179c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81017a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->cfg->hyperTick);
 81017a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 81017a8:	681b      	ldr	r3, [r3, #0]
 81017aa:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 81017ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81017b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81017b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->schedulerState);
 81017b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 81017bc:	7c1b      	ldrb	r3, [r3, #16]
    schedulerState = scheduler_getSchedulerState( schedulerVar );
 81017be:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 81017c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81017c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (scheduler->currentTick);
 81017ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 81017ce:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 81017d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81017d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81017d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->scheduleTableIterator);
 81017dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 81017e0:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 81017e2:	617b      	str	r3, [r7, #20]
 81017e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81017e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->cfg->scheduleTableElementsNum);
 81017ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 81017f0:	681b      	ldr	r3, [r3, #0]
 81017f2:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 81017f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    if ( scheduleTableElementsNum )
 81017f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 81017fc:	2b00      	cmp	r3, #0
 81017fe:	d01c      	beq.n	810183a <scheduler_scheduleNextInstance+0xd2>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8101800:	697b      	ldr	r3, [r7, #20]
 8101802:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8101806:	429a      	cmp	r2, r3
 8101808:	bf8c      	ite	hi
 810180a:	2301      	movhi	r3, #1
 810180c:	2300      	movls	r3, #0
 810180e:	b2db      	uxtb	r3, r3
 8101810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8101814:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8101816:	697b      	ldr	r3, [r7, #20]
 8101818:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 810181c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8101820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8101824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8101828:	681b      	ldr	r3, [r3, #0]
 810182a:	681a      	ldr	r2, [r3, #0]
 810182c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8101830:	00db      	lsls	r3, r3, #3
 8101832:	4413      	add	r3, r2
 8101834:	681b      	ldr	r3, [r3, #0]
 8101836:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    }

    //this should be moved to the sysTick interrupt with higher priority to have faster response - without else, that should stay here
    if ( schedulerState IS_EQUAL_TO SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK )
 810183a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 810183e:	2b01      	cmp	r3, #1
 8101840:	d107      	bne.n	8101852 <scheduler_scheduleNextInstance+0xea>
 8101842:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8101846:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (schedulable->state);
 8101848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 810184a:	791b      	ldrb	r3, [r3, #4]
    {
        CosmOS_SchedulableStateType schedulableState;

        schedulableState = schedulable_getState( priorSchedulableVar );
 810184c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8101850:	e008      	b.n	8101864 <scheduler_scheduleNextInstance+0xfc>
 8101852:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8101856:	67bb      	str	r3, [r7, #120]	; 0x78
 8101858:	687b      	ldr	r3, [r7, #4]
 810185a:	677b      	str	r3, [r7, #116]	; 0x74
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setStackPointer(CosmOS_SchedulableVariableType * schedulable, StackPointerType stackPointerParam)
{
    schedulable->stackPointer = stackPointerParam;
 810185c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 810185e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8101860:	609a      	str	r2, [r3, #8]
}
 8101862:	bf00      	nop
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_setStackPointer( priorSchedulableVar, stackPointer );
    }

    if ( scheduleTableElementsNum AND startTick IS_EQUAL_TO currentTick )
 8101864:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8101868:	2b00      	cmp	r3, #0
 810186a:	d060      	beq.n	810192e <scheduler_scheduleNextInstance+0x1c6>
 810186c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8101870:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101874:	429a      	cmp	r2, r3
 8101876:	d15a      	bne.n	810192e <scheduler_scheduleNextInstance+0x1c6>
 8101878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810187c:	673b      	str	r3, [r7, #112]	; 0x70
 810187e:	f107 030c 	add.w	r3, r7, #12
 8101882:	66fb      	str	r3, [r7, #108]	; 0x6c
 8101884:	f107 0310 	add.w	r3, r7, #16
 8101888:	66bb      	str	r3, [r7, #104]	; 0x68
 810188a:	f107 0318 	add.w	r3, r7, #24
 810188e:	667b      	str	r3, [r7, #100]	; 0x64
 8101890:	f107 0314 	add.w	r3, r7, #20
 8101894:	663b      	str	r3, [r7, #96]	; 0x60
 8101896:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 810189a:	65fb      	str	r3, [r7, #92]	; 0x5c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 810189c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810189e:	681b      	ldr	r3, [r3, #0]
 81018a0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 81018a2:	65ba      	str	r2, [r7, #88]	; 0x58
 81018a4:	657b      	str	r3, [r7, #84]	; 0x54
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 81018a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81018a8:	681b      	ldr	r3, [r3, #0]
 81018aa:	681a      	ldr	r2, [r3, #0]
 81018ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81018ae:	00db      	lsls	r3, r3, #3
 81018b0:	4413      	add	r3, r2
 81018b2:	685b      	ldr	r3, [r3, #4]
 81018b4:	653b      	str	r3, [r7, #80]	; 0x50
 81018b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81018b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 81018ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81018bc:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 81018be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81018c0:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 81018c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81018c4:	681b      	ldr	r3, [r3, #0]
 81018c6:	4618      	mov	r0, r3
 81018c8:	f000 fa0b 	bl	8101ce2 <stackInit_schedulableStackInit>
 81018cc:	4602      	mov	r2, r0
 81018ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81018d0:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 81018d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81018d4:	681b      	ldr	r3, [r3, #0]
 81018d6:	64bb      	str	r3, [r7, #72]	; 0x48
 81018d8:	2301      	movs	r3, #1
 81018da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    schedulable->state = stateParam;
 81018de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81018e0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 81018e4:	711a      	strb	r2, [r3, #4]
}
 81018e6:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 81018e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81018ea:	681b      	ldr	r3, [r3, #0]
 81018ec:	3301      	adds	r3, #1
 81018ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 81018f0:	fbb3 f2f2 	udiv	r2, r3, r2
 81018f4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 81018f6:	fb01 f202 	mul.w	r2, r1, r2
 81018fa:	1a9a      	subs	r2, r3, r2
 81018fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81018fe:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8101900:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101902:	681b      	ldr	r3, [r3, #0]
 8101904:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8101906:	643a      	str	r2, [r7, #64]	; 0x40
 8101908:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 810190a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810190c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 810190e:	609a      	str	r2, [r3, #8]
}
 8101910:	bf00      	nop
 8101912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101914:	63bb      	str	r3, [r7, #56]	; 0x38
    return (task->cfg->wcet);
 8101916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101918:	681b      	ldr	r3, [r3, #0]
 810191a:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 810191c:	637b      	str	r3, [r7, #52]	; 0x34
    *timerTicks = wcet;
 810191e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8101920:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101922:	601a      	str	r2, [r3, #0]
}
 8101924:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8101926:	2301      	movs	r3, #1
 8101928:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 810192c:	e00c      	b.n	8101948 <scheduler_scheduleNextInstance+0x1e0>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 810192e:	f107 0318 	add.w	r3, r7, #24
 8101932:	f107 0210 	add.w	r2, r7, #16
 8101936:	f107 010c 	add.w	r1, r7, #12
 810193a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 810193e:	f7ff fe8e 	bl	810165e <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8101942:	2302      	movs	r3, #2
 8101944:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8101948:	68fa      	ldr	r2, [r7, #12]
 810194a:	693b      	ldr	r3, [r7, #16]
 810194c:	623a      	str	r2, [r7, #32]
 810194e:	61fb      	str	r3, [r7, #28]
    schedulable->stackPointer = stackPointerParam;
 8101950:	6a3b      	ldr	r3, [r7, #32]
 8101952:	69fa      	ldr	r2, [r7, #28]
 8101954:	609a      	str	r2, [r3, #8]
}
 8101956:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8101958:	68fb      	ldr	r3, [r7, #12]
 810195a:	4619      	mov	r1, r3
 810195c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8101960:	f7ff fc82 	bl	8101268 <core_setSchedulableIntoCurrentContext>
 8101964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101968:	62bb      	str	r3, [r7, #40]	; 0x28
 810196a:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 810196e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_SchedulerStateType schedulerStateParam)
{
    scheduler->schedulerState = schedulerStateParam;
 8101972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101974:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8101978:	741a      	strb	r2, [r3, #16]
}
 810197a:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 810197c:	2300      	movs	r3, #0
 810197e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    currentTick = ( ( currentTick + timerTicks ) % hyperTick );
 8101982:	69ba      	ldr	r2, [r7, #24]
 8101984:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101988:	4413      	add	r3, r2
 810198a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 810198e:	fbb3 f2f2 	udiv	r2, r3, r2
 8101992:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8101996:	fb01 f202 	mul.w	r2, r1, r2
 810199a:	1a9b      	subs	r3, r3, r2
 810199c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81019a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81019a4:	633b      	str	r3, [r7, #48]	; 0x30
 81019a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 81019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    scheduler->currentTick = currentTickParam;
 81019ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81019ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81019b0:	605a      	str	r2, [r3, #4]
}
 81019b2:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 81019b4:	68fb      	ldr	r3, [r7, #12]
 81019b6:	4619      	mov	r1, r3
 81019b8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 81019bc:	f7ff fd23 	bl	8101406 <memoryProtection_setMemoryProtection>

    CILsysTimer_setTicks( timerTicks, schedulersSyncState );
 81019c0:	69bb      	ldr	r3, [r7, #24]
 81019c2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 81019c6:	4618      	mov	r0, r3
 81019c8:	f000 fd5e 	bl	8102488 <CILsysTimer_setTicks>

    return stackPointerRetVal;
 81019cc:	693b      	ldr	r3, [r7, #16]
};
 81019ce:	4618      	mov	r0, r3
 81019d0:	37d0      	adds	r7, #208	; 0xd0
 81019d2:	46bd      	mov	sp, r7
 81019d4:	bd80      	pop	{r7, pc}

081019d6 <scheduler_start>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_start(void)
{
 81019d6:	b580      	push	{r7, lr}
 81019d8:	b0aa      	sub	sp, #168	; 0xa8
 81019da:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 81019dc:	f7ff fc38 	bl	8101250 <core_getCoreVar>
 81019e0:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 81019e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 81019e8:	677b      	str	r3, [r7, #116]	; 0x74
    return (core->schedulerVar);
 81019ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81019ec:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 81019ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 81019f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 81019f6:	67bb      	str	r3, [r7, #120]	; 0x78
    return (scheduler->cfg->hyperTick);
 81019f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81019fa:	681b      	ldr	r3, [r3, #0]
 81019fc:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 81019fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8101a02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101a06:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (scheduler->currentTick);
 8101a08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8101a0a:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8101a0c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8101a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101a14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (scheduler->scheduleTableIterator);
 8101a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8101a1c:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8101a1e:	607b      	str	r3, [r7, #4]
 8101a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTableElementsNum);
 8101a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8101a2c:	681b      	ldr	r3, [r3, #0]
 8101a2e:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8101a30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if ( scheduleTableElementsNum )
 8101a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101a38:	2b00      	cmp	r3, #0
 8101a3a:	d017      	beq.n	8101a6c <scheduler_start+0x96>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8101a3c:	687b      	ldr	r3, [r7, #4]
 8101a3e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8101a42:	429a      	cmp	r2, r3
 8101a44:	bf8c      	ite	hi
 8101a46:	2301      	movhi	r3, #1
 8101a48:	2300      	movls	r3, #0
 8101a4a:	b2db      	uxtb	r3, r3
 8101a4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8101a4e:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8101a50:	687b      	ldr	r3, [r7, #4]
 8101a52:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8101a56:	673a      	str	r2, [r7, #112]	; 0x70
 8101a58:	66fb      	str	r3, [r7, #108]	; 0x6c
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8101a5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101a5c:	681b      	ldr	r3, [r3, #0]
 8101a5e:	681a      	ldr	r2, [r3, #0]
 8101a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101a62:	00db      	lsls	r3, r3, #3
 8101a64:	4413      	add	r3, r2
 8101a66:	681b      	ldr	r3, [r3, #0]
 8101a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }

    if ( scheduleTableElementsNum AND (startTick IS_EQUAL_TO currentTick) )
 8101a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101a70:	2b00      	cmp	r3, #0
 8101a72:	d05e      	beq.n	8101b32 <scheduler_start+0x15c>
 8101a74:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8101a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101a7c:	429a      	cmp	r2, r3
 8101a7e:	d158      	bne.n	8101b32 <scheduler_start+0x15c>
 8101a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101a84:	667b      	str	r3, [r7, #100]	; 0x64
 8101a86:	463b      	mov	r3, r7
 8101a88:	663b      	str	r3, [r7, #96]	; 0x60
 8101a8a:	f107 0308 	add.w	r3, r7, #8
 8101a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8101a90:	f107 030c 	add.w	r3, r7, #12
 8101a94:	65bb      	str	r3, [r7, #88]	; 0x58
 8101a96:	1d3b      	adds	r3, r7, #4
 8101a98:	657b      	str	r3, [r7, #84]	; 0x54
 8101a9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101a9e:	653b      	str	r3, [r7, #80]	; 0x50
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8101aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101aa2:	681b      	ldr	r3, [r3, #0]
 8101aa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101aa6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8101aa8:	64bb      	str	r3, [r7, #72]	; 0x48
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8101aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101aac:	681b      	ldr	r3, [r3, #0]
 8101aae:	681a      	ldr	r2, [r3, #0]
 8101ab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101ab2:	00db      	lsls	r3, r3, #3
 8101ab4:	4413      	add	r3, r2
 8101ab6:	685b      	ldr	r3, [r3, #4]
 8101ab8:	647b      	str	r3, [r7, #68]	; 0x44
 8101aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101abc:	643b      	str	r3, [r7, #64]	; 0x40
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8101abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101ac0:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8101ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101ac4:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8101ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101ac8:	681b      	ldr	r3, [r3, #0]
 8101aca:	4618      	mov	r0, r3
 8101acc:	f000 f909 	bl	8101ce2 <stackInit_schedulableStackInit>
 8101ad0:	4602      	mov	r2, r0
 8101ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101ad4:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 8101ad6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101ad8:	681b      	ldr	r3, [r3, #0]
 8101ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101adc:	2301      	movs	r3, #1
 8101ade:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    schedulable->state = stateParam;
 8101ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101ae4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8101ae8:	711a      	strb	r2, [r3, #4]
}
 8101aea:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8101aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101aee:	681b      	ldr	r3, [r3, #0]
 8101af0:	3301      	adds	r3, #1
 8101af2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101af4:	fbb3 f2f2 	udiv	r2, r3, r2
 8101af8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8101afa:	fb01 f202 	mul.w	r2, r1, r2
 8101afe:	1a9a      	subs	r2, r3, r2
 8101b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101b02:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8101b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101b06:	681b      	ldr	r3, [r3, #0]
 8101b08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101b0a:	637a      	str	r2, [r7, #52]	; 0x34
 8101b0c:	633b      	str	r3, [r7, #48]	; 0x30
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8101b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101b12:	609a      	str	r2, [r3, #8]
}
 8101b14:	bf00      	nop
 8101b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (task->cfg->wcet);
 8101b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101b1c:	681b      	ldr	r3, [r3, #0]
 8101b1e:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8101b20:	62bb      	str	r3, [r7, #40]	; 0x28
    *timerTicks = wcet;
 8101b22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8101b24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101b26:	601a      	str	r2, [r3, #0]
}
 8101b28:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8101b2a:	2301      	movs	r3, #1
 8101b2c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8101b30:	e00b      	b.n	8101b4a <scheduler_start+0x174>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 8101b32:	f107 030c 	add.w	r3, r7, #12
 8101b36:	f107 0208 	add.w	r2, r7, #8
 8101b3a:	4639      	mov	r1, r7
 8101b3c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8101b40:	f7ff fd8d 	bl	810165e <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8101b44:	2302      	movs	r3, #2
 8101b46:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8101b4a:	683a      	ldr	r2, [r7, #0]
 8101b4c:	68bb      	ldr	r3, [r7, #8]
 8101b4e:	617a      	str	r2, [r7, #20]
 8101b50:	613b      	str	r3, [r7, #16]
    schedulable->stackPointer = stackPointerParam;
 8101b52:	697b      	ldr	r3, [r7, #20]
 8101b54:	693a      	ldr	r2, [r7, #16]
 8101b56:	609a      	str	r2, [r3, #8]
}
 8101b58:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8101b5a:	683b      	ldr	r3, [r7, #0]
 8101b5c:	4619      	mov	r1, r3
 8101b5e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8101b62:	f7ff fb81 	bl	8101268 <core_setSchedulableIntoCurrentContext>
 8101b66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101b6a:	61fb      	str	r3, [r7, #28]
 8101b6c:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8101b70:	76fb      	strb	r3, [r7, #27]
    scheduler->schedulerState = schedulerStateParam;
 8101b72:	69fb      	ldr	r3, [r7, #28]
 8101b74:	7efa      	ldrb	r2, [r7, #27]
 8101b76:	741a      	strb	r2, [r3, #16]
}
 8101b78:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 8101b7a:	2300      	movs	r3, #0
 8101b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    currentTick = ( currentTick + timerTicks ) % hyperTick;
 8101b80:	68fa      	ldr	r2, [r7, #12]
 8101b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101b86:	4413      	add	r3, r2
 8101b88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8101b8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8101b90:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8101b94:	fb01 f202 	mul.w	r2, r1, r2
 8101b98:	1a9b      	subs	r3, r3, r2
 8101b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8101b9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8101ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101ba8:	623b      	str	r3, [r7, #32]
    scheduler->currentTick = currentTickParam;
 8101baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101bac:	6a3a      	ldr	r2, [r7, #32]
 8101bae:	605a      	str	r2, [r3, #4]
}
 8101bb0:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar , schedulableVar );
 8101bb2:	683b      	ldr	r3, [r7, #0]
 8101bb4:	4619      	mov	r1, r3
 8101bb6:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8101bba:	f7ff fc24 	bl	8101406 <memoryProtection_setMemoryProtection>

    CILsysTimer_setTicks( timerTicks, schedulersSyncState );
 8101bbe:	68fb      	ldr	r3, [r7, #12]
 8101bc0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8101bc4:	4618      	mov	r0, r3
 8101bc6:	f000 fc5f 	bl	8102488 <CILsysTimer_setTicks>

    CILstack_setStackPointer( stackPointerRetVal );
 8101bca:	68bb      	ldr	r3, [r7, #8]
 8101bcc:	4618      	mov	r0, r3
 8101bce:	f000 fbda 	bl	8102386 <CILstack_setStackPointer>
};
 8101bd2:	bf00      	nop
 8101bd4:	37a8      	adds	r7, #168	; 0xa8
 8101bd6:	46bd      	mov	sp, r7
 8101bd8:	bd80      	pop	{r7, pc}

08101bda <schedulerSync_sync>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SchedulerSyncStateType schedulerSync_sync(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_CoreVariableType * coreVar, BitWidthType currentTick, BitWidthType hyperTick)
{
 8101bda:	b580      	push	{r7, lr}
 8101bdc:	b096      	sub	sp, #88	; 0x58
 8101bde:	af00      	add	r7, sp, #0
 8101be0:	60f8      	str	r0, [r7, #12]
 8101be2:	60b9      	str	r1, [r7, #8]
 8101be4:	607a      	str	r2, [r7, #4]
 8101be6:	603b      	str	r3, [r7, #0]

    CosmOS_BooleanType syncInitState;

    CosmOS_SchedulerSyncStateType schedulerState = SCHEDULER_SYNC_STATE_ENUM__NOT_IN_SYNC;
 8101be8:	2300      	movs	r3, #0
 8101bea:	657b      	str	r3, [r7, #84]	; 0x54
 8101bec:	68fb      	ldr	r3, [r7, #12]
 8101bee:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->syncInitState);
 8101bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101bf2:	7e1b      	ldrb	r3, [r3, #24]


    syncInitState = scheduler_getSchedulerSyncInitState( schedulerVar );
 8101bf4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    if ( __COSMOS_UNLIKELY( syncInitState IS_EQUAL_TO False ) )
 8101bf8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8101bfc:	2b00      	cmp	r3, #0
 8101bfe:	bf0c      	ite	eq
 8101c00:	2301      	moveq	r3, #1
 8101c02:	2300      	movne	r3, #0
 8101c04:	b2db      	uxtb	r3, r3
 8101c06:	2b00      	cmp	r3, #0
 8101c08:	d030      	beq.n	8101c6c <schedulerSync_sync+0x92>
 8101c0a:	68fb      	ldr	r3, [r7, #12]
 8101c0c:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->firstSyncTaskStartTick);
 8101c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c10:	681b      	ldr	r3, [r3, #0]
 8101c12:	6a1b      	ldr	r3, [r3, #32]
    {
        BitWidthType firstSyncTaskStartTick;


        firstSyncTaskStartTick = scheduler_getSchedulerFirstSyncTaskStartTick( schedulerVar );
 8101c14:	647b      	str	r3, [r7, #68]	; 0x44

        if ( firstSyncTaskStartTick IS_EQUAL_TO currentTick )
 8101c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8101c18:	687b      	ldr	r3, [r7, #4]
 8101c1a:	429a      	cmp	r2, r3
 8101c1c:	d150      	bne.n	8101cc0 <schedulerSync_sync+0xe6>
 8101c1e:	68fb      	ldr	r3, [r7, #12]
 8101c20:	623b      	str	r3, [r7, #32]
    return (scheduler->cfg->syncTicks);
 8101c22:	6a3b      	ldr	r3, [r7, #32]
 8101c24:	681b      	ldr	r3, [r3, #0]
 8101c26:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks,
                          nextTick;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8101c28:	643b      	str	r3, [r7, #64]	; 0x40

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8101c2a:	687a      	ldr	r2, [r7, #4]
 8101c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101c2e:	4413      	add	r3, r2
 8101c30:	683a      	ldr	r2, [r7, #0]
 8101c32:	fbb3 f2f2 	udiv	r2, r3, r2
 8101c36:	6839      	ldr	r1, [r7, #0]
 8101c38:	fb01 f202 	mul.w	r2, r1, r2
 8101c3c:	1a9b      	subs	r3, r3, r2
 8101c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101c40:	68fb      	ldr	r3, [r7, #12]
 8101c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8101c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101c46:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerNextSyncTick(CosmOS_SchedulerVariableType * scheduler, BitWidthType paramNextSyncTick)
{
    scheduler->nextSyncTick = paramNextSyncTick;
 8101c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101c4c:	615a      	str	r2, [r3, #20]
}
 8101c4e:	bf00      	nop
 8101c50:	68fb      	ldr	r3, [r7, #12]
 8101c52:	633b      	str	r3, [r7, #48]	; 0x30
 8101c54:	2301      	movs	r3, #1
 8101c56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerSyncInitState(CosmOS_SchedulerVariableType * scheduler, CosmOS_BooleanType paramSyncInitState)
{
    scheduler->syncInitState = paramSyncInitState;
 8101c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101c5c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8101c60:	761a      	strb	r2, [r3, #24]
}
 8101c62:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            scheduler_setSchedulerSyncInitState( schedulerVar, True );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8101c64:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8101c68:	657b      	str	r3, [r7, #84]	; 0x54
 8101c6a:	e029      	b.n	8101cc0 <schedulerSync_sync+0xe6>
 8101c6c:	68fb      	ldr	r3, [r7, #12]
 8101c6e:	61fb      	str	r3, [r7, #28]
    return (scheduler->nextSyncTick);
 8101c70:	69fb      	ldr	r3, [r7, #28]
 8101c72:	695b      	ldr	r3, [r3, #20]
    else
    {
        BitWidthType nextTick;


        nextTick = scheduler_getSchedulerNextSyncTick( schedulerVar );
 8101c74:	64fb      	str	r3, [r7, #76]	; 0x4c

        if ( __COSMOS_UNLIKELY( nextTick IS_EQUAL_TO currentTick ) )
 8101c76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8101c78:	687b      	ldr	r3, [r7, #4]
 8101c7a:	429a      	cmp	r2, r3
 8101c7c:	bf0c      	ite	eq
 8101c7e:	2301      	moveq	r3, #1
 8101c80:	2300      	movne	r3, #0
 8101c82:	b2db      	uxtb	r3, r3
 8101c84:	2b00      	cmp	r3, #0
 8101c86:	d01b      	beq.n	8101cc0 <schedulerSync_sync+0xe6>
 8101c88:	68fb      	ldr	r3, [r7, #12]
 8101c8a:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->syncTicks);
 8101c8c:	693b      	ldr	r3, [r7, #16]
 8101c8e:	681b      	ldr	r3, [r3, #0]
 8101c90:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8101c92:	64bb      	str	r3, [r7, #72]	; 0x48

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8101c94:	687a      	ldr	r2, [r7, #4]
 8101c96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101c98:	4413      	add	r3, r2
 8101c9a:	683a      	ldr	r2, [r7, #0]
 8101c9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8101ca0:	6839      	ldr	r1, [r7, #0]
 8101ca2:	fb01 f202 	mul.w	r2, r1, r2
 8101ca6:	1a9b      	subs	r3, r3, r2
 8101ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101caa:	68fb      	ldr	r3, [r7, #12]
 8101cac:	61bb      	str	r3, [r7, #24]
 8101cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101cb0:	617b      	str	r3, [r7, #20]
    scheduler->nextSyncTick = paramNextSyncTick;
 8101cb2:	69bb      	ldr	r3, [r7, #24]
 8101cb4:	697a      	ldr	r2, [r7, #20]
 8101cb6:	615a      	str	r2, [r3, #20]
}
 8101cb8:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8101cba:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8101cbe:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    if ( schedulerState IS_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 8101cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101cc2:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8101cc6:	d107      	bne.n	8101cd8 <schedulerSync_sync+0xfe>
    {
        coreSync_getBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8101cc8:	2103      	movs	r1, #3
 8101cca:	68b8      	ldr	r0, [r7, #8]
 8101ccc:	f7ff fafa 	bl	81012c4 <coreSync_getBarrier>
        coreSync_reactivateBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8101cd0:	2103      	movs	r1, #3
 8101cd2:	68b8      	ldr	r0, [r7, #8]
 8101cd4:	f7ff fb5e 	bl	8101394 <coreSync_reactivateBarrier>
    }

    return schedulerState;
 8101cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
};
 8101cda:	4618      	mov	r0, r3
 8101cdc:	3758      	adds	r7, #88	; 0x58
 8101cde:	46bd      	mov	sp, r7
 8101ce0:	bd80      	pop	{r7, pc}

08101ce2 <stackInit_schedulableStackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType stackInit_schedulableStackInit(CosmOS_SchedulableVariableType  * schedulable)
{
 8101ce2:	b580      	push	{r7, lr}
 8101ce4:	b08c      	sub	sp, #48	; 0x30
 8101ce6:	af00      	add	r7, sp, #0
 8101ce8:	6078      	str	r0, [r7, #4]
 8101cea:	687b      	ldr	r3, [r7, #4]
 8101cec:	60fb      	str	r3, [r7, #12]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8101cee:	68fb      	ldr	r3, [r7, #12]
 8101cf0:	681b      	ldr	r3, [r3, #0]
 8101cf2:	681b      	ldr	r3, [r3, #0]
    StackPointerType stackPointer;

    CosmOS_StackConfigurationType * stack;


    stack = schedulable_getStack( schedulable );
 8101cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101cf6:	687b      	ldr	r3, [r7, #4]
 8101cf8:	613b      	str	r3, [r7, #16]
    return (schedulable->cfg->handler);
 8101cfa:	693b      	ldr	r3, [r7, #16]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	689b      	ldr	r3, [r3, #8]
    handler = schedulable_getHandler( schedulable );
 8101d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8101d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101d04:	617b      	str	r3, [r7, #20]
    return (stack->stackLowAddress);
 8101d06:	697b      	ldr	r3, [r7, #20]
 8101d08:	685b      	ldr	r3, [r3, #4]

    stackLowAddress = stack_getStackLowAddress( stack );
 8101d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8101d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101d0e:	61bb      	str	r3, [r7, #24]
    return (stack->stackHighAddress);
 8101d10:	69bb      	ldr	r3, [r7, #24]
 8101d12:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 8101d14:	623b      	str	r3, [r7, #32]

    stackPointer = CILstack_stackInit( stackLowAddress, stackHighAddress, (BitWidthType)handler );
 8101d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101d18:	461a      	mov	r2, r3
 8101d1a:	6a39      	ldr	r1, [r7, #32]
 8101d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8101d1e:	f000 faef 	bl	8102300 <CILstack_stackInit>
 8101d22:	61f8      	str	r0, [r7, #28]

    return stackPointer;
 8101d24:	69fb      	ldr	r3, [r7, #28]
}
 8101d26:	4618      	mov	r0, r3
 8101d28:	3730      	adds	r7, #48	; 0x30
 8101d2a:	46bd      	mov	sp, r7
 8101d2c:	bd80      	pop	{r7, pc}

08101d2e <stackInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void stackInit_init(CosmOS_CoreVariableType * coreVar)
{
 8101d2e:	b580      	push	{r7, lr}
 8101d30:	b094      	sub	sp, #80	; 0x50
 8101d32:	af00      	add	r7, sp, #0
 8101d34:	6078      	str	r0, [r7, #4]
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->cfg->numberOfPrograms);
 8101d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101d3c:	681b      	ldr	r3, [r3, #0]
 8101d3e:	685b      	ldr	r3, [r3, #4]
                  stackPointerRetVal;

    CosmOS_ThreadVariableType * threadVar;
    CosmOS_ProgramVariableType * programVar;

    numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 8101d40:	647b      	str	r3, [r7, #68]	; 0x44

    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8101d42:	2300      	movs	r3, #0
 8101d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101d46:	e03a      	b.n	8101dbe <stackInit_init+0x90>
 8101d48:	687b      	ldr	r3, [r7, #4]
 8101d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8101d4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101d4e:	623b      	str	r3, [r7, #32]
    return (&(core->programVars[programIterator]));
 8101d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d52:	68d9      	ldr	r1, [r3, #12]
 8101d54:	6a3a      	ldr	r2, [r7, #32]
 8101d56:	4613      	mov	r3, r2
 8101d58:	005b      	lsls	r3, r3, #1
 8101d5a:	4413      	add	r3, r2
 8101d5c:	009b      	lsls	r3, r3, #2
 8101d5e:	440b      	add	r3, r1
    {
        programVar = core_getCoreProgramVar( coreVar, programIterator );
 8101d60:	643b      	str	r3, [r7, #64]	; 0x40
 8101d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101d64:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->numberOfThreads);
 8101d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101d68:	681b      	ldr	r3, [r3, #0]
 8101d6a:	689b      	ldr	r3, [r3, #8]
        numberOfThreads = program_getProgramNumberOfThreads( programVar );
 8101d6c:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8101d6e:	2300      	movs	r3, #0
 8101d70:	64bb      	str	r3, [r7, #72]	; 0x48
 8101d72:	e01d      	b.n	8101db0 <stackInit_init+0x82>
 8101d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101d76:	613b      	str	r3, [r7, #16]
 8101d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101d7a:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * program_getProgramThread(CosmOS_ProgramVariableType * program, BitWidthType threadIterator)
{
    return (&(program->threadVars[threadIterator]));
 8101d7c:	693b      	ldr	r3, [r7, #16]
 8101d7e:	689a      	ldr	r2, [r3, #8]
 8101d80:	68fb      	ldr	r3, [r7, #12]
 8101d82:	00db      	lsls	r3, r3, #3
 8101d84:	4413      	add	r3, r2
        {
            CosmOS_SchedulableVariableType * schedulableVar;


            threadVar = program_getProgramThread( programVar, threadIterator );
 8101d86:	63bb      	str	r3, [r7, #56]	; 0x38
 8101d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101d8a:	617b      	str	r3, [r7, #20]
 8101d8c:	697b      	ldr	r3, [r7, #20]
 8101d8e:	685b      	ldr	r3, [r3, #4]
            schedulableVar = thread_getThreadSchedulable( threadVar );
 8101d90:	637b      	str	r3, [r7, #52]	; 0x34

            stackPointerRetVal = stackInit_schedulableStackInit( schedulableVar );
 8101d92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8101d94:	f7ff ffa5 	bl	8101ce2 <stackInit_schedulableStackInit>
 8101d98:	6338      	str	r0, [r7, #48]	; 0x30
 8101d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d9c:	61fb      	str	r3, [r7, #28]
 8101d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101da0:	61bb      	str	r3, [r7, #24]
    schedulable->stackPointer = stackPointerParam;
 8101da2:	69fb      	ldr	r3, [r7, #28]
 8101da4:	69ba      	ldr	r2, [r7, #24]
 8101da6:	609a      	str	r2, [r3, #8]
}
 8101da8:	bf00      	nop
        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8101daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101dac:	3301      	adds	r3, #1
 8101dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8101db0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8101db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101db4:	429a      	cmp	r2, r3
 8101db6:	d3dd      	bcc.n	8101d74 <stackInit_init+0x46>
    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8101db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101dba:	3301      	adds	r3, #1
 8101dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101dbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8101dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101dc2:	429a      	cmp	r2, r3
 8101dc4:	d3c0      	bcc.n	8101d48 <stackInit_init+0x1a>
            schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
        }
    }
}
 8101dc6:	bf00      	nop
 8101dc8:	bf00      	nop
 8101dca:	3750      	adds	r7, #80	; 0x50
 8101dcc:	46bd      	mov	sp, r7
 8101dce:	bd80      	pop	{r7, pc}

08101dd0 <sysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysCalls_os(BitWidthType id)
{
 8101dd0:	b580      	push	{r7, lr}
 8101dd2:	b082      	sub	sp, #8
 8101dd4:	af00      	add	r7, sp, #0
 8101dd6:	6078      	str	r0, [r7, #4]
    CILsysCalls_os( id );
 8101dd8:	6878      	ldr	r0, [r7, #4]
 8101dda:	f000 fb39 	bl	8102450 <CILsysCalls_os>
};
 8101dde:	bf00      	nop
 8101de0:	3708      	adds	r7, #8
 8101de2:	46bd      	mov	sp, r7
 8101de4:	bd80      	pop	{r7, pc}

08101de6 <sysCalls_readWrite>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_readWrite(BitWidthType id, void * entity, BitWidthType size)
{
 8101de6:	b580      	push	{r7, lr}
 8101de8:	b086      	sub	sp, #24
 8101dea:	af00      	add	r7, sp, #0
 8101dec:	60f8      	str	r0, [r7, #12]
 8101dee:	60b9      	str	r1, [r7, #8]
 8101df0:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_readWrite( id, entity, size );
 8101df2:	687a      	ldr	r2, [r7, #4]
 8101df4:	68b9      	ldr	r1, [r7, #8]
 8101df6:	68f8      	ldr	r0, [r7, #12]
 8101df8:	f000 fb35 	bl	8102466 <CILsysCalls_readWrite>
 8101dfc:	6178      	str	r0, [r7, #20]

    return returnValue;
 8101dfe:	697b      	ldr	r3, [r7, #20]
};
 8101e00:	4618      	mov	r0, r3
 8101e02:	3718      	adds	r7, #24
 8101e04:	46bd      	mov	sp, r7
 8101e06:	bd80      	pop	{r7, pc}

08101e08 <sysJobs_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysJobs_dispatcher(void)
{
 8101e08:	b580      	push	{r7, lr}
 8101e0a:	b096      	sub	sp, #88	; 0x58
 8101e0c:	af00      	add	r7, sp, #0

    CosmOS_CoreVariableType * coreVar;
    CosmOS_SysJobsVariableType * sysJobsVar;


    coreVar = core_getCoreVar();
 8101e0e:	f7ff fa1f 	bl	8101250 <core_getCoreVar>
 8101e12:	64f8      	str	r0, [r7, #76]	; 0x4c
 8101e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101e16:	627b      	str	r3, [r7, #36]	; 0x24
    return (core->sysJobs);
 8101e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101e1a:	69db      	ldr	r3, [r3, #28]
    sysJobsVar = core_getCoreOsSysJobs( coreVar );
 8101e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8101e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101e20:	62bb      	str	r3, [r7, #40]	; 0x28
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs)
{
    return (sysJobs->currentTick);
 8101e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101e24:	685b      	ldr	r3, [r3, #4]

    sysJobsCurrentTick = sysJobs_getSysJobsCurrentTick( sysJobsVar );
 8101e26:	647b      	str	r3, [r7, #68]	; 0x44
 8101e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (sysJobs->cfg->numOfGroups);
 8101e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101e2e:	681b      	ldr	r3, [r3, #0]
 8101e30:	685b      	ldr	r3, [r3, #4]
    numOfGroups = sysJobs_getSysJobsNumOfGroups( sysJobsVar );
 8101e32:	643b      	str	r3, [r7, #64]	; 0x40

    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8101e34:	2300      	movs	r3, #0
 8101e36:	657b      	str	r3, [r7, #84]	; 0x54
 8101e38:	e049      	b.n	8101ece <sysJobs_dispatcher+0xc6>
 8101e3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101e3c:	623b      	str	r3, [r7, #32]
 8101e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101e40:	61fb      	str	r3, [r7, #28]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsGroupTickMultiplicator(CosmOS_SysJobsVariableType * sysJobs, BitWidthType groupId)
{
    return (sysJobs->cfg->groups[groupId].tickMultiplicator);
 8101e42:	6a3b      	ldr	r3, [r7, #32]
 8101e44:	681b      	ldr	r3, [r3, #0]
 8101e46:	6819      	ldr	r1, [r3, #0]
 8101e48:	69fa      	ldr	r2, [r7, #28]
 8101e4a:	4613      	mov	r3, r2
 8101e4c:	005b      	lsls	r3, r3, #1
 8101e4e:	4413      	add	r3, r2
 8101e50:	009b      	lsls	r3, r3, #2
 8101e52:	440b      	add	r3, r1
 8101e54:	689b      	ldr	r3, [r3, #8]
    {
        BitWidthType  groupTickMultiplicator;


        groupTickMultiplicator = sysJobs_getSysJobsGroupTickMultiplicator( sysJobsVar, groupIterator );
 8101e56:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( IS_NOT( sysJobsCurrentTick % groupTickMultiplicator ) )
 8101e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8101e5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8101e60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8101e62:	fb01 f202 	mul.w	r2, r1, r2
 8101e66:	1a9b      	subs	r3, r3, r2
 8101e68:	2b00      	cmp	r3, #0
 8101e6a:	d12d      	bne.n	8101ec8 <sysJobs_dispatcher+0xc0>
 8101e6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101e6e:	613b      	str	r3, [r7, #16]
 8101e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101e72:	60fb      	str	r3, [r7, #12]
    return (CosmOS_GenericVoidType *)(sysJobs->cfg->groups[groupId].handlers);
 8101e74:	693b      	ldr	r3, [r7, #16]
 8101e76:	681b      	ldr	r3, [r3, #0]
 8101e78:	6819      	ldr	r1, [r3, #0]
 8101e7a:	68fa      	ldr	r2, [r7, #12]
 8101e7c:	4613      	mov	r3, r2
 8101e7e:	005b      	lsls	r3, r3, #1
 8101e80:	4413      	add	r3, r2
 8101e82:	009b      	lsls	r3, r3, #2
 8101e84:	440b      	add	r3, r1
 8101e86:	681b      	ldr	r3, [r3, #0]
        {
            BitWidthType numOfHandlers;
            CosmOS_GenericVoidType * handlers;


            handlers = sysJobs_getSysJobsGroupHandlers( sysJobsVar, groupIterator );
 8101e88:	637b      	str	r3, [r7, #52]	; 0x34
 8101e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101e8c:	61bb      	str	r3, [r7, #24]
 8101e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101e90:	617b      	str	r3, [r7, #20]
    return (sysJobs->cfg->groups[groupId].numOfHandlers);
 8101e92:	69bb      	ldr	r3, [r7, #24]
 8101e94:	681b      	ldr	r3, [r3, #0]
 8101e96:	6819      	ldr	r1, [r3, #0]
 8101e98:	697a      	ldr	r2, [r7, #20]
 8101e9a:	4613      	mov	r3, r2
 8101e9c:	005b      	lsls	r3, r3, #1
 8101e9e:	4413      	add	r3, r2
 8101ea0:	009b      	lsls	r3, r3, #2
 8101ea2:	440b      	add	r3, r1
 8101ea4:	685b      	ldr	r3, [r3, #4]
            numOfHandlers = sysJobs_getSysJobsGroupNumOfHandlers( sysJobsVar, groupIterator );
 8101ea6:	633b      	str	r3, [r7, #48]	; 0x30

            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 8101ea8:	2300      	movs	r3, #0
 8101eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8101eac:	e008      	b.n	8101ec0 <sysJobs_dispatcher+0xb8>
            {
                handlers[handlerIterator]();
 8101eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101eb0:	009b      	lsls	r3, r3, #2
 8101eb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101eb4:	4413      	add	r3, r2
 8101eb6:	681b      	ldr	r3, [r3, #0]
 8101eb8:	4798      	blx	r3
            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 8101eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101ebc:	3301      	adds	r3, #1
 8101ebe:	653b      	str	r3, [r7, #80]	; 0x50
 8101ec0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101ec4:	429a      	cmp	r2, r3
 8101ec6:	d3f2      	bcc.n	8101eae <sysJobs_dispatcher+0xa6>
    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8101ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101eca:	3301      	adds	r3, #1
 8101ecc:	657b      	str	r3, [r7, #84]	; 0x54
 8101ece:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8101ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101ed2:	429a      	cmp	r2, r3
 8101ed4:	d3b1      	bcc.n	8101e3a <sysJobs_dispatcher+0x32>
 8101ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101ed8:	603b      	str	r3, [r7, #0]
    return (sysJobs->cfg->hyperTick);
 8101eda:	683b      	ldr	r3, [r7, #0]
 8101edc:	681b      	ldr	r3, [r3, #0]
 8101ede:	689b      	ldr	r3, [r3, #8]
            }
        }
    }

    hyperTick = sysJobs_getSysJobsHyperTick( sysJobsVar );
 8101ee0:	63fb      	str	r3, [r7, #60]	; 0x3c

    sysJobsCurrentTick = ( ( sysJobsCurrentTick + 1 ) % hyperTick );
 8101ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101ee4:	3301      	adds	r3, #1
 8101ee6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8101ee8:	fbb3 f2f2 	udiv	r2, r3, r2
 8101eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8101eee:	fb01 f202 	mul.w	r2, r1, r2
 8101ef2:	1a9b      	subs	r3, r3, r2
 8101ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8101ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101ef8:	60bb      	str	r3, [r7, #8]
 8101efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101efc:	607b      	str	r3, [r7, #4]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void sysJobs_setSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs, BitWidthType currentTickParam)
{
    sysJobs->currentTick = currentTickParam;
 8101efe:	68bb      	ldr	r3, [r7, #8]
 8101f00:	687a      	ldr	r2, [r7, #4]
 8101f02:	605a      	str	r2, [r3, #4]
}
 8101f04:	bf00      	nop
    sysJobs_setSysJobsCurrentTick( sysJobsVar, sysJobsCurrentTick );

};
 8101f06:	bf00      	nop
 8101f08:	3758      	adds	r7, #88	; 0x58
 8101f0a:	46bd      	mov	sp, r7
 8101f0c:	bd80      	pop	{r7, pc}

08101f0e <CILcore_getCoreId>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILcore_getCoreId(void)
{
 8101f0e:	b580      	push	{r7, lr}
 8101f10:	af00      	add	r7, sp, #0
    return (HAL_GetCurrentCPUID() == CM7_CPUID) ? CORE_0_ID : CORE_1_ID;
 8101f12:	f000 ffcd 	bl	8102eb0 <HAL_GetCurrentCPUID>
 8101f16:	4603      	mov	r3, r0
 8101f18:	2b03      	cmp	r3, #3
 8101f1a:	bf14      	ite	ne
 8101f1c:	2301      	movne	r3, #1
 8101f1e:	2300      	moveq	r3, #0
 8101f20:	b2db      	uxtb	r3, r3
}
 8101f22:	4618      	mov	r0, r3
 8101f24:	bd80      	pop	{r7, pc}

08101f26 <CILcore_setCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILcore_setCoreVar(CosmOS_OsVariableType * osVar)
{
 8101f26:	b580      	push	{r7, lr}
 8101f28:	b08a      	sub	sp, #40	; 0x28
 8101f2a:	af00      	add	r7, sp, #0
 8101f2c:	6078      	str	r0, [r7, #4]
    BitWidthType coreId,
                numberOfCores;

    CosmOS_CoreVariableType * coreVar;

    coreId = CILcore_getCoreId();
 8101f2e:	f7ff ffee 	bl	8101f0e <CILcore_getCoreId>
 8101f32:	6278      	str	r0, [r7, #36]	; 0x24
 8101f34:	687b      	ldr	r3, [r7, #4]
 8101f36:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfCores);
 8101f38:	68fb      	ldr	r3, [r7, #12]
 8101f3a:	681b      	ldr	r3, [r3, #0]
 8101f3c:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 8101f3e:	623b      	str	r3, [r7, #32]

    cosmosAssert( coreId < numberOfCores );
 8101f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101f42:	6a3b      	ldr	r3, [r7, #32]
 8101f44:	429a      	cmp	r2, r3
 8101f46:	bf34      	ite	cc
 8101f48:	2301      	movcc	r3, #1
 8101f4a:	2300      	movcs	r3, #0
 8101f4c:	b2db      	uxtb	r3, r3
 8101f4e:	613b      	str	r3, [r7, #16]
 8101f50:	bf00      	nop
 8101f52:	687b      	ldr	r3, [r7, #4]
 8101f54:	61bb      	str	r3, [r7, #24]
 8101f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101f58:	617b      	str	r3, [r7, #20]
    return (&(osVar->coreVars[coreId]));
 8101f5a:	69bb      	ldr	r3, [r7, #24]
 8101f5c:	685a      	ldr	r2, [r3, #4]
 8101f5e:	697b      	ldr	r3, [r7, #20]
 8101f60:	015b      	lsls	r3, r3, #5
 8101f62:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, coreId );
 8101f64:	61fb      	str	r3, [r7, #28]

    //must be changed, not valid for all compilers
    __asm volatile("MOV R9,%[coreVariable]" : [coreVariable] "=r" (coreVar));
 8101f66:	4699      	mov	r9, r3
 8101f68:	61fb      	str	r3, [r7, #28]
}
 8101f6a:	bf00      	nop
 8101f6c:	3728      	adds	r7, #40	; 0x28
 8101f6e:	46bd      	mov	sp, r7
 8101f70:	bd80      	pop	{r7, pc}

08101f72 <CILGPIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILGPIO_togglePin(void *GPIOx, BitWidthType GPIO_Pin)
{
 8101f72:	b580      	push	{r7, lr}
 8101f74:	b082      	sub	sp, #8
 8101f76:	af00      	add	r7, sp, #0
 8101f78:	6078      	str	r0, [r7, #4]
 8101f7a:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin( GPIOx, (uint16_t)GPIO_Pin );
 8101f7c:	683b      	ldr	r3, [r7, #0]
 8101f7e:	b29b      	uxth	r3, r3
 8101f80:	4619      	mov	r1, r3
 8101f82:	6878      	ldr	r0, [r7, #4]
 8101f84:	f001 f971 	bl	810326a <HAL_GPIO_TogglePin>
}
 8101f88:	bf00      	nop
 8101f8a:	3708      	adds	r7, #8
 8101f8c:	46bd      	mov	sp, r7
 8101f8e:	bd80      	pop	{r7, pc}

08101f90 <CILmemoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_init(void)
{
 8101f90:	b580      	push	{r7, lr}
 8101f92:	b08a      	sub	sp, #40	; 0x28
 8101f94:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8101f96:	463b      	mov	r3, r7
 8101f98:	2200      	movs	r2, #0
 8101f9a:	601a      	str	r2, [r3, #0]
 8101f9c:	605a      	str	r2, [r3, #4]
 8101f9e:	609a      	str	r2, [r3, #8]
 8101fa0:	60da      	str	r2, [r3, #12]
    BitWidthType core,
                 address;

    core = CILcore_getCoreId();
 8101fa2:	f7ff ffb4 	bl	8101f0e <CILcore_getCoreId>
 8101fa6:	6238      	str	r0, [r7, #32]

    HAL_MPU_Disable();
 8101fa8:	f000 ff06 	bl	8102db8 <HAL_MPU_Disable>

    if( core IS_EQUAL_TO CORE_0_ID){
 8101fac:	6a3b      	ldr	r3, [r7, #32]
 8101fae:	2b00      	cmp	r3, #0
 8101fb0:	d11e      	bne.n	8101ff0 <CILmemoryProtection_init+0x60>

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8101fb2:	2301      	movs	r3, #1
 8101fb4:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8101fb6:	2300      	movs	r3, #0
 8101fb8:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 8101fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8101fbe:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8101fc0:	2314      	movs	r3, #20
 8101fc2:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 8101fc4:	2300      	movs	r3, #0
 8101fc6:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8101fc8:	2301      	movs	r3, #1
 8101fca:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8101fcc:	2306      	movs	r3, #6
 8101fce:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8101fd0:	2300      	movs	r3, #0
 8101fd2:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8101fd4:	2301      	movs	r3, #1
 8101fd6:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8101fd8:	2301      	movs	r3, #1
 8101fda:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8101fdc:	2301      	movs	r3, #1
 8101fde:	73fb      	strb	r3, [r7, #15]

        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8101fe0:	463b      	mov	r3, r7
 8101fe2:	4618      	mov	r0, r3
 8101fe4:	f000 ff20 	bl	8102e28 <HAL_MPU_ConfigRegion>

        address = 0x20000000;
 8101fe8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8101fec:	627b      	str	r3, [r7, #36]	; 0x24
 8101fee:	e01d      	b.n	810202c <CILmemoryProtection_init+0x9c>

    }
    else
    {

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8101ff0:	2301      	movs	r3, #1
 8101ff2:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8101ff4:	2300      	movs	r3, #0
 8101ff6:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 8101ff8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8101ffc:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8101ffe:	2314      	movs	r3, #20
 8102000:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 8102002:	2300      	movs	r3, #0
 8102004:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102006:	2301      	movs	r3, #1
 8102008:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 810200a:	2306      	movs	r3, #6
 810200c:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 810200e:	2300      	movs	r3, #0
 8102010:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102012:	2301      	movs	r3, #1
 8102014:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102016:	2301      	movs	r3, #1
 8102018:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 810201a:	2301      	movs	r3, #1
 810201c:	73fb      	strb	r3, [r7, #15]

        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 810201e:	463b      	mov	r3, r7
 8102020:	4618      	mov	r0, r3
 8102022:	f000 ff01 	bl	8102e28 <HAL_MPU_ConfigRegion>

        address = 0x10000000;
 8102026:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 810202a:	627b      	str	r3, [r7, #36]	; 0x24

    }

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 810202c:	2301      	movs	r3, #1
 810202e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8102030:	2301      	movs	r3, #1
 8102032:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = address;
 8102034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102036:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8102038:	2310      	movs	r3, #16
 810203a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 810203c:	2300      	movs	r3, #0
 810203e:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102040:	2301      	movs	r3, #1
 8102042:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8102044:	2302      	movs	r3, #2
 8102046:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102048:	2300      	movs	r3, #0
 810204a:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 810204c:	2301      	movs	r3, #1
 810204e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102050:	2301      	movs	r3, #1
 8102052:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102054:	2301      	movs	r3, #1
 8102056:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102058:	463b      	mov	r3, r7
 810205a:	4618      	mov	r0, r3
 810205c:	f000 fee4 	bl	8102e28 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102060:	2301      	movs	r3, #1
 8102062:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8102064:	2302      	movs	r3, #2
 8102066:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress =  (BitWidthType)_s_os_section_consts;
 8102068:	4b43      	ldr	r3, [pc, #268]	; (8102178 <CILmemoryProtection_init+0x1e8>)
 810206a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 810206c:	4a43      	ldr	r2, [pc, #268]	; (810217c <CILmemoryProtection_init+0x1ec>)
 810206e:	4b42      	ldr	r3, [pc, #264]	; (8102178 <CILmemoryProtection_init+0x1e8>)
 8102070:	1ad3      	subs	r3, r2, r3
 8102072:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 1;
 8102074:	697b      	ldr	r3, [r7, #20]
 8102076:	085b      	lsrs	r3, r3, #1
 8102078:	697a      	ldr	r2, [r7, #20]
 810207a:	4313      	orrs	r3, r2
 810207c:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 2;
 810207e:	697b      	ldr	r3, [r7, #20]
 8102080:	089b      	lsrs	r3, r3, #2
 8102082:	697a      	ldr	r2, [r7, #20]
 8102084:	4313      	orrs	r3, r2
 8102086:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 4;
 8102088:	697b      	ldr	r3, [r7, #20]
 810208a:	091b      	lsrs	r3, r3, #4
 810208c:	697a      	ldr	r2, [r7, #20]
 810208e:	4313      	orrs	r3, r2
 8102090:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 8;
 8102092:	697b      	ldr	r3, [r7, #20]
 8102094:	0a1b      	lsrs	r3, r3, #8
 8102096:	697a      	ldr	r2, [r7, #20]
 8102098:	4313      	orrs	r3, r2
 810209a:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 16;
 810209c:	697b      	ldr	r3, [r7, #20]
 810209e:	0c1b      	lsrs	r3, r3, #16
 81020a0:	697a      	ldr	r2, [r7, #20]
 81020a2:	4313      	orrs	r3, r2
 81020a4:	617b      	str	r3, [r7, #20]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 81020a6:	697b      	ldr	r3, [r7, #20]
 81020a8:	4a35      	ldr	r2, [pc, #212]	; (8102180 <CILmemoryProtection_init+0x1f0>)
 81020aa:	fb02 f303 	mul.w	r3, r2, r3
 81020ae:	0edb      	lsrs	r3, r3, #27
 81020b0:	4a34      	ldr	r2, [pc, #208]	; (8102184 <CILmemoryProtection_init+0x1f4>)
 81020b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81020b6:	613b      	str	r3, [r7, #16]
    return (result-1);
 81020b8:	693b      	ldr	r3, [r7, #16]
 81020ba:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 81020bc:	b2db      	uxtb	r3, r3
 81020be:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 81020c0:	2300      	movs	r3, #0
 81020c2:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 81020c4:	2301      	movs	r3, #1
 81020c6:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 81020c8:	2306      	movs	r3, #6
 81020ca:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 81020cc:	2301      	movs	r3, #1
 81020ce:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 81020d0:	2301      	movs	r3, #1
 81020d2:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 81020d4:	2301      	movs	r3, #1
 81020d6:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 81020d8:	2301      	movs	r3, #1
 81020da:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81020dc:	463b      	mov	r3, r7
 81020de:	4618      	mov	r0, r3
 81020e0:	f000 fea2 	bl	8102e28 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81020e4:	2301      	movs	r3, #1
 81020e6:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 81020e8:	2303      	movs	r3, #3
 81020ea:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_os_section_vars;
 81020ec:	4b26      	ldr	r3, [pc, #152]	; (8102188 <CILmemoryProtection_init+0x1f8>)
 81020ee:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 81020f0:	4a26      	ldr	r2, [pc, #152]	; (810218c <CILmemoryProtection_init+0x1fc>)
 81020f2:	4b25      	ldr	r3, [pc, #148]	; (8102188 <CILmemoryProtection_init+0x1f8>)
 81020f4:	1ad3      	subs	r3, r2, r3
 81020f6:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 81020f8:	69fb      	ldr	r3, [r7, #28]
 81020fa:	085b      	lsrs	r3, r3, #1
 81020fc:	69fa      	ldr	r2, [r7, #28]
 81020fe:	4313      	orrs	r3, r2
 8102100:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8102102:	69fb      	ldr	r3, [r7, #28]
 8102104:	089b      	lsrs	r3, r3, #2
 8102106:	69fa      	ldr	r2, [r7, #28]
 8102108:	4313      	orrs	r3, r2
 810210a:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 810210c:	69fb      	ldr	r3, [r7, #28]
 810210e:	091b      	lsrs	r3, r3, #4
 8102110:	69fa      	ldr	r2, [r7, #28]
 8102112:	4313      	orrs	r3, r2
 8102114:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 8102116:	69fb      	ldr	r3, [r7, #28]
 8102118:	0a1b      	lsrs	r3, r3, #8
 810211a:	69fa      	ldr	r2, [r7, #28]
 810211c:	4313      	orrs	r3, r2
 810211e:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 8102120:	69fb      	ldr	r3, [r7, #28]
 8102122:	0c1b      	lsrs	r3, r3, #16
 8102124:	69fa      	ldr	r2, [r7, #28]
 8102126:	4313      	orrs	r3, r2
 8102128:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 810212a:	69fb      	ldr	r3, [r7, #28]
 810212c:	4a14      	ldr	r2, [pc, #80]	; (8102180 <CILmemoryProtection_init+0x1f0>)
 810212e:	fb02 f303 	mul.w	r3, r2, r3
 8102132:	0edb      	lsrs	r3, r3, #27
 8102134:	4a13      	ldr	r2, [pc, #76]	; (8102184 <CILmemoryProtection_init+0x1f4>)
 8102136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810213a:	61bb      	str	r3, [r7, #24]
    return (result-1);
 810213c:	69bb      	ldr	r3, [r7, #24]
 810213e:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8102140:	b2db      	uxtb	r3, r3
 8102142:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102144:	2300      	movs	r3, #0
 8102146:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102148:	2301      	movs	r3, #1
 810214a:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 810214c:	2302      	movs	r3, #2
 810214e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8102150:	2301      	movs	r3, #1
 8102152:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102154:	2301      	movs	r3, #1
 8102156:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102158:	2301      	movs	r3, #1
 810215a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 810215c:	2301      	movs	r3, #1
 810215e:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102160:	463b      	mov	r3, r7
 8102162:	4618      	mov	r0, r3
 8102164:	f000 fe60 	bl	8102e28 <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8102168:	2006      	movs	r0, #6
 810216a:	f000 fe3d 	bl	8102de8 <HAL_MPU_Enable>

}
 810216e:	bf00      	nop
 8102170:	3728      	adds	r7, #40	; 0x28
 8102172:	46bd      	mov	sp, r7
 8102174:	bd80      	pop	{r7, pc}
 8102176:	bf00      	nop
 8102178:	38000000 	.word	0x38000000
 810217c:	38000800 	.word	0x38000800
 8102180:	07c4acdd 	.word	0x07c4acdd
 8102184:	08103dfc 	.word	0x08103dfc
 8102188:	38008000 	.word	0x38008000
 810218c:	38008400 	.word	0x38008400

08102190 <CILmemoryProtection_setStackOverflowProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setStackOverflowProtection(AddressType stackLowAddress, AddressType stackHighAddress)
{
 8102190:	b580      	push	{r7, lr}
 8102192:	b088      	sub	sp, #32
 8102194:	af00      	add	r7, sp, #0
 8102196:	6078      	str	r0, [r7, #4]
 8102198:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 810219a:	f107 0308 	add.w	r3, r7, #8
 810219e:	2200      	movs	r2, #0
 81021a0:	601a      	str	r2, [r3, #0]
 81021a2:	605a      	str	r2, [r3, #4]
 81021a4:	609a      	str	r2, [r3, #8]
 81021a6:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 81021a8:	f000 fe06 	bl	8102db8 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81021ac:	2301      	movs	r3, #1
 81021ae:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 81021b0:	2307      	movs	r3, #7
 81021b2:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (stackLowAddress);
 81021b4:	687b      	ldr	r3, [r7, #4]
 81021b6:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 81021b8:	683a      	ldr	r2, [r7, #0]
 81021ba:	687b      	ldr	r3, [r7, #4]
 81021bc:	1ad3      	subs	r3, r2, r3
 81021be:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 81021c0:	69fb      	ldr	r3, [r7, #28]
 81021c2:	085b      	lsrs	r3, r3, #1
 81021c4:	69fa      	ldr	r2, [r7, #28]
 81021c6:	4313      	orrs	r3, r2
 81021c8:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 81021ca:	69fb      	ldr	r3, [r7, #28]
 81021cc:	089b      	lsrs	r3, r3, #2
 81021ce:	69fa      	ldr	r2, [r7, #28]
 81021d0:	4313      	orrs	r3, r2
 81021d2:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 81021d4:	69fb      	ldr	r3, [r7, #28]
 81021d6:	091b      	lsrs	r3, r3, #4
 81021d8:	69fa      	ldr	r2, [r7, #28]
 81021da:	4313      	orrs	r3, r2
 81021dc:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 81021de:	69fb      	ldr	r3, [r7, #28]
 81021e0:	0a1b      	lsrs	r3, r3, #8
 81021e2:	69fa      	ldr	r2, [r7, #28]
 81021e4:	4313      	orrs	r3, r2
 81021e6:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 81021e8:	69fb      	ldr	r3, [r7, #28]
 81021ea:	0c1b      	lsrs	r3, r3, #16
 81021ec:	69fa      	ldr	r2, [r7, #28]
 81021ee:	4313      	orrs	r3, r2
 81021f0:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 81021f2:	69fb      	ldr	r3, [r7, #28]
 81021f4:	4a12      	ldr	r2, [pc, #72]	; (8102240 <CILmemoryProtection_setStackOverflowProtection+0xb0>)
 81021f6:	fb02 f303 	mul.w	r3, r2, r3
 81021fa:	0edb      	lsrs	r3, r3, #27
 81021fc:	4a11      	ldr	r2, [pc, #68]	; (8102244 <CILmemoryProtection_setStackOverflowProtection+0xb4>)
 81021fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102202:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8102204:	69bb      	ldr	r3, [r7, #24]
 8102206:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8102208:	b2db      	uxtb	r3, r3
 810220a:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 810220c:	2300      	movs	r3, #0
 810220e:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102210:	2301      	movs	r3, #1
 8102212:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8102214:	2303      	movs	r3, #3
 8102216:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102218:	2300      	movs	r3, #0
 810221a:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 810221c:	2301      	movs	r3, #1
 810221e:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102220:	2301      	movs	r3, #1
 8102222:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102224:	2301      	movs	r3, #1
 8102226:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102228:	f107 0308 	add.w	r3, r7, #8
 810222c:	4618      	mov	r0, r3
 810222e:	f000 fdfb 	bl	8102e28 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8102232:	2006      	movs	r0, #6
 8102234:	f000 fdd8 	bl	8102de8 <HAL_MPU_Enable>
}
 8102238:	bf00      	nop
 810223a:	3720      	adds	r7, #32
 810223c:	46bd      	mov	sp, r7
 810223e:	bd80      	pop	{r7, pc}
 8102240:	07c4acdd 	.word	0x07c4acdd
 8102244:	08103dfc 	.word	0x08103dfc

08102248 <CILmemoryProtection_setProgramMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setProgramMemoryProtection(AddressType lowAddress, AddressType highAddress)
{
 8102248:	b580      	push	{r7, lr}
 810224a:	b088      	sub	sp, #32
 810224c:	af00      	add	r7, sp, #0
 810224e:	6078      	str	r0, [r7, #4]
 8102250:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8102252:	f107 0308 	add.w	r3, r7, #8
 8102256:	2200      	movs	r2, #0
 8102258:	601a      	str	r2, [r3, #0]
 810225a:	605a      	str	r2, [r3, #4]
 810225c:	609a      	str	r2, [r3, #8]
 810225e:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8102260:	f000 fdaa 	bl	8102db8 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102264:	2301      	movs	r3, #1
 8102266:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 8102268:	2306      	movs	r3, #6
 810226a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 810226c:	687b      	ldr	r3, [r7, #4]
 810226e:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8102270:	683a      	ldr	r2, [r7, #0]
 8102272:	687b      	ldr	r3, [r7, #4]
 8102274:	1ad3      	subs	r3, r2, r3
 8102276:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 8102278:	69fb      	ldr	r3, [r7, #28]
 810227a:	085b      	lsrs	r3, r3, #1
 810227c:	69fa      	ldr	r2, [r7, #28]
 810227e:	4313      	orrs	r3, r2
 8102280:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8102282:	69fb      	ldr	r3, [r7, #28]
 8102284:	089b      	lsrs	r3, r3, #2
 8102286:	69fa      	ldr	r2, [r7, #28]
 8102288:	4313      	orrs	r3, r2
 810228a:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 810228c:	69fb      	ldr	r3, [r7, #28]
 810228e:	091b      	lsrs	r3, r3, #4
 8102290:	69fa      	ldr	r2, [r7, #28]
 8102292:	4313      	orrs	r3, r2
 8102294:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 8102296:	69fb      	ldr	r3, [r7, #28]
 8102298:	0a1b      	lsrs	r3, r3, #8
 810229a:	69fa      	ldr	r2, [r7, #28]
 810229c:	4313      	orrs	r3, r2
 810229e:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 81022a0:	69fb      	ldr	r3, [r7, #28]
 81022a2:	0c1b      	lsrs	r3, r3, #16
 81022a4:	69fa      	ldr	r2, [r7, #28]
 81022a6:	4313      	orrs	r3, r2
 81022a8:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 81022aa:	69fb      	ldr	r3, [r7, #28]
 81022ac:	4a12      	ldr	r2, [pc, #72]	; (81022f8 <CILmemoryProtection_setProgramMemoryProtection+0xb0>)
 81022ae:	fb02 f303 	mul.w	r3, r2, r3
 81022b2:	0edb      	lsrs	r3, r3, #27
 81022b4:	4a11      	ldr	r2, [pc, #68]	; (81022fc <CILmemoryProtection_setProgramMemoryProtection+0xb4>)
 81022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81022ba:	61bb      	str	r3, [r7, #24]
    return (result-1);
 81022bc:	69bb      	ldr	r3, [r7, #24]
 81022be:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 81022c0:	b2db      	uxtb	r3, r3
 81022c2:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 81022c4:	2300      	movs	r3, #0
 81022c6:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 81022c8:	2301      	movs	r3, #1
 81022ca:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 81022cc:	2303      	movs	r3, #3
 81022ce:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 81022d0:	2300      	movs	r3, #0
 81022d2:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 81022d4:	2301      	movs	r3, #1
 81022d6:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 81022d8:	2301      	movs	r3, #1
 81022da:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 81022dc:	2301      	movs	r3, #1
 81022de:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81022e0:	f107 0308 	add.w	r3, r7, #8
 81022e4:	4618      	mov	r0, r3
 81022e6:	f000 fd9f 	bl	8102e28 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 81022ea:	2006      	movs	r0, #6
 81022ec:	f000 fd7c 	bl	8102de8 <HAL_MPU_Enable>
}
 81022f0:	bf00      	nop
 81022f2:	3720      	adds	r7, #32
 81022f4:	46bd      	mov	sp, r7
 81022f6:	bd80      	pop	{r7, pc}
 81022f8:	07c4acdd 	.word	0x07c4acdd
 81022fc:	08103dfc 	.word	0x08103dfc

08102300 <CILstack_stackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType CILstack_stackInit(AddressType stackLowAddress, AddressType stackHighAddress, AddressType handlerAddress)
{
 8102300:	b480      	push	{r7}
 8102302:	b087      	sub	sp, #28
 8102304:	af00      	add	r7, sp, #0
 8102306:	60f8      	str	r0, [r7, #12]
 8102308:	60b9      	str	r1, [r7, #8]
 810230a:	607a      	str	r2, [r7, #4]
    CosmOS_StackType *stack = ( CosmOS_StackType* )( stackHighAddress - (AddressType)sizeof(CosmOS_StackType) );
 810230c:	68bb      	ldr	r3, [r7, #8]
 810230e:	3b40      	subs	r3, #64	; 0x40
 8102310:	617b      	str	r3, [r7, #20]

    stack->XPSR  = 0x01000000;
 8102312:	697b      	ldr	r3, [r7, #20]
 8102314:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8102318:	63da      	str	r2, [r3, #60]	; 0x3c
    stack->PC    = handlerAddress;
 810231a:	697b      	ldr	r3, [r7, #20]
 810231c:	687a      	ldr	r2, [r7, #4]
 810231e:	639a      	str	r2, [r3, #56]	; 0x38
    stack->LR    = 0xFFFFFFFD;
 8102320:	697b      	ldr	r3, [r7, #20]
 8102322:	f06f 0202 	mvn.w	r2, #2
 8102326:	635a      	str	r2, [r3, #52]	; 0x34
    stack->R12   = 0;
 8102328:	697b      	ldr	r3, [r7, #20]
 810232a:	2200      	movs	r2, #0
 810232c:	631a      	str	r2, [r3, #48]	; 0x30
    stack->R3    = 0;
 810232e:	697b      	ldr	r3, [r7, #20]
 8102330:	2200      	movs	r2, #0
 8102332:	62da      	str	r2, [r3, #44]	; 0x2c
    stack->R2    = 0;
 8102334:	697b      	ldr	r3, [r7, #20]
 8102336:	2200      	movs	r2, #0
 8102338:	629a      	str	r2, [r3, #40]	; 0x28
    stack->R1    = 0;
 810233a:	697b      	ldr	r3, [r7, #20]
 810233c:	2200      	movs	r2, #0
 810233e:	625a      	str	r2, [r3, #36]	; 0x24
    stack->R0    = 0;
 8102340:	697b      	ldr	r3, [r7, #20]
 8102342:	2200      	movs	r2, #0
 8102344:	621a      	str	r2, [r3, #32]
    stack->R14   = 0xFFFFFFFD;
 8102346:	697b      	ldr	r3, [r7, #20]
 8102348:	f06f 0202 	mvn.w	r2, #2
 810234c:	61da      	str	r2, [r3, #28]
    stack->R11   = 0;
 810234e:	697b      	ldr	r3, [r7, #20]
 8102350:	2200      	movs	r2, #0
 8102352:	619a      	str	r2, [r3, #24]
    stack->R10   = 0;
 8102354:	697b      	ldr	r3, [r7, #20]
 8102356:	2200      	movs	r2, #0
 8102358:	615a      	str	r2, [r3, #20]
    stack->R8    = 0;
 810235a:	697b      	ldr	r3, [r7, #20]
 810235c:	2200      	movs	r2, #0
 810235e:	611a      	str	r2, [r3, #16]
    stack->R7    = 0;
 8102360:	697b      	ldr	r3, [r7, #20]
 8102362:	2200      	movs	r2, #0
 8102364:	60da      	str	r2, [r3, #12]
    stack->R6    = 0;
 8102366:	697b      	ldr	r3, [r7, #20]
 8102368:	2200      	movs	r2, #0
 810236a:	609a      	str	r2, [r3, #8]
    stack->R5    = 0;
 810236c:	697b      	ldr	r3, [r7, #20]
 810236e:	2200      	movs	r2, #0
 8102370:	605a      	str	r2, [r3, #4]
    stack->R4    = 0;
 8102372:	697b      	ldr	r3, [r7, #20]
 8102374:	2200      	movs	r2, #0
 8102376:	601a      	str	r2, [r3, #0]

    return (StackPointerType)(&(stack->R4));
 8102378:	697b      	ldr	r3, [r7, #20]
}
 810237a:	4618      	mov	r0, r3
 810237c:	371c      	adds	r7, #28
 810237e:	46bd      	mov	sp, r7
 8102380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102384:	4770      	bx	lr

08102386 <CILstack_setStackPointer>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION __NAKED void CILstack_setStackPointer(AddressType address)
{
    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8102386:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
	  __asm volatile ("MSR PSP,R0");
 810238a:	f380 8809 	msr	PSP, r0
    __asm volatile ("MOV R0, #0x3");
 810238e:	f04f 0003 	mov.w	r0, #3
    __asm volatile ("MSR CONTROL, R0");
 8102392:	f380 8814 	msr	CONTROL, r0
    __asm volatile ("ISB");
 8102396:	f3bf 8f6f 	isb	sy
    __asm volatile ("BX R14");
 810239a:	4770      	bx	lr
}
 810239c:	bf00      	nop

0810239e <CILsysCalls_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_dispatcher(BitWidthType *sp)
{
 810239e:	b580      	push	{r7, lr}
 81023a0:	b08e      	sub	sp, #56	; 0x38
 81023a2:	af00      	add	r7, sp, #0
 81023a4:	6078      	str	r0, [r7, #4]
    CosmOS_GenericVoidType sysCall;
    CosmOS_OsVariableType * osVar;
    CosmOS_RoutesConfigurationType * routeVar;


    uint8_t *pc = (uint8_t*)(sp[6]);
 81023a6:	687b      	ldr	r3, [r7, #4]
 81023a8:	3318      	adds	r3, #24
 81023aa:	681b      	ldr	r3, [r3, #0]
 81023ac:	633b      	str	r3, [r7, #48]	; 0x30

    pc-=2;
 81023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81023b0:	3b02      	subs	r3, #2
 81023b2:	633b      	str	r3, [r7, #48]	; 0x30

    osVar = os_getOsVar();
 81023b4:	f7ff f8c6 	bl	8101544 <os_getOsVar>
 81023b8:	62f8      	str	r0, [r7, #44]	; 0x2c

    uint8_t sysCallId = *pc;
 81023ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81023bc:	781b      	ldrb	r3, [r3, #0]
 81023be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 81023c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81023c4:	60bb      	str	r3, [r7, #8]
    return (CosmOS_RoutesConfigurationType *)(osVar->cfg->route);
 81023c6:	68bb      	ldr	r3, [r7, #8]
 81023c8:	681b      	ldr	r3, [r3, #0]
 81023ca:	691b      	ldr	r3, [r3, #16]

    routeVar = os_getOsRoutes( osVar );
 81023cc:	627b      	str	r3, [r7, #36]	; 0x24

    sysCall = route_getRoutesFunc( routeVar, sp[0] );
 81023ce:	687b      	ldr	r3, [r7, #4]
 81023d0:	681b      	ldr	r3, [r3, #0]
 81023d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81023d4:	613a      	str	r2, [r7, #16]
 81023d6:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_GenericVoidType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_GenericVoidType route_getRoutesFunc(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (CosmOS_GenericVoidType)(route->routeFunc[route->routeIdToFunc[callId]]);
 81023d8:	693b      	ldr	r3, [r7, #16]
 81023da:	681a      	ldr	r2, [r3, #0]
 81023dc:	693b      	ldr	r3, [r7, #16]
 81023de:	6859      	ldr	r1, [r3, #4]
 81023e0:	68fb      	ldr	r3, [r7, #12]
 81023e2:	009b      	lsls	r3, r3, #2
 81023e4:	440b      	add	r3, r1
 81023e6:	681b      	ldr	r3, [r3, #0]
 81023e8:	009b      	lsls	r3, r3, #2
 81023ea:	4413      	add	r3, r2
 81023ec:	681b      	ldr	r3, [r3, #0]
 81023ee:	623b      	str	r3, [r7, #32]
    entityId = route_getRoutesEntityId( routeVar, sp[0] );
 81023f0:	687b      	ldr	r3, [r7, #4]
 81023f2:	681b      	ldr	r3, [r3, #0]
 81023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81023f6:	61ba      	str	r2, [r7, #24]
 81023f8:	617b      	str	r3, [r7, #20]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType route_getRoutesEntityId(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (route->routeIdToEntity[callId]);
 81023fa:	69bb      	ldr	r3, [r7, #24]
 81023fc:	689a      	ldr	r2, [r3, #8]
 81023fe:	697b      	ldr	r3, [r7, #20]
 8102400:	009b      	lsls	r3, r3, #2
 8102402:	4413      	add	r3, r2
 8102404:	681b      	ldr	r3, [r3, #0]
 8102406:	61fb      	str	r3, [r7, #28]

    switch ( sysCallId )
 8102408:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810240c:	2b02      	cmp	r3, #2
 810240e:	d015      	beq.n	810243c <CILsysCalls_dispatcher+0x9e>
 8102410:	2b02      	cmp	r3, #2
 8102412:	dc15      	bgt.n	8102440 <CILsysCalls_dispatcher+0xa2>
 8102414:	2b00      	cmp	r3, #0
 8102416:	d002      	beq.n	810241e <CILsysCalls_dispatcher+0x80>
 8102418:	2b01      	cmp	r3, #1
 810241a:	d003      	beq.n	8102424 <CILsysCalls_dispatcher+0x86>
        }

        default :
        {
            /* PANIC */
            break;
 810241c:	e010      	b.n	8102440 <CILsysCalls_dispatcher+0xa2>
            sysCall();
 810241e:	6a3b      	ldr	r3, [r7, #32]
 8102420:	4798      	blx	r3
            break;
 8102422:	e00e      	b.n	8102442 <CILsysCalls_dispatcher+0xa4>
            returnValue = ((CosmOS_GenericBitWidthRWType)sysCall)(entityId, (void *)sp[1], sp[2]);
 8102424:	687b      	ldr	r3, [r7, #4]
 8102426:	3304      	adds	r3, #4
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	4619      	mov	r1, r3
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	3308      	adds	r3, #8
 8102430:	681a      	ldr	r2, [r3, #0]
 8102432:	6a3b      	ldr	r3, [r7, #32]
 8102434:	69f8      	ldr	r0, [r7, #28]
 8102436:	4798      	blx	r3
 8102438:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 810243a:	e002      	b.n	8102442 <CILsysCalls_dispatcher+0xa4>
            break;
 810243c:	bf00      	nop
 810243e:	e000      	b.n	8102442 <CILsysCalls_dispatcher+0xa4>
            break;
 8102440:	bf00      	nop
        }
    }

    sp[0] = returnValue;
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102446:	601a      	str	r2, [r3, #0]
}
 8102448:	bf00      	nop
 810244a:	3738      	adds	r7, #56	; 0x38
 810244c:	46bd      	mov	sp, r7
 810244e:	bd80      	pop	{r7, pc}

08102450 <CILsysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_os(BitWidthType id)
{
 8102450:	b480      	push	{r7}
 8102452:	b083      	sub	sp, #12
 8102454:	af00      	add	r7, sp, #0
 8102456:	6078      	str	r0, [r7, #4]
    __asm volatile("SVC #0");
 8102458:	df00      	svc	0
}
 810245a:	bf00      	nop
 810245c:	370c      	adds	r7, #12
 810245e:	46bd      	mov	sp, r7
 8102460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102464:	4770      	bx	lr

08102466 <CILsysCalls_readWrite>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_readWrite(BitWidthType id, void * entity, BitWidthType num)
{
 8102466:	b480      	push	{r7}
 8102468:	b087      	sub	sp, #28
 810246a:	af00      	add	r7, sp, #0
 810246c:	60f8      	str	r0, [r7, #12]
 810246e:	60b9      	str	r1, [r7, #8]
 8102470:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #1");
 8102472:	df01      	svc	1
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8102474:	4603      	mov	r3, r0
 8102476:	617b      	str	r3, [r7, #20]

    return returnValue;
 8102478:	697b      	ldr	r3, [r7, #20]
}
 810247a:	4618      	mov	r0, r3
 810247c:	371c      	adds	r7, #28
 810247e:	46bd      	mov	sp, r7
 8102480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102484:	4770      	bx	lr
	...

08102488 <CILsysTimer_setTicks>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_setTicks(BitWidthType ticks, CosmOS_SchedulerSyncStateType schedulersSyncState)
{
 8102488:	b480      	push	{r7}
 810248a:	b085      	sub	sp, #20
 810248c:	af00      	add	r7, sp, #0
 810248e:	6078      	str	r0, [r7, #4]
 8102490:	6039      	str	r1, [r7, #0]
    if( schedulersSyncState IS_NOT_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 8102492:	683b      	ldr	r3, [r7, #0]
 8102494:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8102498:	d010      	beq.n	81024bc <CILsysTimer_setTicks+0x34>
    {
        BitWidthType delay;
        delay = SysTick->LOAD - SysTick->VAL;
 810249a:	4b12      	ldr	r3, [pc, #72]	; (81024e4 <CILsysTimer_setTicks+0x5c>)
 810249c:	685a      	ldr	r2, [r3, #4]
 810249e:	4b11      	ldr	r3, [pc, #68]	; (81024e4 <CILsysTimer_setTicks+0x5c>)
 81024a0:	689b      	ldr	r3, [r3, #8]
 81024a2:	1ad3      	subs	r3, r2, r3
 81024a4:	60fb      	str	r3, [r7, #12]

        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)-delay) - 1UL);         /* set reload register */
 81024a6:	687b      	ldr	r3, [r7, #4]
 81024a8:	f242 7210 	movw	r2, #10000	; 0x2710
 81024ac:	fb02 f203 	mul.w	r2, r2, r3
 81024b0:	68fb      	ldr	r3, [r7, #12]
 81024b2:	1ad3      	subs	r3, r2, r3
 81024b4:	4a0b      	ldr	r2, [pc, #44]	; (81024e4 <CILsysTimer_setTicks+0x5c>)
 81024b6:	3b01      	subs	r3, #1
 81024b8:	6053      	str	r3, [r2, #4]
 81024ba:	e007      	b.n	81024cc <CILsysTimer_setTicks+0x44>
    }
    else
    {
        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)) - 1UL);               /* set reload register */
 81024bc:	687b      	ldr	r3, [r7, #4]
 81024be:	f242 7210 	movw	r2, #10000	; 0x2710
 81024c2:	fb02 f303 	mul.w	r3, r2, r3
 81024c6:	4a07      	ldr	r2, [pc, #28]	; (81024e4 <CILsysTimer_setTicks+0x5c>)
 81024c8:	3b01      	subs	r3, #1
 81024ca:	6053      	str	r3, [r2, #4]
    }

    SysTick->VAL   = 0UL;                                                     /* Load the SysTick Counter Value */
 81024cc:	4b05      	ldr	r3, [pc, #20]	; (81024e4 <CILsysTimer_setTicks+0x5c>)
 81024ce:	2200      	movs	r2, #0
 81024d0:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81024d2:	4b04      	ldr	r3, [pc, #16]	; (81024e4 <CILsysTimer_setTicks+0x5c>)
 81024d4:	2207      	movs	r2, #7
 81024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                                   /* Enable SysTick IRQ and SysTick Timer */
}
 81024d8:	bf00      	nop
 81024da:	3714      	adds	r7, #20
 81024dc:	46bd      	mov	sp, r7
 81024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024e2:	4770      	bx	lr
 81024e4:	e000e010 	.word	0xe000e010

081024e8 <CILuart_sysJob>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILuart_sysJob()
{
 81024e8:	b480      	push	{r7}
 81024ea:	af00      	add	r7, sp, #0

    //TX SIDE
    //check where is DMA and switch it if its buffer is empty
    //check if user is in red zone, if yes check if DMA is on the same buffer, then switch to the other
    //HAL_UART_Receive_DMA()
}
 81024ec:	bf00      	nop
 81024ee:	46bd      	mov	sp, r7
 81024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81024f4:	4770      	bx	lr
	...

Disassembly of section .text:

081024f8 <__do_global_dtors_aux>:
 81024f8:	b510      	push	{r4, lr}
 81024fa:	4c05      	ldr	r4, [pc, #20]	; (8102510 <__do_global_dtors_aux+0x18>)
 81024fc:	7823      	ldrb	r3, [r4, #0]
 81024fe:	b933      	cbnz	r3, 810250e <__do_global_dtors_aux+0x16>
 8102500:	4b04      	ldr	r3, [pc, #16]	; (8102514 <__do_global_dtors_aux+0x1c>)
 8102502:	b113      	cbz	r3, 810250a <__do_global_dtors_aux+0x12>
 8102504:	4804      	ldr	r0, [pc, #16]	; (8102518 <__do_global_dtors_aux+0x20>)
 8102506:	f3af 8000 	nop.w
 810250a:	2301      	movs	r3, #1
 810250c:	7023      	strb	r3, [r4, #0]
 810250e:	bd10      	pop	{r4, pc}
 8102510:	10001810 	.word	0x10001810
 8102514:	00000000 	.word	0x00000000
 8102518:	08103d8c 	.word	0x08103d8c

0810251c <frame_dummy>:
 810251c:	b508      	push	{r3, lr}
 810251e:	4b03      	ldr	r3, [pc, #12]	; (810252c <frame_dummy+0x10>)
 8102520:	b11b      	cbz	r3, 810252a <frame_dummy+0xe>
 8102522:	4903      	ldr	r1, [pc, #12]	; (8102530 <frame_dummy+0x14>)
 8102524:	4803      	ldr	r0, [pc, #12]	; (8102534 <frame_dummy+0x18>)
 8102526:	f3af 8000 	nop.w
 810252a:	bd08      	pop	{r3, pc}
 810252c:	00000000 	.word	0x00000000
 8102530:	10001814 	.word	0x10001814
 8102534:	08103d8c 	.word	0x08103d8c

08102538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8102538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8102570 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 810253c:	f001 fbe6 	bl	8103d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8102540:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8102542:	e003      	b.n	810254c <LoopCopyDataInit>

08102544 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8102544:	4b0b      	ldr	r3, [pc, #44]	; (8102574 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8102546:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8102548:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 810254a:	3104      	adds	r1, #4

0810254c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 810254c:	480a      	ldr	r0, [pc, #40]	; (8102578 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 810254e:	4b0b      	ldr	r3, [pc, #44]	; (810257c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8102550:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8102552:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8102554:	d3f6      	bcc.n	8102544 <CopyDataInit>
  ldr  r2, =_sbss
 8102556:	4a0a      	ldr	r2, [pc, #40]	; (8102580 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8102558:	e002      	b.n	8102560 <LoopFillZerobss>

0810255a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 810255a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 810255c:	f842 3b04 	str.w	r3, [r2], #4

08102560 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8102560:	4b08      	ldr	r3, [pc, #32]	; (8102584 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8102562:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8102564:	d3f9      	bcc.n	810255a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102566:	f001 fbed 	bl	8103d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810256a:	f000 f839 	bl	81025e0 <main>
  bx  lr    
 810256e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102570:	10020000 	.word	0x10020000
  ldr  r3, =_sidata
 8102574:	08103e94 	.word	0x08103e94
  ldr  r0, =_sdata
 8102578:	10001800 	.word	0x10001800
  ldr  r3, =_edata
 810257c:	10001810 	.word	0x10001810
  ldr  r2, =_sbss
 8102580:	10001810 	.word	0x10001810
  ldr  r3, = _ebss
 8102584:	1000187c 	.word	0x1000187c

08102588 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102588:	e7fe      	b.n	8102588 <ADC3_IRQHandler>
	...

0810258c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810258c:	b480      	push	{r7}
 810258e:	b083      	sub	sp, #12
 8102590:	af00      	add	r7, sp, #0
 8102592:	4603      	mov	r3, r0
 8102594:	6039      	str	r1, [r7, #0]
 8102596:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810259c:	2b00      	cmp	r3, #0
 810259e:	db0a      	blt.n	81025b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81025a0:	683b      	ldr	r3, [r7, #0]
 81025a2:	b2da      	uxtb	r2, r3
 81025a4:	490c      	ldr	r1, [pc, #48]	; (81025d8 <__NVIC_SetPriority+0x4c>)
 81025a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81025aa:	0112      	lsls	r2, r2, #4
 81025ac:	b2d2      	uxtb	r2, r2
 81025ae:	440b      	add	r3, r1
 81025b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81025b4:	e00a      	b.n	81025cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81025b6:	683b      	ldr	r3, [r7, #0]
 81025b8:	b2da      	uxtb	r2, r3
 81025ba:	4908      	ldr	r1, [pc, #32]	; (81025dc <__NVIC_SetPriority+0x50>)
 81025bc:	88fb      	ldrh	r3, [r7, #6]
 81025be:	f003 030f 	and.w	r3, r3, #15
 81025c2:	3b04      	subs	r3, #4
 81025c4:	0112      	lsls	r2, r2, #4
 81025c6:	b2d2      	uxtb	r2, r2
 81025c8:	440b      	add	r3, r1
 81025ca:	761a      	strb	r2, [r3, #24]
}
 81025cc:	bf00      	nop
 81025ce:	370c      	adds	r7, #12
 81025d0:	46bd      	mov	sp, r7
 81025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025d6:	4770      	bx	lr
 81025d8:	e000e100 	.word	0xe000e100
 81025dc:	e000ed00 	.word	0xe000ed00

081025e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81025e0:	b580      	push	{r7, lr}
 81025e2:	b082      	sub	sp, #8
 81025e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	cosmosApi_boot();
 81025e6:	f000 f97b 	bl	81028e0 <osBoot_boot>
	NVIC_SetPriority(SVCall_IRQn,3);
 81025ea:	2103      	movs	r1, #3
 81025ec:	f06f 0004 	mvn.w	r0, #4
 81025f0:	f7ff ffcc 	bl	810258c <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn,4);
 81025f4:	2104      	movs	r1, #4
 81025f6:	f06f 0001 	mvn.w	r0, #1
 81025fa:	f7ff ffc7 	bl	810258c <__NVIC_SetPriority>
  NVIC_SetPriority (SysTick_IRQn, 0);         /* set Priority for Systick Interrupt */
 81025fe:	2100      	movs	r1, #0
 8102600:	f04f 30ff 	mov.w	r0, #4294967295
 8102604:	f7ff ffc2 	bl	810258c <__NVIC_SetPriority>
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8102608:	4b1e      	ldr	r3, [pc, #120]	; (8102684 <main+0xa4>)
 810260a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810260e:	4a1d      	ldr	r2, [pc, #116]	; (8102684 <main+0xa4>)
 8102610:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102618:	4b1a      	ldr	r3, [pc, #104]	; (8102684 <main+0xa4>)
 810261a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810261e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102622:	607b      	str	r3, [r7, #4]
 8102624:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8102626:	2001      	movs	r0, #1
 8102628:	f000 fe3a 	bl	81032a0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810262c:	f000 fec4 	bl	81033b8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8102630:	2201      	movs	r2, #1
 8102632:	2102      	movs	r1, #2
 8102634:	2000      	movs	r0, #0
 8102636:	f000 fe45 	bl	81032c4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810263a:	4b13      	ldr	r3, [pc, #76]	; (8102688 <main+0xa8>)
 810263c:	681b      	ldr	r3, [r3, #0]
 810263e:	091b      	lsrs	r3, r3, #4
 8102640:	f003 030f 	and.w	r3, r3, #15
 8102644:	2b07      	cmp	r3, #7
 8102646:	d108      	bne.n	810265a <main+0x7a>
 8102648:	4b10      	ldr	r3, [pc, #64]	; (810268c <main+0xac>)
 810264a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810264e:	4a0f      	ldr	r2, [pc, #60]	; (810268c <main+0xac>)
 8102650:	f043 0301 	orr.w	r3, r3, #1
 8102654:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8102658:	e007      	b.n	810266a <main+0x8a>
 810265a:	4b0c      	ldr	r3, [pc, #48]	; (810268c <main+0xac>)
 810265c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8102660:	4a0a      	ldr	r2, [pc, #40]	; (810268c <main+0xac>)
 8102662:	f043 0301 	orr.w	r3, r3, #1
 8102666:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810266a:	f000 fa53 	bl	8102b14 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810266e:	f000 f829 	bl	81026c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8102672:	f000 f80d 	bl	8102690 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
	cosmosApi_osInit_init();
 8102676:	2007      	movs	r0, #7
 8102678:	f7ff fbaa 	bl	8101dd0 <sysCalls_os>
	cosmosApi_os_start();
 810267c:	2008      	movs	r0, #8
 810267e:	f7ff fba7 	bl	8101dd0 <sysCalls_os>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8102682:	e7fe      	b.n	8102682 <main+0xa2>
 8102684:	58024400 	.word	0x58024400
 8102688:	e000ed00 	.word	0xe000ed00
 810268c:	58026400 	.word	0x58026400

08102690 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8102690:	b480      	push	{r7}
 8102692:	b083      	sub	sp, #12
 8102694:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8102696:	4b0a      	ldr	r3, [pc, #40]	; (81026c0 <MX_DMA_Init+0x30>)
 8102698:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810269c:	4a08      	ldr	r2, [pc, #32]	; (81026c0 <MX_DMA_Init+0x30>)
 810269e:	f043 0301 	orr.w	r3, r3, #1
 81026a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 81026a6:	4b06      	ldr	r3, [pc, #24]	; (81026c0 <MX_DMA_Init+0x30>)
 81026a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 81026ac:	f003 0301 	and.w	r3, r3, #1
 81026b0:	607b      	str	r3, [r7, #4]
 81026b2:	687b      	ldr	r3, [r7, #4]

}
 81026b4:	bf00      	nop
 81026b6:	370c      	adds	r7, #12
 81026b8:	46bd      	mov	sp, r7
 81026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026be:	4770      	bx	lr
 81026c0:	58024400 	.word	0x58024400

081026c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81026c4:	b580      	push	{r7, lr}
 81026c6:	b088      	sub	sp, #32
 81026c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81026ca:	f107 030c 	add.w	r3, r7, #12
 81026ce:	2200      	movs	r2, #0
 81026d0:	601a      	str	r2, [r3, #0]
 81026d2:	605a      	str	r2, [r3, #4]
 81026d4:	609a      	str	r2, [r3, #8]
 81026d6:	60da      	str	r2, [r3, #12]
 81026d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81026da:	4b24      	ldr	r3, [pc, #144]	; (810276c <MX_GPIO_Init+0xa8>)
 81026dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026e0:	4a22      	ldr	r2, [pc, #136]	; (810276c <MX_GPIO_Init+0xa8>)
 81026e2:	f043 0301 	orr.w	r3, r3, #1
 81026e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81026ea:	4b20      	ldr	r3, [pc, #128]	; (810276c <MX_GPIO_Init+0xa8>)
 81026ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026f0:	f003 0301 	and.w	r3, r3, #1
 81026f4:	60bb      	str	r3, [r7, #8]
 81026f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81026f8:	4b1c      	ldr	r3, [pc, #112]	; (810276c <MX_GPIO_Init+0xa8>)
 81026fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026fe:	4a1b      	ldr	r2, [pc, #108]	; (810276c <MX_GPIO_Init+0xa8>)
 8102700:	f043 0302 	orr.w	r3, r3, #2
 8102704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102708:	4b18      	ldr	r3, [pc, #96]	; (810276c <MX_GPIO_Init+0xa8>)
 810270a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810270e:	f003 0302 	and.w	r3, r3, #2
 8102712:	607b      	str	r3, [r7, #4]
 8102714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8102716:	2200      	movs	r2, #0
 8102718:	2110      	movs	r1, #16
 810271a:	4815      	ldr	r0, [pc, #84]	; (8102770 <MX_GPIO_Init+0xac>)
 810271c:	f000 fd8c 	bl	8103238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8102720:	2200      	movs	r2, #0
 8102722:	2101      	movs	r1, #1
 8102724:	4813      	ldr	r0, [pc, #76]	; (8102774 <MX_GPIO_Init+0xb0>)
 8102726:	f000 fd87 	bl	8103238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 810272a:	2310      	movs	r3, #16
 810272c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810272e:	2301      	movs	r3, #1
 8102730:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102732:	2300      	movs	r3, #0
 8102734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102736:	2303      	movs	r3, #3
 8102738:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810273a:	f107 030c 	add.w	r3, r7, #12
 810273e:	4619      	mov	r1, r3
 8102740:	480b      	ldr	r0, [pc, #44]	; (8102770 <MX_GPIO_Init+0xac>)
 8102742:	f000 fbc9 	bl	8102ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8102746:	2301      	movs	r3, #1
 8102748:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810274a:	2301      	movs	r3, #1
 810274c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810274e:	2300      	movs	r3, #0
 8102750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102752:	2303      	movs	r3, #3
 8102754:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8102756:	f107 030c 	add.w	r3, r7, #12
 810275a:	4619      	mov	r1, r3
 810275c:	4805      	ldr	r0, [pc, #20]	; (8102774 <MX_GPIO_Init+0xb0>)
 810275e:	f000 fbbb 	bl	8102ed8 <HAL_GPIO_Init>

}
 8102762:	bf00      	nop
 8102764:	3720      	adds	r7, #32
 8102766:	46bd      	mov	sp, r7
 8102768:	bd80      	pop	{r7, pc}
 810276a:	bf00      	nop
 810276c:	58024400 	.word	0x58024400
 8102770:	58020000 	.word	0x58020000
 8102774:	58020400 	.word	0x58020400

08102778 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8102778:	b580      	push	{r7, lr}
 810277a:	b082      	sub	sp, #8
 810277c:	af00      	add	r7, sp, #0
 810277e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8102780:	687b      	ldr	r3, [r7, #4]
 8102782:	681b      	ldr	r3, [r3, #0]
 8102784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102788:	d101      	bne.n	810278e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810278a:	f000 fa21 	bl	8102bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810278e:	bf00      	nop
 8102790:	3708      	adds	r7, #8
 8102792:	46bd      	mov	sp, r7
 8102794:	bd80      	pop	{r7, pc}
	...

08102798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102798:	b480      	push	{r7}
 810279a:	b083      	sub	sp, #12
 810279c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810279e:	4b0a      	ldr	r3, [pc, #40]	; (81027c8 <HAL_MspInit+0x30>)
 81027a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81027a4:	4a08      	ldr	r2, [pc, #32]	; (81027c8 <HAL_MspInit+0x30>)
 81027a6:	f043 0302 	orr.w	r3, r3, #2
 81027aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81027ae:	4b06      	ldr	r3, [pc, #24]	; (81027c8 <HAL_MspInit+0x30>)
 81027b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81027b4:	f003 0302 	and.w	r3, r3, #2
 81027b8:	607b      	str	r3, [r7, #4]
 81027ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81027bc:	bf00      	nop
 81027be:	370c      	adds	r7, #12
 81027c0:	46bd      	mov	sp, r7
 81027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027c6:	4770      	bx	lr
 81027c8:	58024400 	.word	0x58024400

081027cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81027cc:	b580      	push	{r7, lr}
 81027ce:	b090      	sub	sp, #64	; 0x40
 81027d0:	af00      	add	r7, sp, #0
 81027d2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81027d4:	687b      	ldr	r3, [r7, #4]
 81027d6:	2b0f      	cmp	r3, #15
 81027d8:	d827      	bhi.n	810282a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 81027da:	2200      	movs	r2, #0
 81027dc:	6879      	ldr	r1, [r7, #4]
 81027de:	201c      	movs	r0, #28
 81027e0:	f000 fac2 	bl	8102d68 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81027e4:	201c      	movs	r0, #28
 81027e6:	f000 fad9 	bl	8102d9c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 81027ea:	4a29      	ldr	r2, [pc, #164]	; (8102890 <HAL_InitTick+0xc4>)
 81027ec:	687b      	ldr	r3, [r7, #4]
 81027ee:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 81027f0:	4b28      	ldr	r3, [pc, #160]	; (8102894 <HAL_InitTick+0xc8>)
 81027f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81027f6:	4a27      	ldr	r2, [pc, #156]	; (8102894 <HAL_InitTick+0xc8>)
 81027f8:	f043 0301 	orr.w	r3, r3, #1
 81027fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102800:	4b24      	ldr	r3, [pc, #144]	; (8102894 <HAL_InitTick+0xc8>)
 8102802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102806:	f003 0301 	and.w	r3, r3, #1
 810280a:	60fb      	str	r3, [r7, #12]
 810280c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810280e:	f107 0210 	add.w	r2, r7, #16
 8102812:	f107 0314 	add.w	r3, r7, #20
 8102816:	4611      	mov	r1, r2
 8102818:	4618      	mov	r0, r3
 810281a:	f000 ff9d 	bl	8103758 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102820:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8102822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102824:	2b00      	cmp	r3, #0
 8102826:	d106      	bne.n	8102836 <HAL_InitTick+0x6a>
 8102828:	e001      	b.n	810282e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810282a:	2301      	movs	r3, #1
 810282c:	e02c      	b.n	8102888 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810282e:	f000 ff7d 	bl	810372c <HAL_RCC_GetPCLK1Freq>
 8102832:	63f8      	str	r0, [r7, #60]	; 0x3c
 8102834:	e004      	b.n	8102840 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8102836:	f000 ff79 	bl	810372c <HAL_RCC_GetPCLK1Freq>
 810283a:	4603      	mov	r3, r0
 810283c:	005b      	lsls	r3, r3, #1
 810283e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8102840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102842:	4a15      	ldr	r2, [pc, #84]	; (8102898 <HAL_InitTick+0xcc>)
 8102844:	fba2 2303 	umull	r2, r3, r2, r3
 8102848:	0c9b      	lsrs	r3, r3, #18
 810284a:	3b01      	subs	r3, #1
 810284c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 810284e:	4b13      	ldr	r3, [pc, #76]	; (810289c <HAL_InitTick+0xd0>)
 8102850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8102854:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8102856:	4b11      	ldr	r3, [pc, #68]	; (810289c <HAL_InitTick+0xd0>)
 8102858:	f240 32e7 	movw	r2, #999	; 0x3e7
 810285c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 810285e:	4a0f      	ldr	r2, [pc, #60]	; (810289c <HAL_InitTick+0xd0>)
 8102860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102862:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8102864:	4b0d      	ldr	r3, [pc, #52]	; (810289c <HAL_InitTick+0xd0>)
 8102866:	2200      	movs	r2, #0
 8102868:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810286a:	4b0c      	ldr	r3, [pc, #48]	; (810289c <HAL_InitTick+0xd0>)
 810286c:	2200      	movs	r2, #0
 810286e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8102870:	480a      	ldr	r0, [pc, #40]	; (810289c <HAL_InitTick+0xd0>)
 8102872:	f000 ffb3 	bl	81037dc <HAL_TIM_Base_Init>
 8102876:	4603      	mov	r3, r0
 8102878:	2b00      	cmp	r3, #0
 810287a:	d104      	bne.n	8102886 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 810287c:	4807      	ldr	r0, [pc, #28]	; (810289c <HAL_InitTick+0xd0>)
 810287e:	f001 f80f 	bl	81038a0 <HAL_TIM_Base_Start_IT>
 8102882:	4603      	mov	r3, r0
 8102884:	e000      	b.n	8102888 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8102886:	2301      	movs	r3, #1
}
 8102888:	4618      	mov	r0, r3
 810288a:	3740      	adds	r7, #64	; 0x40
 810288c:	46bd      	mov	sp, r7
 810288e:	bd80      	pop	{r7, pc}
 8102890:	10001800 	.word	0x10001800
 8102894:	58024400 	.word	0x58024400
 8102898:	431bde83 	.word	0x431bde83
 810289c:	1000182c 	.word	0x1000182c

081028a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81028a0:	b480      	push	{r7}
 81028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81028a4:	e7fe      	b.n	81028a4 <NMI_Handler+0x4>

081028a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81028a6:	b480      	push	{r7}
 81028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81028aa:	e7fe      	b.n	81028aa <HardFault_Handler+0x4>

081028ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81028ac:	b480      	push	{r7}
 81028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81028b0:	e7fe      	b.n	81028b0 <MemManage_Handler+0x4>

081028b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81028b2:	b480      	push	{r7}
 81028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81028b6:	e7fe      	b.n	81028b6 <BusFault_Handler+0x4>

081028b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81028b8:	b480      	push	{r7}
 81028ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81028bc:	e7fe      	b.n	81028bc <UsageFault_Handler+0x4>

081028be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81028be:	b480      	push	{r7}
 81028c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81028c2:	bf00      	nop
 81028c4:	46bd      	mov	sp, r7
 81028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028ca:	4770      	bx	lr

081028cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81028cc:	b580      	push	{r7, lr}
 81028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81028d0:	4802      	ldr	r0, [pc, #8]	; (81028dc <TIM2_IRQHandler+0x10>)
 81028d2:	f001 f81b 	bl	810390c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81028d6:	bf00      	nop
 81028d8:	bd80      	pop	{r7, pc}
 81028da:	bf00      	nop
 81028dc:	1000182c 	.word	0x1000182c

081028e0 <osBoot_boot>:
  * @param[in]  none
  *
  * @return none
********************************************************************************/
void osBoot_boot(void)
{
 81028e0:	b580      	push	{r7, lr}
 81028e2:	b08c      	sub	sp, #48	; 0x30
 81028e4:	af00      	add	r7, sp, #0
    BitWidthType  coreId,
                  programSectionsNumber;

    CosmOS_ProgramSectionConfigurationType * programSections;

    coreId = CILcore_getCoreId();
 81028e6:	f7ff fb12 	bl	8101f0e <CILcore_getCoreId>
 81028ea:	62b8      	str	r0, [r7, #40]	; 0x28

    programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 81028ec:	4a29      	ldr	r2, [pc, #164]	; (8102994 <osBoot_boot+0xb4>)
 81028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81028f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81028f4:	627b      	str	r3, [r7, #36]	; 0x24
    programSectionsNumber = bootSections[coreId].programSectionsNumber;
 81028f6:	4a27      	ldr	r2, [pc, #156]	; (8102994 <osBoot_boot+0xb4>)
 81028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81028fa:	00db      	lsls	r3, r3, #3
 81028fc:	4413      	add	r3, r2
 81028fe:	685b      	ldr	r3, [r3, #4]
 8102900:	623b      	str	r3, [r7, #32]


    for (BitWidthType i=0; i < programSectionsNumber; i++)
 8102902:	2300      	movs	r3, #0
 8102904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102906:	e03c      	b.n	8102982 <osBoot_boot+0xa2>
    {
        osBoot_bootSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 8102908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810290a:	4613      	mov	r3, r2
 810290c:	005b      	lsls	r3, r3, #1
 810290e:	4413      	add	r3, r2
 8102910:	009b      	lsls	r3, r3, #2
 8102912:	461a      	mov	r2, r3
 8102914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102916:	4413      	add	r3, r2
 8102918:	6818      	ldr	r0, [r3, #0]
 810291a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810291c:	4613      	mov	r3, r2
 810291e:	005b      	lsls	r3, r3, #1
 8102920:	4413      	add	r3, r2
 8102922:	009b      	lsls	r3, r3, #2
 8102924:	461a      	mov	r2, r3
 8102926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102928:	4413      	add	r3, r2
 810292a:	6859      	ldr	r1, [r3, #4]
 810292c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810292e:	4613      	mov	r3, r2
 8102930:	005b      	lsls	r3, r3, #1
 8102932:	4413      	add	r3, r2
 8102934:	009b      	lsls	r3, r3, #2
 8102936:	461a      	mov	r2, r3
 8102938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810293a:	4413      	add	r3, r2
 810293c:	689b      	ldr	r3, [r3, #8]
 810293e:	61f8      	str	r0, [r7, #28]
 8102940:	61b9      	str	r1, [r7, #24]
 8102942:	617b      	str	r3, [r7, #20]
    BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8102944:	69ba      	ldr	r2, [r7, #24]
 8102946:	69fb      	ldr	r3, [r7, #28]
 8102948:	1ad3      	subs	r3, r2, r3
 810294a:	613b      	str	r3, [r7, #16]
	  unsigned char *pDst = sectionStart;
 810294c:	69fb      	ldr	r3, [r7, #28]
 810294e:	60fb      	str	r3, [r7, #12]
	  unsigned char *pSrc = sectionStartInFlash;
 8102950:	697b      	ldr	r3, [r7, #20]
 8102952:	60bb      	str	r3, [r7, #8]
	  for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8102954:	2300      	movs	r3, #0
 8102956:	607b      	str	r3, [r7, #4]
 8102958:	e00a      	b.n	8102970 <osBoot_boot+0x90>
	  	  *pDst++=*pSrc++;
 810295a:	68ba      	ldr	r2, [r7, #8]
 810295c:	1c53      	adds	r3, r2, #1
 810295e:	60bb      	str	r3, [r7, #8]
 8102960:	68fb      	ldr	r3, [r7, #12]
 8102962:	1c59      	adds	r1, r3, #1
 8102964:	60f9      	str	r1, [r7, #12]
 8102966:	7812      	ldrb	r2, [r2, #0]
 8102968:	701a      	strb	r2, [r3, #0]
	  for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 810296a:	687b      	ldr	r3, [r7, #4]
 810296c:	3301      	adds	r3, #1
 810296e:	607b      	str	r3, [r7, #4]
 8102970:	693b      	ldr	r3, [r7, #16]
 8102972:	009b      	lsls	r3, r3, #2
 8102974:	687a      	ldr	r2, [r7, #4]
 8102976:	429a      	cmp	r2, r3
 8102978:	d3ef      	bcc.n	810295a <osBoot_boot+0x7a>
}
 810297a:	bf00      	nop
    for (BitWidthType i=0; i < programSectionsNumber; i++)
 810297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810297e:	3301      	adds	r3, #1
 8102980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102984:	6a3b      	ldr	r3, [r7, #32]
 8102986:	429a      	cmp	r2, r3
 8102988:	d3be      	bcc.n	8102908 <osBoot_boot+0x28>
    }
};
 810298a:	bf00      	nop
 810298c:	bf00      	nop
 810298e:	3730      	adds	r7, #48	; 0x30
 8102990:	46bd      	mov	sp, r7
 8102992:	bd80      	pop	{r7, pc}
 8102994:	08103dec 	.word	0x08103dec

08102998 <Idle_CM7>:
  * *************************************************************************//**
  * @addtogroup General_schedulableCfg_h General
  * @ingroup Apis_schedulableCfg_h
  * @{
********************************************************************************/
__WEAK void Idle_CM7(void){};
 8102998:	b480      	push	{r7}
 810299a:	af00      	add	r7, sp, #0
 810299c:	bf00      	nop
 810299e:	46bd      	mov	sp, r7
 81029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a4:	4770      	bx	lr

081029a6 <Idle_CM4>:
__WEAK void sysJobs_CM7(void){};
__WEAK void Task_0_Core_0_Handler(void){};
__WEAK void Idle_CM4(void){};
 81029a6:	b480      	push	{r7}
 81029a8:	af00      	add	r7, sp, #0
 81029aa:	bf00      	nop
 81029ac:	46bd      	mov	sp, r7
 81029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b2:	4770      	bx	lr

081029b4 <IdleThread_CM7>:
__WEAK void sysJobs_CM4(void){};
__WEAK void Task_0_Core_1_Handler(void){};
__WEAK void IdleThread_CM7(void){};
 81029b4:	b480      	push	{r7}
 81029b6:	af00      	add	r7, sp, #0
 81029b8:	bf00      	nop
 81029ba:	46bd      	mov	sp, r7
 81029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029c0:	4770      	bx	lr

081029c2 <IdleThread_CM4>:
__WEAK void IdleThread_CM4(void){};
 81029c2:	b480      	push	{r7}
 81029c4:	af00      	add	r7, sp, #0
 81029c6:	bf00      	nop
 81029c8:	46bd      	mov	sp, r7
 81029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029ce:	4770      	bx	lr

081029d0 <wrapped_Idle_CM7>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/

void wrapped_Idle_CM7(void)
{
 81029d0:	b580      	push	{r7, lr}
 81029d2:	af00      	add	r7, sp, #0
    Idle_CM7();
 81029d4:	f7ff ffe0 	bl	8102998 <Idle_CM7>
    for(;;);
 81029d8:	e7fe      	b.n	81029d8 <wrapped_Idle_CM7+0x8>

081029da <wrapped_sysJobs_CM7>:
};
void wrapped_sysJobs_CM7(void)
{
 81029da:	b580      	push	{r7, lr}
 81029dc:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 81029de:	200a      	movs	r0, #10
 81029e0:	f7ff f9f6 	bl	8101dd0 <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 81029e4:	2009      	movs	r0, #9
 81029e6:	f7ff f9f3 	bl	8101dd0 <sysCalls_os>
    for(;;);
 81029ea:	e7fe      	b.n	81029ea <wrapped_sysJobs_CM7+0x10>

081029ec <wrapped_Task_0_Core_0_Handler>:
};
void wrapped_Task_0_Core_0_Handler(void)
{
 81029ec:	b580      	push	{r7, lr}
 81029ee:	af00      	add	r7, sp, #0
    Task_0_Core_0_Handler();
 81029f0:	f000 f874 	bl	8102adc <Task_0_Core_0_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 81029f4:	2009      	movs	r0, #9
 81029f6:	f7ff f9eb 	bl	8101dd0 <sysCalls_os>
    for(;;);
 81029fa:	e7fe      	b.n	81029fa <wrapped_Task_0_Core_0_Handler+0xe>

081029fc <wrapped_Idle_CM4>:
};
void wrapped_Idle_CM4(void)
{
 81029fc:	b580      	push	{r7, lr}
 81029fe:	af00      	add	r7, sp, #0
    Idle_CM4();
 8102a00:	f7ff ffd1 	bl	81029a6 <Idle_CM4>
    for(;;);
 8102a04:	e7fe      	b.n	8102a04 <wrapped_Idle_CM4+0x8>

08102a06 <wrapped_sysJobs_CM4>:
};
void wrapped_sysJobs_CM4(void)
{
 8102a06:	b580      	push	{r7, lr}
 8102a08:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 8102a0a:	200a      	movs	r0, #10
 8102a0c:	f7ff f9e0 	bl	8101dd0 <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 8102a10:	2009      	movs	r0, #9
 8102a12:	f7ff f9dd 	bl	8101dd0 <sysCalls_os>
    for(;;);
 8102a16:	e7fe      	b.n	8102a16 <wrapped_sysJobs_CM4+0x10>

08102a18 <wrapped_Task_0_Core_1_Handler>:
};
void wrapped_Task_0_Core_1_Handler(void)
{
 8102a18:	b580      	push	{r7, lr}
 8102a1a:	af00      	add	r7, sp, #0
    Task_0_Core_1_Handler();
 8102a1c:	f000 f844 	bl	8102aa8 <Task_0_Core_1_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 8102a20:	2009      	movs	r0, #9
 8102a22:	f7ff f9d5 	bl	8101dd0 <sysCalls_os>
    for(;;);
 8102a26:	e7fe      	b.n	8102a26 <wrapped_Task_0_Core_1_Handler+0xe>

08102a28 <wrapped_IdleThread_CM7>:
};
void wrapped_IdleThread_CM7(void)
{
 8102a28:	b580      	push	{r7, lr}
 8102a2a:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM7();
 8102a2c:	f7ff ffc2 	bl	81029b4 <IdleThread_CM7>
 8102a30:	e7fc      	b.n	8102a2c <wrapped_IdleThread_CM7+0x4>

08102a32 <wrapped_IdleThread_CM4>:
    }
};
void wrapped_IdleThread_CM4(void)
{
 8102a32:	b580      	push	{r7, lr}
 8102a34:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM4();
 8102a36:	f7ff ffc4 	bl	81029c2 <IdleThread_CM4>
 8102a3a:	e7fc      	b.n	8102a36 <wrapped_IdleThread_CM4+0x4>

08102a3c <PendSV_Handler>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/
__NAKED void PendSV_Handler(void)
{
    __asm volatile ("MRS R0,PSP");
 8102a3c:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("ISB");
 8102a40:	f3bf 8f6f 	isb	sy

    __asm volatile ("TST R14, #16");
 8102a44:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 8102a48:	bf08      	it	eq
    __asm volatile ("VSTMDBEQ R0!,{S16-S31}"); /* If fp is true save floating point registers on stack */
 8102a4a:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    __asm volatile ("STMDB R0!,{R4-R8,R10,R11,R14}");
 8102a4e:	e920 4df0 	stmdb	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}

    __asm volatile ("BL scheduler_scheduleNextInstance");
 8102a52:	f7fe fe89 	bl	8101768 <scheduler_scheduleNextInstance>
    __asm volatile ("ISB");
 8102a56:	f3bf 8f6f 	isb	sy

    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8102a5a:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
    __asm volatile ("TST R14, #16");
 8102a5e:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 8102a62:	bf08      	it	eq
    __asm volatile ("VLDMIAEQ R0!,{S16-S31}"); /* If fp is true restore floating point registers on stack */
 8102a64:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    __asm volatile ("MSR PSP,R0");
 8102a68:	f380 8809 	msr	PSP, r0
    __asm volatile ("ISB");
 8102a6c:	f3bf 8f6f 	isb	sy

    __asm volatile ("BX R14");
 8102a70:	4770      	bx	lr
}
 8102a72:	bf00      	nop

08102a74 <SysTick_Handler>:

void SysTick_Handler(){
 8102a74:	b480      	push	{r7}
 8102a76:	af00      	add	r7, sp, #0
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8102a78:	4b05      	ldr	r3, [pc, #20]	; (8102a90 <SysTick_Handler+0x1c>)
 8102a7a:	685b      	ldr	r3, [r3, #4]
 8102a7c:	4a04      	ldr	r2, [pc, #16]	; (8102a90 <SysTick_Handler+0x1c>)
 8102a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102a82:	6053      	str	r3, [r2, #4]
}
 8102a84:	bf00      	nop
 8102a86:	46bd      	mov	sp, r7
 8102a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a8c:	4770      	bx	lr
 8102a8e:	bf00      	nop
 8102a90:	e000ed00 	.word	0xe000ed00

08102a94 <SVC_Handler>:

__NAKED void SVC_Handler( void )
{
    __asm volatile ("TST LR, #4");
 8102a94:	f01e 0f04 	tst.w	lr, #4
    __asm volatile ("ITE EQ");
 8102a98:	bf0c      	ite	eq
    __asm volatile ("MRSEQ r0, MSP");
 8102a9a:	f3ef 8008 	mrseq	r0, MSP
    __asm volatile ("MRSNE r0, PSP");
 8102a9e:	f3ef 8009 	mrsne	r0, PSP
    __asm volatile ( "B CILsysCalls_dispatcher");
 8102aa2:	f7ff bc7c 	b.w	810239e <CILsysCalls_dispatcher>
}
 8102aa6:	bf00      	nop

08102aa8 <Task_0_Core_1_Handler>:
** Program ID macro = PROGRAM_1_CORE_1_ID
** WCET macro = TASK_0_PROGRAM_1_CORE_1_WCET
** Period of task in ticks = 50
********************************************************************************/
void Task_0_Core_1_Handler(void)
{
 8102aa8:	b580      	push	{r7, lr}
 8102aaa:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_1_Handler
********************************************************************************/
if (counter_cm4 > 100)
 8102aac:	4b09      	ldr	r3, [pc, #36]	; (8102ad4 <Task_0_Core_1_Handler+0x2c>)
 8102aae:	681b      	ldr	r3, [r3, #0]
 8102ab0:	2b64      	cmp	r3, #100	; 0x64
 8102ab2:	dd08      	ble.n	8102ac6 <Task_0_Core_1_Handler+0x1e>
{
    counter_cm4 = 0;
 8102ab4:	4b07      	ldr	r3, [pc, #28]	; (8102ad4 <Task_0_Core_1_Handler+0x2c>)
 8102ab6:	2200      	movs	r2, #0
 8102ab8:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOB, GPIO_PIN_0); //GREEN LED
 8102aba:	2201      	movs	r2, #1
 8102abc:	4906      	ldr	r1, [pc, #24]	; (8102ad8 <Task_0_Core_1_Handler+0x30>)
 8102abe:	2006      	movs	r0, #6
 8102ac0:	f7ff f991 	bl	8101de6 <sysCalls_readWrite>
}
/********************************************************************************
** stop_name =Task_0_Core_1_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8102ac4:	e004      	b.n	8102ad0 <Task_0_Core_1_Handler+0x28>
    counter_cm4++;
 8102ac6:	4b03      	ldr	r3, [pc, #12]	; (8102ad4 <Task_0_Core_1_Handler+0x2c>)
 8102ac8:	681b      	ldr	r3, [r3, #0]
 8102aca:	3301      	adds	r3, #1
 8102acc:	4a01      	ldr	r2, [pc, #4]	; (8102ad4 <Task_0_Core_1_Handler+0x2c>)
 8102ace:	6013      	str	r3, [r2, #0]
};
 8102ad0:	bf00      	nop
 8102ad2:	bd80      	pop	{r7, pc}
 8102ad4:	10001000 	.word	0x10001000
 8102ad8:	58020400 	.word	0x58020400

08102adc <Task_0_Core_0_Handler>:
** Program ID macro = PROGRAM_1_CORE_0_ID
** WCET macro = TASK_0_PROGRAM_1_CORE_0_WCET
** Period of task in ticks = 50
********************************************************************************/
void Task_0_Core_0_Handler(void)
{
 8102adc:	b580      	push	{r7, lr}
 8102ade:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_0_Handler
********************************************************************************/
if (counter > 100)
 8102ae0:	4b0a      	ldr	r3, [pc, #40]	; (8102b0c <Task_0_Core_0_Handler+0x30>)
 8102ae2:	681b      	ldr	r3, [r3, #0]
 8102ae4:	2b64      	cmp	r3, #100	; 0x64
 8102ae6:	dd08      	ble.n	8102afa <Task_0_Core_0_Handler+0x1e>
{
    counter = 0;
 8102ae8:	4b08      	ldr	r3, [pc, #32]	; (8102b0c <Task_0_Core_0_Handler+0x30>)
 8102aea:	2200      	movs	r2, #0
 8102aec:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOE, GPIO_PIN_1); //ORANGE LED
 8102aee:	2202      	movs	r2, #2
 8102af0:	4907      	ldr	r1, [pc, #28]	; (8102b10 <Task_0_Core_0_Handler+0x34>)
 8102af2:	2006      	movs	r0, #6
 8102af4:	f7ff f977 	bl	8101de6 <sysCalls_readWrite>
 8102af8:	e004      	b.n	8102b04 <Task_0_Core_0_Handler+0x28>
}
else
{
    counter++;
 8102afa:	4b04      	ldr	r3, [pc, #16]	; (8102b0c <Task_0_Core_0_Handler+0x30>)
 8102afc:	681b      	ldr	r3, [r3, #0]
 8102afe:	3301      	adds	r3, #1
 8102b00:	4a02      	ldr	r2, [pc, #8]	; (8102b0c <Task_0_Core_0_Handler+0x30>)
 8102b02:	6013      	str	r3, [r2, #0]
}
__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 8102b04:	ee20 0a20 	vmul.f32	s0, s0, s1
/********************************************************************************
** stop_name =Task_0_Core_0_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8102b08:	bf00      	nop
 8102b0a:	bd80      	pop	{r7, pc}
 8102b0c:	20001000 	.word	0x20001000
 8102b10:	58021000 	.word	0x58021000

08102b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102b14:	b580      	push	{r7, lr}
 8102b16:	b082      	sub	sp, #8
 8102b18:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102b1a:	4b28      	ldr	r3, [pc, #160]	; (8102bbc <HAL_Init+0xa8>)
 8102b1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102b20:	4a26      	ldr	r2, [pc, #152]	; (8102bbc <HAL_Init+0xa8>)
 8102b22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8102b26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8102b2a:	4b24      	ldr	r3, [pc, #144]	; (8102bbc <HAL_Init+0xa8>)
 8102b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8102b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102b34:	603b      	str	r3, [r7, #0]
 8102b36:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102b38:	4b21      	ldr	r3, [pc, #132]	; (8102bc0 <HAL_Init+0xac>)
 8102b3a:	681b      	ldr	r3, [r3, #0]
 8102b3c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8102b40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8102b44:	4a1e      	ldr	r2, [pc, #120]	; (8102bc0 <HAL_Init+0xac>)
 8102b46:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8102b4a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102b4c:	4b1c      	ldr	r3, [pc, #112]	; (8102bc0 <HAL_Init+0xac>)
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	4a1b      	ldr	r2, [pc, #108]	; (8102bc0 <HAL_Init+0xac>)
 8102b52:	f043 0301 	orr.w	r3, r3, #1
 8102b56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102b58:	2003      	movs	r0, #3
 8102b5a:	f000 f8fa 	bl	8102d52 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102b5e:	f000 fc39 	bl	81033d4 <HAL_RCC_GetSysClockFreq>
 8102b62:	4602      	mov	r2, r0
 8102b64:	4b15      	ldr	r3, [pc, #84]	; (8102bbc <HAL_Init+0xa8>)
 8102b66:	699b      	ldr	r3, [r3, #24]
 8102b68:	0a1b      	lsrs	r3, r3, #8
 8102b6a:	f003 030f 	and.w	r3, r3, #15
 8102b6e:	4915      	ldr	r1, [pc, #84]	; (8102bc4 <HAL_Init+0xb0>)
 8102b70:	5ccb      	ldrb	r3, [r1, r3]
 8102b72:	f003 031f 	and.w	r3, r3, #31
 8102b76:	fa22 f303 	lsr.w	r3, r2, r3
 8102b7a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102b7c:	4b0f      	ldr	r3, [pc, #60]	; (8102bbc <HAL_Init+0xa8>)
 8102b7e:	699b      	ldr	r3, [r3, #24]
 8102b80:	f003 030f 	and.w	r3, r3, #15
 8102b84:	4a0f      	ldr	r2, [pc, #60]	; (8102bc4 <HAL_Init+0xb0>)
 8102b86:	5cd3      	ldrb	r3, [r2, r3]
 8102b88:	f003 031f 	and.w	r3, r3, #31
 8102b8c:	687a      	ldr	r2, [r7, #4]
 8102b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8102b92:	4a0d      	ldr	r2, [pc, #52]	; (8102bc8 <HAL_Init+0xb4>)
 8102b94:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102b96:	4b0c      	ldr	r3, [pc, #48]	; (8102bc8 <HAL_Init+0xb4>)
 8102b98:	681b      	ldr	r3, [r3, #0]
 8102b9a:	4a0c      	ldr	r2, [pc, #48]	; (8102bcc <HAL_Init+0xb8>)
 8102b9c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102b9e:	2000      	movs	r0, #0
 8102ba0:	f7ff fe14 	bl	81027cc <HAL_InitTick>
 8102ba4:	4603      	mov	r3, r0
 8102ba6:	2b00      	cmp	r3, #0
 8102ba8:	d001      	beq.n	8102bae <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102baa:	2301      	movs	r3, #1
 8102bac:	e002      	b.n	8102bb4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102bae:	f7ff fdf3 	bl	8102798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102bb2:	2300      	movs	r3, #0
}
 8102bb4:	4618      	mov	r0, r3
 8102bb6:	3708      	adds	r7, #8
 8102bb8:	46bd      	mov	sp, r7
 8102bba:	bd80      	pop	{r7, pc}
 8102bbc:	58024400 	.word	0x58024400
 8102bc0:	40024400 	.word	0x40024400
 8102bc4:	08103e7c 	.word	0x08103e7c
 8102bc8:	1000180c 	.word	0x1000180c
 8102bcc:	10001808 	.word	0x10001808

08102bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102bd0:	b480      	push	{r7}
 8102bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102bd4:	4b06      	ldr	r3, [pc, #24]	; (8102bf0 <HAL_IncTick+0x20>)
 8102bd6:	781b      	ldrb	r3, [r3, #0]
 8102bd8:	461a      	mov	r2, r3
 8102bda:	4b06      	ldr	r3, [pc, #24]	; (8102bf4 <HAL_IncTick+0x24>)
 8102bdc:	681b      	ldr	r3, [r3, #0]
 8102bde:	4413      	add	r3, r2
 8102be0:	4a04      	ldr	r2, [pc, #16]	; (8102bf4 <HAL_IncTick+0x24>)
 8102be2:	6013      	str	r3, [r2, #0]
}
 8102be4:	bf00      	nop
 8102be6:	46bd      	mov	sp, r7
 8102be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bec:	4770      	bx	lr
 8102bee:	bf00      	nop
 8102bf0:	10001804 	.word	0x10001804
 8102bf4:	10001878 	.word	0x10001878

08102bf8 <__NVIC_SetPriorityGrouping>:
{
 8102bf8:	b480      	push	{r7}
 8102bfa:	b085      	sub	sp, #20
 8102bfc:	af00      	add	r7, sp, #0
 8102bfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102c00:	687b      	ldr	r3, [r7, #4]
 8102c02:	f003 0307 	and.w	r3, r3, #7
 8102c06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102c08:	4b0c      	ldr	r3, [pc, #48]	; (8102c3c <__NVIC_SetPriorityGrouping+0x44>)
 8102c0a:	68db      	ldr	r3, [r3, #12]
 8102c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102c0e:	68ba      	ldr	r2, [r7, #8]
 8102c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8102c14:	4013      	ands	r3, r2
 8102c16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102c18:	68fb      	ldr	r3, [r7, #12]
 8102c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102c1c:	68bb      	ldr	r3, [r7, #8]
 8102c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8102c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102c2a:	4a04      	ldr	r2, [pc, #16]	; (8102c3c <__NVIC_SetPriorityGrouping+0x44>)
 8102c2c:	68bb      	ldr	r3, [r7, #8]
 8102c2e:	60d3      	str	r3, [r2, #12]
}
 8102c30:	bf00      	nop
 8102c32:	3714      	adds	r7, #20
 8102c34:	46bd      	mov	sp, r7
 8102c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c3a:	4770      	bx	lr
 8102c3c:	e000ed00 	.word	0xe000ed00

08102c40 <__NVIC_GetPriorityGrouping>:
{
 8102c40:	b480      	push	{r7}
 8102c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102c44:	4b04      	ldr	r3, [pc, #16]	; (8102c58 <__NVIC_GetPriorityGrouping+0x18>)
 8102c46:	68db      	ldr	r3, [r3, #12]
 8102c48:	0a1b      	lsrs	r3, r3, #8
 8102c4a:	f003 0307 	and.w	r3, r3, #7
}
 8102c4e:	4618      	mov	r0, r3
 8102c50:	46bd      	mov	sp, r7
 8102c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c56:	4770      	bx	lr
 8102c58:	e000ed00 	.word	0xe000ed00

08102c5c <__NVIC_EnableIRQ>:
{
 8102c5c:	b480      	push	{r7}
 8102c5e:	b083      	sub	sp, #12
 8102c60:	af00      	add	r7, sp, #0
 8102c62:	4603      	mov	r3, r0
 8102c64:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102c6a:	2b00      	cmp	r3, #0
 8102c6c:	db0b      	blt.n	8102c86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102c6e:	88fb      	ldrh	r3, [r7, #6]
 8102c70:	f003 021f 	and.w	r2, r3, #31
 8102c74:	4907      	ldr	r1, [pc, #28]	; (8102c94 <__NVIC_EnableIRQ+0x38>)
 8102c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102c7a:	095b      	lsrs	r3, r3, #5
 8102c7c:	2001      	movs	r0, #1
 8102c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8102c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8102c86:	bf00      	nop
 8102c88:	370c      	adds	r7, #12
 8102c8a:	46bd      	mov	sp, r7
 8102c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c90:	4770      	bx	lr
 8102c92:	bf00      	nop
 8102c94:	e000e100 	.word	0xe000e100

08102c98 <__NVIC_SetPriority>:
{
 8102c98:	b480      	push	{r7}
 8102c9a:	b083      	sub	sp, #12
 8102c9c:	af00      	add	r7, sp, #0
 8102c9e:	4603      	mov	r3, r0
 8102ca0:	6039      	str	r1, [r7, #0]
 8102ca2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102ca4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	db0a      	blt.n	8102cc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102cac:	683b      	ldr	r3, [r7, #0]
 8102cae:	b2da      	uxtb	r2, r3
 8102cb0:	490c      	ldr	r1, [pc, #48]	; (8102ce4 <__NVIC_SetPriority+0x4c>)
 8102cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102cb6:	0112      	lsls	r2, r2, #4
 8102cb8:	b2d2      	uxtb	r2, r2
 8102cba:	440b      	add	r3, r1
 8102cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8102cc0:	e00a      	b.n	8102cd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102cc2:	683b      	ldr	r3, [r7, #0]
 8102cc4:	b2da      	uxtb	r2, r3
 8102cc6:	4908      	ldr	r1, [pc, #32]	; (8102ce8 <__NVIC_SetPriority+0x50>)
 8102cc8:	88fb      	ldrh	r3, [r7, #6]
 8102cca:	f003 030f 	and.w	r3, r3, #15
 8102cce:	3b04      	subs	r3, #4
 8102cd0:	0112      	lsls	r2, r2, #4
 8102cd2:	b2d2      	uxtb	r2, r2
 8102cd4:	440b      	add	r3, r1
 8102cd6:	761a      	strb	r2, [r3, #24]
}
 8102cd8:	bf00      	nop
 8102cda:	370c      	adds	r7, #12
 8102cdc:	46bd      	mov	sp, r7
 8102cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ce2:	4770      	bx	lr
 8102ce4:	e000e100 	.word	0xe000e100
 8102ce8:	e000ed00 	.word	0xe000ed00

08102cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102cec:	b480      	push	{r7}
 8102cee:	b089      	sub	sp, #36	; 0x24
 8102cf0:	af00      	add	r7, sp, #0
 8102cf2:	60f8      	str	r0, [r7, #12]
 8102cf4:	60b9      	str	r1, [r7, #8]
 8102cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102cf8:	68fb      	ldr	r3, [r7, #12]
 8102cfa:	f003 0307 	and.w	r3, r3, #7
 8102cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102d00:	69fb      	ldr	r3, [r7, #28]
 8102d02:	f1c3 0307 	rsb	r3, r3, #7
 8102d06:	2b04      	cmp	r3, #4
 8102d08:	bf28      	it	cs
 8102d0a:	2304      	movcs	r3, #4
 8102d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102d0e:	69fb      	ldr	r3, [r7, #28]
 8102d10:	3304      	adds	r3, #4
 8102d12:	2b06      	cmp	r3, #6
 8102d14:	d902      	bls.n	8102d1c <NVIC_EncodePriority+0x30>
 8102d16:	69fb      	ldr	r3, [r7, #28]
 8102d18:	3b03      	subs	r3, #3
 8102d1a:	e000      	b.n	8102d1e <NVIC_EncodePriority+0x32>
 8102d1c:	2300      	movs	r3, #0
 8102d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102d20:	f04f 32ff 	mov.w	r2, #4294967295
 8102d24:	69bb      	ldr	r3, [r7, #24]
 8102d26:	fa02 f303 	lsl.w	r3, r2, r3
 8102d2a:	43da      	mvns	r2, r3
 8102d2c:	68bb      	ldr	r3, [r7, #8]
 8102d2e:	401a      	ands	r2, r3
 8102d30:	697b      	ldr	r3, [r7, #20]
 8102d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102d34:	f04f 31ff 	mov.w	r1, #4294967295
 8102d38:	697b      	ldr	r3, [r7, #20]
 8102d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8102d3e:	43d9      	mvns	r1, r3
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102d44:	4313      	orrs	r3, r2
         );
}
 8102d46:	4618      	mov	r0, r3
 8102d48:	3724      	adds	r7, #36	; 0x24
 8102d4a:	46bd      	mov	sp, r7
 8102d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d50:	4770      	bx	lr

08102d52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102d52:	b580      	push	{r7, lr}
 8102d54:	b082      	sub	sp, #8
 8102d56:	af00      	add	r7, sp, #0
 8102d58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102d5a:	6878      	ldr	r0, [r7, #4]
 8102d5c:	f7ff ff4c 	bl	8102bf8 <__NVIC_SetPriorityGrouping>
}
 8102d60:	bf00      	nop
 8102d62:	3708      	adds	r7, #8
 8102d64:	46bd      	mov	sp, r7
 8102d66:	bd80      	pop	{r7, pc}

08102d68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102d68:	b580      	push	{r7, lr}
 8102d6a:	b086      	sub	sp, #24
 8102d6c:	af00      	add	r7, sp, #0
 8102d6e:	4603      	mov	r3, r0
 8102d70:	60b9      	str	r1, [r7, #8]
 8102d72:	607a      	str	r2, [r7, #4]
 8102d74:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102d76:	f7ff ff63 	bl	8102c40 <__NVIC_GetPriorityGrouping>
 8102d7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102d7c:	687a      	ldr	r2, [r7, #4]
 8102d7e:	68b9      	ldr	r1, [r7, #8]
 8102d80:	6978      	ldr	r0, [r7, #20]
 8102d82:	f7ff ffb3 	bl	8102cec <NVIC_EncodePriority>
 8102d86:	4602      	mov	r2, r0
 8102d88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102d8c:	4611      	mov	r1, r2
 8102d8e:	4618      	mov	r0, r3
 8102d90:	f7ff ff82 	bl	8102c98 <__NVIC_SetPriority>
}
 8102d94:	bf00      	nop
 8102d96:	3718      	adds	r7, #24
 8102d98:	46bd      	mov	sp, r7
 8102d9a:	bd80      	pop	{r7, pc}

08102d9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102d9c:	b580      	push	{r7, lr}
 8102d9e:	b082      	sub	sp, #8
 8102da0:	af00      	add	r7, sp, #0
 8102da2:	4603      	mov	r3, r0
 8102da4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102da6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102daa:	4618      	mov	r0, r3
 8102dac:	f7ff ff56 	bl	8102c5c <__NVIC_EnableIRQ>
}
 8102db0:	bf00      	nop
 8102db2:	3708      	adds	r7, #8
 8102db4:	46bd      	mov	sp, r7
 8102db6:	bd80      	pop	{r7, pc}

08102db8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8102db8:	b480      	push	{r7}
 8102dba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8102dbc:	f3bf 8f5f 	dmb	sy
}
 8102dc0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8102dc2:	4b07      	ldr	r3, [pc, #28]	; (8102de0 <HAL_MPU_Disable+0x28>)
 8102dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102dc6:	4a06      	ldr	r2, [pc, #24]	; (8102de0 <HAL_MPU_Disable+0x28>)
 8102dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8102dcc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8102dce:	4b05      	ldr	r3, [pc, #20]	; (8102de4 <HAL_MPU_Disable+0x2c>)
 8102dd0:	2200      	movs	r2, #0
 8102dd2:	605a      	str	r2, [r3, #4]
}
 8102dd4:	bf00      	nop
 8102dd6:	46bd      	mov	sp, r7
 8102dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ddc:	4770      	bx	lr
 8102dde:	bf00      	nop
 8102de0:	e000ed00 	.word	0xe000ed00
 8102de4:	e000ed90 	.word	0xe000ed90

08102de8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8102de8:	b480      	push	{r7}
 8102dea:	b083      	sub	sp, #12
 8102dec:	af00      	add	r7, sp, #0
 8102dee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8102df0:	4a0b      	ldr	r2, [pc, #44]	; (8102e20 <HAL_MPU_Enable+0x38>)
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	f043 0301 	orr.w	r3, r3, #1
 8102df8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8102dfa:	4b0a      	ldr	r3, [pc, #40]	; (8102e24 <HAL_MPU_Enable+0x3c>)
 8102dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102dfe:	4a09      	ldr	r2, [pc, #36]	; (8102e24 <HAL_MPU_Enable+0x3c>)
 8102e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8102e04:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8102e06:	f3bf 8f4f 	dsb	sy
}
 8102e0a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8102e0c:	f3bf 8f6f 	isb	sy
}
 8102e10:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8102e12:	bf00      	nop
 8102e14:	370c      	adds	r7, #12
 8102e16:	46bd      	mov	sp, r7
 8102e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e1c:	4770      	bx	lr
 8102e1e:	bf00      	nop
 8102e20:	e000ed90 	.word	0xe000ed90
 8102e24:	e000ed00 	.word	0xe000ed00

08102e28 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8102e28:	b480      	push	{r7}
 8102e2a:	b083      	sub	sp, #12
 8102e2c:	af00      	add	r7, sp, #0
 8102e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8102e30:	687b      	ldr	r3, [r7, #4]
 8102e32:	785a      	ldrb	r2, [r3, #1]
 8102e34:	4b1d      	ldr	r3, [pc, #116]	; (8102eac <HAL_MPU_ConfigRegion+0x84>)
 8102e36:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8102e38:	687b      	ldr	r3, [r7, #4]
 8102e3a:	781b      	ldrb	r3, [r3, #0]
 8102e3c:	2b00      	cmp	r3, #0
 8102e3e:	d029      	beq.n	8102e94 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8102e40:	4a1a      	ldr	r2, [pc, #104]	; (8102eac <HAL_MPU_ConfigRegion+0x84>)
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	685b      	ldr	r3, [r3, #4]
 8102e46:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8102e48:	687b      	ldr	r3, [r7, #4]
 8102e4a:	7b1b      	ldrb	r3, [r3, #12]
 8102e4c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8102e4e:	687b      	ldr	r3, [r7, #4]
 8102e50:	7adb      	ldrb	r3, [r3, #11]
 8102e52:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8102e54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8102e56:	687b      	ldr	r3, [r7, #4]
 8102e58:	7a9b      	ldrb	r3, [r3, #10]
 8102e5a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8102e5c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	7b5b      	ldrb	r3, [r3, #13]
 8102e62:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8102e64:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	7b9b      	ldrb	r3, [r3, #14]
 8102e6a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8102e6c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8102e6e:	687b      	ldr	r3, [r7, #4]
 8102e70:	7bdb      	ldrb	r3, [r3, #15]
 8102e72:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8102e74:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8102e76:	687b      	ldr	r3, [r7, #4]
 8102e78:	7a5b      	ldrb	r3, [r3, #9]
 8102e7a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8102e7c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8102e7e:	687b      	ldr	r3, [r7, #4]
 8102e80:	7a1b      	ldrb	r3, [r3, #8]
 8102e82:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8102e84:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8102e86:	687a      	ldr	r2, [r7, #4]
 8102e88:	7812      	ldrb	r2, [r2, #0]
 8102e8a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8102e8c:	4a07      	ldr	r2, [pc, #28]	; (8102eac <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8102e8e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8102e90:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8102e92:	e005      	b.n	8102ea0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8102e94:	4b05      	ldr	r3, [pc, #20]	; (8102eac <HAL_MPU_ConfigRegion+0x84>)
 8102e96:	2200      	movs	r2, #0
 8102e98:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8102e9a:	4b04      	ldr	r3, [pc, #16]	; (8102eac <HAL_MPU_ConfigRegion+0x84>)
 8102e9c:	2200      	movs	r2, #0
 8102e9e:	611a      	str	r2, [r3, #16]
}
 8102ea0:	bf00      	nop
 8102ea2:	370c      	adds	r7, #12
 8102ea4:	46bd      	mov	sp, r7
 8102ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102eaa:	4770      	bx	lr
 8102eac:	e000ed90 	.word	0xe000ed90

08102eb0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102eb0:	b480      	push	{r7}
 8102eb2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102eb4:	4b07      	ldr	r3, [pc, #28]	; (8102ed4 <HAL_GetCurrentCPUID+0x24>)
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	091b      	lsrs	r3, r3, #4
 8102eba:	f003 030f 	and.w	r3, r3, #15
 8102ebe:	2b07      	cmp	r3, #7
 8102ec0:	d101      	bne.n	8102ec6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102ec2:	2303      	movs	r3, #3
 8102ec4:	e000      	b.n	8102ec8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102ec6:	2301      	movs	r3, #1
  }
}
 8102ec8:	4618      	mov	r0, r3
 8102eca:	46bd      	mov	sp, r7
 8102ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ed0:	4770      	bx	lr
 8102ed2:	bf00      	nop
 8102ed4:	e000ed00 	.word	0xe000ed00

08102ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102ed8:	b480      	push	{r7}
 8102eda:	b089      	sub	sp, #36	; 0x24
 8102edc:	af00      	add	r7, sp, #0
 8102ede:	6078      	str	r0, [r7, #4]
 8102ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102ee2:	2300      	movs	r3, #0
 8102ee4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102ee6:	4b89      	ldr	r3, [pc, #548]	; (810310c <HAL_GPIO_Init+0x234>)
 8102ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102eea:	e194      	b.n	8103216 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102eec:	683b      	ldr	r3, [r7, #0]
 8102eee:	681a      	ldr	r2, [r3, #0]
 8102ef0:	2101      	movs	r1, #1
 8102ef2:	69fb      	ldr	r3, [r7, #28]
 8102ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8102ef8:	4013      	ands	r3, r2
 8102efa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102efc:	693b      	ldr	r3, [r7, #16]
 8102efe:	2b00      	cmp	r3, #0
 8102f00:	f000 8186 	beq.w	8103210 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102f04:	683b      	ldr	r3, [r7, #0]
 8102f06:	685b      	ldr	r3, [r3, #4]
 8102f08:	2b01      	cmp	r3, #1
 8102f0a:	d00b      	beq.n	8102f24 <HAL_GPIO_Init+0x4c>
 8102f0c:	683b      	ldr	r3, [r7, #0]
 8102f0e:	685b      	ldr	r3, [r3, #4]
 8102f10:	2b02      	cmp	r3, #2
 8102f12:	d007      	beq.n	8102f24 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102f14:	683b      	ldr	r3, [r7, #0]
 8102f16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8102f18:	2b11      	cmp	r3, #17
 8102f1a:	d003      	beq.n	8102f24 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102f1c:	683b      	ldr	r3, [r7, #0]
 8102f1e:	685b      	ldr	r3, [r3, #4]
 8102f20:	2b12      	cmp	r3, #18
 8102f22:	d130      	bne.n	8102f86 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102f24:	687b      	ldr	r3, [r7, #4]
 8102f26:	689b      	ldr	r3, [r3, #8]
 8102f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102f2a:	69fb      	ldr	r3, [r7, #28]
 8102f2c:	005b      	lsls	r3, r3, #1
 8102f2e:	2203      	movs	r2, #3
 8102f30:	fa02 f303 	lsl.w	r3, r2, r3
 8102f34:	43db      	mvns	r3, r3
 8102f36:	69ba      	ldr	r2, [r7, #24]
 8102f38:	4013      	ands	r3, r2
 8102f3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102f3c:	683b      	ldr	r3, [r7, #0]
 8102f3e:	68da      	ldr	r2, [r3, #12]
 8102f40:	69fb      	ldr	r3, [r7, #28]
 8102f42:	005b      	lsls	r3, r3, #1
 8102f44:	fa02 f303 	lsl.w	r3, r2, r3
 8102f48:	69ba      	ldr	r2, [r7, #24]
 8102f4a:	4313      	orrs	r3, r2
 8102f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102f4e:	687b      	ldr	r3, [r7, #4]
 8102f50:	69ba      	ldr	r2, [r7, #24]
 8102f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	685b      	ldr	r3, [r3, #4]
 8102f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102f5a:	2201      	movs	r2, #1
 8102f5c:	69fb      	ldr	r3, [r7, #28]
 8102f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8102f62:	43db      	mvns	r3, r3
 8102f64:	69ba      	ldr	r2, [r7, #24]
 8102f66:	4013      	ands	r3, r2
 8102f68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8102f6a:	683b      	ldr	r3, [r7, #0]
 8102f6c:	685b      	ldr	r3, [r3, #4]
 8102f6e:	091b      	lsrs	r3, r3, #4
 8102f70:	f003 0201 	and.w	r2, r3, #1
 8102f74:	69fb      	ldr	r3, [r7, #28]
 8102f76:	fa02 f303 	lsl.w	r3, r2, r3
 8102f7a:	69ba      	ldr	r2, [r7, #24]
 8102f7c:	4313      	orrs	r3, r2
 8102f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102f80:	687b      	ldr	r3, [r7, #4]
 8102f82:	69ba      	ldr	r2, [r7, #24]
 8102f84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	68db      	ldr	r3, [r3, #12]
 8102f8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102f8c:	69fb      	ldr	r3, [r7, #28]
 8102f8e:	005b      	lsls	r3, r3, #1
 8102f90:	2203      	movs	r2, #3
 8102f92:	fa02 f303 	lsl.w	r3, r2, r3
 8102f96:	43db      	mvns	r3, r3
 8102f98:	69ba      	ldr	r2, [r7, #24]
 8102f9a:	4013      	ands	r3, r2
 8102f9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102f9e:	683b      	ldr	r3, [r7, #0]
 8102fa0:	689a      	ldr	r2, [r3, #8]
 8102fa2:	69fb      	ldr	r3, [r7, #28]
 8102fa4:	005b      	lsls	r3, r3, #1
 8102fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8102faa:	69ba      	ldr	r2, [r7, #24]
 8102fac:	4313      	orrs	r3, r2
 8102fae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	69ba      	ldr	r2, [r7, #24]
 8102fb4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8102fb6:	683b      	ldr	r3, [r7, #0]
 8102fb8:	685b      	ldr	r3, [r3, #4]
 8102fba:	2b02      	cmp	r3, #2
 8102fbc:	d003      	beq.n	8102fc6 <HAL_GPIO_Init+0xee>
 8102fbe:	683b      	ldr	r3, [r7, #0]
 8102fc0:	685b      	ldr	r3, [r3, #4]
 8102fc2:	2b12      	cmp	r3, #18
 8102fc4:	d123      	bne.n	810300e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102fc6:	69fb      	ldr	r3, [r7, #28]
 8102fc8:	08da      	lsrs	r2, r3, #3
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	3208      	adds	r2, #8
 8102fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102fd4:	69fb      	ldr	r3, [r7, #28]
 8102fd6:	f003 0307 	and.w	r3, r3, #7
 8102fda:	009b      	lsls	r3, r3, #2
 8102fdc:	220f      	movs	r2, #15
 8102fde:	fa02 f303 	lsl.w	r3, r2, r3
 8102fe2:	43db      	mvns	r3, r3
 8102fe4:	69ba      	ldr	r2, [r7, #24]
 8102fe6:	4013      	ands	r3, r2
 8102fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102fea:	683b      	ldr	r3, [r7, #0]
 8102fec:	691a      	ldr	r2, [r3, #16]
 8102fee:	69fb      	ldr	r3, [r7, #28]
 8102ff0:	f003 0307 	and.w	r3, r3, #7
 8102ff4:	009b      	lsls	r3, r3, #2
 8102ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8102ffa:	69ba      	ldr	r2, [r7, #24]
 8102ffc:	4313      	orrs	r3, r2
 8102ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8103000:	69fb      	ldr	r3, [r7, #28]
 8103002:	08da      	lsrs	r2, r3, #3
 8103004:	687b      	ldr	r3, [r7, #4]
 8103006:	3208      	adds	r2, #8
 8103008:	69b9      	ldr	r1, [r7, #24]
 810300a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810300e:	687b      	ldr	r3, [r7, #4]
 8103010:	681b      	ldr	r3, [r3, #0]
 8103012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103014:	69fb      	ldr	r3, [r7, #28]
 8103016:	005b      	lsls	r3, r3, #1
 8103018:	2203      	movs	r2, #3
 810301a:	fa02 f303 	lsl.w	r3, r2, r3
 810301e:	43db      	mvns	r3, r3
 8103020:	69ba      	ldr	r2, [r7, #24]
 8103022:	4013      	ands	r3, r2
 8103024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103026:	683b      	ldr	r3, [r7, #0]
 8103028:	685b      	ldr	r3, [r3, #4]
 810302a:	f003 0203 	and.w	r2, r3, #3
 810302e:	69fb      	ldr	r3, [r7, #28]
 8103030:	005b      	lsls	r3, r3, #1
 8103032:	fa02 f303 	lsl.w	r3, r2, r3
 8103036:	69ba      	ldr	r2, [r7, #24]
 8103038:	4313      	orrs	r3, r2
 810303a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810303c:	687b      	ldr	r3, [r7, #4]
 810303e:	69ba      	ldr	r2, [r7, #24]
 8103040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8103042:	683b      	ldr	r3, [r7, #0]
 8103044:	685b      	ldr	r3, [r3, #4]
 8103046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810304a:	2b00      	cmp	r3, #0
 810304c:	f000 80e0 	beq.w	8103210 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103050:	4b2f      	ldr	r3, [pc, #188]	; (8103110 <HAL_GPIO_Init+0x238>)
 8103052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103056:	4a2e      	ldr	r2, [pc, #184]	; (8103110 <HAL_GPIO_Init+0x238>)
 8103058:	f043 0302 	orr.w	r3, r3, #2
 810305c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103060:	4b2b      	ldr	r3, [pc, #172]	; (8103110 <HAL_GPIO_Init+0x238>)
 8103062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103066:	f003 0302 	and.w	r3, r3, #2
 810306a:	60fb      	str	r3, [r7, #12]
 810306c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810306e:	4a29      	ldr	r2, [pc, #164]	; (8103114 <HAL_GPIO_Init+0x23c>)
 8103070:	69fb      	ldr	r3, [r7, #28]
 8103072:	089b      	lsrs	r3, r3, #2
 8103074:	3302      	adds	r3, #2
 8103076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810307c:	69fb      	ldr	r3, [r7, #28]
 810307e:	f003 0303 	and.w	r3, r3, #3
 8103082:	009b      	lsls	r3, r3, #2
 8103084:	220f      	movs	r2, #15
 8103086:	fa02 f303 	lsl.w	r3, r2, r3
 810308a:	43db      	mvns	r3, r3
 810308c:	69ba      	ldr	r2, [r7, #24]
 810308e:	4013      	ands	r3, r2
 8103090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8103092:	687b      	ldr	r3, [r7, #4]
 8103094:	4a20      	ldr	r2, [pc, #128]	; (8103118 <HAL_GPIO_Init+0x240>)
 8103096:	4293      	cmp	r3, r2
 8103098:	d052      	beq.n	8103140 <HAL_GPIO_Init+0x268>
 810309a:	687b      	ldr	r3, [r7, #4]
 810309c:	4a1f      	ldr	r2, [pc, #124]	; (810311c <HAL_GPIO_Init+0x244>)
 810309e:	4293      	cmp	r3, r2
 81030a0:	d031      	beq.n	8103106 <HAL_GPIO_Init+0x22e>
 81030a2:	687b      	ldr	r3, [r7, #4]
 81030a4:	4a1e      	ldr	r2, [pc, #120]	; (8103120 <HAL_GPIO_Init+0x248>)
 81030a6:	4293      	cmp	r3, r2
 81030a8:	d02b      	beq.n	8103102 <HAL_GPIO_Init+0x22a>
 81030aa:	687b      	ldr	r3, [r7, #4]
 81030ac:	4a1d      	ldr	r2, [pc, #116]	; (8103124 <HAL_GPIO_Init+0x24c>)
 81030ae:	4293      	cmp	r3, r2
 81030b0:	d025      	beq.n	81030fe <HAL_GPIO_Init+0x226>
 81030b2:	687b      	ldr	r3, [r7, #4]
 81030b4:	4a1c      	ldr	r2, [pc, #112]	; (8103128 <HAL_GPIO_Init+0x250>)
 81030b6:	4293      	cmp	r3, r2
 81030b8:	d01f      	beq.n	81030fa <HAL_GPIO_Init+0x222>
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	4a1b      	ldr	r2, [pc, #108]	; (810312c <HAL_GPIO_Init+0x254>)
 81030be:	4293      	cmp	r3, r2
 81030c0:	d019      	beq.n	81030f6 <HAL_GPIO_Init+0x21e>
 81030c2:	687b      	ldr	r3, [r7, #4]
 81030c4:	4a1a      	ldr	r2, [pc, #104]	; (8103130 <HAL_GPIO_Init+0x258>)
 81030c6:	4293      	cmp	r3, r2
 81030c8:	d013      	beq.n	81030f2 <HAL_GPIO_Init+0x21a>
 81030ca:	687b      	ldr	r3, [r7, #4]
 81030cc:	4a19      	ldr	r2, [pc, #100]	; (8103134 <HAL_GPIO_Init+0x25c>)
 81030ce:	4293      	cmp	r3, r2
 81030d0:	d00d      	beq.n	81030ee <HAL_GPIO_Init+0x216>
 81030d2:	687b      	ldr	r3, [r7, #4]
 81030d4:	4a18      	ldr	r2, [pc, #96]	; (8103138 <HAL_GPIO_Init+0x260>)
 81030d6:	4293      	cmp	r3, r2
 81030d8:	d007      	beq.n	81030ea <HAL_GPIO_Init+0x212>
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	4a17      	ldr	r2, [pc, #92]	; (810313c <HAL_GPIO_Init+0x264>)
 81030de:	4293      	cmp	r3, r2
 81030e0:	d101      	bne.n	81030e6 <HAL_GPIO_Init+0x20e>
 81030e2:	2309      	movs	r3, #9
 81030e4:	e02d      	b.n	8103142 <HAL_GPIO_Init+0x26a>
 81030e6:	230a      	movs	r3, #10
 81030e8:	e02b      	b.n	8103142 <HAL_GPIO_Init+0x26a>
 81030ea:	2308      	movs	r3, #8
 81030ec:	e029      	b.n	8103142 <HAL_GPIO_Init+0x26a>
 81030ee:	2307      	movs	r3, #7
 81030f0:	e027      	b.n	8103142 <HAL_GPIO_Init+0x26a>
 81030f2:	2306      	movs	r3, #6
 81030f4:	e025      	b.n	8103142 <HAL_GPIO_Init+0x26a>
 81030f6:	2305      	movs	r3, #5
 81030f8:	e023      	b.n	8103142 <HAL_GPIO_Init+0x26a>
 81030fa:	2304      	movs	r3, #4
 81030fc:	e021      	b.n	8103142 <HAL_GPIO_Init+0x26a>
 81030fe:	2303      	movs	r3, #3
 8103100:	e01f      	b.n	8103142 <HAL_GPIO_Init+0x26a>
 8103102:	2302      	movs	r3, #2
 8103104:	e01d      	b.n	8103142 <HAL_GPIO_Init+0x26a>
 8103106:	2301      	movs	r3, #1
 8103108:	e01b      	b.n	8103142 <HAL_GPIO_Init+0x26a>
 810310a:	bf00      	nop
 810310c:	580000c0 	.word	0x580000c0
 8103110:	58024400 	.word	0x58024400
 8103114:	58000400 	.word	0x58000400
 8103118:	58020000 	.word	0x58020000
 810311c:	58020400 	.word	0x58020400
 8103120:	58020800 	.word	0x58020800
 8103124:	58020c00 	.word	0x58020c00
 8103128:	58021000 	.word	0x58021000
 810312c:	58021400 	.word	0x58021400
 8103130:	58021800 	.word	0x58021800
 8103134:	58021c00 	.word	0x58021c00
 8103138:	58022000 	.word	0x58022000
 810313c:	58022400 	.word	0x58022400
 8103140:	2300      	movs	r3, #0
 8103142:	69fa      	ldr	r2, [r7, #28]
 8103144:	f002 0203 	and.w	r2, r2, #3
 8103148:	0092      	lsls	r2, r2, #2
 810314a:	4093      	lsls	r3, r2
 810314c:	69ba      	ldr	r2, [r7, #24]
 810314e:	4313      	orrs	r3, r2
 8103150:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103152:	4938      	ldr	r1, [pc, #224]	; (8103234 <HAL_GPIO_Init+0x35c>)
 8103154:	69fb      	ldr	r3, [r7, #28]
 8103156:	089b      	lsrs	r3, r3, #2
 8103158:	3302      	adds	r3, #2
 810315a:	69ba      	ldr	r2, [r7, #24]
 810315c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103160:	697b      	ldr	r3, [r7, #20]
 8103162:	681b      	ldr	r3, [r3, #0]
 8103164:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103166:	693b      	ldr	r3, [r7, #16]
 8103168:	43db      	mvns	r3, r3
 810316a:	69ba      	ldr	r2, [r7, #24]
 810316c:	4013      	ands	r3, r2
 810316e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8103170:	683b      	ldr	r3, [r7, #0]
 8103172:	685b      	ldr	r3, [r3, #4]
 8103174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103178:	2b00      	cmp	r3, #0
 810317a:	d003      	beq.n	8103184 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 810317c:	69ba      	ldr	r2, [r7, #24]
 810317e:	693b      	ldr	r3, [r7, #16]
 8103180:	4313      	orrs	r3, r2
 8103182:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103184:	697b      	ldr	r3, [r7, #20]
 8103186:	69ba      	ldr	r2, [r7, #24]
 8103188:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810318a:	697b      	ldr	r3, [r7, #20]
 810318c:	685b      	ldr	r3, [r3, #4]
 810318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103190:	693b      	ldr	r3, [r7, #16]
 8103192:	43db      	mvns	r3, r3
 8103194:	69ba      	ldr	r2, [r7, #24]
 8103196:	4013      	ands	r3, r2
 8103198:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810319a:	683b      	ldr	r3, [r7, #0]
 810319c:	685b      	ldr	r3, [r3, #4]
 810319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81031a2:	2b00      	cmp	r3, #0
 81031a4:	d003      	beq.n	81031ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81031a6:	69ba      	ldr	r2, [r7, #24]
 81031a8:	693b      	ldr	r3, [r7, #16]
 81031aa:	4313      	orrs	r3, r2
 81031ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81031ae:	697b      	ldr	r3, [r7, #20]
 81031b0:	69ba      	ldr	r2, [r7, #24]
 81031b2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81031b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81031bc:	693b      	ldr	r3, [r7, #16]
 81031be:	43db      	mvns	r3, r3
 81031c0:	69ba      	ldr	r2, [r7, #24]
 81031c2:	4013      	ands	r3, r2
 81031c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81031c6:	683b      	ldr	r3, [r7, #0]
 81031c8:	685b      	ldr	r3, [r3, #4]
 81031ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81031ce:	2b00      	cmp	r3, #0
 81031d0:	d003      	beq.n	81031da <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81031d2:	69ba      	ldr	r2, [r7, #24]
 81031d4:	693b      	ldr	r3, [r7, #16]
 81031d6:	4313      	orrs	r3, r2
 81031d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81031da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81031de:	69bb      	ldr	r3, [r7, #24]
 81031e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81031e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81031e6:	685b      	ldr	r3, [r3, #4]
 81031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81031ea:	693b      	ldr	r3, [r7, #16]
 81031ec:	43db      	mvns	r3, r3
 81031ee:	69ba      	ldr	r2, [r7, #24]
 81031f0:	4013      	ands	r3, r2
 81031f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81031f4:	683b      	ldr	r3, [r7, #0]
 81031f6:	685b      	ldr	r3, [r3, #4]
 81031f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81031fc:	2b00      	cmp	r3, #0
 81031fe:	d003      	beq.n	8103208 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8103200:	69ba      	ldr	r2, [r7, #24]
 8103202:	693b      	ldr	r3, [r7, #16]
 8103204:	4313      	orrs	r3, r2
 8103206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810320c:	69bb      	ldr	r3, [r7, #24]
 810320e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8103210:	69fb      	ldr	r3, [r7, #28]
 8103212:	3301      	adds	r3, #1
 8103214:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103216:	683b      	ldr	r3, [r7, #0]
 8103218:	681a      	ldr	r2, [r3, #0]
 810321a:	69fb      	ldr	r3, [r7, #28]
 810321c:	fa22 f303 	lsr.w	r3, r2, r3
 8103220:	2b00      	cmp	r3, #0
 8103222:	f47f ae63 	bne.w	8102eec <HAL_GPIO_Init+0x14>
  }
}
 8103226:	bf00      	nop
 8103228:	bf00      	nop
 810322a:	3724      	adds	r7, #36	; 0x24
 810322c:	46bd      	mov	sp, r7
 810322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103232:	4770      	bx	lr
 8103234:	58000400 	.word	0x58000400

08103238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103238:	b480      	push	{r7}
 810323a:	b083      	sub	sp, #12
 810323c:	af00      	add	r7, sp, #0
 810323e:	6078      	str	r0, [r7, #4]
 8103240:	460b      	mov	r3, r1
 8103242:	807b      	strh	r3, [r7, #2]
 8103244:	4613      	mov	r3, r2
 8103246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103248:	787b      	ldrb	r3, [r7, #1]
 810324a:	2b00      	cmp	r3, #0
 810324c:	d003      	beq.n	8103256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810324e:	887a      	ldrh	r2, [r7, #2]
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103254:	e003      	b.n	810325e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103256:	887b      	ldrh	r3, [r7, #2]
 8103258:	041a      	lsls	r2, r3, #16
 810325a:	687b      	ldr	r3, [r7, #4]
 810325c:	619a      	str	r2, [r3, #24]
}
 810325e:	bf00      	nop
 8103260:	370c      	adds	r7, #12
 8103262:	46bd      	mov	sp, r7
 8103264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103268:	4770      	bx	lr

0810326a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810326a:	b480      	push	{r7}
 810326c:	b083      	sub	sp, #12
 810326e:	af00      	add	r7, sp, #0
 8103270:	6078      	str	r0, [r7, #4]
 8103272:	460b      	mov	r3, r1
 8103274:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8103276:	687b      	ldr	r3, [r7, #4]
 8103278:	695a      	ldr	r2, [r3, #20]
 810327a:	887b      	ldrh	r3, [r7, #2]
 810327c:	401a      	ands	r2, r3
 810327e:	887b      	ldrh	r3, [r7, #2]
 8103280:	429a      	cmp	r2, r3
 8103282:	d104      	bne.n	810328e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103284:	887b      	ldrh	r3, [r7, #2]
 8103286:	041a      	lsls	r2, r3, #16
 8103288:	687b      	ldr	r3, [r7, #4]
 810328a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 810328c:	e002      	b.n	8103294 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 810328e:	887a      	ldrh	r2, [r7, #2]
 8103290:	687b      	ldr	r3, [r7, #4]
 8103292:	619a      	str	r2, [r3, #24]
}
 8103294:	bf00      	nop
 8103296:	370c      	adds	r7, #12
 8103298:	46bd      	mov	sp, r7
 810329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810329e:	4770      	bx	lr

081032a0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81032a0:	b480      	push	{r7}
 81032a2:	b083      	sub	sp, #12
 81032a4:	af00      	add	r7, sp, #0
 81032a6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81032a8:	4b05      	ldr	r3, [pc, #20]	; (81032c0 <HAL_HSEM_ActivateNotification+0x20>)
 81032aa:	681a      	ldr	r2, [r3, #0]
 81032ac:	4904      	ldr	r1, [pc, #16]	; (81032c0 <HAL_HSEM_ActivateNotification+0x20>)
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	4313      	orrs	r3, r2
 81032b2:	600b      	str	r3, [r1, #0]
#endif
}
 81032b4:	bf00      	nop
 81032b6:	370c      	adds	r7, #12
 81032b8:	46bd      	mov	sp, r7
 81032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032be:	4770      	bx	lr
 81032c0:	58026510 	.word	0x58026510

081032c4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81032c4:	b580      	push	{r7, lr}
 81032c6:	b084      	sub	sp, #16
 81032c8:	af00      	add	r7, sp, #0
 81032ca:	60f8      	str	r0, [r7, #12]
 81032cc:	460b      	mov	r3, r1
 81032ce:	607a      	str	r2, [r7, #4]
 81032d0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81032d2:	4b37      	ldr	r3, [pc, #220]	; (81033b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81032d4:	681b      	ldr	r3, [r3, #0]
 81032d6:	f023 0201 	bic.w	r2, r3, #1
 81032da:	4935      	ldr	r1, [pc, #212]	; (81033b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81032dc:	68fb      	ldr	r3, [r7, #12]
 81032de:	4313      	orrs	r3, r2
 81032e0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81032e2:	687b      	ldr	r3, [r7, #4]
 81032e4:	2b00      	cmp	r3, #0
 81032e6:	d123      	bne.n	8103330 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81032e8:	f7ff fde2 	bl	8102eb0 <HAL_GetCurrentCPUID>
 81032ec:	4603      	mov	r3, r0
 81032ee:	2b03      	cmp	r3, #3
 81032f0:	d158      	bne.n	81033a4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81032f2:	4b2f      	ldr	r3, [pc, #188]	; (81033b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81032f4:	691b      	ldr	r3, [r3, #16]
 81032f6:	4a2e      	ldr	r2, [pc, #184]	; (81033b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81032f8:	f023 0301 	bic.w	r3, r3, #1
 81032fc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81032fe:	4b2d      	ldr	r3, [pc, #180]	; (81033b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103300:	691b      	ldr	r3, [r3, #16]
 8103302:	4a2c      	ldr	r2, [pc, #176]	; (81033b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103304:	f043 0304 	orr.w	r3, r3, #4
 8103308:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810330a:	f3bf 8f4f 	dsb	sy
}
 810330e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103310:	f3bf 8f6f 	isb	sy
}
 8103314:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103316:	7afb      	ldrb	r3, [r7, #11]
 8103318:	2b01      	cmp	r3, #1
 810331a:	d101      	bne.n	8103320 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810331c:	bf30      	wfi
 810331e:	e000      	b.n	8103322 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103320:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103322:	4b24      	ldr	r3, [pc, #144]	; (81033b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103324:	691b      	ldr	r3, [r3, #16]
 8103326:	4a23      	ldr	r2, [pc, #140]	; (81033b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103328:	f023 0304 	bic.w	r3, r3, #4
 810332c:	6113      	str	r3, [r2, #16]
 810332e:	e03c      	b.n	81033aa <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103330:	687b      	ldr	r3, [r7, #4]
 8103332:	2b01      	cmp	r3, #1
 8103334:	d123      	bne.n	810337e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103336:	f7ff fdbb 	bl	8102eb0 <HAL_GetCurrentCPUID>
 810333a:	4603      	mov	r3, r0
 810333c:	2b01      	cmp	r3, #1
 810333e:	d133      	bne.n	81033a8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103340:	4b1b      	ldr	r3, [pc, #108]	; (81033b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103342:	695b      	ldr	r3, [r3, #20]
 8103344:	4a1a      	ldr	r2, [pc, #104]	; (81033b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103346:	f023 0302 	bic.w	r3, r3, #2
 810334a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810334c:	4b19      	ldr	r3, [pc, #100]	; (81033b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810334e:	691b      	ldr	r3, [r3, #16]
 8103350:	4a18      	ldr	r2, [pc, #96]	; (81033b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103352:	f043 0304 	orr.w	r3, r3, #4
 8103356:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103358:	f3bf 8f4f 	dsb	sy
}
 810335c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810335e:	f3bf 8f6f 	isb	sy
}
 8103362:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103364:	7afb      	ldrb	r3, [r7, #11]
 8103366:	2b01      	cmp	r3, #1
 8103368:	d101      	bne.n	810336e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810336a:	bf30      	wfi
 810336c:	e000      	b.n	8103370 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810336e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103370:	4b10      	ldr	r3, [pc, #64]	; (81033b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103372:	691b      	ldr	r3, [r3, #16]
 8103374:	4a0f      	ldr	r2, [pc, #60]	; (81033b4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103376:	f023 0304 	bic.w	r3, r3, #4
 810337a:	6113      	str	r3, [r2, #16]
 810337c:	e015      	b.n	81033aa <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810337e:	f7ff fd97 	bl	8102eb0 <HAL_GetCurrentCPUID>
 8103382:	4603      	mov	r3, r0
 8103384:	2b03      	cmp	r3, #3
 8103386:	d106      	bne.n	8103396 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103388:	4b09      	ldr	r3, [pc, #36]	; (81033b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810338a:	691b      	ldr	r3, [r3, #16]
 810338c:	4a08      	ldr	r2, [pc, #32]	; (81033b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810338e:	f023 0304 	bic.w	r3, r3, #4
 8103392:	6113      	str	r3, [r2, #16]
 8103394:	e009      	b.n	81033aa <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103396:	4b06      	ldr	r3, [pc, #24]	; (81033b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103398:	695b      	ldr	r3, [r3, #20]
 810339a:	4a05      	ldr	r2, [pc, #20]	; (81033b0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810339c:	f023 0304 	bic.w	r3, r3, #4
 81033a0:	6153      	str	r3, [r2, #20]
 81033a2:	e002      	b.n	81033aa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81033a4:	bf00      	nop
 81033a6:	e000      	b.n	81033aa <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81033a8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81033aa:	3710      	adds	r7, #16
 81033ac:	46bd      	mov	sp, r7
 81033ae:	bd80      	pop	{r7, pc}
 81033b0:	58024800 	.word	0x58024800
 81033b4:	e000ed00 	.word	0xe000ed00

081033b8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81033b8:	b580      	push	{r7, lr}
 81033ba:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81033bc:	f7ff fd78 	bl	8102eb0 <HAL_GetCurrentCPUID>
 81033c0:	4603      	mov	r3, r0
 81033c2:	2b03      	cmp	r3, #3
 81033c4:	d101      	bne.n	81033ca <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81033c6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81033c8:	e001      	b.n	81033ce <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81033ca:	bf40      	sev
    __WFE ();
 81033cc:	bf20      	wfe
}
 81033ce:	bf00      	nop
 81033d0:	bd80      	pop	{r7, pc}
	...

081033d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81033d4:	b480      	push	{r7}
 81033d6:	b089      	sub	sp, #36	; 0x24
 81033d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81033da:	4bb3      	ldr	r3, [pc, #716]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033dc:	691b      	ldr	r3, [r3, #16]
 81033de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81033e2:	2b18      	cmp	r3, #24
 81033e4:	f200 8155 	bhi.w	8103692 <HAL_RCC_GetSysClockFreq+0x2be>
 81033e8:	a201      	add	r2, pc, #4	; (adr r2, 81033f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 81033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033ee:	bf00      	nop
 81033f0:	08103455 	.word	0x08103455
 81033f4:	08103693 	.word	0x08103693
 81033f8:	08103693 	.word	0x08103693
 81033fc:	08103693 	.word	0x08103693
 8103400:	08103693 	.word	0x08103693
 8103404:	08103693 	.word	0x08103693
 8103408:	08103693 	.word	0x08103693
 810340c:	08103693 	.word	0x08103693
 8103410:	0810347b 	.word	0x0810347b
 8103414:	08103693 	.word	0x08103693
 8103418:	08103693 	.word	0x08103693
 810341c:	08103693 	.word	0x08103693
 8103420:	08103693 	.word	0x08103693
 8103424:	08103693 	.word	0x08103693
 8103428:	08103693 	.word	0x08103693
 810342c:	08103693 	.word	0x08103693
 8103430:	08103481 	.word	0x08103481
 8103434:	08103693 	.word	0x08103693
 8103438:	08103693 	.word	0x08103693
 810343c:	08103693 	.word	0x08103693
 8103440:	08103693 	.word	0x08103693
 8103444:	08103693 	.word	0x08103693
 8103448:	08103693 	.word	0x08103693
 810344c:	08103693 	.word	0x08103693
 8103450:	08103487 	.word	0x08103487
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103454:	4b94      	ldr	r3, [pc, #592]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103456:	681b      	ldr	r3, [r3, #0]
 8103458:	f003 0320 	and.w	r3, r3, #32
 810345c:	2b00      	cmp	r3, #0
 810345e:	d009      	beq.n	8103474 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103460:	4b91      	ldr	r3, [pc, #580]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103462:	681b      	ldr	r3, [r3, #0]
 8103464:	08db      	lsrs	r3, r3, #3
 8103466:	f003 0303 	and.w	r3, r3, #3
 810346a:	4a90      	ldr	r2, [pc, #576]	; (81036ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 810346c:	fa22 f303 	lsr.w	r3, r2, r3
 8103470:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103472:	e111      	b.n	8103698 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103474:	4b8d      	ldr	r3, [pc, #564]	; (81036ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103476:	61bb      	str	r3, [r7, #24]
    break;
 8103478:	e10e      	b.n	8103698 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810347a:	4b8d      	ldr	r3, [pc, #564]	; (81036b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810347c:	61bb      	str	r3, [r7, #24]
    break;
 810347e:	e10b      	b.n	8103698 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103480:	4b8c      	ldr	r3, [pc, #560]	; (81036b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103482:	61bb      	str	r3, [r7, #24]
    break;
 8103484:	e108      	b.n	8103698 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103486:	4b88      	ldr	r3, [pc, #544]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810348a:	f003 0303 	and.w	r3, r3, #3
 810348e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103490:	4b85      	ldr	r3, [pc, #532]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103494:	091b      	lsrs	r3, r3, #4
 8103496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810349a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810349c:	4b82      	ldr	r3, [pc, #520]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81034a0:	f003 0301 	and.w	r3, r3, #1
 81034a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81034a6:	4b80      	ldr	r3, [pc, #512]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81034aa:	08db      	lsrs	r3, r3, #3
 81034ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81034b0:	68fa      	ldr	r2, [r7, #12]
 81034b2:	fb02 f303 	mul.w	r3, r2, r3
 81034b6:	ee07 3a90 	vmov	s15, r3
 81034ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81034c2:	693b      	ldr	r3, [r7, #16]
 81034c4:	2b00      	cmp	r3, #0
 81034c6:	f000 80e1 	beq.w	810368c <HAL_RCC_GetSysClockFreq+0x2b8>
 81034ca:	697b      	ldr	r3, [r7, #20]
 81034cc:	2b02      	cmp	r3, #2
 81034ce:	f000 8083 	beq.w	81035d8 <HAL_RCC_GetSysClockFreq+0x204>
 81034d2:	697b      	ldr	r3, [r7, #20]
 81034d4:	2b02      	cmp	r3, #2
 81034d6:	f200 80a1 	bhi.w	810361c <HAL_RCC_GetSysClockFreq+0x248>
 81034da:	697b      	ldr	r3, [r7, #20]
 81034dc:	2b00      	cmp	r3, #0
 81034de:	d003      	beq.n	81034e8 <HAL_RCC_GetSysClockFreq+0x114>
 81034e0:	697b      	ldr	r3, [r7, #20]
 81034e2:	2b01      	cmp	r3, #1
 81034e4:	d056      	beq.n	8103594 <HAL_RCC_GetSysClockFreq+0x1c0>
 81034e6:	e099      	b.n	810361c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81034e8:	4b6f      	ldr	r3, [pc, #444]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034ea:	681b      	ldr	r3, [r3, #0]
 81034ec:	f003 0320 	and.w	r3, r3, #32
 81034f0:	2b00      	cmp	r3, #0
 81034f2:	d02d      	beq.n	8103550 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81034f4:	4b6c      	ldr	r3, [pc, #432]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	08db      	lsrs	r3, r3, #3
 81034fa:	f003 0303 	and.w	r3, r3, #3
 81034fe:	4a6b      	ldr	r2, [pc, #428]	; (81036ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103500:	fa22 f303 	lsr.w	r3, r2, r3
 8103504:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103506:	687b      	ldr	r3, [r7, #4]
 8103508:	ee07 3a90 	vmov	s15, r3
 810350c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103510:	693b      	ldr	r3, [r7, #16]
 8103512:	ee07 3a90 	vmov	s15, r3
 8103516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810351a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810351e:	4b62      	ldr	r3, [pc, #392]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103526:	ee07 3a90 	vmov	s15, r3
 810352a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810352e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103532:	eddf 5a61 	vldr	s11, [pc, #388]	; 81036b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810353a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810353e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103546:	ee67 7a27 	vmul.f32	s15, s14, s15
 810354a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810354e:	e087      	b.n	8103660 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103550:	693b      	ldr	r3, [r7, #16]
 8103552:	ee07 3a90 	vmov	s15, r3
 8103556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810355a:	eddf 6a58 	vldr	s13, [pc, #352]	; 81036bc <HAL_RCC_GetSysClockFreq+0x2e8>
 810355e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103562:	4b51      	ldr	r3, [pc, #324]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810356a:	ee07 3a90 	vmov	s15, r3
 810356e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103572:	ed97 6a02 	vldr	s12, [r7, #8]
 8103576:	eddf 5a50 	vldr	s11, [pc, #320]	; 81036b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810357a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810357e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810358e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103592:	e065      	b.n	8103660 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103594:	693b      	ldr	r3, [r7, #16]
 8103596:	ee07 3a90 	vmov	s15, r3
 810359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810359e:	eddf 6a48 	vldr	s13, [pc, #288]	; 81036c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 81035a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035a6:	4b40      	ldr	r3, [pc, #256]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81035aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035ae:	ee07 3a90 	vmov	s15, r3
 81035b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035b6:	ed97 6a02 	vldr	s12, [r7, #8]
 81035ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81036b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81035be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81035ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81035d6:	e043      	b.n	8103660 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81035d8:	693b      	ldr	r3, [r7, #16]
 81035da:	ee07 3a90 	vmov	s15, r3
 81035de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 81036c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 81035e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035ea:	4b2f      	ldr	r3, [pc, #188]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81035ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035f2:	ee07 3a90 	vmov	s15, r3
 81035f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035fa:	ed97 6a02 	vldr	s12, [r7, #8]
 81035fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81036b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810360a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810360e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810361a:	e021      	b.n	8103660 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810361c:	693b      	ldr	r3, [r7, #16]
 810361e:	ee07 3a90 	vmov	s15, r3
 8103622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103626:	eddf 6a26 	vldr	s13, [pc, #152]	; 81036c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810362a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810362e:	4b1e      	ldr	r3, [pc, #120]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103636:	ee07 3a90 	vmov	s15, r3
 810363a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810363e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103642:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81036b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810364a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810364e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103656:	ee67 7a27 	vmul.f32	s15, s14, s15
 810365a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810365e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103660:	4b11      	ldr	r3, [pc, #68]	; (81036a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103664:	0a5b      	lsrs	r3, r3, #9
 8103666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810366a:	3301      	adds	r3, #1
 810366c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810366e:	683b      	ldr	r3, [r7, #0]
 8103670:	ee07 3a90 	vmov	s15, r3
 8103674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103678:	edd7 6a07 	vldr	s13, [r7, #28]
 810367c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103684:	ee17 3a90 	vmov	r3, s15
 8103688:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810368a:	e005      	b.n	8103698 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810368c:	2300      	movs	r3, #0
 810368e:	61bb      	str	r3, [r7, #24]
    break;
 8103690:	e002      	b.n	8103698 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103692:	4b07      	ldr	r3, [pc, #28]	; (81036b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103694:	61bb      	str	r3, [r7, #24]
    break;
 8103696:	bf00      	nop
  }

  return sysclockfreq;
 8103698:	69bb      	ldr	r3, [r7, #24]
}
 810369a:	4618      	mov	r0, r3
 810369c:	3724      	adds	r7, #36	; 0x24
 810369e:	46bd      	mov	sp, r7
 81036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036a4:	4770      	bx	lr
 81036a6:	bf00      	nop
 81036a8:	58024400 	.word	0x58024400
 81036ac:	03d09000 	.word	0x03d09000
 81036b0:	003d0900 	.word	0x003d0900
 81036b4:	007a1200 	.word	0x007a1200
 81036b8:	46000000 	.word	0x46000000
 81036bc:	4c742400 	.word	0x4c742400
 81036c0:	4a742400 	.word	0x4a742400
 81036c4:	4af42400 	.word	0x4af42400

081036c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81036c8:	b580      	push	{r7, lr}
 81036ca:	b082      	sub	sp, #8
 81036cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81036ce:	f7ff fe81 	bl	81033d4 <HAL_RCC_GetSysClockFreq>
 81036d2:	4602      	mov	r2, r0
 81036d4:	4b11      	ldr	r3, [pc, #68]	; (810371c <HAL_RCC_GetHCLKFreq+0x54>)
 81036d6:	699b      	ldr	r3, [r3, #24]
 81036d8:	0a1b      	lsrs	r3, r3, #8
 81036da:	f003 030f 	and.w	r3, r3, #15
 81036de:	4910      	ldr	r1, [pc, #64]	; (8103720 <HAL_RCC_GetHCLKFreq+0x58>)
 81036e0:	5ccb      	ldrb	r3, [r1, r3]
 81036e2:	f003 031f 	and.w	r3, r3, #31
 81036e6:	fa22 f303 	lsr.w	r3, r2, r3
 81036ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81036ec:	4b0b      	ldr	r3, [pc, #44]	; (810371c <HAL_RCC_GetHCLKFreq+0x54>)
 81036ee:	699b      	ldr	r3, [r3, #24]
 81036f0:	f003 030f 	and.w	r3, r3, #15
 81036f4:	4a0a      	ldr	r2, [pc, #40]	; (8103720 <HAL_RCC_GetHCLKFreq+0x58>)
 81036f6:	5cd3      	ldrb	r3, [r2, r3]
 81036f8:	f003 031f 	and.w	r3, r3, #31
 81036fc:	687a      	ldr	r2, [r7, #4]
 81036fe:	fa22 f303 	lsr.w	r3, r2, r3
 8103702:	4a08      	ldr	r2, [pc, #32]	; (8103724 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103704:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103706:	4b07      	ldr	r3, [pc, #28]	; (8103724 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	4a07      	ldr	r2, [pc, #28]	; (8103728 <HAL_RCC_GetHCLKFreq+0x60>)
 810370c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810370e:	4b05      	ldr	r3, [pc, #20]	; (8103724 <HAL_RCC_GetHCLKFreq+0x5c>)
 8103710:	681b      	ldr	r3, [r3, #0]
}
 8103712:	4618      	mov	r0, r3
 8103714:	3708      	adds	r7, #8
 8103716:	46bd      	mov	sp, r7
 8103718:	bd80      	pop	{r7, pc}
 810371a:	bf00      	nop
 810371c:	58024400 	.word	0x58024400
 8103720:	08103e7c 	.word	0x08103e7c
 8103724:	1000180c 	.word	0x1000180c
 8103728:	10001808 	.word	0x10001808

0810372c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810372c:	b580      	push	{r7, lr}
 810372e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8103730:	f7ff ffca 	bl	81036c8 <HAL_RCC_GetHCLKFreq>
 8103734:	4602      	mov	r2, r0
 8103736:	4b06      	ldr	r3, [pc, #24]	; (8103750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8103738:	69db      	ldr	r3, [r3, #28]
 810373a:	091b      	lsrs	r3, r3, #4
 810373c:	f003 0307 	and.w	r3, r3, #7
 8103740:	4904      	ldr	r1, [pc, #16]	; (8103754 <HAL_RCC_GetPCLK1Freq+0x28>)
 8103742:	5ccb      	ldrb	r3, [r1, r3]
 8103744:	f003 031f 	and.w	r3, r3, #31
 8103748:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810374c:	4618      	mov	r0, r3
 810374e:	bd80      	pop	{r7, pc}
 8103750:	58024400 	.word	0x58024400
 8103754:	08103e7c 	.word	0x08103e7c

08103758 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8103758:	b480      	push	{r7}
 810375a:	b083      	sub	sp, #12
 810375c:	af00      	add	r7, sp, #0
 810375e:	6078      	str	r0, [r7, #4]
 8103760:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8103762:	687b      	ldr	r3, [r7, #4]
 8103764:	223f      	movs	r2, #63	; 0x3f
 8103766:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8103768:	4b1a      	ldr	r3, [pc, #104]	; (81037d4 <HAL_RCC_GetClockConfig+0x7c>)
 810376a:	691b      	ldr	r3, [r3, #16]
 810376c:	f003 0207 	and.w	r2, r3, #7
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8103774:	4b17      	ldr	r3, [pc, #92]	; (81037d4 <HAL_RCC_GetClockConfig+0x7c>)
 8103776:	699b      	ldr	r3, [r3, #24]
 8103778:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8103780:	4b14      	ldr	r3, [pc, #80]	; (81037d4 <HAL_RCC_GetClockConfig+0x7c>)
 8103782:	699b      	ldr	r3, [r3, #24]
 8103784:	f003 020f 	and.w	r2, r3, #15
 8103788:	687b      	ldr	r3, [r7, #4]
 810378a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810378c:	4b11      	ldr	r3, [pc, #68]	; (81037d4 <HAL_RCC_GetClockConfig+0x7c>)
 810378e:	699b      	ldr	r3, [r3, #24]
 8103790:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8103794:	687b      	ldr	r3, [r7, #4]
 8103796:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8103798:	4b0e      	ldr	r3, [pc, #56]	; (81037d4 <HAL_RCC_GetClockConfig+0x7c>)
 810379a:	69db      	ldr	r3, [r3, #28]
 810379c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81037a0:	687b      	ldr	r3, [r7, #4]
 81037a2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81037a4:	4b0b      	ldr	r3, [pc, #44]	; (81037d4 <HAL_RCC_GetClockConfig+0x7c>)
 81037a6:	69db      	ldr	r3, [r3, #28]
 81037a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81037b0:	4b08      	ldr	r3, [pc, #32]	; (81037d4 <HAL_RCC_GetClockConfig+0x7c>)
 81037b2:	6a1b      	ldr	r3, [r3, #32]
 81037b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81037b8:	687b      	ldr	r3, [r7, #4]
 81037ba:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81037bc:	4b06      	ldr	r3, [pc, #24]	; (81037d8 <HAL_RCC_GetClockConfig+0x80>)
 81037be:	681b      	ldr	r3, [r3, #0]
 81037c0:	f003 020f 	and.w	r2, r3, #15
 81037c4:	683b      	ldr	r3, [r7, #0]
 81037c6:	601a      	str	r2, [r3, #0]
}
 81037c8:	bf00      	nop
 81037ca:	370c      	adds	r7, #12
 81037cc:	46bd      	mov	sp, r7
 81037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037d2:	4770      	bx	lr
 81037d4:	58024400 	.word	0x58024400
 81037d8:	52002000 	.word	0x52002000

081037dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81037dc:	b580      	push	{r7, lr}
 81037de:	b082      	sub	sp, #8
 81037e0:	af00      	add	r7, sp, #0
 81037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81037e4:	687b      	ldr	r3, [r7, #4]
 81037e6:	2b00      	cmp	r3, #0
 81037e8:	d101      	bne.n	81037ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 81037ea:	2301      	movs	r3, #1
 81037ec:	e049      	b.n	8103882 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 81037ee:	687b      	ldr	r3, [r7, #4]
 81037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81037f4:	b2db      	uxtb	r3, r3
 81037f6:	2b00      	cmp	r3, #0
 81037f8:	d106      	bne.n	8103808 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 81037fa:	687b      	ldr	r3, [r7, #4]
 81037fc:	2200      	movs	r2, #0
 81037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8103802:	6878      	ldr	r0, [r7, #4]
 8103804:	f000 f841 	bl	810388a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8103808:	687b      	ldr	r3, [r7, #4]
 810380a:	2202      	movs	r2, #2
 810380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	681a      	ldr	r2, [r3, #0]
 8103814:	687b      	ldr	r3, [r7, #4]
 8103816:	3304      	adds	r3, #4
 8103818:	4619      	mov	r1, r3
 810381a:	4610      	mov	r0, r2
 810381c:	f000 f9be 	bl	8103b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8103820:	687b      	ldr	r3, [r7, #4]
 8103822:	2201      	movs	r2, #1
 8103824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103828:	687b      	ldr	r3, [r7, #4]
 810382a:	2201      	movs	r2, #1
 810382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	2201      	movs	r2, #1
 8103834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	2201      	movs	r2, #1
 810383c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8103840:	687b      	ldr	r3, [r7, #4]
 8103842:	2201      	movs	r2, #1
 8103844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8103848:	687b      	ldr	r3, [r7, #4]
 810384a:	2201      	movs	r2, #1
 810384c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8103850:	687b      	ldr	r3, [r7, #4]
 8103852:	2201      	movs	r2, #1
 8103854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8103858:	687b      	ldr	r3, [r7, #4]
 810385a:	2201      	movs	r2, #1
 810385c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	2201      	movs	r2, #1
 8103864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	2201      	movs	r2, #1
 810386c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8103870:	687b      	ldr	r3, [r7, #4]
 8103872:	2201      	movs	r2, #1
 8103874:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8103878:	687b      	ldr	r3, [r7, #4]
 810387a:	2201      	movs	r2, #1
 810387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8103880:	2300      	movs	r3, #0
}
 8103882:	4618      	mov	r0, r3
 8103884:	3708      	adds	r7, #8
 8103886:	46bd      	mov	sp, r7
 8103888:	bd80      	pop	{r7, pc}

0810388a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810388a:	b480      	push	{r7}
 810388c:	b083      	sub	sp, #12
 810388e:	af00      	add	r7, sp, #0
 8103890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8103892:	bf00      	nop
 8103894:	370c      	adds	r7, #12
 8103896:	46bd      	mov	sp, r7
 8103898:	f85d 7b04 	ldr.w	r7, [sp], #4
 810389c:	4770      	bx	lr
	...

081038a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81038a0:	b480      	push	{r7}
 81038a2:	b085      	sub	sp, #20
 81038a4:	af00      	add	r7, sp, #0
 81038a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81038a8:	687b      	ldr	r3, [r7, #4]
 81038aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81038ae:	b2db      	uxtb	r3, r3
 81038b0:	2b01      	cmp	r3, #1
 81038b2:	d001      	beq.n	81038b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81038b4:	2301      	movs	r3, #1
 81038b6:	e021      	b.n	81038fc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81038b8:	687b      	ldr	r3, [r7, #4]
 81038ba:	2202      	movs	r2, #2
 81038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81038c0:	687b      	ldr	r3, [r7, #4]
 81038c2:	681b      	ldr	r3, [r3, #0]
 81038c4:	68da      	ldr	r2, [r3, #12]
 81038c6:	687b      	ldr	r3, [r7, #4]
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	f042 0201 	orr.w	r2, r2, #1
 81038ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81038d0:	687b      	ldr	r3, [r7, #4]
 81038d2:	681b      	ldr	r3, [r3, #0]
 81038d4:	689a      	ldr	r2, [r3, #8]
 81038d6:	4b0c      	ldr	r3, [pc, #48]	; (8103908 <HAL_TIM_Base_Start_IT+0x68>)
 81038d8:	4013      	ands	r3, r2
 81038da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81038dc:	68fb      	ldr	r3, [r7, #12]
 81038de:	2b06      	cmp	r3, #6
 81038e0:	d00b      	beq.n	81038fa <HAL_TIM_Base_Start_IT+0x5a>
 81038e2:	68fb      	ldr	r3, [r7, #12]
 81038e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81038e8:	d007      	beq.n	81038fa <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 81038ea:	687b      	ldr	r3, [r7, #4]
 81038ec:	681b      	ldr	r3, [r3, #0]
 81038ee:	681a      	ldr	r2, [r3, #0]
 81038f0:	687b      	ldr	r3, [r7, #4]
 81038f2:	681b      	ldr	r3, [r3, #0]
 81038f4:	f042 0201 	orr.w	r2, r2, #1
 81038f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 81038fa:	2300      	movs	r3, #0
}
 81038fc:	4618      	mov	r0, r3
 81038fe:	3714      	adds	r7, #20
 8103900:	46bd      	mov	sp, r7
 8103902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103906:	4770      	bx	lr
 8103908:	00010007 	.word	0x00010007

0810390c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810390c:	b580      	push	{r7, lr}
 810390e:	b082      	sub	sp, #8
 8103910:	af00      	add	r7, sp, #0
 8103912:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8103914:	687b      	ldr	r3, [r7, #4]
 8103916:	681b      	ldr	r3, [r3, #0]
 8103918:	691b      	ldr	r3, [r3, #16]
 810391a:	f003 0302 	and.w	r3, r3, #2
 810391e:	2b02      	cmp	r3, #2
 8103920:	d122      	bne.n	8103968 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8103922:	687b      	ldr	r3, [r7, #4]
 8103924:	681b      	ldr	r3, [r3, #0]
 8103926:	68db      	ldr	r3, [r3, #12]
 8103928:	f003 0302 	and.w	r3, r3, #2
 810392c:	2b02      	cmp	r3, #2
 810392e:	d11b      	bne.n	8103968 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8103930:	687b      	ldr	r3, [r7, #4]
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	f06f 0202 	mvn.w	r2, #2
 8103938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810393a:	687b      	ldr	r3, [r7, #4]
 810393c:	2201      	movs	r2, #1
 810393e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8103940:	687b      	ldr	r3, [r7, #4]
 8103942:	681b      	ldr	r3, [r3, #0]
 8103944:	699b      	ldr	r3, [r3, #24]
 8103946:	f003 0303 	and.w	r3, r3, #3
 810394a:	2b00      	cmp	r3, #0
 810394c:	d003      	beq.n	8103956 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810394e:	6878      	ldr	r0, [r7, #4]
 8103950:	f000 f905 	bl	8103b5e <HAL_TIM_IC_CaptureCallback>
 8103954:	e005      	b.n	8103962 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8103956:	6878      	ldr	r0, [r7, #4]
 8103958:	f000 f8f7 	bl	8103b4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810395c:	6878      	ldr	r0, [r7, #4]
 810395e:	f000 f908 	bl	8103b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103962:	687b      	ldr	r3, [r7, #4]
 8103964:	2200      	movs	r2, #0
 8103966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8103968:	687b      	ldr	r3, [r7, #4]
 810396a:	681b      	ldr	r3, [r3, #0]
 810396c:	691b      	ldr	r3, [r3, #16]
 810396e:	f003 0304 	and.w	r3, r3, #4
 8103972:	2b04      	cmp	r3, #4
 8103974:	d122      	bne.n	81039bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8103976:	687b      	ldr	r3, [r7, #4]
 8103978:	681b      	ldr	r3, [r3, #0]
 810397a:	68db      	ldr	r3, [r3, #12]
 810397c:	f003 0304 	and.w	r3, r3, #4
 8103980:	2b04      	cmp	r3, #4
 8103982:	d11b      	bne.n	81039bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8103984:	687b      	ldr	r3, [r7, #4]
 8103986:	681b      	ldr	r3, [r3, #0]
 8103988:	f06f 0204 	mvn.w	r2, #4
 810398c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810398e:	687b      	ldr	r3, [r7, #4]
 8103990:	2202      	movs	r2, #2
 8103992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	681b      	ldr	r3, [r3, #0]
 8103998:	699b      	ldr	r3, [r3, #24]
 810399a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810399e:	2b00      	cmp	r3, #0
 81039a0:	d003      	beq.n	81039aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81039a2:	6878      	ldr	r0, [r7, #4]
 81039a4:	f000 f8db 	bl	8103b5e <HAL_TIM_IC_CaptureCallback>
 81039a8:	e005      	b.n	81039b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81039aa:	6878      	ldr	r0, [r7, #4]
 81039ac:	f000 f8cd 	bl	8103b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81039b0:	6878      	ldr	r0, [r7, #4]
 81039b2:	f000 f8de 	bl	8103b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81039b6:	687b      	ldr	r3, [r7, #4]
 81039b8:	2200      	movs	r2, #0
 81039ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81039bc:	687b      	ldr	r3, [r7, #4]
 81039be:	681b      	ldr	r3, [r3, #0]
 81039c0:	691b      	ldr	r3, [r3, #16]
 81039c2:	f003 0308 	and.w	r3, r3, #8
 81039c6:	2b08      	cmp	r3, #8
 81039c8:	d122      	bne.n	8103a10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81039ca:	687b      	ldr	r3, [r7, #4]
 81039cc:	681b      	ldr	r3, [r3, #0]
 81039ce:	68db      	ldr	r3, [r3, #12]
 81039d0:	f003 0308 	and.w	r3, r3, #8
 81039d4:	2b08      	cmp	r3, #8
 81039d6:	d11b      	bne.n	8103a10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	681b      	ldr	r3, [r3, #0]
 81039dc:	f06f 0208 	mvn.w	r2, #8
 81039e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	2204      	movs	r2, #4
 81039e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81039e8:	687b      	ldr	r3, [r7, #4]
 81039ea:	681b      	ldr	r3, [r3, #0]
 81039ec:	69db      	ldr	r3, [r3, #28]
 81039ee:	f003 0303 	and.w	r3, r3, #3
 81039f2:	2b00      	cmp	r3, #0
 81039f4:	d003      	beq.n	81039fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81039f6:	6878      	ldr	r0, [r7, #4]
 81039f8:	f000 f8b1 	bl	8103b5e <HAL_TIM_IC_CaptureCallback>
 81039fc:	e005      	b.n	8103a0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81039fe:	6878      	ldr	r0, [r7, #4]
 8103a00:	f000 f8a3 	bl	8103b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103a04:	6878      	ldr	r0, [r7, #4]
 8103a06:	f000 f8b4 	bl	8103b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103a0a:	687b      	ldr	r3, [r7, #4]
 8103a0c:	2200      	movs	r2, #0
 8103a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8103a10:	687b      	ldr	r3, [r7, #4]
 8103a12:	681b      	ldr	r3, [r3, #0]
 8103a14:	691b      	ldr	r3, [r3, #16]
 8103a16:	f003 0310 	and.w	r3, r3, #16
 8103a1a:	2b10      	cmp	r3, #16
 8103a1c:	d122      	bne.n	8103a64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	681b      	ldr	r3, [r3, #0]
 8103a22:	68db      	ldr	r3, [r3, #12]
 8103a24:	f003 0310 	and.w	r3, r3, #16
 8103a28:	2b10      	cmp	r3, #16
 8103a2a:	d11b      	bne.n	8103a64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	f06f 0210 	mvn.w	r2, #16
 8103a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	2208      	movs	r2, #8
 8103a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8103a3c:	687b      	ldr	r3, [r7, #4]
 8103a3e:	681b      	ldr	r3, [r3, #0]
 8103a40:	69db      	ldr	r3, [r3, #28]
 8103a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103a46:	2b00      	cmp	r3, #0
 8103a48:	d003      	beq.n	8103a52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8103a4a:	6878      	ldr	r0, [r7, #4]
 8103a4c:	f000 f887 	bl	8103b5e <HAL_TIM_IC_CaptureCallback>
 8103a50:	e005      	b.n	8103a5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8103a52:	6878      	ldr	r0, [r7, #4]
 8103a54:	f000 f879 	bl	8103b4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8103a58:	6878      	ldr	r0, [r7, #4]
 8103a5a:	f000 f88a 	bl	8103b72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	2200      	movs	r2, #0
 8103a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8103a64:	687b      	ldr	r3, [r7, #4]
 8103a66:	681b      	ldr	r3, [r3, #0]
 8103a68:	691b      	ldr	r3, [r3, #16]
 8103a6a:	f003 0301 	and.w	r3, r3, #1
 8103a6e:	2b01      	cmp	r3, #1
 8103a70:	d10e      	bne.n	8103a90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	681b      	ldr	r3, [r3, #0]
 8103a76:	68db      	ldr	r3, [r3, #12]
 8103a78:	f003 0301 	and.w	r3, r3, #1
 8103a7c:	2b01      	cmp	r3, #1
 8103a7e:	d107      	bne.n	8103a90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	f06f 0201 	mvn.w	r2, #1
 8103a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8103a8a:	6878      	ldr	r0, [r7, #4]
 8103a8c:	f7fe fe74 	bl	8102778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8103a90:	687b      	ldr	r3, [r7, #4]
 8103a92:	681b      	ldr	r3, [r3, #0]
 8103a94:	691b      	ldr	r3, [r3, #16]
 8103a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103a9a:	2b80      	cmp	r3, #128	; 0x80
 8103a9c:	d10e      	bne.n	8103abc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	681b      	ldr	r3, [r3, #0]
 8103aa2:	68db      	ldr	r3, [r3, #12]
 8103aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103aa8:	2b80      	cmp	r3, #128	; 0x80
 8103aaa:	d107      	bne.n	8103abc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	681b      	ldr	r3, [r3, #0]
 8103ab0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8103ab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8103ab6:	6878      	ldr	r0, [r7, #4]
 8103ab8:	f000 f914 	bl	8103ce4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8103abc:	687b      	ldr	r3, [r7, #4]
 8103abe:	681b      	ldr	r3, [r3, #0]
 8103ac0:	691b      	ldr	r3, [r3, #16]
 8103ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103aca:	d10e      	bne.n	8103aea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8103acc:	687b      	ldr	r3, [r7, #4]
 8103ace:	681b      	ldr	r3, [r3, #0]
 8103ad0:	68db      	ldr	r3, [r3, #12]
 8103ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8103ad6:	2b80      	cmp	r3, #128	; 0x80
 8103ad8:	d107      	bne.n	8103aea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	681b      	ldr	r3, [r3, #0]
 8103ade:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8103ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8103ae4:	6878      	ldr	r0, [r7, #4]
 8103ae6:	f000 f907 	bl	8103cf8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8103aea:	687b      	ldr	r3, [r7, #4]
 8103aec:	681b      	ldr	r3, [r3, #0]
 8103aee:	691b      	ldr	r3, [r3, #16]
 8103af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103af4:	2b40      	cmp	r3, #64	; 0x40
 8103af6:	d10e      	bne.n	8103b16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8103af8:	687b      	ldr	r3, [r7, #4]
 8103afa:	681b      	ldr	r3, [r3, #0]
 8103afc:	68db      	ldr	r3, [r3, #12]
 8103afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8103b02:	2b40      	cmp	r3, #64	; 0x40
 8103b04:	d107      	bne.n	8103b16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8103b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8103b10:	6878      	ldr	r0, [r7, #4]
 8103b12:	f000 f838 	bl	8103b86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8103b16:	687b      	ldr	r3, [r7, #4]
 8103b18:	681b      	ldr	r3, [r3, #0]
 8103b1a:	691b      	ldr	r3, [r3, #16]
 8103b1c:	f003 0320 	and.w	r3, r3, #32
 8103b20:	2b20      	cmp	r3, #32
 8103b22:	d10e      	bne.n	8103b42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8103b24:	687b      	ldr	r3, [r7, #4]
 8103b26:	681b      	ldr	r3, [r3, #0]
 8103b28:	68db      	ldr	r3, [r3, #12]
 8103b2a:	f003 0320 	and.w	r3, r3, #32
 8103b2e:	2b20      	cmp	r3, #32
 8103b30:	d107      	bne.n	8103b42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8103b32:	687b      	ldr	r3, [r7, #4]
 8103b34:	681b      	ldr	r3, [r3, #0]
 8103b36:	f06f 0220 	mvn.w	r2, #32
 8103b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8103b3c:	6878      	ldr	r0, [r7, #4]
 8103b3e:	f000 f8c7 	bl	8103cd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8103b42:	bf00      	nop
 8103b44:	3708      	adds	r7, #8
 8103b46:	46bd      	mov	sp, r7
 8103b48:	bd80      	pop	{r7, pc}

08103b4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103b4a:	b480      	push	{r7}
 8103b4c:	b083      	sub	sp, #12
 8103b4e:	af00      	add	r7, sp, #0
 8103b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8103b52:	bf00      	nop
 8103b54:	370c      	adds	r7, #12
 8103b56:	46bd      	mov	sp, r7
 8103b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b5c:	4770      	bx	lr

08103b5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8103b5e:	b480      	push	{r7}
 8103b60:	b083      	sub	sp, #12
 8103b62:	af00      	add	r7, sp, #0
 8103b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8103b66:	bf00      	nop
 8103b68:	370c      	adds	r7, #12
 8103b6a:	46bd      	mov	sp, r7
 8103b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b70:	4770      	bx	lr

08103b72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8103b72:	b480      	push	{r7}
 8103b74:	b083      	sub	sp, #12
 8103b76:	af00      	add	r7, sp, #0
 8103b78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8103b7a:	bf00      	nop
 8103b7c:	370c      	adds	r7, #12
 8103b7e:	46bd      	mov	sp, r7
 8103b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b84:	4770      	bx	lr

08103b86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8103b86:	b480      	push	{r7}
 8103b88:	b083      	sub	sp, #12
 8103b8a:	af00      	add	r7, sp, #0
 8103b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8103b8e:	bf00      	nop
 8103b90:	370c      	adds	r7, #12
 8103b92:	46bd      	mov	sp, r7
 8103b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b98:	4770      	bx	lr
	...

08103b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8103b9c:	b480      	push	{r7}
 8103b9e:	b085      	sub	sp, #20
 8103ba0:	af00      	add	r7, sp, #0
 8103ba2:	6078      	str	r0, [r7, #4]
 8103ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8103bac:	687b      	ldr	r3, [r7, #4]
 8103bae:	4a40      	ldr	r2, [pc, #256]	; (8103cb0 <TIM_Base_SetConfig+0x114>)
 8103bb0:	4293      	cmp	r3, r2
 8103bb2:	d013      	beq.n	8103bdc <TIM_Base_SetConfig+0x40>
 8103bb4:	687b      	ldr	r3, [r7, #4]
 8103bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103bba:	d00f      	beq.n	8103bdc <TIM_Base_SetConfig+0x40>
 8103bbc:	687b      	ldr	r3, [r7, #4]
 8103bbe:	4a3d      	ldr	r2, [pc, #244]	; (8103cb4 <TIM_Base_SetConfig+0x118>)
 8103bc0:	4293      	cmp	r3, r2
 8103bc2:	d00b      	beq.n	8103bdc <TIM_Base_SetConfig+0x40>
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	4a3c      	ldr	r2, [pc, #240]	; (8103cb8 <TIM_Base_SetConfig+0x11c>)
 8103bc8:	4293      	cmp	r3, r2
 8103bca:	d007      	beq.n	8103bdc <TIM_Base_SetConfig+0x40>
 8103bcc:	687b      	ldr	r3, [r7, #4]
 8103bce:	4a3b      	ldr	r2, [pc, #236]	; (8103cbc <TIM_Base_SetConfig+0x120>)
 8103bd0:	4293      	cmp	r3, r2
 8103bd2:	d003      	beq.n	8103bdc <TIM_Base_SetConfig+0x40>
 8103bd4:	687b      	ldr	r3, [r7, #4]
 8103bd6:	4a3a      	ldr	r2, [pc, #232]	; (8103cc0 <TIM_Base_SetConfig+0x124>)
 8103bd8:	4293      	cmp	r3, r2
 8103bda:	d108      	bne.n	8103bee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8103bdc:	68fb      	ldr	r3, [r7, #12]
 8103bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8103be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8103be4:	683b      	ldr	r3, [r7, #0]
 8103be6:	685b      	ldr	r3, [r3, #4]
 8103be8:	68fa      	ldr	r2, [r7, #12]
 8103bea:	4313      	orrs	r3, r2
 8103bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	4a2f      	ldr	r2, [pc, #188]	; (8103cb0 <TIM_Base_SetConfig+0x114>)
 8103bf2:	4293      	cmp	r3, r2
 8103bf4:	d01f      	beq.n	8103c36 <TIM_Base_SetConfig+0x9a>
 8103bf6:	687b      	ldr	r3, [r7, #4]
 8103bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103bfc:	d01b      	beq.n	8103c36 <TIM_Base_SetConfig+0x9a>
 8103bfe:	687b      	ldr	r3, [r7, #4]
 8103c00:	4a2c      	ldr	r2, [pc, #176]	; (8103cb4 <TIM_Base_SetConfig+0x118>)
 8103c02:	4293      	cmp	r3, r2
 8103c04:	d017      	beq.n	8103c36 <TIM_Base_SetConfig+0x9a>
 8103c06:	687b      	ldr	r3, [r7, #4]
 8103c08:	4a2b      	ldr	r2, [pc, #172]	; (8103cb8 <TIM_Base_SetConfig+0x11c>)
 8103c0a:	4293      	cmp	r3, r2
 8103c0c:	d013      	beq.n	8103c36 <TIM_Base_SetConfig+0x9a>
 8103c0e:	687b      	ldr	r3, [r7, #4]
 8103c10:	4a2a      	ldr	r2, [pc, #168]	; (8103cbc <TIM_Base_SetConfig+0x120>)
 8103c12:	4293      	cmp	r3, r2
 8103c14:	d00f      	beq.n	8103c36 <TIM_Base_SetConfig+0x9a>
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	4a29      	ldr	r2, [pc, #164]	; (8103cc0 <TIM_Base_SetConfig+0x124>)
 8103c1a:	4293      	cmp	r3, r2
 8103c1c:	d00b      	beq.n	8103c36 <TIM_Base_SetConfig+0x9a>
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	4a28      	ldr	r2, [pc, #160]	; (8103cc4 <TIM_Base_SetConfig+0x128>)
 8103c22:	4293      	cmp	r3, r2
 8103c24:	d007      	beq.n	8103c36 <TIM_Base_SetConfig+0x9a>
 8103c26:	687b      	ldr	r3, [r7, #4]
 8103c28:	4a27      	ldr	r2, [pc, #156]	; (8103cc8 <TIM_Base_SetConfig+0x12c>)
 8103c2a:	4293      	cmp	r3, r2
 8103c2c:	d003      	beq.n	8103c36 <TIM_Base_SetConfig+0x9a>
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	4a26      	ldr	r2, [pc, #152]	; (8103ccc <TIM_Base_SetConfig+0x130>)
 8103c32:	4293      	cmp	r3, r2
 8103c34:	d108      	bne.n	8103c48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8103c36:	68fb      	ldr	r3, [r7, #12]
 8103c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8103c3e:	683b      	ldr	r3, [r7, #0]
 8103c40:	68db      	ldr	r3, [r3, #12]
 8103c42:	68fa      	ldr	r2, [r7, #12]
 8103c44:	4313      	orrs	r3, r2
 8103c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8103c48:	68fb      	ldr	r3, [r7, #12]
 8103c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8103c4e:	683b      	ldr	r3, [r7, #0]
 8103c50:	695b      	ldr	r3, [r3, #20]
 8103c52:	4313      	orrs	r3, r2
 8103c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	68fa      	ldr	r2, [r7, #12]
 8103c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8103c5c:	683b      	ldr	r3, [r7, #0]
 8103c5e:	689a      	ldr	r2, [r3, #8]
 8103c60:	687b      	ldr	r3, [r7, #4]
 8103c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8103c64:	683b      	ldr	r3, [r7, #0]
 8103c66:	681a      	ldr	r2, [r3, #0]
 8103c68:	687b      	ldr	r3, [r7, #4]
 8103c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	4a10      	ldr	r2, [pc, #64]	; (8103cb0 <TIM_Base_SetConfig+0x114>)
 8103c70:	4293      	cmp	r3, r2
 8103c72:	d00f      	beq.n	8103c94 <TIM_Base_SetConfig+0xf8>
 8103c74:	687b      	ldr	r3, [r7, #4]
 8103c76:	4a12      	ldr	r2, [pc, #72]	; (8103cc0 <TIM_Base_SetConfig+0x124>)
 8103c78:	4293      	cmp	r3, r2
 8103c7a:	d00b      	beq.n	8103c94 <TIM_Base_SetConfig+0xf8>
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	4a11      	ldr	r2, [pc, #68]	; (8103cc4 <TIM_Base_SetConfig+0x128>)
 8103c80:	4293      	cmp	r3, r2
 8103c82:	d007      	beq.n	8103c94 <TIM_Base_SetConfig+0xf8>
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	4a10      	ldr	r2, [pc, #64]	; (8103cc8 <TIM_Base_SetConfig+0x12c>)
 8103c88:	4293      	cmp	r3, r2
 8103c8a:	d003      	beq.n	8103c94 <TIM_Base_SetConfig+0xf8>
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	4a0f      	ldr	r2, [pc, #60]	; (8103ccc <TIM_Base_SetConfig+0x130>)
 8103c90:	4293      	cmp	r3, r2
 8103c92:	d103      	bne.n	8103c9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8103c94:	683b      	ldr	r3, [r7, #0]
 8103c96:	691a      	ldr	r2, [r3, #16]
 8103c98:	687b      	ldr	r3, [r7, #4]
 8103c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	2201      	movs	r2, #1
 8103ca0:	615a      	str	r2, [r3, #20]
}
 8103ca2:	bf00      	nop
 8103ca4:	3714      	adds	r7, #20
 8103ca6:	46bd      	mov	sp, r7
 8103ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cac:	4770      	bx	lr
 8103cae:	bf00      	nop
 8103cb0:	40010000 	.word	0x40010000
 8103cb4:	40000400 	.word	0x40000400
 8103cb8:	40000800 	.word	0x40000800
 8103cbc:	40000c00 	.word	0x40000c00
 8103cc0:	40010400 	.word	0x40010400
 8103cc4:	40014000 	.word	0x40014000
 8103cc8:	40014400 	.word	0x40014400
 8103ccc:	40014800 	.word	0x40014800

08103cd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8103cd0:	b480      	push	{r7}
 8103cd2:	b083      	sub	sp, #12
 8103cd4:	af00      	add	r7, sp, #0
 8103cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8103cd8:	bf00      	nop
 8103cda:	370c      	adds	r7, #12
 8103cdc:	46bd      	mov	sp, r7
 8103cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ce2:	4770      	bx	lr

08103ce4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8103ce4:	b480      	push	{r7}
 8103ce6:	b083      	sub	sp, #12
 8103ce8:	af00      	add	r7, sp, #0
 8103cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8103cec:	bf00      	nop
 8103cee:	370c      	adds	r7, #12
 8103cf0:	46bd      	mov	sp, r7
 8103cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103cf6:	4770      	bx	lr

08103cf8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8103cf8:	b480      	push	{r7}
 8103cfa:	b083      	sub	sp, #12
 8103cfc:	af00      	add	r7, sp, #0
 8103cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8103d00:	bf00      	nop
 8103d02:	370c      	adds	r7, #12
 8103d04:	46bd      	mov	sp, r7
 8103d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d0a:	4770      	bx	lr

08103d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8103d0c:	b480      	push	{r7}
 8103d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8103d10:	4b0b      	ldr	r3, [pc, #44]	; (8103d40 <SystemInit+0x34>)
 8103d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103d16:	4a0a      	ldr	r2, [pc, #40]	; (8103d40 <SystemInit+0x34>)
 8103d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8103d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8103d20:	4b07      	ldr	r3, [pc, #28]	; (8103d40 <SystemInit+0x34>)
 8103d22:	691b      	ldr	r3, [r3, #16]
 8103d24:	4a06      	ldr	r2, [pc, #24]	; (8103d40 <SystemInit+0x34>)
 8103d26:	f043 0310 	orr.w	r3, r3, #16
 8103d2a:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8103d2c:	4b04      	ldr	r3, [pc, #16]	; (8103d40 <SystemInit+0x34>)
 8103d2e:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8103d32:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8103d34:	bf00      	nop
 8103d36:	46bd      	mov	sp, r7
 8103d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d3c:	4770      	bx	lr
 8103d3e:	bf00      	nop
 8103d40:	e000ed00 	.word	0xe000ed00

08103d44 <__libc_init_array>:
 8103d44:	b570      	push	{r4, r5, r6, lr}
 8103d46:	4d0d      	ldr	r5, [pc, #52]	; (8103d7c <__libc_init_array+0x38>)
 8103d48:	4c0d      	ldr	r4, [pc, #52]	; (8103d80 <__libc_init_array+0x3c>)
 8103d4a:	1b64      	subs	r4, r4, r5
 8103d4c:	10a4      	asrs	r4, r4, #2
 8103d4e:	2600      	movs	r6, #0
 8103d50:	42a6      	cmp	r6, r4
 8103d52:	d109      	bne.n	8103d68 <__libc_init_array+0x24>
 8103d54:	4d0b      	ldr	r5, [pc, #44]	; (8103d84 <__libc_init_array+0x40>)
 8103d56:	4c0c      	ldr	r4, [pc, #48]	; (8103d88 <__libc_init_array+0x44>)
 8103d58:	f000 f818 	bl	8103d8c <_init>
 8103d5c:	1b64      	subs	r4, r4, r5
 8103d5e:	10a4      	asrs	r4, r4, #2
 8103d60:	2600      	movs	r6, #0
 8103d62:	42a6      	cmp	r6, r4
 8103d64:	d105      	bne.n	8103d72 <__libc_init_array+0x2e>
 8103d66:	bd70      	pop	{r4, r5, r6, pc}
 8103d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8103d6c:	4798      	blx	r3
 8103d6e:	3601      	adds	r6, #1
 8103d70:	e7ee      	b.n	8103d50 <__libc_init_array+0xc>
 8103d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8103d76:	4798      	blx	r3
 8103d78:	3601      	adds	r6, #1
 8103d7a:	e7f2      	b.n	8103d62 <__libc_init_array+0x1e>
 8103d7c:	08103e8c 	.word	0x08103e8c
 8103d80:	08103e8c 	.word	0x08103e8c
 8103d84:	08103e8c 	.word	0x08103e8c
 8103d88:	08103e90 	.word	0x08103e90

08103d8c <_init>:
 8103d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103d8e:	bf00      	nop
 8103d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103d92:	bc08      	pop	{r3}
 8103d94:	469e      	mov	lr, r3
 8103d96:	4770      	bx	lr

08103d98 <_fini>:
 8103d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8103d9a:	bf00      	nop
 8103d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8103d9e:	bc08      	pop	{r3}
 8103da0:	469e      	mov	lr, r3
 8103da2:	4770      	bx	lr
