
../../../../../../Cosmos/generated/build/system/CM4/bin/CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .program_default_CM7_section_init 00000000  20000c00  20000c00  00051874  2**0
                  CONTENTS
  2 .program_default_CM7_section_noInit 00000000  20000c00  20000c00  00051874  2**0
                  CONTENTS
  3 .program_blinking_led_CM7_section_init 00000008  20001000  08100298  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .program_blinking_led_CM7_section_noInit 00000000  20001008  20001008  00051874  2**0
                  CONTENTS
  5 .program_default_CM4_section_init 00000000  10000c00  10000c00  00051874  2**0
                  CONTENTS
  6 .program_default_CM4_section_noInit 00000000  10000c00  10000c00  00051874  2**0
                  CONTENTS
  7 .program_blinking_led_CM4_section_init 00000008  10001000  081002a0  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .program_blinking_led_CM4_section_noInit 00000000  10001008  10001008  00051874  2**0
                  CONTENTS
  9 .os_section_consts 00000800  38000000  081002a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .os_section_vars 00000400  38008000  08100aa8  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .os_section_funcs 00001ab4  08100ea8  08100ea8  00040ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .application_section_funcs 00000288  0810295c  0810295c  0004295c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text         00002964  08102be4  08102be4  00042be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       000000e8  08105548  08105548  00045548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .ARM.extab    00000024  08105630  08105630  00045630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .ARM          000000c8  08105654  08105654  00045654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .init_array   00000004  0810571c  0810571c  0004571c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 18 .fini_array   00000004  08105720  08105720  00045720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .data         00000074  10001800  08105724  00051800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .bss          00000088  10001874  08105798  00051874  2**2
                  ALLOC
 21 .ARM.attributes 0000002e  00000000  00000000  00051874  2**0
                  CONTENTS, READONLY
 22 .debug_line   00023bd2  00000000  00000000  000518a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_info   000368f5  00000000  00000000  00075474  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_abbrev 00007070  00000000  00000000  000abd69  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_aranges 000014c8  00000000  00000000  000b2de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00191084  00000000  00000000  000b42a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_ranges 00001080  00000000  00000000  00245330  2**3
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_macro  000438eb  00000000  00000000  002463b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .comment      00000079  00000000  00000000  00289c9b  2**0
                  CONTENTS, READONLY
 30 .debug_frame  000049dc  00000000  00000000  00289d14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .os_section_funcs:

08100ea8 <buffer_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_readArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8100ea8:	b580      	push	{r7, lr}
 8100eaa:	b098      	sub	sp, #96	; 0x60
 8100eac:	af00      	add	r7, sp, #0
 8100eae:	60f8      	str	r0, [r7, #12]
 8100eb0:	60b9      	str	r1, [r7, #8]
 8100eb2:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8100eb4:	f000 fbce 	bl	8101654 <os_getOsVar>
 8100eb8:	64f8      	str	r0, [r7, #76]	; 0x4c
  * @return CosmOS_CoreVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_CoreVariableType * CILcore_getCoreVar(void)
{
    uint32_t result;
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8100eba:	464b      	mov	r3, r9
 8100ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8100ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8100ec0:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8100ec2:	687a      	ldr	r2, [r7, #4]
 8100ec4:	68b9      	ldr	r1, [r7, #8]
 8100ec6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8100ec8:	f000 fb74 	bl	81015b4 <memoryProtection_isMemoryRegionProtected>
 8100ecc:	4603      	mov	r3, r0
 8100ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8100ed2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8100ed6:	2b00      	cmp	r3, #0
 8100ed8:	d003      	beq.n	8100ee2 <buffer_readArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8100eda:	2305      	movs	r3, #5
 8100edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8100ee0:	e06a      	b.n	8100fb8 <buffer_readArray+0x110>
 8100ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8100ee4:	623b      	str	r3, [r7, #32]
 8100ee6:	68fb      	ldr	r3, [r7, #12]
 8100ee8:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * os_getOsBufferVar(CosmOS_OsVariableType * osVar, BitWidthType bufferId)
{
    return (&(osVar->bufferVars[bufferId]));
 8100eea:	6a3b      	ldr	r3, [r7, #32]
 8100eec:	689a      	ldr	r2, [r3, #8]
 8100eee:	69fb      	ldr	r3, [r7, #28]
 8100ef0:	011b      	lsls	r3, r3, #4
 8100ef2:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * readPermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8100ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8100ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100ef8:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_PermissionsConfigurationType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_PermissionsConfigurationType * buffer_getBufferReadPermission(CosmOS_BufferVariableType * bufferVar)
{
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->readPermission);
 8100efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100efc:	681b      	ldr	r3, [r3, #0]
 8100efe:	68db      	ldr	r3, [r3, #12]

        readPermission = buffer_getBufferReadPermission( bufferVar );
 8100f00:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( readPermission, coreVar );
 8100f02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8100f04:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8100f06:	f000 fc41 	bl	810178c <permission_tryAccess>
 8100f0a:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8100f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100f0e:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8100f12:	d103      	bne.n	8100f1c <buffer_readArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8100f14:	2303      	movs	r3, #3
 8100f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8100f1a:	e04d      	b.n	8100fb8 <buffer_readArray+0x110>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100f1c:	b672      	cpsid	i
}
 8100f1e:	bf00      	nop
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void CILinterrupt_disableInterrupts(void)
{
		__disable_irq();
}
 8100f20:	bf00      	nop
 8100f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100f24:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 8100f26:	69bb      	ldr	r3, [r7, #24]
 8100f28:	681b      	ldr	r3, [r3, #0]
 8100f2a:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8100f2c:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 8100f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100f30:	2b00      	cmp	r3, #0
 8100f32:	d00b      	beq.n	8100f4c <buffer_readArray+0xa4>
 8100f34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100f36:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8100f38:	697b      	ldr	r3, [r7, #20]
 8100f3a:	681b      	ldr	r3, [r3, #0]
 8100f3c:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 8100f3e:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 8100f40:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8100f42:	f001 f82c 	bl	8101f9e <spinlock_trySpinlock>
 8100f46:	4603      	mov	r3, r0
 8100f48:	657b      	str	r3, [r7, #84]	; 0x54
 8100f4a:	e001      	b.n	8100f50 <buffer_readArray+0xa8>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8100f4c:	2302      	movs	r3, #2
 8100f4e:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8100f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8100f52:	2b02      	cmp	r3, #2
 8100f54:	d12a      	bne.n	8100fac <buffer_readArray+0x104>
 8100f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100f58:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getFullCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return (bufferVar->fullCells);
 8100f5a:	693b      	ldr	r3, [r7, #16]
 8100f5c:	68db      	ldr	r3, [r3, #12]
			{
				fullCellsNum = buffer_getFullCellsNum( bufferVar );
 8100f5e:	633b      	str	r3, [r7, #48]	; 0x30

				if ( fullCellsNum >= size)
 8100f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8100f62:	687b      	ldr	r3, [r7, #4]
 8100f64:	429a      	cmp	r2, r3
 8100f66:	d316      	bcc.n	8100f96 <buffer_readArray+0xee>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 8100f68:	68bb      	ldr	r3, [r7, #8]
 8100f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8100f6c:	2300      	movs	r3, #0
 8100f6e:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8100f70:	e00c      	b.n	8100f8c <buffer_readArray+0xe4>
					{
						bufferState = buffer_pull( bufferVar, ( userBuffer + userBufferIndex ) );
 8100f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8100f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8100f76:	4413      	add	r3, r2
 8100f78:	4619      	mov	r1, r3
 8100f7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8100f7c:	f000 f8b5 	bl	81010ea <buffer_pull>
 8100f80:	4603      	mov	r3, r0
 8100f82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 8100f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8100f88:	3301      	adds	r3, #1
 8100f8a:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 8100f8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	429a      	cmp	r2, r3
 8100f92:	d3ee      	bcc.n	8100f72 <buffer_readArray+0xca>
 8100f94:	e002      	b.n	8100f9c <buffer_readArray+0xf4>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM;
 8100f96:	2307      	movs	r3, #7
 8100f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 8100f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100f9e:	2b00      	cmp	r3, #0
 8100fa0:	d007      	beq.n	8100fb2 <buffer_readArray+0x10a>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 8100fa2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8100fa4:	f001 f853 	bl	810204e <spinlock_releaseSpinlock>
 8100fa8:	6578      	str	r0, [r7, #84]	; 0x54
 8100faa:	e002      	b.n	8100fb2 <buffer_readArray+0x10a>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 8100fac:	2304      	movs	r3, #4
 8100fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 8100fb2:	b662      	cpsie	i
}
 8100fb4:	bf00      	nop
}
 8100fb6:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8100fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8100fbc:	4618      	mov	r0, r3
 8100fbe:	3760      	adds	r7, #96	; 0x60
 8100fc0:	46bd      	mov	sp, r7
 8100fc2:	bd80      	pop	{r7, pc}

08100fc4 <buffer_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_writeArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8100fc4:	b580      	push	{r7, lr}
 8100fc6:	b098      	sub	sp, #96	; 0x60
 8100fc8:	af00      	add	r7, sp, #0
 8100fca:	60f8      	str	r0, [r7, #12]
 8100fcc:	60b9      	str	r1, [r7, #8]
 8100fce:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8100fd0:	f000 fb40 	bl	8101654 <os_getOsVar>
 8100fd4:	64f8      	str	r0, [r7, #76]	; 0x4c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8100fd6:	464b      	mov	r3, r9
 8100fd8:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8100fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8100fdc:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8100fde:	687a      	ldr	r2, [r7, #4]
 8100fe0:	68b9      	ldr	r1, [r7, #8]
 8100fe2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8100fe4:	f000 fae6 	bl	81015b4 <memoryProtection_isMemoryRegionProtected>
 8100fe8:	4603      	mov	r3, r0
 8100fea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8100fee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8100ff2:	2b00      	cmp	r3, #0
 8100ff4:	d003      	beq.n	8100ffe <buffer_writeArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8100ff6:	2305      	movs	r3, #5
 8100ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8100ffc:	e06f      	b.n	81010de <buffer_writeArray+0x11a>
 8100ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101000:	623b      	str	r3, [r7, #32]
 8101002:	68fb      	ldr	r3, [r7, #12]
 8101004:	61fb      	str	r3, [r7, #28]
 8101006:	6a3b      	ldr	r3, [r7, #32]
 8101008:	689a      	ldr	r2, [r3, #8]
 810100a:	69fb      	ldr	r3, [r7, #28]
 810100c:	011b      	lsls	r3, r3, #4
 810100e:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * writePermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8101010:	643b      	str	r3, [r7, #64]	; 0x40
 8101012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101014:	627b      	str	r3, [r7, #36]	; 0x24
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->writePermission);
 8101016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101018:	681b      	ldr	r3, [r3, #0]
 810101a:	691b      	ldr	r3, [r3, #16]

        writePermission = buffer_getBufferWritePermission( bufferVar );
 810101c:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( writePermission, coreVar );
 810101e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8101020:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8101022:	f000 fbb3 	bl	810178c <permission_tryAccess>
 8101026:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8101028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810102a:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 810102e:	d103      	bne.n	8101038 <buffer_writeArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8101030:	2303      	movs	r3, #3
 8101032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101036:	e052      	b.n	81010de <buffer_writeArray+0x11a>
  __ASM volatile ("cpsid i" : : : "memory");
 8101038:	b672      	cpsid	i
}
 810103a:	bf00      	nop
}
 810103c:	bf00      	nop
 810103e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101040:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 8101042:	69bb      	ldr	r3, [r7, #24]
 8101044:	681b      	ldr	r3, [r3, #0]
 8101046:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8101048:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 810104a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810104c:	2b00      	cmp	r3, #0
 810104e:	d00b      	beq.n	8101068 <buffer_writeArray+0xa4>
 8101050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101052:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8101054:	697b      	ldr	r3, [r7, #20]
 8101056:	681b      	ldr	r3, [r3, #0]
 8101058:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 810105a:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 810105c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 810105e:	f000 ff9e 	bl	8101f9e <spinlock_trySpinlock>
 8101062:	4603      	mov	r3, r0
 8101064:	657b      	str	r3, [r7, #84]	; 0x54
 8101066:	e001      	b.n	810106c <buffer_writeArray+0xa8>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8101068:	2302      	movs	r3, #2
 810106a:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 810106c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810106e:	2b02      	cmp	r3, #2
 8101070:	d12f      	bne.n	81010d2 <buffer_writeArray+0x10e>
 8101072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101074:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getEmptyCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return ((bufferVar->cfg->size) - (bufferVar->fullCells));
 8101076:	693b      	ldr	r3, [r7, #16]
 8101078:	681b      	ldr	r3, [r3, #0]
 810107a:	689a      	ldr	r2, [r3, #8]
 810107c:	693b      	ldr	r3, [r7, #16]
 810107e:	68db      	ldr	r3, [r3, #12]
 8101080:	1ad3      	subs	r3, r2, r3
			{
				emptyCellsNum = buffer_getEmptyCellsNum( bufferVar );
 8101082:	633b      	str	r3, [r7, #48]	; 0x30

				if ( emptyCellsNum >= size)
 8101084:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101086:	687b      	ldr	r3, [r7, #4]
 8101088:	429a      	cmp	r2, r3
 810108a:	d317      	bcc.n	81010bc <buffer_writeArray+0xf8>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 810108c:	68bb      	ldr	r3, [r7, #8]
 810108e:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8101090:	2300      	movs	r3, #0
 8101092:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8101094:	e00d      	b.n	81010b2 <buffer_writeArray+0xee>
					{
            	        bufferState = buffer_push( bufferVar, *( userBuffer + userBufferIndex ) );
 8101096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810109a:	4413      	add	r3, r2
 810109c:	781b      	ldrb	r3, [r3, #0]
 810109e:	4619      	mov	r1, r3
 81010a0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 81010a2:	f000 f85c 	bl	810115e <buffer_push>
 81010a6:	4603      	mov	r3, r0
 81010a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 81010ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81010ae:	3301      	adds	r3, #1
 81010b0:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 81010b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 81010b4:	687b      	ldr	r3, [r7, #4]
 81010b6:	429a      	cmp	r2, r3
 81010b8:	d3ed      	bcc.n	8101096 <buffer_writeArray+0xd2>
 81010ba:	e002      	b.n	81010c2 <buffer_writeArray+0xfe>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS;
 81010bc:	2306      	movs	r3, #6
 81010be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 81010c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81010c4:	2b00      	cmp	r3, #0
 81010c6:	d007      	beq.n	81010d8 <buffer_writeArray+0x114>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 81010c8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 81010ca:	f000 ffc0 	bl	810204e <spinlock_releaseSpinlock>
 81010ce:	6578      	str	r0, [r7, #84]	; 0x54
 81010d0:	e002      	b.n	81010d8 <buffer_writeArray+0x114>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 81010d2:	2304      	movs	r3, #4
 81010d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 81010d8:	b662      	cpsie	i
}
 81010da:	bf00      	nop
}
 81010dc:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 81010de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 81010e2:	4618      	mov	r0, r3
 81010e4:	3760      	adds	r7, #96	; 0x60
 81010e6:	46bd      	mov	sp, r7
 81010e8:	bd80      	pop	{r7, pc}

081010ea <buffer_pull>:
{
 81010ea:	b480      	push	{r7}
 81010ec:	b089      	sub	sp, #36	; 0x24
 81010ee:	af00      	add	r7, sp, #0
 81010f0:	6078      	str	r0, [r7, #4]
 81010f2:	6039      	str	r1, [r7, #0]
 81010f4:	687b      	ldr	r3, [r7, #4]
 81010f6:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 81010f8:	68bb      	ldr	r3, [r7, #8]
 81010fa:	681b      	ldr	r3, [r3, #0]
 81010fc:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 81010fe:	61fb      	str	r3, [r7, #28]
 8101100:	687b      	ldr	r3, [r7, #4]
 8101102:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8101104:	68fb      	ldr	r3, [r7, #12]
 8101106:	681b      	ldr	r3, [r3, #0]
 8101108:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 810110a:	61bb      	str	r3, [r7, #24]
    *data = *( osBuffer + bufferVar->tail );
 810110c:	687b      	ldr	r3, [r7, #4]
 810110e:	689b      	ldr	r3, [r3, #8]
 8101110:	69ba      	ldr	r2, [r7, #24]
 8101112:	4413      	add	r3, r2
 8101114:	781a      	ldrb	r2, [r3, #0]
 8101116:	683b      	ldr	r3, [r7, #0]
 8101118:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells--;
 810111a:	687b      	ldr	r3, [r7, #4]
 810111c:	68db      	ldr	r3, [r3, #12]
 810111e:	1e5a      	subs	r2, r3, #1
 8101120:	687b      	ldr	r3, [r7, #4]
 8101122:	60da      	str	r2, [r3, #12]
    bufferVar->tail = ( ( bufferVar->tail + 1 ) % bufferSize );
 8101124:	687b      	ldr	r3, [r7, #4]
 8101126:	689b      	ldr	r3, [r3, #8]
 8101128:	3301      	adds	r3, #1
 810112a:	69fa      	ldr	r2, [r7, #28]
 810112c:	fbb3 f2f2 	udiv	r2, r3, r2
 8101130:	69f9      	ldr	r1, [r7, #28]
 8101132:	fb01 f202 	mul.w	r2, r1, r2
 8101136:	1a9a      	subs	r2, r3, r2
 8101138:	687b      	ldr	r3, [r7, #4]
 810113a:	609a      	str	r2, [r3, #8]
 810113c:	687b      	ldr	r3, [r7, #4]
 810113e:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isEmpty(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT(bufferVar->fullCells) ? BUFFER_STATE_ENUM__EMPTY : BUFFER_STATE_ENUM__OK);
 8101140:	693b      	ldr	r3, [r7, #16]
 8101142:	68db      	ldr	r3, [r3, #12]
 8101144:	2b00      	cmp	r3, #0
 8101146:	bf0c      	ite	eq
 8101148:	2301      	moveq	r3, #1
 810114a:	2300      	movne	r3, #0
 810114c:	b2db      	uxtb	r3, r3
    bufferState = buffer_isEmpty( bufferVar );
 810114e:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8101150:	7dfb      	ldrb	r3, [r7, #23]
}
 8101152:	4618      	mov	r0, r3
 8101154:	3724      	adds	r7, #36	; 0x24
 8101156:	46bd      	mov	sp, r7
 8101158:	f85d 7b04 	ldr.w	r7, [sp], #4
 810115c:	4770      	bx	lr

0810115e <buffer_push>:
{
 810115e:	b480      	push	{r7}
 8101160:	b089      	sub	sp, #36	; 0x24
 8101162:	af00      	add	r7, sp, #0
 8101164:	6078      	str	r0, [r7, #4]
 8101166:	460b      	mov	r3, r1
 8101168:	70fb      	strb	r3, [r7, #3]
 810116a:	687b      	ldr	r3, [r7, #4]
 810116c:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 810116e:	68bb      	ldr	r3, [r7, #8]
 8101170:	681b      	ldr	r3, [r3, #0]
 8101172:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8101174:	61fb      	str	r3, [r7, #28]
 8101176:	687b      	ldr	r3, [r7, #4]
 8101178:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 810117a:	68fb      	ldr	r3, [r7, #12]
 810117c:	681b      	ldr	r3, [r3, #0]
 810117e:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8101180:	61bb      	str	r3, [r7, #24]
    *( osBuffer + bufferVar->head ) = data;
 8101182:	687b      	ldr	r3, [r7, #4]
 8101184:	685b      	ldr	r3, [r3, #4]
 8101186:	69ba      	ldr	r2, [r7, #24]
 8101188:	4413      	add	r3, r2
 810118a:	78fa      	ldrb	r2, [r7, #3]
 810118c:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells++;
 810118e:	687b      	ldr	r3, [r7, #4]
 8101190:	68db      	ldr	r3, [r3, #12]
 8101192:	1c5a      	adds	r2, r3, #1
 8101194:	687b      	ldr	r3, [r7, #4]
 8101196:	60da      	str	r2, [r3, #12]
    bufferVar->head = ( ( bufferVar->head + 1 ) % bufferSize );
 8101198:	687b      	ldr	r3, [r7, #4]
 810119a:	685b      	ldr	r3, [r3, #4]
 810119c:	3301      	adds	r3, #1
 810119e:	69fa      	ldr	r2, [r7, #28]
 81011a0:	fbb3 f2f2 	udiv	r2, r3, r2
 81011a4:	69f9      	ldr	r1, [r7, #28]
 81011a6:	fb01 f202 	mul.w	r2, r1, r2
 81011aa:	1a9a      	subs	r2, r3, r2
 81011ac:	687b      	ldr	r3, [r7, #4]
 81011ae:	605a      	str	r2, [r3, #4]
 81011b0:	687b      	ldr	r3, [r7, #4]
 81011b2:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isFull(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT((bufferVar->cfg->size) ^ (bufferVar->fullCells)) ? \
 81011b4:	693b      	ldr	r3, [r7, #16]
 81011b6:	681b      	ldr	r3, [r3, #0]
 81011b8:	689a      	ldr	r2, [r3, #8]
 81011ba:	693b      	ldr	r3, [r7, #16]
 81011bc:	68db      	ldr	r3, [r3, #12]
    BUFFER_STATE_ENUM__FULL : BUFFER_STATE_ENUM__OK);
 81011be:	429a      	cmp	r2, r3
 81011c0:	d101      	bne.n	81011c6 <buffer_push+0x68>
 81011c2:	2302      	movs	r3, #2
 81011c4:	e000      	b.n	81011c8 <buffer_push+0x6a>
 81011c6:	2300      	movs	r3, #0
    bufferState = buffer_isFull( bufferVar );
 81011c8:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 81011ca:	7dfb      	ldrb	r3, [r7, #23]
}
 81011cc:	4618      	mov	r0, r3
 81011ce:	3724      	adds	r7, #36	; 0x24
 81011d0:	46bd      	mov	sp, r7
 81011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011d6:	4770      	bx	lr

081011d8 <bufferDouble_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_readArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 81011d8:	b580      	push	{r7, lr}
 81011da:	b08e      	sub	sp, #56	; 0x38
 81011dc:	af00      	add	r7, sp, #0
 81011de:	60f8      	str	r0, [r7, #12]
 81011e0:	60b9      	str	r1, [r7, #8]
 81011e2:	607a      	str	r2, [r7, #4]
 81011e4:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 81011e6:	f000 fa35 	bl	8101654 <os_getOsVar>
 81011ea:	6338      	str	r0, [r7, #48]	; 0x30
 81011ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81011ee:	623b      	str	r3, [r7, #32]
 81011f0:	68fb      	ldr	r3, [r7, #12]
 81011f2:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferDoubleVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferDoubleVariableType * os_getOsBufferDoubleVar(CosmOS_OsVariableType * osVar, BitWidthType bufferDoubleId)
{
    return (&(osVar->bufferDoubleVars[bufferDoubleId]));
 81011f4:	6a3b      	ldr	r3, [r7, #32]
 81011f6:	68d9      	ldr	r1, [r3, #12]
 81011f8:	69fa      	ldr	r2, [r7, #28]
 81011fa:	4613      	mov	r3, r2
 81011fc:	005b      	lsls	r3, r3, #1
 81011fe:	4413      	add	r3, r2
 8101200:	009b      	lsls	r3, r3, #2
 8101202:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8101204:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8101206:	78fb      	ldrb	r3, [r7, #3]
 8101208:	2b00      	cmp	r3, #0
 810120a:	d002      	beq.n	8101212 <bufferDouble_readArray+0x3a>
 810120c:	2b01      	cmp	r3, #1
 810120e:	d00b      	beq.n	8101228 <bufferDouble_readArray+0x50>
 8101210:	e015      	b.n	810123e <bufferDouble_readArray+0x66>
 8101212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101214:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * bufferDouble_getBufferDoubleUserBuffer(CosmOS_BufferDoubleVariableType * bufferDoubleVar)
{
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8101216:	69bb      	ldr	r3, [r7, #24]
 8101218:	681b      	ldr	r3, [r3, #0]
 810121a:	681a      	ldr	r2, [r3, #0]
 810121c:	69bb      	ldr	r3, [r7, #24]
 810121e:	689b      	ldr	r3, [r3, #8]
 8101220:	009b      	lsls	r3, r3, #2
 8101222:	4413      	add	r3, r2
    {
        case BUFFER_DOUBLE_ACCESS_ENUM__USER :
        {
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8101224:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101226:	e00d      	b.n	8101244 <bufferDouble_readArray+0x6c>
 8101228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810122a:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 810122c:	697b      	ldr	r3, [r7, #20]
 810122e:	681b      	ldr	r3, [r3, #0]
 8101230:	681a      	ldr	r2, [r3, #0]
 8101232:	697b      	ldr	r3, [r7, #20]
 8101234:	685b      	ldr	r3, [r3, #4]
 8101236:	009b      	lsls	r3, r3, #2
 8101238:	4413      	add	r3, r2
        }

        case BUFFER_DOUBLE_ACCESS_ENUM__KERNEL :
        {
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 810123a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 810123c:	e002      	b.n	8101244 <bufferDouble_readArray+0x6c>
        }

        default :
        {
            os_kernelPanic();
 810123e:	f000 fa13 	bl	8101668 <os_kernelPanic>
            break;
 8101242:	bf00      	nop
 8101244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101246:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->id);
 8101248:	693b      	ldr	r3, [r7, #16]
 810124a:	681b      	ldr	r3, [r3, #0]
 810124c:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 810124e:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_readArray( bufferId, buffer, size );
 8101250:	687a      	ldr	r2, [r7, #4]
 8101252:	68b9      	ldr	r1, [r7, #8]
 8101254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8101256:	f7ff fe27 	bl	8100ea8 <buffer_readArray>
 810125a:	4603      	mov	r3, r0
 810125c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8101260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8101264:	4618      	mov	r0, r3
 8101266:	3738      	adds	r7, #56	; 0x38
 8101268:	46bd      	mov	sp, r7
 810126a:	bd80      	pop	{r7, pc}

0810126c <bufferDouble_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_writeArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 810126c:	b580      	push	{r7, lr}
 810126e:	b08e      	sub	sp, #56	; 0x38
 8101270:	af00      	add	r7, sp, #0
 8101272:	60f8      	str	r0, [r7, #12]
 8101274:	60b9      	str	r1, [r7, #8]
 8101276:	607a      	str	r2, [r7, #4]
 8101278:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 810127a:	f000 f9eb 	bl	8101654 <os_getOsVar>
 810127e:	6338      	str	r0, [r7, #48]	; 0x30
 8101280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101282:	623b      	str	r3, [r7, #32]
 8101284:	68fb      	ldr	r3, [r7, #12]
 8101286:	61fb      	str	r3, [r7, #28]
 8101288:	6a3b      	ldr	r3, [r7, #32]
 810128a:	68d9      	ldr	r1, [r3, #12]
 810128c:	69fa      	ldr	r2, [r7, #28]
 810128e:	4613      	mov	r3, r2
 8101290:	005b      	lsls	r3, r3, #1
 8101292:	4413      	add	r3, r2
 8101294:	009b      	lsls	r3, r3, #2
 8101296:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8101298:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 810129a:	78fb      	ldrb	r3, [r7, #3]
 810129c:	2b00      	cmp	r3, #0
 810129e:	d002      	beq.n	81012a6 <bufferDouble_writeArray+0x3a>
 81012a0:	2b01      	cmp	r3, #1
 81012a2:	d00b      	beq.n	81012bc <bufferDouble_writeArray+0x50>
 81012a4:	e015      	b.n	81012d2 <bufferDouble_writeArray+0x66>
 81012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81012a8:	61bb      	str	r3, [r7, #24]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 81012aa:	69bb      	ldr	r3, [r7, #24]
 81012ac:	681b      	ldr	r3, [r3, #0]
 81012ae:	681a      	ldr	r2, [r3, #0]
 81012b0:	69bb      	ldr	r3, [r7, #24]
 81012b2:	689b      	ldr	r3, [r3, #8]
 81012b4:	009b      	lsls	r3, r3, #2
 81012b6:	4413      	add	r3, r2
    {
        case BUFFER_DOUBLE_ACCESS_ENUM__USER :
        {
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 81012b8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 81012ba:	e00d      	b.n	81012d8 <bufferDouble_writeArray+0x6c>
 81012bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81012be:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 81012c0:	697b      	ldr	r3, [r7, #20]
 81012c2:	681b      	ldr	r3, [r3, #0]
 81012c4:	681a      	ldr	r2, [r3, #0]
 81012c6:	697b      	ldr	r3, [r7, #20]
 81012c8:	685b      	ldr	r3, [r3, #4]
 81012ca:	009b      	lsls	r3, r3, #2
 81012cc:	4413      	add	r3, r2
        }

        case BUFFER_DOUBLE_ACCESS_ENUM__KERNEL :
        {
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 81012ce:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 81012d0:	e002      	b.n	81012d8 <bufferDouble_writeArray+0x6c>
        }

        default :
        {
            os_kernelPanic();
 81012d2:	f000 f9c9 	bl	8101668 <os_kernelPanic>
            break;
 81012d6:	bf00      	nop
 81012d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81012da:	613b      	str	r3, [r7, #16]
 81012dc:	693b      	ldr	r3, [r7, #16]
 81012de:	681b      	ldr	r3, [r3, #0]
 81012e0:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 81012e2:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_writeArray( bufferId, buffer, size );
 81012e4:	687a      	ldr	r2, [r7, #4]
 81012e6:	68b9      	ldr	r1, [r7, #8]
 81012e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81012ea:	f7ff fe6b 	bl	8100fc4 <buffer_writeArray>
 81012ee:	4603      	mov	r3, r0
 81012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 81012f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81012f8:	4618      	mov	r0, r3
 81012fa:	3738      	adds	r7, #56	; 0x38
 81012fc:	46bd      	mov	sp, r7
 81012fe:	bd80      	pop	{r7, pc}

08101300 <core_getCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_CoreVariableType * core_getCoreVar(void)
{
 8101300:	b480      	push	{r7}
 8101302:	b083      	sub	sp, #12
 8101304:	af00      	add	r7, sp, #0
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101306:	464b      	mov	r3, r9
 8101308:	607b      	str	r3, [r7, #4]
    return (CosmOS_CoreVariableType *)result;
 810130a:	687b      	ldr	r3, [r7, #4]
    return CILcore_getCoreVar();
}
 810130c:	4618      	mov	r0, r3
 810130e:	370c      	adds	r7, #12
 8101310:	46bd      	mov	sp, r7
 8101312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101316:	4770      	bx	lr

08101318 <core_setSchedulableIntoCurrentContext>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void core_setSchedulableIntoCurrentContext(CosmOS_CoreVariableType * coreVar, CosmOS_SchedulableVariableType * schedulableVar)
{
 8101318:	b480      	push	{r7}
 810131a:	b08d      	sub	sp, #52	; 0x34
 810131c:	af00      	add	r7, sp, #0
 810131e:	6078      	str	r0, [r7, #4]
 8101320:	6039      	str	r1, [r7, #0]
 8101322:	683b      	ldr	r3, [r7, #0]
 8101324:	60fb      	str	r3, [r7, #12]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType schedulable_getProgramId(CosmOS_SchedulableVariableType * schedulable)
{
    return (schedulable->cfg->programId);
 8101326:	68fb      	ldr	r3, [r7, #12]
 8101328:	681b      	ldr	r3, [r3, #0]
 810132a:	699b      	ldr	r3, [r3, #24]
    BitWidthType programId;

    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulableVar );
 810132c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810132e:	687b      	ldr	r3, [r7, #4]
 8101330:	617b      	str	r3, [r7, #20]
 8101332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101334:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_ProgramVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ProgramVariableType * core_getCoreProgramVar(CosmOS_CoreVariableType * core, BitWidthType programIterator)
{
    return (&(core->programVars[programIterator]));
 8101336:	697b      	ldr	r3, [r7, #20]
 8101338:	68da      	ldr	r2, [r3, #12]
 810133a:	693b      	ldr	r3, [r7, #16]
 810133c:	011b      	lsls	r3, r3, #4
 810133e:	4413      	add	r3, r2
    programVar = core_getCoreProgramVar( coreVar, programId );
 8101340:	62bb      	str	r3, [r7, #40]	; 0x28
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	61fb      	str	r3, [r7, #28]
 8101346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101348:	61bb      	str	r3, [r7, #24]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreProgramInExecution(CosmOS_CoreVariableType * core, CosmOS_ProgramVariableType * programInExecutionParam)
{
    core->programInExecution = programInExecutionParam;
 810134a:	69fb      	ldr	r3, [r7, #28]
 810134c:	69ba      	ldr	r2, [r7, #24]
 810134e:	609a      	str	r2, [r3, #8]
}
 8101350:	bf00      	nop
 8101352:	687b      	ldr	r3, [r7, #4]
 8101354:	627b      	str	r3, [r7, #36]	; 0x24
 8101356:	683b      	ldr	r3, [r7, #0]
 8101358:	623b      	str	r3, [r7, #32]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreSchedulableInExecution(CosmOS_CoreVariableType * core, CosmOS_SchedulableVariableType * schedulableInExecutionParam)
{
    core->schedulableInExecution = schedulableInExecutionParam;
 810135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810135c:	6a3a      	ldr	r2, [r7, #32]
 810135e:	605a      	str	r2, [r3, #4]
}
 8101360:	bf00      	nop

    core_setCoreProgramInExecution( coreVar, programVar );
    core_setCoreSchedulableInExecution( coreVar, schedulableVar );
}
 8101362:	bf00      	nop
 8101364:	3734      	adds	r7, #52	; 0x34
 8101366:	46bd      	mov	sp, r7
 8101368:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136c:	4770      	bx	lr

0810136e <coreSync_getBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_getBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 810136e:	b580      	push	{r7, lr}
 8101370:	b096      	sub	sp, #88	; 0x58
 8101372:	af00      	add	r7, sp, #0
 8101374:	6078      	str	r0, [r7, #4]
 8101376:	6039      	str	r1, [r7, #0]
 8101378:	687b      	ldr	r3, [r7, #4]
 810137a:	62bb      	str	r3, [r7, #40]	; 0x28
 810137c:	683b      	ldr	r3, [r7, #0]
 810137e:	627b      	str	r3, [r7, #36]	; 0x24
    return (&(core->barrierVars[barrierId]));
 8101380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101382:	695a      	ldr	r2, [r3, #20]
 8101384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101386:	009b      	lsls	r3, r3, #2
 8101388:	4413      	add	r3, r2
    CosmOS_BarrierVariableType * barrierVar;

    volatile CosmOS_BarrierStateType barrierState;


    barrierVar = core_getBarrierVar( coreVar, barrierId );
 810138a:	653b      	str	r3, [r7, #80]	; 0x50
 810138c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810138e:	633b      	str	r3, [r7, #48]	; 0x30
 8101390:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8101394:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void coreSync_setBarrierState(CosmOS_BarrierVariableType * barrier, CosmOS_BarrierStateType barrierStateParam)
{
    barrier->barrierState = barrierStateParam;
 8101396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810139a:	601a      	str	r2, [r3, #0]
}
 810139c:	bf00      	nop
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__REACHED);

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    osVar = os_getOsVar();
 810139e:	f000 f959 	bl	8101654 <os_getOsVar>
 81013a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 81013a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81013a6:	637b      	str	r3, [r7, #52]	; 0x34
    return (osVar->cfg->numberOfCores);
 81013a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81013aa:	681b      	ldr	r3, [r3, #0]
 81013ac:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 81013ae:	64bb      	str	r3, [r7, #72]	; 0x48

    numberOfSynchronizedCores = 0;
 81013b0:	2300      	movs	r3, #0
 81013b2:	657b      	str	r3, [r7, #84]	; 0x54
 81013b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81013b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81013b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81013ba:	63bb      	str	r3, [r7, #56]	; 0x38
    return (&(osVar->coreVars[coreId]));
 81013bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81013be:	685a      	ldr	r2, [r3, #4]
 81013c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81013c2:	015b      	lsls	r3, r3, #5
 81013c4:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, numberOfSynchronizedCores );
 81013c6:	607b      	str	r3, [r7, #4]
 81013c8:	687b      	ldr	r3, [r7, #4]
 81013ca:	647b      	str	r3, [r7, #68]	; 0x44
 81013cc:	683b      	ldr	r3, [r7, #0]
 81013ce:	643b      	str	r3, [r7, #64]	; 0x40
 81013d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81013d2:	695a      	ldr	r2, [r3, #20]
 81013d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81013d6:	009b      	lsls	r3, r3, #2
 81013d8:	4413      	add	r3, r2
    barrierVar = core_getBarrierVar( coreVar, barrierId );
 81013da:	653b      	str	r3, [r7, #80]	; 0x50

    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 81013dc:	e026      	b.n	810142c <coreSync_getBarrier+0xbe>
 81013de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81013e0:	623b      	str	r3, [r7, #32]
    return (barrier->barrierState);
 81013e2:	6a3b      	ldr	r3, [r7, #32]
 81013e4:	681b      	ldr	r3, [r3, #0]
    {
        barrierState = coreSync_getBarrierState( barrierVar );
 81013e6:	60fb      	str	r3, [r7, #12]

        if ( ( barrierState IS_EQUAL_TO BARRIER_STATE_ENUM__REACHED ) )
 81013e8:	68fb      	ldr	r3, [r7, #12]
 81013ea:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 81013ee:	d11d      	bne.n	810142c <coreSync_getBarrier+0xbe>
        {
            numberOfSynchronizedCores++;
 81013f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81013f2:	3301      	adds	r3, #1
 81013f4:	657b      	str	r3, [r7, #84]	; 0x54

            coreVar = os_getCoreVar( osVar, ( numberOfSynchronizedCores % numberOfCores ) );
 81013f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81013f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81013fa:	fbb3 f2f2 	udiv	r2, r3, r2
 81013fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8101400:	fb01 f202 	mul.w	r2, r1, r2
 8101404:	1a9b      	subs	r3, r3, r2
 8101406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8101408:	617a      	str	r2, [r7, #20]
 810140a:	613b      	str	r3, [r7, #16]
 810140c:	697b      	ldr	r3, [r7, #20]
 810140e:	685a      	ldr	r2, [r3, #4]
 8101410:	693b      	ldr	r3, [r7, #16]
 8101412:	015b      	lsls	r3, r3, #5
 8101414:	4413      	add	r3, r2
 8101416:	607b      	str	r3, [r7, #4]
 8101418:	687b      	ldr	r3, [r7, #4]
 810141a:	61fb      	str	r3, [r7, #28]
 810141c:	683b      	ldr	r3, [r7, #0]
 810141e:	61bb      	str	r3, [r7, #24]
 8101420:	69fb      	ldr	r3, [r7, #28]
 8101422:	695a      	ldr	r2, [r3, #20]
 8101424:	69bb      	ldr	r3, [r7, #24]
 8101426:	009b      	lsls	r3, r3, #2
 8101428:	4413      	add	r3, r2
            barrierVar = core_getBarrierVar( coreVar, barrierId );
 810142a:	653b      	str	r3, [r7, #80]	; 0x50
    while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 810142c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 810142e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101430:	429a      	cmp	r2, r3
 8101432:	d1d4      	bne.n	81013de <coreSync_getBarrier+0x70>
        }
    }
}
 8101434:	bf00      	nop
 8101436:	bf00      	nop
 8101438:	3758      	adds	r7, #88	; 0x58
 810143a:	46bd      	mov	sp, r7
 810143c:	bd80      	pop	{r7, pc}

0810143e <coreSync_reactivateBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_reactivateBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 810143e:	b580      	push	{r7, lr}
 8101440:	b088      	sub	sp, #32
 8101442:	af00      	add	r7, sp, #0
 8101444:	6078      	str	r0, [r7, #4]
 8101446:	6039      	str	r1, [r7, #0]
    CosmOS_BarrierVariableType * barrierVar;

    cosmosAssert( barrierId IS_EQUAL_TO SCHEDULERS_SYNC_ID );
 8101448:	683b      	ldr	r3, [r7, #0]
 810144a:	2b03      	cmp	r3, #3
 810144c:	bf0c      	ite	eq
 810144e:	2301      	moveq	r3, #1
 8101450:	2300      	movne	r3, #0
 8101452:	b2db      	uxtb	r3, r3
 8101454:	60bb      	str	r3, [r7, #8]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void cosmosAssert(BitWidthType result)
{
    if ( IS_NOT( result ) )
 8101456:	68bb      	ldr	r3, [r7, #8]
 8101458:	2b00      	cmp	r3, #0
 810145a:	d101      	bne.n	8101460 <coreSync_reactivateBarrier+0x22>
		{
        os_kernelPanic();
 810145c:	f000 f904 	bl	8101668 <os_kernelPanic>
    }
}
 8101460:	bf00      	nop
 8101462:	687b      	ldr	r3, [r7, #4]
 8101464:	613b      	str	r3, [r7, #16]
 8101466:	683b      	ldr	r3, [r7, #0]
 8101468:	60fb      	str	r3, [r7, #12]
 810146a:	693b      	ldr	r3, [r7, #16]
 810146c:	695a      	ldr	r2, [r3, #20]
 810146e:	68fb      	ldr	r3, [r7, #12]
 8101470:	009b      	lsls	r3, r3, #2
 8101472:	4413      	add	r3, r2

    barrierVar = core_getBarrierVar( coreVar, barrierId );
 8101474:	61fb      	str	r3, [r7, #28]
 8101476:	69fb      	ldr	r3, [r7, #28]
 8101478:	61bb      	str	r3, [r7, #24]
 810147a:	2300      	movs	r3, #0
 810147c:	617b      	str	r3, [r7, #20]
    barrier->barrierState = barrierStateParam;
 810147e:	69bb      	ldr	r3, [r7, #24]
 8101480:	697a      	ldr	r2, [r7, #20]
 8101482:	601a      	str	r2, [r3, #0]
}
 8101484:	bf00      	nop
    coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__ACTIVATED );

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */
}
 8101486:	bf00      	nop
 8101488:	3720      	adds	r7, #32
 810148a:	46bd      	mov	sp, r7
 810148c:	bd80      	pop	{r7, pc}

0810148e <deviceIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void deviceIO_togglePin(BitWidthType id, void *GPIOx, BitWidthType GPIO_Pin)
{
 810148e:	b580      	push	{r7, lr}
 8101490:	b084      	sub	sp, #16
 8101492:	af00      	add	r7, sp, #0
 8101494:	60f8      	str	r0, [r7, #12]
 8101496:	60b9      	str	r1, [r7, #8]
 8101498:	607a      	str	r2, [r7, #4]
    CILGPIO_togglePin( GPIOx, GPIO_Pin );
 810149a:	6879      	ldr	r1, [r7, #4]
 810149c:	68b8      	ldr	r0, [r7, #8]
 810149e:	f000 ff4f 	bl	8102340 <CILGPIO_togglePin>
}
 81014a2:	bf00      	nop
 81014a4:	3710      	adds	r7, #16
 81014a6:	46bd      	mov	sp, r7
 81014a8:	bd80      	pop	{r7, pc}

081014aa <memoryManager_sbrk>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION AddressType memoryManager_sbrk(int incr)
{
 81014aa:	b580      	push	{r7, lr}
 81014ac:	b08c      	sub	sp, #48	; 0x30
 81014ae:	af00      	add	r7, sp, #0
 81014b0:	6078      	str	r0, [r7, #4]
				priorHeapAddress;

    CosmOS_CoreVariableType * coreVar;
	CosmOS_ProgramVariableType * programVar;

    coreVar = core_getCoreVar();
 81014b2:	f7ff ff25 	bl	8101300 <core_getCoreVar>
 81014b6:	62f8      	str	r0, [r7, #44]	; 0x2c
 81014b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81014ba:	613b      	str	r3, [r7, #16]
    return (core->programInExecution);
 81014bc:	693b      	ldr	r3, [r7, #16]
 81014be:	689b      	ldr	r3, [r3, #8]

    programVar = core_getCoreProgramInExecution( coreVar );
 81014c0:	62bb      	str	r3, [r7, #40]	; 0x28
 81014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81014c4:	617b      	str	r3, [r7, #20]
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType program_getProgramCurrentHeapAddress(CosmOS_ProgramVariableType * program)
{
    return (program->currentHeapAddress);
 81014c6:	697b      	ldr	r3, [r7, #20]
 81014c8:	68db      	ldr	r3, [r3, #12]

	currentHeapAddress = program_getProgramCurrentHeapAddress( programVar );
 81014ca:	627b      	str	r3, [r7, #36]	; 0x24
 81014cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81014ce:	61bb      	str	r3, [r7, #24]
    return (program->cfg->programHeapHighAddress);
 81014d0:	69bb      	ldr	r3, [r7, #24]
 81014d2:	681b      	ldr	r3, [r3, #0]
 81014d4:	6a1b      	ldr	r3, [r3, #32]
	heapHighAddress = program_getProgramHeapHighAddress( programVar );
 81014d6:	623b      	str	r3, [r7, #32]

	priorHeapAddress = currentHeapAddress;
 81014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81014da:	61fb      	str	r3, [r7, #28]
	if (currentHeapAddress + incr > heapHighAddress )
 81014dc:	687a      	ldr	r2, [r7, #4]
 81014de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81014e0:	4413      	add	r3, r2
 81014e2:	6a3a      	ldr	r2, [r7, #32]
 81014e4:	429a      	cmp	r2, r3
 81014e6:	d202      	bcs.n	81014ee <memoryManager_sbrk+0x44>
	{
		//ERROR HANDLER NEEDS TO BE INVOKED
		return (AddressType) -1;
 81014e8:	f04f 33ff 	mov.w	r3, #4294967295
 81014ec:	e00c      	b.n	8101508 <memoryManager_sbrk+0x5e>
	}

	currentHeapAddress += incr;
 81014ee:	687b      	ldr	r3, [r7, #4]
 81014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81014f2:	4413      	add	r3, r2
 81014f4:	627b      	str	r3, [r7, #36]	; 0x24
 81014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81014f8:	60fb      	str	r3, [r7, #12]
 81014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81014fc:	60bb      	str	r3, [r7, #8]
	*
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void program_setProgramCurrentHeapAddress(CosmOS_ProgramVariableType * program, AddressType currentHeapAddressParam)
{
    program->currentHeapAddress = currentHeapAddressParam;
 81014fe:	68fb      	ldr	r3, [r7, #12]
 8101500:	68ba      	ldr	r2, [r7, #8]
 8101502:	60da      	str	r2, [r3, #12]
}
 8101504:	bf00      	nop
	program_setProgramCurrentHeapAddress( programVar, currentHeapAddress );

	return priorHeapAddress;
 8101506:	69fb      	ldr	r3, [r7, #28]
}
 8101508:	4618      	mov	r0, r3
 810150a:	3730      	adds	r7, #48	; 0x30
 810150c:	46bd      	mov	sp, r7
 810150e:	bd80      	pop	{r7, pc}

08101510 <memoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_init(void)
{
 8101510:	b580      	push	{r7, lr}
 8101512:	af00      	add	r7, sp, #0
    CILmemoryProtection_init();
 8101514:	f000 ff24 	bl	8102360 <CILmemoryProtection_init>
}
 8101518:	bf00      	nop
 810151a:	bd80      	pop	{r7, pc}

0810151c <memoryProtection_setMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_setMemoryProtection(CosmOS_CoreVariableType * core,CosmOS_SchedulableVariableType  * schedulable)
{
 810151c:	b580      	push	{r7, lr}
 810151e:	b096      	sub	sp, #88	; 0x58
 8101520:	af00      	add	r7, sp, #0
 8101522:	6078      	str	r0, [r7, #4]
 8101524:	6039      	str	r1, [r7, #0]
 8101526:	683b      	ldr	r3, [r7, #0]
 8101528:	60fb      	str	r3, [r7, #12]
 810152a:	68fb      	ldr	r3, [r7, #12]
 810152c:	681b      	ldr	r3, [r3, #0]
 810152e:	699b      	ldr	r3, [r3, #24]

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulable );
 8101530:	657b      	str	r3, [r7, #84]	; 0x54
 8101532:	687b      	ldr	r3, [r7, #4]
 8101534:	617b      	str	r3, [r7, #20]
 8101536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101538:	613b      	str	r3, [r7, #16]
    return (&(core->programVars[programIterator]));
 810153a:	697b      	ldr	r3, [r7, #20]
 810153c:	68da      	ldr	r2, [r3, #12]
 810153e:	693b      	ldr	r3, [r7, #16]
 8101540:	011b      	lsls	r3, r3, #4
 8101542:	4413      	add	r3, r2
    programVar = core_getCoreProgramVar( core, programId );
 8101544:	653b      	str	r3, [r7, #80]	; 0x50
 8101546:	683b      	ldr	r3, [r7, #0]
 8101548:	61bb      	str	r3, [r7, #24]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 810154a:	69bb      	ldr	r3, [r7, #24]
 810154c:	681b      	ldr	r3, [r3, #0]
 810154e:	681b      	ldr	r3, [r3, #0]

    stack = schedulable_getStack( schedulable );
 8101550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101558:	62bb      	str	r3, [r7, #40]	; 0x28
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackLowAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackLowAddress);
 810155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810155c:	685b      	ldr	r3, [r3, #4]
    lowAddress = stack_getStackLowAddress( stack );
 810155e:	627b      	str	r3, [r7, #36]	; 0x24
 8101560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101562:	623b      	str	r3, [r7, #32]
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackHighAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackHighAddress);
 8101564:	6a3b      	ldr	r3, [r7, #32]
 8101566:	689b      	ldr	r3, [r3, #8]
    highAddress = stack_getStackHighAddress( stack );
 8101568:	61fb      	str	r3, [r7, #28]
    CILmemoryProtection_setStackOverflowProtection( lowAddress, highAddress );
 810156a:	69f9      	ldr	r1, [r7, #28]
 810156c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810156e:	f000 fff7 	bl	8102560 <CILmemoryProtection_setStackOverflowProtection>
}
 8101572:	bf00      	nop
 8101574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101576:	64bb      	str	r3, [r7, #72]	; 0x48
 8101578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810157a:	647b      	str	r3, [r7, #68]	; 0x44
    return (program->cfg->programMemorySize);
 810157c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810157e:	681b      	ldr	r3, [r3, #0]
 8101580:	68db      	ldr	r3, [r3, #12]
    size = program_getProgramMemorySize( program );
 8101582:	643b      	str	r3, [r7, #64]	; 0x40
 8101584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101586:	63fb      	str	r3, [r7, #60]	; 0x3c
    return (program->cfg->programMemoryLowAddress);
 8101588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810158a:	681b      	ldr	r3, [r3, #0]
 810158c:	691b      	ldr	r3, [r3, #16]
    lowAddress = program_getProgramMemoryLowAddress( program );
 810158e:	63bb      	str	r3, [r7, #56]	; 0x38
 8101590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101592:	637b      	str	r3, [r7, #52]	; 0x34
    return (program->cfg->programMemoryHighAddress);
 8101594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101596:	681b      	ldr	r3, [r3, #0]
 8101598:	695b      	ldr	r3, [r3, #20]
    highAddress = program_getProgramMemoryHighAddress( program );
 810159a:	633b      	str	r3, [r7, #48]	; 0x30
    if ( size )
 810159c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810159e:	2b00      	cmp	r3, #0
 81015a0:	d003      	beq.n	81015aa <memoryProtection_setMemoryProtection+0x8e>
        CILmemoryProtection_setProgramMemoryProtection( lowAddress, highAddress );
 81015a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81015a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 81015a6:	f001 f837 	bl	8102618 <CILmemoryProtection_setProgramMemoryProtection>
}
 81015aa:	bf00      	nop

    memoryProtection_setStackOverflowProtection( stack );
    memoryProtection_setProgramMemoryProtection( programVar );
}
 81015ac:	bf00      	nop
 81015ae:	3758      	adds	r7, #88	; 0x58
 81015b0:	46bd      	mov	sp, r7
 81015b2:	bd80      	pop	{r7, pc}

081015b4 <memoryProtection_isMemoryRegionProtected>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BooleanType memoryProtection_isMemoryRegionProtected(CosmOS_CoreVariableType * core, void * regionLowAddressPointer, BitWidthType size)
{
 81015b4:	b480      	push	{r7}
 81015b6:	b097      	sub	sp, #92	; 0x5c
 81015b8:	af00      	add	r7, sp, #0
 81015ba:	60f8      	str	r0, [r7, #12]
 81015bc:	60b9      	str	r1, [r7, #8]
 81015be:	607a      	str	r2, [r7, #4]
				programLowAddress,
				programHighAddress,
				regionLowAddress,
				regionHighAddress;

	CosmOS_BooleanType isMemoryRegionProtected = True;
 81015c0:	2301      	movs	r3, #1
 81015c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;
	CosmOS_SchedulableVariableType * schedulable;

	regionLowAddress = (AddressType)regionLowAddressPointer;
 81015c6:	68bb      	ldr	r3, [r7, #8]
 81015c8:	653b      	str	r3, [r7, #80]	; 0x50
 81015ca:	68fb      	ldr	r3, [r7, #12]
 81015cc:	617b      	str	r3, [r7, #20]
    return (core->programInExecution);
 81015ce:	697b      	ldr	r3, [r7, #20]
 81015d0:	689b      	ldr	r3, [r3, #8]

    programVar = core_getCoreProgramInExecution( core );
 81015d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 81015d4:	68fb      	ldr	r3, [r7, #12]
 81015d6:	61bb      	str	r3, [r7, #24]
    return (core->schedulableInExecution);
 81015d8:	69bb      	ldr	r3, [r7, #24]
 81015da:	685b      	ldr	r3, [r3, #4]
	schedulable = core_getCoreSchedulableInCurrentContext( core );
 81015dc:	64bb      	str	r3, [r7, #72]	; 0x48
 81015de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81015e0:	61fb      	str	r3, [r7, #28]
 81015e2:	69fb      	ldr	r3, [r7, #28]
 81015e4:	681b      	ldr	r3, [r3, #0]
 81015e6:	681b      	ldr	r3, [r3, #0]
    stack = schedulable_getStack( schedulable );
 81015e8:	647b      	str	r3, [r7, #68]	; 0x44
 81015ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81015ec:	623b      	str	r3, [r7, #32]
    return (stack->stackLowAddress);
 81015ee:	6a3b      	ldr	r3, [r7, #32]
 81015f0:	685b      	ldr	r3, [r3, #4]

	stackLowAddress = stack_getStackLowAddress( stack );
 81015f2:	643b      	str	r3, [r7, #64]	; 0x40
 81015f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81015f6:	627b      	str	r3, [r7, #36]	; 0x24
    return (stack->stackHighAddress);
 81015f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81015fa:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 81015fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 81015fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101600:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->programMemoryLowAddress);
 8101602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101604:	681b      	ldr	r3, [r3, #0]
 8101606:	691b      	ldr	r3, [r3, #16]

    programLowAddress = program_getProgramMemoryLowAddress( programVar );
 8101608:	63bb      	str	r3, [r7, #56]	; 0x38
 810160a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810160c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (program->cfg->programMemoryHighAddress);
 810160e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101610:	681b      	ldr	r3, [r3, #0]
 8101612:	695b      	ldr	r3, [r3, #20]
    programHighAddress = program_getProgramMemoryHighAddress( programVar );
 8101614:	637b      	str	r3, [r7, #52]	; 0x34

	regionHighAddress = regionLowAddress + (AddressType)size;
 8101616:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	4413      	add	r3, r2
 810161c:	633b      	str	r3, [r7, #48]	; 0x30

	if (((regionHighAddress < stackHighAddress) && (regionLowAddress > stackLowAddress)) || \
 810161e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101622:	429a      	cmp	r2, r3
 8101624:	d203      	bcs.n	810162e <memoryProtection_isMemoryRegionProtected+0x7a>
 8101626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810162a:	429a      	cmp	r2, r3
 810162c:	d807      	bhi.n	810163e <memoryProtection_isMemoryRegionProtected+0x8a>
 810162e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101632:	429a      	cmp	r2, r3
 8101634:	d206      	bcs.n	8101644 <memoryProtection_isMemoryRegionProtected+0x90>
		((regionHighAddress < programHighAddress) && (regionLowAddress > programLowAddress)))
 8101636:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810163a:	429a      	cmp	r2, r3
 810163c:	d902      	bls.n	8101644 <memoryProtection_isMemoryRegionProtected+0x90>
	{
		isMemoryRegionProtected = False;
 810163e:	2300      	movs	r3, #0
 8101640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	return isMemoryRegionProtected;
 8101644:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8101648:	4618      	mov	r0, r3
 810164a:	375c      	adds	r7, #92	; 0x5c
 810164c:	46bd      	mov	sp, r7
 810164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101652:	4770      	bx	lr

08101654 <os_getOsVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_OsVariableType * os_getOsVar(void)
{
 8101654:	b480      	push	{r7}
 8101656:	af00      	add	r7, sp, #0
    return &OsVar;
 8101658:	4b02      	ldr	r3, [pc, #8]	; (8101664 <os_getOsVar+0x10>)
}
 810165a:	4618      	mov	r0, r3
 810165c:	46bd      	mov	sp, r7
 810165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101662:	4770      	bx	lr
 8101664:	380080fc 	.word	0x380080fc

08101668 <os_kernelPanic>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_kernelPanic(void)
{
 8101668:	b580      	push	{r7, lr}
 810166a:	af00      	add	r7, sp, #0
    OsCfg.kernelPanicHook();
 810166c:	4b01      	ldr	r3, [pc, #4]	; (8101674 <os_kernelPanic+0xc>)
 810166e:	699b      	ldr	r3, [r3, #24]
 8101670:	4798      	blx	r3

	for(;;);
 8101672:	e7fe      	b.n	8101672 <os_kernelPanic+0xa>
 8101674:	38000080 	.word	0x38000080

08101678 <os_start>:
{
 8101678:	b580      	push	{r7, lr}
 810167a:	af00      	add	r7, sp, #0
    scheduler_start();
 810167c:	f000 fab0 	bl	8101be0 <scheduler_start>
};
 8101680:	bf00      	nop
 8101682:	bd80      	pop	{r7, pc}

08101684 <osBoot_bootValidate>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osBoot_bootValidate(void)
{
 8101684:	b580      	push	{r7, lr}
 8101686:	b08c      	sub	sp, #48	; 0x30
 8101688:	af00      	add	r7, sp, #0
	BitWidthType  coreId,
					programSectionsNumber;

	CosmOS_ProgramSectionConfigurationType * programSections;

	coreId = CILcore_getCoreId();
 810168a:	f000 fe22 	bl	81022d2 <CILcore_getCoreId>
 810168e:	62b8      	str	r0, [r7, #40]	; 0x28

	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 8101690:	4a2f      	ldr	r2, [pc, #188]	; (8101750 <osBoot_bootValidate+0xcc>)
 8101692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101694:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8101698:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 810169a:	4a2d      	ldr	r2, [pc, #180]	; (8101750 <osBoot_bootValidate+0xcc>)
 810169c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810169e:	00db      	lsls	r3, r3, #3
 81016a0:	4413      	add	r3, r2
 81016a2:	685b      	ldr	r3, [r3, #4]
 81016a4:	623b      	str	r3, [r7, #32]


	for (BitWidthType i=0; i < programSectionsNumber; i++)
 81016a6:	2300      	movs	r3, #0
 81016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 81016aa:	e048      	b.n	810173e <osBoot_bootValidate+0xba>
	{
		osBoot_validateSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 81016ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81016ae:	4613      	mov	r3, r2
 81016b0:	005b      	lsls	r3, r3, #1
 81016b2:	4413      	add	r3, r2
 81016b4:	009b      	lsls	r3, r3, #2
 81016b6:	461a      	mov	r2, r3
 81016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016ba:	4413      	add	r3, r2
 81016bc:	6818      	ldr	r0, [r3, #0]
 81016be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81016c0:	4613      	mov	r3, r2
 81016c2:	005b      	lsls	r3, r3, #1
 81016c4:	4413      	add	r3, r2
 81016c6:	009b      	lsls	r3, r3, #2
 81016c8:	461a      	mov	r2, r3
 81016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016cc:	4413      	add	r3, r2
 81016ce:	6859      	ldr	r1, [r3, #4]
 81016d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81016d2:	4613      	mov	r3, r2
 81016d4:	005b      	lsls	r3, r3, #1
 81016d6:	4413      	add	r3, r2
 81016d8:	009b      	lsls	r3, r3, #2
 81016da:	461a      	mov	r2, r3
 81016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016de:	4413      	add	r3, r2
 81016e0:	689b      	ldr	r3, [r3, #8]
 81016e2:	61f8      	str	r0, [r7, #28]
 81016e4:	61b9      	str	r1, [r7, #24]
 81016e6:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 81016e8:	69ba      	ldr	r2, [r7, #24]
 81016ea:	69fb      	ldr	r3, [r7, #28]
 81016ec:	1ad3      	subs	r3, r2, r3
 81016ee:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 81016f0:	69fb      	ldr	r3, [r7, #28]
 81016f2:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 81016f4:	697b      	ldr	r3, [r7, #20]
 81016f6:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 81016f8:	2300      	movs	r3, #0
 81016fa:	607b      	str	r3, [r7, #4]
 81016fc:	e016      	b.n	810172c <osBoot_bootValidate+0xa8>
		cosmosAssert( (*pDst++) IS_EQUAL_TO (*pSrc++) );
 81016fe:	68fb      	ldr	r3, [r7, #12]
 8101700:	1c5a      	adds	r2, r3, #1
 8101702:	60fa      	str	r2, [r7, #12]
 8101704:	781a      	ldrb	r2, [r3, #0]
 8101706:	68bb      	ldr	r3, [r7, #8]
 8101708:	1c59      	adds	r1, r3, #1
 810170a:	60b9      	str	r1, [r7, #8]
 810170c:	781b      	ldrb	r3, [r3, #0]
 810170e:	429a      	cmp	r2, r3
 8101710:	bf0c      	ite	eq
 8101712:	2301      	moveq	r3, #1
 8101714:	2300      	movne	r3, #0
 8101716:	b2db      	uxtb	r3, r3
 8101718:	603b      	str	r3, [r7, #0]
    if ( IS_NOT( result ) )
 810171a:	683b      	ldr	r3, [r7, #0]
 810171c:	2b00      	cmp	r3, #0
 810171e:	d101      	bne.n	8101724 <osBoot_bootValidate+0xa0>
        os_kernelPanic();
 8101720:	f7ff ffa2 	bl	8101668 <os_kernelPanic>
}
 8101724:	bf00      	nop
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	3301      	adds	r3, #1
 810172a:	607b      	str	r3, [r7, #4]
 810172c:	693b      	ldr	r3, [r7, #16]
 810172e:	009b      	lsls	r3, r3, #2
 8101730:	687a      	ldr	r2, [r7, #4]
 8101732:	429a      	cmp	r2, r3
 8101734:	d3e3      	bcc.n	81016fe <osBoot_bootValidate+0x7a>
}
 8101736:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8101738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810173a:	3301      	adds	r3, #1
 810173c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810173e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101740:	6a3b      	ldr	r3, [r7, #32]
 8101742:	429a      	cmp	r2, r3
 8101744:	d3b2      	bcc.n	81016ac <osBoot_bootValidate+0x28>
	}
};
 8101746:	bf00      	nop
 8101748:	bf00      	nop
 810174a:	3730      	adds	r7, #48	; 0x30
 810174c:	46bd      	mov	sp, r7
 810174e:	bd80      	pop	{r7, pc}
 8101750:	08105590 	.word	0x08105590

08101754 <osInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osInit_init(void)
{
 8101754:	b580      	push	{r7, lr}
 8101756:	b082      	sub	sp, #8
 8101758:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_OsVariableType * osVar;
	//check if the os sections were booted and init and start was not called yet

    switchMemoryProtection_init();
 810175a:	f7ff fed9 	bl	8101510 <memoryProtection_init>
	osBoot_bootValidate();
 810175e:	f7ff ff91 	bl	8101684 <osBoot_bootValidate>

    osVar = os_getOsVar();
 8101762:	f7ff ff77 	bl	8101654 <os_getOsVar>
 8101766:	6078      	str	r0, [r7, #4]

    CILcore_setCoreVar(osVar);
 8101768:	6878      	ldr	r0, [r7, #4]
 810176a:	f000 fdbe 	bl	81022ea <CILcore_setCoreVar>

    coreVar = core_getCoreVar();
 810176e:	f7ff fdc7 	bl	8101300 <core_getCoreVar>
 8101772:	6038      	str	r0, [r7, #0]

    stackInit_init( coreVar );
 8101774:	6838      	ldr	r0, [r7, #0]
 8101776:	f000 fcbf 	bl	81020f8 <stackInit_init>

    //init MPU
    //init DMA to buffers
    //Maybe better have here CILmicroInit()

    coreSync_getBarrier( coreVar, OS_INIT_ID );
 810177a:	2100      	movs	r1, #0
 810177c:	6838      	ldr	r0, [r7, #0]
 810177e:	f7ff fdf6 	bl	810136e <coreSync_getBarrier>

};
 8101782:	bf00      	nop
 8101784:	3708      	adds	r7, #8
 8101786:	46bd      	mov	sp, r7
 8101788:	bd80      	pop	{r7, pc}
	...

0810178c <permission_tryAccess>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_AccessStateType permission_tryAccess(CosmOS_PermissionsConfigurationType * permission,CosmOS_CoreVariableType * coreVar)
{
 810178c:	b580      	push	{r7, lr}
 810178e:	b088      	sub	sp, #32
 8101790:	af00      	add	r7, sp, #0
 8101792:	6078      	str	r0, [r7, #4]
 8101794:	6039      	str	r1, [r7, #0]
 8101796:	683b      	ldr	r3, [r7, #0]
 8101798:	60bb      	str	r3, [r7, #8]
 810179a:	68bb      	ldr	r3, [r7, #8]
 810179c:	685b      	ldr	r3, [r3, #4]
    CosmOS_AccessStateType accessState;

    CosmOS_SchedulableVariableType * schedulableVar;

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 810179e:	61fb      	str	r3, [r7, #28]
 81017a0:	687b      	ldr	r3, [r7, #4]
 81017a2:	617b      	str	r3, [r7, #20]
 81017a4:	69fb      	ldr	r3, [r7, #28]
 81017a6:	613b      	str	r3, [r7, #16]
    cosmosAssert( IS_NOT( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] & \
 81017a8:	697b      	ldr	r3, [r7, #20]
 81017aa:	681a      	ldr	r2, [r3, #0]
 81017ac:	693b      	ldr	r3, [r7, #16]
 81017ae:	681b      	ldr	r3, [r3, #0]
 81017b0:	691b      	ldr	r3, [r3, #16]
 81017b2:	491c      	ldr	r1, [pc, #112]	; (8101824 <permission_tryAccess+0x98>)
 81017b4:	5ccb      	ldrb	r3, [r1, r3]
 81017b6:	009b      	lsls	r3, r3, #2
 81017b8:	4413      	add	r3, r2
 81017ba:	681a      	ldr	r2, [r3, #0]
 81017bc:	697b      	ldr	r3, [r7, #20]
 81017be:	6859      	ldr	r1, [r3, #4]
 81017c0:	693b      	ldr	r3, [r7, #16]
 81017c2:	681b      	ldr	r3, [r3, #0]
 81017c4:	691b      	ldr	r3, [r3, #16]
 81017c6:	4817      	ldr	r0, [pc, #92]	; (8101824 <permission_tryAccess+0x98>)
 81017c8:	5cc3      	ldrb	r3, [r0, r3]
 81017ca:	009b      	lsls	r3, r3, #2
 81017cc:	440b      	add	r3, r1
 81017ce:	681b      	ldr	r3, [r3, #0]
 81017d0:	4013      	ands	r3, r2
 81017d2:	2b00      	cmp	r3, #0
 81017d4:	bf0c      	ite	eq
 81017d6:	2301      	moveq	r3, #1
 81017d8:	2300      	movne	r3, #0
 81017da:	b2db      	uxtb	r3, r3
 81017dc:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 81017de:	68fb      	ldr	r3, [r7, #12]
 81017e0:	2b00      	cmp	r3, #0
 81017e2:	d101      	bne.n	81017e8 <permission_tryAccess+0x5c>
        os_kernelPanic();
 81017e4:	f7ff ff40 	bl	8101668 <os_kernelPanic>
}
 81017e8:	bf00      	nop
    return ((( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] >> schedulableVar->cfg->id ) & BITLOCK_MASK ) ? \
 81017ea:	697b      	ldr	r3, [r7, #20]
 81017ec:	681a      	ldr	r2, [r3, #0]
 81017ee:	693b      	ldr	r3, [r7, #16]
 81017f0:	681b      	ldr	r3, [r3, #0]
 81017f2:	691b      	ldr	r3, [r3, #16]
 81017f4:	490b      	ldr	r1, [pc, #44]	; (8101824 <permission_tryAccess+0x98>)
 81017f6:	5ccb      	ldrb	r3, [r1, r3]
 81017f8:	009b      	lsls	r3, r3, #2
 81017fa:	4413      	add	r3, r2
 81017fc:	681a      	ldr	r2, [r3, #0]
 81017fe:	693b      	ldr	r3, [r7, #16]
 8101800:	681b      	ldr	r3, [r3, #0]
 8101802:	691b      	ldr	r3, [r3, #16]
 8101804:	fa22 f303 	lsr.w	r3, r2, r3
 8101808:	f003 0301 	and.w	r3, r3, #1
            ACCESS_STATE_ENUM__ALLOWED : ACCESS_STATE_ENUM__DENIED );
 810180c:	2b00      	cmp	r3, #0
 810180e:	d001      	beq.n	8101814 <permission_tryAccess+0x88>
 8101810:	2300      	movs	r3, #0
 8101812:	e001      	b.n	8101818 <permission_tryAccess+0x8c>
 8101814:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
    accessState = permission_trySchedulableAccess( permission, schedulableVar );
 8101818:	61bb      	str	r3, [r7, #24]

    return accessState;
 810181a:	69bb      	ldr	r3, [r7, #24]
}
 810181c:	4618      	mov	r0, r3
 810181e:	3720      	adds	r7, #32
 8101820:	46bd      	mov	sp, r7
 8101822:	bd80      	pop	{r7, pc}
 8101824:	3800009c 	.word	0x3800009c

08101828 <schedulable_setExecutionStateToFinished>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void schedulable_setExecutionStateToFinished(void)
{
 8101828:	b580      	push	{r7, lr}
 810182a:	b086      	sub	sp, #24
 810182c:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 810182e:	f7ff fd67 	bl	8101300 <core_getCoreVar>
 8101832:	6178      	str	r0, [r7, #20]
 8101834:	697b      	ldr	r3, [r7, #20]
 8101836:	607b      	str	r3, [r7, #4]
 8101838:	687b      	ldr	r3, [r7, #4]
 810183a:	685b      	ldr	r3, [r3, #4]

    schedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 810183c:	613b      	str	r3, [r7, #16]
 810183e:	693b      	ldr	r3, [r7, #16]
 8101840:	60fb      	str	r3, [r7, #12]
 8101842:	2302      	movs	r3, #2
 8101844:	72fb      	strb	r3, [r7, #11]
  *
  * @return CosmOS_SchedulableStateType
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setState(CosmOS_SchedulableVariableType * schedulable, CosmOS_SchedulableStateType stateParam)
{
    schedulable->state = stateParam;
 8101846:	68fb      	ldr	r3, [r7, #12]
 8101848:	7afa      	ldrb	r2, [r7, #11]
 810184a:	711a      	strb	r2, [r3, #4]
}
 810184c:	bf00      	nop

    schedulable_setState( schedulableVar, SCHEDULABLE_INSTANCE_ENUM__EXECUTED );
};
 810184e:	bf00      	nop
 8101850:	3718      	adds	r7, #24
 8101852:	46bd      	mov	sp, r7
 8101854:	bd80      	pop	{r7, pc}

08101856 <scheduler_performanceScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_performanceScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks)
{
 8101856:	b580      	push	{r7, lr}
 8101858:	b092      	sub	sp, #72	; 0x48
 810185a:	af00      	add	r7, sp, #0
 810185c:	60f8      	str	r0, [r7, #12]
 810185e:	60b9      	str	r1, [r7, #8]
 8101860:	607a      	str	r2, [r7, #4]
 8101862:	603b      	str	r3, [r7, #0]
 8101864:	68fb      	ldr	r3, [r7, #12]
 8101866:	613b      	str	r3, [r7, #16]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType scheduler_getSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler)
{
    return (scheduler->threadListIterator);
 8101868:	693b      	ldr	r3, [r7, #16]
 810186a:	68db      	ldr	r3, [r3, #12]
        threadListElementsNum;

    CosmOS_ThreadVariableType *threadVar;


    threadListIterator = scheduler_getSchedulerThreadListIterator(schedulerVar);
 810186c:	647b      	str	r3, [r7, #68]	; 0x44
 810186e:	68fb      	ldr	r3, [r7, #12]
 8101870:	617b      	str	r3, [r7, #20]
    return (scheduler->cfg->threadListElementsNum);
 8101872:	697b      	ldr	r3, [r7, #20]
 8101874:	681b      	ldr	r3, [r3, #0]
 8101876:	695b      	ldr	r3, [r3, #20]
    threadListElementsNum = scheduler_getSchedulerThreadListElementsNum(schedulerVar);
 8101878:	643b      	str	r3, [r7, #64]	; 0x40

    cosmosAssert(threadListIterator < threadListElementsNum);
 810187a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810187c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810187e:	429a      	cmp	r2, r3
 8101880:	bf34      	ite	cc
 8101882:	2301      	movcc	r3, #1
 8101884:	2300      	movcs	r3, #0
 8101886:	b2db      	uxtb	r3, r3
 8101888:	61bb      	str	r3, [r7, #24]
    if ( IS_NOT( result ) )
 810188a:	69bb      	ldr	r3, [r7, #24]
 810188c:	2b00      	cmp	r3, #0
 810188e:	d101      	bne.n	8101894 <scheduler_performanceScheduling+0x3e>
        os_kernelPanic();
 8101890:	f7ff feea 	bl	8101668 <os_kernelPanic>
}
 8101894:	bf00      	nop
 8101896:	68fb      	ldr	r3, [r7, #12]
 8101898:	623b      	str	r3, [r7, #32]
 810189a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810189c:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * scheduler_getSchedulerThreadListThreadVar(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIterator)
{
    return (CosmOS_ThreadVariableType *)(scheduler->cfg->threadList[threadListIterator].threadVar);
 810189e:	6a3b      	ldr	r3, [r7, #32]
 81018a0:	681b      	ldr	r3, [r3, #0]
 81018a2:	685a      	ldr	r2, [r3, #4]
 81018a4:	69fb      	ldr	r3, [r7, #28]
 81018a6:	009b      	lsls	r3, r3, #2
 81018a8:	4413      	add	r3, r2
 81018aa:	681b      	ldr	r3, [r3, #0]

    threadVar = scheduler_getSchedulerThreadListThreadVar(schedulerVar, threadListIterator);
 81018ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 81018ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81018b0:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * thread_getThreadSchedulable(CosmOS_ThreadVariableType * thread)
{
    return (CosmOS_SchedulableVariableType *)(thread->schedulable);
 81018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81018b4:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = thread_getThreadSchedulable(threadVar);
 81018b6:	68bb      	ldr	r3, [r7, #8]
 81018b8:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = schedulable_getStackPointer(*schedulableVar);
 81018ba:	68bb      	ldr	r3, [r7, #8]
 81018bc:	681b      	ldr	r3, [r3, #0]
 81018be:	62bb      	str	r3, [r7, #40]	; 0x28
    return (schedulable->stackPointer);
 81018c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81018c2:	689a      	ldr	r2, [r3, #8]
 81018c4:	687b      	ldr	r3, [r7, #4]
 81018c6:	601a      	str	r2, [r3, #0]

    threadListIterator = ((threadListIterator + 1) % threadListElementsNum);
 81018c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81018ca:	3301      	adds	r3, #1
 81018cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81018ce:	fbb3 f2f2 	udiv	r2, r3, r2
 81018d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 81018d4:	fb01 f202 	mul.w	r2, r1, r2
 81018d8:	1a9b      	subs	r3, r3, r2
 81018da:	647b      	str	r3, [r7, #68]	; 0x44
 81018dc:	68fb      	ldr	r3, [r7, #12]
 81018de:	633b      	str	r3, [r7, #48]	; 0x30
 81018e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerThreadListIterator(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIteratorParam)
{
    scheduler->threadListIterator = threadListIteratorParam;
 81018e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81018e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81018e8:	60da      	str	r2, [r3, #12]
}
 81018ea:	bf00      	nop
 81018ec:	68fb      	ldr	r3, [r7, #12]
 81018ee:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->preemptTick);
 81018f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81018f2:	681b      	ldr	r3, [r3, #0]
 81018f4:	68db      	ldr	r3, [r3, #12]
    scheduler_setSchedulerThreadListIterator(schedulerVar, threadListIterator);

    preemptTick = scheduler_getSchedulerPreemptTick(schedulerVar);
 81018f6:	63bb      	str	r3, [r7, #56]	; 0x38
    *timerTicks = preemptTick;
 81018f8:	683b      	ldr	r3, [r7, #0]
 81018fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81018fc:	601a      	str	r2, [r3, #0]
}
 81018fe:	bf00      	nop
 8101900:	3748      	adds	r7, #72	; 0x48
 8101902:	46bd      	mov	sp, r7
 8101904:	bd80      	pop	{r7, pc}

08101906 <scheduler_classicScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_classicScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks, BitWidthType startTick, BitWidthType currentTick)
{
 8101906:	b580      	push	{r7, lr}
 8101908:	b088      	sub	sp, #32
 810190a:	af00      	add	r7, sp, #0
 810190c:	60f8      	str	r0, [r7, #12]
 810190e:	60b9      	str	r1, [r7, #8]
 8101910:	607a      	str	r2, [r7, #4]
 8101912:	603b      	str	r3, [r7, #0]
 8101914:	68fb      	ldr	r3, [r7, #12]
 8101916:	617b      	str	r3, [r7, #20]
    return (CosmOS_TaskVariableType *)(scheduler->cfg->idleTaskVar);
 8101918:	697b      	ldr	r3, [r7, #20]
 810191a:	681b      	ldr	r3, [r3, #0]
 810191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    CosmOS_TaskVariableType * taskVar;


    taskVar = scheduler_getSchedulerIdleTaskVar( schedulerVar );
 810191e:	61fb      	str	r3, [r7, #28]
 8101920:	69fb      	ldr	r3, [r7, #28]
 8101922:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * task_getTaskSchedulable(CosmOS_TaskVariableType * task)
{
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8101924:	69bb      	ldr	r3, [r7, #24]
 8101926:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = task_getTaskSchedulable( taskVar );
 8101928:	68bb      	ldr	r3, [r7, #8]
 810192a:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 810192c:	68bb      	ldr	r3, [r7, #8]
 810192e:	681b      	ldr	r3, [r3, #0]
 8101930:	4618      	mov	r0, r3
 8101932:	f000 fbbb 	bl	81020ac <stackInit_schedulableStackInit>
 8101936:	4602      	mov	r2, r0
 8101938:	687b      	ldr	r3, [r7, #4]
 810193a:	601a      	str	r2, [r3, #0]

    if ( startTick < currentTick )
 810193c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 810193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101940:	429a      	cmp	r2, r3
 8101942:	d207      	bcs.n	8101954 <scheduler_classicScheduling+0x4e>
 8101944:	68fb      	ldr	r3, [r7, #12]
 8101946:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->lastToFirstTaskTicks);
 8101948:	693b      	ldr	r3, [r7, #16]
 810194a:	681b      	ldr	r3, [r3, #0]
 810194c:	699a      	ldr	r2, [r3, #24]
    {
        *timerTicks = scheduler_getSchedulerLastToFirstTaskTicks( schedulerVar );
 810194e:	683b      	ldr	r3, [r7, #0]
 8101950:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *timerTicks = startTick - currentTick;
    }
}
 8101952:	e004      	b.n	810195e <scheduler_classicScheduling+0x58>
        *timerTicks = startTick - currentTick;
 8101954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101958:	1ad2      	subs	r2, r2, r3
 810195a:	683b      	ldr	r3, [r7, #0]
 810195c:	601a      	str	r2, [r3, #0]
}
 810195e:	bf00      	nop
 8101960:	3720      	adds	r7, #32
 8101962:	46bd      	mov	sp, r7
 8101964:	bd80      	pop	{r7, pc}

08101966 <scheduler_scheduleNextInstance>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType scheduler_scheduleNextInstance(StackPointerType stackPointer)
{
 8101966:	b580      	push	{r7, lr}
 8101968:	b0b4      	sub	sp, #208	; 0xd0
 810196a:	af00      	add	r7, sp, #0
 810196c:	6078      	str	r0, [r7, #4]
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;
    CosmOS_SchedulableVariableType * priorSchedulableVar;


    coreVar = core_getCoreVar();
 810196e:	f7ff fcc7 	bl	8101300 <core_getCoreVar>
 8101972:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8101976:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 810197a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    return (core->schedulerVar);
 810197e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101982:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8101984:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8101988:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 810198c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (core->schedulableInExecution);
 8101990:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101994:	685b      	ldr	r3, [r3, #4]
    priorSchedulableVar = core_getCoreSchedulableInCurrentContext( coreVar );
 8101996:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810199a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810199e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->cfg->hyperTick);
 81019a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 81019a6:	681b      	ldr	r3, [r3, #0]
 81019a8:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 81019aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 81019ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81019b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->schedulerState);
 81019b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 81019ba:	7c1b      	ldrb	r3, [r3, #16]
    schedulerState = scheduler_getSchedulerState( schedulerVar );
 81019bc:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 81019c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81019c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (scheduler->currentTick);
 81019c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 81019cc:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 81019ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81019d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81019d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->scheduleTableIterator);
 81019da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 81019de:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 81019e0:	617b      	str	r3, [r7, #20]
 81019e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81019e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->cfg->scheduleTableElementsNum);
 81019ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 81019ee:	681b      	ldr	r3, [r3, #0]
 81019f0:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 81019f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    if ( scheduleTableElementsNum )
 81019f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 81019fa:	2b00      	cmp	r3, #0
 81019fc:	d022      	beq.n	8101a44 <scheduler_scheduleNextInstance+0xde>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 81019fe:	697b      	ldr	r3, [r7, #20]
 8101a00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8101a04:	429a      	cmp	r2, r3
 8101a06:	bf8c      	ite	hi
 8101a08:	2301      	movhi	r3, #1
 8101a0a:	2300      	movls	r3, #0
 8101a0c:	b2db      	uxtb	r3, r3
 8101a0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if ( IS_NOT( result ) )
 8101a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8101a16:	2b00      	cmp	r3, #0
 8101a18:	d101      	bne.n	8101a1e <scheduler_scheduleNextInstance+0xb8>
        os_kernelPanic();
 8101a1a:	f7ff fe25 	bl	8101668 <os_kernelPanic>
}
 8101a1e:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8101a20:	697b      	ldr	r3, [r7, #20]
 8101a22:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8101a26:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8101a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8101a2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8101a32:	681b      	ldr	r3, [r3, #0]
 8101a34:	681a      	ldr	r2, [r3, #0]
 8101a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8101a3a:	00db      	lsls	r3, r3, #3
 8101a3c:	4413      	add	r3, r2
 8101a3e:	681b      	ldr	r3, [r3, #0]
 8101a40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    }

    //this should be moved to the sysTick interrupt with higher priority to have faster response - without else, that should stay here
    if ( schedulerState IS_EQUAL_TO SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK )
 8101a44:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8101a48:	2b01      	cmp	r3, #1
 8101a4a:	d107      	bne.n	8101a5c <scheduler_scheduleNextInstance+0xf6>
 8101a4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8101a50:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (schedulable->state);
 8101a52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8101a54:	791b      	ldrb	r3, [r3, #4]
    {
        CosmOS_SchedulableStateType schedulableState;

        schedulableState = schedulable_getState( priorSchedulableVar );
 8101a56:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8101a5a:	e008      	b.n	8101a6e <scheduler_scheduleNextInstance+0x108>
 8101a5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8101a60:	67bb      	str	r3, [r7, #120]	; 0x78
 8101a62:	687b      	ldr	r3, [r7, #4]
 8101a64:	677b      	str	r3, [r7, #116]	; 0x74
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setStackPointer(CosmOS_SchedulableVariableType * schedulable, StackPointerType stackPointerParam)
{
    schedulable->stackPointer = stackPointerParam;
 8101a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8101a68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8101a6a:	609a      	str	r2, [r3, #8]
}
 8101a6c:	bf00      	nop
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_setStackPointer( priorSchedulableVar, stackPointer );
    }

    if ( scheduleTableElementsNum AND startTick IS_EQUAL_TO currentTick )
 8101a6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8101a72:	2b00      	cmp	r3, #0
 8101a74:	d060      	beq.n	8101b38 <scheduler_scheduleNextInstance+0x1d2>
 8101a76:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8101a7a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101a7e:	429a      	cmp	r2, r3
 8101a80:	d15a      	bne.n	8101b38 <scheduler_scheduleNextInstance+0x1d2>
 8101a82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101a86:	673b      	str	r3, [r7, #112]	; 0x70
 8101a88:	f107 030c 	add.w	r3, r7, #12
 8101a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8101a8e:	f107 0310 	add.w	r3, r7, #16
 8101a92:	66bb      	str	r3, [r7, #104]	; 0x68
 8101a94:	f107 0318 	add.w	r3, r7, #24
 8101a98:	667b      	str	r3, [r7, #100]	; 0x64
 8101a9a:	f107 0314 	add.w	r3, r7, #20
 8101a9e:	663b      	str	r3, [r7, #96]	; 0x60
 8101aa0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8101aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8101aa6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101aa8:	681b      	ldr	r3, [r3, #0]
 8101aaa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8101aac:	65ba      	str	r2, [r7, #88]	; 0x58
 8101aae:	657b      	str	r3, [r7, #84]	; 0x54
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8101ab0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8101ab2:	681b      	ldr	r3, [r3, #0]
 8101ab4:	681a      	ldr	r2, [r3, #0]
 8101ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101ab8:	00db      	lsls	r3, r3, #3
 8101aba:	4413      	add	r3, r2
 8101abc:	685b      	ldr	r3, [r3, #4]
 8101abe:	653b      	str	r3, [r7, #80]	; 0x50
 8101ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101ac6:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8101ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101aca:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8101acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101ace:	681b      	ldr	r3, [r3, #0]
 8101ad0:	4618      	mov	r0, r3
 8101ad2:	f000 faeb 	bl	81020ac <stackInit_schedulableStackInit>
 8101ad6:	4602      	mov	r2, r0
 8101ad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101ada:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 8101adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101ade:	681b      	ldr	r3, [r3, #0]
 8101ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8101ae2:	2301      	movs	r3, #1
 8101ae4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    schedulable->state = stateParam;
 8101ae8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101aea:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8101aee:	711a      	strb	r2, [r3, #4]
}
 8101af0:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8101af2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101af4:	681b      	ldr	r3, [r3, #0]
 8101af6:	3301      	adds	r3, #1
 8101af8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8101afa:	fbb3 f2f2 	udiv	r2, r3, r2
 8101afe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8101b00:	fb01 f202 	mul.w	r2, r1, r2
 8101b04:	1a9a      	subs	r2, r3, r2
 8101b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101b08:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8101b0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101b0c:	681b      	ldr	r3, [r3, #0]
 8101b0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8101b10:	643a      	str	r2, [r7, #64]	; 0x40
 8101b12:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8101b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101b16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8101b18:	609a      	str	r2, [r3, #8]
}
 8101b1a:	bf00      	nop
 8101b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101b1e:	63bb      	str	r3, [r7, #56]	; 0x38
    return (task->cfg->wcet);
 8101b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101b22:	681b      	ldr	r3, [r3, #0]
 8101b24:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8101b26:	637b      	str	r3, [r7, #52]	; 0x34
    *timerTicks = wcet;
 8101b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8101b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101b2c:	601a      	str	r2, [r3, #0]
}
 8101b2e:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8101b30:	2301      	movs	r3, #1
 8101b32:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8101b36:	e00c      	b.n	8101b52 <scheduler_scheduleNextInstance+0x1ec>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 8101b38:	f107 0318 	add.w	r3, r7, #24
 8101b3c:	f107 0210 	add.w	r2, r7, #16
 8101b40:	f107 010c 	add.w	r1, r7, #12
 8101b44:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8101b48:	f7ff fe85 	bl	8101856 <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8101b4c:	2302      	movs	r3, #2
 8101b4e:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8101b52:	68fa      	ldr	r2, [r7, #12]
 8101b54:	693b      	ldr	r3, [r7, #16]
 8101b56:	623a      	str	r2, [r7, #32]
 8101b58:	61fb      	str	r3, [r7, #28]
    schedulable->stackPointer = stackPointerParam;
 8101b5a:	6a3b      	ldr	r3, [r7, #32]
 8101b5c:	69fa      	ldr	r2, [r7, #28]
 8101b5e:	609a      	str	r2, [r3, #8]
}
 8101b60:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8101b62:	68fb      	ldr	r3, [r7, #12]
 8101b64:	4619      	mov	r1, r3
 8101b66:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8101b6a:	f7ff fbd5 	bl	8101318 <core_setSchedulableIntoCurrentContext>
 8101b6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8101b74:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8101b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_SchedulerStateType schedulerStateParam)
{
    scheduler->schedulerState = schedulerStateParam;
 8101b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101b7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8101b82:	741a      	strb	r2, [r3, #16]
}
 8101b84:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 8101b86:	2300      	movs	r3, #0
 8101b88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    currentTick = ( ( currentTick + timerTicks ) % hyperTick );
 8101b8c:	69ba      	ldr	r2, [r7, #24]
 8101b8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101b92:	4413      	add	r3, r2
 8101b94:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8101b98:	fbb3 f2f2 	udiv	r2, r3, r2
 8101b9c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8101ba0:	fb01 f202 	mul.w	r2, r1, r2
 8101ba4:	1a9b      	subs	r3, r3, r2
 8101ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8101baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101bae:	633b      	str	r3, [r7, #48]	; 0x30
 8101bb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    scheduler->currentTick = currentTickParam;
 8101bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101bb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101bba:	605a      	str	r2, [r3, #4]
}
 8101bbc:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 8101bbe:	68fb      	ldr	r3, [r7, #12]
 8101bc0:	4619      	mov	r1, r3
 8101bc2:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8101bc6:	f7ff fca9 	bl	810151c <memoryProtection_setMemoryProtection>

    CILsysTimer_setTicks( timerTicks, schedulersSyncState );
 8101bca:	69bb      	ldr	r3, [r7, #24]
 8101bcc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8101bd0:	4618      	mov	r0, r3
 8101bd2:	f000 fe8b 	bl	81028ec <CILsysTimer_setTicks>

    return stackPointerRetVal;
 8101bd6:	693b      	ldr	r3, [r7, #16]
};
 8101bd8:	4618      	mov	r0, r3
 8101bda:	37d0      	adds	r7, #208	; 0xd0
 8101bdc:	46bd      	mov	sp, r7
 8101bde:	bd80      	pop	{r7, pc}

08101be0 <scheduler_start>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_start(void)
{
 8101be0:	b580      	push	{r7, lr}
 8101be2:	b0aa      	sub	sp, #168	; 0xa8
 8101be4:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8101be6:	f7ff fb8b 	bl	8101300 <core_getCoreVar>
 8101bea:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
 8101bee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8101bf2:	677b      	str	r3, [r7, #116]	; 0x74
    return (core->schedulerVar);
 8101bf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8101bf6:	691b      	ldr	r3, [r3, #16]

    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8101bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8101bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101c00:	67bb      	str	r3, [r7, #120]	; 0x78
    return (scheduler->cfg->hyperTick);
 8101c02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8101c04:	681b      	ldr	r3, [r3, #0]
 8101c06:	689b      	ldr	r3, [r3, #8]

    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8101c08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8101c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101c10:	67fb      	str	r3, [r7, #124]	; 0x7c
    return (scheduler->currentTick);
 8101c12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8101c14:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8101c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8101c1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101c1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    return (scheduler->scheduleTableIterator);
 8101c22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8101c26:	689b      	ldr	r3, [r3, #8]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8101c28:	607b      	str	r3, [r7, #4]
 8101c2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101c2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    return (scheduler->cfg->scheduleTableElementsNum);
 8101c32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8101c36:	681b      	ldr	r3, [r3, #0]
 8101c38:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8101c3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if ( scheduleTableElementsNum )
 8101c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101c42:	2b00      	cmp	r3, #0
 8101c44:	d01c      	beq.n	8101c80 <scheduler_start+0xa0>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8101c4c:	429a      	cmp	r2, r3
 8101c4e:	bf8c      	ite	hi
 8101c50:	2301      	movhi	r3, #1
 8101c52:	2300      	movls	r3, #0
 8101c54:	b2db      	uxtb	r3, r3
 8101c56:	66bb      	str	r3, [r7, #104]	; 0x68
    if ( IS_NOT( result ) )
 8101c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8101c5a:	2b00      	cmp	r3, #0
 8101c5c:	d101      	bne.n	8101c62 <scheduler_start+0x82>
        os_kernelPanic();
 8101c5e:	f7ff fd03 	bl	8101668 <os_kernelPanic>
}
 8101c62:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8101c6a:	673a      	str	r2, [r7, #112]	; 0x70
 8101c6c:	66fb      	str	r3, [r7, #108]	; 0x6c
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8101c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8101c70:	681b      	ldr	r3, [r3, #0]
 8101c72:	681a      	ldr	r2, [r3, #0]
 8101c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101c76:	00db      	lsls	r3, r3, #3
 8101c78:	4413      	add	r3, r2
 8101c7a:	681b      	ldr	r3, [r3, #0]
 8101c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    }

    if ( scheduleTableElementsNum AND (startTick IS_EQUAL_TO currentTick) )
 8101c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101c84:	2b00      	cmp	r3, #0
 8101c86:	d05e      	beq.n	8101d46 <scheduler_start+0x166>
 8101c88:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8101c8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101c90:	429a      	cmp	r2, r3
 8101c92:	d158      	bne.n	8101d46 <scheduler_start+0x166>
 8101c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101c98:	667b      	str	r3, [r7, #100]	; 0x64
 8101c9a:	463b      	mov	r3, r7
 8101c9c:	663b      	str	r3, [r7, #96]	; 0x60
 8101c9e:	f107 0308 	add.w	r3, r7, #8
 8101ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8101ca4:	f107 030c 	add.w	r3, r7, #12
 8101ca8:	65bb      	str	r3, [r7, #88]	; 0x58
 8101caa:	1d3b      	adds	r3, r7, #4
 8101cac:	657b      	str	r3, [r7, #84]	; 0x54
 8101cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8101cb2:	653b      	str	r3, [r7, #80]	; 0x50
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8101cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101cb6:	681b      	ldr	r3, [r3, #0]
 8101cb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101cba:	64fa      	str	r2, [r7, #76]	; 0x4c
 8101cbc:	64bb      	str	r3, [r7, #72]	; 0x48
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8101cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101cc0:	681b      	ldr	r3, [r3, #0]
 8101cc2:	681a      	ldr	r2, [r3, #0]
 8101cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101cc6:	00db      	lsls	r3, r3, #3
 8101cc8:	4413      	add	r3, r2
 8101cca:	685b      	ldr	r3, [r3, #4]
 8101ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8101cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101cd0:	643b      	str	r3, [r7, #64]	; 0x40
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8101cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101cd4:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8101cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101cd8:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8101cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101cdc:	681b      	ldr	r3, [r3, #0]
 8101cde:	4618      	mov	r0, r3
 8101ce0:	f000 f9e4 	bl	81020ac <stackInit_schedulableStackInit>
 8101ce4:	4602      	mov	r2, r0
 8101ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8101ce8:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_INSTANCE_ENUM__RUNNING );
 8101cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8101cec:	681b      	ldr	r3, [r3, #0]
 8101cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101cf0:	2301      	movs	r3, #1
 8101cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    schedulable->state = stateParam;
 8101cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101cf8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8101cfc:	711a      	strb	r2, [r3, #4]
}
 8101cfe:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8101d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101d02:	681b      	ldr	r3, [r3, #0]
 8101d04:	3301      	adds	r3, #1
 8101d06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101d08:	fbb3 f2f2 	udiv	r2, r3, r2
 8101d0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8101d0e:	fb01 f202 	mul.w	r2, r1, r2
 8101d12:	1a9a      	subs	r2, r3, r2
 8101d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101d16:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8101d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101d1a:	681b      	ldr	r3, [r3, #0]
 8101d1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8101d1e:	637a      	str	r2, [r7, #52]	; 0x34
 8101d20:	633b      	str	r3, [r7, #48]	; 0x30
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8101d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101d26:	609a      	str	r2, [r3, #8]
}
 8101d28:	bf00      	nop
 8101d2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (task->cfg->wcet);
 8101d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101d30:	681b      	ldr	r3, [r3, #0]
 8101d32:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8101d34:	62bb      	str	r3, [r7, #40]	; 0x28
    *timerTicks = wcet;
 8101d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8101d38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101d3a:	601a      	str	r2, [r3, #0]
}
 8101d3c:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8101d3e:	2301      	movs	r3, #1
 8101d40:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
 8101d44:	e00b      	b.n	8101d5e <scheduler_start+0x17e>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks);
 8101d46:	f107 030c 	add.w	r3, r7, #12
 8101d4a:	f107 0208 	add.w	r2, r7, #8
 8101d4e:	4639      	mov	r1, r7
 8101d50:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8101d54:	f7ff fd7f 	bl	8101856 <scheduler_performanceScheduling>
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,startTick,currentTick);

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8101d58:	2302      	movs	r3, #2
 8101d5a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8101d5e:	683a      	ldr	r2, [r7, #0]
 8101d60:	68bb      	ldr	r3, [r7, #8]
 8101d62:	617a      	str	r2, [r7, #20]
 8101d64:	613b      	str	r3, [r7, #16]
    schedulable->stackPointer = stackPointerParam;
 8101d66:	697b      	ldr	r3, [r7, #20]
 8101d68:	693a      	ldr	r2, [r7, #16]
 8101d6a:	609a      	str	r2, [r3, #8]
}
 8101d6c:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8101d6e:	683b      	ldr	r3, [r7, #0]
 8101d70:	4619      	mov	r1, r3
 8101d72:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8101d76:	f7ff facf 	bl	8101318 <core_setSchedulableIntoCurrentContext>
 8101d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101d7e:	61fb      	str	r3, [r7, #28]
 8101d80:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8101d84:	76fb      	strb	r3, [r7, #27]
    scheduler->schedulerState = schedulerStateParam;
 8101d86:	69fb      	ldr	r3, [r7, #28]
 8101d88:	7efa      	ldrb	r2, [r7, #27]
 8101d8a:	741a      	strb	r2, [r3, #16]
}
 8101d8c:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );
    schedulersSyncState = switchSchedulerSync_sync( schedulerVar, coreVar, currentTick, hyperTick );
 8101d8e:	2300      	movs	r3, #0
 8101d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    currentTick = ( currentTick + timerTicks ) % hyperTick;
 8101d94:	68fa      	ldr	r2, [r7, #12]
 8101d96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101d9a:	4413      	add	r3, r2
 8101d9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8101da0:	fbb3 f2f2 	udiv	r2, r3, r2
 8101da4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8101da8:	fb01 f202 	mul.w	r2, r1, r2
 8101dac:	1a9b      	subs	r3, r3, r2
 8101dae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8101db2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101db6:	627b      	str	r3, [r7, #36]	; 0x24
 8101db8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8101dbc:	623b      	str	r3, [r7, #32]
    scheduler->currentTick = currentTickParam;
 8101dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101dc0:	6a3a      	ldr	r2, [r7, #32]
 8101dc2:	605a      	str	r2, [r3, #4]
}
 8101dc4:	bf00      	nop
    scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

    switchMemoryProtection_setMemoryProtection( coreVar , schedulableVar );
 8101dc6:	683b      	ldr	r3, [r7, #0]
 8101dc8:	4619      	mov	r1, r3
 8101dca:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8101dce:	f7ff fba5 	bl	810151c <memoryProtection_setMemoryProtection>

    CILsysTimer_setTicks( timerTicks, schedulersSyncState );
 8101dd2:	68fb      	ldr	r3, [r7, #12]
 8101dd4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8101dd8:	4618      	mov	r0, r3
 8101dda:	f000 fd87 	bl	81028ec <CILsysTimer_setTicks>

    CILstack_setStackPointer( stackPointerRetVal );
 8101dde:	68bb      	ldr	r3, [r7, #8]
 8101de0:	4618      	mov	r0, r3
 8101de2:	f000 fd02 	bl	81027ea <CILstack_setStackPointer>
};
 8101de6:	bf00      	nop
 8101de8:	37a8      	adds	r7, #168	; 0xa8
 8101dea:	46bd      	mov	sp, r7
 8101dec:	bd80      	pop	{r7, pc}

08101dee <schedulerSync_sync>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SchedulerSyncStateType schedulerSync_sync(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_CoreVariableType * coreVar, BitWidthType currentTick, BitWidthType hyperTick)
{
 8101dee:	b580      	push	{r7, lr}
 8101df0:	b096      	sub	sp, #88	; 0x58
 8101df2:	af00      	add	r7, sp, #0
 8101df4:	60f8      	str	r0, [r7, #12]
 8101df6:	60b9      	str	r1, [r7, #8]
 8101df8:	607a      	str	r2, [r7, #4]
 8101dfa:	603b      	str	r3, [r7, #0]

    CosmOS_BooleanType syncInitState;

    CosmOS_SchedulerSyncStateType schedulerState = SCHEDULER_SYNC_STATE_ENUM__NOT_IN_SYNC;
 8101dfc:	2300      	movs	r3, #0
 8101dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8101e00:	68fb      	ldr	r3, [r7, #12]
 8101e02:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->syncInitState);
 8101e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101e06:	7e1b      	ldrb	r3, [r3, #24]


    syncInitState = scheduler_getSchedulerSyncInitState( schedulerVar );
 8101e08:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    if ( __COSMOS_UNLIKELY( syncInitState IS_EQUAL_TO False ) )
 8101e0c:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8101e10:	2b00      	cmp	r3, #0
 8101e12:	bf0c      	ite	eq
 8101e14:	2301      	moveq	r3, #1
 8101e16:	2300      	movne	r3, #0
 8101e18:	b2db      	uxtb	r3, r3
 8101e1a:	2b00      	cmp	r3, #0
 8101e1c:	d030      	beq.n	8101e80 <schedulerSync_sync+0x92>
 8101e1e:	68fb      	ldr	r3, [r7, #12]
 8101e20:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->firstSyncTaskStartTick);
 8101e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101e24:	681b      	ldr	r3, [r3, #0]
 8101e26:	6a1b      	ldr	r3, [r3, #32]
    {
        BitWidthType firstSyncTaskStartTick;


        firstSyncTaskStartTick = scheduler_getSchedulerFirstSyncTaskStartTick( schedulerVar );
 8101e28:	647b      	str	r3, [r7, #68]	; 0x44

        if ( firstSyncTaskStartTick IS_EQUAL_TO currentTick )
 8101e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	429a      	cmp	r2, r3
 8101e30:	d150      	bne.n	8101ed4 <schedulerSync_sync+0xe6>
 8101e32:	68fb      	ldr	r3, [r7, #12]
 8101e34:	623b      	str	r3, [r7, #32]
    return (scheduler->cfg->syncTicks);
 8101e36:	6a3b      	ldr	r3, [r7, #32]
 8101e38:	681b      	ldr	r3, [r3, #0]
 8101e3a:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks,
                          nextTick;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8101e3c:	643b      	str	r3, [r7, #64]	; 0x40

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8101e3e:	687a      	ldr	r2, [r7, #4]
 8101e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101e42:	4413      	add	r3, r2
 8101e44:	683a      	ldr	r2, [r7, #0]
 8101e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8101e4a:	6839      	ldr	r1, [r7, #0]
 8101e4c:	fb01 f202 	mul.w	r2, r1, r2
 8101e50:	1a9b      	subs	r3, r3, r2
 8101e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101e54:	68fb      	ldr	r3, [r7, #12]
 8101e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8101e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101e5a:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerNextSyncTick(CosmOS_SchedulerVariableType * scheduler, BitWidthType paramNextSyncTick)
{
    scheduler->nextSyncTick = paramNextSyncTick;
 8101e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101e60:	615a      	str	r2, [r3, #20]
}
 8101e62:	bf00      	nop
 8101e64:	68fb      	ldr	r3, [r7, #12]
 8101e66:	633b      	str	r3, [r7, #48]	; 0x30
 8101e68:	2301      	movs	r3, #1
 8101e6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerSyncInitState(CosmOS_SchedulerVariableType * scheduler, CosmOS_BooleanType paramSyncInitState)
{
    scheduler->syncInitState = paramSyncInitState;
 8101e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101e70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8101e74:	761a      	strb	r2, [r3, #24]
}
 8101e76:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            scheduler_setSchedulerSyncInitState( schedulerVar, True );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8101e78:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8101e7c:	657b      	str	r3, [r7, #84]	; 0x54
 8101e7e:	e029      	b.n	8101ed4 <schedulerSync_sync+0xe6>
 8101e80:	68fb      	ldr	r3, [r7, #12]
 8101e82:	61fb      	str	r3, [r7, #28]
    return (scheduler->nextSyncTick);
 8101e84:	69fb      	ldr	r3, [r7, #28]
 8101e86:	695b      	ldr	r3, [r3, #20]
    else
    {
        BitWidthType nextTick;


        nextTick = scheduler_getSchedulerNextSyncTick( schedulerVar );
 8101e88:	64fb      	str	r3, [r7, #76]	; 0x4c

        if ( __COSMOS_UNLIKELY( nextTick IS_EQUAL_TO currentTick ) )
 8101e8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8101e8c:	687b      	ldr	r3, [r7, #4]
 8101e8e:	429a      	cmp	r2, r3
 8101e90:	bf0c      	ite	eq
 8101e92:	2301      	moveq	r3, #1
 8101e94:	2300      	movne	r3, #0
 8101e96:	b2db      	uxtb	r3, r3
 8101e98:	2b00      	cmp	r3, #0
 8101e9a:	d01b      	beq.n	8101ed4 <schedulerSync_sync+0xe6>
 8101e9c:	68fb      	ldr	r3, [r7, #12]
 8101e9e:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->syncTicks);
 8101ea0:	693b      	ldr	r3, [r7, #16]
 8101ea2:	681b      	ldr	r3, [r3, #0]
 8101ea4:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8101ea6:	64bb      	str	r3, [r7, #72]	; 0x48

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8101ea8:	687a      	ldr	r2, [r7, #4]
 8101eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101eac:	4413      	add	r3, r2
 8101eae:	683a      	ldr	r2, [r7, #0]
 8101eb0:	fbb3 f2f2 	udiv	r2, r3, r2
 8101eb4:	6839      	ldr	r1, [r7, #0]
 8101eb6:	fb01 f202 	mul.w	r2, r1, r2
 8101eba:	1a9b      	subs	r3, r3, r2
 8101ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101ebe:	68fb      	ldr	r3, [r7, #12]
 8101ec0:	61bb      	str	r3, [r7, #24]
 8101ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101ec4:	617b      	str	r3, [r7, #20]
    scheduler->nextSyncTick = paramNextSyncTick;
 8101ec6:	69bb      	ldr	r3, [r7, #24]
 8101ec8:	697a      	ldr	r2, [r7, #20]
 8101eca:	615a      	str	r2, [r3, #20]
}
 8101ecc:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8101ece:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8101ed2:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    if ( schedulerState IS_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 8101ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101ed6:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 8101eda:	d107      	bne.n	8101eec <schedulerSync_sync+0xfe>
    {
        coreSync_getBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8101edc:	2103      	movs	r1, #3
 8101ede:	68b8      	ldr	r0, [r7, #8]
 8101ee0:	f7ff fa45 	bl	810136e <coreSync_getBarrier>
        coreSync_reactivateBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8101ee4:	2103      	movs	r1, #3
 8101ee6:	68b8      	ldr	r0, [r7, #8]
 8101ee8:	f7ff faa9 	bl	810143e <coreSync_reactivateBarrier>
    }

    return schedulerState;
 8101eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
};
 8101eee:	4618      	mov	r0, r3
 8101ef0:	3758      	adds	r7, #88	; 0x58
 8101ef2:	46bd      	mov	sp, r7
 8101ef4:	bd80      	pop	{r7, pc}

08101ef6 <spinlock_getSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_getSpinlock(BitWidthType id)
{
 8101ef6:	b580      	push	{r7, lr}
 8101ef8:	b090      	sub	sp, #64	; 0x40
 8101efa:	af00      	add	r7, sp, #0
 8101efc:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 8101efe:	f7ff fba9 	bl	8101654 <os_getOsVar>
 8101f02:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101f04:	464b      	mov	r3, r9
 8101f06:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 8101f08:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 8101f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8101f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101f0e:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 8101f10:	693b      	ldr	r3, [r7, #16]
 8101f12:	681b      	ldr	r3, [r3, #0]
 8101f14:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 8101f16:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 8101f18:	687a      	ldr	r2, [r7, #4]
 8101f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101f1c:	429a      	cmp	r2, r3
 8101f1e:	bf34      	ite	cc
 8101f20:	2301      	movcc	r3, #1
 8101f22:	2300      	movcs	r3, #0
 8101f24:	b2db      	uxtb	r3, r3
 8101f26:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 8101f28:	697b      	ldr	r3, [r7, #20]
 8101f2a:	2b00      	cmp	r3, #0
 8101f2c:	d101      	bne.n	8101f32 <spinlock_getSpinlock+0x3c>
        os_kernelPanic();
 8101f2e:	f7ff fb9b 	bl	8101668 <os_kernelPanic>
}
 8101f32:	bf00      	nop
 8101f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101f36:	61fb      	str	r3, [r7, #28]
 8101f38:	687b      	ldr	r3, [r7, #4]
 8101f3a:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SpinlockVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SpinlockVariableType * os_getOsSpinlockVar(CosmOS_OsVariableType * osVar, BitWidthType spinlockId)
{
    return (&(osVar->spinlockVars[spinlockId]));
 8101f3c:	69fb      	ldr	r3, [r7, #28]
 8101f3e:	691a      	ldr	r2, [r3, #16]
 8101f40:	69bb      	ldr	r3, [r7, #24]
 8101f42:	00db      	lsls	r3, r3, #3
 8101f44:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8101f46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8101f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101f4e:	623b      	str	r3, [r7, #32]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType spinlock_willCauseDeadlock(CosmOS_CoreVariableType * coreVar, CosmOS_SpinlockVariableType * spinlockVar)
{
    return ((spinlockVar->spinlock) AND (coreVar->cfg->coreId IS_EQUAL_TO spinlockVar->lockedByCoreId)) ? True : False;
 8101f50:	6a3b      	ldr	r3, [r7, #32]
 8101f52:	681b      	ldr	r3, [r3, #0]
 8101f54:	2b00      	cmp	r3, #0
 8101f56:	d008      	beq.n	8101f6a <spinlock_getSpinlock+0x74>
 8101f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101f5a:	681b      	ldr	r3, [r3, #0]
 8101f5c:	68da      	ldr	r2, [r3, #12]
 8101f5e:	6a3b      	ldr	r3, [r7, #32]
 8101f60:	685b      	ldr	r3, [r3, #4]
 8101f62:	429a      	cmp	r2, r3
 8101f64:	d101      	bne.n	8101f6a <spinlock_getSpinlock+0x74>
 8101f66:	2301      	movs	r3, #1
 8101f68:	e000      	b.n	8101f6c <spinlock_getSpinlock+0x76>
 8101f6a:	2300      	movs	r3, #0
 8101f6c:	b2db      	uxtb	r3, r3

	willCauseDeadlock = spinlock_willCauseDeadlock(coreVar, spinlockVar);
 8101f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if( willCauseDeadlock )
 8101f72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8101f76:	2b00      	cmp	r3, #0
 8101f78:	d002      	beq.n	8101f80 <spinlock_getSpinlock+0x8a>
	{
		spinlockState = SPINLOCK_STATE_ENUM__ERROR;
 8101f7a:	23ff      	movs	r3, #255	; 0xff
 8101f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101f7e:	e009      	b.n	8101f94 <spinlock_getSpinlock+0x9e>
	}
	else
	{
		spinlockState = CILspinlock_getSpinlock( &(spinlockVar->spinlock) );
 8101f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101f82:	4618      	mov	r0, r3
 8101f84:	f000 fba4 	bl	81026d0 <CILspinlock_getSpinlock>
 8101f88:	63f8      	str	r0, [r7, #60]	; 0x3c
		spinlockVar->lockedByCoreId = coreVar->cfg->coreId;
 8101f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101f8c:	681b      	ldr	r3, [r3, #0]
 8101f8e:	68da      	ldr	r2, [r3, #12]
 8101f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101f92:	605a      	str	r2, [r3, #4]
	}

    return spinlockState;
 8101f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8101f96:	4618      	mov	r0, r3
 8101f98:	3740      	adds	r7, #64	; 0x40
 8101f9a:	46bd      	mov	sp, r7
 8101f9c:	bd80      	pop	{r7, pc}

08101f9e <spinlock_trySpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType spinlock_trySpinlock(BitWidthType id)
{
 8101f9e:	b580      	push	{r7, lr}
 8101fa0:	b090      	sub	sp, #64	; 0x40
 8101fa2:	af00      	add	r7, sp, #0
 8101fa4:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 8101fa6:	f7ff fb55 	bl	8101654 <os_getOsVar>
 8101faa:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101fac:	464b      	mov	r3, r9
 8101fae:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 8101fb0:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 8101fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8101fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101fb6:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 8101fb8:	693b      	ldr	r3, [r7, #16]
 8101fba:	681b      	ldr	r3, [r3, #0]
 8101fbc:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 8101fbe:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 8101fc0:	687a      	ldr	r2, [r7, #4]
 8101fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101fc4:	429a      	cmp	r2, r3
 8101fc6:	bf34      	ite	cc
 8101fc8:	2301      	movcc	r3, #1
 8101fca:	2300      	movcs	r3, #0
 8101fcc:	b2db      	uxtb	r3, r3
 8101fce:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 8101fd0:	697b      	ldr	r3, [r7, #20]
 8101fd2:	2b00      	cmp	r3, #0
 8101fd4:	d101      	bne.n	8101fda <spinlock_trySpinlock+0x3c>
        os_kernelPanic();
 8101fd6:	f7ff fb47 	bl	8101668 <os_kernelPanic>
}
 8101fda:	bf00      	nop
 8101fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101fde:	61fb      	str	r3, [r7, #28]
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	61bb      	str	r3, [r7, #24]
    return (&(osVar->spinlockVars[spinlockId]));
 8101fe4:	69fb      	ldr	r3, [r7, #28]
 8101fe6:	691a      	ldr	r2, [r3, #16]
 8101fe8:	69bb      	ldr	r3, [r7, #24]
 8101fea:	00db      	lsls	r3, r3, #3
 8101fec:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8101fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8101ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101ff6:	623b      	str	r3, [r7, #32]
 8101ff8:	6a3b      	ldr	r3, [r7, #32]
 8101ffa:	681b      	ldr	r3, [r3, #0]
 8101ffc:	2b00      	cmp	r3, #0
 8101ffe:	d008      	beq.n	8102012 <spinlock_trySpinlock+0x74>
 8102000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102002:	681b      	ldr	r3, [r3, #0]
 8102004:	68da      	ldr	r2, [r3, #12]
 8102006:	6a3b      	ldr	r3, [r7, #32]
 8102008:	685b      	ldr	r3, [r3, #4]
 810200a:	429a      	cmp	r2, r3
 810200c:	d101      	bne.n	8102012 <spinlock_trySpinlock+0x74>
 810200e:	2301      	movs	r3, #1
 8102010:	e000      	b.n	8102014 <spinlock_trySpinlock+0x76>
 8102012:	2300      	movs	r3, #0
 8102014:	b2db      	uxtb	r3, r3

	willCauseDeadlock = spinlock_willCauseDeadlock(coreVar, spinlockVar);
 8102016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if( willCauseDeadlock )
 810201a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810201e:	2b00      	cmp	r3, #0
 8102020:	d002      	beq.n	8102028 <spinlock_trySpinlock+0x8a>
	{
		spinlockState = SPINLOCK_STATE_ENUM__ERROR;
 8102022:	23ff      	movs	r3, #255	; 0xff
 8102024:	63fb      	str	r3, [r7, #60]	; 0x3c
 8102026:	e00c      	b.n	8102042 <spinlock_trySpinlock+0xa4>
	}
	else
	{
		spinlockState = CILspinlock_trySpinlock( &(spinlockVar->spinlock) );
 8102028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810202a:	4618      	mov	r0, r3
 810202c:	f000 fb69 	bl	8102702 <CILspinlock_trySpinlock>
 8102030:	63f8      	str	r0, [r7, #60]	; 0x3c

		if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8102032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102034:	2b02      	cmp	r3, #2
 8102036:	d104      	bne.n	8102042 <spinlock_trySpinlock+0xa4>
		{
			spinlockVar->lockedByCoreId = coreVar->cfg->coreId;
 8102038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810203a:	681b      	ldr	r3, [r3, #0]
 810203c:	68da      	ldr	r2, [r3, #12]
 810203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102040:	605a      	str	r2, [r3, #4]
		}
	}

    return spinlockState;
 8102042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102044:	b2db      	uxtb	r3, r3
}
 8102046:	4618      	mov	r0, r3
 8102048:	3740      	adds	r7, #64	; 0x40
 810204a:	46bd      	mov	sp, r7
 810204c:	bd80      	pop	{r7, pc}

0810204e <spinlock_releaseSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_releaseSpinlock(BitWidthType id)
{
 810204e:	b580      	push	{r7, lr}
 8102050:	b08a      	sub	sp, #40	; 0x28
 8102052:	af00      	add	r7, sp, #0
 8102054:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	CosmOS_OsVariableType * osVar;
	CosmOS_SpinlockVariableType * spinlockVar;

    osVar = os_getOsVar();
 8102056:	f7ff fafd 	bl	8101654 <os_getOsVar>
 810205a:	6278      	str	r0, [r7, #36]	; 0x24
 810205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810205e:	60bb      	str	r3, [r7, #8]
    return (osVar->cfg->numberOfSpinlocks);
 8102060:	68bb      	ldr	r3, [r7, #8]
 8102062:	681b      	ldr	r3, [r3, #0]
 8102064:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 8102066:	623b      	str	r3, [r7, #32]

	cosmosAssert( id < numberOfSpinlocks );
 8102068:	687a      	ldr	r2, [r7, #4]
 810206a:	6a3b      	ldr	r3, [r7, #32]
 810206c:	429a      	cmp	r2, r3
 810206e:	bf34      	ite	cc
 8102070:	2301      	movcc	r3, #1
 8102072:	2300      	movcs	r3, #0
 8102074:	b2db      	uxtb	r3, r3
 8102076:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 8102078:	68fb      	ldr	r3, [r7, #12]
 810207a:	2b00      	cmp	r3, #0
 810207c:	d101      	bne.n	8102082 <spinlock_releaseSpinlock+0x34>
        os_kernelPanic();
 810207e:	f7ff faf3 	bl	8101668 <os_kernelPanic>
}
 8102082:	bf00      	nop
 8102084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102086:	617b      	str	r3, [r7, #20]
 8102088:	687b      	ldr	r3, [r7, #4]
 810208a:	613b      	str	r3, [r7, #16]
    return (&(osVar->spinlockVars[spinlockId]));
 810208c:	697b      	ldr	r3, [r7, #20]
 810208e:	691a      	ldr	r2, [r3, #16]
 8102090:	693b      	ldr	r3, [r7, #16]
 8102092:	00db      	lsls	r3, r3, #3
 8102094:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8102096:	61fb      	str	r3, [r7, #28]

	spinlockState = CILspinlock_releaseSpinlock( &(spinlockVar->spinlock) );
 8102098:	69fb      	ldr	r3, [r7, #28]
 810209a:	4618      	mov	r0, r3
 810209c:	f000 fb4a 	bl	8102734 <CILspinlock_releaseSpinlock>
 81020a0:	61b8      	str	r0, [r7, #24]

	return spinlockState;
 81020a2:	69bb      	ldr	r3, [r7, #24]
}
 81020a4:	4618      	mov	r0, r3
 81020a6:	3728      	adds	r7, #40	; 0x28
 81020a8:	46bd      	mov	sp, r7
 81020aa:	bd80      	pop	{r7, pc}

081020ac <stackInit_schedulableStackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType stackInit_schedulableStackInit(CosmOS_SchedulableVariableType  * schedulable)
{
 81020ac:	b580      	push	{r7, lr}
 81020ae:	b08c      	sub	sp, #48	; 0x30
 81020b0:	af00      	add	r7, sp, #0
 81020b2:	6078      	str	r0, [r7, #4]
 81020b4:	687b      	ldr	r3, [r7, #4]
 81020b6:	60fb      	str	r3, [r7, #12]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 81020b8:	68fb      	ldr	r3, [r7, #12]
 81020ba:	681b      	ldr	r3, [r3, #0]
 81020bc:	681b      	ldr	r3, [r3, #0]
    StackPointerType stackPointer;

    CosmOS_StackConfigurationType * stack;


    stack = schedulable_getStack( schedulable );
 81020be:	62fb      	str	r3, [r7, #44]	; 0x2c
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	613b      	str	r3, [r7, #16]
    return (schedulable->cfg->handler);
 81020c4:	693b      	ldr	r3, [r7, #16]
 81020c6:	681b      	ldr	r3, [r3, #0]
 81020c8:	689b      	ldr	r3, [r3, #8]
    handler = schedulable_getHandler( schedulable );
 81020ca:	62bb      	str	r3, [r7, #40]	; 0x28
 81020cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81020ce:	617b      	str	r3, [r7, #20]
    return (stack->stackLowAddress);
 81020d0:	697b      	ldr	r3, [r7, #20]
 81020d2:	685b      	ldr	r3, [r3, #4]

    stackLowAddress = stack_getStackLowAddress( stack );
 81020d4:	627b      	str	r3, [r7, #36]	; 0x24
 81020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81020d8:	61bb      	str	r3, [r7, #24]
    return (stack->stackHighAddress);
 81020da:	69bb      	ldr	r3, [r7, #24]
 81020dc:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 81020de:	623b      	str	r3, [r7, #32]

    stackPointer = CILstack_stackInit( stackLowAddress, stackHighAddress, (BitWidthType)handler );
 81020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81020e2:	461a      	mov	r2, r3
 81020e4:	6a39      	ldr	r1, [r7, #32]
 81020e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81020e8:	f000 fb3c 	bl	8102764 <CILstack_stackInit>
 81020ec:	61f8      	str	r0, [r7, #28]

    return stackPointer;
 81020ee:	69fb      	ldr	r3, [r7, #28]
}
 81020f0:	4618      	mov	r0, r3
 81020f2:	3730      	adds	r7, #48	; 0x30
 81020f4:	46bd      	mov	sp, r7
 81020f6:	bd80      	pop	{r7, pc}

081020f8 <stackInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void stackInit_init(CosmOS_CoreVariableType * coreVar)
{
 81020f8:	b580      	push	{r7, lr}
 81020fa:	b094      	sub	sp, #80	; 0x50
 81020fc:	af00      	add	r7, sp, #0
 81020fe:	6078      	str	r0, [r7, #4]
 8102100:	687b      	ldr	r3, [r7, #4]
 8102102:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->cfg->numberOfPrograms);
 8102104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102106:	681b      	ldr	r3, [r3, #0]
 8102108:	685b      	ldr	r3, [r3, #4]
                  stackPointerRetVal;

    CosmOS_ThreadVariableType * threadVar;
    CosmOS_ProgramVariableType * programVar;

    numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 810210a:	647b      	str	r3, [r7, #68]	; 0x44

    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 810210c:	2300      	movs	r3, #0
 810210e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102110:	e037      	b.n	8102182 <stackInit_init+0x8a>
 8102112:	687b      	ldr	r3, [r7, #4]
 8102114:	627b      	str	r3, [r7, #36]	; 0x24
 8102116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102118:	623b      	str	r3, [r7, #32]
    return (&(core->programVars[programIterator]));
 810211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810211c:	68da      	ldr	r2, [r3, #12]
 810211e:	6a3b      	ldr	r3, [r7, #32]
 8102120:	011b      	lsls	r3, r3, #4
 8102122:	4413      	add	r3, r2
    {
        programVar = core_getCoreProgramVar( coreVar, programIterator );
 8102124:	643b      	str	r3, [r7, #64]	; 0x40
 8102126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102128:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->numberOfThreads);
 810212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810212c:	681b      	ldr	r3, [r3, #0]
 810212e:	689b      	ldr	r3, [r3, #8]
        numberOfThreads = program_getProgramNumberOfThreads( programVar );
 8102130:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8102132:	2300      	movs	r3, #0
 8102134:	64bb      	str	r3, [r7, #72]	; 0x48
 8102136:	e01d      	b.n	8102174 <stackInit_init+0x7c>
 8102138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810213a:	613b      	str	r3, [r7, #16]
 810213c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810213e:	60fb      	str	r3, [r7, #12]
    return (&(program->threadVars[threadIterator]));
 8102140:	693b      	ldr	r3, [r7, #16]
 8102142:	689a      	ldr	r2, [r3, #8]
 8102144:	68fb      	ldr	r3, [r7, #12]
 8102146:	00db      	lsls	r3, r3, #3
 8102148:	4413      	add	r3, r2
        {
            CosmOS_SchedulableVariableType * schedulableVar;


            threadVar = program_getProgramThread( programVar, threadIterator );
 810214a:	63bb      	str	r3, [r7, #56]	; 0x38
 810214c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810214e:	617b      	str	r3, [r7, #20]
 8102150:	697b      	ldr	r3, [r7, #20]
 8102152:	685b      	ldr	r3, [r3, #4]
            schedulableVar = thread_getThreadSchedulable( threadVar );
 8102154:	637b      	str	r3, [r7, #52]	; 0x34

            stackPointerRetVal = stackInit_schedulableStackInit( schedulableVar );
 8102156:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8102158:	f7ff ffa8 	bl	81020ac <stackInit_schedulableStackInit>
 810215c:	6338      	str	r0, [r7, #48]	; 0x30
 810215e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102160:	61fb      	str	r3, [r7, #28]
 8102162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102164:	61bb      	str	r3, [r7, #24]
    schedulable->stackPointer = stackPointerParam;
 8102166:	69fb      	ldr	r3, [r7, #28]
 8102168:	69ba      	ldr	r2, [r7, #24]
 810216a:	609a      	str	r2, [r3, #8]
}
 810216c:	bf00      	nop
        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 810216e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102170:	3301      	adds	r3, #1
 8102172:	64bb      	str	r3, [r7, #72]	; 0x48
 8102174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8102176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102178:	429a      	cmp	r2, r3
 810217a:	d3dd      	bcc.n	8102138 <stackInit_init+0x40>
    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 810217c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810217e:	3301      	adds	r3, #1
 8102180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8102184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102186:	429a      	cmp	r2, r3
 8102188:	d3c3      	bcc.n	8102112 <stackInit_init+0x1a>
            schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
        }
    }
}
 810218a:	bf00      	nop
 810218c:	bf00      	nop
 810218e:	3750      	adds	r7, #80	; 0x50
 8102190:	46bd      	mov	sp, r7
 8102192:	bd80      	pop	{r7, pc}

08102194 <sysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysCalls_os(BitWidthType id)
{
 8102194:	b580      	push	{r7, lr}
 8102196:	b082      	sub	sp, #8
 8102198:	af00      	add	r7, sp, #0
 810219a:	6078      	str	r0, [r7, #4]
    CILsysCalls_os( id );
 810219c:	6878      	ldr	r0, [r7, #4]
 810219e:	f000 fb89 	bl	81028b4 <CILsysCalls_os>
};
 81021a2:	bf00      	nop
 81021a4:	3708      	adds	r7, #8
 81021a6:	46bd      	mov	sp, r7
 81021a8:	bd80      	pop	{r7, pc}

081021aa <sysCalls_readWrite>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_readWrite(BitWidthType id, void * entity, BitWidthType size)
{
 81021aa:	b580      	push	{r7, lr}
 81021ac:	b086      	sub	sp, #24
 81021ae:	af00      	add	r7, sp, #0
 81021b0:	60f8      	str	r0, [r7, #12]
 81021b2:	60b9      	str	r1, [r7, #8]
 81021b4:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_readWrite( id, entity, size );
 81021b6:	687a      	ldr	r2, [r7, #4]
 81021b8:	68b9      	ldr	r1, [r7, #8]
 81021ba:	68f8      	ldr	r0, [r7, #12]
 81021bc:	f000 fb85 	bl	81028ca <CILsysCalls_readWrite>
 81021c0:	6178      	str	r0, [r7, #20]

    return returnValue;
 81021c2:	697b      	ldr	r3, [r7, #20]
};
 81021c4:	4618      	mov	r0, r3
 81021c6:	3718      	adds	r7, #24
 81021c8:	46bd      	mov	sp, r7
 81021ca:	bd80      	pop	{r7, pc}

081021cc <sysJobs_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysJobs_dispatcher(void)
{
 81021cc:	b580      	push	{r7, lr}
 81021ce:	b096      	sub	sp, #88	; 0x58
 81021d0:	af00      	add	r7, sp, #0

    CosmOS_CoreVariableType * coreVar;
    CosmOS_SysJobsVariableType * sysJobsVar;


    coreVar = core_getCoreVar();
 81021d2:	f7ff f895 	bl	8101300 <core_getCoreVar>
 81021d6:	64f8      	str	r0, [r7, #76]	; 0x4c
 81021d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81021da:	627b      	str	r3, [r7, #36]	; 0x24
    return (core->sysJobs);
 81021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81021de:	69db      	ldr	r3, [r3, #28]
    sysJobsVar = core_getCoreOsSysJobs( coreVar );
 81021e0:	64bb      	str	r3, [r7, #72]	; 0x48
 81021e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81021e4:	62bb      	str	r3, [r7, #40]	; 0x28
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs)
{
    return (sysJobs->currentTick);
 81021e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81021e8:	685b      	ldr	r3, [r3, #4]

    sysJobsCurrentTick = sysJobs_getSysJobsCurrentTick( sysJobsVar );
 81021ea:	647b      	str	r3, [r7, #68]	; 0x44
 81021ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (sysJobs->cfg->numOfGroups);
 81021f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81021f2:	681b      	ldr	r3, [r3, #0]
 81021f4:	685b      	ldr	r3, [r3, #4]
    numOfGroups = sysJobs_getSysJobsNumOfGroups( sysJobsVar );
 81021f6:	643b      	str	r3, [r7, #64]	; 0x40

    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 81021f8:	2300      	movs	r3, #0
 81021fa:	657b      	str	r3, [r7, #84]	; 0x54
 81021fc:	e049      	b.n	8102292 <sysJobs_dispatcher+0xc6>
 81021fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102200:	623b      	str	r3, [r7, #32]
 8102202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102204:	61fb      	str	r3, [r7, #28]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsGroupTickMultiplicator(CosmOS_SysJobsVariableType * sysJobs, BitWidthType groupId)
{
    return (sysJobs->cfg->groups[groupId].tickMultiplicator);
 8102206:	6a3b      	ldr	r3, [r7, #32]
 8102208:	681b      	ldr	r3, [r3, #0]
 810220a:	6819      	ldr	r1, [r3, #0]
 810220c:	69fa      	ldr	r2, [r7, #28]
 810220e:	4613      	mov	r3, r2
 8102210:	005b      	lsls	r3, r3, #1
 8102212:	4413      	add	r3, r2
 8102214:	009b      	lsls	r3, r3, #2
 8102216:	440b      	add	r3, r1
 8102218:	689b      	ldr	r3, [r3, #8]
    {
        BitWidthType  groupTickMultiplicator;


        groupTickMultiplicator = sysJobs_getSysJobsGroupTickMultiplicator( sysJobsVar, groupIterator );
 810221a:	63bb      	str	r3, [r7, #56]	; 0x38

        if ( IS_NOT( sysJobsCurrentTick % groupTickMultiplicator ) )
 810221c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810221e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8102220:	fbb3 f2f2 	udiv	r2, r3, r2
 8102224:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8102226:	fb01 f202 	mul.w	r2, r1, r2
 810222a:	1a9b      	subs	r3, r3, r2
 810222c:	2b00      	cmp	r3, #0
 810222e:	d12d      	bne.n	810228c <sysJobs_dispatcher+0xc0>
 8102230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102232:	613b      	str	r3, [r7, #16]
 8102234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102236:	60fb      	str	r3, [r7, #12]
    return (CosmOS_GenericVoidType *)(sysJobs->cfg->groups[groupId].handlers);
 8102238:	693b      	ldr	r3, [r7, #16]
 810223a:	681b      	ldr	r3, [r3, #0]
 810223c:	6819      	ldr	r1, [r3, #0]
 810223e:	68fa      	ldr	r2, [r7, #12]
 8102240:	4613      	mov	r3, r2
 8102242:	005b      	lsls	r3, r3, #1
 8102244:	4413      	add	r3, r2
 8102246:	009b      	lsls	r3, r3, #2
 8102248:	440b      	add	r3, r1
 810224a:	681b      	ldr	r3, [r3, #0]
        {
            BitWidthType numOfHandlers;
            CosmOS_GenericVoidType * handlers;


            handlers = sysJobs_getSysJobsGroupHandlers( sysJobsVar, groupIterator );
 810224c:	637b      	str	r3, [r7, #52]	; 0x34
 810224e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102250:	61bb      	str	r3, [r7, #24]
 8102252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102254:	617b      	str	r3, [r7, #20]
    return (sysJobs->cfg->groups[groupId].numOfHandlers);
 8102256:	69bb      	ldr	r3, [r7, #24]
 8102258:	681b      	ldr	r3, [r3, #0]
 810225a:	6819      	ldr	r1, [r3, #0]
 810225c:	697a      	ldr	r2, [r7, #20]
 810225e:	4613      	mov	r3, r2
 8102260:	005b      	lsls	r3, r3, #1
 8102262:	4413      	add	r3, r2
 8102264:	009b      	lsls	r3, r3, #2
 8102266:	440b      	add	r3, r1
 8102268:	685b      	ldr	r3, [r3, #4]
            numOfHandlers = sysJobs_getSysJobsGroupNumOfHandlers( sysJobsVar, groupIterator );
 810226a:	633b      	str	r3, [r7, #48]	; 0x30

            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 810226c:	2300      	movs	r3, #0
 810226e:	653b      	str	r3, [r7, #80]	; 0x50
 8102270:	e008      	b.n	8102284 <sysJobs_dispatcher+0xb8>
            {
                handlers[handlerIterator]();
 8102272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102274:	009b      	lsls	r3, r3, #2
 8102276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102278:	4413      	add	r3, r2
 810227a:	681b      	ldr	r3, [r3, #0]
 810227c:	4798      	blx	r3
            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 810227e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102280:	3301      	adds	r3, #1
 8102282:	653b      	str	r3, [r7, #80]	; 0x50
 8102284:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8102286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102288:	429a      	cmp	r2, r3
 810228a:	d3f2      	bcc.n	8102272 <sysJobs_dispatcher+0xa6>
    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 810228c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810228e:	3301      	adds	r3, #1
 8102290:	657b      	str	r3, [r7, #84]	; 0x54
 8102292:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8102294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102296:	429a      	cmp	r2, r3
 8102298:	d3b1      	bcc.n	81021fe <sysJobs_dispatcher+0x32>
 810229a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810229c:	603b      	str	r3, [r7, #0]
    return (sysJobs->cfg->hyperTick);
 810229e:	683b      	ldr	r3, [r7, #0]
 81022a0:	681b      	ldr	r3, [r3, #0]
 81022a2:	689b      	ldr	r3, [r3, #8]
            }
        }
    }

    hyperTick = sysJobs_getSysJobsHyperTick( sysJobsVar );
 81022a4:	63fb      	str	r3, [r7, #60]	; 0x3c

    sysJobsCurrentTick = ( ( sysJobsCurrentTick + 1 ) % hyperTick );
 81022a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81022a8:	3301      	adds	r3, #1
 81022aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81022ac:	fbb3 f2f2 	udiv	r2, r3, r2
 81022b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81022b2:	fb01 f202 	mul.w	r2, r1, r2
 81022b6:	1a9b      	subs	r3, r3, r2
 81022b8:	647b      	str	r3, [r7, #68]	; 0x44
 81022ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81022bc:	60bb      	str	r3, [r7, #8]
 81022be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81022c0:	607b      	str	r3, [r7, #4]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void sysJobs_setSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs, BitWidthType currentTickParam)
{
    sysJobs->currentTick = currentTickParam;
 81022c2:	68bb      	ldr	r3, [r7, #8]
 81022c4:	687a      	ldr	r2, [r7, #4]
 81022c6:	605a      	str	r2, [r3, #4]
}
 81022c8:	bf00      	nop
    sysJobs_setSysJobsCurrentTick( sysJobsVar, sysJobsCurrentTick );

};
 81022ca:	bf00      	nop
 81022cc:	3758      	adds	r7, #88	; 0x58
 81022ce:	46bd      	mov	sp, r7
 81022d0:	bd80      	pop	{r7, pc}

081022d2 <CILcore_getCoreId>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILcore_getCoreId(void)
{
 81022d2:	b580      	push	{r7, lr}
 81022d4:	af00      	add	r7, sp, #0
    return (HAL_GetCurrentCPUID() == CM7_CPUID) ? CORE_0_ID : CORE_1_ID;
 81022d6:	f002 f86d 	bl	81043b4 <HAL_GetCurrentCPUID>
 81022da:	4603      	mov	r3, r0
 81022dc:	2b03      	cmp	r3, #3
 81022de:	bf14      	ite	ne
 81022e0:	2301      	movne	r3, #1
 81022e2:	2300      	moveq	r3, #0
 81022e4:	b2db      	uxtb	r3, r3
}
 81022e6:	4618      	mov	r0, r3
 81022e8:	bd80      	pop	{r7, pc}

081022ea <CILcore_setCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILcore_setCoreVar(CosmOS_OsVariableType * osVar)
{
 81022ea:	b580      	push	{r7, lr}
 81022ec:	b08a      	sub	sp, #40	; 0x28
 81022ee:	af00      	add	r7, sp, #0
 81022f0:	6078      	str	r0, [r7, #4]
    BitWidthType coreId,
                numberOfCores;

    CosmOS_CoreVariableType * coreVar;

    coreId = CILcore_getCoreId();
 81022f2:	f7ff ffee 	bl	81022d2 <CILcore_getCoreId>
 81022f6:	6278      	str	r0, [r7, #36]	; 0x24
 81022f8:	687b      	ldr	r3, [r7, #4]
 81022fa:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfCores);
 81022fc:	68fb      	ldr	r3, [r7, #12]
 81022fe:	681b      	ldr	r3, [r3, #0]
 8102300:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 8102302:	623b      	str	r3, [r7, #32]

    cosmosAssert( coreId < numberOfCores );
 8102304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102306:	6a3b      	ldr	r3, [r7, #32]
 8102308:	429a      	cmp	r2, r3
 810230a:	bf34      	ite	cc
 810230c:	2301      	movcc	r3, #1
 810230e:	2300      	movcs	r3, #0
 8102310:	b2db      	uxtb	r3, r3
 8102312:	613b      	str	r3, [r7, #16]
    if ( IS_NOT( result ) )
 8102314:	693b      	ldr	r3, [r7, #16]
 8102316:	2b00      	cmp	r3, #0
 8102318:	d101      	bne.n	810231e <CILcore_setCoreVar+0x34>
        os_kernelPanic();
 810231a:	f7ff f9a5 	bl	8101668 <os_kernelPanic>
}
 810231e:	bf00      	nop
 8102320:	687b      	ldr	r3, [r7, #4]
 8102322:	61bb      	str	r3, [r7, #24]
 8102324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102326:	617b      	str	r3, [r7, #20]
    return (&(osVar->coreVars[coreId]));
 8102328:	69bb      	ldr	r3, [r7, #24]
 810232a:	685a      	ldr	r2, [r3, #4]
 810232c:	697b      	ldr	r3, [r7, #20]
 810232e:	015b      	lsls	r3, r3, #5
 8102330:	4413      	add	r3, r2

    coreVar = os_getCoreVar( osVar, coreId );
 8102332:	61fb      	str	r3, [r7, #28]

    //must be changed, not valid for all compilers
    __asm volatile("MOV R9,%[coreVariable]" : [coreVariable] "=r" (coreVar));
 8102334:	4699      	mov	r9, r3
 8102336:	61fb      	str	r3, [r7, #28]
}
 8102338:	bf00      	nop
 810233a:	3728      	adds	r7, #40	; 0x28
 810233c:	46bd      	mov	sp, r7
 810233e:	bd80      	pop	{r7, pc}

08102340 <CILGPIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILGPIO_togglePin(void *GPIOx, BitWidthType GPIO_Pin)
{
 8102340:	b580      	push	{r7, lr}
 8102342:	b082      	sub	sp, #8
 8102344:	af00      	add	r7, sp, #0
 8102346:	6078      	str	r0, [r7, #4]
 8102348:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin( GPIOx, (uint16_t)GPIO_Pin );
 810234a:	683b      	ldr	r3, [r7, #0]
 810234c:	b29b      	uxth	r3, r3
 810234e:	4619      	mov	r1, r3
 8102350:	6878      	ldr	r0, [r7, #4]
 8102352:	f002 fa0c 	bl	810476e <HAL_GPIO_TogglePin>
}
 8102356:	bf00      	nop
 8102358:	3708      	adds	r7, #8
 810235a:	46bd      	mov	sp, r7
 810235c:	bd80      	pop	{r7, pc}
	...

08102360 <CILmemoryProtection_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_init(void)
{
 8102360:	b580      	push	{r7, lr}
 8102362:	b08a      	sub	sp, #40	; 0x28
 8102364:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8102366:	463b      	mov	r3, r7
 8102368:	2200      	movs	r2, #0
 810236a:	601a      	str	r2, [r3, #0]
 810236c:	605a      	str	r2, [r3, #4]
 810236e:	609a      	str	r2, [r3, #8]
 8102370:	60da      	str	r2, [r3, #12]
    BitWidthType core,
                 address;

    core = CILcore_getCoreId();
 8102372:	f7ff ffae 	bl	81022d2 <CILcore_getCoreId>
 8102376:	6238      	str	r0, [r7, #32]

    HAL_MPU_Disable();
 8102378:	f001 ffa0 	bl	81042bc <HAL_MPU_Disable>

    if( core IS_EQUAL_TO CORE_0_ID){
 810237c:	6a3b      	ldr	r3, [r7, #32]
 810237e:	2b00      	cmp	r3, #0
 8102380:	d11e      	bne.n	81023c0 <CILmemoryProtection_init+0x60>

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102382:	2301      	movs	r3, #1
 8102384:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8102386:	2300      	movs	r3, #0
 8102388:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 810238a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 810238e:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8102390:	2314      	movs	r3, #20
 8102392:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 8102394:	2300      	movs	r3, #0
 8102396:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102398:	2301      	movs	r3, #1
 810239a:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 810239c:	2306      	movs	r3, #6
 810239e:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 81023a0:	2300      	movs	r3, #0
 81023a2:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 81023a4:	2301      	movs	r3, #1
 81023a6:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 81023a8:	2301      	movs	r3, #1
 81023aa:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 81023ac:	2301      	movs	r3, #1
 81023ae:	73fb      	strb	r3, [r7, #15]

        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81023b0:	463b      	mov	r3, r7
 81023b2:	4618      	mov	r0, r3
 81023b4:	f001 ffba 	bl	810432c <HAL_MPU_ConfigRegion>

        address = 0x20000000;
 81023b8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 81023bc:	627b      	str	r3, [r7, #36]	; 0x24
 81023be:	e01d      	b.n	81023fc <CILmemoryProtection_init+0x9c>

    }
    else
    {

        MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81023c0:	2301      	movs	r3, #1
 81023c2:	703b      	strb	r3, [r7, #0]
        MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 81023c4:	2300      	movs	r3, #0
 81023c6:	707b      	strb	r3, [r7, #1]
        MPU_InitStruct.BaseAddress = 0x08000000;
 81023c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 81023cc:	607b      	str	r3, [r7, #4]
        MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 81023ce:	2314      	movs	r3, #20
 81023d0:	723b      	strb	r3, [r7, #8]
        MPU_InitStruct.SubRegionDisable = 0x00;
 81023d2:	2300      	movs	r3, #0
 81023d4:	727b      	strb	r3, [r7, #9]
        MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 81023d6:	2301      	movs	r3, #1
 81023d8:	72bb      	strb	r3, [r7, #10]
        MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 81023da:	2306      	movs	r3, #6
 81023dc:	72fb      	strb	r3, [r7, #11]
        MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 81023de:	2300      	movs	r3, #0
 81023e0:	733b      	strb	r3, [r7, #12]
        MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 81023e2:	2301      	movs	r3, #1
 81023e4:	737b      	strb	r3, [r7, #13]
        MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 81023e6:	2301      	movs	r3, #1
 81023e8:	73bb      	strb	r3, [r7, #14]
        MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 81023ea:	2301      	movs	r3, #1
 81023ec:	73fb      	strb	r3, [r7, #15]

        HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81023ee:	463b      	mov	r3, r7
 81023f0:	4618      	mov	r0, r3
 81023f2:	f001 ff9b 	bl	810432c <HAL_MPU_ConfigRegion>

        address = 0x10000000;
 81023f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 81023fa:	627b      	str	r3, [r7, #36]	; 0x24

    }

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81023fc:	2301      	movs	r3, #1
 81023fe:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8102400:	2301      	movs	r3, #1
 8102402:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = address;
 8102404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102406:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 8102408:	2310      	movs	r3, #16
 810240a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 810240c:	2300      	movs	r3, #0
 810240e:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102410:	2301      	movs	r3, #1
 8102412:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8102414:	2302      	movs	r3, #2
 8102416:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102418:	2300      	movs	r3, #0
 810241a:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 810241c:	2301      	movs	r3, #1
 810241e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102420:	2301      	movs	r3, #1
 8102422:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102424:	2301      	movs	r3, #1
 8102426:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102428:	463b      	mov	r3, r7
 810242a:	4618      	mov	r0, r3
 810242c:	f001 ff7e 	bl	810432c <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102430:	2301      	movs	r3, #1
 8102432:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8102434:	2302      	movs	r3, #2
 8102436:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress =  (BitWidthType)_s_os_section_consts;
 8102438:	4b43      	ldr	r3, [pc, #268]	; (8102548 <CILmemoryProtection_init+0x1e8>)
 810243a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 810243c:	4a43      	ldr	r2, [pc, #268]	; (810254c <CILmemoryProtection_init+0x1ec>)
 810243e:	4b42      	ldr	r3, [pc, #264]	; (8102548 <CILmemoryProtection_init+0x1e8>)
 8102440:	1ad3      	subs	r3, r2, r3
 8102442:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 1;
 8102444:	697b      	ldr	r3, [r7, #20]
 8102446:	085b      	lsrs	r3, r3, #1
 8102448:	697a      	ldr	r2, [r7, #20]
 810244a:	4313      	orrs	r3, r2
 810244c:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 2;
 810244e:	697b      	ldr	r3, [r7, #20]
 8102450:	089b      	lsrs	r3, r3, #2
 8102452:	697a      	ldr	r2, [r7, #20]
 8102454:	4313      	orrs	r3, r2
 8102456:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 4;
 8102458:	697b      	ldr	r3, [r7, #20]
 810245a:	091b      	lsrs	r3, r3, #4
 810245c:	697a      	ldr	r2, [r7, #20]
 810245e:	4313      	orrs	r3, r2
 8102460:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 8;
 8102462:	697b      	ldr	r3, [r7, #20]
 8102464:	0a1b      	lsrs	r3, r3, #8
 8102466:	697a      	ldr	r2, [r7, #20]
 8102468:	4313      	orrs	r3, r2
 810246a:	617b      	str	r3, [r7, #20]
    stackSize |= stackSize >> 16;
 810246c:	697b      	ldr	r3, [r7, #20]
 810246e:	0c1b      	lsrs	r3, r3, #16
 8102470:	697a      	ldr	r2, [r7, #20]
 8102472:	4313      	orrs	r3, r2
 8102474:	617b      	str	r3, [r7, #20]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 8102476:	697b      	ldr	r3, [r7, #20]
 8102478:	4a35      	ldr	r2, [pc, #212]	; (8102550 <CILmemoryProtection_init+0x1f0>)
 810247a:	fb02 f303 	mul.w	r3, r2, r3
 810247e:	0edb      	lsrs	r3, r3, #27
 8102480:	4a34      	ldr	r2, [pc, #208]	; (8102554 <CILmemoryProtection_init+0x1f4>)
 8102482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102486:	613b      	str	r3, [r7, #16]
    return (result-1);
 8102488:	693b      	ldr	r3, [r7, #16]
 810248a:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 810248c:	b2db      	uxtb	r3, r3
 810248e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102490:	2300      	movs	r3, #0
 8102492:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102494:	2301      	movs	r3, #1
 8102496:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8102498:	2306      	movs	r3, #6
 810249a:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 810249c:	2300      	movs	r3, #0
 810249e:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 81024a0:	2301      	movs	r3, #1
 81024a2:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 81024a4:	2301      	movs	r3, #1
 81024a6:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 81024a8:	2301      	movs	r3, #1
 81024aa:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81024ac:	463b      	mov	r3, r7
 81024ae:	4618      	mov	r0, r3
 81024b0:	f001 ff3c 	bl	810432c <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81024b4:	2301      	movs	r3, #1
 81024b6:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 81024b8:	2303      	movs	r3, #3
 81024ba:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_os_section_vars;
 81024bc:	4b26      	ldr	r3, [pc, #152]	; (8102558 <CILmemoryProtection_init+0x1f8>)
 81024be:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 81024c0:	4a26      	ldr	r2, [pc, #152]	; (810255c <CILmemoryProtection_init+0x1fc>)
 81024c2:	4b25      	ldr	r3, [pc, #148]	; (8102558 <CILmemoryProtection_init+0x1f8>)
 81024c4:	1ad3      	subs	r3, r2, r3
 81024c6:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 81024c8:	69fb      	ldr	r3, [r7, #28]
 81024ca:	085b      	lsrs	r3, r3, #1
 81024cc:	69fa      	ldr	r2, [r7, #28]
 81024ce:	4313      	orrs	r3, r2
 81024d0:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 81024d2:	69fb      	ldr	r3, [r7, #28]
 81024d4:	089b      	lsrs	r3, r3, #2
 81024d6:	69fa      	ldr	r2, [r7, #28]
 81024d8:	4313      	orrs	r3, r2
 81024da:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 81024dc:	69fb      	ldr	r3, [r7, #28]
 81024de:	091b      	lsrs	r3, r3, #4
 81024e0:	69fa      	ldr	r2, [r7, #28]
 81024e2:	4313      	orrs	r3, r2
 81024e4:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 81024e6:	69fb      	ldr	r3, [r7, #28]
 81024e8:	0a1b      	lsrs	r3, r3, #8
 81024ea:	69fa      	ldr	r2, [r7, #28]
 81024ec:	4313      	orrs	r3, r2
 81024ee:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 81024f0:	69fb      	ldr	r3, [r7, #28]
 81024f2:	0c1b      	lsrs	r3, r3, #16
 81024f4:	69fa      	ldr	r2, [r7, #28]
 81024f6:	4313      	orrs	r3, r2
 81024f8:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 81024fa:	69fb      	ldr	r3, [r7, #28]
 81024fc:	4a14      	ldr	r2, [pc, #80]	; (8102550 <CILmemoryProtection_init+0x1f0>)
 81024fe:	fb02 f303 	mul.w	r3, r2, r3
 8102502:	0edb      	lsrs	r3, r3, #27
 8102504:	4a13      	ldr	r2, [pc, #76]	; (8102554 <CILmemoryProtection_init+0x1f4>)
 8102506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810250a:	61bb      	str	r3, [r7, #24]
    return (result-1);
 810250c:	69bb      	ldr	r3, [r7, #24]
 810250e:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8102510:	b2db      	uxtb	r3, r3
 8102512:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102514:	2300      	movs	r3, #0
 8102516:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102518:	2301      	movs	r3, #1
 810251a:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 810251c:	2302      	movs	r3, #2
 810251e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102520:	2300      	movs	r3, #0
 8102522:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102524:	2301      	movs	r3, #1
 8102526:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102528:	2301      	movs	r3, #1
 810252a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 810252c:	2301      	movs	r3, #1
 810252e:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102530:	463b      	mov	r3, r7
 8102532:	4618      	mov	r0, r3
 8102534:	f001 fefa 	bl	810432c <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8102538:	2006      	movs	r0, #6
 810253a:	f001 fed7 	bl	81042ec <HAL_MPU_Enable>

}
 810253e:	bf00      	nop
 8102540:	3728      	adds	r7, #40	; 0x28
 8102542:	46bd      	mov	sp, r7
 8102544:	bd80      	pop	{r7, pc}
 8102546:	bf00      	nop
 8102548:	38000000 	.word	0x38000000
 810254c:	38000800 	.word	0x38000800
 8102550:	07c4acdd 	.word	0x07c4acdd
 8102554:	081055a0 	.word	0x081055a0
 8102558:	38008000 	.word	0x38008000
 810255c:	38008400 	.word	0x38008400

08102560 <CILmemoryProtection_setStackOverflowProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setStackOverflowProtection(AddressType stackLowAddress, AddressType stackHighAddress)
{
 8102560:	b580      	push	{r7, lr}
 8102562:	b088      	sub	sp, #32
 8102564:	af00      	add	r7, sp, #0
 8102566:	6078      	str	r0, [r7, #4]
 8102568:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 810256a:	f107 0308 	add.w	r3, r7, #8
 810256e:	2200      	movs	r2, #0
 8102570:	601a      	str	r2, [r3, #0]
 8102572:	605a      	str	r2, [r3, #4]
 8102574:	609a      	str	r2, [r3, #8]
 8102576:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8102578:	f001 fea0 	bl	81042bc <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 810257c:	2301      	movs	r3, #1
 810257e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 8102580:	2307      	movs	r3, #7
 8102582:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (stackLowAddress);
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8102588:	683a      	ldr	r2, [r7, #0]
 810258a:	687b      	ldr	r3, [r7, #4]
 810258c:	1ad3      	subs	r3, r2, r3
 810258e:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 8102590:	69fb      	ldr	r3, [r7, #28]
 8102592:	085b      	lsrs	r3, r3, #1
 8102594:	69fa      	ldr	r2, [r7, #28]
 8102596:	4313      	orrs	r3, r2
 8102598:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 810259a:	69fb      	ldr	r3, [r7, #28]
 810259c:	089b      	lsrs	r3, r3, #2
 810259e:	69fa      	ldr	r2, [r7, #28]
 81025a0:	4313      	orrs	r3, r2
 81025a2:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 81025a4:	69fb      	ldr	r3, [r7, #28]
 81025a6:	091b      	lsrs	r3, r3, #4
 81025a8:	69fa      	ldr	r2, [r7, #28]
 81025aa:	4313      	orrs	r3, r2
 81025ac:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 81025ae:	69fb      	ldr	r3, [r7, #28]
 81025b0:	0a1b      	lsrs	r3, r3, #8
 81025b2:	69fa      	ldr	r2, [r7, #28]
 81025b4:	4313      	orrs	r3, r2
 81025b6:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 81025b8:	69fb      	ldr	r3, [r7, #28]
 81025ba:	0c1b      	lsrs	r3, r3, #16
 81025bc:	69fa      	ldr	r2, [r7, #28]
 81025be:	4313      	orrs	r3, r2
 81025c0:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 81025c2:	69fb      	ldr	r3, [r7, #28]
 81025c4:	4a12      	ldr	r2, [pc, #72]	; (8102610 <CILmemoryProtection_setStackOverflowProtection+0xb0>)
 81025c6:	fb02 f303 	mul.w	r3, r2, r3
 81025ca:	0edb      	lsrs	r3, r3, #27
 81025cc:	4a11      	ldr	r2, [pc, #68]	; (8102614 <CILmemoryProtection_setStackOverflowProtection+0xb4>)
 81025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81025d2:	61bb      	str	r3, [r7, #24]
    return (result-1);
 81025d4:	69bb      	ldr	r3, [r7, #24]
 81025d6:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 81025d8:	b2db      	uxtb	r3, r3
 81025da:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 81025dc:	2300      	movs	r3, #0
 81025de:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 81025e0:	2301      	movs	r3, #1
 81025e2:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 81025e4:	2303      	movs	r3, #3
 81025e6:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 81025e8:	2300      	movs	r3, #0
 81025ea:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 81025ec:	2301      	movs	r3, #1
 81025ee:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 81025f0:	2301      	movs	r3, #1
 81025f2:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 81025f4:	2301      	movs	r3, #1
 81025f6:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81025f8:	f107 0308 	add.w	r3, r7, #8
 81025fc:	4618      	mov	r0, r3
 81025fe:	f001 fe95 	bl	810432c <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8102602:	2006      	movs	r0, #6
 8102604:	f001 fe72 	bl	81042ec <HAL_MPU_Enable>
}
 8102608:	bf00      	nop
 810260a:	3720      	adds	r7, #32
 810260c:	46bd      	mov	sp, r7
 810260e:	bd80      	pop	{r7, pc}
 8102610:	07c4acdd 	.word	0x07c4acdd
 8102614:	081055a0 	.word	0x081055a0

08102618 <CILmemoryProtection_setProgramMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setProgramMemoryProtection(AddressType lowAddress, AddressType highAddress)
{
 8102618:	b580      	push	{r7, lr}
 810261a:	b088      	sub	sp, #32
 810261c:	af00      	add	r7, sp, #0
 810261e:	6078      	str	r0, [r7, #4]
 8102620:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8102622:	f107 0308 	add.w	r3, r7, #8
 8102626:	2200      	movs	r2, #0
 8102628:	601a      	str	r2, [r3, #0]
 810262a:	605a      	str	r2, [r3, #4]
 810262c:	609a      	str	r2, [r3, #8]
 810262e:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8102630:	f001 fe44 	bl	81042bc <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102634:	2301      	movs	r3, #1
 8102636:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 8102638:	2306      	movs	r3, #6
 810263a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8102640:	683a      	ldr	r2, [r7, #0]
 8102642:	687b      	ldr	r3, [r7, #4]
 8102644:	1ad3      	subs	r3, r2, r3
 8102646:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 1;
 8102648:	69fb      	ldr	r3, [r7, #28]
 810264a:	085b      	lsrs	r3, r3, #1
 810264c:	69fa      	ldr	r2, [r7, #28]
 810264e:	4313      	orrs	r3, r2
 8102650:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 2;
 8102652:	69fb      	ldr	r3, [r7, #28]
 8102654:	089b      	lsrs	r3, r3, #2
 8102656:	69fa      	ldr	r2, [r7, #28]
 8102658:	4313      	orrs	r3, r2
 810265a:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 4;
 810265c:	69fb      	ldr	r3, [r7, #28]
 810265e:	091b      	lsrs	r3, r3, #4
 8102660:	69fa      	ldr	r2, [r7, #28]
 8102662:	4313      	orrs	r3, r2
 8102664:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 8;
 8102666:	69fb      	ldr	r3, [r7, #28]
 8102668:	0a1b      	lsrs	r3, r3, #8
 810266a:	69fa      	ldr	r2, [r7, #28]
 810266c:	4313      	orrs	r3, r2
 810266e:	61fb      	str	r3, [r7, #28]
    stackSize |= stackSize >> 16;
 8102670:	69fb      	ldr	r3, [r7, #28]
 8102672:	0c1b      	lsrs	r3, r3, #16
 8102674:	69fa      	ldr	r2, [r7, #28]
 8102676:	4313      	orrs	r3, r2
 8102678:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(stackSize * 0x07C4ACDDU) >> 27];
 810267a:	69fb      	ldr	r3, [r7, #28]
 810267c:	4a12      	ldr	r2, [pc, #72]	; (81026c8 <CILmemoryProtection_setProgramMemoryProtection+0xb0>)
 810267e:	fb02 f303 	mul.w	r3, r2, r3
 8102682:	0edb      	lsrs	r3, r3, #27
 8102684:	4a11      	ldr	r2, [pc, #68]	; (81026cc <CILmemoryProtection_setProgramMemoryProtection+0xb4>)
 8102686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810268a:	61bb      	str	r3, [r7, #24]
    return (result-1);
 810268c:	69bb      	ldr	r3, [r7, #24]
 810268e:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8102690:	b2db      	uxtb	r3, r3
 8102692:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102694:	2300      	movs	r3, #0
 8102696:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102698:	2301      	movs	r3, #1
 810269a:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 810269c:	2303      	movs	r3, #3
 810269e:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 81026a0:	2300      	movs	r3, #0
 81026a2:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 81026a4:	2301      	movs	r3, #1
 81026a6:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 81026a8:	2301      	movs	r3, #1
 81026aa:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 81026ac:	2301      	movs	r3, #1
 81026ae:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 81026b0:	f107 0308 	add.w	r3, r7, #8
 81026b4:	4618      	mov	r0, r3
 81026b6:	f001 fe39 	bl	810432c <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 81026ba:	2006      	movs	r0, #6
 81026bc:	f001 fe16 	bl	81042ec <HAL_MPU_Enable>
}
 81026c0:	bf00      	nop
 81026c2:	3720      	adds	r7, #32
 81026c4:	46bd      	mov	sp, r7
 81026c6:	bd80      	pop	{r7, pc}
 81026c8:	07c4acdd 	.word	0x07c4acdd
 81026cc:	081055a0 	.word	0x081055a0

081026d0 <CILspinlock_getSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_getSpinlock(AddressType * spinlockPointer)
{
 81026d0:	b480      	push	{r7}
 81026d2:	b085      	sub	sp, #20
 81026d4:	af00      	add	r7, sp, #0
 81026d6:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	__asm volatile("MOV R1, #0x1");
 81026d8:	f04f 0101 	mov.w	r1, #1

081026dc <tryLock>:
    __asm volatile("tryLock:");
	__asm volatile("LDREXH R3, [R0]");
 81026dc:	e8d0 3f5f 	ldrexh	r3, [r0]
	__asm volatile("CMP R3, #0");
 81026e0:	2b00      	cmp	r3, #0
	__asm volatile("ITT EQ");
 81026e2:	bf04      	itt	eq
	__asm volatile("STREXHEQ R3, R1, [R0]");
 81026e4:	e8c0 1f53 	strexheq	r3, r1, [r0]
	__asm volatile("CMPEQ R3, #0");
 81026e8:	2b00      	cmpeq	r3, #0
	__asm volatile("ITE EQ");
 81026ea:	bf0c      	ite	eq
	__asm volatile("MOVEQ R1, #0x2");
 81026ec:	2102      	moveq	r1, #2
	__asm volatile("BNE tryLock");
 81026ee:	e7f5      	bne.n	81026dc <tryLock>
    __asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
 81026f0:	460b      	mov	r3, r1
 81026f2:	60fb      	str	r3, [r7, #12]

    return spinlockState;
 81026f4:	68fb      	ldr	r3, [r7, #12]
}
 81026f6:	4618      	mov	r0, r3
 81026f8:	3714      	adds	r7, #20
 81026fa:	46bd      	mov	sp, r7
 81026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102700:	4770      	bx	lr

08102702 <CILspinlock_trySpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_trySpinlock(AddressType * spinlockPointer)
{
 8102702:	b480      	push	{r7}
 8102704:	b085      	sub	sp, #20
 8102706:	af00      	add	r7, sp, #0
 8102708:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	__asm volatile("MOV R1, #0x1");
 810270a:	f04f 0101 	mov.w	r1, #1
	__asm volatile("LDREXH R3, [R0]");
 810270e:	e8d0 3f5f 	ldrexh	r3, [r0]
	__asm volatile("CMP R3, #0");
 8102712:	2b00      	cmp	r3, #0
	__asm volatile("ITT EQ");
 8102714:	bf04      	itt	eq
	__asm volatile("STREXHEQ R3, R1, [R0]");
 8102716:	e8c0 1f53 	strexheq	r3, r1, [r0]
	__asm volatile("CMPEQ R3, #0");
 810271a:	2b00      	cmpeq	r3, #0
	__asm volatile("ITE NE");
 810271c:	bf14      	ite	ne
	__asm volatile("MOVNE R1, #0x1");
 810271e:	2101      	movne	r1, #1
	__asm volatile("MOVEQ R1, #0x2");
 8102720:	2102      	moveq	r1, #2
	__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
 8102722:	460b      	mov	r3, r1
 8102724:	60fb      	str	r3, [r7, #12]

    return spinlockState;
 8102726:	68fb      	ldr	r3, [r7, #12]
}
 8102728:	4618      	mov	r0, r3
 810272a:	3714      	adds	r7, #20
 810272c:	46bd      	mov	sp, r7
 810272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102732:	4770      	bx	lr

08102734 <CILspinlock_releaseSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_releaseSpinlock(AddressType * spinlockPointer)
{
 8102734:	b480      	push	{r7}
 8102736:	b085      	sub	sp, #20
 8102738:	af00      	add	r7, sp, #0
 810273a:	6078      	str	r0, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	__asm volatile("MOV R1, #0x0");
 810273c:	f04f 0100 	mov.w	r1, #0

08102740 <tryUnlock>:
    __asm volatile("tryUnlock:");
	__asm volatile("LDREXH R3, [R0]");
 8102740:	e8d0 3f5f 	ldrexh	r3, [r0]
	__asm volatile("CMP R3, #1");
 8102744:	2b01      	cmp	r3, #1
	__asm volatile("ITT EQ");
 8102746:	bf04      	itt	eq
	__asm volatile("STREXHEQ R3, R1, [R0]");
 8102748:	e8c0 1f53 	strexheq	r3, r1, [r0]
	__asm volatile("CMPEQ R3, #0");
 810274c:	2b00      	cmpeq	r3, #0
	__asm volatile("IT NE");
 810274e:	bf18      	it	ne
	__asm volatile("BNE tryUnlock");
 8102750:	e7f6      	bne.n	8102740 <tryUnlock>
    __asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
 8102752:	460b      	mov	r3, r1
 8102754:	60fb      	str	r3, [r7, #12]

    return spinlockState;
 8102756:	68fb      	ldr	r3, [r7, #12]
}
 8102758:	4618      	mov	r0, r3
 810275a:	3714      	adds	r7, #20
 810275c:	46bd      	mov	sp, r7
 810275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102762:	4770      	bx	lr

08102764 <CILstack_stackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType CILstack_stackInit(AddressType stackLowAddress, AddressType stackHighAddress, AddressType handlerAddress)
{
 8102764:	b480      	push	{r7}
 8102766:	b087      	sub	sp, #28
 8102768:	af00      	add	r7, sp, #0
 810276a:	60f8      	str	r0, [r7, #12]
 810276c:	60b9      	str	r1, [r7, #8]
 810276e:	607a      	str	r2, [r7, #4]
    CosmOS_StackType *stack = ( CosmOS_StackType* )( stackHighAddress - (AddressType)sizeof(CosmOS_StackType) );
 8102770:	68bb      	ldr	r3, [r7, #8]
 8102772:	3b40      	subs	r3, #64	; 0x40
 8102774:	617b      	str	r3, [r7, #20]

    stack->XPSR  = 0x01000000;
 8102776:	697b      	ldr	r3, [r7, #20]
 8102778:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 810277c:	63da      	str	r2, [r3, #60]	; 0x3c
    stack->PC    = handlerAddress;
 810277e:	697b      	ldr	r3, [r7, #20]
 8102780:	687a      	ldr	r2, [r7, #4]
 8102782:	639a      	str	r2, [r3, #56]	; 0x38
    stack->LR    = 0xFFFFFFFD;
 8102784:	697b      	ldr	r3, [r7, #20]
 8102786:	f06f 0202 	mvn.w	r2, #2
 810278a:	635a      	str	r2, [r3, #52]	; 0x34
    stack->R12   = 0;
 810278c:	697b      	ldr	r3, [r7, #20]
 810278e:	2200      	movs	r2, #0
 8102790:	631a      	str	r2, [r3, #48]	; 0x30
    stack->R3    = 0;
 8102792:	697b      	ldr	r3, [r7, #20]
 8102794:	2200      	movs	r2, #0
 8102796:	62da      	str	r2, [r3, #44]	; 0x2c
    stack->R2    = 0;
 8102798:	697b      	ldr	r3, [r7, #20]
 810279a:	2200      	movs	r2, #0
 810279c:	629a      	str	r2, [r3, #40]	; 0x28
    stack->R1    = 0;
 810279e:	697b      	ldr	r3, [r7, #20]
 81027a0:	2200      	movs	r2, #0
 81027a2:	625a      	str	r2, [r3, #36]	; 0x24
    stack->R0    = 0;
 81027a4:	697b      	ldr	r3, [r7, #20]
 81027a6:	2200      	movs	r2, #0
 81027a8:	621a      	str	r2, [r3, #32]
    stack->R14   = 0xFFFFFFFD;
 81027aa:	697b      	ldr	r3, [r7, #20]
 81027ac:	f06f 0202 	mvn.w	r2, #2
 81027b0:	61da      	str	r2, [r3, #28]
    stack->R11   = 0;
 81027b2:	697b      	ldr	r3, [r7, #20]
 81027b4:	2200      	movs	r2, #0
 81027b6:	619a      	str	r2, [r3, #24]
    stack->R10   = 0;
 81027b8:	697b      	ldr	r3, [r7, #20]
 81027ba:	2200      	movs	r2, #0
 81027bc:	615a      	str	r2, [r3, #20]
    stack->R8    = 0;
 81027be:	697b      	ldr	r3, [r7, #20]
 81027c0:	2200      	movs	r2, #0
 81027c2:	611a      	str	r2, [r3, #16]
    stack->R7    = 0;
 81027c4:	697b      	ldr	r3, [r7, #20]
 81027c6:	2200      	movs	r2, #0
 81027c8:	60da      	str	r2, [r3, #12]
    stack->R6    = 0;
 81027ca:	697b      	ldr	r3, [r7, #20]
 81027cc:	2200      	movs	r2, #0
 81027ce:	609a      	str	r2, [r3, #8]
    stack->R5    = 0;
 81027d0:	697b      	ldr	r3, [r7, #20]
 81027d2:	2200      	movs	r2, #0
 81027d4:	605a      	str	r2, [r3, #4]
    stack->R4    = 0;
 81027d6:	697b      	ldr	r3, [r7, #20]
 81027d8:	2200      	movs	r2, #0
 81027da:	601a      	str	r2, [r3, #0]

    return (StackPointerType)(&(stack->R4));
 81027dc:	697b      	ldr	r3, [r7, #20]
}
 81027de:	4618      	mov	r0, r3
 81027e0:	371c      	adds	r7, #28
 81027e2:	46bd      	mov	sp, r7
 81027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027e8:	4770      	bx	lr

081027ea <CILstack_setStackPointer>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION __NAKED void CILstack_setStackPointer(AddressType address)
{
    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 81027ea:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
	__asm volatile ("MSR PSP,R0");
 81027ee:	f380 8809 	msr	PSP, r0
    __asm volatile ("MOV R0, #0x3");
 81027f2:	f04f 0003 	mov.w	r0, #3
    __asm volatile ("MSR CONTROL, R0");
 81027f6:	f380 8814 	msr	CONTROL, r0
    __asm volatile ("ISB");
 81027fa:	f3bf 8f6f 	isb	sy
    __asm volatile ("BX R14");
 81027fe:	4770      	bx	lr
}
 8102800:	bf00      	nop

08102802 <CILsysCalls_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_dispatcher(BitWidthType *sp)
{
 8102802:	b580      	push	{r7, lr}
 8102804:	b08e      	sub	sp, #56	; 0x38
 8102806:	af00      	add	r7, sp, #0
 8102808:	6078      	str	r0, [r7, #4]
    CosmOS_GenericVoidType sysCall;
    CosmOS_OsVariableType * osVar;
    CosmOS_RoutesConfigurationType * routeVar;


    uint8_t *pc = (uint8_t*)(sp[6]);
 810280a:	687b      	ldr	r3, [r7, #4]
 810280c:	3318      	adds	r3, #24
 810280e:	681b      	ldr	r3, [r3, #0]
 8102810:	633b      	str	r3, [r7, #48]	; 0x30

    pc-=2;
 8102812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102814:	3b02      	subs	r3, #2
 8102816:	633b      	str	r3, [r7, #48]	; 0x30

    osVar = os_getOsVar();
 8102818:	f7fe ff1c 	bl	8101654 <os_getOsVar>
 810281c:	62f8      	str	r0, [r7, #44]	; 0x2c

    uint8_t sysCallId = *pc;
 810281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102820:	781b      	ldrb	r3, [r3, #0]
 8102822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8102826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102828:	60bb      	str	r3, [r7, #8]
    return (CosmOS_RoutesConfigurationType *)(osVar->cfg->route);
 810282a:	68bb      	ldr	r3, [r7, #8]
 810282c:	681b      	ldr	r3, [r3, #0]
 810282e:	691b      	ldr	r3, [r3, #16]

    routeVar = os_getOsRoutes( osVar );
 8102830:	627b      	str	r3, [r7, #36]	; 0x24

    sysCall = route_getRoutesFunc( routeVar, sp[0] );
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102838:	613a      	str	r2, [r7, #16]
 810283a:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_GenericVoidType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_GenericVoidType route_getRoutesFunc(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (CosmOS_GenericVoidType)(route->routeFunc[route->routeIdToFunc[callId]]);
 810283c:	693b      	ldr	r3, [r7, #16]
 810283e:	681a      	ldr	r2, [r3, #0]
 8102840:	693b      	ldr	r3, [r7, #16]
 8102842:	6859      	ldr	r1, [r3, #4]
 8102844:	68fb      	ldr	r3, [r7, #12]
 8102846:	009b      	lsls	r3, r3, #2
 8102848:	440b      	add	r3, r1
 810284a:	681b      	ldr	r3, [r3, #0]
 810284c:	009b      	lsls	r3, r3, #2
 810284e:	4413      	add	r3, r2
 8102850:	681b      	ldr	r3, [r3, #0]
 8102852:	623b      	str	r3, [r7, #32]
    entityId = route_getRoutesEntityId( routeVar, sp[0] );
 8102854:	687b      	ldr	r3, [r7, #4]
 8102856:	681b      	ldr	r3, [r3, #0]
 8102858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810285a:	61ba      	str	r2, [r7, #24]
 810285c:	617b      	str	r3, [r7, #20]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType route_getRoutesEntityId(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (route->routeIdToEntity[callId]);
 810285e:	69bb      	ldr	r3, [r7, #24]
 8102860:	689a      	ldr	r2, [r3, #8]
 8102862:	697b      	ldr	r3, [r7, #20]
 8102864:	009b      	lsls	r3, r3, #2
 8102866:	4413      	add	r3, r2
 8102868:	681b      	ldr	r3, [r3, #0]
 810286a:	61fb      	str	r3, [r7, #28]

    switch ( sysCallId )
 810286c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8102870:	2b02      	cmp	r3, #2
 8102872:	d015      	beq.n	81028a0 <CILsysCalls_dispatcher+0x9e>
 8102874:	2b02      	cmp	r3, #2
 8102876:	dc15      	bgt.n	81028a4 <CILsysCalls_dispatcher+0xa2>
 8102878:	2b00      	cmp	r3, #0
 810287a:	d002      	beq.n	8102882 <CILsysCalls_dispatcher+0x80>
 810287c:	2b01      	cmp	r3, #1
 810287e:	d003      	beq.n	8102888 <CILsysCalls_dispatcher+0x86>
        }

        default :
        {
            /* PANIC */
            break;
 8102880:	e010      	b.n	81028a4 <CILsysCalls_dispatcher+0xa2>
            sysCall();
 8102882:	6a3b      	ldr	r3, [r7, #32]
 8102884:	4798      	blx	r3
            break;
 8102886:	e00e      	b.n	81028a6 <CILsysCalls_dispatcher+0xa4>
            returnValue = ((CosmOS_GenericBitWidthRWType)sysCall)(entityId, (void *)sp[1], sp[2]);
 8102888:	687b      	ldr	r3, [r7, #4]
 810288a:	3304      	adds	r3, #4
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	4619      	mov	r1, r3
 8102890:	687b      	ldr	r3, [r7, #4]
 8102892:	3308      	adds	r3, #8
 8102894:	681a      	ldr	r2, [r3, #0]
 8102896:	6a3b      	ldr	r3, [r7, #32]
 8102898:	69f8      	ldr	r0, [r7, #28]
 810289a:	4798      	blx	r3
 810289c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 810289e:	e002      	b.n	81028a6 <CILsysCalls_dispatcher+0xa4>
            break;
 81028a0:	bf00      	nop
 81028a2:	e000      	b.n	81028a6 <CILsysCalls_dispatcher+0xa4>
            break;
 81028a4:	bf00      	nop
        }
    }

    sp[0] = returnValue;
 81028a6:	687b      	ldr	r3, [r7, #4]
 81028a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81028aa:	601a      	str	r2, [r3, #0]
}
 81028ac:	bf00      	nop
 81028ae:	3738      	adds	r7, #56	; 0x38
 81028b0:	46bd      	mov	sp, r7
 81028b2:	bd80      	pop	{r7, pc}

081028b4 <CILsysCalls_os>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_os(BitWidthType id)
{
 81028b4:	b480      	push	{r7}
 81028b6:	b083      	sub	sp, #12
 81028b8:	af00      	add	r7, sp, #0
 81028ba:	6078      	str	r0, [r7, #4]
    __asm volatile("SVC #0");
 81028bc:	df00      	svc	0
}
 81028be:	bf00      	nop
 81028c0:	370c      	adds	r7, #12
 81028c2:	46bd      	mov	sp, r7
 81028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028c8:	4770      	bx	lr

081028ca <CILsysCalls_readWrite>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_readWrite(BitWidthType id, void * entity, BitWidthType num)
{
 81028ca:	b480      	push	{r7}
 81028cc:	b087      	sub	sp, #28
 81028ce:	af00      	add	r7, sp, #0
 81028d0:	60f8      	str	r0, [r7, #12]
 81028d2:	60b9      	str	r1, [r7, #8]
 81028d4:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #1");
 81028d6:	df01      	svc	1
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 81028d8:	4603      	mov	r3, r0
 81028da:	617b      	str	r3, [r7, #20]

    return returnValue;
 81028dc:	697b      	ldr	r3, [r7, #20]
}
 81028de:	4618      	mov	r0, r3
 81028e0:	371c      	adds	r7, #28
 81028e2:	46bd      	mov	sp, r7
 81028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028e8:	4770      	bx	lr
	...

081028ec <CILsysTimer_setTicks>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_setTicks(BitWidthType ticks, CosmOS_SchedulerSyncStateType schedulersSyncState)
{
 81028ec:	b480      	push	{r7}
 81028ee:	b085      	sub	sp, #20
 81028f0:	af00      	add	r7, sp, #0
 81028f2:	6078      	str	r0, [r7, #4]
 81028f4:	6039      	str	r1, [r7, #0]
    if( schedulersSyncState IS_NOT_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 81028f6:	683b      	ldr	r3, [r7, #0]
 81028f8:	f1b3 3faa 	cmp.w	r3, #2863311530	; 0xaaaaaaaa
 81028fc:	d010      	beq.n	8102920 <CILsysTimer_setTicks+0x34>
    {
        BitWidthType delay;
        delay = SysTick->LOAD - SysTick->VAL;
 81028fe:	4b12      	ldr	r3, [pc, #72]	; (8102948 <CILsysTimer_setTicks+0x5c>)
 8102900:	685a      	ldr	r2, [r3, #4]
 8102902:	4b11      	ldr	r3, [pc, #68]	; (8102948 <CILsysTimer_setTicks+0x5c>)
 8102904:	689b      	ldr	r3, [r3, #8]
 8102906:	1ad3      	subs	r3, r2, r3
 8102908:	60fb      	str	r3, [r7, #12]

        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)-delay) - 1UL);         /* set reload register */
 810290a:	687b      	ldr	r3, [r7, #4]
 810290c:	f242 7210 	movw	r2, #10000	; 0x2710
 8102910:	fb02 f203 	mul.w	r2, r2, r3
 8102914:	68fb      	ldr	r3, [r7, #12]
 8102916:	1ad3      	subs	r3, r2, r3
 8102918:	4a0b      	ldr	r2, [pc, #44]	; (8102948 <CILsysTimer_setTicks+0x5c>)
 810291a:	3b01      	subs	r3, #1
 810291c:	6053      	str	r3, [r2, #4]
 810291e:	e007      	b.n	8102930 <CILsysTimer_setTicks+0x44>
    }
    else
    {
        SysTick->LOAD  = (uint32_t)(((ticks*TICKCOUNT)) - 1UL);               /* set reload register */
 8102920:	687b      	ldr	r3, [r7, #4]
 8102922:	f242 7210 	movw	r2, #10000	; 0x2710
 8102926:	fb02 f303 	mul.w	r3, r2, r3
 810292a:	4a07      	ldr	r2, [pc, #28]	; (8102948 <CILsysTimer_setTicks+0x5c>)
 810292c:	3b01      	subs	r3, #1
 810292e:	6053      	str	r3, [r2, #4]
    }

    SysTick->VAL   = 0UL;                                                     /* Load the SysTick Counter Value */
 8102930:	4b05      	ldr	r3, [pc, #20]	; (8102948 <CILsysTimer_setTicks+0x5c>)
 8102932:	2200      	movs	r2, #0
 8102934:	609a      	str	r2, [r3, #8]
    SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8102936:	4b04      	ldr	r3, [pc, #16]	; (8102948 <CILsysTimer_setTicks+0x5c>)
 8102938:	2207      	movs	r2, #7
 810293a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                                   /* Enable SysTick IRQ and SysTick Timer */
}
 810293c:	bf00      	nop
 810293e:	3714      	adds	r7, #20
 8102940:	46bd      	mov	sp, r7
 8102942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102946:	4770      	bx	lr
 8102948:	e000e010 	.word	0xe000e010

0810294c <CILuart_sysJob>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILuart_sysJob()
{
 810294c:	b480      	push	{r7}
 810294e:	af00      	add	r7, sp, #0

    //TX SIDE
    //check where is DMA and switch it if its buffer is empty
    //check if user is in red zone, if yes check if DMA is on the same buffer, then switch to the other
    //HAL_UART_Receive_DMA()
}
 8102950:	bf00      	nop
 8102952:	46bd      	mov	sp, r7
 8102954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102958:	4770      	bx	lr
	...

Disassembly of section .application_section_funcs:

0810295c <Idle_CM7>:
  * @{
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION __WEAK void Idle_CM7(void){};
 810295c:	b480      	push	{r7}
 810295e:	af00      	add	r7, sp, #0
 8102960:	bf00      	nop
 8102962:	46bd      	mov	sp, r7
 8102964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102968:	4770      	bx	lr

0810296a <wrapped_Idle_CM7>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void wrapped_Idle_CM7(void)
{
 810296a:	b580      	push	{r7, lr}
 810296c:	af00      	add	r7, sp, #0
    Idle_CM7();
 810296e:	f7ff fff5 	bl	810295c <Idle_CM7>
    for(;;);
 8102972:	e7fe      	b.n	8102972 <wrapped_Idle_CM7+0x8>

08102974 <sysJobs_CM7>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION __WEAK void sysJobs_CM7(void){};
 8102974:	b480      	push	{r7}
 8102976:	af00      	add	r7, sp, #0
 8102978:	bf00      	nop
 810297a:	46bd      	mov	sp, r7
 810297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102980:	4770      	bx	lr

08102982 <wrapped_sysJobs_CM7>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void wrapped_sysJobs_CM7(void)
{
 8102982:	b580      	push	{r7, lr}
 8102984:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 8102986:	2010      	movs	r0, #16
 8102988:	f7ff fc04 	bl	8102194 <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 810298c:	200f      	movs	r0, #15
 810298e:	f7ff fc01 	bl	8102194 <sysCalls_os>
    for(;;);
 8102992:	e7fe      	b.n	8102992 <wrapped_sysJobs_CM7+0x10>
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION __WEAK void Task_0_Core_0_Handler(void){};
 8102994:	b480      	push	{r7}
 8102996:	af00      	add	r7, sp, #0
 8102998:	bf00      	nop
 810299a:	46bd      	mov	sp, r7
 810299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029a0:	4770      	bx	lr

081029a2 <wrapped_Task_0_Core_0_Handler>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void wrapped_Task_0_Core_0_Handler(void)
{
 81029a2:	b580      	push	{r7, lr}
 81029a4:	af00      	add	r7, sp, #0
    Task_0_Core_0_Handler();
 81029a6:	f000 f901 	bl	8102bac <Task_0_Core_0_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 81029aa:	200f      	movs	r0, #15
 81029ac:	f7ff fbf2 	bl	8102194 <sysCalls_os>
    for(;;);
 81029b0:	e7fe      	b.n	81029b0 <wrapped_Task_0_Core_0_Handler+0xe>

081029b2 <Idle_CM4>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION __WEAK void Idle_CM4(void){};
 81029b2:	b480      	push	{r7}
 81029b4:	af00      	add	r7, sp, #0
 81029b6:	bf00      	nop
 81029b8:	46bd      	mov	sp, r7
 81029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029be:	4770      	bx	lr

081029c0 <wrapped_Idle_CM4>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void wrapped_Idle_CM4(void)
{
 81029c0:	b580      	push	{r7, lr}
 81029c2:	af00      	add	r7, sp, #0
    Idle_CM4();
 81029c4:	f7ff fff5 	bl	81029b2 <Idle_CM4>
    for(;;);
 81029c8:	e7fe      	b.n	81029c8 <wrapped_Idle_CM4+0x8>

081029ca <sysJobs_CM4>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION __WEAK void sysJobs_CM4(void){};
 81029ca:	b480      	push	{r7}
 81029cc:	af00      	add	r7, sp, #0
 81029ce:	bf00      	nop
 81029d0:	46bd      	mov	sp, r7
 81029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029d6:	4770      	bx	lr

081029d8 <wrapped_sysJobs_CM4>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void wrapped_sysJobs_CM4(void)
{
 81029d8:	b580      	push	{r7, lr}
 81029da:	af00      	add	r7, sp, #0
    sysCalls_os(SYSCALL_SYSJOBS_DISPATCHER);
 81029dc:	2010      	movs	r0, #16
 81029de:	f7ff fbd9 	bl	8102194 <sysCalls_os>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 81029e2:	200f      	movs	r0, #15
 81029e4:	f7ff fbd6 	bl	8102194 <sysCalls_os>
    for(;;);
 81029e8:	e7fe      	b.n	81029e8 <wrapped_sysJobs_CM4+0x10>
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION __WEAK void Task_0_Core_1_Handler(void){};
 81029ea:	b480      	push	{r7}
 81029ec:	af00      	add	r7, sp, #0
 81029ee:	bf00      	nop
 81029f0:	46bd      	mov	sp, r7
 81029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029f6:	4770      	bx	lr

081029f8 <wrapped_Task_0_Core_1_Handler>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void wrapped_Task_0_Core_1_Handler(void)
{
 81029f8:	b580      	push	{r7, lr}
 81029fa:	af00      	add	r7, sp, #0
    Task_0_Core_1_Handler();
 81029fc:	f000 f894 	bl	8102b28 <Task_0_Core_1_Handler>
    sysCalls_os(SYSCALL_SCHEDULABLE_SETEXECUTIONSTATETOFINISHED);
 8102a00:	200f      	movs	r0, #15
 8102a02:	f7ff fbc7 	bl	8102194 <sysCalls_os>
    for(;;);
 8102a06:	e7fe      	b.n	8102a06 <wrapped_Task_0_Core_1_Handler+0xe>

08102a08 <IdleThread_CM7>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION __WEAK void IdleThread_CM7(void){};
 8102a08:	b480      	push	{r7}
 8102a0a:	af00      	add	r7, sp, #0
 8102a0c:	bf00      	nop
 8102a0e:	46bd      	mov	sp, r7
 8102a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a14:	4770      	bx	lr

08102a16 <wrapped_IdleThread_CM7>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void wrapped_IdleThread_CM7(void)
{
 8102a16:	b580      	push	{r7, lr}
 8102a18:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM7();
 8102a1a:	f7ff fff5 	bl	8102a08 <IdleThread_CM7>
 8102a1e:	e7fc      	b.n	8102a1a <wrapped_IdleThread_CM7+0x4>

08102a20 <IdleThread_CM4>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION __WEAK void IdleThread_CM4(void){};
 8102a20:	b480      	push	{r7}
 8102a22:	af00      	add	r7, sp, #0
 8102a24:	bf00      	nop
 8102a26:	46bd      	mov	sp, r7
 8102a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a2c:	4770      	bx	lr

08102a2e <wrapped_IdleThread_CM4>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void wrapped_IdleThread_CM4(void)
{
 8102a2e:	b580      	push	{r7, lr}
 8102a30:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM4();
 8102a32:	f7ff fff5 	bl	8102a20 <IdleThread_CM4>
 8102a36:	e7fc      	b.n	8102a32 <wrapped_IdleThread_CM4+0x4>
__APPLICATION_FUNC_SECTION __WEAK void Idle_CM7(void){};
 8102a38:	b480      	push	{r7}
 8102a3a:	af00      	add	r7, sp, #0
 8102a3c:	bf00      	nop
 8102a3e:	46bd      	mov	sp, r7
 8102a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a44:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void sysJobs_CM7(void){};
 8102a46:	b480      	push	{r7}
 8102a48:	af00      	add	r7, sp, #0
 8102a4a:	bf00      	nop
 8102a4c:	46bd      	mov	sp, r7
 8102a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a52:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void Task_0_Core_0_Handler(void){};
 8102a54:	b480      	push	{r7}
 8102a56:	af00      	add	r7, sp, #0
 8102a58:	bf00      	nop
 8102a5a:	46bd      	mov	sp, r7
 8102a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a60:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void Idle_CM4(void){};
 8102a62:	b480      	push	{r7}
 8102a64:	af00      	add	r7, sp, #0
 8102a66:	bf00      	nop
 8102a68:	46bd      	mov	sp, r7
 8102a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a6e:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void sysJobs_CM4(void){};
 8102a70:	b480      	push	{r7}
 8102a72:	af00      	add	r7, sp, #0
 8102a74:	bf00      	nop
 8102a76:	46bd      	mov	sp, r7
 8102a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a7c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void Task_0_Core_1_Handler(void){};
 8102a7e:	b480      	push	{r7}
 8102a80:	af00      	add	r7, sp, #0
 8102a82:	bf00      	nop
 8102a84:	46bd      	mov	sp, r7
 8102a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a8a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void IdleThread_CM7(void){};
 8102a8c:	b480      	push	{r7}
 8102a8e:	af00      	add	r7, sp, #0
 8102a90:	bf00      	nop
 8102a92:	46bd      	mov	sp, r7
 8102a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a98:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void IdleThread_CM4(void){};
 8102a9a:	b480      	push	{r7}
 8102a9c:	af00      	add	r7, sp, #0
 8102a9e:	bf00      	nop
 8102aa0:	46bd      	mov	sp, r7
 8102aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aa6:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void Idle_CM7(void){};
 8102aa8:	b480      	push	{r7}
 8102aaa:	af00      	add	r7, sp, #0
 8102aac:	bf00      	nop
 8102aae:	46bd      	mov	sp, r7
 8102ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ab4:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void sysJobs_CM7(void){};
 8102ab6:	b480      	push	{r7}
 8102ab8:	af00      	add	r7, sp, #0
 8102aba:	bf00      	nop
 8102abc:	46bd      	mov	sp, r7
 8102abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ac2:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void Task_0_Core_0_Handler(void){};
 8102ac4:	b480      	push	{r7}
 8102ac6:	af00      	add	r7, sp, #0
 8102ac8:	bf00      	nop
 8102aca:	46bd      	mov	sp, r7
 8102acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ad0:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void Idle_CM4(void){};
 8102ad2:	b480      	push	{r7}
 8102ad4:	af00      	add	r7, sp, #0
 8102ad6:	bf00      	nop
 8102ad8:	46bd      	mov	sp, r7
 8102ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ade:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void sysJobs_CM4(void){};
 8102ae0:	b480      	push	{r7}
 8102ae2:	af00      	add	r7, sp, #0
 8102ae4:	bf00      	nop
 8102ae6:	46bd      	mov	sp, r7
 8102ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102aec:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void Task_0_Core_1_Handler(void){};
 8102aee:	b480      	push	{r7}
 8102af0:	af00      	add	r7, sp, #0
 8102af2:	bf00      	nop
 8102af4:	46bd      	mov	sp, r7
 8102af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102afa:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void IdleThread_CM7(void){};
 8102afc:	b480      	push	{r7}
 8102afe:	af00      	add	r7, sp, #0
 8102b00:	bf00      	nop
 8102b02:	46bd      	mov	sp, r7
 8102b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b08:	4770      	bx	lr
__APPLICATION_FUNC_SECTION __WEAK void IdleThread_CM4(void){};
 8102b0a:	b480      	push	{r7}
 8102b0c:	af00      	add	r7, sp, #0
 8102b0e:	bf00      	nop
 8102b10:	46bd      	mov	sp, r7
 8102b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b16:	4770      	bx	lr

08102b18 <userKernelPanicHook>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void userKernelPanicHook(void)
{
 8102b18:	b480      	push	{r7}
 8102b1a:	af00      	add	r7, sp, #0

/********************************************************************************
** stop_name =userKernelPanicHook
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8102b1c:	bf00      	nop
 8102b1e:	46bd      	mov	sp, r7
 8102b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b24:	4770      	bx	lr
	...

08102b28 <Task_0_Core_1_Handler>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void Task_0_Core_1_Handler(void)
{
 8102b28:	b580      	push	{r7, lr}
 8102b2a:	b082      	sub	sp, #8
 8102b2c:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_1_Handler
********************************************************************************/
if (counter_cm4 > 100)
 8102b2e:	4b1c      	ldr	r3, [pc, #112]	; (8102ba0 <Task_0_Core_1_Handler+0x78>)
 8102b30:	681b      	ldr	r3, [r3, #0]
 8102b32:	2b64      	cmp	r3, #100	; 0x64
 8102b34:	dd2a      	ble.n	8102b8c <Task_0_Core_1_Handler+0x64>
{
    CosmOS_SpinlockStateType spinlockState;
    CosmOS_BufferStateType bufferState;


	bufferReader_cm4 = 100;
 8102b36:	4b1b      	ldr	r3, [pc, #108]	; (8102ba4 <Task_0_Core_1_Handler+0x7c>)
 8102b38:	2264      	movs	r2, #100	; 0x64
 8102b3a:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_write_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 8102b3c:	2204      	movs	r2, #4
 8102b3e:	4919      	ldr	r1, [pc, #100]	; (8102ba4 <Task_0_Core_1_Handler+0x7c>)
 8102b40:	200b      	movs	r0, #11
 8102b42:	f7ff fb32 	bl	81021aa <sysCalls_readWrite>
 8102b46:	4603      	mov	r3, r0
 8102b48:	71fb      	strb	r3, [r7, #7]

	bufferReader_cm4 = 0;
 8102b4a:	4b16      	ldr	r3, [pc, #88]	; (8102ba4 <Task_0_Core_1_Handler+0x7c>)
 8102b4c:	2200      	movs	r2, #0
 8102b4e:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_read_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 8102b50:	2204      	movs	r2, #4
 8102b52:	4914      	ldr	r1, [pc, #80]	; (8102ba4 <Task_0_Core_1_Handler+0x7c>)
 8102b54:	200a      	movs	r0, #10
 8102b56:	f7ff fb28 	bl	81021aa <sysCalls_readWrite>
 8102b5a:	4603      	mov	r3, r0
 8102b5c:	71fb      	strb	r3, [r7, #7]
	//spinlockState = cosmosApi_get_spinlock_uart_buffer_read();
//
	//spinlockState = cosmosApi_release_spinlock_uart_buffer_read();


    counter_cm4 = 0;
 8102b5e:	4b10      	ldr	r3, [pc, #64]	; (8102ba0 <Task_0_Core_1_Handler+0x78>)
 8102b60:	2200      	movs	r2, #0
 8102b62:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOB, GPIO_PIN_0); //GREEN LED
 8102b64:	2201      	movs	r2, #1
 8102b66:	4910      	ldr	r1, [pc, #64]	; (8102ba8 <Task_0_Core_1_Handler+0x80>)
 8102b68:	200c      	movs	r0, #12
 8102b6a:	f7ff fb1e 	bl	81021aa <sysCalls_readWrite>

	int *integerPointer = new int(100);
 8102b6e:	2004      	movs	r0, #4
 8102b70:	f002 fb6c 	bl	810524c <_Znwj>
 8102b74:	4603      	mov	r3, r0
 8102b76:	2264      	movs	r2, #100	; 0x64
 8102b78:	601a      	str	r2, [r3, #0]
 8102b7a:	603b      	str	r3, [r7, #0]

	delete integerPointer;
 8102b7c:	683b      	ldr	r3, [r7, #0]
 8102b7e:	2b00      	cmp	r3, #0
 8102b80:	d009      	beq.n	8102b96 <Task_0_Core_1_Handler+0x6e>
 8102b82:	2104      	movs	r1, #4
 8102b84:	4618      	mov	r0, r3
 8102b86:	f002 fb5f 	bl	8105248 <_ZdlPvj>
}
/********************************************************************************
** stop_name =Task_0_Core_1_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8102b8a:	e004      	b.n	8102b96 <Task_0_Core_1_Handler+0x6e>
    counter_cm4++;
 8102b8c:	4b04      	ldr	r3, [pc, #16]	; (8102ba0 <Task_0_Core_1_Handler+0x78>)
 8102b8e:	681b      	ldr	r3, [r3, #0]
 8102b90:	3301      	adds	r3, #1
 8102b92:	4a03      	ldr	r2, [pc, #12]	; (8102ba0 <Task_0_Core_1_Handler+0x78>)
 8102b94:	6013      	str	r3, [r2, #0]
};
 8102b96:	bf00      	nop
 8102b98:	3708      	adds	r7, #8
 8102b9a:	46bd      	mov	sp, r7
 8102b9c:	bd80      	pop	{r7, pc}
 8102b9e:	bf00      	nop
 8102ba0:	10001000 	.word	0x10001000
 8102ba4:	10001004 	.word	0x10001004
 8102ba8:	58020400 	.word	0x58020400

08102bac <Task_0_Core_0_Handler>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START)
/* @endcond*/
__APPLICATION_FUNC_SECTION void Task_0_Core_0_Handler(void)
{
 8102bac:	b580      	push	{r7, lr}
 8102bae:	af00      	add	r7, sp, #0
/********************************************************************************
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Start      **
** start_name =Task_0_Core_0_Handler
********************************************************************************/
if (counter > 100)
 8102bb0:	4b0a      	ldr	r3, [pc, #40]	; (8102bdc <Task_0_Core_0_Handler+0x30>)
 8102bb2:	681b      	ldr	r3, [r3, #0]
 8102bb4:	2b64      	cmp	r3, #100	; 0x64
 8102bb6:	dd08      	ble.n	8102bca <Task_0_Core_0_Handler+0x1e>
{
    counter = 0;
 8102bb8:	4b08      	ldr	r3, [pc, #32]	; (8102bdc <Task_0_Core_0_Handler+0x30>)
 8102bba:	2200      	movs	r2, #0
 8102bbc:	601a      	str	r2, [r3, #0]
    cosmosApi_deviceIO_togglePin(GPIOE, GPIO_PIN_1); //ORANGE LED
 8102bbe:	2202      	movs	r2, #2
 8102bc0:	4907      	ldr	r1, [pc, #28]	; (8102be0 <Task_0_Core_0_Handler+0x34>)
 8102bc2:	200c      	movs	r0, #12
 8102bc4:	f7ff faf1 	bl	81021aa <sysCalls_readWrite>
 8102bc8:	e004      	b.n	8102bd4 <Task_0_Core_0_Handler+0x28>

	// cosmosApi_release_spinlock_uart_buffer_read();
}
else
{
    counter++;
 8102bca:	4b04      	ldr	r3, [pc, #16]	; (8102bdc <Task_0_Core_0_Handler+0x30>)
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	3301      	adds	r3, #1
 8102bd0:	4a02      	ldr	r2, [pc, #8]	; (8102bdc <Task_0_Core_0_Handler+0x30>)
 8102bd2:	6013      	str	r3, [r2, #0]
}
__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 8102bd4:	ee20 0a20 	vmul.f32	s0, s0, s1
/********************************************************************************
** stop_name =Task_0_Core_0_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8102bd8:	bf00      	nop
 8102bda:	bd80      	pop	{r7, pc}
 8102bdc:	20001000 	.word	0x20001000
 8102be0:	58021000 	.word	0x58021000

Disassembly of section .text:

08102be4 <__do_global_dtors_aux>:
 8102be4:	b510      	push	{r4, lr}
 8102be6:	4c05      	ldr	r4, [pc, #20]	; (8102bfc <__do_global_dtors_aux+0x18>)
 8102be8:	7823      	ldrb	r3, [r4, #0]
 8102bea:	b933      	cbnz	r3, 8102bfa <__do_global_dtors_aux+0x16>
 8102bec:	4b04      	ldr	r3, [pc, #16]	; (8102c00 <__do_global_dtors_aux+0x1c>)
 8102bee:	b113      	cbz	r3, 8102bf6 <__do_global_dtors_aux+0x12>
 8102bf0:	4804      	ldr	r0, [pc, #16]	; (8102c04 <__do_global_dtors_aux+0x20>)
 8102bf2:	f3af 8000 	nop.w
 8102bf6:	2301      	movs	r3, #1
 8102bf8:	7023      	strb	r3, [r4, #0]
 8102bfa:	bd10      	pop	{r4, pc}
 8102bfc:	10001874 	.word	0x10001874
 8102c00:	00000000 	.word	0x00000000
 8102c04:	08105530 	.word	0x08105530

08102c08 <frame_dummy>:
 8102c08:	b508      	push	{r3, lr}
 8102c0a:	4b03      	ldr	r3, [pc, #12]	; (8102c18 <frame_dummy+0x10>)
 8102c0c:	b11b      	cbz	r3, 8102c16 <frame_dummy+0xe>
 8102c0e:	4903      	ldr	r1, [pc, #12]	; (8102c1c <frame_dummy+0x14>)
 8102c10:	4803      	ldr	r0, [pc, #12]	; (8102c20 <frame_dummy+0x18>)
 8102c12:	f3af 8000 	nop.w
 8102c16:	bd08      	pop	{r3, pc}
 8102c18:	00000000 	.word	0x00000000
 8102c1c:	10001878 	.word	0x10001878
 8102c20:	08105530 	.word	0x08105530

08102c24 <selfrel_offset31>:
 8102c24:	6803      	ldr	r3, [r0, #0]
 8102c26:	005a      	lsls	r2, r3, #1
 8102c28:	bf4c      	ite	mi
 8102c2a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8102c2e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8102c32:	4418      	add	r0, r3
 8102c34:	4770      	bx	lr
 8102c36:	bf00      	nop

08102c38 <search_EIT_table>:
 8102c38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8102c3c:	b329      	cbz	r1, 8102c8a <search_EIT_table+0x52>
 8102c3e:	1e4f      	subs	r7, r1, #1
 8102c40:	4604      	mov	r4, r0
 8102c42:	4615      	mov	r5, r2
 8102c44:	463e      	mov	r6, r7
 8102c46:	f04f 0800 	mov.w	r8, #0
 8102c4a:	eb08 0106 	add.w	r1, r8, r6
 8102c4e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8102c52:	1049      	asrs	r1, r1, #1
 8102c54:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8102c58:	4648      	mov	r0, r9
 8102c5a:	f7ff ffe3 	bl	8102c24 <selfrel_offset31>
 8102c5e:	4603      	mov	r3, r0
 8102c60:	00c8      	lsls	r0, r1, #3
 8102c62:	3008      	adds	r0, #8
 8102c64:	428f      	cmp	r7, r1
 8102c66:	4420      	add	r0, r4
 8102c68:	d009      	beq.n	8102c7e <search_EIT_table+0x46>
 8102c6a:	42ab      	cmp	r3, r5
 8102c6c:	d809      	bhi.n	8102c82 <search_EIT_table+0x4a>
 8102c6e:	f7ff ffd9 	bl	8102c24 <selfrel_offset31>
 8102c72:	3801      	subs	r0, #1
 8102c74:	42a8      	cmp	r0, r5
 8102c76:	d20a      	bcs.n	8102c8e <search_EIT_table+0x56>
 8102c78:	f101 0801 	add.w	r8, r1, #1
 8102c7c:	e7e5      	b.n	8102c4a <search_EIT_table+0x12>
 8102c7e:	42ab      	cmp	r3, r5
 8102c80:	d905      	bls.n	8102c8e <search_EIT_table+0x56>
 8102c82:	4588      	cmp	r8, r1
 8102c84:	d001      	beq.n	8102c8a <search_EIT_table+0x52>
 8102c86:	1e4e      	subs	r6, r1, #1
 8102c88:	e7df      	b.n	8102c4a <search_EIT_table+0x12>
 8102c8a:	f04f 0900 	mov.w	r9, #0
 8102c8e:	4648      	mov	r0, r9
 8102c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08102c94 <__gnu_unwind_get_pr_addr>:
 8102c94:	2801      	cmp	r0, #1
 8102c96:	d007      	beq.n	8102ca8 <__gnu_unwind_get_pr_addr+0x14>
 8102c98:	2802      	cmp	r0, #2
 8102c9a:	d007      	beq.n	8102cac <__gnu_unwind_get_pr_addr+0x18>
 8102c9c:	4b04      	ldr	r3, [pc, #16]	; (8102cb0 <__gnu_unwind_get_pr_addr+0x1c>)
 8102c9e:	2800      	cmp	r0, #0
 8102ca0:	bf0c      	ite	eq
 8102ca2:	4618      	moveq	r0, r3
 8102ca4:	2000      	movne	r0, #0
 8102ca6:	4770      	bx	lr
 8102ca8:	4802      	ldr	r0, [pc, #8]	; (8102cb4 <__gnu_unwind_get_pr_addr+0x20>)
 8102caa:	4770      	bx	lr
 8102cac:	4802      	ldr	r0, [pc, #8]	; (8102cb8 <__gnu_unwind_get_pr_addr+0x24>)
 8102cae:	4770      	bx	lr
 8102cb0:	08103359 	.word	0x08103359
 8102cb4:	0810335d 	.word	0x0810335d
 8102cb8:	08103361 	.word	0x08103361

08102cbc <get_eit_entry>:
 8102cbc:	b530      	push	{r4, r5, lr}
 8102cbe:	4b23      	ldr	r3, [pc, #140]	; (8102d4c <get_eit_entry+0x90>)
 8102cc0:	b083      	sub	sp, #12
 8102cc2:	4604      	mov	r4, r0
 8102cc4:	1e8d      	subs	r5, r1, #2
 8102cc6:	b33b      	cbz	r3, 8102d18 <get_eit_entry+0x5c>
 8102cc8:	a901      	add	r1, sp, #4
 8102cca:	4628      	mov	r0, r5
 8102ccc:	f3af 8000 	nop.w
 8102cd0:	b1e8      	cbz	r0, 8102d0e <get_eit_entry+0x52>
 8102cd2:	9901      	ldr	r1, [sp, #4]
 8102cd4:	462a      	mov	r2, r5
 8102cd6:	f7ff ffaf 	bl	8102c38 <search_EIT_table>
 8102cda:	4601      	mov	r1, r0
 8102cdc:	b1b8      	cbz	r0, 8102d0e <get_eit_entry+0x52>
 8102cde:	f7ff ffa1 	bl	8102c24 <selfrel_offset31>
 8102ce2:	684b      	ldr	r3, [r1, #4]
 8102ce4:	64a0      	str	r0, [r4, #72]	; 0x48
 8102ce6:	2b01      	cmp	r3, #1
 8102ce8:	d02b      	beq.n	8102d42 <get_eit_entry+0x86>
 8102cea:	2b00      	cmp	r3, #0
 8102cec:	f101 0004 	add.w	r0, r1, #4
 8102cf0:	db23      	blt.n	8102d3a <get_eit_entry+0x7e>
 8102cf2:	f7ff ff97 	bl	8102c24 <selfrel_offset31>
 8102cf6:	2300      	movs	r3, #0
 8102cf8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8102cfc:	6803      	ldr	r3, [r0, #0]
 8102cfe:	2b00      	cmp	r3, #0
 8102d00:	db10      	blt.n	8102d24 <get_eit_entry+0x68>
 8102d02:	f7ff ff8f 	bl	8102c24 <selfrel_offset31>
 8102d06:	6120      	str	r0, [r4, #16]
 8102d08:	2000      	movs	r0, #0
 8102d0a:	b003      	add	sp, #12
 8102d0c:	bd30      	pop	{r4, r5, pc}
 8102d0e:	2300      	movs	r3, #0
 8102d10:	2009      	movs	r0, #9
 8102d12:	6123      	str	r3, [r4, #16]
 8102d14:	b003      	add	sp, #12
 8102d16:	bd30      	pop	{r4, r5, pc}
 8102d18:	490d      	ldr	r1, [pc, #52]	; (8102d50 <get_eit_entry+0x94>)
 8102d1a:	480e      	ldr	r0, [pc, #56]	; (8102d54 <get_eit_entry+0x98>)
 8102d1c:	1a09      	subs	r1, r1, r0
 8102d1e:	10c9      	asrs	r1, r1, #3
 8102d20:	9101      	str	r1, [sp, #4]
 8102d22:	e7d7      	b.n	8102cd4 <get_eit_entry+0x18>
 8102d24:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8102d28:	f7ff ffb4 	bl	8102c94 <__gnu_unwind_get_pr_addr>
 8102d2c:	2800      	cmp	r0, #0
 8102d2e:	6120      	str	r0, [r4, #16]
 8102d30:	bf14      	ite	ne
 8102d32:	2000      	movne	r0, #0
 8102d34:	2009      	moveq	r0, #9
 8102d36:	b003      	add	sp, #12
 8102d38:	bd30      	pop	{r4, r5, pc}
 8102d3a:	2301      	movs	r3, #1
 8102d3c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8102d40:	e7dc      	b.n	8102cfc <get_eit_entry+0x40>
 8102d42:	2300      	movs	r3, #0
 8102d44:	6123      	str	r3, [r4, #16]
 8102d46:	2005      	movs	r0, #5
 8102d48:	e7df      	b.n	8102d0a <get_eit_entry+0x4e>
 8102d4a:	bf00      	nop
 8102d4c:	00000000 	.word	0x00000000
 8102d50:	0810571c 	.word	0x0810571c
 8102d54:	08105654 	.word	0x08105654

08102d58 <restore_non_core_regs>:
 8102d58:	6803      	ldr	r3, [r0, #0]
 8102d5a:	07da      	lsls	r2, r3, #31
 8102d5c:	b510      	push	{r4, lr}
 8102d5e:	4604      	mov	r4, r0
 8102d60:	d406      	bmi.n	8102d70 <restore_non_core_regs+0x18>
 8102d62:	079b      	lsls	r3, r3, #30
 8102d64:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8102d68:	d509      	bpl.n	8102d7e <restore_non_core_regs+0x26>
 8102d6a:	f000 fc4b 	bl	8103604 <__gnu_Unwind_Restore_VFP_D>
 8102d6e:	6823      	ldr	r3, [r4, #0]
 8102d70:	0759      	lsls	r1, r3, #29
 8102d72:	d509      	bpl.n	8102d88 <restore_non_core_regs+0x30>
 8102d74:	071a      	lsls	r2, r3, #28
 8102d76:	d50e      	bpl.n	8102d96 <restore_non_core_regs+0x3e>
 8102d78:	06db      	lsls	r3, r3, #27
 8102d7a:	d513      	bpl.n	8102da4 <restore_non_core_regs+0x4c>
 8102d7c:	bd10      	pop	{r4, pc}
 8102d7e:	f000 fc39 	bl	81035f4 <__gnu_Unwind_Restore_VFP>
 8102d82:	6823      	ldr	r3, [r4, #0]
 8102d84:	0759      	lsls	r1, r3, #29
 8102d86:	d4f5      	bmi.n	8102d74 <restore_non_core_regs+0x1c>
 8102d88:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8102d8c:	f000 fc42 	bl	8103614 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8102d90:	6823      	ldr	r3, [r4, #0]
 8102d92:	071a      	lsls	r2, r3, #28
 8102d94:	d4f0      	bmi.n	8102d78 <restore_non_core_regs+0x20>
 8102d96:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8102d9a:	f000 fc43 	bl	8103624 <__gnu_Unwind_Restore_WMMXD>
 8102d9e:	6823      	ldr	r3, [r4, #0]
 8102da0:	06db      	lsls	r3, r3, #27
 8102da2:	d4eb      	bmi.n	8102d7c <restore_non_core_regs+0x24>
 8102da4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8102da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8102dac:	f000 bc7e 	b.w	81036ac <__gnu_Unwind_Restore_WMMXC>

08102db0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8102db0:	4603      	mov	r3, r0
 8102db2:	6800      	ldr	r0, [r0, #0]
 8102db4:	b100      	cbz	r0, 8102db8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 8102db6:	4418      	add	r0, r3
 8102db8:	4770      	bx	lr
 8102dba:	bf00      	nop

08102dbc <__gnu_unwind_24bit.isra.0>:
 8102dbc:	2009      	movs	r0, #9
 8102dbe:	4770      	bx	lr

08102dc0 <_Unwind_DebugHook>:
 8102dc0:	4770      	bx	lr
 8102dc2:	bf00      	nop

08102dc4 <unwind_phase2>:
 8102dc4:	b570      	push	{r4, r5, r6, lr}
 8102dc6:	4604      	mov	r4, r0
 8102dc8:	460e      	mov	r6, r1
 8102dca:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8102dcc:	4620      	mov	r0, r4
 8102dce:	f7ff ff75 	bl	8102cbc <get_eit_entry>
 8102dd2:	4605      	mov	r5, r0
 8102dd4:	b988      	cbnz	r0, 8102dfa <unwind_phase2+0x36>
 8102dd6:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8102dd8:	6163      	str	r3, [r4, #20]
 8102dda:	4632      	mov	r2, r6
 8102ddc:	6923      	ldr	r3, [r4, #16]
 8102dde:	4621      	mov	r1, r4
 8102de0:	2001      	movs	r0, #1
 8102de2:	4798      	blx	r3
 8102de4:	2808      	cmp	r0, #8
 8102de6:	d0f0      	beq.n	8102dca <unwind_phase2+0x6>
 8102de8:	2807      	cmp	r0, #7
 8102dea:	d106      	bne.n	8102dfa <unwind_phase2+0x36>
 8102dec:	4628      	mov	r0, r5
 8102dee:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8102df0:	f7ff ffe6 	bl	8102dc0 <_Unwind_DebugHook>
 8102df4:	1d30      	adds	r0, r6, #4
 8102df6:	f000 fbf1 	bl	81035dc <__restore_core_regs>
 8102dfa:	f002 fa43 	bl	8105284 <abort>
 8102dfe:	bf00      	nop

08102e00 <unwind_phase2_forced>:
 8102e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8102e04:	1d0d      	adds	r5, r1, #4
 8102e06:	4606      	mov	r6, r0
 8102e08:	4614      	mov	r4, r2
 8102e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102e0c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8102e10:	f10d 0c0c 	add.w	ip, sp, #12
 8102e14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8102e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102e1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8102e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8102e20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8102e24:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8102e28:	ad02      	add	r5, sp, #8
 8102e2a:	68f7      	ldr	r7, [r6, #12]
 8102e2c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8102e30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8102e34:	2300      	movs	r3, #0
 8102e36:	602b      	str	r3, [r5, #0]
 8102e38:	e021      	b.n	8102e7e <unwind_phase2_forced+0x7e>
 8102e3a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8102e3c:	6173      	str	r3, [r6, #20]
 8102e3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8102e42:	4629      	mov	r1, r5
 8102e44:	a87a      	add	r0, sp, #488	; 0x1e8
 8102e46:	f002 fb65 	bl	8105514 <memcpy>
 8102e4a:	6933      	ldr	r3, [r6, #16]
 8102e4c:	aa7a      	add	r2, sp, #488	; 0x1e8
 8102e4e:	4631      	mov	r1, r6
 8102e50:	4650      	mov	r0, sl
 8102e52:	4798      	blx	r3
 8102e54:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8102e56:	e9cd 5800 	strd	r5, r8, [sp]
 8102e5a:	4621      	mov	r1, r4
 8102e5c:	646b      	str	r3, [r5, #68]	; 0x44
 8102e5e:	4681      	mov	r9, r0
 8102e60:	4633      	mov	r3, r6
 8102e62:	4632      	mov	r2, r6
 8102e64:	2001      	movs	r0, #1
 8102e66:	47b8      	blx	r7
 8102e68:	4604      	mov	r4, r0
 8102e6a:	b9e8      	cbnz	r0, 8102ea8 <unwind_phase2_forced+0xa8>
 8102e6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8102e70:	a97a      	add	r1, sp, #488	; 0x1e8
 8102e72:	4628      	mov	r0, r5
 8102e74:	f002 fb4e 	bl	8105514 <memcpy>
 8102e78:	f1b9 0f08 	cmp.w	r9, #8
 8102e7c:	d11b      	bne.n	8102eb6 <unwind_phase2_forced+0xb6>
 8102e7e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8102e80:	4630      	mov	r0, r6
 8102e82:	f7ff ff1b 	bl	8102cbc <get_eit_entry>
 8102e86:	3409      	adds	r4, #9
 8102e88:	fa5f fa84 	uxtb.w	sl, r4
 8102e8c:	4681      	mov	r9, r0
 8102e8e:	2800      	cmp	r0, #0
 8102e90:	d0d3      	beq.n	8102e3a <unwind_phase2_forced+0x3a>
 8102e92:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8102e94:	f04a 0110 	orr.w	r1, sl, #16
 8102e98:	e9cd 5800 	strd	r5, r8, [sp]
 8102e9c:	4632      	mov	r2, r6
 8102e9e:	646b      	str	r3, [r5, #68]	; 0x44
 8102ea0:	2001      	movs	r0, #1
 8102ea2:	4633      	mov	r3, r6
 8102ea4:	47b8      	blx	r7
 8102ea6:	b108      	cbz	r0, 8102eac <unwind_phase2_forced+0xac>
 8102ea8:	f04f 0909 	mov.w	r9, #9
 8102eac:	4648      	mov	r0, r9
 8102eae:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8102eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8102eb6:	f1b9 0f07 	cmp.w	r9, #7
 8102eba:	d1f5      	bne.n	8102ea8 <unwind_phase2_forced+0xa8>
 8102ebc:	4620      	mov	r0, r4
 8102ebe:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8102ec0:	f7ff ff7e 	bl	8102dc0 <_Unwind_DebugHook>
 8102ec4:	a803      	add	r0, sp, #12
 8102ec6:	f000 fb89 	bl	81035dc <__restore_core_regs>
 8102eca:	bf00      	nop

08102ecc <_Unwind_GetCFA>:
 8102ecc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8102ece:	4770      	bx	lr

08102ed0 <__gnu_Unwind_RaiseException>:
 8102ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8102ed2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8102ed4:	640b      	str	r3, [r1, #64]	; 0x40
 8102ed6:	1d0e      	adds	r6, r1, #4
 8102ed8:	460f      	mov	r7, r1
 8102eda:	4605      	mov	r5, r0
 8102edc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8102ede:	b0f9      	sub	sp, #484	; 0x1e4
 8102ee0:	ac01      	add	r4, sp, #4
 8102ee2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102ee4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8102ee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102ee8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8102eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8102eec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8102ef0:	f04f 36ff 	mov.w	r6, #4294967295
 8102ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8102ef8:	9600      	str	r6, [sp, #0]
 8102efa:	e006      	b.n	8102f0a <__gnu_Unwind_RaiseException+0x3a>
 8102efc:	692b      	ldr	r3, [r5, #16]
 8102efe:	466a      	mov	r2, sp
 8102f00:	4629      	mov	r1, r5
 8102f02:	4798      	blx	r3
 8102f04:	2808      	cmp	r0, #8
 8102f06:	4604      	mov	r4, r0
 8102f08:	d108      	bne.n	8102f1c <__gnu_Unwind_RaiseException+0x4c>
 8102f0a:	9910      	ldr	r1, [sp, #64]	; 0x40
 8102f0c:	4628      	mov	r0, r5
 8102f0e:	f7ff fed5 	bl	8102cbc <get_eit_entry>
 8102f12:	2800      	cmp	r0, #0
 8102f14:	d0f2      	beq.n	8102efc <__gnu_Unwind_RaiseException+0x2c>
 8102f16:	2009      	movs	r0, #9
 8102f18:	b079      	add	sp, #484	; 0x1e4
 8102f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8102f1c:	4668      	mov	r0, sp
 8102f1e:	f7ff ff1b 	bl	8102d58 <restore_non_core_regs>
 8102f22:	2c06      	cmp	r4, #6
 8102f24:	d1f7      	bne.n	8102f16 <__gnu_Unwind_RaiseException+0x46>
 8102f26:	4639      	mov	r1, r7
 8102f28:	4628      	mov	r0, r5
 8102f2a:	f7ff ff4b 	bl	8102dc4 <unwind_phase2>
 8102f2e:	bf00      	nop

08102f30 <__gnu_Unwind_ForcedUnwind>:
 8102f30:	b430      	push	{r4, r5}
 8102f32:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8102f34:	60c1      	str	r1, [r0, #12]
 8102f36:	6182      	str	r2, [r0, #24]
 8102f38:	4619      	mov	r1, r3
 8102f3a:	641d      	str	r5, [r3, #64]	; 0x40
 8102f3c:	2200      	movs	r2, #0
 8102f3e:	bc30      	pop	{r4, r5}
 8102f40:	e75e      	b.n	8102e00 <unwind_phase2_forced>
 8102f42:	bf00      	nop

08102f44 <__gnu_Unwind_Resume>:
 8102f44:	b570      	push	{r4, r5, r6, lr}
 8102f46:	68c6      	ldr	r6, [r0, #12]
 8102f48:	6943      	ldr	r3, [r0, #20]
 8102f4a:	640b      	str	r3, [r1, #64]	; 0x40
 8102f4c:	b9ae      	cbnz	r6, 8102f7a <__gnu_Unwind_Resume+0x36>
 8102f4e:	6903      	ldr	r3, [r0, #16]
 8102f50:	460a      	mov	r2, r1
 8102f52:	4604      	mov	r4, r0
 8102f54:	460d      	mov	r5, r1
 8102f56:	4601      	mov	r1, r0
 8102f58:	2002      	movs	r0, #2
 8102f5a:	4798      	blx	r3
 8102f5c:	2807      	cmp	r0, #7
 8102f5e:	d005      	beq.n	8102f6c <__gnu_Unwind_Resume+0x28>
 8102f60:	2808      	cmp	r0, #8
 8102f62:	d10f      	bne.n	8102f84 <__gnu_Unwind_Resume+0x40>
 8102f64:	4629      	mov	r1, r5
 8102f66:	4620      	mov	r0, r4
 8102f68:	f7ff ff2c 	bl	8102dc4 <unwind_phase2>
 8102f6c:	4630      	mov	r0, r6
 8102f6e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8102f70:	f7ff ff26 	bl	8102dc0 <_Unwind_DebugHook>
 8102f74:	1d28      	adds	r0, r5, #4
 8102f76:	f000 fb31 	bl	81035dc <__restore_core_regs>
 8102f7a:	2201      	movs	r2, #1
 8102f7c:	f7ff ff40 	bl	8102e00 <unwind_phase2_forced>
 8102f80:	f002 f980 	bl	8105284 <abort>
 8102f84:	f002 f97e 	bl	8105284 <abort>

08102f88 <__gnu_Unwind_Resume_or_Rethrow>:
 8102f88:	68c2      	ldr	r2, [r0, #12]
 8102f8a:	b11a      	cbz	r2, 8102f94 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8102f8c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8102f8e:	640a      	str	r2, [r1, #64]	; 0x40
 8102f90:	2200      	movs	r2, #0
 8102f92:	e735      	b.n	8102e00 <unwind_phase2_forced>
 8102f94:	e79c      	b.n	8102ed0 <__gnu_Unwind_RaiseException>
 8102f96:	bf00      	nop

08102f98 <_Unwind_Complete>:
 8102f98:	4770      	bx	lr
 8102f9a:	bf00      	nop

08102f9c <_Unwind_DeleteException>:
 8102f9c:	6883      	ldr	r3, [r0, #8]
 8102f9e:	4601      	mov	r1, r0
 8102fa0:	b10b      	cbz	r3, 8102fa6 <_Unwind_DeleteException+0xa>
 8102fa2:	2001      	movs	r0, #1
 8102fa4:	4718      	bx	r3
 8102fa6:	4770      	bx	lr

08102fa8 <_Unwind_VRS_Get>:
 8102fa8:	2901      	cmp	r1, #1
 8102faa:	d012      	beq.n	8102fd2 <_Unwind_VRS_Get+0x2a>
 8102fac:	d809      	bhi.n	8102fc2 <_Unwind_VRS_Get+0x1a>
 8102fae:	b973      	cbnz	r3, 8102fce <_Unwind_VRS_Get+0x26>
 8102fb0:	2a0f      	cmp	r2, #15
 8102fb2:	d80c      	bhi.n	8102fce <_Unwind_VRS_Get+0x26>
 8102fb4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8102fb8:	4618      	mov	r0, r3
 8102fba:	6853      	ldr	r3, [r2, #4]
 8102fbc:	9a00      	ldr	r2, [sp, #0]
 8102fbe:	6013      	str	r3, [r2, #0]
 8102fc0:	4770      	bx	lr
 8102fc2:	3903      	subs	r1, #3
 8102fc4:	2901      	cmp	r1, #1
 8102fc6:	bf94      	ite	ls
 8102fc8:	2001      	movls	r0, #1
 8102fca:	2002      	movhi	r0, #2
 8102fcc:	4770      	bx	lr
 8102fce:	2002      	movs	r0, #2
 8102fd0:	4770      	bx	lr
 8102fd2:	4608      	mov	r0, r1
 8102fd4:	4770      	bx	lr
 8102fd6:	bf00      	nop

08102fd8 <_Unwind_GetGR>:
 8102fd8:	b510      	push	{r4, lr}
 8102fda:	b084      	sub	sp, #16
 8102fdc:	2300      	movs	r3, #0
 8102fde:	ac03      	add	r4, sp, #12
 8102fe0:	460a      	mov	r2, r1
 8102fe2:	9400      	str	r4, [sp, #0]
 8102fe4:	4619      	mov	r1, r3
 8102fe6:	f7ff ffdf 	bl	8102fa8 <_Unwind_VRS_Get>
 8102fea:	9803      	ldr	r0, [sp, #12]
 8102fec:	b004      	add	sp, #16
 8102fee:	bd10      	pop	{r4, pc}

08102ff0 <_Unwind_VRS_Set>:
 8102ff0:	2901      	cmp	r1, #1
 8102ff2:	d012      	beq.n	810301a <_Unwind_VRS_Set+0x2a>
 8102ff4:	d809      	bhi.n	810300a <_Unwind_VRS_Set+0x1a>
 8102ff6:	b973      	cbnz	r3, 8103016 <_Unwind_VRS_Set+0x26>
 8102ff8:	2a0f      	cmp	r2, #15
 8102ffa:	d80c      	bhi.n	8103016 <_Unwind_VRS_Set+0x26>
 8102ffc:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8103000:	9a00      	ldr	r2, [sp, #0]
 8103002:	6812      	ldr	r2, [r2, #0]
 8103004:	6042      	str	r2, [r0, #4]
 8103006:	4618      	mov	r0, r3
 8103008:	4770      	bx	lr
 810300a:	3903      	subs	r1, #3
 810300c:	2901      	cmp	r1, #1
 810300e:	bf94      	ite	ls
 8103010:	2001      	movls	r0, #1
 8103012:	2002      	movhi	r0, #2
 8103014:	4770      	bx	lr
 8103016:	2002      	movs	r0, #2
 8103018:	4770      	bx	lr
 810301a:	4608      	mov	r0, r1
 810301c:	4770      	bx	lr
 810301e:	bf00      	nop

08103020 <_Unwind_SetGR>:
 8103020:	b510      	push	{r4, lr}
 8103022:	b084      	sub	sp, #16
 8103024:	2300      	movs	r3, #0
 8103026:	ac03      	add	r4, sp, #12
 8103028:	9203      	str	r2, [sp, #12]
 810302a:	9400      	str	r4, [sp, #0]
 810302c:	460a      	mov	r2, r1
 810302e:	4619      	mov	r1, r3
 8103030:	f7ff ffde 	bl	8102ff0 <_Unwind_VRS_Set>
 8103034:	b004      	add	sp, #16
 8103036:	bd10      	pop	{r4, pc}

08103038 <__gnu_Unwind_Backtrace>:
 8103038:	b5f0      	push	{r4, r5, r6, r7, lr}
 810303a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 810303c:	6413      	str	r3, [r2, #64]	; 0x40
 810303e:	1d15      	adds	r5, r2, #4
 8103040:	468c      	mov	ip, r1
 8103042:	4606      	mov	r6, r0
 8103044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103046:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 810304a:	ac17      	add	r4, sp, #92	; 0x5c
 810304c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810304e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103056:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810305a:	f04f 37ff 	mov.w	r7, #4294967295
 810305e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8103062:	4665      	mov	r5, ip
 8103064:	9716      	str	r7, [sp, #88]	; 0x58
 8103066:	e010      	b.n	810308a <__gnu_Unwind_Backtrace+0x52>
 8103068:	f7ff ffda 	bl	8103020 <_Unwind_SetGR>
 810306c:	4629      	mov	r1, r5
 810306e:	a816      	add	r0, sp, #88	; 0x58
 8103070:	47b0      	blx	r6
 8103072:	4603      	mov	r3, r0
 8103074:	aa16      	add	r2, sp, #88	; 0x58
 8103076:	4669      	mov	r1, sp
 8103078:	2008      	movs	r0, #8
 810307a:	b983      	cbnz	r3, 810309e <__gnu_Unwind_Backtrace+0x66>
 810307c:	9b04      	ldr	r3, [sp, #16]
 810307e:	4798      	blx	r3
 8103080:	2805      	cmp	r0, #5
 8103082:	4604      	mov	r4, r0
 8103084:	d00c      	beq.n	81030a0 <__gnu_Unwind_Backtrace+0x68>
 8103086:	2809      	cmp	r0, #9
 8103088:	d009      	beq.n	810309e <__gnu_Unwind_Backtrace+0x66>
 810308a:	9926      	ldr	r1, [sp, #152]	; 0x98
 810308c:	4668      	mov	r0, sp
 810308e:	f7ff fe15 	bl	8102cbc <get_eit_entry>
 8103092:	4603      	mov	r3, r0
 8103094:	466a      	mov	r2, sp
 8103096:	210c      	movs	r1, #12
 8103098:	a816      	add	r0, sp, #88	; 0x58
 810309a:	2b00      	cmp	r3, #0
 810309c:	d0e4      	beq.n	8103068 <__gnu_Unwind_Backtrace+0x30>
 810309e:	2409      	movs	r4, #9
 81030a0:	a816      	add	r0, sp, #88	; 0x58
 81030a2:	f7ff fe59 	bl	8102d58 <restore_non_core_regs>
 81030a6:	4620      	mov	r0, r4
 81030a8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 81030ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81030ae:	bf00      	nop

081030b0 <__gnu_unwind_pr_common>:
 81030b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81030b4:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 81030b6:	b089      	sub	sp, #36	; 0x24
 81030b8:	460d      	mov	r5, r1
 81030ba:	f854 1b04 	ldr.w	r1, [r4], #4
 81030be:	9406      	str	r4, [sp, #24]
 81030c0:	4617      	mov	r7, r2
 81030c2:	f000 0803 	and.w	r8, r0, #3
 81030c6:	461e      	mov	r6, r3
 81030c8:	2b00      	cmp	r3, #0
 81030ca:	d079      	beq.n	81031c0 <__gnu_unwind_pr_common+0x110>
 81030cc:	0c0b      	lsrs	r3, r1, #16
 81030ce:	b2da      	uxtb	r2, r3
 81030d0:	0409      	lsls	r1, r1, #16
 81030d2:	f88d 301d 	strb.w	r3, [sp, #29]
 81030d6:	2302      	movs	r3, #2
 81030d8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 81030dc:	9105      	str	r1, [sp, #20]
 81030de:	f88d 301c 	strb.w	r3, [sp, #28]
 81030e2:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 81030e4:	f1b8 0f02 	cmp.w	r8, #2
 81030e8:	bf08      	it	eq
 81030ea:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 81030ec:	f013 0301 	ands.w	r3, r3, #1
 81030f0:	d00c      	beq.n	810310c <__gnu_unwind_pr_common+0x5c>
 81030f2:	4638      	mov	r0, r7
 81030f4:	a905      	add	r1, sp, #20
 81030f6:	f000 fb73 	bl	81037e0 <__gnu_unwind_execute>
 81030fa:	b918      	cbnz	r0, 8103104 <__gnu_unwind_pr_common+0x54>
 81030fc:	2008      	movs	r0, #8
 81030fe:	b009      	add	sp, #36	; 0x24
 8103100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8103104:	2009      	movs	r0, #9
 8103106:	b009      	add	sp, #36	; 0x24
 8103108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810310c:	f8d4 a000 	ldr.w	sl, [r4]
 8103110:	f1ba 0f00 	cmp.w	sl, #0
 8103114:	d0ed      	beq.n	81030f2 <__gnu_unwind_pr_common+0x42>
 8103116:	9301      	str	r3, [sp, #4]
 8103118:	f000 0308 	and.w	r3, r0, #8
 810311c:	9302      	str	r3, [sp, #8]
 810311e:	2e02      	cmp	r6, #2
 8103120:	d04a      	beq.n	81031b8 <__gnu_unwind_pr_common+0x108>
 8103122:	f8b4 a000 	ldrh.w	sl, [r4]
 8103126:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 810312a:	3404      	adds	r4, #4
 810312c:	6caa      	ldr	r2, [r5, #72]	; 0x48
 810312e:	f029 0b01 	bic.w	fp, r9, #1
 8103132:	210f      	movs	r1, #15
 8103134:	4638      	mov	r0, r7
 8103136:	4493      	add	fp, r2
 8103138:	f7ff ff4e 	bl	8102fd8 <_Unwind_GetGR>
 810313c:	4583      	cmp	fp, r0
 810313e:	d839      	bhi.n	81031b4 <__gnu_unwind_pr_common+0x104>
 8103140:	f02a 0201 	bic.w	r2, sl, #1
 8103144:	445a      	add	r2, fp
 8103146:	4282      	cmp	r2, r0
 8103148:	bf94      	ite	ls
 810314a:	2000      	movls	r0, #0
 810314c:	2001      	movhi	r0, #1
 810314e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8103152:	f003 0302 	and.w	r3, r3, #2
 8103156:	f00a 0a01 	and.w	sl, sl, #1
 810315a:	ea43 030a 	orr.w	r3, r3, sl
 810315e:	2b01      	cmp	r3, #1
 8103160:	d049      	beq.n	81031f6 <__gnu_unwind_pr_common+0x146>
 8103162:	2b02      	cmp	r3, #2
 8103164:	d032      	beq.n	81031cc <__gnu_unwind_pr_common+0x11c>
 8103166:	2b00      	cmp	r3, #0
 8103168:	d1cc      	bne.n	8103104 <__gnu_unwind_pr_common+0x54>
 810316a:	f1b8 0f00 	cmp.w	r8, #0
 810316e:	d002      	beq.n	8103176 <__gnu_unwind_pr_common+0xc6>
 8103170:	2800      	cmp	r0, #0
 8103172:	f040 80cd 	bne.w	8103310 <__gnu_unwind_pr_common+0x260>
 8103176:	3404      	adds	r4, #4
 8103178:	f8d4 a000 	ldr.w	sl, [r4]
 810317c:	f1ba 0f00 	cmp.w	sl, #0
 8103180:	d1cd      	bne.n	810311e <__gnu_unwind_pr_common+0x6e>
 8103182:	a905      	add	r1, sp, #20
 8103184:	4638      	mov	r0, r7
 8103186:	f000 fb2b 	bl	81037e0 <__gnu_unwind_execute>
 810318a:	2800      	cmp	r0, #0
 810318c:	d1ba      	bne.n	8103104 <__gnu_unwind_pr_common+0x54>
 810318e:	9b01      	ldr	r3, [sp, #4]
 8103190:	2b00      	cmp	r3, #0
 8103192:	d0b3      	beq.n	81030fc <__gnu_unwind_pr_common+0x4c>
 8103194:	210f      	movs	r1, #15
 8103196:	4638      	mov	r0, r7
 8103198:	f7ff ff1e 	bl	8102fd8 <_Unwind_GetGR>
 810319c:	210e      	movs	r1, #14
 810319e:	4602      	mov	r2, r0
 81031a0:	4638      	mov	r0, r7
 81031a2:	f7ff ff3d 	bl	8103020 <_Unwind_SetGR>
 81031a6:	4638      	mov	r0, r7
 81031a8:	4a6a      	ldr	r2, [pc, #424]	; (8103354 <__gnu_unwind_pr_common+0x2a4>)
 81031aa:	210f      	movs	r1, #15
 81031ac:	f7ff ff38 	bl	8103020 <_Unwind_SetGR>
 81031b0:	2007      	movs	r0, #7
 81031b2:	e7a8      	b.n	8103106 <__gnu_unwind_pr_common+0x56>
 81031b4:	2000      	movs	r0, #0
 81031b6:	e7ca      	b.n	810314e <__gnu_unwind_pr_common+0x9e>
 81031b8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 81031bc:	3408      	adds	r4, #8
 81031be:	e7b5      	b.n	810312c <__gnu_unwind_pr_common+0x7c>
 81031c0:	0209      	lsls	r1, r1, #8
 81031c2:	2303      	movs	r3, #3
 81031c4:	9105      	str	r1, [sp, #20]
 81031c6:	f8ad 301c 	strh.w	r3, [sp, #28]
 81031ca:	e78a      	b.n	81030e2 <__gnu_unwind_pr_common+0x32>
 81031cc:	6823      	ldr	r3, [r4, #0]
 81031ce:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 81031d2:	f1b8 0f00 	cmp.w	r8, #0
 81031d6:	d145      	bne.n	8103264 <__gnu_unwind_pr_common+0x1b4>
 81031d8:	b128      	cbz	r0, 81031e6 <__gnu_unwind_pr_common+0x136>
 81031da:	9a02      	ldr	r2, [sp, #8]
 81031dc:	2a00      	cmp	r2, #0
 81031de:	d05c      	beq.n	810329a <__gnu_unwind_pr_common+0x1ea>
 81031e0:	f1bb 0f00 	cmp.w	fp, #0
 81031e4:	d074      	beq.n	81032d0 <__gnu_unwind_pr_common+0x220>
 81031e6:	2b00      	cmp	r3, #0
 81031e8:	da00      	bge.n	81031ec <__gnu_unwind_pr_common+0x13c>
 81031ea:	3404      	adds	r4, #4
 81031ec:	f10b 0b01 	add.w	fp, fp, #1
 81031f0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 81031f4:	e7c0      	b.n	8103178 <__gnu_unwind_pr_common+0xc8>
 81031f6:	f1b8 0f00 	cmp.w	r8, #0
 81031fa:	d119      	bne.n	8103230 <__gnu_unwind_pr_common+0x180>
 81031fc:	b1b0      	cbz	r0, 810322c <__gnu_unwind_pr_common+0x17c>
 81031fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8103202:	1c99      	adds	r1, r3, #2
 8103204:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8103208:	f43f af7c 	beq.w	8103104 <__gnu_unwind_pr_common+0x54>
 810320c:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8103210:	3301      	adds	r3, #1
 8103212:	9104      	str	r1, [sp, #16]
 8103214:	f000 8090 	beq.w	8103338 <__gnu_unwind_pr_common+0x288>
 8103218:	1d20      	adds	r0, r4, #4
 810321a:	f7ff fdc9 	bl	8102db0 <_Unwind_decode_typeinfo_ptr.isra.0>
 810321e:	ab04      	add	r3, sp, #16
 8103220:	4601      	mov	r1, r0
 8103222:	4628      	mov	r0, r5
 8103224:	f3af 8000 	nop.w
 8103228:	2800      	cmp	r0, #0
 810322a:	d15b      	bne.n	81032e4 <__gnu_unwind_pr_common+0x234>
 810322c:	3408      	adds	r4, #8
 810322e:	e7a3      	b.n	8103178 <__gnu_unwind_pr_common+0xc8>
 8103230:	210d      	movs	r1, #13
 8103232:	4638      	mov	r0, r7
 8103234:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8103238:	f7ff fece 	bl	8102fd8 <_Unwind_GetGR>
 810323c:	4581      	cmp	r9, r0
 810323e:	d1f5      	bne.n	810322c <__gnu_unwind_pr_common+0x17c>
 8103240:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8103242:	429c      	cmp	r4, r3
 8103244:	d1f2      	bne.n	810322c <__gnu_unwind_pr_common+0x17c>
 8103246:	4620      	mov	r0, r4
 8103248:	f7ff fcec 	bl	8102c24 <selfrel_offset31>
 810324c:	210f      	movs	r1, #15
 810324e:	4602      	mov	r2, r0
 8103250:	4638      	mov	r0, r7
 8103252:	f7ff fee5 	bl	8103020 <_Unwind_SetGR>
 8103256:	4638      	mov	r0, r7
 8103258:	462a      	mov	r2, r5
 810325a:	2100      	movs	r1, #0
 810325c:	f7ff fee0 	bl	8103020 <_Unwind_SetGR>
 8103260:	2007      	movs	r0, #7
 8103262:	e750      	b.n	8103106 <__gnu_unwind_pr_common+0x56>
 8103264:	210d      	movs	r1, #13
 8103266:	4638      	mov	r0, r7
 8103268:	f8d5 9020 	ldr.w	r9, [r5, #32]
 810326c:	f7ff feb4 	bl	8102fd8 <_Unwind_GetGR>
 8103270:	4581      	cmp	r9, r0
 8103272:	d001      	beq.n	8103278 <__gnu_unwind_pr_common+0x1c8>
 8103274:	6823      	ldr	r3, [r4, #0]
 8103276:	e7b6      	b.n	81031e6 <__gnu_unwind_pr_common+0x136>
 8103278:	6aab      	ldr	r3, [r5, #40]	; 0x28
 810327a:	429c      	cmp	r4, r3
 810327c:	d1fa      	bne.n	8103274 <__gnu_unwind_pr_common+0x1c4>
 810327e:	2204      	movs	r2, #4
 8103280:	2100      	movs	r1, #0
 8103282:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 8103286:	18a3      	adds	r3, r4, r2
 8103288:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 810328c:	636b      	str	r3, [r5, #52]	; 0x34
 810328e:	6823      	ldr	r3, [r4, #0]
 8103290:	428b      	cmp	r3, r1
 8103292:	db59      	blt.n	8103348 <__gnu_unwind_pr_common+0x298>
 8103294:	2301      	movs	r3, #1
 8103296:	9301      	str	r3, [sp, #4]
 8103298:	e7a8      	b.n	81031ec <__gnu_unwind_pr_common+0x13c>
 810329a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 810329e:	f8cd 800c 	str.w	r8, [sp, #12]
 81032a2:	f104 0a04 	add.w	sl, r4, #4
 81032a6:	46b0      	mov	r8, r6
 81032a8:	4691      	mov	r9, r2
 81032aa:	461e      	mov	r6, r3
 81032ac:	e00d      	b.n	81032ca <__gnu_unwind_pr_common+0x21a>
 81032ae:	9604      	str	r6, [sp, #16]
 81032b0:	f7ff fd7e 	bl	8102db0 <_Unwind_decode_typeinfo_ptr.isra.0>
 81032b4:	ab04      	add	r3, sp, #16
 81032b6:	4601      	mov	r1, r0
 81032b8:	2200      	movs	r2, #0
 81032ba:	4628      	mov	r0, r5
 81032bc:	f3af 8000 	nop.w
 81032c0:	f109 0901 	add.w	r9, r9, #1
 81032c4:	f10a 0a04 	add.w	sl, sl, #4
 81032c8:	b9e8      	cbnz	r0, 8103306 <__gnu_unwind_pr_common+0x256>
 81032ca:	45d9      	cmp	r9, fp
 81032cc:	4650      	mov	r0, sl
 81032ce:	d1ee      	bne.n	81032ae <__gnu_unwind_pr_common+0x1fe>
 81032d0:	4638      	mov	r0, r7
 81032d2:	210d      	movs	r1, #13
 81032d4:	f7ff fe80 	bl	8102fd8 <_Unwind_GetGR>
 81032d8:	9b04      	ldr	r3, [sp, #16]
 81032da:	6228      	str	r0, [r5, #32]
 81032dc:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 81032e0:	2006      	movs	r0, #6
 81032e2:	e710      	b.n	8103106 <__gnu_unwind_pr_common+0x56>
 81032e4:	4681      	mov	r9, r0
 81032e6:	210d      	movs	r1, #13
 81032e8:	4638      	mov	r0, r7
 81032ea:	f7ff fe75 	bl	8102fd8 <_Unwind_GetGR>
 81032ee:	f1b9 0f02 	cmp.w	r9, #2
 81032f2:	6228      	str	r0, [r5, #32]
 81032f4:	d125      	bne.n	8103342 <__gnu_unwind_pr_common+0x292>
 81032f6:	462b      	mov	r3, r5
 81032f8:	9a04      	ldr	r2, [sp, #16]
 81032fa:	f843 2f2c 	str.w	r2, [r3, #44]!
 81032fe:	626b      	str	r3, [r5, #36]	; 0x24
 8103300:	62ac      	str	r4, [r5, #40]	; 0x28
 8103302:	2006      	movs	r0, #6
 8103304:	e6ff      	b.n	8103106 <__gnu_unwind_pr_common+0x56>
 8103306:	4646      	mov	r6, r8
 8103308:	6823      	ldr	r3, [r4, #0]
 810330a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810330e:	e76a      	b.n	81031e6 <__gnu_unwind_pr_common+0x136>
 8103310:	4620      	mov	r0, r4
 8103312:	f7ff fc87 	bl	8102c24 <selfrel_offset31>
 8103316:	3404      	adds	r4, #4
 8103318:	4602      	mov	r2, r0
 810331a:	63ac      	str	r4, [r5, #56]	; 0x38
 810331c:	4628      	mov	r0, r5
 810331e:	4614      	mov	r4, r2
 8103320:	f3af 8000 	nop.w
 8103324:	2800      	cmp	r0, #0
 8103326:	f43f aeed 	beq.w	8103104 <__gnu_unwind_pr_common+0x54>
 810332a:	4638      	mov	r0, r7
 810332c:	4622      	mov	r2, r4
 810332e:	210f      	movs	r1, #15
 8103330:	f7ff fe76 	bl	8103020 <_Unwind_SetGR>
 8103334:	2007      	movs	r0, #7
 8103336:	e6e6      	b.n	8103106 <__gnu_unwind_pr_common+0x56>
 8103338:	4638      	mov	r0, r7
 810333a:	210d      	movs	r1, #13
 810333c:	f7ff fe4c 	bl	8102fd8 <_Unwind_GetGR>
 8103340:	6228      	str	r0, [r5, #32]
 8103342:	9b04      	ldr	r3, [sp, #16]
 8103344:	626b      	str	r3, [r5, #36]	; 0x24
 8103346:	e7db      	b.n	8103300 <__gnu_unwind_pr_common+0x250>
 8103348:	f10b 0001 	add.w	r0, fp, #1
 810334c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8103350:	e77a      	b.n	8103248 <__gnu_unwind_pr_common+0x198>
 8103352:	bf00      	nop
 8103354:	00000000 	.word	0x00000000

08103358 <__aeabi_unwind_cpp_pr0>:
 8103358:	2300      	movs	r3, #0
 810335a:	e6a9      	b.n	81030b0 <__gnu_unwind_pr_common>

0810335c <__aeabi_unwind_cpp_pr1>:
 810335c:	2301      	movs	r3, #1
 810335e:	e6a7      	b.n	81030b0 <__gnu_unwind_pr_common>

08103360 <__aeabi_unwind_cpp_pr2>:
 8103360:	2302      	movs	r3, #2
 8103362:	e6a5      	b.n	81030b0 <__gnu_unwind_pr_common>

08103364 <_Unwind_VRS_Pop>:
 8103364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8103368:	4606      	mov	r6, r0
 810336a:	b0c3      	sub	sp, #268	; 0x10c
 810336c:	4615      	mov	r5, r2
 810336e:	461c      	mov	r4, r3
 8103370:	2904      	cmp	r1, #4
 8103372:	f200 80b9 	bhi.w	81034e8 <_Unwind_VRS_Pop+0x184>
 8103376:	e8df f001 	tbb	[pc, r1]
 810337a:	539a      	.short	0x539a
 810337c:	29b7      	.short	0x29b7
 810337e:	03          	.byte	0x03
 810337f:	00          	.byte	0x00
 8103380:	2c00      	cmp	r4, #0
 8103382:	f040 80b1 	bne.w	81034e8 <_Unwind_VRS_Pop+0x184>
 8103386:	2a10      	cmp	r2, #16
 8103388:	f200 80ae 	bhi.w	81034e8 <_Unwind_VRS_Pop+0x184>
 810338c:	6803      	ldr	r3, [r0, #0]
 810338e:	06d8      	lsls	r0, r3, #27
 8103390:	f100 80f3 	bmi.w	810357a <_Unwind_VRS_Pop+0x216>
 8103394:	af20      	add	r7, sp, #128	; 0x80
 8103396:	4638      	mov	r0, r7
 8103398:	f000 f992 	bl	81036c0 <__gnu_Unwind_Save_WMMXC>
 810339c:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 810339e:	2300      	movs	r3, #0
 81033a0:	2401      	movs	r4, #1
 81033a2:	fa04 f203 	lsl.w	r2, r4, r3
 81033a6:	422a      	tst	r2, r5
 81033a8:	4601      	mov	r1, r0
 81033aa:	d004      	beq.n	81033b6 <_Unwind_VRS_Pop+0x52>
 81033ac:	f851 2b04 	ldr.w	r2, [r1], #4
 81033b0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 81033b4:	4608      	mov	r0, r1
 81033b6:	3301      	adds	r3, #1
 81033b8:	2b04      	cmp	r3, #4
 81033ba:	d1f2      	bne.n	81033a2 <_Unwind_VRS_Pop+0x3e>
 81033bc:	63b0      	str	r0, [r6, #56]	; 0x38
 81033be:	4638      	mov	r0, r7
 81033c0:	f000 f974 	bl	81036ac <__gnu_Unwind_Restore_WMMXC>
 81033c4:	2000      	movs	r0, #0
 81033c6:	b043      	add	sp, #268	; 0x10c
 81033c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81033cc:	2c03      	cmp	r4, #3
 81033ce:	f040 808b 	bne.w	81034e8 <_Unwind_VRS_Pop+0x184>
 81033d2:	b294      	uxth	r4, r2
 81033d4:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 81033d8:	2b10      	cmp	r3, #16
 81033da:	ea4f 4512 	mov.w	r5, r2, lsr #16
 81033de:	f200 8083 	bhi.w	81034e8 <_Unwind_VRS_Pop+0x184>
 81033e2:	6803      	ldr	r3, [r0, #0]
 81033e4:	071f      	lsls	r7, r3, #28
 81033e6:	f100 80d0 	bmi.w	810358a <_Unwind_VRS_Pop+0x226>
 81033ea:	af20      	add	r7, sp, #128	; 0x80
 81033ec:	4638      	mov	r0, r7
 81033ee:	f000 f93b 	bl	8103668 <__gnu_Unwind_Save_WMMXD>
 81033f2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 81033f6:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 81033f8:	b154      	cbz	r4, 8103410 <_Unwind_VRS_Pop+0xac>
 81033fa:	460b      	mov	r3, r1
 81033fc:	1ae8      	subs	r0, r5, r3
 81033fe:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8103402:	00e4      	lsls	r4, r4, #3
 8103404:	581a      	ldr	r2, [r3, r0]
 8103406:	f843 2b04 	str.w	r2, [r3], #4
 810340a:	428b      	cmp	r3, r1
 810340c:	d1fa      	bne.n	8103404 <_Unwind_VRS_Pop+0xa0>
 810340e:	4425      	add	r5, r4
 8103410:	4638      	mov	r0, r7
 8103412:	63b5      	str	r5, [r6, #56]	; 0x38
 8103414:	f000 f906 	bl	8103624 <__gnu_Unwind_Restore_WMMXD>
 8103418:	2000      	movs	r0, #0
 810341a:	b043      	add	sp, #268	; 0x10c
 810341c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8103420:	2c01      	cmp	r4, #1
 8103422:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8103426:	b295      	uxth	r5, r2
 8103428:	d05a      	beq.n	81034e0 <_Unwind_VRS_Pop+0x17c>
 810342a:	2c05      	cmp	r4, #5
 810342c:	d15c      	bne.n	81034e8 <_Unwind_VRS_Pop+0x184>
 810342e:	eb08 0905 	add.w	r9, r8, r5
 8103432:	f1b9 0f20 	cmp.w	r9, #32
 8103436:	d857      	bhi.n	81034e8 <_Unwind_VRS_Pop+0x184>
 8103438:	f1b8 0f0f 	cmp.w	r8, #15
 810343c:	d977      	bls.n	810352e <_Unwind_VRS_Pop+0x1ca>
 810343e:	46a9      	mov	r9, r5
 8103440:	2d00      	cmp	r5, #0
 8103442:	f040 8088 	bne.w	8103556 <_Unwind_VRS_Pop+0x1f2>
 8103446:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8103448:	b36d      	cbz	r5, 81034a6 <_Unwind_VRS_Pop+0x142>
 810344a:	af20      	add	r7, sp, #128	; 0x80
 810344c:	f04f 0900 	mov.w	r9, #0
 8103450:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8103454:	3f04      	subs	r7, #4
 8103456:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 810345a:	f853 1b04 	ldr.w	r1, [r3], #4
 810345e:	f847 1f04 	str.w	r1, [r7, #4]!
 8103462:	42ab      	cmp	r3, r5
 8103464:	d1f9      	bne.n	810345a <_Unwind_VRS_Pop+0xf6>
 8103466:	f1b9 0f00 	cmp.w	r9, #0
 810346a:	d00f      	beq.n	810348c <_Unwind_VRS_Pop+0x128>
 810346c:	466f      	mov	r7, sp
 810346e:	4641      	mov	r1, r8
 8103470:	2910      	cmp	r1, #16
 8103472:	bf38      	it	cc
 8103474:	2110      	movcc	r1, #16
 8103476:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 810347a:	3984      	subs	r1, #132	; 0x84
 810347c:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8103480:	f853 0b04 	ldr.w	r0, [r3], #4
 8103484:	f841 0f04 	str.w	r0, [r1, #4]!
 8103488:	42ab      	cmp	r3, r5
 810348a:	d1f9      	bne.n	8103480 <_Unwind_VRS_Pop+0x11c>
 810348c:	2c01      	cmp	r4, #1
 810348e:	f000 8084 	beq.w	810359a <_Unwind_VRS_Pop+0x236>
 8103492:	f1b8 0f0f 	cmp.w	r8, #15
 8103496:	63b5      	str	r5, [r6, #56]	; 0x38
 8103498:	d945      	bls.n	8103526 <_Unwind_VRS_Pop+0x1c2>
 810349a:	f1b9 0f00 	cmp.w	r9, #0
 810349e:	d002      	beq.n	81034a6 <_Unwind_VRS_Pop+0x142>
 81034a0:	4668      	mov	r0, sp
 81034a2:	f000 f8b7 	bl	8103614 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 81034a6:	2000      	movs	r0, #0
 81034a8:	b043      	add	sp, #268	; 0x10c
 81034aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81034ae:	b9dc      	cbnz	r4, 81034e8 <_Unwind_VRS_Pop+0x184>
 81034b0:	6b87      	ldr	r7, [r0, #56]	; 0x38
 81034b2:	4623      	mov	r3, r4
 81034b4:	2001      	movs	r0, #1
 81034b6:	b294      	uxth	r4, r2
 81034b8:	f106 0c04 	add.w	ip, r6, #4
 81034bc:	fa00 f203 	lsl.w	r2, r0, r3
 81034c0:	4222      	tst	r2, r4
 81034c2:	4639      	mov	r1, r7
 81034c4:	d004      	beq.n	81034d0 <_Unwind_VRS_Pop+0x16c>
 81034c6:	f851 2b04 	ldr.w	r2, [r1], #4
 81034ca:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 81034ce:	460f      	mov	r7, r1
 81034d0:	3301      	adds	r3, #1
 81034d2:	2b10      	cmp	r3, #16
 81034d4:	d1f2      	bne.n	81034bc <_Unwind_VRS_Pop+0x158>
 81034d6:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 81034da:	d1e4      	bne.n	81034a6 <_Unwind_VRS_Pop+0x142>
 81034dc:	63b7      	str	r7, [r6, #56]	; 0x38
 81034de:	e004      	b.n	81034ea <_Unwind_VRS_Pop+0x186>
 81034e0:	eb08 0305 	add.w	r3, r8, r5
 81034e4:	2b10      	cmp	r3, #16
 81034e6:	d903      	bls.n	81034f0 <_Unwind_VRS_Pop+0x18c>
 81034e8:	2002      	movs	r0, #2
 81034ea:	b043      	add	sp, #268	; 0x10c
 81034ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81034f0:	f1b8 0f0f 	cmp.w	r8, #15
 81034f4:	d8f8      	bhi.n	81034e8 <_Unwind_VRS_Pop+0x184>
 81034f6:	6833      	ldr	r3, [r6, #0]
 81034f8:	07da      	lsls	r2, r3, #31
 81034fa:	d506      	bpl.n	810350a <_Unwind_VRS_Pop+0x1a6>
 81034fc:	4630      	mov	r0, r6
 81034fe:	f023 0303 	bic.w	r3, r3, #3
 8103502:	f840 3b48 	str.w	r3, [r0], #72
 8103506:	f000 f879 	bl	81035fc <__gnu_Unwind_Save_VFP>
 810350a:	af20      	add	r7, sp, #128	; 0x80
 810350c:	4638      	mov	r0, r7
 810350e:	f000 f875 	bl	81035fc <__gnu_Unwind_Save_VFP>
 8103512:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8103514:	2d00      	cmp	r5, #0
 8103516:	d199      	bne.n	810344c <_Unwind_VRS_Pop+0xe8>
 8103518:	461d      	mov	r5, r3
 810351a:	3504      	adds	r5, #4
 810351c:	63b5      	str	r5, [r6, #56]	; 0x38
 810351e:	4638      	mov	r0, r7
 8103520:	f000 f868 	bl	81035f4 <__gnu_Unwind_Restore_VFP>
 8103524:	e7bf      	b.n	81034a6 <_Unwind_VRS_Pop+0x142>
 8103526:	a820      	add	r0, sp, #128	; 0x80
 8103528:	f000 f86c 	bl	8103604 <__gnu_Unwind_Restore_VFP_D>
 810352c:	e7b5      	b.n	810349a <_Unwind_VRS_Pop+0x136>
 810352e:	f1b9 0f10 	cmp.w	r9, #16
 8103532:	d940      	bls.n	81035b6 <_Unwind_VRS_Pop+0x252>
 8103534:	f1a9 0910 	sub.w	r9, r9, #16
 8103538:	6833      	ldr	r3, [r6, #0]
 810353a:	07d9      	lsls	r1, r3, #31
 810353c:	d508      	bpl.n	8103550 <_Unwind_VRS_Pop+0x1ec>
 810353e:	f023 0301 	bic.w	r3, r3, #1
 8103542:	4630      	mov	r0, r6
 8103544:	f043 0302 	orr.w	r3, r3, #2
 8103548:	f840 3b48 	str.w	r3, [r0], #72
 810354c:	f000 f85e 	bl	810360c <__gnu_Unwind_Save_VFP_D>
 8103550:	f1b9 0f00 	cmp.w	r9, #0
 8103554:	d032      	beq.n	81035bc <_Unwind_VRS_Pop+0x258>
 8103556:	6833      	ldr	r3, [r6, #0]
 8103558:	075a      	lsls	r2, r3, #29
 810355a:	d420      	bmi.n	810359e <_Unwind_VRS_Pop+0x23a>
 810355c:	f1b8 0f0f 	cmp.w	r8, #15
 8103560:	d925      	bls.n	81035ae <_Unwind_VRS_Pop+0x24a>
 8103562:	466f      	mov	r7, sp
 8103564:	4638      	mov	r0, r7
 8103566:	f1c8 0510 	rsb	r5, r8, #16
 810356a:	f000 f857 	bl	810361c <__gnu_Unwind_Save_VFP_D_16_to_31>
 810356e:	2d00      	cmp	r5, #0
 8103570:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8103572:	f77f af7c 	ble.w	810346e <_Unwind_VRS_Pop+0x10a>
 8103576:	af20      	add	r7, sp, #128	; 0x80
 8103578:	e76a      	b.n	8103450 <_Unwind_VRS_Pop+0xec>
 810357a:	f023 0310 	bic.w	r3, r3, #16
 810357e:	6033      	str	r3, [r6, #0]
 8103580:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8103584:	f000 f89c 	bl	81036c0 <__gnu_Unwind_Save_WMMXC>
 8103588:	e704      	b.n	8103394 <_Unwind_VRS_Pop+0x30>
 810358a:	f023 0308 	bic.w	r3, r3, #8
 810358e:	6003      	str	r3, [r0, #0]
 8103590:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8103594:	f000 f868 	bl	8103668 <__gnu_Unwind_Save_WMMXD>
 8103598:	e727      	b.n	81033ea <_Unwind_VRS_Pop+0x86>
 810359a:	af20      	add	r7, sp, #128	; 0x80
 810359c:	e7bd      	b.n	810351a <_Unwind_VRS_Pop+0x1b6>
 810359e:	4630      	mov	r0, r6
 81035a0:	f023 0304 	bic.w	r3, r3, #4
 81035a4:	f840 3bd0 	str.w	r3, [r0], #208
 81035a8:	f000 f838 	bl	810361c <__gnu_Unwind_Save_VFP_D_16_to_31>
 81035ac:	e7d6      	b.n	810355c <_Unwind_VRS_Pop+0x1f8>
 81035ae:	a820      	add	r0, sp, #128	; 0x80
 81035b0:	f000 f82c 	bl	810360c <__gnu_Unwind_Save_VFP_D>
 81035b4:	e7d5      	b.n	8103562 <_Unwind_VRS_Pop+0x1fe>
 81035b6:	f04f 0900 	mov.w	r9, #0
 81035ba:	e7bd      	b.n	8103538 <_Unwind_VRS_Pop+0x1d4>
 81035bc:	f1b8 0f0f 	cmp.w	r8, #15
 81035c0:	f63f af41 	bhi.w	8103446 <_Unwind_VRS_Pop+0xe2>
 81035c4:	af20      	add	r7, sp, #128	; 0x80
 81035c6:	4638      	mov	r0, r7
 81035c8:	f000 f820 	bl	810360c <__gnu_Unwind_Save_VFP_D>
 81035cc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 81035ce:	2d00      	cmp	r5, #0
 81035d0:	f47f af3c 	bne.w	810344c <_Unwind_VRS_Pop+0xe8>
 81035d4:	4638      	mov	r0, r7
 81035d6:	f000 f815 	bl	8103604 <__gnu_Unwind_Restore_VFP_D>
 81035da:	e764      	b.n	81034a6 <_Unwind_VRS_Pop+0x142>

081035dc <__restore_core_regs>:
 81035dc:	f100 0134 	add.w	r1, r0, #52	; 0x34
 81035e0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 81035e4:	469c      	mov	ip, r3
 81035e6:	46a6      	mov	lr, r4
 81035e8:	f84c 5d04 	str.w	r5, [ip, #-4]!
 81035ec:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 81035f0:	46e5      	mov	sp, ip
 81035f2:	bd00      	pop	{pc}

081035f4 <__gnu_Unwind_Restore_VFP>:
 81035f4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 81035f8:	4770      	bx	lr
 81035fa:	bf00      	nop

081035fc <__gnu_Unwind_Save_VFP>:
 81035fc:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8103600:	4770      	bx	lr
 8103602:	bf00      	nop

08103604 <__gnu_Unwind_Restore_VFP_D>:
 8103604:	ec90 0b20 	vldmia	r0, {d0-d15}
 8103608:	4770      	bx	lr
 810360a:	bf00      	nop

0810360c <__gnu_Unwind_Save_VFP_D>:
 810360c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8103610:	4770      	bx	lr
 8103612:	bf00      	nop

08103614 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8103614:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8103618:	4770      	bx	lr
 810361a:	bf00      	nop

0810361c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 810361c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8103620:	4770      	bx	lr
 8103622:	bf00      	nop

08103624 <__gnu_Unwind_Restore_WMMXD>:
 8103624:	ecf0 0102 	ldfe	f0, [r0], #8
 8103628:	ecf0 1102 	ldfe	f1, [r0], #8
 810362c:	ecf0 2102 	ldfe	f2, [r0], #8
 8103630:	ecf0 3102 	ldfe	f3, [r0], #8
 8103634:	ecf0 4102 	ldfe	f4, [r0], #8
 8103638:	ecf0 5102 	ldfe	f5, [r0], #8
 810363c:	ecf0 6102 	ldfe	f6, [r0], #8
 8103640:	ecf0 7102 	ldfe	f7, [r0], #8
 8103644:	ecf0 8102 	ldfp	f0, [r0], #8
 8103648:	ecf0 9102 	ldfp	f1, [r0], #8
 810364c:	ecf0 a102 	ldfp	f2, [r0], #8
 8103650:	ecf0 b102 	ldfp	f3, [r0], #8
 8103654:	ecf0 c102 	ldfp	f4, [r0], #8
 8103658:	ecf0 d102 	ldfp	f5, [r0], #8
 810365c:	ecf0 e102 	ldfp	f6, [r0], #8
 8103660:	ecf0 f102 	ldfp	f7, [r0], #8
 8103664:	4770      	bx	lr
 8103666:	bf00      	nop

08103668 <__gnu_Unwind_Save_WMMXD>:
 8103668:	ece0 0102 	stfe	f0, [r0], #8
 810366c:	ece0 1102 	stfe	f1, [r0], #8
 8103670:	ece0 2102 	stfe	f2, [r0], #8
 8103674:	ece0 3102 	stfe	f3, [r0], #8
 8103678:	ece0 4102 	stfe	f4, [r0], #8
 810367c:	ece0 5102 	stfe	f5, [r0], #8
 8103680:	ece0 6102 	stfe	f6, [r0], #8
 8103684:	ece0 7102 	stfe	f7, [r0], #8
 8103688:	ece0 8102 	stfp	f0, [r0], #8
 810368c:	ece0 9102 	stfp	f1, [r0], #8
 8103690:	ece0 a102 	stfp	f2, [r0], #8
 8103694:	ece0 b102 	stfp	f3, [r0], #8
 8103698:	ece0 c102 	stfp	f4, [r0], #8
 810369c:	ece0 d102 	stfp	f5, [r0], #8
 81036a0:	ece0 e102 	stfp	f6, [r0], #8
 81036a4:	ece0 f102 	stfp	f7, [r0], #8
 81036a8:	4770      	bx	lr
 81036aa:	bf00      	nop

081036ac <__gnu_Unwind_Restore_WMMXC>:
 81036ac:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 81036b0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 81036b4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 81036b8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 81036bc:	4770      	bx	lr
 81036be:	bf00      	nop

081036c0 <__gnu_Unwind_Save_WMMXC>:
 81036c0:	fca0 8101 	stc2	1, cr8, [r0], #4
 81036c4:	fca0 9101 	stc2	1, cr9, [r0], #4
 81036c8:	fca0 a101 	stc2	1, cr10, [r0], #4
 81036cc:	fca0 b101 	stc2	1, cr11, [r0], #4
 81036d0:	4770      	bx	lr
 81036d2:	bf00      	nop

081036d4 <_Unwind_RaiseException>:
 81036d4:	46ec      	mov	ip, sp
 81036d6:	b500      	push	{lr}
 81036d8:	e92d 5000 	stmdb	sp!, {ip, lr}
 81036dc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 81036e0:	f04f 0300 	mov.w	r3, #0
 81036e4:	e92d 000c 	stmdb	sp!, {r2, r3}
 81036e8:	a901      	add	r1, sp, #4
 81036ea:	f7ff fbf1 	bl	8102ed0 <__gnu_Unwind_RaiseException>
 81036ee:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 81036f2:	b012      	add	sp, #72	; 0x48
 81036f4:	4770      	bx	lr
 81036f6:	bf00      	nop

081036f8 <_Unwind_Resume>:
 81036f8:	46ec      	mov	ip, sp
 81036fa:	b500      	push	{lr}
 81036fc:	e92d 5000 	stmdb	sp!, {ip, lr}
 8103700:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8103704:	f04f 0300 	mov.w	r3, #0
 8103708:	e92d 000c 	stmdb	sp!, {r2, r3}
 810370c:	a901      	add	r1, sp, #4
 810370e:	f7ff fc19 	bl	8102f44 <__gnu_Unwind_Resume>
 8103712:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8103716:	b012      	add	sp, #72	; 0x48
 8103718:	4770      	bx	lr
 810371a:	bf00      	nop

0810371c <_Unwind_Resume_or_Rethrow>:
 810371c:	46ec      	mov	ip, sp
 810371e:	b500      	push	{lr}
 8103720:	e92d 5000 	stmdb	sp!, {ip, lr}
 8103724:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8103728:	f04f 0300 	mov.w	r3, #0
 810372c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8103730:	a901      	add	r1, sp, #4
 8103732:	f7ff fc29 	bl	8102f88 <__gnu_Unwind_Resume_or_Rethrow>
 8103736:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 810373a:	b012      	add	sp, #72	; 0x48
 810373c:	4770      	bx	lr
 810373e:	bf00      	nop

08103740 <_Unwind_ForcedUnwind>:
 8103740:	46ec      	mov	ip, sp
 8103742:	b500      	push	{lr}
 8103744:	e92d 5000 	stmdb	sp!, {ip, lr}
 8103748:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 810374c:	f04f 0300 	mov.w	r3, #0
 8103750:	e92d 000c 	stmdb	sp!, {r2, r3}
 8103754:	ab01      	add	r3, sp, #4
 8103756:	f7ff fbeb 	bl	8102f30 <__gnu_Unwind_ForcedUnwind>
 810375a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 810375e:	b012      	add	sp, #72	; 0x48
 8103760:	4770      	bx	lr
 8103762:	bf00      	nop

08103764 <_Unwind_Backtrace>:
 8103764:	46ec      	mov	ip, sp
 8103766:	b500      	push	{lr}
 8103768:	e92d 5000 	stmdb	sp!, {ip, lr}
 810376c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8103770:	f04f 0300 	mov.w	r3, #0
 8103774:	e92d 000c 	stmdb	sp!, {r2, r3}
 8103778:	aa01      	add	r2, sp, #4
 810377a:	f7ff fc5d 	bl	8103038 <__gnu_Unwind_Backtrace>
 810377e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8103782:	b012      	add	sp, #72	; 0x48
 8103784:	4770      	bx	lr
 8103786:	bf00      	nop

08103788 <next_unwind_byte>:
 8103788:	7a02      	ldrb	r2, [r0, #8]
 810378a:	b97a      	cbnz	r2, 81037ac <next_unwind_byte+0x24>
 810378c:	7a43      	ldrb	r3, [r0, #9]
 810378e:	b1a3      	cbz	r3, 81037ba <next_unwind_byte+0x32>
 8103790:	6842      	ldr	r2, [r0, #4]
 8103792:	3b01      	subs	r3, #1
 8103794:	b410      	push	{r4}
 8103796:	7243      	strb	r3, [r0, #9]
 8103798:	6813      	ldr	r3, [r2, #0]
 810379a:	2103      	movs	r1, #3
 810379c:	1d14      	adds	r4, r2, #4
 810379e:	7201      	strb	r1, [r0, #8]
 81037a0:	021a      	lsls	r2, r3, #8
 81037a2:	6044      	str	r4, [r0, #4]
 81037a4:	6002      	str	r2, [r0, #0]
 81037a6:	bc10      	pop	{r4}
 81037a8:	0e18      	lsrs	r0, r3, #24
 81037aa:	4770      	bx	lr
 81037ac:	6803      	ldr	r3, [r0, #0]
 81037ae:	3a01      	subs	r2, #1
 81037b0:	7202      	strb	r2, [r0, #8]
 81037b2:	021a      	lsls	r2, r3, #8
 81037b4:	6002      	str	r2, [r0, #0]
 81037b6:	0e18      	lsrs	r0, r3, #24
 81037b8:	4770      	bx	lr
 81037ba:	20b0      	movs	r0, #176	; 0xb0
 81037bc:	4770      	bx	lr
 81037be:	bf00      	nop

081037c0 <_Unwind_GetGR.constprop.0>:
 81037c0:	b500      	push	{lr}
 81037c2:	b085      	sub	sp, #20
 81037c4:	aa03      	add	r2, sp, #12
 81037c6:	2300      	movs	r3, #0
 81037c8:	9200      	str	r2, [sp, #0]
 81037ca:	4619      	mov	r1, r3
 81037cc:	220c      	movs	r2, #12
 81037ce:	f7ff fbeb 	bl	8102fa8 <_Unwind_VRS_Get>
 81037d2:	9803      	ldr	r0, [sp, #12]
 81037d4:	b005      	add	sp, #20
 81037d6:	f85d fb04 	ldr.w	pc, [sp], #4
 81037da:	bf00      	nop

081037dc <unwind_UCB_from_context>:
 81037dc:	e7f0      	b.n	81037c0 <_Unwind_GetGR.constprop.0>
 81037de:	bf00      	nop

081037e0 <__gnu_unwind_execute>:
 81037e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81037e4:	4605      	mov	r5, r0
 81037e6:	b085      	sub	sp, #20
 81037e8:	460e      	mov	r6, r1
 81037ea:	f04f 0800 	mov.w	r8, #0
 81037ee:	4630      	mov	r0, r6
 81037f0:	f7ff ffca 	bl	8103788 <next_unwind_byte>
 81037f4:	28b0      	cmp	r0, #176	; 0xb0
 81037f6:	4604      	mov	r4, r0
 81037f8:	f000 80b2 	beq.w	8103960 <__gnu_unwind_execute+0x180>
 81037fc:	0607      	lsls	r7, r0, #24
 81037fe:	d520      	bpl.n	8103842 <__gnu_unwind_execute+0x62>
 8103800:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8103804:	2b80      	cmp	r3, #128	; 0x80
 8103806:	d04d      	beq.n	81038a4 <__gnu_unwind_execute+0xc4>
 8103808:	2b90      	cmp	r3, #144	; 0x90
 810380a:	d036      	beq.n	810387a <__gnu_unwind_execute+0x9a>
 810380c:	2ba0      	cmp	r3, #160	; 0xa0
 810380e:	d060      	beq.n	81038d2 <__gnu_unwind_execute+0xf2>
 8103810:	2bb0      	cmp	r3, #176	; 0xb0
 8103812:	d074      	beq.n	81038fe <__gnu_unwind_execute+0x11e>
 8103814:	2bc0      	cmp	r3, #192	; 0xc0
 8103816:	f000 808b 	beq.w	8103930 <__gnu_unwind_execute+0x150>
 810381a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 810381e:	2bd0      	cmp	r3, #208	; 0xd0
 8103820:	d10b      	bne.n	810383a <__gnu_unwind_execute+0x5a>
 8103822:	f000 0207 	and.w	r2, r0, #7
 8103826:	3201      	adds	r2, #1
 8103828:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 810382c:	2305      	movs	r3, #5
 810382e:	2101      	movs	r1, #1
 8103830:	4628      	mov	r0, r5
 8103832:	f7ff fd97 	bl	8103364 <_Unwind_VRS_Pop>
 8103836:	2800      	cmp	r0, #0
 8103838:	d0d9      	beq.n	81037ee <__gnu_unwind_execute+0xe>
 810383a:	2009      	movs	r0, #9
 810383c:	b005      	add	sp, #20
 810383e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8103842:	f10d 090c 	add.w	r9, sp, #12
 8103846:	2300      	movs	r3, #0
 8103848:	4619      	mov	r1, r3
 810384a:	0087      	lsls	r7, r0, #2
 810384c:	f8cd 9000 	str.w	r9, [sp]
 8103850:	220d      	movs	r2, #13
 8103852:	4628      	mov	r0, r5
 8103854:	f7ff fba8 	bl	8102fa8 <_Unwind_VRS_Get>
 8103858:	b2ff      	uxtb	r7, r7
 810385a:	9b03      	ldr	r3, [sp, #12]
 810385c:	f8cd 9000 	str.w	r9, [sp]
 8103860:	3704      	adds	r7, #4
 8103862:	0660      	lsls	r0, r4, #25
 8103864:	bf4c      	ite	mi
 8103866:	1bdf      	submi	r7, r3, r7
 8103868:	18ff      	addpl	r7, r7, r3
 810386a:	2300      	movs	r3, #0
 810386c:	4619      	mov	r1, r3
 810386e:	220d      	movs	r2, #13
 8103870:	4628      	mov	r0, r5
 8103872:	9703      	str	r7, [sp, #12]
 8103874:	f7ff fbbc 	bl	8102ff0 <_Unwind_VRS_Set>
 8103878:	e7b9      	b.n	81037ee <__gnu_unwind_execute+0xe>
 810387a:	f000 030d 	and.w	r3, r0, #13
 810387e:	2b0d      	cmp	r3, #13
 8103880:	d0db      	beq.n	810383a <__gnu_unwind_execute+0x5a>
 8103882:	af03      	add	r7, sp, #12
 8103884:	2300      	movs	r3, #0
 8103886:	f000 020f 	and.w	r2, r0, #15
 810388a:	4619      	mov	r1, r3
 810388c:	9700      	str	r7, [sp, #0]
 810388e:	4628      	mov	r0, r5
 8103890:	f7ff fb8a 	bl	8102fa8 <_Unwind_VRS_Get>
 8103894:	2300      	movs	r3, #0
 8103896:	9700      	str	r7, [sp, #0]
 8103898:	4619      	mov	r1, r3
 810389a:	220d      	movs	r2, #13
 810389c:	4628      	mov	r0, r5
 810389e:	f7ff fba7 	bl	8102ff0 <_Unwind_VRS_Set>
 81038a2:	e7a4      	b.n	81037ee <__gnu_unwind_execute+0xe>
 81038a4:	4630      	mov	r0, r6
 81038a6:	f7ff ff6f 	bl	8103788 <next_unwind_byte>
 81038aa:	0224      	lsls	r4, r4, #8
 81038ac:	4320      	orrs	r0, r4
 81038ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 81038b2:	d0c2      	beq.n	810383a <__gnu_unwind_execute+0x5a>
 81038b4:	0104      	lsls	r4, r0, #4
 81038b6:	2300      	movs	r3, #0
 81038b8:	b2a2      	uxth	r2, r4
 81038ba:	4619      	mov	r1, r3
 81038bc:	4628      	mov	r0, r5
 81038be:	f7ff fd51 	bl	8103364 <_Unwind_VRS_Pop>
 81038c2:	2800      	cmp	r0, #0
 81038c4:	d1b9      	bne.n	810383a <__gnu_unwind_execute+0x5a>
 81038c6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 81038ca:	bf18      	it	ne
 81038cc:	f04f 0801 	movne.w	r8, #1
 81038d0:	e78d      	b.n	81037ee <__gnu_unwind_execute+0xe>
 81038d2:	43c2      	mvns	r2, r0
 81038d4:	f002 0307 	and.w	r3, r2, #7
 81038d8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 81038dc:	411a      	asrs	r2, r3
 81038de:	0701      	lsls	r1, r0, #28
 81038e0:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 81038e4:	f04f 0300 	mov.w	r3, #0
 81038e8:	bf48      	it	mi
 81038ea:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 81038ee:	4619      	mov	r1, r3
 81038f0:	4628      	mov	r0, r5
 81038f2:	f7ff fd37 	bl	8103364 <_Unwind_VRS_Pop>
 81038f6:	2800      	cmp	r0, #0
 81038f8:	f43f af79 	beq.w	81037ee <__gnu_unwind_execute+0xe>
 81038fc:	e79d      	b.n	810383a <__gnu_unwind_execute+0x5a>
 81038fe:	28b1      	cmp	r0, #177	; 0xb1
 8103900:	d033      	beq.n	810396a <__gnu_unwind_execute+0x18a>
 8103902:	28b2      	cmp	r0, #178	; 0xb2
 8103904:	f000 808b 	beq.w	8103a1e <__gnu_unwind_execute+0x23e>
 8103908:	28b3      	cmp	r0, #179	; 0xb3
 810390a:	d039      	beq.n	8103980 <__gnu_unwind_execute+0x1a0>
 810390c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8103910:	2bb4      	cmp	r3, #180	; 0xb4
 8103912:	d092      	beq.n	810383a <__gnu_unwind_execute+0x5a>
 8103914:	f000 0207 	and.w	r2, r0, #7
 8103918:	3201      	adds	r2, #1
 810391a:	2301      	movs	r3, #1
 810391c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8103920:	4619      	mov	r1, r3
 8103922:	4628      	mov	r0, r5
 8103924:	f7ff fd1e 	bl	8103364 <_Unwind_VRS_Pop>
 8103928:	2800      	cmp	r0, #0
 810392a:	f43f af60 	beq.w	81037ee <__gnu_unwind_execute+0xe>
 810392e:	e784      	b.n	810383a <__gnu_unwind_execute+0x5a>
 8103930:	28c6      	cmp	r0, #198	; 0xc6
 8103932:	d042      	beq.n	81039ba <__gnu_unwind_execute+0x1da>
 8103934:	28c7      	cmp	r0, #199	; 0xc7
 8103936:	d04c      	beq.n	81039d2 <__gnu_unwind_execute+0x1f2>
 8103938:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 810393c:	2bc0      	cmp	r3, #192	; 0xc0
 810393e:	d05b      	beq.n	81039f8 <__gnu_unwind_execute+0x218>
 8103940:	28c8      	cmp	r0, #200	; 0xc8
 8103942:	d060      	beq.n	8103a06 <__gnu_unwind_execute+0x226>
 8103944:	28c9      	cmp	r0, #201	; 0xc9
 8103946:	f47f af78 	bne.w	810383a <__gnu_unwind_execute+0x5a>
 810394a:	4630      	mov	r0, r6
 810394c:	f7ff ff1c 	bl	8103788 <next_unwind_byte>
 8103950:	0302      	lsls	r2, r0, #12
 8103952:	f000 000f 	and.w	r0, r0, #15
 8103956:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 810395a:	3001      	adds	r0, #1
 810395c:	4302      	orrs	r2, r0
 810395e:	e765      	b.n	810382c <__gnu_unwind_execute+0x4c>
 8103960:	f1b8 0f00 	cmp.w	r8, #0
 8103964:	d018      	beq.n	8103998 <__gnu_unwind_execute+0x1b8>
 8103966:	2000      	movs	r0, #0
 8103968:	e768      	b.n	810383c <__gnu_unwind_execute+0x5c>
 810396a:	4630      	mov	r0, r6
 810396c:	f7ff ff0c 	bl	8103788 <next_unwind_byte>
 8103970:	4602      	mov	r2, r0
 8103972:	2800      	cmp	r0, #0
 8103974:	f43f af61 	beq.w	810383a <__gnu_unwind_execute+0x5a>
 8103978:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 810397c:	d0d0      	beq.n	8103920 <__gnu_unwind_execute+0x140>
 810397e:	e75c      	b.n	810383a <__gnu_unwind_execute+0x5a>
 8103980:	4630      	mov	r0, r6
 8103982:	f7ff ff01 	bl	8103788 <next_unwind_byte>
 8103986:	0301      	lsls	r1, r0, #12
 8103988:	f000 000f 	and.w	r0, r0, #15
 810398c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8103990:	1c42      	adds	r2, r0, #1
 8103992:	2301      	movs	r3, #1
 8103994:	430a      	orrs	r2, r1
 8103996:	e7c3      	b.n	8103920 <__gnu_unwind_execute+0x140>
 8103998:	ac03      	add	r4, sp, #12
 810399a:	4643      	mov	r3, r8
 810399c:	220e      	movs	r2, #14
 810399e:	4641      	mov	r1, r8
 81039a0:	9400      	str	r4, [sp, #0]
 81039a2:	4628      	mov	r0, r5
 81039a4:	f7ff fb00 	bl	8102fa8 <_Unwind_VRS_Get>
 81039a8:	9400      	str	r4, [sp, #0]
 81039aa:	4628      	mov	r0, r5
 81039ac:	4643      	mov	r3, r8
 81039ae:	220f      	movs	r2, #15
 81039b0:	4641      	mov	r1, r8
 81039b2:	f7ff fb1d 	bl	8102ff0 <_Unwind_VRS_Set>
 81039b6:	4640      	mov	r0, r8
 81039b8:	e740      	b.n	810383c <__gnu_unwind_execute+0x5c>
 81039ba:	4630      	mov	r0, r6
 81039bc:	f7ff fee4 	bl	8103788 <next_unwind_byte>
 81039c0:	0301      	lsls	r1, r0, #12
 81039c2:	f000 000f 	and.w	r0, r0, #15
 81039c6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 81039ca:	1c42      	adds	r2, r0, #1
 81039cc:	2303      	movs	r3, #3
 81039ce:	430a      	orrs	r2, r1
 81039d0:	e7a6      	b.n	8103920 <__gnu_unwind_execute+0x140>
 81039d2:	4630      	mov	r0, r6
 81039d4:	f7ff fed8 	bl	8103788 <next_unwind_byte>
 81039d8:	4602      	mov	r2, r0
 81039da:	2800      	cmp	r0, #0
 81039dc:	f43f af2d 	beq.w	810383a <__gnu_unwind_execute+0x5a>
 81039e0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 81039e4:	f47f af29 	bne.w	810383a <__gnu_unwind_execute+0x5a>
 81039e8:	2104      	movs	r1, #4
 81039ea:	4628      	mov	r0, r5
 81039ec:	f7ff fcba 	bl	8103364 <_Unwind_VRS_Pop>
 81039f0:	2800      	cmp	r0, #0
 81039f2:	f43f aefc 	beq.w	81037ee <__gnu_unwind_execute+0xe>
 81039f6:	e720      	b.n	810383a <__gnu_unwind_execute+0x5a>
 81039f8:	f000 020f 	and.w	r2, r0, #15
 81039fc:	3201      	adds	r2, #1
 81039fe:	2303      	movs	r3, #3
 8103a00:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8103a04:	e78c      	b.n	8103920 <__gnu_unwind_execute+0x140>
 8103a06:	4630      	mov	r0, r6
 8103a08:	f7ff febe 	bl	8103788 <next_unwind_byte>
 8103a0c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8103a10:	f000 030f 	and.w	r3, r0, #15
 8103a14:	3210      	adds	r2, #16
 8103a16:	3301      	adds	r3, #1
 8103a18:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8103a1c:	e706      	b.n	810382c <__gnu_unwind_execute+0x4c>
 8103a1e:	2300      	movs	r3, #0
 8103a20:	f10d 090c 	add.w	r9, sp, #12
 8103a24:	220d      	movs	r2, #13
 8103a26:	4619      	mov	r1, r3
 8103a28:	f8cd 9000 	str.w	r9, [sp]
 8103a2c:	4628      	mov	r0, r5
 8103a2e:	f7ff fabb 	bl	8102fa8 <_Unwind_VRS_Get>
 8103a32:	4630      	mov	r0, r6
 8103a34:	f7ff fea8 	bl	8103788 <next_unwind_byte>
 8103a38:	0602      	lsls	r2, r0, #24
 8103a3a:	f04f 0702 	mov.w	r7, #2
 8103a3e:	d50c      	bpl.n	8103a5a <__gnu_unwind_execute+0x27a>
 8103a40:	9b03      	ldr	r3, [sp, #12]
 8103a42:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8103a46:	40b8      	lsls	r0, r7
 8103a48:	4403      	add	r3, r0
 8103a4a:	4630      	mov	r0, r6
 8103a4c:	9303      	str	r3, [sp, #12]
 8103a4e:	f7ff fe9b 	bl	8103788 <next_unwind_byte>
 8103a52:	0603      	lsls	r3, r0, #24
 8103a54:	f107 0707 	add.w	r7, r7, #7
 8103a58:	d4f2      	bmi.n	8103a40 <__gnu_unwind_execute+0x260>
 8103a5a:	9b03      	ldr	r3, [sp, #12]
 8103a5c:	f8cd 9000 	str.w	r9, [sp]
 8103a60:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8103a64:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8103a68:	40bc      	lsls	r4, r7
 8103a6a:	2300      	movs	r3, #0
 8103a6c:	4414      	add	r4, r2
 8103a6e:	4619      	mov	r1, r3
 8103a70:	220d      	movs	r2, #13
 8103a72:	4628      	mov	r0, r5
 8103a74:	9403      	str	r4, [sp, #12]
 8103a76:	f7ff fabb 	bl	8102ff0 <_Unwind_VRS_Set>
 8103a7a:	e6b8      	b.n	81037ee <__gnu_unwind_execute+0xe>

08103a7c <__gnu_unwind_frame>:
 8103a7c:	b510      	push	{r4, lr}
 8103a7e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8103a80:	b084      	sub	sp, #16
 8103a82:	6853      	ldr	r3, [r2, #4]
 8103a84:	2403      	movs	r4, #3
 8103a86:	f88d 400c 	strb.w	r4, [sp, #12]
 8103a8a:	021b      	lsls	r3, r3, #8
 8103a8c:	f102 0408 	add.w	r4, r2, #8
 8103a90:	4608      	mov	r0, r1
 8103a92:	79d2      	ldrb	r2, [r2, #7]
 8103a94:	9301      	str	r3, [sp, #4]
 8103a96:	a901      	add	r1, sp, #4
 8103a98:	9402      	str	r4, [sp, #8]
 8103a9a:	f88d 200d 	strb.w	r2, [sp, #13]
 8103a9e:	f7ff fe9f 	bl	81037e0 <__gnu_unwind_execute>
 8103aa2:	b004      	add	sp, #16
 8103aa4:	bd10      	pop	{r4, pc}
 8103aa6:	bf00      	nop

08103aa8 <_Unwind_GetRegionStart>:
 8103aa8:	b508      	push	{r3, lr}
 8103aaa:	f7ff fe97 	bl	81037dc <unwind_UCB_from_context>
 8103aae:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8103ab0:	bd08      	pop	{r3, pc}
 8103ab2:	bf00      	nop

08103ab4 <_Unwind_GetLanguageSpecificData>:
 8103ab4:	b508      	push	{r3, lr}
 8103ab6:	f7ff fe91 	bl	81037dc <unwind_UCB_from_context>
 8103aba:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8103abc:	79c3      	ldrb	r3, [r0, #7]
 8103abe:	3302      	adds	r3, #2
 8103ac0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8103ac4:	bd08      	pop	{r3, pc}
 8103ac6:	bf00      	nop

08103ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8103ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8103b00 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8103acc:	f001 fba0 	bl	8105210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8103ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8103ad2:	e003      	b.n	8103adc <LoopCopyDataInit>

08103ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8103ad4:	4b0b      	ldr	r3, [pc, #44]	; (8103b04 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8103ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8103ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8103ada:	3104      	adds	r1, #4

08103adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8103adc:	480a      	ldr	r0, [pc, #40]	; (8103b08 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8103ade:	4b0b      	ldr	r3, [pc, #44]	; (8103b0c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8103ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8103ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8103ae4:	d3f6      	bcc.n	8103ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8103ae6:	4a0a      	ldr	r2, [pc, #40]	; (8103b10 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8103ae8:	e002      	b.n	8103af0 <LoopFillZerobss>

08103aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8103aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8103aec:	f842 3b04 	str.w	r3, [r2], #4

08103af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8103af0:	4b08      	ldr	r3, [pc, #32]	; (8103b14 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8103af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8103af4:	d3f9      	bcc.n	8103aea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8103af6:	f001 fbcd 	bl	8105294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8103afa:	f000 f839 	bl	8103b70 <main>
  bx  lr    
 8103afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103b00:	10020000 	.word	0x10020000
  ldr  r3, =_sidata
 8103b04:	08105724 	.word	0x08105724
  ldr  r0, =_sdata
 8103b08:	10001800 	.word	0x10001800
  ldr  r3, =_edata
 8103b0c:	10001874 	.word	0x10001874
  ldr  r2, =_sbss
 8103b10:	10001874 	.word	0x10001874
  ldr  r3, = _ebss
 8103b14:	100018fc 	.word	0x100018fc

08103b18 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103b18:	e7fe      	b.n	8103b18 <ADC3_IRQHandler>
	...

08103b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8103b1c:	b480      	push	{r7}
 8103b1e:	b083      	sub	sp, #12
 8103b20:	af00      	add	r7, sp, #0
 8103b22:	4603      	mov	r3, r0
 8103b24:	6039      	str	r1, [r7, #0]
 8103b26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103b28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103b2c:	2b00      	cmp	r3, #0
 8103b2e:	db0a      	blt.n	8103b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103b30:	683b      	ldr	r3, [r7, #0]
 8103b32:	b2da      	uxtb	r2, r3
 8103b34:	490c      	ldr	r1, [pc, #48]	; (8103b68 <__NVIC_SetPriority+0x4c>)
 8103b36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103b3a:	0112      	lsls	r2, r2, #4
 8103b3c:	b2d2      	uxtb	r2, r2
 8103b3e:	440b      	add	r3, r1
 8103b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103b44:	e00a      	b.n	8103b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103b46:	683b      	ldr	r3, [r7, #0]
 8103b48:	b2da      	uxtb	r2, r3
 8103b4a:	4908      	ldr	r1, [pc, #32]	; (8103b6c <__NVIC_SetPriority+0x50>)
 8103b4c:	88fb      	ldrh	r3, [r7, #6]
 8103b4e:	f003 030f 	and.w	r3, r3, #15
 8103b52:	3b04      	subs	r3, #4
 8103b54:	0112      	lsls	r2, r2, #4
 8103b56:	b2d2      	uxtb	r2, r2
 8103b58:	440b      	add	r3, r1
 8103b5a:	761a      	strb	r2, [r3, #24]
}
 8103b5c:	bf00      	nop
 8103b5e:	370c      	adds	r7, #12
 8103b60:	46bd      	mov	sp, r7
 8103b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b66:	4770      	bx	lr
 8103b68:	e000e100 	.word	0xe000e100
 8103b6c:	e000ed00 	.word	0xe000ed00

08103b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8103b70:	b580      	push	{r7, lr}
 8103b72:	b082      	sub	sp, #8
 8103b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	cosmosApi_boot();
 8103b76:	f000 f97b 	bl	8103e70 <osBoot_boot>
	NVIC_SetPriority(SVCall_IRQn,3);
 8103b7a:	2103      	movs	r1, #3
 8103b7c:	f06f 0004 	mvn.w	r0, #4
 8103b80:	f7ff ffcc 	bl	8103b1c <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn,4);
 8103b84:	2104      	movs	r1, #4
 8103b86:	f06f 0001 	mvn.w	r0, #1
 8103b8a:	f7ff ffc7 	bl	8103b1c <__NVIC_SetPriority>
  NVIC_SetPriority (SysTick_IRQn, 0);         /* set Priority for Systick Interrupt */
 8103b8e:	2100      	movs	r1, #0
 8103b90:	f04f 30ff 	mov.w	r0, #4294967295
 8103b94:	f7ff ffc2 	bl	8103b1c <__NVIC_SetPriority>
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8103b98:	4b1e      	ldr	r3, [pc, #120]	; (8103c14 <main+0xa4>)
 8103b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103b9e:	4a1d      	ldr	r2, [pc, #116]	; (8103c14 <main+0xa4>)
 8103ba0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103ba8:	4b1a      	ldr	r3, [pc, #104]	; (8103c14 <main+0xa4>)
 8103baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103bb2:	607b      	str	r3, [r7, #4]
 8103bb4:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8103bb6:	2001      	movs	r0, #1
 8103bb8:	f000 fdf4 	bl	81047a4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8103bbc:	f000 fe7e 	bl	81048bc <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8103bc0:	2201      	movs	r2, #1
 8103bc2:	2102      	movs	r1, #2
 8103bc4:	2000      	movs	r0, #0
 8103bc6:	f000 fdff 	bl	81047c8 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8103bca:	4b13      	ldr	r3, [pc, #76]	; (8103c18 <main+0xa8>)
 8103bcc:	681b      	ldr	r3, [r3, #0]
 8103bce:	091b      	lsrs	r3, r3, #4
 8103bd0:	f003 030f 	and.w	r3, r3, #15
 8103bd4:	2b07      	cmp	r3, #7
 8103bd6:	d108      	bne.n	8103bea <main+0x7a>
 8103bd8:	4b10      	ldr	r3, [pc, #64]	; (8103c1c <main+0xac>)
 8103bda:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8103bde:	4a0f      	ldr	r2, [pc, #60]	; (8103c1c <main+0xac>)
 8103be0:	f043 0301 	orr.w	r3, r3, #1
 8103be4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8103be8:	e007      	b.n	8103bfa <main+0x8a>
 8103bea:	4b0c      	ldr	r3, [pc, #48]	; (8103c1c <main+0xac>)
 8103bec:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8103bf0:	4a0a      	ldr	r2, [pc, #40]	; (8103c1c <main+0xac>)
 8103bf2:	f043 0301 	orr.w	r3, r3, #1
 8103bf6:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8103bfa:	f000 fa0d 	bl	8104018 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8103bfe:	f000 f829 	bl	8103c54 <MX_GPIO_Init>
  MX_DMA_Init();
 8103c02:	f000 f80d 	bl	8103c20 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
	cosmosApi_osInit_init();
 8103c06:	200d      	movs	r0, #13
 8103c08:	f7fe fac4 	bl	8102194 <sysCalls_os>
	cosmosApi_os_start();
 8103c0c:	200e      	movs	r0, #14
 8103c0e:	f7fe fac1 	bl	8102194 <sysCalls_os>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8103c12:	e7fe      	b.n	8103c12 <main+0xa2>
 8103c14:	58024400 	.word	0x58024400
 8103c18:	e000ed00 	.word	0xe000ed00
 8103c1c:	58026400 	.word	0x58026400

08103c20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8103c20:	b480      	push	{r7}
 8103c22:	b083      	sub	sp, #12
 8103c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8103c26:	4b0a      	ldr	r3, [pc, #40]	; (8103c50 <MX_DMA_Init+0x30>)
 8103c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103c2c:	4a08      	ldr	r2, [pc, #32]	; (8103c50 <MX_DMA_Init+0x30>)
 8103c2e:	f043 0301 	orr.w	r3, r3, #1
 8103c32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8103c36:	4b06      	ldr	r3, [pc, #24]	; (8103c50 <MX_DMA_Init+0x30>)
 8103c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103c3c:	f003 0301 	and.w	r3, r3, #1
 8103c40:	607b      	str	r3, [r7, #4]
 8103c42:	687b      	ldr	r3, [r7, #4]

}
 8103c44:	bf00      	nop
 8103c46:	370c      	adds	r7, #12
 8103c48:	46bd      	mov	sp, r7
 8103c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c4e:	4770      	bx	lr
 8103c50:	58024400 	.word	0x58024400

08103c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8103c54:	b580      	push	{r7, lr}
 8103c56:	b088      	sub	sp, #32
 8103c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8103c5a:	f107 030c 	add.w	r3, r7, #12
 8103c5e:	2200      	movs	r2, #0
 8103c60:	601a      	str	r2, [r3, #0]
 8103c62:	605a      	str	r2, [r3, #4]
 8103c64:	609a      	str	r2, [r3, #8]
 8103c66:	60da      	str	r2, [r3, #12]
 8103c68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8103c6a:	4b24      	ldr	r3, [pc, #144]	; (8103cfc <MX_GPIO_Init+0xa8>)
 8103c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103c70:	4a22      	ldr	r2, [pc, #136]	; (8103cfc <MX_GPIO_Init+0xa8>)
 8103c72:	f043 0301 	orr.w	r3, r3, #1
 8103c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103c7a:	4b20      	ldr	r3, [pc, #128]	; (8103cfc <MX_GPIO_Init+0xa8>)
 8103c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103c80:	f003 0301 	and.w	r3, r3, #1
 8103c84:	60bb      	str	r3, [r7, #8]
 8103c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8103c88:	4b1c      	ldr	r3, [pc, #112]	; (8103cfc <MX_GPIO_Init+0xa8>)
 8103c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103c8e:	4a1b      	ldr	r2, [pc, #108]	; (8103cfc <MX_GPIO_Init+0xa8>)
 8103c90:	f043 0302 	orr.w	r3, r3, #2
 8103c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103c98:	4b18      	ldr	r3, [pc, #96]	; (8103cfc <MX_GPIO_Init+0xa8>)
 8103c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103c9e:	f003 0302 	and.w	r3, r3, #2
 8103ca2:	607b      	str	r3, [r7, #4]
 8103ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8103ca6:	2200      	movs	r2, #0
 8103ca8:	2110      	movs	r1, #16
 8103caa:	4815      	ldr	r0, [pc, #84]	; (8103d00 <MX_GPIO_Init+0xac>)
 8103cac:	f000 fd46 	bl	810473c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8103cb0:	2200      	movs	r2, #0
 8103cb2:	2101      	movs	r1, #1
 8103cb4:	4813      	ldr	r0, [pc, #76]	; (8103d04 <MX_GPIO_Init+0xb0>)
 8103cb6:	f000 fd41 	bl	810473c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8103cba:	2310      	movs	r3, #16
 8103cbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8103cbe:	2301      	movs	r3, #1
 8103cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103cc2:	2300      	movs	r3, #0
 8103cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103cc6:	2303      	movs	r3, #3
 8103cc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103cca:	f107 030c 	add.w	r3, r7, #12
 8103cce:	4619      	mov	r1, r3
 8103cd0:	480b      	ldr	r0, [pc, #44]	; (8103d00 <MX_GPIO_Init+0xac>)
 8103cd2:	f000 fb83 	bl	81043dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8103cd6:	2301      	movs	r3, #1
 8103cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8103cda:	2301      	movs	r3, #1
 8103cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103cde:	2300      	movs	r3, #0
 8103ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8103ce2:	2303      	movs	r3, #3
 8103ce4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8103ce6:	f107 030c 	add.w	r3, r7, #12
 8103cea:	4619      	mov	r1, r3
 8103cec:	4805      	ldr	r0, [pc, #20]	; (8103d04 <MX_GPIO_Init+0xb0>)
 8103cee:	f000 fb75 	bl	81043dc <HAL_GPIO_Init>

}
 8103cf2:	bf00      	nop
 8103cf4:	3720      	adds	r7, #32
 8103cf6:	46bd      	mov	sp, r7
 8103cf8:	bd80      	pop	{r7, pc}
 8103cfa:	bf00      	nop
 8103cfc:	58024400 	.word	0x58024400
 8103d00:	58020000 	.word	0x58020000
 8103d04:	58020400 	.word	0x58020400

08103d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8103d08:	b580      	push	{r7, lr}
 8103d0a:	b082      	sub	sp, #8
 8103d0c:	af00      	add	r7, sp, #0
 8103d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8103d10:	687b      	ldr	r3, [r7, #4]
 8103d12:	681b      	ldr	r3, [r3, #0]
 8103d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103d18:	d101      	bne.n	8103d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8103d1a:	f000 f9db 	bl	81040d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8103d1e:	bf00      	nop
 8103d20:	3708      	adds	r7, #8
 8103d22:	46bd      	mov	sp, r7
 8103d24:	bd80      	pop	{r7, pc}
	...

08103d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8103d28:	b480      	push	{r7}
 8103d2a:	b083      	sub	sp, #12
 8103d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8103d2e:	4b0a      	ldr	r3, [pc, #40]	; (8103d58 <HAL_MspInit+0x30>)
 8103d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103d34:	4a08      	ldr	r2, [pc, #32]	; (8103d58 <HAL_MspInit+0x30>)
 8103d36:	f043 0302 	orr.w	r3, r3, #2
 8103d3a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8103d3e:	4b06      	ldr	r3, [pc, #24]	; (8103d58 <HAL_MspInit+0x30>)
 8103d40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103d44:	f003 0302 	and.w	r3, r3, #2
 8103d48:	607b      	str	r3, [r7, #4]
 8103d4a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8103d4c:	bf00      	nop
 8103d4e:	370c      	adds	r7, #12
 8103d50:	46bd      	mov	sp, r7
 8103d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d56:	4770      	bx	lr
 8103d58:	58024400 	.word	0x58024400

08103d5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8103d5c:	b580      	push	{r7, lr}
 8103d5e:	b090      	sub	sp, #64	; 0x40
 8103d60:	af00      	add	r7, sp, #0
 8103d62:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	2b0f      	cmp	r3, #15
 8103d68:	d827      	bhi.n	8103dba <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 8103d6a:	2200      	movs	r2, #0
 8103d6c:	6879      	ldr	r1, [r7, #4]
 8103d6e:	201c      	movs	r0, #28
 8103d70:	f000 fa7c 	bl	810426c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8103d74:	201c      	movs	r0, #28
 8103d76:	f000 fa93 	bl	81042a0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8103d7a:	4a29      	ldr	r2, [pc, #164]	; (8103e20 <HAL_InitTick+0xc4>)
 8103d7c:	687b      	ldr	r3, [r7, #4]
 8103d7e:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8103d80:	4b28      	ldr	r3, [pc, #160]	; (8103e24 <HAL_InitTick+0xc8>)
 8103d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103d86:	4a27      	ldr	r2, [pc, #156]	; (8103e24 <HAL_InitTick+0xc8>)
 8103d88:	f043 0301 	orr.w	r3, r3, #1
 8103d8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8103d90:	4b24      	ldr	r3, [pc, #144]	; (8103e24 <HAL_InitTick+0xc8>)
 8103d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103d96:	f003 0301 	and.w	r3, r3, #1
 8103d9a:	60fb      	str	r3, [r7, #12]
 8103d9c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8103d9e:	f107 0210 	add.w	r2, r7, #16
 8103da2:	f107 0314 	add.w	r3, r7, #20
 8103da6:	4611      	mov	r1, r2
 8103da8:	4618      	mov	r0, r3
 8103daa:	f000 ff57 	bl	8104c5c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8103dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103db0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8103db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103db4:	2b00      	cmp	r3, #0
 8103db6:	d106      	bne.n	8103dc6 <HAL_InitTick+0x6a>
 8103db8:	e001      	b.n	8103dbe <HAL_InitTick+0x62>
    return HAL_ERROR;
 8103dba:	2301      	movs	r3, #1
 8103dbc:	e02c      	b.n	8103e18 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8103dbe:	f000 ff37 	bl	8104c30 <HAL_RCC_GetPCLK1Freq>
 8103dc2:	63f8      	str	r0, [r7, #60]	; 0x3c
 8103dc4:	e004      	b.n	8103dd0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8103dc6:	f000 ff33 	bl	8104c30 <HAL_RCC_GetPCLK1Freq>
 8103dca:	4603      	mov	r3, r0
 8103dcc:	005b      	lsls	r3, r3, #1
 8103dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8103dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103dd2:	4a15      	ldr	r2, [pc, #84]	; (8103e28 <HAL_InitTick+0xcc>)
 8103dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8103dd8:	0c9b      	lsrs	r3, r3, #18
 8103dda:	3b01      	subs	r3, #1
 8103ddc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8103dde:	4b13      	ldr	r3, [pc, #76]	; (8103e2c <HAL_InitTick+0xd0>)
 8103de0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8103de4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8103de6:	4b11      	ldr	r3, [pc, #68]	; (8103e2c <HAL_InitTick+0xd0>)
 8103de8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8103dec:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8103dee:	4a0f      	ldr	r2, [pc, #60]	; (8103e2c <HAL_InitTick+0xd0>)
 8103df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103df2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8103df4:	4b0d      	ldr	r3, [pc, #52]	; (8103e2c <HAL_InitTick+0xd0>)
 8103df6:	2200      	movs	r2, #0
 8103df8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8103dfa:	4b0c      	ldr	r3, [pc, #48]	; (8103e2c <HAL_InitTick+0xd0>)
 8103dfc:	2200      	movs	r2, #0
 8103dfe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8103e00:	480a      	ldr	r0, [pc, #40]	; (8103e2c <HAL_InitTick+0xd0>)
 8103e02:	f000 ff6d 	bl	8104ce0 <HAL_TIM_Base_Init>
 8103e06:	4603      	mov	r3, r0
 8103e08:	2b00      	cmp	r3, #0
 8103e0a:	d104      	bne.n	8103e16 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8103e0c:	4807      	ldr	r0, [pc, #28]	; (8103e2c <HAL_InitTick+0xd0>)
 8103e0e:	f000 ffc9 	bl	8104da4 <HAL_TIM_Base_Start_IT>
 8103e12:	4603      	mov	r3, r0
 8103e14:	e000      	b.n	8103e18 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8103e16:	2301      	movs	r3, #1
}
 8103e18:	4618      	mov	r0, r3
 8103e1a:	3740      	adds	r7, #64	; 0x40
 8103e1c:	46bd      	mov	sp, r7
 8103e1e:	bd80      	pop	{r7, pc}
 8103e20:	10001800 	.word	0x10001800
 8103e24:	58024400 	.word	0x58024400
 8103e28:	431bde83 	.word	0x431bde83
 8103e2c:	1000189c 	.word	0x1000189c

08103e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8103e30:	b480      	push	{r7}
 8103e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8103e34:	e7fe      	b.n	8103e34 <NMI_Handler+0x4>

08103e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8103e36:	b480      	push	{r7}
 8103e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8103e3a:	e7fe      	b.n	8103e3a <HardFault_Handler+0x4>

08103e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8103e3c:	b480      	push	{r7}
 8103e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8103e40:	e7fe      	b.n	8103e40 <MemManage_Handler+0x4>

08103e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8103e42:	b480      	push	{r7}
 8103e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8103e46:	e7fe      	b.n	8103e46 <BusFault_Handler+0x4>

08103e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8103e48:	b480      	push	{r7}
 8103e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8103e4c:	e7fe      	b.n	8103e4c <UsageFault_Handler+0x4>

08103e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8103e4e:	b480      	push	{r7}
 8103e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8103e52:	bf00      	nop
 8103e54:	46bd      	mov	sp, r7
 8103e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e5a:	4770      	bx	lr

08103e5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8103e5c:	b580      	push	{r7, lr}
 8103e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8103e60:	4802      	ldr	r0, [pc, #8]	; (8103e6c <TIM2_IRQHandler+0x10>)
 8103e62:	f000 ffd5 	bl	8104e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8103e66:	bf00      	nop
 8103e68:	bd80      	pop	{r7, pc}
 8103e6a:	bf00      	nop
 8103e6c:	1000189c 	.word	0x1000189c

08103e70 <osBoot_boot>:
{
 8103e70:	b580      	push	{r7, lr}
 8103e72:	b08c      	sub	sp, #48	; 0x30
 8103e74:	af00      	add	r7, sp, #0
	coreId = CILcore_getCoreId();
 8103e76:	f7fe fa2c 	bl	81022d2 <CILcore_getCoreId>
 8103e7a:	62b8      	str	r0, [r7, #40]	; 0x28
	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 8103e7c:	4a29      	ldr	r2, [pc, #164]	; (8103f24 <osBoot_boot+0xb4>)
 8103e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8103e84:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 8103e86:	4a27      	ldr	r2, [pc, #156]	; (8103f24 <osBoot_boot+0xb4>)
 8103e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e8a:	00db      	lsls	r3, r3, #3
 8103e8c:	4413      	add	r3, r2
 8103e8e:	685b      	ldr	r3, [r3, #4]
 8103e90:	623b      	str	r3, [r7, #32]
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8103e92:	2300      	movs	r3, #0
 8103e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8103e96:	e03c      	b.n	8103f12 <osBoot_boot+0xa2>
		osBoot_bootSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 8103e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103e9a:	4613      	mov	r3, r2
 8103e9c:	005b      	lsls	r3, r3, #1
 8103e9e:	4413      	add	r3, r2
 8103ea0:	009b      	lsls	r3, r3, #2
 8103ea2:	461a      	mov	r2, r3
 8103ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103ea6:	4413      	add	r3, r2
 8103ea8:	6818      	ldr	r0, [r3, #0]
 8103eaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103eac:	4613      	mov	r3, r2
 8103eae:	005b      	lsls	r3, r3, #1
 8103eb0:	4413      	add	r3, r2
 8103eb2:	009b      	lsls	r3, r3, #2
 8103eb4:	461a      	mov	r2, r3
 8103eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103eb8:	4413      	add	r3, r2
 8103eba:	6859      	ldr	r1, [r3, #4]
 8103ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103ebe:	4613      	mov	r3, r2
 8103ec0:	005b      	lsls	r3, r3, #1
 8103ec2:	4413      	add	r3, r2
 8103ec4:	009b      	lsls	r3, r3, #2
 8103ec6:	461a      	mov	r2, r3
 8103ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103eca:	4413      	add	r3, r2
 8103ecc:	689b      	ldr	r3, [r3, #8]
 8103ece:	61f8      	str	r0, [r7, #28]
 8103ed0:	61b9      	str	r1, [r7, #24]
 8103ed2:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8103ed4:	69ba      	ldr	r2, [r7, #24]
 8103ed6:	69fb      	ldr	r3, [r7, #28]
 8103ed8:	1ad3      	subs	r3, r2, r3
 8103eda:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 8103edc:	69fb      	ldr	r3, [r7, #28]
 8103ede:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 8103ee0:	697b      	ldr	r3, [r7, #20]
 8103ee2:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8103ee4:	2300      	movs	r3, #0
 8103ee6:	607b      	str	r3, [r7, #4]
 8103ee8:	e00a      	b.n	8103f00 <osBoot_boot+0x90>
		*pDst++=*pSrc++;
 8103eea:	68ba      	ldr	r2, [r7, #8]
 8103eec:	1c53      	adds	r3, r2, #1
 8103eee:	60bb      	str	r3, [r7, #8]
 8103ef0:	68fb      	ldr	r3, [r7, #12]
 8103ef2:	1c59      	adds	r1, r3, #1
 8103ef4:	60f9      	str	r1, [r7, #12]
 8103ef6:	7812      	ldrb	r2, [r2, #0]
 8103ef8:	701a      	strb	r2, [r3, #0]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8103efa:	687b      	ldr	r3, [r7, #4]
 8103efc:	3301      	adds	r3, #1
 8103efe:	607b      	str	r3, [r7, #4]
 8103f00:	693b      	ldr	r3, [r7, #16]
 8103f02:	009b      	lsls	r3, r3, #2
 8103f04:	687a      	ldr	r2, [r7, #4]
 8103f06:	429a      	cmp	r2, r3
 8103f08:	d3ef      	bcc.n	8103eea <osBoot_boot+0x7a>
}
 8103f0a:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8103f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103f0e:	3301      	adds	r3, #1
 8103f10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8103f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103f14:	6a3b      	ldr	r3, [r7, #32]
 8103f16:	429a      	cmp	r2, r3
 8103f18:	d3be      	bcc.n	8103e98 <osBoot_boot+0x28>
};
 8103f1a:	bf00      	nop
 8103f1c:	bf00      	nop
 8103f1e:	3730      	adds	r7, #48	; 0x30
 8103f20:	46bd      	mov	sp, r7
 8103f22:	bd80      	pop	{r7, pc}
 8103f24:	08105590 	.word	0x08105590

08103f28 <_sbrk>:
  *
  * @param[in]  int incr
  *
  * @return char *
********************************************************************************/
char * _sbrk(int incr){
 8103f28:	b580      	push	{r7, lr}
 8103f2a:	b084      	sub	sp, #16
 8103f2c:	af00      	add	r7, sp, #0
 8103f2e:	6078      	str	r0, [r7, #4]

	AddressType address;


	address = sysCalls_readWrite(SYSCALL_MEMORYMANAGER_SBRK,incr,OFF);
 8103f30:	687b      	ldr	r3, [r7, #4]
 8103f32:	2200      	movs	r2, #0
 8103f34:	4619      	mov	r1, r3
 8103f36:	2013      	movs	r0, #19
 8103f38:	f7fe f937 	bl	81021aa <sysCalls_readWrite>
 8103f3c:	60f8      	str	r0, [r7, #12]

	return (char *) address;
 8103f3e:	68fb      	ldr	r3, [r7, #12]
};
 8103f40:	4618      	mov	r0, r3
 8103f42:	3710      	adds	r7, #16
 8103f44:	46bd      	mov	sp, r7
 8103f46:	bd80      	pop	{r7, pc}

08103f48 <_getpid>:

int _gettimeofday (void* tp, void* tzp) {
	return 0;
}

int _getpid(void) {
 8103f48:	b480      	push	{r7}
 8103f4a:	af00      	add	r7, sp, #0
	return 1;
 8103f4c:	2301      	movs	r3, #1
}
 8103f4e:	4618      	mov	r0, r3
 8103f50:	46bd      	mov	sp, r7
 8103f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f56:	4770      	bx	lr

08103f58 <_kill>:

int _kill(int pid, int sig) {
 8103f58:	b480      	push	{r7}
 8103f5a:	b083      	sub	sp, #12
 8103f5c:	af00      	add	r7, sp, #0
 8103f5e:	6078      	str	r0, [r7, #4]
 8103f60:	6039      	str	r1, [r7, #0]
	return 0;
 8103f62:	2300      	movs	r3, #0
}
 8103f64:	4618      	mov	r0, r3
 8103f66:	370c      	adds	r7, #12
 8103f68:	46bd      	mov	sp, r7
 8103f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f6e:	4770      	bx	lr

08103f70 <_exit>:

void _exit (int status) {
 8103f70:	b580      	push	{r7, lr}
 8103f72:	b082      	sub	sp, #8
 8103f74:	af00      	add	r7, sp, #0
 8103f76:	6078      	str	r0, [r7, #4]
	_kill(status, 0);
 8103f78:	2100      	movs	r1, #0
 8103f7a:	6878      	ldr	r0, [r7, #4]
 8103f7c:	f7ff ffec 	bl	8103f58 <_kill>
	while (1) {}
 8103f80:	e7fe      	b.n	8103f80 <_exit+0x10>

08103f82 <interrupt_enableInterrupts>:
  * @param[in] none
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_enableInterrupts(void)
{
 8103f82:	b480      	push	{r7}
 8103f84:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8103f86:	b662      	cpsie	i
}
 8103f88:	bf00      	nop
 8103f8a:	bf00      	nop
	CILinterrupt_enableInterrupts();
}
 8103f8c:	bf00      	nop
 8103f8e:	46bd      	mov	sp, r7
 8103f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f94:	4770      	bx	lr

08103f96 <interrupt_disableInterrupts>:
  * @param[in]  none
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_disableInterrupts(void)
{
 8103f96:	b480      	push	{r7}
 8103f98:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8103f9a:	b672      	cpsid	i
}
 8103f9c:	bf00      	nop
}
 8103f9e:	bf00      	nop
	CILinterrupt_disableInterrupts();
}
 8103fa0:	bf00      	nop
 8103fa2:	46bd      	mov	sp, r7
 8103fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fa8:	4770      	bx	lr

08103faa <PendSV_Handler>:
/********************************************************************************
**                        Function Definitions | Start                         **
********************************************************************************/
__NAKED void PendSV_Handler(void)
{
    __asm volatile ("MRS R0,PSP");
 8103faa:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("ISB");
 8103fae:	f3bf 8f6f 	isb	sy

    __asm volatile ("TST R14, #16");
 8103fb2:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 8103fb6:	bf08      	it	eq
    __asm volatile ("VSTMDBEQ R0!,{S16-S31}"); /* If fp is true save floating point registers on stack */
 8103fb8:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    __asm volatile ("STMDB R0!,{R4-R8,R10,R11,R14}");
 8103fbc:	e920 4df0 	stmdb	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}

    __asm volatile ("BL scheduler_scheduleNextInstance");
 8103fc0:	f7fd fcd1 	bl	8101966 <scheduler_scheduleNextInstance>
    __asm volatile ("ISB");
 8103fc4:	f3bf 8f6f 	isb	sy

    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8103fc8:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
    __asm volatile ("TST R14, #16");
 8103fcc:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 8103fd0:	bf08      	it	eq
    __asm volatile ("VLDMIAEQ R0!,{S16-S31}"); /* If fp is true restore floating point registers on stack */
 8103fd2:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    __asm volatile ("MSR PSP,R0");
 8103fd6:	f380 8809 	msr	PSP, r0
    __asm volatile ("ISB");
 8103fda:	f3bf 8f6f 	isb	sy

    __asm volatile ("BX R14");
 8103fde:	4770      	bx	lr
}
 8103fe0:	bf00      	nop
	...

08103fe4 <SysTick_Handler>:

void SysTick_Handler(){
 8103fe4:	b480      	push	{r7}
 8103fe6:	af00      	add	r7, sp, #0
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8103fe8:	4b05      	ldr	r3, [pc, #20]	; (8104000 <SysTick_Handler+0x1c>)
 8103fea:	685b      	ldr	r3, [r3, #4]
 8103fec:	4a04      	ldr	r2, [pc, #16]	; (8104000 <SysTick_Handler+0x1c>)
 8103fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103ff2:	6053      	str	r3, [r2, #4]
}
 8103ff4:	bf00      	nop
 8103ff6:	46bd      	mov	sp, r7
 8103ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ffc:	4770      	bx	lr
 8103ffe:	bf00      	nop
 8104000:	e000ed00 	.word	0xe000ed00

08104004 <SVC_Handler>:

__NAKED void SVC_Handler( void )
{
    __asm volatile ("TST LR, #4");
 8104004:	f01e 0f04 	tst.w	lr, #4
    __asm volatile ("ITE EQ");
 8104008:	bf0c      	ite	eq
    __asm volatile ("MRSEQ r0, MSP");
 810400a:	f3ef 8008 	mrseq	r0, MSP
    __asm volatile ("MRSNE r0, PSP");
 810400e:	f3ef 8009 	mrsne	r0, PSP
    __asm volatile ( "B CILsysCalls_dispatcher");
 8104012:	f7fe bbf6 	b.w	8102802 <CILsysCalls_dispatcher>
}
 8104016:	bf00      	nop

08104018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8104018:	b580      	push	{r7, lr}
 810401a:	b082      	sub	sp, #8
 810401c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810401e:	4b28      	ldr	r3, [pc, #160]	; (81040c0 <HAL_Init+0xa8>)
 8104020:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8104024:	4a26      	ldr	r2, [pc, #152]	; (81040c0 <HAL_Init+0xa8>)
 8104026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810402a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810402e:	4b24      	ldr	r3, [pc, #144]	; (81040c0 <HAL_Init+0xa8>)
 8104030:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8104034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104038:	603b      	str	r3, [r7, #0]
 810403a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810403c:	4b21      	ldr	r3, [pc, #132]	; (81040c4 <HAL_Init+0xac>)
 810403e:	681b      	ldr	r3, [r3, #0]
 8104040:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8104044:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8104048:	4a1e      	ldr	r2, [pc, #120]	; (81040c4 <HAL_Init+0xac>)
 810404a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810404e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8104050:	4b1c      	ldr	r3, [pc, #112]	; (81040c4 <HAL_Init+0xac>)
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	4a1b      	ldr	r2, [pc, #108]	; (81040c4 <HAL_Init+0xac>)
 8104056:	f043 0301 	orr.w	r3, r3, #1
 810405a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810405c:	2003      	movs	r0, #3
 810405e:	f000 f8fa 	bl	8104256 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8104062:	f000 fc39 	bl	81048d8 <HAL_RCC_GetSysClockFreq>
 8104066:	4602      	mov	r2, r0
 8104068:	4b15      	ldr	r3, [pc, #84]	; (81040c0 <HAL_Init+0xa8>)
 810406a:	699b      	ldr	r3, [r3, #24]
 810406c:	0a1b      	lsrs	r3, r3, #8
 810406e:	f003 030f 	and.w	r3, r3, #15
 8104072:	4915      	ldr	r1, [pc, #84]	; (81040c8 <HAL_Init+0xb0>)
 8104074:	5ccb      	ldrb	r3, [r1, r3]
 8104076:	f003 031f 	and.w	r3, r3, #31
 810407a:	fa22 f303 	lsr.w	r3, r2, r3
 810407e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104080:	4b0f      	ldr	r3, [pc, #60]	; (81040c0 <HAL_Init+0xa8>)
 8104082:	699b      	ldr	r3, [r3, #24]
 8104084:	f003 030f 	and.w	r3, r3, #15
 8104088:	4a0f      	ldr	r2, [pc, #60]	; (81040c8 <HAL_Init+0xb0>)
 810408a:	5cd3      	ldrb	r3, [r2, r3]
 810408c:	f003 031f 	and.w	r3, r3, #31
 8104090:	687a      	ldr	r2, [r7, #4]
 8104092:	fa22 f303 	lsr.w	r3, r2, r3
 8104096:	4a0d      	ldr	r2, [pc, #52]	; (81040cc <HAL_Init+0xb4>)
 8104098:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810409a:	4b0c      	ldr	r3, [pc, #48]	; (81040cc <HAL_Init+0xb4>)
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	4a0c      	ldr	r2, [pc, #48]	; (81040d0 <HAL_Init+0xb8>)
 81040a0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81040a2:	2000      	movs	r0, #0
 81040a4:	f7ff fe5a 	bl	8103d5c <HAL_InitTick>
 81040a8:	4603      	mov	r3, r0
 81040aa:	2b00      	cmp	r3, #0
 81040ac:	d001      	beq.n	81040b2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81040ae:	2301      	movs	r3, #1
 81040b0:	e002      	b.n	81040b8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81040b2:	f7ff fe39 	bl	8103d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81040b6:	2300      	movs	r3, #0
}
 81040b8:	4618      	mov	r0, r3
 81040ba:	3708      	adds	r7, #8
 81040bc:	46bd      	mov	sp, r7
 81040be:	bd80      	pop	{r7, pc}
 81040c0:	58024400 	.word	0x58024400
 81040c4:	40024400 	.word	0x40024400
 81040c8:	08105620 	.word	0x08105620
 81040cc:	1000180c 	.word	0x1000180c
 81040d0:	10001808 	.word	0x10001808

081040d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81040d4:	b480      	push	{r7}
 81040d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81040d8:	4b06      	ldr	r3, [pc, #24]	; (81040f4 <HAL_IncTick+0x20>)
 81040da:	781b      	ldrb	r3, [r3, #0]
 81040dc:	461a      	mov	r2, r3
 81040de:	4b06      	ldr	r3, [pc, #24]	; (81040f8 <HAL_IncTick+0x24>)
 81040e0:	681b      	ldr	r3, [r3, #0]
 81040e2:	4413      	add	r3, r2
 81040e4:	4a04      	ldr	r2, [pc, #16]	; (81040f8 <HAL_IncTick+0x24>)
 81040e6:	6013      	str	r3, [r2, #0]
}
 81040e8:	bf00      	nop
 81040ea:	46bd      	mov	sp, r7
 81040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040f0:	4770      	bx	lr
 81040f2:	bf00      	nop
 81040f4:	10001804 	.word	0x10001804
 81040f8:	100018e8 	.word	0x100018e8

081040fc <__NVIC_SetPriorityGrouping>:
{
 81040fc:	b480      	push	{r7}
 81040fe:	b085      	sub	sp, #20
 8104100:	af00      	add	r7, sp, #0
 8104102:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8104104:	687b      	ldr	r3, [r7, #4]
 8104106:	f003 0307 	and.w	r3, r3, #7
 810410a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810410c:	4b0c      	ldr	r3, [pc, #48]	; (8104140 <__NVIC_SetPriorityGrouping+0x44>)
 810410e:	68db      	ldr	r3, [r3, #12]
 8104110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8104112:	68ba      	ldr	r2, [r7, #8]
 8104114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8104118:	4013      	ands	r3, r2
 810411a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810411c:	68fb      	ldr	r3, [r7, #12]
 810411e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8104120:	68bb      	ldr	r3, [r7, #8]
 8104122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8104124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8104128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810412c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810412e:	4a04      	ldr	r2, [pc, #16]	; (8104140 <__NVIC_SetPriorityGrouping+0x44>)
 8104130:	68bb      	ldr	r3, [r7, #8]
 8104132:	60d3      	str	r3, [r2, #12]
}
 8104134:	bf00      	nop
 8104136:	3714      	adds	r7, #20
 8104138:	46bd      	mov	sp, r7
 810413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810413e:	4770      	bx	lr
 8104140:	e000ed00 	.word	0xe000ed00

08104144 <__NVIC_GetPriorityGrouping>:
{
 8104144:	b480      	push	{r7}
 8104146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104148:	4b04      	ldr	r3, [pc, #16]	; (810415c <__NVIC_GetPriorityGrouping+0x18>)
 810414a:	68db      	ldr	r3, [r3, #12]
 810414c:	0a1b      	lsrs	r3, r3, #8
 810414e:	f003 0307 	and.w	r3, r3, #7
}
 8104152:	4618      	mov	r0, r3
 8104154:	46bd      	mov	sp, r7
 8104156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810415a:	4770      	bx	lr
 810415c:	e000ed00 	.word	0xe000ed00

08104160 <__NVIC_EnableIRQ>:
{
 8104160:	b480      	push	{r7}
 8104162:	b083      	sub	sp, #12
 8104164:	af00      	add	r7, sp, #0
 8104166:	4603      	mov	r3, r0
 8104168:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810416a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810416e:	2b00      	cmp	r3, #0
 8104170:	db0b      	blt.n	810418a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8104172:	88fb      	ldrh	r3, [r7, #6]
 8104174:	f003 021f 	and.w	r2, r3, #31
 8104178:	4907      	ldr	r1, [pc, #28]	; (8104198 <__NVIC_EnableIRQ+0x38>)
 810417a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810417e:	095b      	lsrs	r3, r3, #5
 8104180:	2001      	movs	r0, #1
 8104182:	fa00 f202 	lsl.w	r2, r0, r2
 8104186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 810418a:	bf00      	nop
 810418c:	370c      	adds	r7, #12
 810418e:	46bd      	mov	sp, r7
 8104190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104194:	4770      	bx	lr
 8104196:	bf00      	nop
 8104198:	e000e100 	.word	0xe000e100

0810419c <__NVIC_SetPriority>:
{
 810419c:	b480      	push	{r7}
 810419e:	b083      	sub	sp, #12
 81041a0:	af00      	add	r7, sp, #0
 81041a2:	4603      	mov	r3, r0
 81041a4:	6039      	str	r1, [r7, #0]
 81041a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81041a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81041ac:	2b00      	cmp	r3, #0
 81041ae:	db0a      	blt.n	81041c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81041b0:	683b      	ldr	r3, [r7, #0]
 81041b2:	b2da      	uxtb	r2, r3
 81041b4:	490c      	ldr	r1, [pc, #48]	; (81041e8 <__NVIC_SetPriority+0x4c>)
 81041b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81041ba:	0112      	lsls	r2, r2, #4
 81041bc:	b2d2      	uxtb	r2, r2
 81041be:	440b      	add	r3, r1
 81041c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81041c4:	e00a      	b.n	81041dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81041c6:	683b      	ldr	r3, [r7, #0]
 81041c8:	b2da      	uxtb	r2, r3
 81041ca:	4908      	ldr	r1, [pc, #32]	; (81041ec <__NVIC_SetPriority+0x50>)
 81041cc:	88fb      	ldrh	r3, [r7, #6]
 81041ce:	f003 030f 	and.w	r3, r3, #15
 81041d2:	3b04      	subs	r3, #4
 81041d4:	0112      	lsls	r2, r2, #4
 81041d6:	b2d2      	uxtb	r2, r2
 81041d8:	440b      	add	r3, r1
 81041da:	761a      	strb	r2, [r3, #24]
}
 81041dc:	bf00      	nop
 81041de:	370c      	adds	r7, #12
 81041e0:	46bd      	mov	sp, r7
 81041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041e6:	4770      	bx	lr
 81041e8:	e000e100 	.word	0xe000e100
 81041ec:	e000ed00 	.word	0xe000ed00

081041f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81041f0:	b480      	push	{r7}
 81041f2:	b089      	sub	sp, #36	; 0x24
 81041f4:	af00      	add	r7, sp, #0
 81041f6:	60f8      	str	r0, [r7, #12]
 81041f8:	60b9      	str	r1, [r7, #8]
 81041fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81041fc:	68fb      	ldr	r3, [r7, #12]
 81041fe:	f003 0307 	and.w	r3, r3, #7
 8104202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8104204:	69fb      	ldr	r3, [r7, #28]
 8104206:	f1c3 0307 	rsb	r3, r3, #7
 810420a:	2b04      	cmp	r3, #4
 810420c:	bf28      	it	cs
 810420e:	2304      	movcs	r3, #4
 8104210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8104212:	69fb      	ldr	r3, [r7, #28]
 8104214:	3304      	adds	r3, #4
 8104216:	2b06      	cmp	r3, #6
 8104218:	d902      	bls.n	8104220 <NVIC_EncodePriority+0x30>
 810421a:	69fb      	ldr	r3, [r7, #28]
 810421c:	3b03      	subs	r3, #3
 810421e:	e000      	b.n	8104222 <NVIC_EncodePriority+0x32>
 8104220:	2300      	movs	r3, #0
 8104222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104224:	f04f 32ff 	mov.w	r2, #4294967295
 8104228:	69bb      	ldr	r3, [r7, #24]
 810422a:	fa02 f303 	lsl.w	r3, r2, r3
 810422e:	43da      	mvns	r2, r3
 8104230:	68bb      	ldr	r3, [r7, #8]
 8104232:	401a      	ands	r2, r3
 8104234:	697b      	ldr	r3, [r7, #20]
 8104236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8104238:	f04f 31ff 	mov.w	r1, #4294967295
 810423c:	697b      	ldr	r3, [r7, #20]
 810423e:	fa01 f303 	lsl.w	r3, r1, r3
 8104242:	43d9      	mvns	r1, r3
 8104244:	687b      	ldr	r3, [r7, #4]
 8104246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104248:	4313      	orrs	r3, r2
         );
}
 810424a:	4618      	mov	r0, r3
 810424c:	3724      	adds	r7, #36	; 0x24
 810424e:	46bd      	mov	sp, r7
 8104250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104254:	4770      	bx	lr

08104256 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104256:	b580      	push	{r7, lr}
 8104258:	b082      	sub	sp, #8
 810425a:	af00      	add	r7, sp, #0
 810425c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810425e:	6878      	ldr	r0, [r7, #4]
 8104260:	f7ff ff4c 	bl	81040fc <__NVIC_SetPriorityGrouping>
}
 8104264:	bf00      	nop
 8104266:	3708      	adds	r7, #8
 8104268:	46bd      	mov	sp, r7
 810426a:	bd80      	pop	{r7, pc}

0810426c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810426c:	b580      	push	{r7, lr}
 810426e:	b086      	sub	sp, #24
 8104270:	af00      	add	r7, sp, #0
 8104272:	4603      	mov	r3, r0
 8104274:	60b9      	str	r1, [r7, #8]
 8104276:	607a      	str	r2, [r7, #4]
 8104278:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810427a:	f7ff ff63 	bl	8104144 <__NVIC_GetPriorityGrouping>
 810427e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8104280:	687a      	ldr	r2, [r7, #4]
 8104282:	68b9      	ldr	r1, [r7, #8]
 8104284:	6978      	ldr	r0, [r7, #20]
 8104286:	f7ff ffb3 	bl	81041f0 <NVIC_EncodePriority>
 810428a:	4602      	mov	r2, r0
 810428c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8104290:	4611      	mov	r1, r2
 8104292:	4618      	mov	r0, r3
 8104294:	f7ff ff82 	bl	810419c <__NVIC_SetPriority>
}
 8104298:	bf00      	nop
 810429a:	3718      	adds	r7, #24
 810429c:	46bd      	mov	sp, r7
 810429e:	bd80      	pop	{r7, pc}

081042a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81042a0:	b580      	push	{r7, lr}
 81042a2:	b082      	sub	sp, #8
 81042a4:	af00      	add	r7, sp, #0
 81042a6:	4603      	mov	r3, r0
 81042a8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81042aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042ae:	4618      	mov	r0, r3
 81042b0:	f7ff ff56 	bl	8104160 <__NVIC_EnableIRQ>
}
 81042b4:	bf00      	nop
 81042b6:	3708      	adds	r7, #8
 81042b8:	46bd      	mov	sp, r7
 81042ba:	bd80      	pop	{r7, pc}

081042bc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 81042bc:	b480      	push	{r7}
 81042be:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 81042c0:	f3bf 8f5f 	dmb	sy
}
 81042c4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 81042c6:	4b07      	ldr	r3, [pc, #28]	; (81042e4 <HAL_MPU_Disable+0x28>)
 81042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81042ca:	4a06      	ldr	r2, [pc, #24]	; (81042e4 <HAL_MPU_Disable+0x28>)
 81042cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81042d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 81042d2:	4b05      	ldr	r3, [pc, #20]	; (81042e8 <HAL_MPU_Disable+0x2c>)
 81042d4:	2200      	movs	r2, #0
 81042d6:	605a      	str	r2, [r3, #4]
}
 81042d8:	bf00      	nop
 81042da:	46bd      	mov	sp, r7
 81042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042e0:	4770      	bx	lr
 81042e2:	bf00      	nop
 81042e4:	e000ed00 	.word	0xe000ed00
 81042e8:	e000ed90 	.word	0xe000ed90

081042ec <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 81042ec:	b480      	push	{r7}
 81042ee:	b083      	sub	sp, #12
 81042f0:	af00      	add	r7, sp, #0
 81042f2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 81042f4:	4a0b      	ldr	r2, [pc, #44]	; (8104324 <HAL_MPU_Enable+0x38>)
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	f043 0301 	orr.w	r3, r3, #1
 81042fc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 81042fe:	4b0a      	ldr	r3, [pc, #40]	; (8104328 <HAL_MPU_Enable+0x3c>)
 8104300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104302:	4a09      	ldr	r2, [pc, #36]	; (8104328 <HAL_MPU_Enable+0x3c>)
 8104304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104308:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 810430a:	f3bf 8f4f 	dsb	sy
}
 810430e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104310:	f3bf 8f6f 	isb	sy
}
 8104314:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8104316:	bf00      	nop
 8104318:	370c      	adds	r7, #12
 810431a:	46bd      	mov	sp, r7
 810431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104320:	4770      	bx	lr
 8104322:	bf00      	nop
 8104324:	e000ed90 	.word	0xe000ed90
 8104328:	e000ed00 	.word	0xe000ed00

0810432c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 810432c:	b480      	push	{r7}
 810432e:	b083      	sub	sp, #12
 8104330:	af00      	add	r7, sp, #0
 8104332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8104334:	687b      	ldr	r3, [r7, #4]
 8104336:	785a      	ldrb	r2, [r3, #1]
 8104338:	4b1d      	ldr	r3, [pc, #116]	; (81043b0 <HAL_MPU_ConfigRegion+0x84>)
 810433a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	781b      	ldrb	r3, [r3, #0]
 8104340:	2b00      	cmp	r3, #0
 8104342:	d029      	beq.n	8104398 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8104344:	4a1a      	ldr	r2, [pc, #104]	; (81043b0 <HAL_MPU_ConfigRegion+0x84>)
 8104346:	687b      	ldr	r3, [r7, #4]
 8104348:	685b      	ldr	r3, [r3, #4]
 810434a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	7b1b      	ldrb	r3, [r3, #12]
 8104350:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8104352:	687b      	ldr	r3, [r7, #4]
 8104354:	7adb      	ldrb	r3, [r3, #11]
 8104356:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8104358:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	7a9b      	ldrb	r3, [r3, #10]
 810435e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8104360:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	7b5b      	ldrb	r3, [r3, #13]
 8104366:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8104368:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	7b9b      	ldrb	r3, [r3, #14]
 810436e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8104370:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	7bdb      	ldrb	r3, [r3, #15]
 8104376:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8104378:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 810437a:	687b      	ldr	r3, [r7, #4]
 810437c:	7a5b      	ldrb	r3, [r3, #9]
 810437e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8104380:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8104382:	687b      	ldr	r3, [r7, #4]
 8104384:	7a1b      	ldrb	r3, [r3, #8]
 8104386:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8104388:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 810438a:	687a      	ldr	r2, [r7, #4]
 810438c:	7812      	ldrb	r2, [r2, #0]
 810438e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8104390:	4a07      	ldr	r2, [pc, #28]	; (81043b0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8104392:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8104394:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8104396:	e005      	b.n	81043a4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8104398:	4b05      	ldr	r3, [pc, #20]	; (81043b0 <HAL_MPU_ConfigRegion+0x84>)
 810439a:	2200      	movs	r2, #0
 810439c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 810439e:	4b04      	ldr	r3, [pc, #16]	; (81043b0 <HAL_MPU_ConfigRegion+0x84>)
 81043a0:	2200      	movs	r2, #0
 81043a2:	611a      	str	r2, [r3, #16]
}
 81043a4:	bf00      	nop
 81043a6:	370c      	adds	r7, #12
 81043a8:	46bd      	mov	sp, r7
 81043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043ae:	4770      	bx	lr
 81043b0:	e000ed90 	.word	0xe000ed90

081043b4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81043b4:	b480      	push	{r7}
 81043b6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81043b8:	4b07      	ldr	r3, [pc, #28]	; (81043d8 <HAL_GetCurrentCPUID+0x24>)
 81043ba:	681b      	ldr	r3, [r3, #0]
 81043bc:	091b      	lsrs	r3, r3, #4
 81043be:	f003 030f 	and.w	r3, r3, #15
 81043c2:	2b07      	cmp	r3, #7
 81043c4:	d101      	bne.n	81043ca <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81043c6:	2303      	movs	r3, #3
 81043c8:	e000      	b.n	81043cc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81043ca:	2301      	movs	r3, #1
  }
}
 81043cc:	4618      	mov	r0, r3
 81043ce:	46bd      	mov	sp, r7
 81043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81043d4:	4770      	bx	lr
 81043d6:	bf00      	nop
 81043d8:	e000ed00 	.word	0xe000ed00

081043dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81043dc:	b480      	push	{r7}
 81043de:	b089      	sub	sp, #36	; 0x24
 81043e0:	af00      	add	r7, sp, #0
 81043e2:	6078      	str	r0, [r7, #4]
 81043e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81043e6:	2300      	movs	r3, #0
 81043e8:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81043ea:	4b89      	ldr	r3, [pc, #548]	; (8104610 <HAL_GPIO_Init+0x234>)
 81043ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81043ee:	e194      	b.n	810471a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81043f0:	683b      	ldr	r3, [r7, #0]
 81043f2:	681a      	ldr	r2, [r3, #0]
 81043f4:	2101      	movs	r1, #1
 81043f6:	69fb      	ldr	r3, [r7, #28]
 81043f8:	fa01 f303 	lsl.w	r3, r1, r3
 81043fc:	4013      	ands	r3, r2
 81043fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104400:	693b      	ldr	r3, [r7, #16]
 8104402:	2b00      	cmp	r3, #0
 8104404:	f000 8186 	beq.w	8104714 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8104408:	683b      	ldr	r3, [r7, #0]
 810440a:	685b      	ldr	r3, [r3, #4]
 810440c:	2b01      	cmp	r3, #1
 810440e:	d00b      	beq.n	8104428 <HAL_GPIO_Init+0x4c>
 8104410:	683b      	ldr	r3, [r7, #0]
 8104412:	685b      	ldr	r3, [r3, #4]
 8104414:	2b02      	cmp	r3, #2
 8104416:	d007      	beq.n	8104428 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104418:	683b      	ldr	r3, [r7, #0]
 810441a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810441c:	2b11      	cmp	r3, #17
 810441e:	d003      	beq.n	8104428 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8104420:	683b      	ldr	r3, [r7, #0]
 8104422:	685b      	ldr	r3, [r3, #4]
 8104424:	2b12      	cmp	r3, #18
 8104426:	d130      	bne.n	810448a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104428:	687b      	ldr	r3, [r7, #4]
 810442a:	689b      	ldr	r3, [r3, #8]
 810442c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810442e:	69fb      	ldr	r3, [r7, #28]
 8104430:	005b      	lsls	r3, r3, #1
 8104432:	2203      	movs	r2, #3
 8104434:	fa02 f303 	lsl.w	r3, r2, r3
 8104438:	43db      	mvns	r3, r3
 810443a:	69ba      	ldr	r2, [r7, #24]
 810443c:	4013      	ands	r3, r2
 810443e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104440:	683b      	ldr	r3, [r7, #0]
 8104442:	68da      	ldr	r2, [r3, #12]
 8104444:	69fb      	ldr	r3, [r7, #28]
 8104446:	005b      	lsls	r3, r3, #1
 8104448:	fa02 f303 	lsl.w	r3, r2, r3
 810444c:	69ba      	ldr	r2, [r7, #24]
 810444e:	4313      	orrs	r3, r2
 8104450:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104452:	687b      	ldr	r3, [r7, #4]
 8104454:	69ba      	ldr	r2, [r7, #24]
 8104456:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	685b      	ldr	r3, [r3, #4]
 810445c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810445e:	2201      	movs	r2, #1
 8104460:	69fb      	ldr	r3, [r7, #28]
 8104462:	fa02 f303 	lsl.w	r3, r2, r3
 8104466:	43db      	mvns	r3, r3
 8104468:	69ba      	ldr	r2, [r7, #24]
 810446a:	4013      	ands	r3, r2
 810446c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810446e:	683b      	ldr	r3, [r7, #0]
 8104470:	685b      	ldr	r3, [r3, #4]
 8104472:	091b      	lsrs	r3, r3, #4
 8104474:	f003 0201 	and.w	r2, r3, #1
 8104478:	69fb      	ldr	r3, [r7, #28]
 810447a:	fa02 f303 	lsl.w	r3, r2, r3
 810447e:	69ba      	ldr	r2, [r7, #24]
 8104480:	4313      	orrs	r3, r2
 8104482:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104484:	687b      	ldr	r3, [r7, #4]
 8104486:	69ba      	ldr	r2, [r7, #24]
 8104488:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	68db      	ldr	r3, [r3, #12]
 810448e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104490:	69fb      	ldr	r3, [r7, #28]
 8104492:	005b      	lsls	r3, r3, #1
 8104494:	2203      	movs	r2, #3
 8104496:	fa02 f303 	lsl.w	r3, r2, r3
 810449a:	43db      	mvns	r3, r3
 810449c:	69ba      	ldr	r2, [r7, #24]
 810449e:	4013      	ands	r3, r2
 81044a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81044a2:	683b      	ldr	r3, [r7, #0]
 81044a4:	689a      	ldr	r2, [r3, #8]
 81044a6:	69fb      	ldr	r3, [r7, #28]
 81044a8:	005b      	lsls	r3, r3, #1
 81044aa:	fa02 f303 	lsl.w	r3, r2, r3
 81044ae:	69ba      	ldr	r2, [r7, #24]
 81044b0:	4313      	orrs	r3, r2
 81044b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81044b4:	687b      	ldr	r3, [r7, #4]
 81044b6:	69ba      	ldr	r2, [r7, #24]
 81044b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81044ba:	683b      	ldr	r3, [r7, #0]
 81044bc:	685b      	ldr	r3, [r3, #4]
 81044be:	2b02      	cmp	r3, #2
 81044c0:	d003      	beq.n	81044ca <HAL_GPIO_Init+0xee>
 81044c2:	683b      	ldr	r3, [r7, #0]
 81044c4:	685b      	ldr	r3, [r3, #4]
 81044c6:	2b12      	cmp	r3, #18
 81044c8:	d123      	bne.n	8104512 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81044ca:	69fb      	ldr	r3, [r7, #28]
 81044cc:	08da      	lsrs	r2, r3, #3
 81044ce:	687b      	ldr	r3, [r7, #4]
 81044d0:	3208      	adds	r2, #8
 81044d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81044d8:	69fb      	ldr	r3, [r7, #28]
 81044da:	f003 0307 	and.w	r3, r3, #7
 81044de:	009b      	lsls	r3, r3, #2
 81044e0:	220f      	movs	r2, #15
 81044e2:	fa02 f303 	lsl.w	r3, r2, r3
 81044e6:	43db      	mvns	r3, r3
 81044e8:	69ba      	ldr	r2, [r7, #24]
 81044ea:	4013      	ands	r3, r2
 81044ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81044ee:	683b      	ldr	r3, [r7, #0]
 81044f0:	691a      	ldr	r2, [r3, #16]
 81044f2:	69fb      	ldr	r3, [r7, #28]
 81044f4:	f003 0307 	and.w	r3, r3, #7
 81044f8:	009b      	lsls	r3, r3, #2
 81044fa:	fa02 f303 	lsl.w	r3, r2, r3
 81044fe:	69ba      	ldr	r2, [r7, #24]
 8104500:	4313      	orrs	r3, r2
 8104502:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104504:	69fb      	ldr	r3, [r7, #28]
 8104506:	08da      	lsrs	r2, r3, #3
 8104508:	687b      	ldr	r3, [r7, #4]
 810450a:	3208      	adds	r2, #8
 810450c:	69b9      	ldr	r1, [r7, #24]
 810450e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	681b      	ldr	r3, [r3, #0]
 8104516:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104518:	69fb      	ldr	r3, [r7, #28]
 810451a:	005b      	lsls	r3, r3, #1
 810451c:	2203      	movs	r2, #3
 810451e:	fa02 f303 	lsl.w	r3, r2, r3
 8104522:	43db      	mvns	r3, r3
 8104524:	69ba      	ldr	r2, [r7, #24]
 8104526:	4013      	ands	r3, r2
 8104528:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810452a:	683b      	ldr	r3, [r7, #0]
 810452c:	685b      	ldr	r3, [r3, #4]
 810452e:	f003 0203 	and.w	r2, r3, #3
 8104532:	69fb      	ldr	r3, [r7, #28]
 8104534:	005b      	lsls	r3, r3, #1
 8104536:	fa02 f303 	lsl.w	r3, r2, r3
 810453a:	69ba      	ldr	r2, [r7, #24]
 810453c:	4313      	orrs	r3, r2
 810453e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104540:	687b      	ldr	r3, [r7, #4]
 8104542:	69ba      	ldr	r2, [r7, #24]
 8104544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8104546:	683b      	ldr	r3, [r7, #0]
 8104548:	685b      	ldr	r3, [r3, #4]
 810454a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810454e:	2b00      	cmp	r3, #0
 8104550:	f000 80e0 	beq.w	8104714 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104554:	4b2f      	ldr	r3, [pc, #188]	; (8104614 <HAL_GPIO_Init+0x238>)
 8104556:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810455a:	4a2e      	ldr	r2, [pc, #184]	; (8104614 <HAL_GPIO_Init+0x238>)
 810455c:	f043 0302 	orr.w	r3, r3, #2
 8104560:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8104564:	4b2b      	ldr	r3, [pc, #172]	; (8104614 <HAL_GPIO_Init+0x238>)
 8104566:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810456a:	f003 0302 	and.w	r3, r3, #2
 810456e:	60fb      	str	r3, [r7, #12]
 8104570:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104572:	4a29      	ldr	r2, [pc, #164]	; (8104618 <HAL_GPIO_Init+0x23c>)
 8104574:	69fb      	ldr	r3, [r7, #28]
 8104576:	089b      	lsrs	r3, r3, #2
 8104578:	3302      	adds	r3, #2
 810457a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810457e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104580:	69fb      	ldr	r3, [r7, #28]
 8104582:	f003 0303 	and.w	r3, r3, #3
 8104586:	009b      	lsls	r3, r3, #2
 8104588:	220f      	movs	r2, #15
 810458a:	fa02 f303 	lsl.w	r3, r2, r3
 810458e:	43db      	mvns	r3, r3
 8104590:	69ba      	ldr	r2, [r7, #24]
 8104592:	4013      	ands	r3, r2
 8104594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104596:	687b      	ldr	r3, [r7, #4]
 8104598:	4a20      	ldr	r2, [pc, #128]	; (810461c <HAL_GPIO_Init+0x240>)
 810459a:	4293      	cmp	r3, r2
 810459c:	d052      	beq.n	8104644 <HAL_GPIO_Init+0x268>
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	4a1f      	ldr	r2, [pc, #124]	; (8104620 <HAL_GPIO_Init+0x244>)
 81045a2:	4293      	cmp	r3, r2
 81045a4:	d031      	beq.n	810460a <HAL_GPIO_Init+0x22e>
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	4a1e      	ldr	r2, [pc, #120]	; (8104624 <HAL_GPIO_Init+0x248>)
 81045aa:	4293      	cmp	r3, r2
 81045ac:	d02b      	beq.n	8104606 <HAL_GPIO_Init+0x22a>
 81045ae:	687b      	ldr	r3, [r7, #4]
 81045b0:	4a1d      	ldr	r2, [pc, #116]	; (8104628 <HAL_GPIO_Init+0x24c>)
 81045b2:	4293      	cmp	r3, r2
 81045b4:	d025      	beq.n	8104602 <HAL_GPIO_Init+0x226>
 81045b6:	687b      	ldr	r3, [r7, #4]
 81045b8:	4a1c      	ldr	r2, [pc, #112]	; (810462c <HAL_GPIO_Init+0x250>)
 81045ba:	4293      	cmp	r3, r2
 81045bc:	d01f      	beq.n	81045fe <HAL_GPIO_Init+0x222>
 81045be:	687b      	ldr	r3, [r7, #4]
 81045c0:	4a1b      	ldr	r2, [pc, #108]	; (8104630 <HAL_GPIO_Init+0x254>)
 81045c2:	4293      	cmp	r3, r2
 81045c4:	d019      	beq.n	81045fa <HAL_GPIO_Init+0x21e>
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	4a1a      	ldr	r2, [pc, #104]	; (8104634 <HAL_GPIO_Init+0x258>)
 81045ca:	4293      	cmp	r3, r2
 81045cc:	d013      	beq.n	81045f6 <HAL_GPIO_Init+0x21a>
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	4a19      	ldr	r2, [pc, #100]	; (8104638 <HAL_GPIO_Init+0x25c>)
 81045d2:	4293      	cmp	r3, r2
 81045d4:	d00d      	beq.n	81045f2 <HAL_GPIO_Init+0x216>
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	4a18      	ldr	r2, [pc, #96]	; (810463c <HAL_GPIO_Init+0x260>)
 81045da:	4293      	cmp	r3, r2
 81045dc:	d007      	beq.n	81045ee <HAL_GPIO_Init+0x212>
 81045de:	687b      	ldr	r3, [r7, #4]
 81045e0:	4a17      	ldr	r2, [pc, #92]	; (8104640 <HAL_GPIO_Init+0x264>)
 81045e2:	4293      	cmp	r3, r2
 81045e4:	d101      	bne.n	81045ea <HAL_GPIO_Init+0x20e>
 81045e6:	2309      	movs	r3, #9
 81045e8:	e02d      	b.n	8104646 <HAL_GPIO_Init+0x26a>
 81045ea:	230a      	movs	r3, #10
 81045ec:	e02b      	b.n	8104646 <HAL_GPIO_Init+0x26a>
 81045ee:	2308      	movs	r3, #8
 81045f0:	e029      	b.n	8104646 <HAL_GPIO_Init+0x26a>
 81045f2:	2307      	movs	r3, #7
 81045f4:	e027      	b.n	8104646 <HAL_GPIO_Init+0x26a>
 81045f6:	2306      	movs	r3, #6
 81045f8:	e025      	b.n	8104646 <HAL_GPIO_Init+0x26a>
 81045fa:	2305      	movs	r3, #5
 81045fc:	e023      	b.n	8104646 <HAL_GPIO_Init+0x26a>
 81045fe:	2304      	movs	r3, #4
 8104600:	e021      	b.n	8104646 <HAL_GPIO_Init+0x26a>
 8104602:	2303      	movs	r3, #3
 8104604:	e01f      	b.n	8104646 <HAL_GPIO_Init+0x26a>
 8104606:	2302      	movs	r3, #2
 8104608:	e01d      	b.n	8104646 <HAL_GPIO_Init+0x26a>
 810460a:	2301      	movs	r3, #1
 810460c:	e01b      	b.n	8104646 <HAL_GPIO_Init+0x26a>
 810460e:	bf00      	nop
 8104610:	580000c0 	.word	0x580000c0
 8104614:	58024400 	.word	0x58024400
 8104618:	58000400 	.word	0x58000400
 810461c:	58020000 	.word	0x58020000
 8104620:	58020400 	.word	0x58020400
 8104624:	58020800 	.word	0x58020800
 8104628:	58020c00 	.word	0x58020c00
 810462c:	58021000 	.word	0x58021000
 8104630:	58021400 	.word	0x58021400
 8104634:	58021800 	.word	0x58021800
 8104638:	58021c00 	.word	0x58021c00
 810463c:	58022000 	.word	0x58022000
 8104640:	58022400 	.word	0x58022400
 8104644:	2300      	movs	r3, #0
 8104646:	69fa      	ldr	r2, [r7, #28]
 8104648:	f002 0203 	and.w	r2, r2, #3
 810464c:	0092      	lsls	r2, r2, #2
 810464e:	4093      	lsls	r3, r2
 8104650:	69ba      	ldr	r2, [r7, #24]
 8104652:	4313      	orrs	r3, r2
 8104654:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8104656:	4938      	ldr	r1, [pc, #224]	; (8104738 <HAL_GPIO_Init+0x35c>)
 8104658:	69fb      	ldr	r3, [r7, #28]
 810465a:	089b      	lsrs	r3, r3, #2
 810465c:	3302      	adds	r3, #2
 810465e:	69ba      	ldr	r2, [r7, #24]
 8104660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8104664:	697b      	ldr	r3, [r7, #20]
 8104666:	681b      	ldr	r3, [r3, #0]
 8104668:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810466a:	693b      	ldr	r3, [r7, #16]
 810466c:	43db      	mvns	r3, r3
 810466e:	69ba      	ldr	r2, [r7, #24]
 8104670:	4013      	ands	r3, r2
 8104672:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8104674:	683b      	ldr	r3, [r7, #0]
 8104676:	685b      	ldr	r3, [r3, #4]
 8104678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810467c:	2b00      	cmp	r3, #0
 810467e:	d003      	beq.n	8104688 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8104680:	69ba      	ldr	r2, [r7, #24]
 8104682:	693b      	ldr	r3, [r7, #16]
 8104684:	4313      	orrs	r3, r2
 8104686:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8104688:	697b      	ldr	r3, [r7, #20]
 810468a:	69ba      	ldr	r2, [r7, #24]
 810468c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810468e:	697b      	ldr	r3, [r7, #20]
 8104690:	685b      	ldr	r3, [r3, #4]
 8104692:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8104694:	693b      	ldr	r3, [r7, #16]
 8104696:	43db      	mvns	r3, r3
 8104698:	69ba      	ldr	r2, [r7, #24]
 810469a:	4013      	ands	r3, r2
 810469c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810469e:	683b      	ldr	r3, [r7, #0]
 81046a0:	685b      	ldr	r3, [r3, #4]
 81046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 81046a6:	2b00      	cmp	r3, #0
 81046a8:	d003      	beq.n	81046b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 81046aa:	69ba      	ldr	r2, [r7, #24]
 81046ac:	693b      	ldr	r3, [r7, #16]
 81046ae:	4313      	orrs	r3, r2
 81046b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81046b2:	697b      	ldr	r3, [r7, #20]
 81046b4:	69ba      	ldr	r2, [r7, #24]
 81046b6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81046b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81046bc:	681b      	ldr	r3, [r3, #0]
 81046be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81046c0:	693b      	ldr	r3, [r7, #16]
 81046c2:	43db      	mvns	r3, r3
 81046c4:	69ba      	ldr	r2, [r7, #24]
 81046c6:	4013      	ands	r3, r2
 81046c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 81046ca:	683b      	ldr	r3, [r7, #0]
 81046cc:	685b      	ldr	r3, [r3, #4]
 81046ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81046d2:	2b00      	cmp	r3, #0
 81046d4:	d003      	beq.n	81046de <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 81046d6:	69ba      	ldr	r2, [r7, #24]
 81046d8:	693b      	ldr	r3, [r7, #16]
 81046da:	4313      	orrs	r3, r2
 81046dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81046de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81046e2:	69bb      	ldr	r3, [r7, #24]
 81046e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81046e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81046ea:	685b      	ldr	r3, [r3, #4]
 81046ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81046ee:	693b      	ldr	r3, [r7, #16]
 81046f0:	43db      	mvns	r3, r3
 81046f2:	69ba      	ldr	r2, [r7, #24]
 81046f4:	4013      	ands	r3, r2
 81046f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81046f8:	683b      	ldr	r3, [r7, #0]
 81046fa:	685b      	ldr	r3, [r3, #4]
 81046fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104700:	2b00      	cmp	r3, #0
 8104702:	d003      	beq.n	810470c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8104704:	69ba      	ldr	r2, [r7, #24]
 8104706:	693b      	ldr	r3, [r7, #16]
 8104708:	4313      	orrs	r3, r2
 810470a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810470c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8104710:	69bb      	ldr	r3, [r7, #24]
 8104712:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8104714:	69fb      	ldr	r3, [r7, #28]
 8104716:	3301      	adds	r3, #1
 8104718:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810471a:	683b      	ldr	r3, [r7, #0]
 810471c:	681a      	ldr	r2, [r3, #0]
 810471e:	69fb      	ldr	r3, [r7, #28]
 8104720:	fa22 f303 	lsr.w	r3, r2, r3
 8104724:	2b00      	cmp	r3, #0
 8104726:	f47f ae63 	bne.w	81043f0 <HAL_GPIO_Init+0x14>
  }
}
 810472a:	bf00      	nop
 810472c:	bf00      	nop
 810472e:	3724      	adds	r7, #36	; 0x24
 8104730:	46bd      	mov	sp, r7
 8104732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104736:	4770      	bx	lr
 8104738:	58000400 	.word	0x58000400

0810473c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810473c:	b480      	push	{r7}
 810473e:	b083      	sub	sp, #12
 8104740:	af00      	add	r7, sp, #0
 8104742:	6078      	str	r0, [r7, #4]
 8104744:	460b      	mov	r3, r1
 8104746:	807b      	strh	r3, [r7, #2]
 8104748:	4613      	mov	r3, r2
 810474a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 810474c:	787b      	ldrb	r3, [r7, #1]
 810474e:	2b00      	cmp	r3, #0
 8104750:	d003      	beq.n	810475a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8104752:	887a      	ldrh	r2, [r7, #2]
 8104754:	687b      	ldr	r3, [r7, #4]
 8104756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8104758:	e003      	b.n	8104762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810475a:	887b      	ldrh	r3, [r7, #2]
 810475c:	041a      	lsls	r2, r3, #16
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	619a      	str	r2, [r3, #24]
}
 8104762:	bf00      	nop
 8104764:	370c      	adds	r7, #12
 8104766:	46bd      	mov	sp, r7
 8104768:	f85d 7b04 	ldr.w	r7, [sp], #4
 810476c:	4770      	bx	lr

0810476e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810476e:	b480      	push	{r7}
 8104770:	b083      	sub	sp, #12
 8104772:	af00      	add	r7, sp, #0
 8104774:	6078      	str	r0, [r7, #4]
 8104776:	460b      	mov	r3, r1
 8104778:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 810477a:	687b      	ldr	r3, [r7, #4]
 810477c:	695a      	ldr	r2, [r3, #20]
 810477e:	887b      	ldrh	r3, [r7, #2]
 8104780:	401a      	ands	r2, r3
 8104782:	887b      	ldrh	r3, [r7, #2]
 8104784:	429a      	cmp	r2, r3
 8104786:	d104      	bne.n	8104792 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8104788:	887b      	ldrh	r3, [r7, #2]
 810478a:	041a      	lsls	r2, r3, #16
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8104790:	e002      	b.n	8104798 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8104792:	887a      	ldrh	r2, [r7, #2]
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	619a      	str	r2, [r3, #24]
}
 8104798:	bf00      	nop
 810479a:	370c      	adds	r7, #12
 810479c:	46bd      	mov	sp, r7
 810479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047a2:	4770      	bx	lr

081047a4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81047a4:	b480      	push	{r7}
 81047a6:	b083      	sub	sp, #12
 81047a8:	af00      	add	r7, sp, #0
 81047aa:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81047ac:	4b05      	ldr	r3, [pc, #20]	; (81047c4 <HAL_HSEM_ActivateNotification+0x20>)
 81047ae:	681a      	ldr	r2, [r3, #0]
 81047b0:	4904      	ldr	r1, [pc, #16]	; (81047c4 <HAL_HSEM_ActivateNotification+0x20>)
 81047b2:	687b      	ldr	r3, [r7, #4]
 81047b4:	4313      	orrs	r3, r2
 81047b6:	600b      	str	r3, [r1, #0]
#endif
}
 81047b8:	bf00      	nop
 81047ba:	370c      	adds	r7, #12
 81047bc:	46bd      	mov	sp, r7
 81047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81047c2:	4770      	bx	lr
 81047c4:	58026510 	.word	0x58026510

081047c8 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 81047c8:	b580      	push	{r7, lr}
 81047ca:	b084      	sub	sp, #16
 81047cc:	af00      	add	r7, sp, #0
 81047ce:	60f8      	str	r0, [r7, #12]
 81047d0:	460b      	mov	r3, r1
 81047d2:	607a      	str	r2, [r7, #4]
 81047d4:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 81047d6:	4b37      	ldr	r3, [pc, #220]	; (81048b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81047d8:	681b      	ldr	r3, [r3, #0]
 81047da:	f023 0201 	bic.w	r2, r3, #1
 81047de:	4935      	ldr	r1, [pc, #212]	; (81048b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81047e0:	68fb      	ldr	r3, [r7, #12]
 81047e2:	4313      	orrs	r3, r2
 81047e4:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81047e6:	687b      	ldr	r3, [r7, #4]
 81047e8:	2b00      	cmp	r3, #0
 81047ea:	d123      	bne.n	8104834 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81047ec:	f7ff fde2 	bl	81043b4 <HAL_GetCurrentCPUID>
 81047f0:	4603      	mov	r3, r0
 81047f2:	2b03      	cmp	r3, #3
 81047f4:	d158      	bne.n	81048a8 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81047f6:	4b2f      	ldr	r3, [pc, #188]	; (81048b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81047f8:	691b      	ldr	r3, [r3, #16]
 81047fa:	4a2e      	ldr	r2, [pc, #184]	; (81048b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81047fc:	f023 0301 	bic.w	r3, r3, #1
 8104800:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104802:	4b2d      	ldr	r3, [pc, #180]	; (81048b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104804:	691b      	ldr	r3, [r3, #16]
 8104806:	4a2c      	ldr	r2, [pc, #176]	; (81048b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104808:	f043 0304 	orr.w	r3, r3, #4
 810480c:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810480e:	f3bf 8f4f 	dsb	sy
}
 8104812:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104814:	f3bf 8f6f 	isb	sy
}
 8104818:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810481a:	7afb      	ldrb	r3, [r7, #11]
 810481c:	2b01      	cmp	r3, #1
 810481e:	d101      	bne.n	8104824 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8104820:	bf30      	wfi
 8104822:	e000      	b.n	8104826 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104824:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104826:	4b24      	ldr	r3, [pc, #144]	; (81048b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104828:	691b      	ldr	r3, [r3, #16]
 810482a:	4a23      	ldr	r2, [pc, #140]	; (81048b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810482c:	f023 0304 	bic.w	r3, r3, #4
 8104830:	6113      	str	r3, [r2, #16]
 8104832:	e03c      	b.n	81048ae <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104834:	687b      	ldr	r3, [r7, #4]
 8104836:	2b01      	cmp	r3, #1
 8104838:	d123      	bne.n	8104882 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810483a:	f7ff fdbb 	bl	81043b4 <HAL_GetCurrentCPUID>
 810483e:	4603      	mov	r3, r0
 8104840:	2b01      	cmp	r3, #1
 8104842:	d133      	bne.n	81048ac <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8104844:	4b1b      	ldr	r3, [pc, #108]	; (81048b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104846:	695b      	ldr	r3, [r3, #20]
 8104848:	4a1a      	ldr	r2, [pc, #104]	; (81048b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810484a:	f023 0302 	bic.w	r3, r3, #2
 810484e:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104850:	4b19      	ldr	r3, [pc, #100]	; (81048b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104852:	691b      	ldr	r3, [r3, #16]
 8104854:	4a18      	ldr	r2, [pc, #96]	; (81048b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104856:	f043 0304 	orr.w	r3, r3, #4
 810485a:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810485c:	f3bf 8f4f 	dsb	sy
}
 8104860:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104862:	f3bf 8f6f 	isb	sy
}
 8104866:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104868:	7afb      	ldrb	r3, [r7, #11]
 810486a:	2b01      	cmp	r3, #1
 810486c:	d101      	bne.n	8104872 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810486e:	bf30      	wfi
 8104870:	e000      	b.n	8104874 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104872:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104874:	4b10      	ldr	r3, [pc, #64]	; (81048b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104876:	691b      	ldr	r3, [r3, #16]
 8104878:	4a0f      	ldr	r2, [pc, #60]	; (81048b8 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810487a:	f023 0304 	bic.w	r3, r3, #4
 810487e:	6113      	str	r3, [r2, #16]
 8104880:	e015      	b.n	81048ae <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8104882:	f7ff fd97 	bl	81043b4 <HAL_GetCurrentCPUID>
 8104886:	4603      	mov	r3, r0
 8104888:	2b03      	cmp	r3, #3
 810488a:	d106      	bne.n	810489a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810488c:	4b09      	ldr	r3, [pc, #36]	; (81048b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810488e:	691b      	ldr	r3, [r3, #16]
 8104890:	4a08      	ldr	r2, [pc, #32]	; (81048b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104892:	f023 0304 	bic.w	r3, r3, #4
 8104896:	6113      	str	r3, [r2, #16]
 8104898:	e009      	b.n	81048ae <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810489a:	4b06      	ldr	r3, [pc, #24]	; (81048b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 810489c:	695b      	ldr	r3, [r3, #20]
 810489e:	4a05      	ldr	r2, [pc, #20]	; (81048b4 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048a0:	f023 0304 	bic.w	r3, r3, #4
 81048a4:	6153      	str	r3, [r2, #20]
 81048a6:	e002      	b.n	81048ae <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81048a8:	bf00      	nop
 81048aa:	e000      	b.n	81048ae <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81048ac:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81048ae:	3710      	adds	r7, #16
 81048b0:	46bd      	mov	sp, r7
 81048b2:	bd80      	pop	{r7, pc}
 81048b4:	58024800 	.word	0x58024800
 81048b8:	e000ed00 	.word	0xe000ed00

081048bc <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81048bc:	b580      	push	{r7, lr}
 81048be:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81048c0:	f7ff fd78 	bl	81043b4 <HAL_GetCurrentCPUID>
 81048c4:	4603      	mov	r3, r0
 81048c6:	2b03      	cmp	r3, #3
 81048c8:	d101      	bne.n	81048ce <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 81048ca:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 81048cc:	e001      	b.n	81048d2 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 81048ce:	bf40      	sev
    __WFE ();
 81048d0:	bf20      	wfe
}
 81048d2:	bf00      	nop
 81048d4:	bd80      	pop	{r7, pc}
	...

081048d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 81048d8:	b480      	push	{r7}
 81048da:	b089      	sub	sp, #36	; 0x24
 81048dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81048de:	4bb3      	ldr	r3, [pc, #716]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81048e0:	691b      	ldr	r3, [r3, #16]
 81048e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81048e6:	2b18      	cmp	r3, #24
 81048e8:	f200 8155 	bhi.w	8104b96 <HAL_RCC_GetSysClockFreq+0x2be>
 81048ec:	a201      	add	r2, pc, #4	; (adr r2, 81048f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 81048ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81048f2:	bf00      	nop
 81048f4:	08104959 	.word	0x08104959
 81048f8:	08104b97 	.word	0x08104b97
 81048fc:	08104b97 	.word	0x08104b97
 8104900:	08104b97 	.word	0x08104b97
 8104904:	08104b97 	.word	0x08104b97
 8104908:	08104b97 	.word	0x08104b97
 810490c:	08104b97 	.word	0x08104b97
 8104910:	08104b97 	.word	0x08104b97
 8104914:	0810497f 	.word	0x0810497f
 8104918:	08104b97 	.word	0x08104b97
 810491c:	08104b97 	.word	0x08104b97
 8104920:	08104b97 	.word	0x08104b97
 8104924:	08104b97 	.word	0x08104b97
 8104928:	08104b97 	.word	0x08104b97
 810492c:	08104b97 	.word	0x08104b97
 8104930:	08104b97 	.word	0x08104b97
 8104934:	08104985 	.word	0x08104985
 8104938:	08104b97 	.word	0x08104b97
 810493c:	08104b97 	.word	0x08104b97
 8104940:	08104b97 	.word	0x08104b97
 8104944:	08104b97 	.word	0x08104b97
 8104948:	08104b97 	.word	0x08104b97
 810494c:	08104b97 	.word	0x08104b97
 8104950:	08104b97 	.word	0x08104b97
 8104954:	0810498b 	.word	0x0810498b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104958:	4b94      	ldr	r3, [pc, #592]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 810495a:	681b      	ldr	r3, [r3, #0]
 810495c:	f003 0320 	and.w	r3, r3, #32
 8104960:	2b00      	cmp	r3, #0
 8104962:	d009      	beq.n	8104978 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104964:	4b91      	ldr	r3, [pc, #580]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104966:	681b      	ldr	r3, [r3, #0]
 8104968:	08db      	lsrs	r3, r3, #3
 810496a:	f003 0303 	and.w	r3, r3, #3
 810496e:	4a90      	ldr	r2, [pc, #576]	; (8104bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104970:	fa22 f303 	lsr.w	r3, r2, r3
 8104974:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8104976:	e111      	b.n	8104b9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8104978:	4b8d      	ldr	r3, [pc, #564]	; (8104bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810497a:	61bb      	str	r3, [r7, #24]
    break;
 810497c:	e10e      	b.n	8104b9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810497e:	4b8d      	ldr	r3, [pc, #564]	; (8104bb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104980:	61bb      	str	r3, [r7, #24]
    break;
 8104982:	e10b      	b.n	8104b9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8104984:	4b8c      	ldr	r3, [pc, #560]	; (8104bb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8104986:	61bb      	str	r3, [r7, #24]
    break;
 8104988:	e108      	b.n	8104b9c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810498a:	4b88      	ldr	r3, [pc, #544]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 810498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810498e:	f003 0303 	and.w	r3, r3, #3
 8104992:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8104994:	4b85      	ldr	r3, [pc, #532]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104998:	091b      	lsrs	r3, r3, #4
 810499a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810499e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81049a0:	4b82      	ldr	r3, [pc, #520]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81049a4:	f003 0301 	and.w	r3, r3, #1
 81049a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81049aa:	4b80      	ldr	r3, [pc, #512]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81049ae:	08db      	lsrs	r3, r3, #3
 81049b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81049b4:	68fa      	ldr	r2, [r7, #12]
 81049b6:	fb02 f303 	mul.w	r3, r2, r3
 81049ba:	ee07 3a90 	vmov	s15, r3
 81049be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81049c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81049c6:	693b      	ldr	r3, [r7, #16]
 81049c8:	2b00      	cmp	r3, #0
 81049ca:	f000 80e1 	beq.w	8104b90 <HAL_RCC_GetSysClockFreq+0x2b8>
 81049ce:	697b      	ldr	r3, [r7, #20]
 81049d0:	2b02      	cmp	r3, #2
 81049d2:	f000 8083 	beq.w	8104adc <HAL_RCC_GetSysClockFreq+0x204>
 81049d6:	697b      	ldr	r3, [r7, #20]
 81049d8:	2b02      	cmp	r3, #2
 81049da:	f200 80a1 	bhi.w	8104b20 <HAL_RCC_GetSysClockFreq+0x248>
 81049de:	697b      	ldr	r3, [r7, #20]
 81049e0:	2b00      	cmp	r3, #0
 81049e2:	d003      	beq.n	81049ec <HAL_RCC_GetSysClockFreq+0x114>
 81049e4:	697b      	ldr	r3, [r7, #20]
 81049e6:	2b01      	cmp	r3, #1
 81049e8:	d056      	beq.n	8104a98 <HAL_RCC_GetSysClockFreq+0x1c0>
 81049ea:	e099      	b.n	8104b20 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81049ec:	4b6f      	ldr	r3, [pc, #444]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049ee:	681b      	ldr	r3, [r3, #0]
 81049f0:	f003 0320 	and.w	r3, r3, #32
 81049f4:	2b00      	cmp	r3, #0
 81049f6:	d02d      	beq.n	8104a54 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81049f8:	4b6c      	ldr	r3, [pc, #432]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049fa:	681b      	ldr	r3, [r3, #0]
 81049fc:	08db      	lsrs	r3, r3, #3
 81049fe:	f003 0303 	and.w	r3, r3, #3
 8104a02:	4a6b      	ldr	r2, [pc, #428]	; (8104bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104a04:	fa22 f303 	lsr.w	r3, r2, r3
 8104a08:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104a0a:	687b      	ldr	r3, [r7, #4]
 8104a0c:	ee07 3a90 	vmov	s15, r3
 8104a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a14:	693b      	ldr	r3, [r7, #16]
 8104a16:	ee07 3a90 	vmov	s15, r3
 8104a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a22:	4b62      	ldr	r3, [pc, #392]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a2a:	ee07 3a90 	vmov	s15, r3
 8104a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8104a36:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8104a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8104a52:	e087      	b.n	8104b64 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104a54:	693b      	ldr	r3, [r7, #16]
 8104a56:	ee07 3a90 	vmov	s15, r3
 8104a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104bc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8104a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a66:	4b51      	ldr	r3, [pc, #324]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a6e:	ee07 3a90 	vmov	s15, r3
 8104a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8104a7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8104a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104a96:	e065      	b.n	8104b64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104a98:	693b      	ldr	r3, [r7, #16]
 8104a9a:	ee07 3a90 	vmov	s15, r3
 8104a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104aa2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104bc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104aaa:	4b40      	ldr	r3, [pc, #256]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ab2:	ee07 3a90 	vmov	s15, r3
 8104ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8104abe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8104ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104ada:	e043      	b.n	8104b64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104adc:	693b      	ldr	r3, [r7, #16]
 8104ade:	ee07 3a90 	vmov	s15, r3
 8104ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ae6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104bc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104aee:	4b2f      	ldr	r3, [pc, #188]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104af6:	ee07 3a90 	vmov	s15, r3
 8104afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8104b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104b1e:	e021      	b.n	8104b64 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8104b20:	693b      	ldr	r3, [r7, #16]
 8104b22:	ee07 3a90 	vmov	s15, r3
 8104b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104bc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b32:	4b1e      	ldr	r3, [pc, #120]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b3a:	ee07 3a90 	vmov	s15, r3
 8104b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8104b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104b62:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8104b64:	4b11      	ldr	r3, [pc, #68]	; (8104bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b68:	0a5b      	lsrs	r3, r3, #9
 8104b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104b6e:	3301      	adds	r3, #1
 8104b70:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8104b72:	683b      	ldr	r3, [r7, #0]
 8104b74:	ee07 3a90 	vmov	s15, r3
 8104b78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104b88:	ee17 3a90 	vmov	r3, s15
 8104b8c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8104b8e:	e005      	b.n	8104b9c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8104b90:	2300      	movs	r3, #0
 8104b92:	61bb      	str	r3, [r7, #24]
    break;
 8104b94:	e002      	b.n	8104b9c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8104b96:	4b07      	ldr	r3, [pc, #28]	; (8104bb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104b98:	61bb      	str	r3, [r7, #24]
    break;
 8104b9a:	bf00      	nop
  }

  return sysclockfreq;
 8104b9c:	69bb      	ldr	r3, [r7, #24]
}
 8104b9e:	4618      	mov	r0, r3
 8104ba0:	3724      	adds	r7, #36	; 0x24
 8104ba2:	46bd      	mov	sp, r7
 8104ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104ba8:	4770      	bx	lr
 8104baa:	bf00      	nop
 8104bac:	58024400 	.word	0x58024400
 8104bb0:	03d09000 	.word	0x03d09000
 8104bb4:	003d0900 	.word	0x003d0900
 8104bb8:	007a1200 	.word	0x007a1200
 8104bbc:	46000000 	.word	0x46000000
 8104bc0:	4c742400 	.word	0x4c742400
 8104bc4:	4a742400 	.word	0x4a742400
 8104bc8:	4af42400 	.word	0x4af42400

08104bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104bcc:	b580      	push	{r7, lr}
 8104bce:	b082      	sub	sp, #8
 8104bd0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104bd2:	f7ff fe81 	bl	81048d8 <HAL_RCC_GetSysClockFreq>
 8104bd6:	4602      	mov	r2, r0
 8104bd8:	4b11      	ldr	r3, [pc, #68]	; (8104c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8104bda:	699b      	ldr	r3, [r3, #24]
 8104bdc:	0a1b      	lsrs	r3, r3, #8
 8104bde:	f003 030f 	and.w	r3, r3, #15
 8104be2:	4910      	ldr	r1, [pc, #64]	; (8104c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8104be4:	5ccb      	ldrb	r3, [r1, r3]
 8104be6:	f003 031f 	and.w	r3, r3, #31
 8104bea:	fa22 f303 	lsr.w	r3, r2, r3
 8104bee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104bf0:	4b0b      	ldr	r3, [pc, #44]	; (8104c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8104bf2:	699b      	ldr	r3, [r3, #24]
 8104bf4:	f003 030f 	and.w	r3, r3, #15
 8104bf8:	4a0a      	ldr	r2, [pc, #40]	; (8104c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8104bfa:	5cd3      	ldrb	r3, [r2, r3]
 8104bfc:	f003 031f 	and.w	r3, r3, #31
 8104c00:	687a      	ldr	r2, [r7, #4]
 8104c02:	fa22 f303 	lsr.w	r3, r2, r3
 8104c06:	4a08      	ldr	r2, [pc, #32]	; (8104c28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104c08:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104c0a:	4b07      	ldr	r3, [pc, #28]	; (8104c28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104c0c:	681b      	ldr	r3, [r3, #0]
 8104c0e:	4a07      	ldr	r2, [pc, #28]	; (8104c2c <HAL_RCC_GetHCLKFreq+0x60>)
 8104c10:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104c12:	4b05      	ldr	r3, [pc, #20]	; (8104c28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104c14:	681b      	ldr	r3, [r3, #0]
}
 8104c16:	4618      	mov	r0, r3
 8104c18:	3708      	adds	r7, #8
 8104c1a:	46bd      	mov	sp, r7
 8104c1c:	bd80      	pop	{r7, pc}
 8104c1e:	bf00      	nop
 8104c20:	58024400 	.word	0x58024400
 8104c24:	08105620 	.word	0x08105620
 8104c28:	1000180c 	.word	0x1000180c
 8104c2c:	10001808 	.word	0x10001808

08104c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104c30:	b580      	push	{r7, lr}
 8104c32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104c34:	f7ff ffca 	bl	8104bcc <HAL_RCC_GetHCLKFreq>
 8104c38:	4602      	mov	r2, r0
 8104c3a:	4b06      	ldr	r3, [pc, #24]	; (8104c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104c3c:	69db      	ldr	r3, [r3, #28]
 8104c3e:	091b      	lsrs	r3, r3, #4
 8104c40:	f003 0307 	and.w	r3, r3, #7
 8104c44:	4904      	ldr	r1, [pc, #16]	; (8104c58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8104c46:	5ccb      	ldrb	r3, [r1, r3]
 8104c48:	f003 031f 	and.w	r3, r3, #31
 8104c4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104c50:	4618      	mov	r0, r3
 8104c52:	bd80      	pop	{r7, pc}
 8104c54:	58024400 	.word	0x58024400
 8104c58:	08105620 	.word	0x08105620

08104c5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8104c5c:	b480      	push	{r7}
 8104c5e:	b083      	sub	sp, #12
 8104c60:	af00      	add	r7, sp, #0
 8104c62:	6078      	str	r0, [r7, #4]
 8104c64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8104c66:	687b      	ldr	r3, [r7, #4]
 8104c68:	223f      	movs	r2, #63	; 0x3f
 8104c6a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8104c6c:	4b1a      	ldr	r3, [pc, #104]	; (8104cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8104c6e:	691b      	ldr	r3, [r3, #16]
 8104c70:	f003 0207 	and.w	r2, r3, #7
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8104c78:	4b17      	ldr	r3, [pc, #92]	; (8104cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8104c7a:	699b      	ldr	r3, [r3, #24]
 8104c7c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8104c84:	4b14      	ldr	r3, [pc, #80]	; (8104cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8104c86:	699b      	ldr	r3, [r3, #24]
 8104c88:	f003 020f 	and.w	r2, r3, #15
 8104c8c:	687b      	ldr	r3, [r7, #4]
 8104c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8104c90:	4b11      	ldr	r3, [pc, #68]	; (8104cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8104c92:	699b      	ldr	r3, [r3, #24]
 8104c94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8104c98:	687b      	ldr	r3, [r7, #4]
 8104c9a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8104c9c:	4b0e      	ldr	r3, [pc, #56]	; (8104cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8104c9e:	69db      	ldr	r3, [r3, #28]
 8104ca0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8104ca8:	4b0b      	ldr	r3, [pc, #44]	; (8104cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8104caa:	69db      	ldr	r3, [r3, #28]
 8104cac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8104cb4:	4b08      	ldr	r3, [pc, #32]	; (8104cd8 <HAL_RCC_GetClockConfig+0x7c>)
 8104cb6:	6a1b      	ldr	r3, [r3, #32]
 8104cb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8104cbc:	687b      	ldr	r3, [r7, #4]
 8104cbe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8104cc0:	4b06      	ldr	r3, [pc, #24]	; (8104cdc <HAL_RCC_GetClockConfig+0x80>)
 8104cc2:	681b      	ldr	r3, [r3, #0]
 8104cc4:	f003 020f 	and.w	r2, r3, #15
 8104cc8:	683b      	ldr	r3, [r7, #0]
 8104cca:	601a      	str	r2, [r3, #0]
}
 8104ccc:	bf00      	nop
 8104cce:	370c      	adds	r7, #12
 8104cd0:	46bd      	mov	sp, r7
 8104cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cd6:	4770      	bx	lr
 8104cd8:	58024400 	.word	0x58024400
 8104cdc:	52002000 	.word	0x52002000

08104ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8104ce0:	b580      	push	{r7, lr}
 8104ce2:	b082      	sub	sp, #8
 8104ce4:	af00      	add	r7, sp, #0
 8104ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8104ce8:	687b      	ldr	r3, [r7, #4]
 8104cea:	2b00      	cmp	r3, #0
 8104cec:	d101      	bne.n	8104cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8104cee:	2301      	movs	r3, #1
 8104cf0:	e049      	b.n	8104d86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8104cf2:	687b      	ldr	r3, [r7, #4]
 8104cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8104cf8:	b2db      	uxtb	r3, r3
 8104cfa:	2b00      	cmp	r3, #0
 8104cfc:	d106      	bne.n	8104d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8104cfe:	687b      	ldr	r3, [r7, #4]
 8104d00:	2200      	movs	r2, #0
 8104d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8104d06:	6878      	ldr	r0, [r7, #4]
 8104d08:	f000 f841 	bl	8104d8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104d0c:	687b      	ldr	r3, [r7, #4]
 8104d0e:	2202      	movs	r2, #2
 8104d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	681a      	ldr	r2, [r3, #0]
 8104d18:	687b      	ldr	r3, [r7, #4]
 8104d1a:	3304      	adds	r3, #4
 8104d1c:	4619      	mov	r1, r3
 8104d1e:	4610      	mov	r0, r2
 8104d20:	f000 f9be 	bl	81050a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8104d24:	687b      	ldr	r3, [r7, #4]
 8104d26:	2201      	movs	r2, #1
 8104d28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104d2c:	687b      	ldr	r3, [r7, #4]
 8104d2e:	2201      	movs	r2, #1
 8104d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	2201      	movs	r2, #1
 8104d38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	2201      	movs	r2, #1
 8104d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	2201      	movs	r2, #1
 8104d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	2201      	movs	r2, #1
 8104d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8104d54:	687b      	ldr	r3, [r7, #4]
 8104d56:	2201      	movs	r2, #1
 8104d58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8104d5c:	687b      	ldr	r3, [r7, #4]
 8104d5e:	2201      	movs	r2, #1
 8104d60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8104d64:	687b      	ldr	r3, [r7, #4]
 8104d66:	2201      	movs	r2, #1
 8104d68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8104d6c:	687b      	ldr	r3, [r7, #4]
 8104d6e:	2201      	movs	r2, #1
 8104d70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8104d74:	687b      	ldr	r3, [r7, #4]
 8104d76:	2201      	movs	r2, #1
 8104d78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8104d7c:	687b      	ldr	r3, [r7, #4]
 8104d7e:	2201      	movs	r2, #1
 8104d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8104d84:	2300      	movs	r3, #0
}
 8104d86:	4618      	mov	r0, r3
 8104d88:	3708      	adds	r7, #8
 8104d8a:	46bd      	mov	sp, r7
 8104d8c:	bd80      	pop	{r7, pc}

08104d8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8104d8e:	b480      	push	{r7}
 8104d90:	b083      	sub	sp, #12
 8104d92:	af00      	add	r7, sp, #0
 8104d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8104d96:	bf00      	nop
 8104d98:	370c      	adds	r7, #12
 8104d9a:	46bd      	mov	sp, r7
 8104d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104da0:	4770      	bx	lr
	...

08104da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8104da4:	b480      	push	{r7}
 8104da6:	b085      	sub	sp, #20
 8104da8:	af00      	add	r7, sp, #0
 8104daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8104dac:	687b      	ldr	r3, [r7, #4]
 8104dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8104db2:	b2db      	uxtb	r3, r3
 8104db4:	2b01      	cmp	r3, #1
 8104db6:	d001      	beq.n	8104dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8104db8:	2301      	movs	r3, #1
 8104dba:	e021      	b.n	8104e00 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8104dbc:	687b      	ldr	r3, [r7, #4]
 8104dbe:	2202      	movs	r2, #2
 8104dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	681b      	ldr	r3, [r3, #0]
 8104dc8:	68da      	ldr	r2, [r3, #12]
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	f042 0201 	orr.w	r2, r2, #1
 8104dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	689a      	ldr	r2, [r3, #8]
 8104dda:	4b0c      	ldr	r3, [pc, #48]	; (8104e0c <HAL_TIM_Base_Start_IT+0x68>)
 8104ddc:	4013      	ands	r3, r2
 8104dde:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8104de0:	68fb      	ldr	r3, [r7, #12]
 8104de2:	2b06      	cmp	r3, #6
 8104de4:	d00b      	beq.n	8104dfe <HAL_TIM_Base_Start_IT+0x5a>
 8104de6:	68fb      	ldr	r3, [r7, #12]
 8104de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104dec:	d007      	beq.n	8104dfe <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	681b      	ldr	r3, [r3, #0]
 8104df2:	681a      	ldr	r2, [r3, #0]
 8104df4:	687b      	ldr	r3, [r7, #4]
 8104df6:	681b      	ldr	r3, [r3, #0]
 8104df8:	f042 0201 	orr.w	r2, r2, #1
 8104dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8104dfe:	2300      	movs	r3, #0
}
 8104e00:	4618      	mov	r0, r3
 8104e02:	3714      	adds	r7, #20
 8104e04:	46bd      	mov	sp, r7
 8104e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e0a:	4770      	bx	lr
 8104e0c:	00010007 	.word	0x00010007

08104e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8104e10:	b580      	push	{r7, lr}
 8104e12:	b082      	sub	sp, #8
 8104e14:	af00      	add	r7, sp, #0
 8104e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8104e18:	687b      	ldr	r3, [r7, #4]
 8104e1a:	681b      	ldr	r3, [r3, #0]
 8104e1c:	691b      	ldr	r3, [r3, #16]
 8104e1e:	f003 0302 	and.w	r3, r3, #2
 8104e22:	2b02      	cmp	r3, #2
 8104e24:	d122      	bne.n	8104e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8104e26:	687b      	ldr	r3, [r7, #4]
 8104e28:	681b      	ldr	r3, [r3, #0]
 8104e2a:	68db      	ldr	r3, [r3, #12]
 8104e2c:	f003 0302 	and.w	r3, r3, #2
 8104e30:	2b02      	cmp	r3, #2
 8104e32:	d11b      	bne.n	8104e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8104e34:	687b      	ldr	r3, [r7, #4]
 8104e36:	681b      	ldr	r3, [r3, #0]
 8104e38:	f06f 0202 	mvn.w	r2, #2
 8104e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8104e3e:	687b      	ldr	r3, [r7, #4]
 8104e40:	2201      	movs	r2, #1
 8104e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8104e44:	687b      	ldr	r3, [r7, #4]
 8104e46:	681b      	ldr	r3, [r3, #0]
 8104e48:	699b      	ldr	r3, [r3, #24]
 8104e4a:	f003 0303 	and.w	r3, r3, #3
 8104e4e:	2b00      	cmp	r3, #0
 8104e50:	d003      	beq.n	8104e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8104e52:	6878      	ldr	r0, [r7, #4]
 8104e54:	f000 f905 	bl	8105062 <HAL_TIM_IC_CaptureCallback>
 8104e58:	e005      	b.n	8104e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8104e5a:	6878      	ldr	r0, [r7, #4]
 8104e5c:	f000 f8f7 	bl	810504e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104e60:	6878      	ldr	r0, [r7, #4]
 8104e62:	f000 f908 	bl	8105076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104e66:	687b      	ldr	r3, [r7, #4]
 8104e68:	2200      	movs	r2, #0
 8104e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8104e6c:	687b      	ldr	r3, [r7, #4]
 8104e6e:	681b      	ldr	r3, [r3, #0]
 8104e70:	691b      	ldr	r3, [r3, #16]
 8104e72:	f003 0304 	and.w	r3, r3, #4
 8104e76:	2b04      	cmp	r3, #4
 8104e78:	d122      	bne.n	8104ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	681b      	ldr	r3, [r3, #0]
 8104e7e:	68db      	ldr	r3, [r3, #12]
 8104e80:	f003 0304 	and.w	r3, r3, #4
 8104e84:	2b04      	cmp	r3, #4
 8104e86:	d11b      	bne.n	8104ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8104e88:	687b      	ldr	r3, [r7, #4]
 8104e8a:	681b      	ldr	r3, [r3, #0]
 8104e8c:	f06f 0204 	mvn.w	r2, #4
 8104e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8104e92:	687b      	ldr	r3, [r7, #4]
 8104e94:	2202      	movs	r2, #2
 8104e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	699b      	ldr	r3, [r3, #24]
 8104e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104ea2:	2b00      	cmp	r3, #0
 8104ea4:	d003      	beq.n	8104eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104ea6:	6878      	ldr	r0, [r7, #4]
 8104ea8:	f000 f8db 	bl	8105062 <HAL_TIM_IC_CaptureCallback>
 8104eac:	e005      	b.n	8104eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104eae:	6878      	ldr	r0, [r7, #4]
 8104eb0:	f000 f8cd 	bl	810504e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104eb4:	6878      	ldr	r0, [r7, #4]
 8104eb6:	f000 f8de 	bl	8105076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104eba:	687b      	ldr	r3, [r7, #4]
 8104ebc:	2200      	movs	r2, #0
 8104ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8104ec0:	687b      	ldr	r3, [r7, #4]
 8104ec2:	681b      	ldr	r3, [r3, #0]
 8104ec4:	691b      	ldr	r3, [r3, #16]
 8104ec6:	f003 0308 	and.w	r3, r3, #8
 8104eca:	2b08      	cmp	r3, #8
 8104ecc:	d122      	bne.n	8104f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8104ece:	687b      	ldr	r3, [r7, #4]
 8104ed0:	681b      	ldr	r3, [r3, #0]
 8104ed2:	68db      	ldr	r3, [r3, #12]
 8104ed4:	f003 0308 	and.w	r3, r3, #8
 8104ed8:	2b08      	cmp	r3, #8
 8104eda:	d11b      	bne.n	8104f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8104edc:	687b      	ldr	r3, [r7, #4]
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	f06f 0208 	mvn.w	r2, #8
 8104ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8104ee6:	687b      	ldr	r3, [r7, #4]
 8104ee8:	2204      	movs	r2, #4
 8104eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	681b      	ldr	r3, [r3, #0]
 8104ef0:	69db      	ldr	r3, [r3, #28]
 8104ef2:	f003 0303 	and.w	r3, r3, #3
 8104ef6:	2b00      	cmp	r3, #0
 8104ef8:	d003      	beq.n	8104f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104efa:	6878      	ldr	r0, [r7, #4]
 8104efc:	f000 f8b1 	bl	8105062 <HAL_TIM_IC_CaptureCallback>
 8104f00:	e005      	b.n	8104f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104f02:	6878      	ldr	r0, [r7, #4]
 8104f04:	f000 f8a3 	bl	810504e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104f08:	6878      	ldr	r0, [r7, #4]
 8104f0a:	f000 f8b4 	bl	8105076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104f0e:	687b      	ldr	r3, [r7, #4]
 8104f10:	2200      	movs	r2, #0
 8104f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8104f14:	687b      	ldr	r3, [r7, #4]
 8104f16:	681b      	ldr	r3, [r3, #0]
 8104f18:	691b      	ldr	r3, [r3, #16]
 8104f1a:	f003 0310 	and.w	r3, r3, #16
 8104f1e:	2b10      	cmp	r3, #16
 8104f20:	d122      	bne.n	8104f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8104f22:	687b      	ldr	r3, [r7, #4]
 8104f24:	681b      	ldr	r3, [r3, #0]
 8104f26:	68db      	ldr	r3, [r3, #12]
 8104f28:	f003 0310 	and.w	r3, r3, #16
 8104f2c:	2b10      	cmp	r3, #16
 8104f2e:	d11b      	bne.n	8104f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8104f30:	687b      	ldr	r3, [r7, #4]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	f06f 0210 	mvn.w	r2, #16
 8104f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8104f3a:	687b      	ldr	r3, [r7, #4]
 8104f3c:	2208      	movs	r2, #8
 8104f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8104f40:	687b      	ldr	r3, [r7, #4]
 8104f42:	681b      	ldr	r3, [r3, #0]
 8104f44:	69db      	ldr	r3, [r3, #28]
 8104f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8104f4a:	2b00      	cmp	r3, #0
 8104f4c:	d003      	beq.n	8104f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8104f4e:	6878      	ldr	r0, [r7, #4]
 8104f50:	f000 f887 	bl	8105062 <HAL_TIM_IC_CaptureCallback>
 8104f54:	e005      	b.n	8104f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8104f56:	6878      	ldr	r0, [r7, #4]
 8104f58:	f000 f879 	bl	810504e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8104f5c:	6878      	ldr	r0, [r7, #4]
 8104f5e:	f000 f88a 	bl	8105076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8104f62:	687b      	ldr	r3, [r7, #4]
 8104f64:	2200      	movs	r2, #0
 8104f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8104f68:	687b      	ldr	r3, [r7, #4]
 8104f6a:	681b      	ldr	r3, [r3, #0]
 8104f6c:	691b      	ldr	r3, [r3, #16]
 8104f6e:	f003 0301 	and.w	r3, r3, #1
 8104f72:	2b01      	cmp	r3, #1
 8104f74:	d10e      	bne.n	8104f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8104f76:	687b      	ldr	r3, [r7, #4]
 8104f78:	681b      	ldr	r3, [r3, #0]
 8104f7a:	68db      	ldr	r3, [r3, #12]
 8104f7c:	f003 0301 	and.w	r3, r3, #1
 8104f80:	2b01      	cmp	r3, #1
 8104f82:	d107      	bne.n	8104f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8104f84:	687b      	ldr	r3, [r7, #4]
 8104f86:	681b      	ldr	r3, [r3, #0]
 8104f88:	f06f 0201 	mvn.w	r2, #1
 8104f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8104f8e:	6878      	ldr	r0, [r7, #4]
 8104f90:	f7fe feba 	bl	8103d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8104f94:	687b      	ldr	r3, [r7, #4]
 8104f96:	681b      	ldr	r3, [r3, #0]
 8104f98:	691b      	ldr	r3, [r3, #16]
 8104f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104f9e:	2b80      	cmp	r3, #128	; 0x80
 8104fa0:	d10e      	bne.n	8104fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104fa2:	687b      	ldr	r3, [r7, #4]
 8104fa4:	681b      	ldr	r3, [r3, #0]
 8104fa6:	68db      	ldr	r3, [r3, #12]
 8104fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104fac:	2b80      	cmp	r3, #128	; 0x80
 8104fae:	d107      	bne.n	8104fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8104fb0:	687b      	ldr	r3, [r7, #4]
 8104fb2:	681b      	ldr	r3, [r3, #0]
 8104fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8104fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8104fba:	6878      	ldr	r0, [r7, #4]
 8104fbc:	f000 f914 	bl	81051e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8104fc0:	687b      	ldr	r3, [r7, #4]
 8104fc2:	681b      	ldr	r3, [r3, #0]
 8104fc4:	691b      	ldr	r3, [r3, #16]
 8104fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104fce:	d10e      	bne.n	8104fee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8104fd0:	687b      	ldr	r3, [r7, #4]
 8104fd2:	681b      	ldr	r3, [r3, #0]
 8104fd4:	68db      	ldr	r3, [r3, #12]
 8104fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104fda:	2b80      	cmp	r3, #128	; 0x80
 8104fdc:	d107      	bne.n	8104fee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8104fde:	687b      	ldr	r3, [r7, #4]
 8104fe0:	681b      	ldr	r3, [r3, #0]
 8104fe2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8104fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8104fe8:	6878      	ldr	r0, [r7, #4]
 8104fea:	f000 f907 	bl	81051fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8104fee:	687b      	ldr	r3, [r7, #4]
 8104ff0:	681b      	ldr	r3, [r3, #0]
 8104ff2:	691b      	ldr	r3, [r3, #16]
 8104ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104ff8:	2b40      	cmp	r3, #64	; 0x40
 8104ffa:	d10e      	bne.n	810501a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8104ffc:	687b      	ldr	r3, [r7, #4]
 8104ffe:	681b      	ldr	r3, [r3, #0]
 8105000:	68db      	ldr	r3, [r3, #12]
 8105002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8105006:	2b40      	cmp	r3, #64	; 0x40
 8105008:	d107      	bne.n	810501a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810500a:	687b      	ldr	r3, [r7, #4]
 810500c:	681b      	ldr	r3, [r3, #0]
 810500e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8105012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8105014:	6878      	ldr	r0, [r7, #4]
 8105016:	f000 f838 	bl	810508a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810501a:	687b      	ldr	r3, [r7, #4]
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	691b      	ldr	r3, [r3, #16]
 8105020:	f003 0320 	and.w	r3, r3, #32
 8105024:	2b20      	cmp	r3, #32
 8105026:	d10e      	bne.n	8105046 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8105028:	687b      	ldr	r3, [r7, #4]
 810502a:	681b      	ldr	r3, [r3, #0]
 810502c:	68db      	ldr	r3, [r3, #12]
 810502e:	f003 0320 	and.w	r3, r3, #32
 8105032:	2b20      	cmp	r3, #32
 8105034:	d107      	bne.n	8105046 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8105036:	687b      	ldr	r3, [r7, #4]
 8105038:	681b      	ldr	r3, [r3, #0]
 810503a:	f06f 0220 	mvn.w	r2, #32
 810503e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8105040:	6878      	ldr	r0, [r7, #4]
 8105042:	f000 f8c7 	bl	81051d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8105046:	bf00      	nop
 8105048:	3708      	adds	r7, #8
 810504a:	46bd      	mov	sp, r7
 810504c:	bd80      	pop	{r7, pc}

0810504e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810504e:	b480      	push	{r7}
 8105050:	b083      	sub	sp, #12
 8105052:	af00      	add	r7, sp, #0
 8105054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8105056:	bf00      	nop
 8105058:	370c      	adds	r7, #12
 810505a:	46bd      	mov	sp, r7
 810505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105060:	4770      	bx	lr

08105062 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8105062:	b480      	push	{r7}
 8105064:	b083      	sub	sp, #12
 8105066:	af00      	add	r7, sp, #0
 8105068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810506a:	bf00      	nop
 810506c:	370c      	adds	r7, #12
 810506e:	46bd      	mov	sp, r7
 8105070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105074:	4770      	bx	lr

08105076 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8105076:	b480      	push	{r7}
 8105078:	b083      	sub	sp, #12
 810507a:	af00      	add	r7, sp, #0
 810507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810507e:	bf00      	nop
 8105080:	370c      	adds	r7, #12
 8105082:	46bd      	mov	sp, r7
 8105084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105088:	4770      	bx	lr

0810508a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810508a:	b480      	push	{r7}
 810508c:	b083      	sub	sp, #12
 810508e:	af00      	add	r7, sp, #0
 8105090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8105092:	bf00      	nop
 8105094:	370c      	adds	r7, #12
 8105096:	46bd      	mov	sp, r7
 8105098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810509c:	4770      	bx	lr
	...

081050a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81050a0:	b480      	push	{r7}
 81050a2:	b085      	sub	sp, #20
 81050a4:	af00      	add	r7, sp, #0
 81050a6:	6078      	str	r0, [r7, #4]
 81050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81050aa:	687b      	ldr	r3, [r7, #4]
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81050b0:	687b      	ldr	r3, [r7, #4]
 81050b2:	4a40      	ldr	r2, [pc, #256]	; (81051b4 <TIM_Base_SetConfig+0x114>)
 81050b4:	4293      	cmp	r3, r2
 81050b6:	d013      	beq.n	81050e0 <TIM_Base_SetConfig+0x40>
 81050b8:	687b      	ldr	r3, [r7, #4]
 81050ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81050be:	d00f      	beq.n	81050e0 <TIM_Base_SetConfig+0x40>
 81050c0:	687b      	ldr	r3, [r7, #4]
 81050c2:	4a3d      	ldr	r2, [pc, #244]	; (81051b8 <TIM_Base_SetConfig+0x118>)
 81050c4:	4293      	cmp	r3, r2
 81050c6:	d00b      	beq.n	81050e0 <TIM_Base_SetConfig+0x40>
 81050c8:	687b      	ldr	r3, [r7, #4]
 81050ca:	4a3c      	ldr	r2, [pc, #240]	; (81051bc <TIM_Base_SetConfig+0x11c>)
 81050cc:	4293      	cmp	r3, r2
 81050ce:	d007      	beq.n	81050e0 <TIM_Base_SetConfig+0x40>
 81050d0:	687b      	ldr	r3, [r7, #4]
 81050d2:	4a3b      	ldr	r2, [pc, #236]	; (81051c0 <TIM_Base_SetConfig+0x120>)
 81050d4:	4293      	cmp	r3, r2
 81050d6:	d003      	beq.n	81050e0 <TIM_Base_SetConfig+0x40>
 81050d8:	687b      	ldr	r3, [r7, #4]
 81050da:	4a3a      	ldr	r2, [pc, #232]	; (81051c4 <TIM_Base_SetConfig+0x124>)
 81050dc:	4293      	cmp	r3, r2
 81050de:	d108      	bne.n	81050f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81050e0:	68fb      	ldr	r3, [r7, #12]
 81050e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81050e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81050e8:	683b      	ldr	r3, [r7, #0]
 81050ea:	685b      	ldr	r3, [r3, #4]
 81050ec:	68fa      	ldr	r2, [r7, #12]
 81050ee:	4313      	orrs	r3, r2
 81050f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81050f2:	687b      	ldr	r3, [r7, #4]
 81050f4:	4a2f      	ldr	r2, [pc, #188]	; (81051b4 <TIM_Base_SetConfig+0x114>)
 81050f6:	4293      	cmp	r3, r2
 81050f8:	d01f      	beq.n	810513a <TIM_Base_SetConfig+0x9a>
 81050fa:	687b      	ldr	r3, [r7, #4]
 81050fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105100:	d01b      	beq.n	810513a <TIM_Base_SetConfig+0x9a>
 8105102:	687b      	ldr	r3, [r7, #4]
 8105104:	4a2c      	ldr	r2, [pc, #176]	; (81051b8 <TIM_Base_SetConfig+0x118>)
 8105106:	4293      	cmp	r3, r2
 8105108:	d017      	beq.n	810513a <TIM_Base_SetConfig+0x9a>
 810510a:	687b      	ldr	r3, [r7, #4]
 810510c:	4a2b      	ldr	r2, [pc, #172]	; (81051bc <TIM_Base_SetConfig+0x11c>)
 810510e:	4293      	cmp	r3, r2
 8105110:	d013      	beq.n	810513a <TIM_Base_SetConfig+0x9a>
 8105112:	687b      	ldr	r3, [r7, #4]
 8105114:	4a2a      	ldr	r2, [pc, #168]	; (81051c0 <TIM_Base_SetConfig+0x120>)
 8105116:	4293      	cmp	r3, r2
 8105118:	d00f      	beq.n	810513a <TIM_Base_SetConfig+0x9a>
 810511a:	687b      	ldr	r3, [r7, #4]
 810511c:	4a29      	ldr	r2, [pc, #164]	; (81051c4 <TIM_Base_SetConfig+0x124>)
 810511e:	4293      	cmp	r3, r2
 8105120:	d00b      	beq.n	810513a <TIM_Base_SetConfig+0x9a>
 8105122:	687b      	ldr	r3, [r7, #4]
 8105124:	4a28      	ldr	r2, [pc, #160]	; (81051c8 <TIM_Base_SetConfig+0x128>)
 8105126:	4293      	cmp	r3, r2
 8105128:	d007      	beq.n	810513a <TIM_Base_SetConfig+0x9a>
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	4a27      	ldr	r2, [pc, #156]	; (81051cc <TIM_Base_SetConfig+0x12c>)
 810512e:	4293      	cmp	r3, r2
 8105130:	d003      	beq.n	810513a <TIM_Base_SetConfig+0x9a>
 8105132:	687b      	ldr	r3, [r7, #4]
 8105134:	4a26      	ldr	r2, [pc, #152]	; (81051d0 <TIM_Base_SetConfig+0x130>)
 8105136:	4293      	cmp	r3, r2
 8105138:	d108      	bne.n	810514c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810513a:	68fb      	ldr	r3, [r7, #12]
 810513c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8105140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8105142:	683b      	ldr	r3, [r7, #0]
 8105144:	68db      	ldr	r3, [r3, #12]
 8105146:	68fa      	ldr	r2, [r7, #12]
 8105148:	4313      	orrs	r3, r2
 810514a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810514c:	68fb      	ldr	r3, [r7, #12]
 810514e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8105152:	683b      	ldr	r3, [r7, #0]
 8105154:	695b      	ldr	r3, [r3, #20]
 8105156:	4313      	orrs	r3, r2
 8105158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810515a:	687b      	ldr	r3, [r7, #4]
 810515c:	68fa      	ldr	r2, [r7, #12]
 810515e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8105160:	683b      	ldr	r3, [r7, #0]
 8105162:	689a      	ldr	r2, [r3, #8]
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8105168:	683b      	ldr	r3, [r7, #0]
 810516a:	681a      	ldr	r2, [r3, #0]
 810516c:	687b      	ldr	r3, [r7, #4]
 810516e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	4a10      	ldr	r2, [pc, #64]	; (81051b4 <TIM_Base_SetConfig+0x114>)
 8105174:	4293      	cmp	r3, r2
 8105176:	d00f      	beq.n	8105198 <TIM_Base_SetConfig+0xf8>
 8105178:	687b      	ldr	r3, [r7, #4]
 810517a:	4a12      	ldr	r2, [pc, #72]	; (81051c4 <TIM_Base_SetConfig+0x124>)
 810517c:	4293      	cmp	r3, r2
 810517e:	d00b      	beq.n	8105198 <TIM_Base_SetConfig+0xf8>
 8105180:	687b      	ldr	r3, [r7, #4]
 8105182:	4a11      	ldr	r2, [pc, #68]	; (81051c8 <TIM_Base_SetConfig+0x128>)
 8105184:	4293      	cmp	r3, r2
 8105186:	d007      	beq.n	8105198 <TIM_Base_SetConfig+0xf8>
 8105188:	687b      	ldr	r3, [r7, #4]
 810518a:	4a10      	ldr	r2, [pc, #64]	; (81051cc <TIM_Base_SetConfig+0x12c>)
 810518c:	4293      	cmp	r3, r2
 810518e:	d003      	beq.n	8105198 <TIM_Base_SetConfig+0xf8>
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	4a0f      	ldr	r2, [pc, #60]	; (81051d0 <TIM_Base_SetConfig+0x130>)
 8105194:	4293      	cmp	r3, r2
 8105196:	d103      	bne.n	81051a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8105198:	683b      	ldr	r3, [r7, #0]
 810519a:	691a      	ldr	r2, [r3, #16]
 810519c:	687b      	ldr	r3, [r7, #4]
 810519e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	2201      	movs	r2, #1
 81051a4:	615a      	str	r2, [r3, #20]
}
 81051a6:	bf00      	nop
 81051a8:	3714      	adds	r7, #20
 81051aa:	46bd      	mov	sp, r7
 81051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051b0:	4770      	bx	lr
 81051b2:	bf00      	nop
 81051b4:	40010000 	.word	0x40010000
 81051b8:	40000400 	.word	0x40000400
 81051bc:	40000800 	.word	0x40000800
 81051c0:	40000c00 	.word	0x40000c00
 81051c4:	40010400 	.word	0x40010400
 81051c8:	40014000 	.word	0x40014000
 81051cc:	40014400 	.word	0x40014400
 81051d0:	40014800 	.word	0x40014800

081051d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81051d4:	b480      	push	{r7}
 81051d6:	b083      	sub	sp, #12
 81051d8:	af00      	add	r7, sp, #0
 81051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81051dc:	bf00      	nop
 81051de:	370c      	adds	r7, #12
 81051e0:	46bd      	mov	sp, r7
 81051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051e6:	4770      	bx	lr

081051e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81051e8:	b480      	push	{r7}
 81051ea:	b083      	sub	sp, #12
 81051ec:	af00      	add	r7, sp, #0
 81051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81051f0:	bf00      	nop
 81051f2:	370c      	adds	r7, #12
 81051f4:	46bd      	mov	sp, r7
 81051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051fa:	4770      	bx	lr

081051fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81051fc:	b480      	push	{r7}
 81051fe:	b083      	sub	sp, #12
 8105200:	af00      	add	r7, sp, #0
 8105202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8105204:	bf00      	nop
 8105206:	370c      	adds	r7, #12
 8105208:	46bd      	mov	sp, r7
 810520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810520e:	4770      	bx	lr

08105210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8105210:	b480      	push	{r7}
 8105212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8105214:	4b0b      	ldr	r3, [pc, #44]	; (8105244 <SystemInit+0x34>)
 8105216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810521a:	4a0a      	ldr	r2, [pc, #40]	; (8105244 <SystemInit+0x34>)
 810521c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8105220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8105224:	4b07      	ldr	r3, [pc, #28]	; (8105244 <SystemInit+0x34>)
 8105226:	691b      	ldr	r3, [r3, #16]
 8105228:	4a06      	ldr	r2, [pc, #24]	; (8105244 <SystemInit+0x34>)
 810522a:	f043 0310 	orr.w	r3, r3, #16
 810522e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8105230:	4b04      	ldr	r3, [pc, #16]	; (8105244 <SystemInit+0x34>)
 8105232:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8105236:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8105238:	bf00      	nop
 810523a:	46bd      	mov	sp, r7
 810523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105240:	4770      	bx	lr
 8105242:	bf00      	nop
 8105244:	e000ed00 	.word	0xe000ed00

08105248 <_ZdlPvj>:
 8105248:	f000 b811 	b.w	810526e <_ZdlPv>

0810524c <_Znwj>:
 810524c:	2801      	cmp	r0, #1
 810524e:	bf38      	it	cc
 8105250:	2001      	movcc	r0, #1
 8105252:	b510      	push	{r4, lr}
 8105254:	4604      	mov	r4, r0
 8105256:	4620      	mov	r0, r4
 8105258:	f000 f840 	bl	81052dc <malloc>
 810525c:	b930      	cbnz	r0, 810526c <_Znwj+0x20>
 810525e:	f000 f809 	bl	8105274 <_ZSt15get_new_handlerv>
 8105262:	b908      	cbnz	r0, 8105268 <_Znwj+0x1c>
 8105264:	f000 f80e 	bl	8105284 <abort>
 8105268:	4780      	blx	r0
 810526a:	e7f4      	b.n	8105256 <_Znwj+0xa>
 810526c:	bd10      	pop	{r4, pc}

0810526e <_ZdlPv>:
 810526e:	f000 b83d 	b.w	81052ec <free>
	...

08105274 <_ZSt15get_new_handlerv>:
 8105274:	4b02      	ldr	r3, [pc, #8]	; (8105280 <_ZSt15get_new_handlerv+0xc>)
 8105276:	6818      	ldr	r0, [r3, #0]
 8105278:	f3bf 8f5b 	dmb	ish
 810527c:	4770      	bx	lr
 810527e:	bf00      	nop
 8105280:	10001890 	.word	0x10001890

08105284 <abort>:
 8105284:	b508      	push	{r3, lr}
 8105286:	2006      	movs	r0, #6
 8105288:	f000 f91a 	bl	81054c0 <raise>
 810528c:	2001      	movs	r0, #1
 810528e:	f7fe fe6f 	bl	8103f70 <_exit>
	...

08105294 <__libc_init_array>:
 8105294:	b570      	push	{r4, r5, r6, lr}
 8105296:	4d0d      	ldr	r5, [pc, #52]	; (81052cc <__libc_init_array+0x38>)
 8105298:	4c0d      	ldr	r4, [pc, #52]	; (81052d0 <__libc_init_array+0x3c>)
 810529a:	1b64      	subs	r4, r4, r5
 810529c:	10a4      	asrs	r4, r4, #2
 810529e:	2600      	movs	r6, #0
 81052a0:	42a6      	cmp	r6, r4
 81052a2:	d109      	bne.n	81052b8 <__libc_init_array+0x24>
 81052a4:	4d0b      	ldr	r5, [pc, #44]	; (81052d4 <__libc_init_array+0x40>)
 81052a6:	4c0c      	ldr	r4, [pc, #48]	; (81052d8 <__libc_init_array+0x44>)
 81052a8:	f000 f942 	bl	8105530 <_init>
 81052ac:	1b64      	subs	r4, r4, r5
 81052ae:	10a4      	asrs	r4, r4, #2
 81052b0:	2600      	movs	r6, #0
 81052b2:	42a6      	cmp	r6, r4
 81052b4:	d105      	bne.n	81052c2 <__libc_init_array+0x2e>
 81052b6:	bd70      	pop	{r4, r5, r6, pc}
 81052b8:	f855 3b04 	ldr.w	r3, [r5], #4
 81052bc:	4798      	blx	r3
 81052be:	3601      	adds	r6, #1
 81052c0:	e7ee      	b.n	81052a0 <__libc_init_array+0xc>
 81052c2:	f855 3b04 	ldr.w	r3, [r5], #4
 81052c6:	4798      	blx	r3
 81052c8:	3601      	adds	r6, #1
 81052ca:	e7f2      	b.n	81052b2 <__libc_init_array+0x1e>
 81052cc:	0810571c 	.word	0x0810571c
 81052d0:	0810571c 	.word	0x0810571c
 81052d4:	0810571c 	.word	0x0810571c
 81052d8:	08105720 	.word	0x08105720

081052dc <malloc>:
 81052dc:	4b02      	ldr	r3, [pc, #8]	; (81052e8 <malloc+0xc>)
 81052de:	4601      	mov	r1, r0
 81052e0:	6818      	ldr	r0, [r3, #0]
 81052e2:	f000 b85b 	b.w	810539c <_malloc_r>
 81052e6:	bf00      	nop
 81052e8:	10001810 	.word	0x10001810

081052ec <free>:
 81052ec:	4b02      	ldr	r3, [pc, #8]	; (81052f8 <free+0xc>)
 81052ee:	4601      	mov	r1, r0
 81052f0:	6818      	ldr	r0, [r3, #0]
 81052f2:	f000 b803 	b.w	81052fc <_free_r>
 81052f6:	bf00      	nop
 81052f8:	10001810 	.word	0x10001810

081052fc <_free_r>:
 81052fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 81052fe:	2900      	cmp	r1, #0
 8105300:	d048      	beq.n	8105394 <_free_r+0x98>
 8105302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8105306:	9001      	str	r0, [sp, #4]
 8105308:	2b00      	cmp	r3, #0
 810530a:	f1a1 0404 	sub.w	r4, r1, #4
 810530e:	bfb8      	it	lt
 8105310:	18e4      	addlt	r4, r4, r3
 8105312:	f000 f8f1 	bl	81054f8 <__malloc_lock>
 8105316:	4a20      	ldr	r2, [pc, #128]	; (8105398 <_free_r+0x9c>)
 8105318:	9801      	ldr	r0, [sp, #4]
 810531a:	6813      	ldr	r3, [r2, #0]
 810531c:	4615      	mov	r5, r2
 810531e:	b933      	cbnz	r3, 810532e <_free_r+0x32>
 8105320:	6063      	str	r3, [r4, #4]
 8105322:	6014      	str	r4, [r2, #0]
 8105324:	b003      	add	sp, #12
 8105326:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810532a:	f000 b8eb 	b.w	8105504 <__malloc_unlock>
 810532e:	42a3      	cmp	r3, r4
 8105330:	d90b      	bls.n	810534a <_free_r+0x4e>
 8105332:	6821      	ldr	r1, [r4, #0]
 8105334:	1862      	adds	r2, r4, r1
 8105336:	4293      	cmp	r3, r2
 8105338:	bf04      	itt	eq
 810533a:	681a      	ldreq	r2, [r3, #0]
 810533c:	685b      	ldreq	r3, [r3, #4]
 810533e:	6063      	str	r3, [r4, #4]
 8105340:	bf04      	itt	eq
 8105342:	1852      	addeq	r2, r2, r1
 8105344:	6022      	streq	r2, [r4, #0]
 8105346:	602c      	str	r4, [r5, #0]
 8105348:	e7ec      	b.n	8105324 <_free_r+0x28>
 810534a:	461a      	mov	r2, r3
 810534c:	685b      	ldr	r3, [r3, #4]
 810534e:	b10b      	cbz	r3, 8105354 <_free_r+0x58>
 8105350:	42a3      	cmp	r3, r4
 8105352:	d9fa      	bls.n	810534a <_free_r+0x4e>
 8105354:	6811      	ldr	r1, [r2, #0]
 8105356:	1855      	adds	r5, r2, r1
 8105358:	42a5      	cmp	r5, r4
 810535a:	d10b      	bne.n	8105374 <_free_r+0x78>
 810535c:	6824      	ldr	r4, [r4, #0]
 810535e:	4421      	add	r1, r4
 8105360:	1854      	adds	r4, r2, r1
 8105362:	42a3      	cmp	r3, r4
 8105364:	6011      	str	r1, [r2, #0]
 8105366:	d1dd      	bne.n	8105324 <_free_r+0x28>
 8105368:	681c      	ldr	r4, [r3, #0]
 810536a:	685b      	ldr	r3, [r3, #4]
 810536c:	6053      	str	r3, [r2, #4]
 810536e:	4421      	add	r1, r4
 8105370:	6011      	str	r1, [r2, #0]
 8105372:	e7d7      	b.n	8105324 <_free_r+0x28>
 8105374:	d902      	bls.n	810537c <_free_r+0x80>
 8105376:	230c      	movs	r3, #12
 8105378:	6003      	str	r3, [r0, #0]
 810537a:	e7d3      	b.n	8105324 <_free_r+0x28>
 810537c:	6825      	ldr	r5, [r4, #0]
 810537e:	1961      	adds	r1, r4, r5
 8105380:	428b      	cmp	r3, r1
 8105382:	bf04      	itt	eq
 8105384:	6819      	ldreq	r1, [r3, #0]
 8105386:	685b      	ldreq	r3, [r3, #4]
 8105388:	6063      	str	r3, [r4, #4]
 810538a:	bf04      	itt	eq
 810538c:	1949      	addeq	r1, r1, r5
 810538e:	6021      	streq	r1, [r4, #0]
 8105390:	6054      	str	r4, [r2, #4]
 8105392:	e7c7      	b.n	8105324 <_free_r+0x28>
 8105394:	b003      	add	sp, #12
 8105396:	bd30      	pop	{r4, r5, pc}
 8105398:	10001894 	.word	0x10001894

0810539c <_malloc_r>:
 810539c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810539e:	1ccd      	adds	r5, r1, #3
 81053a0:	f025 0503 	bic.w	r5, r5, #3
 81053a4:	3508      	adds	r5, #8
 81053a6:	2d0c      	cmp	r5, #12
 81053a8:	bf38      	it	cc
 81053aa:	250c      	movcc	r5, #12
 81053ac:	2d00      	cmp	r5, #0
 81053ae:	4606      	mov	r6, r0
 81053b0:	db01      	blt.n	81053b6 <_malloc_r+0x1a>
 81053b2:	42a9      	cmp	r1, r5
 81053b4:	d903      	bls.n	81053be <_malloc_r+0x22>
 81053b6:	230c      	movs	r3, #12
 81053b8:	6033      	str	r3, [r6, #0]
 81053ba:	2000      	movs	r0, #0
 81053bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81053be:	f000 f89b 	bl	81054f8 <__malloc_lock>
 81053c2:	4921      	ldr	r1, [pc, #132]	; (8105448 <_malloc_r+0xac>)
 81053c4:	680a      	ldr	r2, [r1, #0]
 81053c6:	4614      	mov	r4, r2
 81053c8:	b99c      	cbnz	r4, 81053f2 <_malloc_r+0x56>
 81053ca:	4f20      	ldr	r7, [pc, #128]	; (810544c <_malloc_r+0xb0>)
 81053cc:	683b      	ldr	r3, [r7, #0]
 81053ce:	b923      	cbnz	r3, 81053da <_malloc_r+0x3e>
 81053d0:	4621      	mov	r1, r4
 81053d2:	4630      	mov	r0, r6
 81053d4:	f000 f83c 	bl	8105450 <_sbrk_r>
 81053d8:	6038      	str	r0, [r7, #0]
 81053da:	4629      	mov	r1, r5
 81053dc:	4630      	mov	r0, r6
 81053de:	f000 f837 	bl	8105450 <_sbrk_r>
 81053e2:	1c43      	adds	r3, r0, #1
 81053e4:	d123      	bne.n	810542e <_malloc_r+0x92>
 81053e6:	230c      	movs	r3, #12
 81053e8:	6033      	str	r3, [r6, #0]
 81053ea:	4630      	mov	r0, r6
 81053ec:	f000 f88a 	bl	8105504 <__malloc_unlock>
 81053f0:	e7e3      	b.n	81053ba <_malloc_r+0x1e>
 81053f2:	6823      	ldr	r3, [r4, #0]
 81053f4:	1b5b      	subs	r3, r3, r5
 81053f6:	d417      	bmi.n	8105428 <_malloc_r+0x8c>
 81053f8:	2b0b      	cmp	r3, #11
 81053fa:	d903      	bls.n	8105404 <_malloc_r+0x68>
 81053fc:	6023      	str	r3, [r4, #0]
 81053fe:	441c      	add	r4, r3
 8105400:	6025      	str	r5, [r4, #0]
 8105402:	e004      	b.n	810540e <_malloc_r+0x72>
 8105404:	6863      	ldr	r3, [r4, #4]
 8105406:	42a2      	cmp	r2, r4
 8105408:	bf0c      	ite	eq
 810540a:	600b      	streq	r3, [r1, #0]
 810540c:	6053      	strne	r3, [r2, #4]
 810540e:	4630      	mov	r0, r6
 8105410:	f000 f878 	bl	8105504 <__malloc_unlock>
 8105414:	f104 000b 	add.w	r0, r4, #11
 8105418:	1d23      	adds	r3, r4, #4
 810541a:	f020 0007 	bic.w	r0, r0, #7
 810541e:	1ac2      	subs	r2, r0, r3
 8105420:	d0cc      	beq.n	81053bc <_malloc_r+0x20>
 8105422:	1a1b      	subs	r3, r3, r0
 8105424:	50a3      	str	r3, [r4, r2]
 8105426:	e7c9      	b.n	81053bc <_malloc_r+0x20>
 8105428:	4622      	mov	r2, r4
 810542a:	6864      	ldr	r4, [r4, #4]
 810542c:	e7cc      	b.n	81053c8 <_malloc_r+0x2c>
 810542e:	1cc4      	adds	r4, r0, #3
 8105430:	f024 0403 	bic.w	r4, r4, #3
 8105434:	42a0      	cmp	r0, r4
 8105436:	d0e3      	beq.n	8105400 <_malloc_r+0x64>
 8105438:	1a21      	subs	r1, r4, r0
 810543a:	4630      	mov	r0, r6
 810543c:	f000 f808 	bl	8105450 <_sbrk_r>
 8105440:	3001      	adds	r0, #1
 8105442:	d1dd      	bne.n	8105400 <_malloc_r+0x64>
 8105444:	e7cf      	b.n	81053e6 <_malloc_r+0x4a>
 8105446:	bf00      	nop
 8105448:	10001894 	.word	0x10001894
 810544c:	10001898 	.word	0x10001898

08105450 <_sbrk_r>:
 8105450:	b538      	push	{r3, r4, r5, lr}
 8105452:	4d06      	ldr	r5, [pc, #24]	; (810546c <_sbrk_r+0x1c>)
 8105454:	2300      	movs	r3, #0
 8105456:	4604      	mov	r4, r0
 8105458:	4608      	mov	r0, r1
 810545a:	602b      	str	r3, [r5, #0]
 810545c:	f7fe fd64 	bl	8103f28 <_sbrk>
 8105460:	1c43      	adds	r3, r0, #1
 8105462:	d102      	bne.n	810546a <_sbrk_r+0x1a>
 8105464:	682b      	ldr	r3, [r5, #0]
 8105466:	b103      	cbz	r3, 810546a <_sbrk_r+0x1a>
 8105468:	6023      	str	r3, [r4, #0]
 810546a:	bd38      	pop	{r3, r4, r5, pc}
 810546c:	100018ec 	.word	0x100018ec

08105470 <_raise_r>:
 8105470:	291f      	cmp	r1, #31
 8105472:	b538      	push	{r3, r4, r5, lr}
 8105474:	4604      	mov	r4, r0
 8105476:	460d      	mov	r5, r1
 8105478:	d904      	bls.n	8105484 <_raise_r+0x14>
 810547a:	2316      	movs	r3, #22
 810547c:	6003      	str	r3, [r0, #0]
 810547e:	f04f 30ff 	mov.w	r0, #4294967295
 8105482:	bd38      	pop	{r3, r4, r5, pc}
 8105484:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8105486:	b112      	cbz	r2, 810548e <_raise_r+0x1e>
 8105488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810548c:	b94b      	cbnz	r3, 81054a2 <_raise_r+0x32>
 810548e:	4620      	mov	r0, r4
 8105490:	f000 f830 	bl	81054f4 <_getpid_r>
 8105494:	462a      	mov	r2, r5
 8105496:	4601      	mov	r1, r0
 8105498:	4620      	mov	r0, r4
 810549a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810549e:	f000 b817 	b.w	81054d0 <_kill_r>
 81054a2:	2b01      	cmp	r3, #1
 81054a4:	d00a      	beq.n	81054bc <_raise_r+0x4c>
 81054a6:	1c59      	adds	r1, r3, #1
 81054a8:	d103      	bne.n	81054b2 <_raise_r+0x42>
 81054aa:	2316      	movs	r3, #22
 81054ac:	6003      	str	r3, [r0, #0]
 81054ae:	2001      	movs	r0, #1
 81054b0:	e7e7      	b.n	8105482 <_raise_r+0x12>
 81054b2:	2400      	movs	r4, #0
 81054b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 81054b8:	4628      	mov	r0, r5
 81054ba:	4798      	blx	r3
 81054bc:	2000      	movs	r0, #0
 81054be:	e7e0      	b.n	8105482 <_raise_r+0x12>

081054c0 <raise>:
 81054c0:	4b02      	ldr	r3, [pc, #8]	; (81054cc <raise+0xc>)
 81054c2:	4601      	mov	r1, r0
 81054c4:	6818      	ldr	r0, [r3, #0]
 81054c6:	f7ff bfd3 	b.w	8105470 <_raise_r>
 81054ca:	bf00      	nop
 81054cc:	10001810 	.word	0x10001810

081054d0 <_kill_r>:
 81054d0:	b538      	push	{r3, r4, r5, lr}
 81054d2:	4d07      	ldr	r5, [pc, #28]	; (81054f0 <_kill_r+0x20>)
 81054d4:	2300      	movs	r3, #0
 81054d6:	4604      	mov	r4, r0
 81054d8:	4608      	mov	r0, r1
 81054da:	4611      	mov	r1, r2
 81054dc:	602b      	str	r3, [r5, #0]
 81054de:	f7fe fd3b 	bl	8103f58 <_kill>
 81054e2:	1c43      	adds	r3, r0, #1
 81054e4:	d102      	bne.n	81054ec <_kill_r+0x1c>
 81054e6:	682b      	ldr	r3, [r5, #0]
 81054e8:	b103      	cbz	r3, 81054ec <_kill_r+0x1c>
 81054ea:	6023      	str	r3, [r4, #0]
 81054ec:	bd38      	pop	{r3, r4, r5, pc}
 81054ee:	bf00      	nop
 81054f0:	100018ec 	.word	0x100018ec

081054f4 <_getpid_r>:
 81054f4:	f7fe bd28 	b.w	8103f48 <_getpid>

081054f8 <__malloc_lock>:
 81054f8:	4801      	ldr	r0, [pc, #4]	; (8105500 <__malloc_lock+0x8>)
 81054fa:	f000 b809 	b.w	8105510 <__retarget_lock_acquire_recursive>
 81054fe:	bf00      	nop
 8105500:	100018f4 	.word	0x100018f4

08105504 <__malloc_unlock>:
 8105504:	4801      	ldr	r0, [pc, #4]	; (810550c <__malloc_unlock+0x8>)
 8105506:	f000 b804 	b.w	8105512 <__retarget_lock_release_recursive>
 810550a:	bf00      	nop
 810550c:	100018f4 	.word	0x100018f4

08105510 <__retarget_lock_acquire_recursive>:
 8105510:	4770      	bx	lr

08105512 <__retarget_lock_release_recursive>:
 8105512:	4770      	bx	lr

08105514 <memcpy>:
 8105514:	440a      	add	r2, r1
 8105516:	4291      	cmp	r1, r2
 8105518:	f100 33ff 	add.w	r3, r0, #4294967295
 810551c:	d100      	bne.n	8105520 <memcpy+0xc>
 810551e:	4770      	bx	lr
 8105520:	b510      	push	{r4, lr}
 8105522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8105526:	f803 4f01 	strb.w	r4, [r3, #1]!
 810552a:	4291      	cmp	r1, r2
 810552c:	d1f9      	bne.n	8105522 <memcpy+0xe>
 810552e:	bd10      	pop	{r4, pc}

08105530 <_init>:
 8105530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8105532:	bf00      	nop
 8105534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105536:	bc08      	pop	{r3}
 8105538:	469e      	mov	lr, r3
 810553a:	4770      	bx	lr

0810553c <_fini>:
 810553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810553e:	bf00      	nop
 8105540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8105542:	bc08      	pop	{r3}
 8105544:	469e      	mov	lr, r3
 8105546:	4770      	bx	lr
