
../../../../../../Cosmos/generated/build/system/CM4/bin/CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .program_default_CM7_section_init 00000008  20001000  08100298  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .program_default_CM7_section_noInit 00000000  20001008  20001008  000702fc  2**0
                  CONTENTS
  3 .program_blinking_led_CM7_section_init 0000001c  20001400  081002a0  00021400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .program_blinking_led_CM7_section_noInit 00000000  2000141c  2000141c  000702fc  2**0
                  CONTENTS
  5 .program_default_CM4_section_init 00000008  10001400  081002bc  00031400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .program_default_CM4_section_noInit 00000000  10001408  10001408  000702fc  2**0
                  CONTENTS
  7 .program_blinking_led_CM4_section_init 00000018  10001800  081002c4  00031800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .program_blinking_led_CM4_section_noInit 00000000  10001818  10001818  000702fc  2**0
                  CONTENTS
  9 .os_section_consts 00000800  38000000  081002dc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .os_section_vars 00000400  38008000  08100adc  00048000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .os_section_funcs 00003124  08100edc  08100edc  00050edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .application_section_funcs_CM7 00000270  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .application_section_funcs_CM4 000002fc  08180000  08180000  00070000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text         00002af4  08104000  08104000  00054000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .rodata       00000068  08106af4  08106af4  00056af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .ARM.extab    00000054  08106b5c  08106b5c  00056b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .ARM          000000e8  08106bb0  08106bb0  00056bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .init_array   00000004  08106c98  08106c98  00056c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 19 .fini_array   00000004  08106c9c  08106c9c  00056c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 20 .data         00000074  10002000  08106ca0  00062000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .bss          0000008c  10002074  08106d14  00062074  2**2
                  ALLOC
 22 .ARM.attributes 0000002e  00000000  00000000  000702fc  2**0
                  CONTENTS, READONLY
 23 .debug_line   00029e21  00000000  00000000  0007032a  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_info   00042a58  00000000  00000000  0009a14b  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_abbrev 00008935  00000000  00000000  000dcba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_aranges 000016b0  00000000  00000000  000e54d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    00193754  00000000  00000000  000e6b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_ranges 000011d0  00000000  00000000  0027a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_macro  000460a2  00000000  00000000  0027b4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .comment      00000079  00000000  00000000  002c1552  2**0
                  CONTENTS, READONLY
 31 .debug_frame  00004b48  00000000  00000000  002c15cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 32 .stabstr      00000076  00000000  00000000  002c6114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .os_section_funcs:

08100edc <alarm_expire>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void alarm_expire(CosmOS_AlarmVariableType *alarmVar)
{
 8100edc:	b480      	push	{r7}
 8100ede:	b08b      	sub	sp, #44	; 0x2c
 8100ee0:	af00      	add	r7, sp, #0
 8100ee2:	6078      	str	r0, [r7, #4]
 8100ee4:	687b      	ldr	r3, [r7, #4]
 8100ee6:	60bb      	str	r3, [r7, #8]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * alarm_getAlarmSchedulable(CosmOS_AlarmVariableType * alarm)
{
    return (CosmOS_SchedulableVariableType *)(alarm->cfg->schedulableVar);
 8100ee8:	68bb      	ldr	r3, [r7, #8]
 8100eea:	681b      	ldr	r3, [r3, #0]
 8100eec:	681b      	ldr	r3, [r3, #0]
	CosmOS_SchedulableVariableType * schedulableVar;


	schedulableVar = alarm_getAlarmSchedulable(alarmVar);
 8100eee:	627b      	str	r3, [r7, #36]	; 0x24
 8100ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100ef2:	613b      	str	r3, [r7, #16]
 8100ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8100ef8:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_SchedulableStateType
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setState(CosmOS_SchedulableVariableType * schedulable, CosmOS_SchedulableStateType stateParam)
{
    schedulable->state = stateParam;
 8100efa:	693b      	ldr	r3, [r7, #16]
 8100efc:	68fa      	ldr	r2, [r7, #12]
 8100efe:	605a      	str	r2, [r3, #4]
}
 8100f00:	bf00      	nop
 8100f02:	687b      	ldr	r3, [r7, #4]
 8100f04:	61bb      	str	r3, [r7, #24]
 8100f06:	2300      	movs	r3, #0
 8100f08:	617b      	str	r3, [r7, #20]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void alarm_setAlarmState(CosmOS_AlarmVariableType * alarm, CosmOS_AlarmStateType stateParam)
{
    alarm->state = stateParam;
 8100f0a:	69bb      	ldr	r3, [r7, #24]
 8100f0c:	697a      	ldr	r2, [r7, #20]
 8100f0e:	605a      	str	r2, [r3, #4]
}
 8100f10:	bf00      	nop
 8100f12:	687b      	ldr	r3, [r7, #4]
 8100f14:	623b      	str	r3, [r7, #32]
 8100f16:	2300      	movs	r3, #0
 8100f18:	61fb      	str	r3, [r7, #28]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void alarm_setAlarmTickCount(CosmOS_AlarmVariableType * alarm, BitWidthType tickCountParam)
{
    alarm->tickCount = tickCountParam;
 8100f1a:	6a3b      	ldr	r3, [r7, #32]
 8100f1c:	69fa      	ldr	r2, [r7, #28]
 8100f1e:	609a      	str	r2, [r3, #8]
}
 8100f20:	bf00      	nop

	schedulable_setState(schedulableVar, SCHEDULABLE_STATE_ENUM__READY);
	alarm_setAlarmState(alarmVar,ALARM_STATE_ENUM__DISABLED);
	alarm_setAlarmTickCount(alarmVar,0);
};
 8100f22:	bf00      	nop
 8100f24:	372c      	adds	r7, #44	; 0x2c
 8100f26:	46bd      	mov	sp, r7
 8100f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f2c:	4770      	bx	lr

08100f2e <buffer_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_readArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8100f2e:	b580      	push	{r7, lr}
 8100f30:	b098      	sub	sp, #96	; 0x60
 8100f32:	af00      	add	r7, sp, #0
 8100f34:	60f8      	str	r0, [r7, #12]
 8100f36:	60b9      	str	r1, [r7, #8]
 8100f38:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8100f3a:	f000 fd85 	bl	8101a48 <os_getOsVar>
 8100f3e:	64f8      	str	r0, [r7, #76]	; 0x4c
  * @return CosmOS_CoreVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_CoreVariableType * CILcore_getCoreVar(void)
{
    uint32_t result;
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8100f40:	464b      	mov	r3, r9
 8100f42:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8100f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8100f46:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8100f48:	687a      	ldr	r2, [r7, #4]
 8100f4a:	68b9      	ldr	r1, [r7, #8]
 8100f4c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8100f4e:	f000 fba6 	bl	810169e <memoryProtection_isMemoryRegionProtected>
 8100f52:	4603      	mov	r3, r0
 8100f54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8100f58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8100f5c:	2b00      	cmp	r3, #0
 8100f5e:	d003      	beq.n	8100f68 <buffer_readArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8100f60:	2305      	movs	r3, #5
 8100f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8100f66:	e069      	b.n	810103c <buffer_readArray+0x10e>
 8100f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8100f6a:	623b      	str	r3, [r7, #32]
 8100f6c:	68fb      	ldr	r3, [r7, #12]
 8100f6e:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * os_getOsBufferVar(CosmOS_OsVariableType * osVar, BitWidthType bufferId)
{
    return (&(osVar->bufferVars[bufferId]));
 8100f70:	6a3b      	ldr	r3, [r7, #32]
 8100f72:	689a      	ldr	r2, [r3, #8]
 8100f74:	69fb      	ldr	r3, [r7, #28]
 8100f76:	011b      	lsls	r3, r3, #4
 8100f78:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * readPermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8100f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8100f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100f7e:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_PermissionsConfigurationType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_PermissionsConfigurationType * buffer_getBufferReadPermission(CosmOS_BufferVariableType * bufferVar)
{
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->readPermission);
 8100f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8100f82:	681b      	ldr	r3, [r3, #0]
 8100f84:	68db      	ldr	r3, [r3, #12]

        readPermission = buffer_getBufferReadPermission( bufferVar );
 8100f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( readPermission, coreVar );
 8100f88:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8100f8a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8100f8c:	f000 fe3c 	bl	8101c08 <permission_tryAccess>
 8100f90:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8100f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8100f98:	d103      	bne.n	8100fa2 <buffer_readArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8100f9a:	2303      	movs	r3, #3
 8100f9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8100fa0:	e04c      	b.n	810103c <buffer_readArray+0x10e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100fa2:	b672      	cpsid	i
}
 8100fa4:	bf00      	nop
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void CILinterrupt_disableInterrupts(void)
{
		__disable_irq();
}
 8100fa6:	bf00      	nop
 8100fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100faa:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 8100fac:	69bb      	ldr	r3, [r7, #24]
 8100fae:	681b      	ldr	r3, [r3, #0]
 8100fb0:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8100fb2:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 8100fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8100fb6:	2b00      	cmp	r3, #0
 8100fb8:	d00a      	beq.n	8100fd0 <buffer_readArray+0xa2>
 8100fba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100fbc:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8100fbe:	697b      	ldr	r3, [r7, #20]
 8100fc0:	681b      	ldr	r3, [r3, #0]
 8100fc2:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 8100fc4:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 8100fc6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8100fc8:	f001 fb47 	bl	810265a <spinlock_trySpinlock>
 8100fcc:	6578      	str	r0, [r7, #84]	; 0x54
 8100fce:	e001      	b.n	8100fd4 <buffer_readArray+0xa6>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8100fd0:	2302      	movs	r3, #2
 8100fd2:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8100fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8100fd6:	2b02      	cmp	r3, #2
 8100fd8:	d12a      	bne.n	8101030 <buffer_readArray+0x102>
 8100fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8100fdc:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getFullCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return (bufferVar->fullCells);
 8100fde:	693b      	ldr	r3, [r7, #16]
 8100fe0:	68db      	ldr	r3, [r3, #12]
			{
				fullCellsNum = buffer_getFullCellsNum( bufferVar );
 8100fe2:	633b      	str	r3, [r7, #48]	; 0x30

				if ( fullCellsNum >= size)
 8100fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8100fe6:	687b      	ldr	r3, [r7, #4]
 8100fe8:	429a      	cmp	r2, r3
 8100fea:	d316      	bcc.n	810101a <buffer_readArray+0xec>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 8100fec:	68bb      	ldr	r3, [r7, #8]
 8100fee:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8100ff0:	2300      	movs	r3, #0
 8100ff2:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8100ff4:	e00c      	b.n	8101010 <buffer_readArray+0xe2>
					{
						bufferState = buffer_pull( bufferVar, ( userBuffer + userBufferIndex ) );
 8100ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8100ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8100ffa:	4413      	add	r3, r2
 8100ffc:	4619      	mov	r1, r3
 8100ffe:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8101000:	f000 f8b4 	bl	810116c <buffer_pull>
 8101004:	4603      	mov	r3, r0
 8101006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 810100a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810100c:	3301      	adds	r3, #1
 810100e:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 8101010:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101012:	687b      	ldr	r3, [r7, #4]
 8101014:	429a      	cmp	r2, r3
 8101016:	d3ee      	bcc.n	8100ff6 <buffer_readArray+0xc8>
 8101018:	e002      	b.n	8101020 <buffer_readArray+0xf2>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM;
 810101a:	2307      	movs	r3, #7
 810101c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 8101020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101022:	2b00      	cmp	r3, #0
 8101024:	d007      	beq.n	8101036 <buffer_readArray+0x108>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 8101026:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8101028:	f001 fb56 	bl	81026d8 <spinlock_releaseSpinlock>
 810102c:	6578      	str	r0, [r7, #84]	; 0x54
 810102e:	e002      	b.n	8101036 <buffer_readArray+0x108>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 8101030:	2304      	movs	r3, #4
 8101032:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 8101036:	b662      	cpsie	i
}
 8101038:	bf00      	nop
}
 810103a:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 810103c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8101040:	4618      	mov	r0, r3
 8101042:	3760      	adds	r7, #96	; 0x60
 8101044:	46bd      	mov	sp, r7
 8101046:	bd80      	pop	{r7, pc}

08101048 <buffer_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_writeArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8101048:	b580      	push	{r7, lr}
 810104a:	b098      	sub	sp, #96	; 0x60
 810104c:	af00      	add	r7, sp, #0
 810104e:	60f8      	str	r0, [r7, #12]
 8101050:	60b9      	str	r1, [r7, #8]
 8101052:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8101054:	f000 fcf8 	bl	8101a48 <os_getOsVar>
 8101058:	64f8      	str	r0, [r7, #76]	; 0x4c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 810105a:	464b      	mov	r3, r9
 810105c:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 810105e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8101060:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8101062:	687a      	ldr	r2, [r7, #4]
 8101064:	68b9      	ldr	r1, [r7, #8]
 8101066:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8101068:	f000 fb19 	bl	810169e <memoryProtection_isMemoryRegionProtected>
 810106c:	4603      	mov	r3, r0
 810106e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8101072:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8101076:	2b00      	cmp	r3, #0
 8101078:	d003      	beq.n	8101082 <buffer_writeArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 810107a:	2305      	movs	r3, #5
 810107c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101080:	e06e      	b.n	8101160 <buffer_writeArray+0x118>
 8101082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101084:	623b      	str	r3, [r7, #32]
 8101086:	68fb      	ldr	r3, [r7, #12]
 8101088:	61fb      	str	r3, [r7, #28]
 810108a:	6a3b      	ldr	r3, [r7, #32]
 810108c:	689a      	ldr	r2, [r3, #8]
 810108e:	69fb      	ldr	r3, [r7, #28]
 8101090:	011b      	lsls	r3, r3, #4
 8101092:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * writePermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8101094:	643b      	str	r3, [r7, #64]	; 0x40
 8101096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101098:	627b      	str	r3, [r7, #36]	; 0x24
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->writePermission);
 810109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810109c:	681b      	ldr	r3, [r3, #0]
 810109e:	691b      	ldr	r3, [r3, #16]

        writePermission = buffer_getBufferWritePermission( bufferVar );
 81010a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( writePermission, coreVar );
 81010a2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 81010a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 81010a6:	f000 fdaf 	bl	8101c08 <permission_tryAccess>
 81010aa:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 81010ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81010ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 81010b2:	d103      	bne.n	81010bc <buffer_writeArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 81010b4:	2303      	movs	r3, #3
 81010b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 81010ba:	e051      	b.n	8101160 <buffer_writeArray+0x118>
  __ASM volatile ("cpsid i" : : : "memory");
 81010bc:	b672      	cpsid	i
}
 81010be:	bf00      	nop
}
 81010c0:	bf00      	nop
 81010c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81010c4:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 81010c6:	69bb      	ldr	r3, [r7, #24]
 81010c8:	681b      	ldr	r3, [r3, #0]
 81010ca:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 81010cc:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 81010ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81010d0:	2b00      	cmp	r3, #0
 81010d2:	d00a      	beq.n	81010ea <buffer_writeArray+0xa2>
 81010d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81010d6:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 81010d8:	697b      	ldr	r3, [r7, #20]
 81010da:	681b      	ldr	r3, [r3, #0]
 81010dc:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 81010de:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 81010e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 81010e2:	f001 faba 	bl	810265a <spinlock_trySpinlock>
 81010e6:	6578      	str	r0, [r7, #84]	; 0x54
 81010e8:	e001      	b.n	81010ee <buffer_writeArray+0xa6>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 81010ea:	2302      	movs	r3, #2
 81010ec:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 81010ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81010f0:	2b02      	cmp	r3, #2
 81010f2:	d12f      	bne.n	8101154 <buffer_writeArray+0x10c>
 81010f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81010f6:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getEmptyCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return ((bufferVar->cfg->size) - (bufferVar->fullCells));
 81010f8:	693b      	ldr	r3, [r7, #16]
 81010fa:	681b      	ldr	r3, [r3, #0]
 81010fc:	689a      	ldr	r2, [r3, #8]
 81010fe:	693b      	ldr	r3, [r7, #16]
 8101100:	68db      	ldr	r3, [r3, #12]
 8101102:	1ad3      	subs	r3, r2, r3
			{
				emptyCellsNum = buffer_getEmptyCellsNum( bufferVar );
 8101104:	633b      	str	r3, [r7, #48]	; 0x30

				if ( emptyCellsNum >= size)
 8101106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101108:	687b      	ldr	r3, [r7, #4]
 810110a:	429a      	cmp	r2, r3
 810110c:	d317      	bcc.n	810113e <buffer_writeArray+0xf6>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 810110e:	68bb      	ldr	r3, [r7, #8]
 8101110:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8101112:	2300      	movs	r3, #0
 8101114:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8101116:	e00d      	b.n	8101134 <buffer_writeArray+0xec>
					{
            	        bufferState = buffer_push( bufferVar, *( userBuffer + userBufferIndex ) );
 8101118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810111a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810111c:	4413      	add	r3, r2
 810111e:	781b      	ldrb	r3, [r3, #0]
 8101120:	4619      	mov	r1, r3
 8101122:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8101124:	f000 f85c 	bl	81011e0 <buffer_push>
 8101128:	4603      	mov	r3, r0
 810112a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 810112e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101130:	3301      	adds	r3, #1
 8101132:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 8101134:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101136:	687b      	ldr	r3, [r7, #4]
 8101138:	429a      	cmp	r2, r3
 810113a:	d3ed      	bcc.n	8101118 <buffer_writeArray+0xd0>
 810113c:	e002      	b.n	8101144 <buffer_writeArray+0xfc>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS;
 810113e:	2306      	movs	r3, #6
 8101140:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 8101144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101146:	2b00      	cmp	r3, #0
 8101148:	d007      	beq.n	810115a <buffer_writeArray+0x112>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 810114a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 810114c:	f001 fac4 	bl	81026d8 <spinlock_releaseSpinlock>
 8101150:	6578      	str	r0, [r7, #84]	; 0x54
 8101152:	e002      	b.n	810115a <buffer_writeArray+0x112>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 8101154:	2304      	movs	r3, #4
 8101156:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 810115a:	b662      	cpsie	i
}
 810115c:	bf00      	nop
}
 810115e:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8101160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8101164:	4618      	mov	r0, r3
 8101166:	3760      	adds	r7, #96	; 0x60
 8101168:	46bd      	mov	sp, r7
 810116a:	bd80      	pop	{r7, pc}

0810116c <buffer_pull>:
{
 810116c:	b480      	push	{r7}
 810116e:	b089      	sub	sp, #36	; 0x24
 8101170:	af00      	add	r7, sp, #0
 8101172:	6078      	str	r0, [r7, #4]
 8101174:	6039      	str	r1, [r7, #0]
 8101176:	687b      	ldr	r3, [r7, #4]
 8101178:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 810117a:	68bb      	ldr	r3, [r7, #8]
 810117c:	681b      	ldr	r3, [r3, #0]
 810117e:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8101180:	61fb      	str	r3, [r7, #28]
 8101182:	687b      	ldr	r3, [r7, #4]
 8101184:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8101186:	68fb      	ldr	r3, [r7, #12]
 8101188:	681b      	ldr	r3, [r3, #0]
 810118a:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 810118c:	61bb      	str	r3, [r7, #24]
    *data = *( osBuffer + bufferVar->tail );
 810118e:	687b      	ldr	r3, [r7, #4]
 8101190:	689b      	ldr	r3, [r3, #8]
 8101192:	69ba      	ldr	r2, [r7, #24]
 8101194:	4413      	add	r3, r2
 8101196:	781a      	ldrb	r2, [r3, #0]
 8101198:	683b      	ldr	r3, [r7, #0]
 810119a:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells--;
 810119c:	687b      	ldr	r3, [r7, #4]
 810119e:	68db      	ldr	r3, [r3, #12]
 81011a0:	1e5a      	subs	r2, r3, #1
 81011a2:	687b      	ldr	r3, [r7, #4]
 81011a4:	60da      	str	r2, [r3, #12]
    bufferVar->tail = ( ( bufferVar->tail + 1 ) % bufferSize );
 81011a6:	687b      	ldr	r3, [r7, #4]
 81011a8:	689b      	ldr	r3, [r3, #8]
 81011aa:	3301      	adds	r3, #1
 81011ac:	69fa      	ldr	r2, [r7, #28]
 81011ae:	fbb3 f2f2 	udiv	r2, r3, r2
 81011b2:	69f9      	ldr	r1, [r7, #28]
 81011b4:	fb01 f202 	mul.w	r2, r1, r2
 81011b8:	1a9a      	subs	r2, r3, r2
 81011ba:	687b      	ldr	r3, [r7, #4]
 81011bc:	609a      	str	r2, [r3, #8]
 81011be:	687b      	ldr	r3, [r7, #4]
 81011c0:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isEmpty(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT(bufferVar->fullCells) ? BUFFER_STATE_ENUM__EMPTY : BUFFER_STATE_ENUM__OK);
 81011c2:	693b      	ldr	r3, [r7, #16]
 81011c4:	68db      	ldr	r3, [r3, #12]
 81011c6:	2b00      	cmp	r3, #0
 81011c8:	bf0c      	ite	eq
 81011ca:	2301      	moveq	r3, #1
 81011cc:	2300      	movne	r3, #0
 81011ce:	b2db      	uxtb	r3, r3
    bufferState = buffer_isEmpty( bufferVar );
 81011d0:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 81011d2:	7dfb      	ldrb	r3, [r7, #23]
}
 81011d4:	4618      	mov	r0, r3
 81011d6:	3724      	adds	r7, #36	; 0x24
 81011d8:	46bd      	mov	sp, r7
 81011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011de:	4770      	bx	lr

081011e0 <buffer_push>:
{
 81011e0:	b480      	push	{r7}
 81011e2:	b089      	sub	sp, #36	; 0x24
 81011e4:	af00      	add	r7, sp, #0
 81011e6:	6078      	str	r0, [r7, #4]
 81011e8:	460b      	mov	r3, r1
 81011ea:	70fb      	strb	r3, [r7, #3]
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 81011f0:	68bb      	ldr	r3, [r7, #8]
 81011f2:	681b      	ldr	r3, [r3, #0]
 81011f4:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 81011f6:	61fb      	str	r3, [r7, #28]
 81011f8:	687b      	ldr	r3, [r7, #4]
 81011fa:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 81011fc:	68fb      	ldr	r3, [r7, #12]
 81011fe:	681b      	ldr	r3, [r3, #0]
 8101200:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8101202:	61bb      	str	r3, [r7, #24]
    *( osBuffer + bufferVar->head ) = data;
 8101204:	687b      	ldr	r3, [r7, #4]
 8101206:	685b      	ldr	r3, [r3, #4]
 8101208:	69ba      	ldr	r2, [r7, #24]
 810120a:	4413      	add	r3, r2
 810120c:	78fa      	ldrb	r2, [r7, #3]
 810120e:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells++;
 8101210:	687b      	ldr	r3, [r7, #4]
 8101212:	68db      	ldr	r3, [r3, #12]
 8101214:	1c5a      	adds	r2, r3, #1
 8101216:	687b      	ldr	r3, [r7, #4]
 8101218:	60da      	str	r2, [r3, #12]
    bufferVar->head = ( ( bufferVar->head + 1 ) % bufferSize );
 810121a:	687b      	ldr	r3, [r7, #4]
 810121c:	685b      	ldr	r3, [r3, #4]
 810121e:	3301      	adds	r3, #1
 8101220:	69fa      	ldr	r2, [r7, #28]
 8101222:	fbb3 f2f2 	udiv	r2, r3, r2
 8101226:	69f9      	ldr	r1, [r7, #28]
 8101228:	fb01 f202 	mul.w	r2, r1, r2
 810122c:	1a9a      	subs	r2, r3, r2
 810122e:	687b      	ldr	r3, [r7, #4]
 8101230:	605a      	str	r2, [r3, #4]
 8101232:	687b      	ldr	r3, [r7, #4]
 8101234:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isFull(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT((bufferVar->cfg->size) ^ (bufferVar->fullCells)) ? \
 8101236:	693b      	ldr	r3, [r7, #16]
 8101238:	681b      	ldr	r3, [r3, #0]
 810123a:	689a      	ldr	r2, [r3, #8]
 810123c:	693b      	ldr	r3, [r7, #16]
 810123e:	68db      	ldr	r3, [r3, #12]
    BUFFER_STATE_ENUM__FULL : BUFFER_STATE_ENUM__OK);
 8101240:	429a      	cmp	r2, r3
 8101242:	d101      	bne.n	8101248 <buffer_push+0x68>
 8101244:	2302      	movs	r3, #2
 8101246:	e000      	b.n	810124a <buffer_push+0x6a>
 8101248:	2300      	movs	r3, #0
    bufferState = buffer_isFull( bufferVar );
 810124a:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 810124c:	7dfb      	ldrb	r3, [r7, #23]
}
 810124e:	4618      	mov	r0, r3
 8101250:	3724      	adds	r7, #36	; 0x24
 8101252:	46bd      	mov	sp, r7
 8101254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101258:	4770      	bx	lr

0810125a <bufferDouble_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_readArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 810125a:	b580      	push	{r7, lr}
 810125c:	b08e      	sub	sp, #56	; 0x38
 810125e:	af00      	add	r7, sp, #0
 8101260:	60f8      	str	r0, [r7, #12]
 8101262:	60b9      	str	r1, [r7, #8]
 8101264:	607a      	str	r2, [r7, #4]
 8101266:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8101268:	f000 fbee 	bl	8101a48 <os_getOsVar>
 810126c:	6338      	str	r0, [r7, #48]	; 0x30
 810126e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101270:	623b      	str	r3, [r7, #32]
 8101272:	68fb      	ldr	r3, [r7, #12]
 8101274:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferDoubleVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferDoubleVariableType * os_getOsBufferDoubleVar(CosmOS_OsVariableType * osVar, BitWidthType bufferDoubleId)
{
    return (&(osVar->bufferDoubleVars[bufferDoubleId]));
 8101276:	6a3b      	ldr	r3, [r7, #32]
 8101278:	68d9      	ldr	r1, [r3, #12]
 810127a:	69fa      	ldr	r2, [r7, #28]
 810127c:	4613      	mov	r3, r2
 810127e:	005b      	lsls	r3, r3, #1
 8101280:	4413      	add	r3, r2
 8101282:	009b      	lsls	r3, r3, #2
 8101284:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8101286:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8101288:	78fb      	ldrb	r3, [r7, #3]
 810128a:	2b00      	cmp	r3, #0
 810128c:	d002      	beq.n	8101294 <bufferDouble_readArray+0x3a>
 810128e:	2b01      	cmp	r3, #1
 8101290:	d00b      	beq.n	81012aa <bufferDouble_readArray+0x50>
 8101292:	e015      	b.n	81012c0 <bufferDouble_readArray+0x66>
 8101294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101296:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * bufferDouble_getBufferDoubleUserBuffer(CosmOS_BufferDoubleVariableType * bufferDoubleVar)
{
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8101298:	69bb      	ldr	r3, [r7, #24]
 810129a:	681b      	ldr	r3, [r3, #0]
 810129c:	681a      	ldr	r2, [r3, #0]
 810129e:	69bb      	ldr	r3, [r7, #24]
 81012a0:	689b      	ldr	r3, [r3, #8]
 81012a2:	009b      	lsls	r3, r3, #2
 81012a4:	4413      	add	r3, r2
    {
        case BUFFER_DOUBLE_ACCESS_ENUM__USER :
        {
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 81012a6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 81012a8:	e00d      	b.n	81012c6 <bufferDouble_readArray+0x6c>
 81012aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81012ac:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 81012ae:	697b      	ldr	r3, [r7, #20]
 81012b0:	681b      	ldr	r3, [r3, #0]
 81012b2:	681a      	ldr	r2, [r3, #0]
 81012b4:	697b      	ldr	r3, [r7, #20]
 81012b6:	685b      	ldr	r3, [r3, #4]
 81012b8:	009b      	lsls	r3, r3, #2
 81012ba:	4413      	add	r3, r2
        }

        case BUFFER_DOUBLE_ACCESS_ENUM__KERNEL :
        {
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 81012bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 81012be:	e002      	b.n	81012c6 <bufferDouble_readArray+0x6c>
        }

        default :
        {
            os_kernelPanic();
 81012c0:	f000 fbcc 	bl	8101a5c <os_kernelPanic>
            break;
 81012c4:	bf00      	nop
 81012c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81012c8:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->id);
 81012ca:	693b      	ldr	r3, [r7, #16]
 81012cc:	681b      	ldr	r3, [r3, #0]
 81012ce:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 81012d0:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_readArray( bufferId, buffer, size );
 81012d2:	687a      	ldr	r2, [r7, #4]
 81012d4:	68b9      	ldr	r1, [r7, #8]
 81012d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 81012d8:	f7ff fe29 	bl	8100f2e <buffer_readArray>
 81012dc:	4603      	mov	r3, r0
 81012de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 81012e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81012e6:	4618      	mov	r0, r3
 81012e8:	3738      	adds	r7, #56	; 0x38
 81012ea:	46bd      	mov	sp, r7
 81012ec:	bd80      	pop	{r7, pc}

081012ee <bufferDouble_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_writeArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 81012ee:	b580      	push	{r7, lr}
 81012f0:	b08e      	sub	sp, #56	; 0x38
 81012f2:	af00      	add	r7, sp, #0
 81012f4:	60f8      	str	r0, [r7, #12]
 81012f6:	60b9      	str	r1, [r7, #8]
 81012f8:	607a      	str	r2, [r7, #4]
 81012fa:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 81012fc:	f000 fba4 	bl	8101a48 <os_getOsVar>
 8101300:	6338      	str	r0, [r7, #48]	; 0x30
 8101302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101304:	623b      	str	r3, [r7, #32]
 8101306:	68fb      	ldr	r3, [r7, #12]
 8101308:	61fb      	str	r3, [r7, #28]
 810130a:	6a3b      	ldr	r3, [r7, #32]
 810130c:	68d9      	ldr	r1, [r3, #12]
 810130e:	69fa      	ldr	r2, [r7, #28]
 8101310:	4613      	mov	r3, r2
 8101312:	005b      	lsls	r3, r3, #1
 8101314:	4413      	add	r3, r2
 8101316:	009b      	lsls	r3, r3, #2
 8101318:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 810131a:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 810131c:	78fb      	ldrb	r3, [r7, #3]
 810131e:	2b00      	cmp	r3, #0
 8101320:	d002      	beq.n	8101328 <bufferDouble_writeArray+0x3a>
 8101322:	2b01      	cmp	r3, #1
 8101324:	d00b      	beq.n	810133e <bufferDouble_writeArray+0x50>
 8101326:	e015      	b.n	8101354 <bufferDouble_writeArray+0x66>
 8101328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810132a:	61bb      	str	r3, [r7, #24]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 810132c:	69bb      	ldr	r3, [r7, #24]
 810132e:	681b      	ldr	r3, [r3, #0]
 8101330:	681a      	ldr	r2, [r3, #0]
 8101332:	69bb      	ldr	r3, [r7, #24]
 8101334:	689b      	ldr	r3, [r3, #8]
 8101336:	009b      	lsls	r3, r3, #2
 8101338:	4413      	add	r3, r2
    {
        case BUFFER_DOUBLE_ACCESS_ENUM__USER :
        {
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 810133a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 810133c:	e00d      	b.n	810135a <bufferDouble_writeArray+0x6c>
 810133e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101340:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8101342:	697b      	ldr	r3, [r7, #20]
 8101344:	681b      	ldr	r3, [r3, #0]
 8101346:	681a      	ldr	r2, [r3, #0]
 8101348:	697b      	ldr	r3, [r7, #20]
 810134a:	685b      	ldr	r3, [r3, #4]
 810134c:	009b      	lsls	r3, r3, #2
 810134e:	4413      	add	r3, r2
        }

        case BUFFER_DOUBLE_ACCESS_ENUM__KERNEL :
        {
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8101350:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101352:	e002      	b.n	810135a <bufferDouble_writeArray+0x6c>
        }

        default :
        {
            os_kernelPanic();
 8101354:	f000 fb82 	bl	8101a5c <os_kernelPanic>
            break;
 8101358:	bf00      	nop
 810135a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810135c:	613b      	str	r3, [r7, #16]
 810135e:	693b      	ldr	r3, [r7, #16]
 8101360:	681b      	ldr	r3, [r3, #0]
 8101362:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 8101364:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_writeArray( bufferId, buffer, size );
 8101366:	687a      	ldr	r2, [r7, #4]
 8101368:	68b9      	ldr	r1, [r7, #8]
 810136a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 810136c:	f7ff fe6c 	bl	8101048 <buffer_writeArray>
 8101370:	4603      	mov	r3, r0
 8101372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8101376:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 810137a:	4618      	mov	r0, r3
 810137c:	3738      	adds	r7, #56	; 0x38
 810137e:	46bd      	mov	sp, r7
 8101380:	bd80      	pop	{r7, pc}

08101382 <core_getCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_CoreVariableType * core_getCoreVar(void)
{
 8101382:	b480      	push	{r7}
 8101384:	b083      	sub	sp, #12
 8101386:	af00      	add	r7, sp, #0
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101388:	464b      	mov	r3, r9
 810138a:	607b      	str	r3, [r7, #4]
    return (CosmOS_CoreVariableType *)result;
 810138c:	687b      	ldr	r3, [r7, #4]
    return CILcore_getCoreVar();
}
 810138e:	4618      	mov	r0, r3
 8101390:	370c      	adds	r7, #12
 8101392:	46bd      	mov	sp, r7
 8101394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101398:	4770      	bx	lr

0810139a <core_setSchedulableIntoCurrentContext>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void core_setSchedulableIntoCurrentContext(CosmOS_CoreVariableType * coreVar, CosmOS_SchedulableVariableType * schedulableVar)
{
 810139a:	b480      	push	{r7}
 810139c:	b095      	sub	sp, #84	; 0x54
 810139e:	af00      	add	r7, sp, #0
 81013a0:	6078      	str	r0, [r7, #4]
 81013a2:	6039      	str	r1, [r7, #0]
 81013a4:	683b      	ldr	r3, [r7, #0]
 81013a6:	61fb      	str	r3, [r7, #28]
    return (schedulable->cfg->programId);
 81013a8:	69fb      	ldr	r3, [r7, #28]
 81013aa:	681b      	ldr	r3, [r3, #0]
 81013ac:	699b      	ldr	r3, [r3, #24]
	CosmOS_SchedulableStateType priorSchedulableVarState;

	CosmOS_ProgramVariableType * programVar;
	CosmOS_SchedulableVariableType * priorSchedulableVar;

	programId = schedulable_getProgramId( schedulableVar );
 81013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 81013b0:	687b      	ldr	r3, [r7, #4]
 81013b2:	627b      	str	r3, [r7, #36]	; 0x24
 81013b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81013b6:	623b      	str	r3, [r7, #32]
  *
  * @return CosmOS_ProgramVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ProgramVariableType * core_getCoreProgramVar(CosmOS_CoreVariableType * core, BitWidthType programIterator)
{
    return (&(core->programVars[programIterator]));
 81013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81013ba:	68da      	ldr	r2, [r3, #12]
 81013bc:	6a3b      	ldr	r3, [r7, #32]
 81013be:	011b      	lsls	r3, r3, #4
 81013c0:	4413      	add	r3, r2
    programVar = core_getCoreProgramVar( coreVar, programId );
 81013c2:	64bb      	str	r3, [r7, #72]	; 0x48
 81013c4:	687b      	ldr	r3, [r7, #4]
 81013c6:	62bb      	str	r3, [r7, #40]	; 0x28
    return (core->schedulableInExecution);
 81013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81013ca:	685b      	ldr	r3, [r3, #4]
	priorSchedulableVar = core_getCoreSchedulableInExecution( coreVar );
 81013cc:	647b      	str	r3, [r7, #68]	; 0x44
 81013ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (schedulable->state);
 81013d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81013d4:	685b      	ldr	r3, [r3, #4]
	priorSchedulableVarState = schedulable_getState( priorSchedulableVar );
 81013d6:	643b      	str	r3, [r7, #64]	; 0x40
 81013d8:	687b      	ldr	r3, [r7, #4]
 81013da:	637b      	str	r3, [r7, #52]	; 0x34
 81013dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81013de:	633b      	str	r3, [r7, #48]	; 0x30
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreProgramInExecution(CosmOS_CoreVariableType * core, CosmOS_ProgramVariableType * programInExecutionParam)
{
    core->programInExecution = programInExecutionParam;
 81013e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81013e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81013e4:	609a      	str	r2, [r3, #8]
}
 81013e6:	bf00      	nop
 81013e8:	687b      	ldr	r3, [r7, #4]
 81013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 81013ec:	683b      	ldr	r3, [r7, #0]
 81013ee:	63bb      	str	r3, [r7, #56]	; 0x38
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreSchedulableInExecution(CosmOS_CoreVariableType * core, CosmOS_SchedulableVariableType * schedulableInExecutionParam)
{
    core->schedulableInExecution = schedulableInExecutionParam;
 81013f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81013f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 81013f4:	605a      	str	r2, [r3, #4]
}
 81013f6:	bf00      	nop

	core_setCoreProgramInExecution( coreVar, programVar );
    core_setCoreSchedulableInExecution( coreVar, schedulableVar );

	if (priorSchedulableVarState IS_EQUAL_TO SCHEDULABLE_STATE_ENUM__RUNNING)
 81013f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81013fa:	2b00      	cmp	r3, #0
 81013fc:	d108      	bne.n	8101410 <core_setSchedulableIntoCurrentContext+0x76>
 81013fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101400:	61bb      	str	r3, [r7, #24]
 8101402:	f04f 33ff 	mov.w	r3, #4294967295
 8101406:	617b      	str	r3, [r7, #20]
    schedulable->state = stateParam;
 8101408:	69bb      	ldr	r3, [r7, #24]
 810140a:	697a      	ldr	r2, [r7, #20]
 810140c:	605a      	str	r2, [r3, #4]
}
 810140e:	bf00      	nop
 8101410:	683b      	ldr	r3, [r7, #0]
 8101412:	613b      	str	r3, [r7, #16]
 8101414:	2300      	movs	r3, #0
 8101416:	60fb      	str	r3, [r7, #12]
    schedulable->state = stateParam;
 8101418:	693b      	ldr	r3, [r7, #16]
 810141a:	68fa      	ldr	r2, [r7, #12]
 810141c:	605a      	str	r2, [r3, #4]
}
 810141e:	bf00      	nop
	{
		schedulable_setState(priorSchedulableVar, SCHEDULABLE_STATE_ENUM__READY);
	}
	schedulable_setState(schedulableVar, SCHEDULABLE_STATE_ENUM__RUNNING);
}
 8101420:	bf00      	nop
 8101422:	3754      	adds	r7, #84	; 0x54
 8101424:	46bd      	mov	sp, r7
 8101426:	f85d 7b04 	ldr.w	r7, [sp], #4
 810142a:	4770      	bx	lr

0810142c <coreSync_getBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_getBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 810142c:	b580      	push	{r7, lr}
 810142e:	b096      	sub	sp, #88	; 0x58
 8101430:	af00      	add	r7, sp, #0
 8101432:	6078      	str	r0, [r7, #4]
 8101434:	6039      	str	r1, [r7, #0]
 8101436:	687b      	ldr	r3, [r7, #4]
 8101438:	62bb      	str	r3, [r7, #40]	; 0x28
 810143a:	683b      	ldr	r3, [r7, #0]
 810143c:	627b      	str	r3, [r7, #36]	; 0x24
    return (&(core->barrierVars[barrierId]));
 810143e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101440:	695a      	ldr	r2, [r3, #20]
 8101442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101444:	009b      	lsls	r3, r3, #2
 8101446:	4413      	add	r3, r2
	CosmOS_BarrierVariableType * barrierVar;

	volatile CosmOS_BarrierStateType barrierState;


	barrierVar = core_getBarrierVar( coreVar, barrierId );
 8101448:	653b      	str	r3, [r7, #80]	; 0x50
 810144a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810144c:	633b      	str	r3, [r7, #48]	; 0x30
 810144e:	f04f 33ff 	mov.w	r3, #4294967295
 8101452:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void coreSync_setBarrierState(CosmOS_BarrierVariableType * barrier, CosmOS_BarrierStateType barrierStateParam)
{
    barrier->barrierState = barrierStateParam;
 8101454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101458:	601a      	str	r2, [r3, #0]
}
 810145a:	bf00      	nop
	coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__REACHED);

	/* MEMORY BARRIER HAS TO BE IMPLEMENTED */

	osVar = os_getOsVar();
 810145c:	f000 faf4 	bl	8101a48 <os_getOsVar>
 8101460:	64f8      	str	r0, [r7, #76]	; 0x4c
 8101462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101464:	637b      	str	r3, [r7, #52]	; 0x34
    return (osVar->cfg->numberOfCores);
 8101466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101468:	681b      	ldr	r3, [r3, #0]
 810146a:	685b      	ldr	r3, [r3, #4]
	numberOfCores = os_getOsNumberOfCores( osVar );
 810146c:	64bb      	str	r3, [r7, #72]	; 0x48

	numberOfSynchronizedCores = 0;
 810146e:	2300      	movs	r3, #0
 8101470:	657b      	str	r3, [r7, #84]	; 0x54
 8101472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101474:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101478:	63bb      	str	r3, [r7, #56]	; 0x38
    return (&(osVar->coreVars[coreId]));
 810147a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810147c:	6859      	ldr	r1, [r3, #4]
 810147e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8101480:	4613      	mov	r3, r2
 8101482:	00db      	lsls	r3, r3, #3
 8101484:	4413      	add	r3, r2
 8101486:	009b      	lsls	r3, r3, #2
 8101488:	440b      	add	r3, r1

	coreVar = os_getCoreVar( osVar, numberOfSynchronizedCores );
 810148a:	607b      	str	r3, [r7, #4]
 810148c:	687b      	ldr	r3, [r7, #4]
 810148e:	647b      	str	r3, [r7, #68]	; 0x44
 8101490:	683b      	ldr	r3, [r7, #0]
 8101492:	643b      	str	r3, [r7, #64]	; 0x40
 8101494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101496:	695a      	ldr	r2, [r3, #20]
 8101498:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810149a:	009b      	lsls	r3, r3, #2
 810149c:	4413      	add	r3, r2
	barrierVar = core_getBarrierVar( coreVar, barrierId );
 810149e:	653b      	str	r3, [r7, #80]	; 0x50

	while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 81014a0:	e029      	b.n	81014f6 <coreSync_getBarrier+0xca>
 81014a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81014a4:	623b      	str	r3, [r7, #32]
    return (barrier->barrierState);
 81014a6:	6a3b      	ldr	r3, [r7, #32]
 81014a8:	681b      	ldr	r3, [r3, #0]
	{
		barrierState = coreSync_getBarrierState( barrierVar );
 81014aa:	60fb      	str	r3, [r7, #12]

		if ( ( barrierState IS_EQUAL_TO BARRIER_STATE_ENUM__REACHED ) )
 81014ac:	68fb      	ldr	r3, [r7, #12]
 81014ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 81014b2:	d120      	bne.n	81014f6 <coreSync_getBarrier+0xca>
		{
			numberOfSynchronizedCores++;
 81014b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81014b6:	3301      	adds	r3, #1
 81014b8:	657b      	str	r3, [r7, #84]	; 0x54

			coreVar = os_getCoreVar( osVar, ( numberOfSynchronizedCores % numberOfCores ) );
 81014ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81014bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81014be:	fbb3 f2f2 	udiv	r2, r3, r2
 81014c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 81014c4:	fb01 f202 	mul.w	r2, r1, r2
 81014c8:	1a9b      	subs	r3, r3, r2
 81014ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 81014cc:	617a      	str	r2, [r7, #20]
 81014ce:	613b      	str	r3, [r7, #16]
 81014d0:	697b      	ldr	r3, [r7, #20]
 81014d2:	6859      	ldr	r1, [r3, #4]
 81014d4:	693a      	ldr	r2, [r7, #16]
 81014d6:	4613      	mov	r3, r2
 81014d8:	00db      	lsls	r3, r3, #3
 81014da:	4413      	add	r3, r2
 81014dc:	009b      	lsls	r3, r3, #2
 81014de:	440b      	add	r3, r1
 81014e0:	607b      	str	r3, [r7, #4]
 81014e2:	687b      	ldr	r3, [r7, #4]
 81014e4:	61fb      	str	r3, [r7, #28]
 81014e6:	683b      	ldr	r3, [r7, #0]
 81014e8:	61bb      	str	r3, [r7, #24]
 81014ea:	69fb      	ldr	r3, [r7, #28]
 81014ec:	695a      	ldr	r2, [r3, #20]
 81014ee:	69bb      	ldr	r3, [r7, #24]
 81014f0:	009b      	lsls	r3, r3, #2
 81014f2:	4413      	add	r3, r2
			barrierVar = core_getBarrierVar( coreVar, barrierId );
 81014f4:	653b      	str	r3, [r7, #80]	; 0x50
	while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 81014f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 81014f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81014fa:	429a      	cmp	r2, r3
 81014fc:	d1d1      	bne.n	81014a2 <coreSync_getBarrier+0x76>
		}
	}
}
 81014fe:	bf00      	nop
 8101500:	bf00      	nop
 8101502:	3758      	adds	r7, #88	; 0x58
 8101504:	46bd      	mov	sp, r7
 8101506:	bd80      	pop	{r7, pc}

08101508 <coreSync_reactivateBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_reactivateBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 8101508:	b580      	push	{r7, lr}
 810150a:	b088      	sub	sp, #32
 810150c:	af00      	add	r7, sp, #0
 810150e:	6078      	str	r0, [r7, #4]
 8101510:	6039      	str	r1, [r7, #0]
	CosmOS_BarrierVariableType * barrierVar;

	cosmosAssert( barrierId IS_EQUAL_TO SCHEDULERS_SYNC_ID );
 8101512:	683b      	ldr	r3, [r7, #0]
 8101514:	2b03      	cmp	r3, #3
 8101516:	bf0c      	ite	eq
 8101518:	2301      	moveq	r3, #1
 810151a:	2300      	movne	r3, #0
 810151c:	b2db      	uxtb	r3, r3
 810151e:	60bb      	str	r3, [r7, #8]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void cosmosAssert(BitWidthType result)
{
    if ( IS_NOT( result ) )
 8101520:	68bb      	ldr	r3, [r7, #8]
 8101522:	2b00      	cmp	r3, #0
 8101524:	d101      	bne.n	810152a <coreSync_reactivateBarrier+0x22>
		{
        os_kernelPanic();
 8101526:	f000 fa99 	bl	8101a5c <os_kernelPanic>
    }
}
 810152a:	bf00      	nop
 810152c:	687b      	ldr	r3, [r7, #4]
 810152e:	613b      	str	r3, [r7, #16]
 8101530:	683b      	ldr	r3, [r7, #0]
 8101532:	60fb      	str	r3, [r7, #12]
 8101534:	693b      	ldr	r3, [r7, #16]
 8101536:	695a      	ldr	r2, [r3, #20]
 8101538:	68fb      	ldr	r3, [r7, #12]
 810153a:	009b      	lsls	r3, r3, #2
 810153c:	4413      	add	r3, r2

	barrierVar = core_getBarrierVar( coreVar, barrierId );
 810153e:	61fb      	str	r3, [r7, #28]
 8101540:	69fb      	ldr	r3, [r7, #28]
 8101542:	61bb      	str	r3, [r7, #24]
 8101544:	2300      	movs	r3, #0
 8101546:	617b      	str	r3, [r7, #20]
    barrier->barrierState = barrierStateParam;
 8101548:	69bb      	ldr	r3, [r7, #24]
 810154a:	697a      	ldr	r2, [r7, #20]
 810154c:	601a      	str	r2, [r3, #0]
}
 810154e:	bf00      	nop
	coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__ACTIVATED );

	/* MEMORY BARRIER HAS TO BE IMPLEMENTED */
}
 8101550:	bf00      	nop
 8101552:	3720      	adds	r7, #32
 8101554:	46bd      	mov	sp, r7
 8101556:	bd80      	pop	{r7, pc}

08101558 <deviceIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void deviceIO_togglePin(BitWidthType id, void *GPIOx, BitWidthType GPIO_Pin)
{
 8101558:	b580      	push	{r7, lr}
 810155a:	b084      	sub	sp, #16
 810155c:	af00      	add	r7, sp, #0
 810155e:	60f8      	str	r0, [r7, #12]
 8101560:	60b9      	str	r1, [r7, #8]
 8101562:	607a      	str	r2, [r7, #4]
    CILGPIO_togglePin( GPIOx, GPIO_Pin );
 8101564:	6879      	ldr	r1, [r7, #4]
 8101566:	68b8      	ldr	r0, [r7, #8]
 8101568:	f001 fb08 	bl	8102b7c <CILGPIO_togglePin>

	__SUPRESS_UNUSED_VAR(id);
}
 810156c:	bf00      	nop
 810156e:	3710      	adds	r7, #16
 8101570:	46bd      	mov	sp, r7
 8101572:	bd80      	pop	{r7, pc}

08101574 <memoryManager_heapInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryManager_heapInit(void)
{
 8101574:	b580      	push	{r7, lr}
 8101576:	b088      	sub	sp, #32
 8101578:	af00      	add	r7, sp, #0

	CosmOS_CoreVariableType * coreVar;
	CosmOS_ProgramVariableType * programVars;
	CosmOS_MallocVariableType * currentMallocVar;

	coreVar = core_getCoreVar();
 810157a:	f7ff ff02 	bl	8101382 <core_getCoreVar>
 810157e:	61b8      	str	r0, [r7, #24]
 8101580:	69bb      	ldr	r3, [r7, #24]
 8101582:	607b      	str	r3, [r7, #4]
    return (core->programVars);
 8101584:	687b      	ldr	r3, [r7, #4]
 8101586:	68db      	ldr	r3, [r3, #12]

	programVars = core_getCoreProgramVars( coreVar );
 8101588:	617b      	str	r3, [r7, #20]
 810158a:	69bb      	ldr	r3, [r7, #24]
 810158c:	60bb      	str	r3, [r7, #8]
    return (core->cfg->numberOfPrograms);
 810158e:	68bb      	ldr	r3, [r7, #8]
 8101590:	681b      	ldr	r3, [r3, #0]
 8101592:	685b      	ldr	r3, [r3, #4]
	numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 8101594:	613b      	str	r3, [r7, #16]

	for (BitWidthType i = 0; i < numberOfPrograms; i++)
 8101596:	2300      	movs	r3, #0
 8101598:	61fb      	str	r3, [r7, #28]
 810159a:	e01a      	b.n	81015d2 <memoryManager_heapInit+0x5e>
	{
		if (programVars[i].cfg->programHeapSize)
 810159c:	69fb      	ldr	r3, [r7, #28]
 810159e:	011b      	lsls	r3, r3, #4
 81015a0:	697a      	ldr	r2, [r7, #20]
 81015a2:	4413      	add	r3, r2
 81015a4:	681b      	ldr	r3, [r3, #0]
 81015a6:	699b      	ldr	r3, [r3, #24]
 81015a8:	2b00      	cmp	r3, #0
 81015aa:	d00f      	beq.n	81015cc <memoryManager_heapInit+0x58>
		{
			currentMallocVar = (CosmOS_MallocVariableType *)programVars[i].cfg->programHeapLowAddress;
 81015ac:	69fb      	ldr	r3, [r7, #28]
 81015ae:	011b      	lsls	r3, r3, #4
 81015b0:	697a      	ldr	r2, [r7, #20]
 81015b2:	4413      	add	r3, r2
 81015b4:	681b      	ldr	r3, [r3, #0]
 81015b6:	69db      	ldr	r3, [r3, #28]
 81015b8:	60fb      	str	r3, [r7, #12]

			currentMallocVar->prior = NULL;
 81015ba:	68fb      	ldr	r3, [r7, #12]
 81015bc:	2200      	movs	r2, #0
 81015be:	601a      	str	r2, [r3, #0]
			currentMallocVar->next = NULL;
 81015c0:	68fb      	ldr	r3, [r7, #12]
 81015c2:	2200      	movs	r2, #0
 81015c4:	605a      	str	r2, [r3, #4]
			currentMallocVar->size = (BitWidthType)ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType));
 81015c6:	68fb      	ldr	r3, [r7, #12]
 81015c8:	220c      	movs	r2, #12
 81015ca:	609a      	str	r2, [r3, #8]
	for (BitWidthType i = 0; i < numberOfPrograms; i++)
 81015cc:	69fb      	ldr	r3, [r7, #28]
 81015ce:	3301      	adds	r3, #1
 81015d0:	61fb      	str	r3, [r7, #28]
 81015d2:	69fa      	ldr	r2, [r7, #28]
 81015d4:	693b      	ldr	r3, [r7, #16]
 81015d6:	429a      	cmp	r2, r3
 81015d8:	d3e0      	bcc.n	810159c <memoryManager_heapInit+0x28>
		}
	}
}
 81015da:	bf00      	nop
 81015dc:	bf00      	nop
 81015de:	3720      	adds	r7, #32
 81015e0:	46bd      	mov	sp, r7
 81015e2:	bd80      	pop	{r7, pc}

081015e4 <memoryProtection_init>:
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_init(AddressType codeMemoryHighAddress,\
												AddressType codeMemoryLowAddress, \
												AddressType stackMemoryHighAddress, \
												AddressType stackMemoryLowAddress)
{
 81015e4:	b580      	push	{r7, lr}
 81015e6:	b084      	sub	sp, #16
 81015e8:	af00      	add	r7, sp, #0
 81015ea:	60f8      	str	r0, [r7, #12]
 81015ec:	60b9      	str	r1, [r7, #8]
 81015ee:	607a      	str	r2, [r7, #4]
 81015f0:	603b      	str	r3, [r7, #0]
    CILmemoryProtection_init(codeMemoryHighAddress,codeMemoryLowAddress,
 81015f2:	683b      	ldr	r3, [r7, #0]
 81015f4:	687a      	ldr	r2, [r7, #4]
 81015f6:	68b9      	ldr	r1, [r7, #8]
 81015f8:	68f8      	ldr	r0, [r7, #12]
 81015fa:	f001 facf 	bl	8102b9c <CILmemoryProtection_init>
							stackMemoryHighAddress,stackMemoryLowAddress);
}
 81015fe:	bf00      	nop
 8101600:	3710      	adds	r7, #16
 8101602:	46bd      	mov	sp, r7
 8101604:	bd80      	pop	{r7, pc}

08101606 <memoryProtection_setMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_setMemoryProtection(CosmOS_CoreVariableType * core,CosmOS_SchedulableVariableType  * schedulable)
{
 8101606:	b580      	push	{r7, lr}
 8101608:	b096      	sub	sp, #88	; 0x58
 810160a:	af00      	add	r7, sp, #0
 810160c:	6078      	str	r0, [r7, #4]
 810160e:	6039      	str	r1, [r7, #0]
 8101610:	683b      	ldr	r3, [r7, #0]
 8101612:	60fb      	str	r3, [r7, #12]
    return (schedulable->cfg->programId);
 8101614:	68fb      	ldr	r3, [r7, #12]
 8101616:	681b      	ldr	r3, [r3, #0]
 8101618:	699b      	ldr	r3, [r3, #24]

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulable );
 810161a:	657b      	str	r3, [r7, #84]	; 0x54
 810161c:	687b      	ldr	r3, [r7, #4]
 810161e:	617b      	str	r3, [r7, #20]
 8101620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101622:	613b      	str	r3, [r7, #16]
    return (&(core->programVars[programIterator]));
 8101624:	697b      	ldr	r3, [r7, #20]
 8101626:	68da      	ldr	r2, [r3, #12]
 8101628:	693b      	ldr	r3, [r7, #16]
 810162a:	011b      	lsls	r3, r3, #4
 810162c:	4413      	add	r3, r2
    programVar = core_getCoreProgramVar( core, programId );
 810162e:	653b      	str	r3, [r7, #80]	; 0x50
 8101630:	683b      	ldr	r3, [r7, #0]
 8101632:	61bb      	str	r3, [r7, #24]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8101634:	69bb      	ldr	r3, [r7, #24]
 8101636:	681b      	ldr	r3, [r3, #0]
 8101638:	681b      	ldr	r3, [r3, #0]

    stack = schedulable_getStack( schedulable );
 810163a:	64fb      	str	r3, [r7, #76]	; 0x4c
 810163c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810163e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101642:	62bb      	str	r3, [r7, #40]	; 0x28
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackLowAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackLowAddress);
 8101644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101646:	685b      	ldr	r3, [r3, #4]
    lowAddress = stack_getStackLowAddress( stack );
 8101648:	627b      	str	r3, [r7, #36]	; 0x24
 810164a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810164c:	623b      	str	r3, [r7, #32]
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackHighAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackHighAddress);
 810164e:	6a3b      	ldr	r3, [r7, #32]
 8101650:	689b      	ldr	r3, [r3, #8]
    highAddress = stack_getStackHighAddress( stack );
 8101652:	61fb      	str	r3, [r7, #28]
    CILmemoryProtection_setStackOverflowProtection( lowAddress, highAddress );
 8101654:	69f9      	ldr	r1, [r7, #28]
 8101656:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8101658:	f001 fbf0 	bl	8102e3c <CILmemoryProtection_setStackOverflowProtection>
}
 810165c:	bf00      	nop
 810165e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101660:	64bb      	str	r3, [r7, #72]	; 0x48
 8101662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101664:	647b      	str	r3, [r7, #68]	; 0x44
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemorySize(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemorySize);
 8101666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101668:	681b      	ldr	r3, [r3, #0]
 810166a:	68db      	ldr	r3, [r3, #12]
    size = program_getProgramMemorySize( program );
 810166c:	643b      	str	r3, [r7, #64]	; 0x40
 810166e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101670:	63fb      	str	r3, [r7, #60]	; 0x3c
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryLowAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryLowAddress);
 8101672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101674:	681b      	ldr	r3, [r3, #0]
 8101676:	691b      	ldr	r3, [r3, #16]
    lowAddress = program_getProgramMemoryLowAddress( program );
 8101678:	63bb      	str	r3, [r7, #56]	; 0x38
 810167a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810167c:	637b      	str	r3, [r7, #52]	; 0x34
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryHighAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryHighAddress);
 810167e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101680:	681b      	ldr	r3, [r3, #0]
 8101682:	695b      	ldr	r3, [r3, #20]
    highAddress = program_getProgramMemoryHighAddress( program );
 8101684:	633b      	str	r3, [r7, #48]	; 0x30
    if ( size )
 8101686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101688:	2b00      	cmp	r3, #0
 810168a:	d003      	beq.n	8101694 <memoryProtection_setMemoryProtection+0x8e>
        CILmemoryProtection_setProgramMemoryProtection( lowAddress, highAddress );
 810168c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 810168e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8101690:	f001 fc30 	bl	8102ef4 <CILmemoryProtection_setProgramMemoryProtection>
}
 8101694:	bf00      	nop

    memoryProtection_setStackOverflowProtection( stack );
    memoryProtection_setProgramMemoryProtection( programVar );
}
 8101696:	bf00      	nop
 8101698:	3758      	adds	r7, #88	; 0x58
 810169a:	46bd      	mov	sp, r7
 810169c:	bd80      	pop	{r7, pc}

0810169e <memoryProtection_isMemoryRegionProtected>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BooleanType memoryProtection_isMemoryRegionProtected(CosmOS_CoreVariableType * core, void * regionLowAddressPointer, BitWidthType size)
{
 810169e:	b480      	push	{r7}
 81016a0:	b097      	sub	sp, #92	; 0x5c
 81016a2:	af00      	add	r7, sp, #0
 81016a4:	60f8      	str	r0, [r7, #12]
 81016a6:	60b9      	str	r1, [r7, #8]
 81016a8:	607a      	str	r2, [r7, #4]
				programLowAddress,
				programHighAddress,
				regionLowAddress,
				regionHighAddress;

	CosmOS_BooleanType isMemoryRegionProtected = True;
 81016aa:	2301      	movs	r3, #1
 81016ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;
	CosmOS_SchedulableVariableType * schedulable;

	regionLowAddress = (AddressType)regionLowAddressPointer;
 81016b0:	68bb      	ldr	r3, [r7, #8]
 81016b2:	653b      	str	r3, [r7, #80]	; 0x50
 81016b4:	68fb      	ldr	r3, [r7, #12]
 81016b6:	617b      	str	r3, [r7, #20]
    return (core->programInExecution);
 81016b8:	697b      	ldr	r3, [r7, #20]
 81016ba:	689b      	ldr	r3, [r3, #8]

    programVar = core_getCoreProgramInExecution( core );
 81016bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 81016be:	68fb      	ldr	r3, [r7, #12]
 81016c0:	61bb      	str	r3, [r7, #24]
    return (core->schedulableInExecution);
 81016c2:	69bb      	ldr	r3, [r7, #24]
 81016c4:	685b      	ldr	r3, [r3, #4]
	schedulable = core_getCoreSchedulableInExecution( core );
 81016c6:	64bb      	str	r3, [r7, #72]	; 0x48
 81016c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81016ca:	61fb      	str	r3, [r7, #28]
 81016cc:	69fb      	ldr	r3, [r7, #28]
 81016ce:	681b      	ldr	r3, [r3, #0]
 81016d0:	681b      	ldr	r3, [r3, #0]
    stack = schedulable_getStack( schedulable );
 81016d2:	647b      	str	r3, [r7, #68]	; 0x44
 81016d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81016d6:	623b      	str	r3, [r7, #32]
    return (stack->stackLowAddress);
 81016d8:	6a3b      	ldr	r3, [r7, #32]
 81016da:	685b      	ldr	r3, [r3, #4]

	stackLowAddress = stack_getStackLowAddress( stack );
 81016dc:	643b      	str	r3, [r7, #64]	; 0x40
 81016de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81016e0:	627b      	str	r3, [r7, #36]	; 0x24
    return (stack->stackHighAddress);
 81016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016e4:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 81016e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 81016e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81016ea:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->programMemoryLowAddress);
 81016ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81016ee:	681b      	ldr	r3, [r3, #0]
 81016f0:	691b      	ldr	r3, [r3, #16]

    programLowAddress = program_getProgramMemoryLowAddress( programVar );
 81016f2:	63bb      	str	r3, [r7, #56]	; 0x38
 81016f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81016f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (program->cfg->programMemoryHighAddress);
 81016f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81016fa:	681b      	ldr	r3, [r3, #0]
 81016fc:	695b      	ldr	r3, [r3, #20]
    programHighAddress = program_getProgramMemoryHighAddress( programVar );
 81016fe:	637b      	str	r3, [r7, #52]	; 0x34

	regionHighAddress = regionLowAddress + (AddressType)size;
 8101700:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101702:	687b      	ldr	r3, [r7, #4]
 8101704:	4413      	add	r3, r2
 8101706:	633b      	str	r3, [r7, #48]	; 0x30

	if (((regionHighAddress < stackHighAddress) && (regionLowAddress > stackLowAddress)) || \
 8101708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810170a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810170c:	429a      	cmp	r2, r3
 810170e:	d203      	bcs.n	8101718 <memoryProtection_isMemoryRegionProtected+0x7a>
 8101710:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101714:	429a      	cmp	r2, r3
 8101716:	d807      	bhi.n	8101728 <memoryProtection_isMemoryRegionProtected+0x8a>
 8101718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810171a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810171c:	429a      	cmp	r2, r3
 810171e:	d206      	bcs.n	810172e <memoryProtection_isMemoryRegionProtected+0x90>
		((regionHighAddress < programHighAddress) && (regionLowAddress > programLowAddress)))
 8101720:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101724:	429a      	cmp	r2, r3
 8101726:	d902      	bls.n	810172e <memoryProtection_isMemoryRegionProtected+0x90>
	{
		isMemoryRegionProtected = False;
 8101728:	2300      	movs	r3, #0
 810172a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	return isMemoryRegionProtected;
 810172e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8101732:	4618      	mov	r0, r3
 8101734:	375c      	adds	r7, #92	; 0x5c
 8101736:	46bd      	mov	sp, r7
 8101738:	f85d 7b04 	ldr.w	r7, [sp], #4
 810173c:	4770      	bx	lr
	...

08101740 <mutex_getMutexPrivileged>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_getMutexPrivileged(BitWidthType entityId, CosmOS_MutexVariableType * mutexVar)
{
 8101740:	b580      	push	{r7, lr}
 8101742:	b088      	sub	sp, #32
 8101744:	af00      	add	r7, sp, #0
 8101746:	6078      	str	r0, [r7, #4]
 8101748:	6039      	str	r1, [r7, #0]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 810174a:	464b      	mov	r3, r9
 810174c:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 810174e:	693b      	ldr	r3, [r7, #16]

	CosmOS_CoreVariableType * coreVar;
	CosmOS_ThreadVariableType * threadVar;


	coreVar = CILcore_getCoreVar();
 8101750:	61fb      	str	r3, [r7, #28]

	mutexState = CILmutex_tryMutex(&(mutexVar->mutex));
 8101752:	683b      	ldr	r3, [r7, #0]
 8101754:	4618      	mov	r0, r3
 8101756:	f001 fc29 	bl	8102fac <CILmutex_tryMutex>
 810175a:	61b8      	str	r0, [r7, #24]
	if ( mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED )
 810175c:	69bb      	ldr	r3, [r7, #24]
 810175e:	2b02      	cmp	r3, #2
 8101760:	d104      	bne.n	810176c <mutex_getMutexPrivileged+0x2c>
	{
		mutexVar->schedulableOwner = coreVar->schedulableInExecution;
 8101762:	69fb      	ldr	r3, [r7, #28]
 8101764:	685a      	ldr	r2, [r3, #4]
 8101766:	683b      	ldr	r3, [r7, #0]
 8101768:	605a      	str	r2, [r3, #4]
 810176a:	e01e      	b.n	81017aa <mutex_getMutexPrivileged+0x6a>
		__SUPRESS_UNUSED_VAR(threadVar);
	}
	else
	{
		threadVar = program_getProgramThread(coreVar->programInExecution,coreVar->schedulableInExecution->cfg->instanceId);
 810176c:	69fb      	ldr	r3, [r7, #28]
 810176e:	689a      	ldr	r2, [r3, #8]
 8101770:	69fb      	ldr	r3, [r7, #28]
 8101772:	685b      	ldr	r3, [r3, #4]
 8101774:	681b      	ldr	r3, [r3, #0]
 8101776:	695b      	ldr	r3, [r3, #20]
 8101778:	60fa      	str	r2, [r7, #12]
 810177a:	60bb      	str	r3, [r7, #8]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * program_getProgramThread(CosmOS_ProgramVariableType * program, BitWidthType threadIterator)
{
    return (&(program->threadVars[threadIterator]));
 810177c:	68fb      	ldr	r3, [r7, #12]
 810177e:	6899      	ldr	r1, [r3, #8]
 8101780:	68ba      	ldr	r2, [r7, #8]
 8101782:	4613      	mov	r3, r2
 8101784:	005b      	lsls	r3, r3, #1
 8101786:	4413      	add	r3, r2
 8101788:	009b      	lsls	r3, r3, #2
 810178a:	440b      	add	r3, r1
 810178c:	617b      	str	r3, [r7, #20]
		threadVar->blockingMutexVar = mutexVar;
 810178e:	697b      	ldr	r3, [r7, #20]
 8101790:	683a      	ldr	r2, [r7, #0]
 8101792:	609a      	str	r2, [r3, #8]
		coreVar->schedulableInExecution->state = SCHEDULABLE_STATE_ENUM__BLOCKED;
 8101794:	69fb      	ldr	r3, [r7, #28]
 8101796:	685b      	ldr	r3, [r3, #4]
 8101798:	2202      	movs	r2, #2
 810179a:	605a      	str	r2, [r3, #4]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void CILinterrupt_contextSwitchRoutineTrigger(void)
{
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 810179c:	4b05      	ldr	r3, [pc, #20]	; (81017b4 <mutex_getMutexPrivileged+0x74>)
 810179e:	685b      	ldr	r3, [r3, #4]
 81017a0:	4a04      	ldr	r2, [pc, #16]	; (81017b4 <mutex_getMutexPrivileged+0x74>)
 81017a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81017a6:	6053      	str	r3, [r2, #4]
}
 81017a8:	bf00      	nop
		CILinterrupt_contextSwitchRoutineTrigger();
	}

	__SUPRESS_UNUSED_VAR(entityId);
	return mutexState;
 81017aa:	69bb      	ldr	r3, [r7, #24]
}
 81017ac:	4618      	mov	r0, r3
 81017ae:	3720      	adds	r7, #32
 81017b0:	46bd      	mov	sp, r7
 81017b2:	bd80      	pop	{r7, pc}
 81017b4:	e000ed00 	.word	0xe000ed00

081017b8 <mutex_getMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_getMutex(CosmOS_MutexVariableType * mutexVar)
{
 81017b8:	b580      	push	{r7, lr}
 81017ba:	b088      	sub	sp, #32
 81017bc:	af00      	add	r7, sp, #0
 81017be:	6078      	str	r0, [r7, #4]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81017c0:	464b      	mov	r3, r9
 81017c2:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 81017c4:	693b      	ldr	r3, [r7, #16]
	CosmOS_MutexStateType mutexState;

	CosmOS_CoreVariableType * coreVar;


	coreVar = CILcore_getCoreVar();
 81017c6:	61bb      	str	r3, [r7, #24]

	isMutexInProtectedMemory = memoryProtection_isMemoryRegionProtected(coreVar, (void *)mutexVar, sizeof(mutexVar));
 81017c8:	2204      	movs	r2, #4
 81017ca:	6879      	ldr	r1, [r7, #4]
 81017cc:	69b8      	ldr	r0, [r7, #24]
 81017ce:	f7ff ff66 	bl	810169e <memoryProtection_isMemoryRegionProtected>
 81017d2:	4603      	mov	r3, r0
 81017d4:	75fb      	strb	r3, [r7, #23]

	if ( IS_NOT(isMutexInProtectedMemory) )
 81017d6:	7dfb      	ldrb	r3, [r7, #23]
 81017d8:	2b00      	cmp	r3, #0
 81017da:	d12c      	bne.n	8101836 <mutex_getMutex+0x7e>
	{
		if (coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 81017dc:	69bb      	ldr	r3, [r7, #24]
 81017de:	685b      	ldr	r3, [r3, #4]
 81017e0:	681b      	ldr	r3, [r3, #0]
 81017e2:	685b      	ldr	r3, [r3, #4]
 81017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81017e8:	d122      	bne.n	8101830 <mutex_getMutex+0x78>
 81017ea:	69bb      	ldr	r3, [r7, #24]
 81017ec:	60fb      	str	r3, [r7, #12]
 81017ee:	687b      	ldr	r3, [r7, #4]
 81017f0:	60bb      	str	r3, [r7, #8]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType mutex_willCauseDeadlock(CosmOS_CoreVariableType * coreVar, CosmOS_MutexVariableType * mutexVar)
{
	return ((mutexVar->mutex IS_EQUAL_TO MUTEX_STATE_ENUM__OCCUPIED)\
 81017f2:	68bb      	ldr	r3, [r7, #8]
 81017f4:	681b      	ldr	r3, [r3, #0]
			AND (coreVar->schedulableInExecution IS_EQUAL_TO mutexVar->schedulableOwner)) ? True : False;
 81017f6:	2b01      	cmp	r3, #1
 81017f8:	d107      	bne.n	810180a <mutex_getMutex+0x52>
 81017fa:	68fb      	ldr	r3, [r7, #12]
 81017fc:	685a      	ldr	r2, [r3, #4]
 81017fe:	68bb      	ldr	r3, [r7, #8]
 8101800:	685b      	ldr	r3, [r3, #4]
 8101802:	429a      	cmp	r2, r3
 8101804:	d101      	bne.n	810180a <mutex_getMutex+0x52>
 8101806:	2301      	movs	r3, #1
 8101808:	e000      	b.n	810180c <mutex_getMutex+0x54>
 810180a:	2300      	movs	r3, #0
 810180c:	b2db      	uxtb	r3, r3
		{
			willCauseDeadlock = mutex_willCauseDeadlock(coreVar, mutexVar);
 810180e:	75bb      	strb	r3, [r7, #22]
			if( willCauseDeadlock )
 8101810:	7dbb      	ldrb	r3, [r7, #22]
 8101812:	2b00      	cmp	r3, #0
 8101814:	d003      	beq.n	810181e <mutex_getMutex+0x66>
			{
				mutexState = MUTEX_STATE_ENUM__DEADLOCK_WARNING;
 8101816:	f04f 33ff 	mov.w	r3, #4294967295
 810181a:	61fb      	str	r3, [r7, #28]
 810181c:	e00d      	b.n	810183a <mutex_getMutex+0x82>
			}
			else
			{
				do
				{
					mutexState = cosmosApiPrivate_mutex_getMutexPrivileged(mutexVar);
 810181e:	6879      	ldr	r1, [r7, #4]
 8101820:	2017      	movs	r0, #23
 8101822:	f001 f85d 	bl	81028e0 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 8101826:	61f8      	str	r0, [r7, #28]
				} while ( mutexState IS_NOT_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED );
 8101828:	69fb      	ldr	r3, [r7, #28]
 810182a:	2b02      	cmp	r3, #2
 810182c:	d1f7      	bne.n	810181e <mutex_getMutex+0x66>
 810182e:	e004      	b.n	810183a <mutex_getMutex+0x82>

			}
		}
		else
		{
			mutexState = MUTEX_STATE_ENUM__ERROR_ONLY_THREADS_CAN_MUTEX;
 8101830:	2305      	movs	r3, #5
 8101832:	61fb      	str	r3, [r7, #28]
 8101834:	e001      	b.n	810183a <mutex_getMutex+0x82>
		}
	}
	else
	{
		mutexState = MUTEX_STATE_ENUM__ERROR_INVALID_MUTEX_ADDRESS;
 8101836:	2306      	movs	r3, #6
 8101838:	61fb      	str	r3, [r7, #28]
	}

	return mutexState;
 810183a:	69fb      	ldr	r3, [r7, #28]
}
 810183c:	4618      	mov	r0, r3
 810183e:	3720      	adds	r7, #32
 8101840:	46bd      	mov	sp, r7
 8101842:	bd80      	pop	{r7, pc}

08101844 <mutex_tryMutexPrivileged>:
{
 8101844:	b580      	push	{r7, lr}
 8101846:	b086      	sub	sp, #24
 8101848:	af00      	add	r7, sp, #0
 810184a:	6078      	str	r0, [r7, #4]
 810184c:	6039      	str	r1, [r7, #0]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 810184e:	464b      	mov	r3, r9
 8101850:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 8101852:	68fb      	ldr	r3, [r7, #12]
	coreVar = CILcore_getCoreVar();
 8101854:	617b      	str	r3, [r7, #20]
	mutexState = CILmutex_tryMutex(&(mutexVar->mutex));
 8101856:	683b      	ldr	r3, [r7, #0]
 8101858:	4618      	mov	r0, r3
 810185a:	f001 fba7 	bl	8102fac <CILmutex_tryMutex>
 810185e:	6138      	str	r0, [r7, #16]
	if ( mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8101860:	693b      	ldr	r3, [r7, #16]
 8101862:	2b02      	cmp	r3, #2
 8101864:	d103      	bne.n	810186e <mutex_tryMutexPrivileged+0x2a>
		mutexVar->schedulableOwner = coreVar->schedulableInExecution;
 8101866:	697b      	ldr	r3, [r7, #20]
 8101868:	685a      	ldr	r2, [r3, #4]
 810186a:	683b      	ldr	r3, [r7, #0]
 810186c:	605a      	str	r2, [r3, #4]
	return mutexState;
 810186e:	693b      	ldr	r3, [r7, #16]
}
 8101870:	4618      	mov	r0, r3
 8101872:	3718      	adds	r7, #24
 8101874:	46bd      	mov	sp, r7
 8101876:	bd80      	pop	{r7, pc}

08101878 <mutex_releaseMutexPrivileged>:
{
 8101878:	b580      	push	{r7, lr}
 810187a:	b08a      	sub	sp, #40	; 0x28
 810187c:	af00      	add	r7, sp, #0
 810187e:	6078      	str	r0, [r7, #4]
 8101880:	6039      	str	r1, [r7, #0]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101882:	464b      	mov	r3, r9
 8101884:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 8101886:	693b      	ldr	r3, [r7, #16]
	coreVar = CILcore_getCoreVar();
 8101888:	61fb      	str	r3, [r7, #28]
	mutexState = CILmutex_releaseMutex(&(mutexVar->mutex));
 810188a:	683b      	ldr	r3, [r7, #0]
 810188c:	4618      	mov	r0, r3
 810188e:	f001 fba6 	bl	8102fde <CILmutex_releaseMutex>
 8101892:	61b8      	str	r0, [r7, #24]
	higherPriorityThreadBlocked = False;
 8101894:	2300      	movs	r3, #0
 8101896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (BitWidthType iterator = 0; iterator < coreVar->programInExecution->cfg->numberOfThreads; iterator++)
 810189a:	2300      	movs	r3, #0
 810189c:	623b      	str	r3, [r7, #32]
 810189e:	e04b      	b.n	8101938 <mutex_releaseMutexPrivileged+0xc0>
		if (coreVar->programInExecution->threadVars[iterator].blockingMutexVar IS_EQUAL_TO mutexVar)
 81018a0:	69fb      	ldr	r3, [r7, #28]
 81018a2:	689b      	ldr	r3, [r3, #8]
 81018a4:	6899      	ldr	r1, [r3, #8]
 81018a6:	6a3a      	ldr	r2, [r7, #32]
 81018a8:	4613      	mov	r3, r2
 81018aa:	005b      	lsls	r3, r3, #1
 81018ac:	4413      	add	r3, r2
 81018ae:	009b      	lsls	r3, r3, #2
 81018b0:	440b      	add	r3, r1
 81018b2:	689b      	ldr	r3, [r3, #8]
 81018b4:	683a      	ldr	r2, [r7, #0]
 81018b6:	429a      	cmp	r2, r3
 81018b8:	d13b      	bne.n	8101932 <mutex_releaseMutexPrivileged+0xba>
			coreVar->programInExecution->threadVars[iterator].schedulable->state = SCHEDULABLE_STATE_ENUM__READY;
 81018ba:	69fb      	ldr	r3, [r7, #28]
 81018bc:	689b      	ldr	r3, [r3, #8]
 81018be:	6899      	ldr	r1, [r3, #8]
 81018c0:	6a3a      	ldr	r2, [r7, #32]
 81018c2:	4613      	mov	r3, r2
 81018c4:	005b      	lsls	r3, r3, #1
 81018c6:	4413      	add	r3, r2
 81018c8:	009b      	lsls	r3, r3, #2
 81018ca:	440b      	add	r3, r1
 81018cc:	685b      	ldr	r3, [r3, #4]
 81018ce:	f04f 32ff 	mov.w	r2, #4294967295
 81018d2:	605a      	str	r2, [r3, #4]
			coreVar->programInExecution->threadVars[iterator].blockingMutexVar = NULL;
 81018d4:	69fb      	ldr	r3, [r7, #28]
 81018d6:	689b      	ldr	r3, [r3, #8]
 81018d8:	6899      	ldr	r1, [r3, #8]
 81018da:	6a3a      	ldr	r2, [r7, #32]
 81018dc:	4613      	mov	r3, r2
 81018de:	005b      	lsls	r3, r3, #1
 81018e0:	4413      	add	r3, r2
 81018e2:	009b      	lsls	r3, r3, #2
 81018e4:	440b      	add	r3, r1
 81018e6:	2200      	movs	r2, #0
 81018e8:	609a      	str	r2, [r3, #8]
			threadVar = program_getProgramThread(coreVar->programInExecution,coreVar->schedulableInExecution->cfg->instanceId);
 81018ea:	69fb      	ldr	r3, [r7, #28]
 81018ec:	689a      	ldr	r2, [r3, #8]
 81018ee:	69fb      	ldr	r3, [r7, #28]
 81018f0:	685b      	ldr	r3, [r3, #4]
 81018f2:	681b      	ldr	r3, [r3, #0]
 81018f4:	695b      	ldr	r3, [r3, #20]
 81018f6:	60fa      	str	r2, [r7, #12]
 81018f8:	60bb      	str	r3, [r7, #8]
 81018fa:	68fb      	ldr	r3, [r7, #12]
 81018fc:	6899      	ldr	r1, [r3, #8]
 81018fe:	68ba      	ldr	r2, [r7, #8]
 8101900:	4613      	mov	r3, r2
 8101902:	005b      	lsls	r3, r3, #1
 8101904:	4413      	add	r3, r2
 8101906:	009b      	lsls	r3, r3, #2
 8101908:	440b      	add	r3, r1
 810190a:	617b      	str	r3, [r7, #20]
			if ( coreVar->programInExecution->threadVars[iterator].cfg->priority > threadVar->cfg->priority )
 810190c:	69fb      	ldr	r3, [r7, #28]
 810190e:	689b      	ldr	r3, [r3, #8]
 8101910:	6899      	ldr	r1, [r3, #8]
 8101912:	6a3a      	ldr	r2, [r7, #32]
 8101914:	4613      	mov	r3, r2
 8101916:	005b      	lsls	r3, r3, #1
 8101918:	4413      	add	r3, r2
 810191a:	009b      	lsls	r3, r3, #2
 810191c:	440b      	add	r3, r1
 810191e:	681b      	ldr	r3, [r3, #0]
 8101920:	681a      	ldr	r2, [r3, #0]
 8101922:	697b      	ldr	r3, [r7, #20]
 8101924:	681b      	ldr	r3, [r3, #0]
 8101926:	681b      	ldr	r3, [r3, #0]
 8101928:	429a      	cmp	r2, r3
 810192a:	d902      	bls.n	8101932 <mutex_releaseMutexPrivileged+0xba>
				higherPriorityThreadBlocked = True;
 810192c:	2301      	movs	r3, #1
 810192e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (BitWidthType iterator = 0; iterator < coreVar->programInExecution->cfg->numberOfThreads; iterator++)
 8101932:	6a3b      	ldr	r3, [r7, #32]
 8101934:	3301      	adds	r3, #1
 8101936:	623b      	str	r3, [r7, #32]
 8101938:	69fb      	ldr	r3, [r7, #28]
 810193a:	689b      	ldr	r3, [r3, #8]
 810193c:	681b      	ldr	r3, [r3, #0]
 810193e:	689b      	ldr	r3, [r3, #8]
 8101940:	6a3a      	ldr	r2, [r7, #32]
 8101942:	429a      	cmp	r2, r3
 8101944:	d3ac      	bcc.n	81018a0 <mutex_releaseMutexPrivileged+0x28>
	if (higherPriorityThreadBlocked)
 8101946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810194a:	2b00      	cmp	r3, #0
 810194c:	d006      	beq.n	810195c <mutex_releaseMutexPrivileged+0xe4>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 810194e:	4b06      	ldr	r3, [pc, #24]	; (8101968 <mutex_releaseMutexPrivileged+0xf0>)
 8101950:	685b      	ldr	r3, [r3, #4]
 8101952:	4a05      	ldr	r2, [pc, #20]	; (8101968 <mutex_releaseMutexPrivileged+0xf0>)
 8101954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8101958:	6053      	str	r3, [r2, #4]
}
 810195a:	bf00      	nop
	return mutexState;
 810195c:	69bb      	ldr	r3, [r7, #24]
}
 810195e:	4618      	mov	r0, r3
 8101960:	3728      	adds	r7, #40	; 0x28
 8101962:	46bd      	mov	sp, r7
 8101964:	bd80      	pop	{r7, pc}
 8101966:	bf00      	nop
 8101968:	e000ed00 	.word	0xe000ed00

0810196c <mutex_tryMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_tryMutex(CosmOS_MutexVariableType * mutexVar)
{
 810196c:	b580      	push	{r7, lr}
 810196e:	b086      	sub	sp, #24
 8101970:	af00      	add	r7, sp, #0
 8101972:	6078      	str	r0, [r7, #4]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101974:	464b      	mov	r3, r9
 8101976:	60bb      	str	r3, [r7, #8]
    return (CosmOS_CoreVariableType *)result;
 8101978:	68bb      	ldr	r3, [r7, #8]
	CosmOS_MutexStateType mutexState;

	CosmOS_CoreVariableType * coreVar;


	coreVar = CILcore_getCoreVar();
 810197a:	613b      	str	r3, [r7, #16]

	isMutexInProtectedMemory = memoryProtection_isMemoryRegionProtected(coreVar, (void *)mutexVar, sizeof(mutexVar));
 810197c:	2204      	movs	r2, #4
 810197e:	6879      	ldr	r1, [r7, #4]
 8101980:	6938      	ldr	r0, [r7, #16]
 8101982:	f7ff fe8c 	bl	810169e <memoryProtection_isMemoryRegionProtected>
 8101986:	4603      	mov	r3, r0
 8101988:	73fb      	strb	r3, [r7, #15]

	if ( IS_NOT(isMutexInProtectedMemory) )
 810198a:	7bfb      	ldrb	r3, [r7, #15]
 810198c:	2b00      	cmp	r3, #0
 810198e:	d10f      	bne.n	81019b0 <mutex_tryMutex+0x44>
	{
		if (coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 8101990:	693b      	ldr	r3, [r7, #16]
 8101992:	685b      	ldr	r3, [r3, #4]
 8101994:	681b      	ldr	r3, [r3, #0]
 8101996:	685b      	ldr	r3, [r3, #4]
 8101998:	f1b3 3fff 	cmp.w	r3, #4294967295
 810199c:	d105      	bne.n	81019aa <mutex_tryMutex+0x3e>
		{
			mutexState = cosmosApiPrivate_mutex_tryMutexPrivileged(mutexVar);
 810199e:	6879      	ldr	r1, [r7, #4]
 81019a0:	2018      	movs	r0, #24
 81019a2:	f000 ff9d 	bl	81028e0 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 81019a6:	6178      	str	r0, [r7, #20]
 81019a8:	e004      	b.n	81019b4 <mutex_tryMutex+0x48>
		}
		else
		{
			mutexState = MUTEX_STATE_ENUM__ERROR_ONLY_THREADS_CAN_MUTEX;
 81019aa:	2305      	movs	r3, #5
 81019ac:	617b      	str	r3, [r7, #20]
 81019ae:	e001      	b.n	81019b4 <mutex_tryMutex+0x48>
		}
	}
	else
	{
		mutexState = MUTEX_STATE_ENUM__ERROR_INVALID_MUTEX_ADDRESS;
 81019b0:	2306      	movs	r3, #6
 81019b2:	617b      	str	r3, [r7, #20]
	}

	return mutexState;
 81019b4:	697b      	ldr	r3, [r7, #20]
}
 81019b6:	4618      	mov	r0, r3
 81019b8:	3718      	adds	r7, #24
 81019ba:	46bd      	mov	sp, r7
 81019bc:	bd80      	pop	{r7, pc}

081019be <mutex_releaseMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_releaseMutex(CosmOS_MutexVariableType * mutexVar)
{
 81019be:	b580      	push	{r7, lr}
 81019c0:	b088      	sub	sp, #32
 81019c2:	af00      	add	r7, sp, #0
 81019c4:	6078      	str	r0, [r7, #4]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81019c6:	464b      	mov	r3, r9
 81019c8:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 81019ca:	693b      	ldr	r3, [r7, #16]
	CosmOS_MutexStateType mutexState;

	CosmOS_CoreVariableType * coreVar;


	coreVar = CILcore_getCoreVar();
 81019cc:	61bb      	str	r3, [r7, #24]

	isMutexInProtectedMemory = memoryProtection_isMemoryRegionProtected(coreVar, (void *)mutexVar, sizeof(mutexVar));
 81019ce:	2204      	movs	r2, #4
 81019d0:	6879      	ldr	r1, [r7, #4]
 81019d2:	69b8      	ldr	r0, [r7, #24]
 81019d4:	f7ff fe63 	bl	810169e <memoryProtection_isMemoryRegionProtected>
 81019d8:	4603      	mov	r3, r0
 81019da:	75fb      	strb	r3, [r7, #23]

	if ( IS_NOT(isMutexInProtectedMemory) )
 81019dc:	7dfb      	ldrb	r3, [r7, #23]
 81019de:	2b00      	cmp	r3, #0
 81019e0:	d12a      	bne.n	8101a38 <mutex_releaseMutex+0x7a>
	{
		if (coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 81019e2:	69bb      	ldr	r3, [r7, #24]
 81019e4:	685b      	ldr	r3, [r3, #4]
 81019e6:	681b      	ldr	r3, [r3, #0]
 81019e8:	685b      	ldr	r3, [r3, #4]
 81019ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 81019ee:	d120      	bne.n	8101a32 <mutex_releaseMutex+0x74>
 81019f0:	69bb      	ldr	r3, [r7, #24]
 81019f2:	60fb      	str	r3, [r7, #12]
 81019f4:	687b      	ldr	r3, [r7, #4]
 81019f6:	60bb      	str	r3, [r7, #8]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType mutex_ownsSchedulableMutex(CosmOS_CoreVariableType * coreVar, CosmOS_MutexVariableType * mutexVar)
{
	return (coreVar->schedulableInExecution IS_EQUAL_TO mutexVar->schedulableOwner) ? True : False;
 81019f8:	68fb      	ldr	r3, [r7, #12]
 81019fa:	685a      	ldr	r2, [r3, #4]
 81019fc:	68bb      	ldr	r3, [r7, #8]
 81019fe:	685b      	ldr	r3, [r3, #4]
 8101a00:	429a      	cmp	r2, r3
 8101a02:	bf0c      	ite	eq
 8101a04:	2301      	moveq	r3, #1
 8101a06:	2300      	movne	r3, #0
 8101a08:	b2db      	uxtb	r3, r3
		{
			ownsSchedulableMutex = mutex_ownsSchedulableMutex(coreVar, mutexVar);
 8101a0a:	75bb      	strb	r3, [r7, #22]
			if ( mutexVar->mutex IS_EQUAL_TO MUTEX_STATE_ENUM__OCCUPIED )
 8101a0c:	687b      	ldr	r3, [r7, #4]
 8101a0e:	681b      	ldr	r3, [r3, #0]
 8101a10:	2b01      	cmp	r3, #1
 8101a12:	d10b      	bne.n	8101a2c <mutex_releaseMutex+0x6e>
			{
				if ( ownsSchedulableMutex )
 8101a14:	7dbb      	ldrb	r3, [r7, #22]
 8101a16:	2b00      	cmp	r3, #0
 8101a18:	d005      	beq.n	8101a26 <mutex_releaseMutex+0x68>
				{
					mutexState = cosmosApiPrivate_mutex_releaseMutexPrivileged(mutexVar);
 8101a1a:	6879      	ldr	r1, [r7, #4]
 8101a1c:	2019      	movs	r0, #25
 8101a1e:	f000 ff5f 	bl	81028e0 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 8101a22:	61f8      	str	r0, [r7, #28]
 8101a24:	e00a      	b.n	8101a3c <mutex_releaseMutex+0x7e>
				}
				else
				{
					mutexState = MUTEX_STATE_ENUM__ERROR_SCHEDULABLE_IS_NOT_OWNER;
 8101a26:	2303      	movs	r3, #3
 8101a28:	61fb      	str	r3, [r7, #28]
 8101a2a:	e007      	b.n	8101a3c <mutex_releaseMutex+0x7e>
				}
			}
			else
			{
				mutexState = MUTEX_STATE_ENUM__ERROR_NOT_IN_OCCUPIED_STATE;
 8101a2c:	2304      	movs	r3, #4
 8101a2e:	61fb      	str	r3, [r7, #28]
 8101a30:	e004      	b.n	8101a3c <mutex_releaseMutex+0x7e>
			}
		}
		else
		{
			mutexState = MUTEX_STATE_ENUM__ERROR_ONLY_THREADS_CAN_MUTEX;
 8101a32:	2305      	movs	r3, #5
 8101a34:	61fb      	str	r3, [r7, #28]
 8101a36:	e001      	b.n	8101a3c <mutex_releaseMutex+0x7e>
		}
	}
	else
	{
		mutexState = MUTEX_STATE_ENUM__ERROR_INVALID_MUTEX_ADDRESS;
 8101a38:	2306      	movs	r3, #6
 8101a3a:	61fb      	str	r3, [r7, #28]
	}

	return mutexState;
 8101a3c:	69fb      	ldr	r3, [r7, #28]
}
 8101a3e:	4618      	mov	r0, r3
 8101a40:	3720      	adds	r7, #32
 8101a42:	46bd      	mov	sp, r7
 8101a44:	bd80      	pop	{r7, pc}
 8101a46:	bf00      	nop

08101a48 <os_getOsVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_OsVariableType * os_getOsVar(void)
{
 8101a48:	b480      	push	{r7}
 8101a4a:	af00      	add	r7, sp, #0
    return &OsVar;
 8101a4c:	4b02      	ldr	r3, [pc, #8]	; (8101a58 <os_getOsVar+0x10>)
}
 8101a4e:	4618      	mov	r0, r3
 8101a50:	46bd      	mov	sp, r7
 8101a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a56:	4770      	bx	lr
 8101a58:	38008140 	.word	0x38008140

08101a5c <os_kernelPanic>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_kernelPanic(void)
{
 8101a5c:	b580      	push	{r7, lr}
 8101a5e:	b082      	sub	sp, #8
 8101a60:	af00      	add	r7, sp, #0
	CosmOS_CoreVariableType * coreVar;


	coreVar = core_getCoreVar();
 8101a62:	f7ff fc8e 	bl	8101382 <core_getCoreVar>
 8101a66:	6078      	str	r0, [r7, #4]
    coreVar->cfg->kernelPanicHook();
 8101a68:	687b      	ldr	r3, [r7, #4]
 8101a6a:	681b      	ldr	r3, [r3, #0]
 8101a6c:	691b      	ldr	r3, [r3, #16]
 8101a6e:	4798      	blx	r3

	for(;;);
 8101a70:	e7fe      	b.n	8101a70 <os_kernelPanic+0x14>

08101a72 <os_start>:
{
 8101a72:	b580      	push	{r7, lr}
 8101a74:	b082      	sub	sp, #8
 8101a76:	af00      	add	r7, sp, #0
 8101a78:	6078      	str	r0, [r7, #4]
    scheduler_start();
 8101a7a:	f000 fbc5 	bl	8102208 <scheduler_start>
};
 8101a7e:	bf00      	nop
 8101a80:	3708      	adds	r7, #8
 8101a82:	46bd      	mov	sp, r7
 8101a84:	bd80      	pop	{r7, pc}

08101a86 <os_write8>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_write8(BitWidthType entityId,uint8_t *address,uint8_t value)
{
 8101a86:	b480      	push	{r7}
 8101a88:	b085      	sub	sp, #20
 8101a8a:	af00      	add	r7, sp, #0
 8101a8c:	60f8      	str	r0, [r7, #12]
 8101a8e:	60b9      	str	r1, [r7, #8]
 8101a90:	4613      	mov	r3, r2
 8101a92:	71fb      	strb	r3, [r7, #7]
	//TODO: memoryProtection_isMemoryRegionProtected check
	*address = value;
 8101a94:	68bb      	ldr	r3, [r7, #8]
 8101a96:	79fa      	ldrb	r2, [r7, #7]
 8101a98:	701a      	strb	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(entityId);
}
 8101a9a:	bf00      	nop
 8101a9c:	3714      	adds	r7, #20
 8101a9e:	46bd      	mov	sp, r7
 8101aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aa4:	4770      	bx	lr

08101aa6 <os_write16>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_write16(BitWidthType entityId,uint16_t *address,uint16_t value)
{
 8101aa6:	b480      	push	{r7}
 8101aa8:	b085      	sub	sp, #20
 8101aaa:	af00      	add	r7, sp, #0
 8101aac:	60f8      	str	r0, [r7, #12]
 8101aae:	60b9      	str	r1, [r7, #8]
 8101ab0:	4613      	mov	r3, r2
 8101ab2:	80fb      	strh	r3, [r7, #6]
	//TODO: memoryProtection_isMemoryRegionProtected check
	*address = value;
 8101ab4:	68bb      	ldr	r3, [r7, #8]
 8101ab6:	88fa      	ldrh	r2, [r7, #6]
 8101ab8:	801a      	strh	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(entityId);
}
 8101aba:	bf00      	nop
 8101abc:	3714      	adds	r7, #20
 8101abe:	46bd      	mov	sp, r7
 8101ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ac4:	4770      	bx	lr

08101ac6 <os_write32>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_write32(BitWidthType entityId,uint32_t *address,uint32_t value)
{
 8101ac6:	b480      	push	{r7}
 8101ac8:	b085      	sub	sp, #20
 8101aca:	af00      	add	r7, sp, #0
 8101acc:	60f8      	str	r0, [r7, #12]
 8101ace:	60b9      	str	r1, [r7, #8]
 8101ad0:	607a      	str	r2, [r7, #4]
	//TODO: memoryProtection_isMemoryRegionProtected check
	*address = value;
 8101ad2:	68bb      	ldr	r3, [r7, #8]
 8101ad4:	687a      	ldr	r2, [r7, #4]
 8101ad6:	601a      	str	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(entityId);
}
 8101ad8:	bf00      	nop
 8101ada:	3714      	adds	r7, #20
 8101adc:	46bd      	mov	sp, r7
 8101ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ae2:	4770      	bx	lr

08101ae4 <osBoot_bootValidate>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osBoot_bootValidate(void)
{
 8101ae4:	b580      	push	{r7, lr}
 8101ae6:	b08c      	sub	sp, #48	; 0x30
 8101ae8:	af00      	add	r7, sp, #0
	BitWidthType  coreId,
					programSectionsNumber;

	CosmOS_ProgramSectionConfigurationType * programSections;

	coreId = CILcore_getCoreId();
 8101aea:	f001 f80d 	bl	8102b08 <CILcore_getCoreId>
 8101aee:	62b8      	str	r0, [r7, #40]	; 0x28

	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 8101af0:	4a2f      	ldr	r2, [pc, #188]	; (8101bb0 <osBoot_bootValidate+0xcc>)
 8101af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101af4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8101af8:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 8101afa:	4a2d      	ldr	r2, [pc, #180]	; (8101bb0 <osBoot_bootValidate+0xcc>)
 8101afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101afe:	00db      	lsls	r3, r3, #3
 8101b00:	4413      	add	r3, r2
 8101b02:	685b      	ldr	r3, [r3, #4]
 8101b04:	623b      	str	r3, [r7, #32]


	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8101b06:	2300      	movs	r3, #0
 8101b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101b0a:	e048      	b.n	8101b9e <osBoot_bootValidate+0xba>
	{
		osBoot_validateSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 8101b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101b0e:	4613      	mov	r3, r2
 8101b10:	005b      	lsls	r3, r3, #1
 8101b12:	4413      	add	r3, r2
 8101b14:	009b      	lsls	r3, r3, #2
 8101b16:	461a      	mov	r2, r3
 8101b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b1a:	4413      	add	r3, r2
 8101b1c:	6818      	ldr	r0, [r3, #0]
 8101b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101b20:	4613      	mov	r3, r2
 8101b22:	005b      	lsls	r3, r3, #1
 8101b24:	4413      	add	r3, r2
 8101b26:	009b      	lsls	r3, r3, #2
 8101b28:	461a      	mov	r2, r3
 8101b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b2c:	4413      	add	r3, r2
 8101b2e:	6859      	ldr	r1, [r3, #4]
 8101b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101b32:	4613      	mov	r3, r2
 8101b34:	005b      	lsls	r3, r3, #1
 8101b36:	4413      	add	r3, r2
 8101b38:	009b      	lsls	r3, r3, #2
 8101b3a:	461a      	mov	r2, r3
 8101b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b3e:	4413      	add	r3, r2
 8101b40:	689b      	ldr	r3, [r3, #8]
 8101b42:	61f8      	str	r0, [r7, #28]
 8101b44:	61b9      	str	r1, [r7, #24]
 8101b46:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8101b48:	69ba      	ldr	r2, [r7, #24]
 8101b4a:	69fb      	ldr	r3, [r7, #28]
 8101b4c:	1ad3      	subs	r3, r2, r3
 8101b4e:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 8101b50:	69fb      	ldr	r3, [r7, #28]
 8101b52:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 8101b54:	697b      	ldr	r3, [r7, #20]
 8101b56:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8101b58:	2300      	movs	r3, #0
 8101b5a:	607b      	str	r3, [r7, #4]
 8101b5c:	e016      	b.n	8101b8c <osBoot_bootValidate+0xa8>
		cosmosAssert( (*pDst++) IS_EQUAL_TO (*pSrc++) );
 8101b5e:	68fb      	ldr	r3, [r7, #12]
 8101b60:	1c5a      	adds	r2, r3, #1
 8101b62:	60fa      	str	r2, [r7, #12]
 8101b64:	781a      	ldrb	r2, [r3, #0]
 8101b66:	68bb      	ldr	r3, [r7, #8]
 8101b68:	1c59      	adds	r1, r3, #1
 8101b6a:	60b9      	str	r1, [r7, #8]
 8101b6c:	781b      	ldrb	r3, [r3, #0]
 8101b6e:	429a      	cmp	r2, r3
 8101b70:	bf0c      	ite	eq
 8101b72:	2301      	moveq	r3, #1
 8101b74:	2300      	movne	r3, #0
 8101b76:	b2db      	uxtb	r3, r3
 8101b78:	603b      	str	r3, [r7, #0]
    if ( IS_NOT( result ) )
 8101b7a:	683b      	ldr	r3, [r7, #0]
 8101b7c:	2b00      	cmp	r3, #0
 8101b7e:	d101      	bne.n	8101b84 <osBoot_bootValidate+0xa0>
        os_kernelPanic();
 8101b80:	f7ff ff6c 	bl	8101a5c <os_kernelPanic>
}
 8101b84:	bf00      	nop
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8101b86:	687b      	ldr	r3, [r7, #4]
 8101b88:	3301      	adds	r3, #1
 8101b8a:	607b      	str	r3, [r7, #4]
 8101b8c:	693b      	ldr	r3, [r7, #16]
 8101b8e:	009b      	lsls	r3, r3, #2
 8101b90:	687a      	ldr	r2, [r7, #4]
 8101b92:	429a      	cmp	r2, r3
 8101b94:	d3e3      	bcc.n	8101b5e <osBoot_bootValidate+0x7a>
}
 8101b96:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8101b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101b9a:	3301      	adds	r3, #1
 8101b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101ba0:	6a3b      	ldr	r3, [r7, #32]
 8101ba2:	429a      	cmp	r2, r3
 8101ba4:	d3b2      	bcc.n	8101b0c <osBoot_bootValidate+0x28>
	}
};
 8101ba6:	bf00      	nop
 8101ba8:	bf00      	nop
 8101baa:	3730      	adds	r7, #48	; 0x30
 8101bac:	46bd      	mov	sp, r7
 8101bae:	bd80      	pop	{r7, pc}
 8101bb0:	08106b3c 	.word	0x08106b3c

08101bb4 <osInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osInit_init(BitWidthType entityId)
{
 8101bb4:	b580      	push	{r7, lr}
 8101bb6:	b084      	sub	sp, #16
 8101bb8:	af00      	add	r7, sp, #0
 8101bba:	6078      	str	r0, [r7, #4]
    CosmOS_CoreVariableType * coreVar;
    CosmOS_OsVariableType * osVar;
	//TODO check if the os sections were booted and init and start was not called yet

	osVar = os_getOsVar();
 8101bbc:	f7ff ff44 	bl	8101a48 <os_getOsVar>
 8101bc0:	60f8      	str	r0, [r7, #12]

	CILcore_setCoreVar(osVar);
 8101bc2:	68f8      	ldr	r0, [r7, #12]
 8101bc4:	f000 ffac 	bl	8102b20 <CILcore_setCoreVar>

    coreVar = core_getCoreVar();
 8101bc8:	f7ff fbdb 	bl	8101382 <core_getCoreVar>
 8101bcc:	60b8      	str	r0, [r7, #8]

    switchMemoryProtection_init(coreVar->cfg->codeMemoryHighAddress, \
 8101bce:	68bb      	ldr	r3, [r7, #8]
 8101bd0:	681b      	ldr	r3, [r3, #0]
 8101bd2:	6a18      	ldr	r0, [r3, #32]
 8101bd4:	68bb      	ldr	r3, [r7, #8]
 8101bd6:	681b      	ldr	r3, [r3, #0]
 8101bd8:	69d9      	ldr	r1, [r3, #28]
 8101bda:	68bb      	ldr	r3, [r7, #8]
 8101bdc:	681b      	ldr	r3, [r3, #0]
 8101bde:	699a      	ldr	r2, [r3, #24]
 8101be0:	68bb      	ldr	r3, [r7, #8]
 8101be2:	681b      	ldr	r3, [r3, #0]
 8101be4:	695b      	ldr	r3, [r3, #20]
 8101be6:	f7ff fcfd 	bl	81015e4 <memoryProtection_init>
								coreVar->cfg->codeMemoryLowAddress, \
								coreVar->cfg->stackMemoryHighAddress, \
								coreVar->cfg->stackMemoryLowAddress );
	osBoot_bootValidate();
 8101bea:	f7ff ff7b 	bl	8101ae4 <osBoot_bootValidate>

    stackInit_init( coreVar );
 8101bee:	68b8      	ldr	r0, [r7, #8]
 8101bf0:	f000 fded 	bl	81027ce <stackInit_init>

	memoryManager_heapInit();
 8101bf4:	f7ff fcbe 	bl	8101574 <memoryManager_heapInit>

    coreSync_getBarrier( coreVar, OS_INIT_ID );
 8101bf8:	2100      	movs	r1, #0
 8101bfa:	68b8      	ldr	r0, [r7, #8]
 8101bfc:	f7ff fc16 	bl	810142c <coreSync_getBarrier>

	__SUPRESS_UNUSED_VAR(entityId);

};
 8101c00:	bf00      	nop
 8101c02:	3710      	adds	r7, #16
 8101c04:	46bd      	mov	sp, r7
 8101c06:	bd80      	pop	{r7, pc}

08101c08 <permission_tryAccess>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_AccessStateType permission_tryAccess(CosmOS_PermissionsConfigurationType * permission,CosmOS_CoreVariableType * coreVar)
{
 8101c08:	b580      	push	{r7, lr}
 8101c0a:	b088      	sub	sp, #32
 8101c0c:	af00      	add	r7, sp, #0
 8101c0e:	6078      	str	r0, [r7, #4]
 8101c10:	6039      	str	r1, [r7, #0]
 8101c12:	683b      	ldr	r3, [r7, #0]
 8101c14:	60bb      	str	r3, [r7, #8]
 8101c16:	68bb      	ldr	r3, [r7, #8]
 8101c18:	685b      	ldr	r3, [r3, #4]
    CosmOS_AccessStateType accessState;

    CosmOS_SchedulableVariableType * schedulableVar;

    schedulableVar = core_getCoreSchedulableInExecution( coreVar );
 8101c1a:	61fb      	str	r3, [r7, #28]
 8101c1c:	687b      	ldr	r3, [r7, #4]
 8101c1e:	617b      	str	r3, [r7, #20]
 8101c20:	69fb      	ldr	r3, [r7, #28]
 8101c22:	613b      	str	r3, [r7, #16]
    cosmosAssert( IS_NOT( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] & \
 8101c24:	697b      	ldr	r3, [r7, #20]
 8101c26:	681a      	ldr	r2, [r3, #0]
 8101c28:	693b      	ldr	r3, [r7, #16]
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	691b      	ldr	r3, [r3, #16]
 8101c2e:	491c      	ldr	r1, [pc, #112]	; (8101ca0 <permission_tryAccess+0x98>)
 8101c30:	5ccb      	ldrb	r3, [r1, r3]
 8101c32:	009b      	lsls	r3, r3, #2
 8101c34:	4413      	add	r3, r2
 8101c36:	681a      	ldr	r2, [r3, #0]
 8101c38:	697b      	ldr	r3, [r7, #20]
 8101c3a:	6859      	ldr	r1, [r3, #4]
 8101c3c:	693b      	ldr	r3, [r7, #16]
 8101c3e:	681b      	ldr	r3, [r3, #0]
 8101c40:	691b      	ldr	r3, [r3, #16]
 8101c42:	4817      	ldr	r0, [pc, #92]	; (8101ca0 <permission_tryAccess+0x98>)
 8101c44:	5cc3      	ldrb	r3, [r0, r3]
 8101c46:	009b      	lsls	r3, r3, #2
 8101c48:	440b      	add	r3, r1
 8101c4a:	681b      	ldr	r3, [r3, #0]
 8101c4c:	4013      	ands	r3, r2
 8101c4e:	2b00      	cmp	r3, #0
 8101c50:	bf0c      	ite	eq
 8101c52:	2301      	moveq	r3, #1
 8101c54:	2300      	movne	r3, #0
 8101c56:	b2db      	uxtb	r3, r3
 8101c58:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 8101c5a:	68fb      	ldr	r3, [r7, #12]
 8101c5c:	2b00      	cmp	r3, #0
 8101c5e:	d101      	bne.n	8101c64 <permission_tryAccess+0x5c>
        os_kernelPanic();
 8101c60:	f7ff fefc 	bl	8101a5c <os_kernelPanic>
}
 8101c64:	bf00      	nop
    return ((( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] >> schedulableVar->cfg->id ) & BITLOCK_MASK ) ? \
 8101c66:	697b      	ldr	r3, [r7, #20]
 8101c68:	681a      	ldr	r2, [r3, #0]
 8101c6a:	693b      	ldr	r3, [r7, #16]
 8101c6c:	681b      	ldr	r3, [r3, #0]
 8101c6e:	691b      	ldr	r3, [r3, #16]
 8101c70:	490b      	ldr	r1, [pc, #44]	; (8101ca0 <permission_tryAccess+0x98>)
 8101c72:	5ccb      	ldrb	r3, [r1, r3]
 8101c74:	009b      	lsls	r3, r3, #2
 8101c76:	4413      	add	r3, r2
 8101c78:	681a      	ldr	r2, [r3, #0]
 8101c7a:	693b      	ldr	r3, [r7, #16]
 8101c7c:	681b      	ldr	r3, [r3, #0]
 8101c7e:	691b      	ldr	r3, [r3, #16]
 8101c80:	fa22 f303 	lsr.w	r3, r2, r3
 8101c84:	f003 0301 	and.w	r3, r3, #1
            ACCESS_STATE_ENUM__ALLOWED : ACCESS_STATE_ENUM__DENIED );
 8101c88:	2b00      	cmp	r3, #0
 8101c8a:	d001      	beq.n	8101c90 <permission_tryAccess+0x88>
 8101c8c:	2300      	movs	r3, #0
 8101c8e:	e001      	b.n	8101c94 <permission_tryAccess+0x8c>
 8101c90:	f04f 33ff 	mov.w	r3, #4294967295
    accessState = permission_trySchedulableAccess( permission, schedulableVar );
 8101c94:	61bb      	str	r3, [r7, #24]

    return accessState;
 8101c96:	69bb      	ldr	r3, [r7, #24]
}
 8101c98:	4618      	mov	r0, r3
 8101c9a:	3720      	adds	r7, #32
 8101c9c:	46bd      	mov	sp, r7
 8101c9e:	bd80      	pop	{r7, pc}
 8101ca0:	380000e4 	.word	0x380000e4

08101ca4 <schedulable_setExecutionStateToFinished>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void schedulable_setExecutionStateToFinished(BitWidthType entityId)
{
 8101ca4:	b580      	push	{r7, lr}
 8101ca6:	b088      	sub	sp, #32
 8101ca8:	af00      	add	r7, sp, #0
 8101caa:	6078      	str	r0, [r7, #4]
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8101cac:	f7ff fb69 	bl	8101382 <core_getCoreVar>
 8101cb0:	61f8      	str	r0, [r7, #28]
 8101cb2:	69fb      	ldr	r3, [r7, #28]
 8101cb4:	60fb      	str	r3, [r7, #12]
 8101cb6:	68fb      	ldr	r3, [r7, #12]
 8101cb8:	685b      	ldr	r3, [r3, #4]

    schedulableVar = core_getCoreSchedulableInExecution( coreVar );
 8101cba:	61bb      	str	r3, [r7, #24]
 8101cbc:	69bb      	ldr	r3, [r7, #24]
 8101cbe:	617b      	str	r3, [r7, #20]
 8101cc0:	2301      	movs	r3, #1
 8101cc2:	613b      	str	r3, [r7, #16]
    schedulable->state = stateParam;
 8101cc4:	697b      	ldr	r3, [r7, #20]
 8101cc6:	693a      	ldr	r2, [r7, #16]
 8101cc8:	605a      	str	r2, [r3, #4]
}
 8101cca:	bf00      	nop

    schedulable_setState( schedulableVar, SCHEDULABLE_STATE_ENUM__EXECUTED );

	__SUPRESS_UNUSED_VAR(entityId);
};
 8101ccc:	bf00      	nop
 8101cce:	3720      	adds	r7, #32
 8101cd0:	46bd      	mov	sp, r7
 8101cd2:	bd80      	pop	{r7, pc}

08101cd4 <scheduler_updateAlarms>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_updateAlarms(CosmOS_CoreVariableType * coreVar, BitWidthType priorTickStep)
{
 8101cd4:	b580      	push	{r7, lr}
 8101cd6:	b08e      	sub	sp, #56	; 0x38
 8101cd8:	af00      	add	r7, sp, #0
 8101cda:	6078      	str	r0, [r7, #4]
 8101cdc:	6039      	str	r1, [r7, #0]
 8101cde:	687b      	ldr	r3, [r7, #4]
 8101ce0:	623b      	str	r3, [r7, #32]
    return (core->cfg->numberOfAlarms);
 8101ce2:	6a3b      	ldr	r3, [r7, #32]
 8101ce4:	681b      	ldr	r3, [r3, #0]
 8101ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28

	CosmOS_AlarmStateType alarmState;

	CosmOS_AlarmVariableType * alarmVar;

	numberOfAlarms = core_getCoreNumberOfAlarms(coreVar);
 8101ce8:	633b      	str	r3, [r7, #48]	; 0x30
	for (BitWidthType iterator = 0; iterator < numberOfAlarms; iterator++)
 8101cea:	2300      	movs	r3, #0
 8101cec:	637b      	str	r3, [r7, #52]	; 0x34
 8101cee:	e031      	b.n	8101d54 <scheduler_updateAlarms+0x80>
 8101cf0:	687b      	ldr	r3, [r7, #4]
 8101cf2:	61bb      	str	r3, [r7, #24]
 8101cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101cf6:	617b      	str	r3, [r7, #20]
    return (&(core->alarmVars[alarmId]));
 8101cf8:	69bb      	ldr	r3, [r7, #24]
 8101cfa:	6a19      	ldr	r1, [r3, #32]
 8101cfc:	697a      	ldr	r2, [r7, #20]
 8101cfe:	4613      	mov	r3, r2
 8101d00:	005b      	lsls	r3, r3, #1
 8101d02:	4413      	add	r3, r2
 8101d04:	009b      	lsls	r3, r3, #2
 8101d06:	440b      	add	r3, r1
	{
		alarmVar = core_getAlarmVar(coreVar, iterator);
 8101d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8101d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101d0c:	61fb      	str	r3, [r7, #28]
    return (alarm->state);
 8101d0e:	69fb      	ldr	r3, [r7, #28]
 8101d10:	685b      	ldr	r3, [r3, #4]
		alarmState = alarm_getAlarmState(alarmVar);
 8101d12:	62bb      	str	r3, [r7, #40]	; 0x28

		if (alarmState IS_EQUAL_TO ALARM_STATE_ENUM__ACTIVATED)
 8101d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101d1a:	d118      	bne.n	8101d4e <scheduler_updateAlarms+0x7a>
 8101d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101d1e:	613b      	str	r3, [r7, #16]
    return (alarm->tickCount);
 8101d20:	693b      	ldr	r3, [r7, #16]
 8101d22:	689b      	ldr	r3, [r3, #8]
		{
			tickCount = alarm_getAlarmTickCount(alarmVar);
 8101d24:	627b      	str	r3, [r7, #36]	; 0x24

			if ( tickCount <= priorTickStep )
 8101d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101d28:	683b      	ldr	r3, [r7, #0]
 8101d2a:	429a      	cmp	r2, r3
 8101d2c:	d803      	bhi.n	8101d36 <scheduler_updateAlarms+0x62>
			{
				alarm_expire(alarmVar);
 8101d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8101d30:	f7ff f8d4 	bl	8100edc <alarm_expire>
 8101d34:	e00b      	b.n	8101d4e <scheduler_updateAlarms+0x7a>
			}
			else
			{
				tickCount -= priorTickStep;
 8101d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8101d38:	683b      	ldr	r3, [r7, #0]
 8101d3a:	1ad3      	subs	r3, r2, r3
 8101d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8101d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101d40:	60fb      	str	r3, [r7, #12]
 8101d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101d44:	60bb      	str	r3, [r7, #8]
    alarm->tickCount = tickCountParam;
 8101d46:	68fb      	ldr	r3, [r7, #12]
 8101d48:	68ba      	ldr	r2, [r7, #8]
 8101d4a:	609a      	str	r2, [r3, #8]
}
 8101d4c:	bf00      	nop
	for (BitWidthType iterator = 0; iterator < numberOfAlarms; iterator++)
 8101d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d50:	3301      	adds	r3, #1
 8101d52:	637b      	str	r3, [r7, #52]	; 0x34
 8101d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8101d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101d58:	429a      	cmp	r2, r3
 8101d5a:	d3c9      	bcc.n	8101cf0 <scheduler_updateAlarms+0x1c>
				alarm_setAlarmTickCount(alarmVar,tickCount);
			}
		}
	}
}
 8101d5c:	bf00      	nop
 8101d5e:	bf00      	nop
 8101d60:	3738      	adds	r7, #56	; 0x38
 8101d62:	46bd      	mov	sp, r7
 8101d64:	bd80      	pop	{r7, pc}

08101d66 <scheduler_performanceScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_performanceScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks)
{
 8101d66:	b480      	push	{r7}
 8101d68:	b093      	sub	sp, #76	; 0x4c
 8101d6a:	af00      	add	r7, sp, #0
 8101d6c:	60f8      	str	r0, [r7, #12]
 8101d6e:	60b9      	str	r1, [r7, #8]
 8101d70:	607a      	str	r2, [r7, #4]
 8101d72:	603b      	str	r3, [r7, #0]
 8101d74:	68fb      	ldr	r3, [r7, #12]
 8101d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType scheduler_getSchedulerThreadListElementsNum(CosmOS_SchedulerVariableType * scheduler)
{
    return (scheduler->cfg->threadListElementsNum);
 8101d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101d7a:	681b      	ldr	r3, [r3, #0]
 8101d7c:	695b      	ldr	r3, [r3, #20]
	CosmOS_SchedulableStateType schedulableState;

	CosmOS_ThreadVariableType *threadVar;
	CosmOS_SchedulableVariableType *currentSchedulableVar;

    threadListElementsNum = scheduler_getSchedulerThreadListElementsNum(schedulerVar);
 8101d7e:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (BitWidthType iterator = 0; iterator < threadListElementsNum; iterator++)
 8101d80:	2300      	movs	r3, #0
 8101d82:	643b      	str	r3, [r7, #64]	; 0x40
 8101d84:	e01c      	b.n	8101dc0 <scheduler_performanceScheduling+0x5a>
 8101d86:	68fb      	ldr	r3, [r7, #12]
 8101d88:	623b      	str	r3, [r7, #32]
 8101d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101d8c:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * scheduler_getSchedulerThreadListThreadVar(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIterator)
{
    return (CosmOS_ThreadVariableType *)(scheduler->cfg->threadList[threadListIterator].threadVar);
 8101d8e:	6a3b      	ldr	r3, [r7, #32]
 8101d90:	681b      	ldr	r3, [r3, #0]
 8101d92:	685a      	ldr	r2, [r3, #4]
 8101d94:	69fb      	ldr	r3, [r7, #28]
 8101d96:	009b      	lsls	r3, r3, #2
 8101d98:	4413      	add	r3, r2
 8101d9a:	681b      	ldr	r3, [r3, #0]
	{
		threadVar = scheduler_getSchedulerThreadListThreadVar(schedulerVar, iterator);
 8101d9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8101d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101da0:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * thread_getThreadSchedulable(CosmOS_ThreadVariableType * thread)
{
    return (CosmOS_SchedulableVariableType *)(thread->schedulable);
 8101da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101da4:	685b      	ldr	r3, [r3, #4]
		currentSchedulableVar = thread_getThreadSchedulable(threadVar);
 8101da6:	647b      	str	r3, [r7, #68]	; 0x44
 8101da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101daa:	62bb      	str	r3, [r7, #40]	; 0x28
    return (schedulable->state);
 8101dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101dae:	685b      	ldr	r3, [r3, #4]
		schedulableState = schedulable_getState(currentSchedulableVar);
 8101db0:	637b      	str	r3, [r7, #52]	; 0x34

		if (schedulableState IS_EQUAL_TO SCHEDULABLE_STATE_ENUM__READY)
 8101db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101db8:	d007      	beq.n	8101dca <scheduler_performanceScheduling+0x64>
	for (BitWidthType iterator = 0; iterator < threadListElementsNum; iterator++)
 8101dba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101dbc:	3301      	adds	r3, #1
 8101dbe:	643b      	str	r3, [r7, #64]	; 0x40
 8101dc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8101dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101dc4:	429a      	cmp	r2, r3
 8101dc6:	d3de      	bcc.n	8101d86 <scheduler_performanceScheduling+0x20>
 8101dc8:	e000      	b.n	8101dcc <scheduler_performanceScheduling+0x66>
		{
			break;
 8101dca:	bf00      	nop
		}
	}

    *schedulableVar = currentSchedulableVar;
 8101dcc:	68bb      	ldr	r3, [r7, #8]
 8101dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8101dd0:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = schedulable_getStackPointer(*schedulableVar);
 8101dd2:	68bb      	ldr	r3, [r7, #8]
 8101dd4:	681b      	ldr	r3, [r3, #0]
 8101dd6:	617b      	str	r3, [r7, #20]
    return (schedulable->stackPointer);
 8101dd8:	697b      	ldr	r3, [r7, #20]
 8101dda:	689a      	ldr	r2, [r3, #8]
 8101ddc:	687b      	ldr	r3, [r7, #4]
 8101dde:	601a      	str	r2, [r3, #0]
 8101de0:	68fb      	ldr	r3, [r7, #12]
 8101de2:	61bb      	str	r3, [r7, #24]
    return (scheduler->cfg->preemptTick);
 8101de4:	69bb      	ldr	r3, [r7, #24]
 8101de6:	681b      	ldr	r3, [r3, #0]
 8101de8:	68db      	ldr	r3, [r3, #12]

    preemptTick = scheduler_getSchedulerPreemptTick(schedulerVar);
 8101dea:	633b      	str	r3, [r7, #48]	; 0x30
    *timerTicks = preemptTick;
 8101dec:	683b      	ldr	r3, [r7, #0]
 8101dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101df0:	601a      	str	r2, [r3, #0]
}
 8101df2:	bf00      	nop
 8101df4:	374c      	adds	r7, #76	; 0x4c
 8101df6:	46bd      	mov	sp, r7
 8101df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dfc:	4770      	bx	lr

08101dfe <scheduler_classicScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_classicScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks, BitWidthType startTick, BitWidthType currentTick)
{
 8101dfe:	b580      	push	{r7, lr}
 8101e00:	b088      	sub	sp, #32
 8101e02:	af00      	add	r7, sp, #0
 8101e04:	60f8      	str	r0, [r7, #12]
 8101e06:	60b9      	str	r1, [r7, #8]
 8101e08:	607a      	str	r2, [r7, #4]
 8101e0a:	603b      	str	r3, [r7, #0]
 8101e0c:	68fb      	ldr	r3, [r7, #12]
 8101e0e:	617b      	str	r3, [r7, #20]
    return (CosmOS_TaskVariableType *)(scheduler->cfg->idleTaskVar);
 8101e10:	697b      	ldr	r3, [r7, #20]
 8101e12:	681b      	ldr	r3, [r3, #0]
 8101e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    CosmOS_TaskVariableType * taskVar;


    taskVar = scheduler_getSchedulerIdleTaskVar( schedulerVar );
 8101e16:	61fb      	str	r3, [r7, #28]
 8101e18:	69fb      	ldr	r3, [r7, #28]
 8101e1a:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * task_getTaskSchedulable(CosmOS_TaskVariableType * task)
{
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8101e1c:	69bb      	ldr	r3, [r7, #24]
 8101e1e:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = task_getTaskSchedulable( taskVar );
 8101e20:	68bb      	ldr	r3, [r7, #8]
 8101e22:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8101e24:	68bb      	ldr	r3, [r7, #8]
 8101e26:	681b      	ldr	r3, [r3, #0]
 8101e28:	4618      	mov	r0, r3
 8101e2a:	f000 fcaa 	bl	8102782 <stackInit_schedulableStackInit>
 8101e2e:	4602      	mov	r2, r0
 8101e30:	687b      	ldr	r3, [r7, #4]
 8101e32:	601a      	str	r2, [r3, #0]

    if ( startTick < currentTick )
 8101e34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101e38:	429a      	cmp	r2, r3
 8101e3a:	d207      	bcs.n	8101e4c <scheduler_classicScheduling+0x4e>
 8101e3c:	68fb      	ldr	r3, [r7, #12]
 8101e3e:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->lastToFirstTaskTicks);
 8101e40:	693b      	ldr	r3, [r7, #16]
 8101e42:	681b      	ldr	r3, [r3, #0]
 8101e44:	699a      	ldr	r2, [r3, #24]
    {
        *timerTicks = scheduler_getSchedulerLastToFirstTaskTicks(schedulerVar);
 8101e46:	683b      	ldr	r3, [r7, #0]
 8101e48:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *timerTicks = startTick - currentTick;
    }
}
 8101e4a:	e004      	b.n	8101e56 <scheduler_classicScheduling+0x58>
        *timerTicks = startTick - currentTick;
 8101e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8101e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101e50:	1ad2      	subs	r2, r2, r3
 8101e52:	683b      	ldr	r3, [r7, #0]
 8101e54:	601a      	str	r2, [r3, #0]
}
 8101e56:	bf00      	nop
 8101e58:	3720      	adds	r7, #32
 8101e5a:	46bd      	mov	sp, r7
 8101e5c:	bd80      	pop	{r7, pc}

08101e5e <scheduler_scheduleNextInstance>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType scheduler_scheduleNextInstance(StackPointerType stackPointer)
{
 8101e5e:	b580      	push	{r7, lr}
 8101e60:	b0c4      	sub	sp, #272	; 0x110
 8101e62:	af00      	add	r7, sp, #0
 8101e64:	1d3b      	adds	r3, r7, #4
 8101e66:	6018      	str	r0, [r3, #0]
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;
    CosmOS_SchedulableVariableType * priorSchedulableVar;


    coreVar = core_getCoreVar();
 8101e68:	f7ff fa8b 	bl	8101382 <core_getCoreVar>
 8101e6c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8101e70:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8101e74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    return (core->schedulerVar);
 8101e78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8101e7c:	691b      	ldr	r3, [r3, #16]
    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8101e7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8101e82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8101e86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    return (core->schedulableInExecution);
 8101e8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8101e8e:	685b      	ldr	r3, [r3, #4]
    priorSchedulableVar = core_getCoreSchedulableInExecution( coreVar );
 8101e90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8101e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8101e98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return (scheduler->rescheduleTriggerState);
 8101e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8101ea0:	6a1b      	ldr	r3, [r3, #32]
	rescheduleTriggerState = scheduler_getSchedulerRescheduleTriggerState( schedulerVar );
 8101ea2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	switch ( rescheduleTriggerState )
 8101ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8101eaa:	2b00      	cmp	r3, #0
 8101eac:	f000 816a 	beq.w	8102184 <scheduler_scheduleNextInstance+0x326>
 8101eb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8101eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101eb8:	f040 8195 	bne.w	81021e6 <scheduler_scheduleNextInstance+0x388>
 8101ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8101ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->cfg->hyperTick);
 8101ec4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8101ec8:	681b      	ldr	r3, [r3, #0]
 8101eca:	689b      	ldr	r3, [r3, #8]
    {
        case RESCHEDULE_TRIGGER_STATE_ENUM__TIMER :
        {
			hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8101ecc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8101ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8101ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->schedulerState);
 8101ed8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8101edc:	695b      	ldr	r3, [r3, #20]
			schedulerState = scheduler_getSchedulerState( schedulerVar );
 8101ede:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8101ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8101ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    return (scheduler->currentTick);
 8101eea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8101eee:	685b      	ldr	r3, [r3, #4]
			currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8101ef0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8101ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8101ef8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return (scheduler->cfg->maxTimerTick);
 8101efc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8101f00:	681b      	ldr	r3, [r3, #0]
 8101f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			maxTimerTick = scheduler_getSchedulerMaxTimerTick( schedulerVar );
 8101f04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8101f08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8101f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    return (scheduler->priorTickStep);
 8101f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8101f14:	689b      	ldr	r3, [r3, #8]
			priorTickStep = scheduler_getSchedulerPriorTickStep(schedulerVar);
 8101f16:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8101f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8101f1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    return (scheduler->cfg->timerTickCount);
 8101f22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8101f26:	681b      	ldr	r3, [r3, #0]
 8101f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			timerTickCount = scheduler_getSchedulerTimerTickCount( schedulerVar );
 8101f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8101f2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8101f32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    return (schedulable->cfg->instanceType);
 8101f36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8101f3a:	681b      	ldr	r3, [r3, #0]
 8101f3c:	685b      	ldr	r3, [r3, #4]
			priorSchedulableInstanceType = schedulable_getInstanceType( priorSchedulableVar );
 8101f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8101f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8101f46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    return (scheduler->scheduleTableIterator);
 8101f4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8101f4e:	68db      	ldr	r3, [r3, #12]
			scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8101f50:	617b      	str	r3, [r7, #20]
 8101f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8101f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    return (scheduler->cfg->scheduleTableElementsNum);
 8101f5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8101f5e:	681b      	ldr	r3, [r3, #0]
 8101f60:	691b      	ldr	r3, [r3, #16]
			scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8101f62:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8101f66:	697b      	ldr	r3, [r7, #20]
 8101f68:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8101f6c:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8101f70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8101f74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8101f78:	681b      	ldr	r3, [r3, #0]
 8101f7a:	681a      	ldr	r2, [r3, #0]
 8101f7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8101f80:	00db      	lsls	r3, r3, #3
 8101f82:	4413      	add	r3, r2
 8101f84:	681b      	ldr	r3, [r3, #0]
 8101f86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

			//TODO: this should be moved to the sysTick interrupt with higher priority to have faster response - without else, that should stay here
			if ( schedulerState IS_EQUAL_TO SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK )
 8101f8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8101f8e:	2b00      	cmp	r3, #0
 8101f90:	d108      	bne.n	8101fa4 <scheduler_scheduleNextInstance+0x146>
 8101f92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8101f96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (schedulable->state);
 8101f9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8101f9e:	685b      	ldr	r3, [r3, #4]
			{
				CosmOS_SchedulableStateType schedulableState;

				schedulableState = schedulable_getState( priorSchedulableVar );
 8101fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				{
					/* reaction */
				}
			}

			if ( priorSchedulableInstanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 8101fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8101fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101fac:	d10d      	bne.n	8101fca <scheduler_scheduleNextInstance+0x16c>
 8101fae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8101fb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8101fb6:	1d3b      	adds	r3, r7, #4
 8101fb8:	681b      	ldr	r3, [r3, #0]
 8101fba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setStackPointer(CosmOS_SchedulableVariableType * schedulable, StackPointerType stackPointerParam)
{
    schedulable->stackPointer = stackPointerParam;
 8101fbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8101fc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8101fc6:	609a      	str	r2, [r3, #8]
}
 8101fc8:	bf00      	nop
				/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
				switchScheduler_schedulable_setStackPointer( priorSchedulableVar, stackPointer );
			}

			/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
			switchScheduler_updateAlarms(coreVar, priorTickStep);
 8101fca:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8101fce:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8101fd2:	f7ff fe7f 	bl	8101cd4 <scheduler_updateAlarms>

			if ( scheduleTableElementsNum AND startTick IS_EQUAL_TO currentTick )
 8101fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8101fda:	2b00      	cmp	r3, #0
 8101fdc:	d06e      	beq.n	81020bc <scheduler_scheduleNextInstance+0x25e>
 8101fde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8101fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8101fe6:	429a      	cmp	r2, r3
 8101fe8:	d168      	bne.n	81020bc <scheduler_scheduleNextInstance+0x25e>
 8101fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8101fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8101ff2:	f107 030c 	add.w	r3, r7, #12
 8101ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8101ffa:	f107 0310 	add.w	r3, r7, #16
 8101ffe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8102002:	f107 0318 	add.w	r3, r7, #24
 8102006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 810200a:	f107 0314 	add.w	r3, r7, #20
 810200e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8102012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8102016:	67fb      	str	r3, [r7, #124]	; 0x7c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8102018:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 810201c:	681b      	ldr	r3, [r3, #0]
 810201e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8102022:	67ba      	str	r2, [r7, #120]	; 0x78
 8102024:	677b      	str	r3, [r7, #116]	; 0x74
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8102026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102028:	681b      	ldr	r3, [r3, #0]
 810202a:	681a      	ldr	r2, [r3, #0]
 810202c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 810202e:	00db      	lsls	r3, r3, #3
 8102030:	4413      	add	r3, r2
 8102032:	685b      	ldr	r3, [r3, #4]
 8102034:	673b      	str	r3, [r7, #112]	; 0x70
 8102036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102038:	66fb      	str	r3, [r7, #108]	; 0x6c
 810203a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810203c:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 810203e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8102042:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8102044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8102048:	681b      	ldr	r3, [r3, #0]
 810204a:	4618      	mov	r0, r3
 810204c:	f000 fb99 	bl	8102782 <stackInit_schedulableStackInit>
 8102050:	4602      	mov	r2, r0
 8102052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8102056:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_STATE_ENUM__RUNNING );
 8102058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 810205c:	681b      	ldr	r3, [r3, #0]
 810205e:	66bb      	str	r3, [r7, #104]	; 0x68
 8102060:	2300      	movs	r3, #0
 8102062:	667b      	str	r3, [r7, #100]	; 0x64
    schedulable->state = stateParam;
 8102064:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102066:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8102068:	605a      	str	r2, [r3, #4]
}
 810206a:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 810206c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8102070:	681b      	ldr	r3, [r3, #0]
 8102072:	3301      	adds	r3, #1
 8102074:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8102076:	fbb3 f2f2 	udiv	r2, r3, r2
 810207a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 810207c:	fb01 f202 	mul.w	r2, r1, r2
 8102080:	1a9a      	subs	r2, r3, r2
 8102082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8102086:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8102088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 810208c:	681b      	ldr	r3, [r3, #0]
 810208e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8102092:	663a      	str	r2, [r7, #96]	; 0x60
 8102094:	65fb      	str	r3, [r7, #92]	; 0x5c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerScheduleTableIterator(CosmOS_SchedulerVariableType * scheduler, BitWidthType scheduleTableIteratorParam)
{
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8102096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102098:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810209a:	60da      	str	r2, [r3, #12]
}
 810209c:	bf00      	nop
 810209e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81020a0:	65bb      	str	r3, [r7, #88]	; 0x58
    return (task->cfg->wcet);
 81020a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81020a4:	681b      	ldr	r3, [r3, #0]
 81020a6:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 81020a8:	657b      	str	r3, [r7, #84]	; 0x54
    *timerTicks = wcet;
 81020aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 81020ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 81020b0:	601a      	str	r2, [r3, #0]
}
 81020b2:	bf00      	nop
			{
				scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,\
												&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

				schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 81020b4:	2300      	movs	r3, #0
 81020b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 81020ba:	e00c      	b.n	81020d6 <scheduler_scheduleNextInstance+0x278>
			}
			else
			{
				/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
				switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 81020bc:	f107 0318 	add.w	r3, r7, #24
 81020c0:	f107 0210 	add.w	r2, r7, #16
 81020c4:	f107 010c 	add.w	r1, r7, #12
 81020c8:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 81020cc:	f7ff fe4b 	bl	8101d66 <scheduler_performanceScheduling>
														&stackPointerRetVal, &timerTicks );
				/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
				switchScheduler_classicScheduling( schedulerVar, &schedulableVar,\
													&stackPointerRetVal, &timerTicks, startTick, currentTick );

				schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 81020d0:	2301      	movs	r3, #1
 81020d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			}

			schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 81020d6:	f107 030c 	add.w	r3, r7, #12
 81020da:	681a      	ldr	r2, [r3, #0]
 81020dc:	f107 0310 	add.w	r3, r7, #16
 81020e0:	681b      	ldr	r3, [r3, #0]
 81020e2:	64ba      	str	r2, [r7, #72]	; 0x48
 81020e4:	647b      	str	r3, [r7, #68]	; 0x44
    schedulable->stackPointer = stackPointerParam;
 81020e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81020e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81020ea:	609a      	str	r2, [r3, #8]
}
 81020ec:	bf00      	nop
			core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 81020ee:	f107 030c 	add.w	r3, r7, #12
 81020f2:	681b      	ldr	r3, [r3, #0]
 81020f4:	4619      	mov	r1, r3
 81020f6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 81020fa:	f7ff f94e 	bl	810139a <core_setSchedulableIntoCurrentContext>
 81020fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102102:	653b      	str	r3, [r7, #80]	; 0x50
 8102104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8102108:	64fb      	str	r3, [r7, #76]	; 0x4c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_SchedulerStateType schedulerStateParam)
{
    scheduler->schedulerState = schedulerStateParam;
 810210a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810210c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 810210e:	615a      	str	r2, [r3, #20]
}
 8102110:	bf00      	nop

			scheduler_setSchedulerState( schedulerVar, schedulerState );

			if ( maxTimerTick < timerTicks )
 8102112:	69bb      	ldr	r3, [r7, #24]
 8102114:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8102118:	429a      	cmp	r2, r3
 810211a:	d202      	bcs.n	8102122 <scheduler_scheduleNextInstance+0x2c4>
			{
				timerTicks = maxTimerTick;
 810211c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8102120:	61bb      	str	r3, [r7, #24]
			}

			currentTick = ( ( currentTick + timerTicks ) % hyperTick );
 8102122:	69ba      	ldr	r2, [r7, #24]
 8102124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8102128:	4413      	add	r3, r2
 810212a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 810212e:	fbb3 f2f2 	udiv	r2, r3, r2
 8102132:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8102136:	fb01 f202 	mul.w	r2, r1, r2
 810213a:	1a9b      	subs	r3, r3, r2
 810213c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
			scheduler_setSchedulerPriorTickStep(schedulerVar, timerTicks);
 8102140:	69bb      	ldr	r3, [r7, #24]
 8102142:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8102146:	63ba      	str	r2, [r7, #56]	; 0x38
 8102148:	637b      	str	r3, [r7, #52]	; 0x34
    scheduler->priorTickStep = priorTickStepParam;
 810214a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810214c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810214e:	609a      	str	r2, [r3, #8]
}
 8102150:	bf00      	nop
 8102152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102156:	643b      	str	r3, [r7, #64]	; 0x40
 8102158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 810215c:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->currentTick = currentTickParam;
 810215e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8102162:	605a      	str	r2, [r3, #4]
}
 8102164:	bf00      	nop
			scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

			switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 8102166:	f107 030c 	add.w	r3, r7, #12
 810216a:	681b      	ldr	r3, [r3, #0]
 810216c:	4619      	mov	r1, r3
 810216e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102172:	f7ff fa48 	bl	8101606 <memoryProtection_setMemoryProtection>

			CILsysTimer_setTicks( timerTicks, timerTickCount );
 8102176:	69bb      	ldr	r3, [r7, #24]
 8102178:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 810217c:	4618      	mov	r0, r3
 810217e:	f001 f8b9 	bl	81032f4 <CILsysTimer_setTicks>
			break;
 8102182:	e030      	b.n	81021e6 <scheduler_scheduleNextInstance+0x388>
 8102184:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8102188:	62bb      	str	r3, [r7, #40]	; 0x28
 810218a:	1d3b      	adds	r3, r7, #4
 810218c:	681b      	ldr	r3, [r3, #0]
 810218e:	627b      	str	r3, [r7, #36]	; 0x24
    schedulable->stackPointer = stackPointerParam;
 8102190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102194:	609a      	str	r2, [r3, #8]
}
 8102196:	bf00      	nop
		case RESCHEDULE_TRIGGER_STATE_ENUM__SYSTEM :
        {
			/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
			switchScheduler_schedulable_setStackPointer( priorSchedulableVar, stackPointer );
			/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
			switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 8102198:	f107 0318 	add.w	r3, r7, #24
 810219c:	f107 0210 	add.w	r2, r7, #16
 81021a0:	f107 010c 	add.w	r1, r7, #12
 81021a4:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 81021a8:	f7ff fddd 	bl	8101d66 <scheduler_performanceScheduling>
													&stackPointerRetVal, &timerTicks );

			schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 81021ac:	f107 030c 	add.w	r3, r7, #12
 81021b0:	681a      	ldr	r2, [r3, #0]
 81021b2:	f107 0310 	add.w	r3, r7, #16
 81021b6:	681b      	ldr	r3, [r3, #0]
 81021b8:	633a      	str	r2, [r7, #48]	; 0x30
 81021ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    schedulable->stackPointer = stackPointerParam;
 81021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81021be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81021c0:	609a      	str	r2, [r3, #8]
}
 81021c2:	bf00      	nop
			core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 81021c4:	f107 030c 	add.w	r3, r7, #12
 81021c8:	681b      	ldr	r3, [r3, #0]
 81021ca:	4619      	mov	r1, r3
 81021cc:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 81021d0:	f7ff f8e3 	bl	810139a <core_setSchedulableIntoCurrentContext>

			switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 81021d4:	f107 030c 	add.w	r3, r7, #12
 81021d8:	681b      	ldr	r3, [r3, #0]
 81021da:	4619      	mov	r1, r3
 81021dc:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 81021e0:	f7ff fa11 	bl	8101606 <memoryProtection_setMemoryProtection>

			break;
 81021e4:	bf00      	nop
 81021e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 81021ea:	623b      	str	r3, [r7, #32]
 81021ec:	2300      	movs	r3, #0
 81021ee:	77fb      	strb	r3, [r7, #31]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerRescheduleTriggerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_BooleanType paramRescheduleTriggerState)
{
    scheduler->rescheduleTriggerState = paramRescheduleTriggerState;
 81021f0:	7ffa      	ldrb	r2, [r7, #31]
 81021f2:	6a3b      	ldr	r3, [r7, #32]
 81021f4:	621a      	str	r2, [r3, #32]
}
 81021f6:	bf00      	nop
		}
	}

	scheduler_setSchedulerRescheduleTriggerState( schedulerVar, RESCHEDULE_TRIGGER_STATE_ENUM__SYSTEM );
    return stackPointerRetVal;
 81021f8:	f107 0310 	add.w	r3, r7, #16
 81021fc:	681b      	ldr	r3, [r3, #0]
};
 81021fe:	4618      	mov	r0, r3
 8102200:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8102204:	46bd      	mov	sp, r7
 8102206:	bd80      	pop	{r7, pc}

08102208 <scheduler_start>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_start(void)
{
 8102208:	b580      	push	{r7, lr}
 810220a:	b0b4      	sub	sp, #208	; 0xd0
 810220c:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 810220e:	f7ff f8b8 	bl	8101382 <core_getCoreVar>
 8102212:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8102216:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 810221a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (core->schedulerVar);
 810221e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8102222:	691b      	ldr	r3, [r3, #16]
    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8102224:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8102228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810222c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->cfg->hyperTick);
 8102230:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8102234:	681b      	ldr	r3, [r3, #0]
 8102236:	689b      	ldr	r3, [r3, #8]
    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8102238:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810223c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->currentTick);
 8102244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8102248:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 810224a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 810224e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102252:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (scheduler->cfg->maxTimerTick);
 8102256:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 810225a:	681b      	ldr	r3, [r3, #0]
 810225c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	maxTimerTick = scheduler_getSchedulerMaxTimerTick( schedulerVar );
 810225e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8102262:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102266:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->cfg->timerTickCount);
 810226a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 810226e:	681b      	ldr	r3, [r3, #0]
 8102270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	timerTickCount = scheduler_getSchedulerTimerTickCount( schedulerVar );
 8102272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8102276:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810227a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->scheduleTableIterator);
 810227e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8102282:	68db      	ldr	r3, [r3, #12]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8102284:	60bb      	str	r3, [r7, #8]
 8102286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810228a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    return (scheduler->cfg->scheduleTableElementsNum);
 810228e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8102292:	681b      	ldr	r3, [r3, #0]
 8102294:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8102296:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    if ( scheduleTableElementsNum )
 810229a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 810229e:	2b00      	cmp	r3, #0
 81022a0:	d022      	beq.n	81022e8 <scheduler_start+0xe0>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 81022a2:	68bb      	ldr	r3, [r7, #8]
 81022a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 81022a8:	429a      	cmp	r2, r3
 81022aa:	bf8c      	ite	hi
 81022ac:	2301      	movhi	r3, #1
 81022ae:	2300      	movls	r3, #0
 81022b0:	b2db      	uxtb	r3, r3
 81022b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if ( IS_NOT( result ) )
 81022b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 81022ba:	2b00      	cmp	r3, #0
 81022bc:	d101      	bne.n	81022c2 <scheduler_start+0xba>
        os_kernelPanic();
 81022be:	f7ff fbcd 	bl	8101a5c <os_kernelPanic>
}
 81022c2:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 81022c4:	68bb      	ldr	r3, [r7, #8]
 81022c6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 81022ca:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 81022ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 81022d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 81022d6:	681b      	ldr	r3, [r3, #0]
 81022d8:	681a      	ldr	r2, [r3, #0]
 81022da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 81022de:	00db      	lsls	r3, r3, #3
 81022e0:	4413      	add	r3, r2
 81022e2:	681b      	ldr	r3, [r3, #0]
 81022e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    }

    if ( scheduleTableElementsNum AND (startTick IS_EQUAL_TO currentTick) )
 81022e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 81022ec:	2b00      	cmp	r3, #0
 81022ee:	d060      	beq.n	81023b2 <scheduler_start+0x1aa>
 81022f0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 81022f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 81022f8:	429a      	cmp	r2, r3
 81022fa:	d15a      	bne.n	81023b2 <scheduler_start+0x1aa>
 81022fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102300:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8102304:	1d3b      	adds	r3, r7, #4
 8102306:	67fb      	str	r3, [r7, #124]	; 0x7c
 8102308:	f107 030c 	add.w	r3, r7, #12
 810230c:	67bb      	str	r3, [r7, #120]	; 0x78
 810230e:	f107 0310 	add.w	r3, r7, #16
 8102312:	677b      	str	r3, [r7, #116]	; 0x74
 8102314:	f107 0308 	add.w	r3, r7, #8
 8102318:	673b      	str	r3, [r7, #112]	; 0x70
 810231a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 810231e:	66fb      	str	r3, [r7, #108]	; 0x6c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8102320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102322:	681b      	ldr	r3, [r3, #0]
 8102324:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8102328:	66ba      	str	r2, [r7, #104]	; 0x68
 810232a:	667b      	str	r3, [r7, #100]	; 0x64
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 810232c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810232e:	681b      	ldr	r3, [r3, #0]
 8102330:	681a      	ldr	r2, [r3, #0]
 8102332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8102334:	00db      	lsls	r3, r3, #3
 8102336:	4413      	add	r3, r2
 8102338:	685b      	ldr	r3, [r3, #4]
 810233a:	663b      	str	r3, [r7, #96]	; 0x60
 810233c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 810233e:	65fb      	str	r3, [r7, #92]	; 0x5c
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8102340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102342:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8102344:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8102346:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8102348:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 810234a:	681b      	ldr	r3, [r3, #0]
 810234c:	4618      	mov	r0, r3
 810234e:	f000 fa18 	bl	8102782 <stackInit_schedulableStackInit>
 8102352:	4602      	mov	r2, r0
 8102354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102356:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_STATE_ENUM__RUNNING );
 8102358:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 810235a:	681b      	ldr	r3, [r3, #0]
 810235c:	65bb      	str	r3, [r7, #88]	; 0x58
 810235e:	2300      	movs	r3, #0
 8102360:	657b      	str	r3, [r7, #84]	; 0x54
    schedulable->state = stateParam;
 8102362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8102366:	605a      	str	r2, [r3, #4]
}
 8102368:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 810236a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 810236c:	681b      	ldr	r3, [r3, #0]
 810236e:	3301      	adds	r3, #1
 8102370:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8102372:	fbb3 f2f2 	udiv	r2, r3, r2
 8102376:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8102378:	fb01 f202 	mul.w	r2, r1, r2
 810237c:	1a9a      	subs	r2, r3, r2
 810237e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102380:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8102382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102384:	681b      	ldr	r3, [r3, #0]
 8102386:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 810238a:	653a      	str	r2, [r7, #80]	; 0x50
 810238c:	64fb      	str	r3, [r7, #76]	; 0x4c
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 810238e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102390:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8102392:	60da      	str	r2, [r3, #12]
}
 8102394:	bf00      	nop
 8102396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102398:	64bb      	str	r3, [r7, #72]	; 0x48
    return (task->cfg->wcet);
 810239a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810239c:	681b      	ldr	r3, [r3, #0]
 810239e:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 81023a0:	647b      	str	r3, [r7, #68]	; 0x44
    *timerTicks = wcet;
 81023a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81023a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81023a6:	601a      	str	r2, [r3, #0]
}
 81023a8:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,\
											&scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 81023aa:	2300      	movs	r3, #0
 81023ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 81023b0:	e00b      	b.n	81023ca <scheduler_start+0x1c2>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 81023b2:	f107 0310 	add.w	r3, r7, #16
 81023b6:	f107 020c 	add.w	r2, r7, #12
 81023ba:	1d39      	adds	r1, r7, #4
 81023bc:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 81023c0:	f7ff fcd1 	bl	8101d66 <scheduler_performanceScheduling>
												&stackPointerRetVal, &timerTicks );
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling( schedulerVar, &schedulableVar,\
											&stackPointerRetVal, &timerTicks, startTick, currentTick );

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 81023c4:	2301      	movs	r3, #1
 81023c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 81023ca:	687a      	ldr	r2, [r7, #4]
 81023cc:	68fb      	ldr	r3, [r7, #12]
 81023ce:	63ba      	str	r2, [r7, #56]	; 0x38
 81023d0:	637b      	str	r3, [r7, #52]	; 0x34
    schedulable->stackPointer = stackPointerParam;
 81023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81023d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81023d6:	609a      	str	r2, [r3, #8]
}
 81023d8:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 81023da:	687b      	ldr	r3, [r7, #4]
 81023dc:	4619      	mov	r1, r3
 81023de:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 81023e2:	f7fe ffda 	bl	810139a <core_setSchedulableIntoCurrentContext>
 81023e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81023ea:	643b      	str	r3, [r7, #64]	; 0x40
 81023ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 81023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->schedulerState = schedulerStateParam;
 81023f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81023f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81023f6:	615a      	str	r2, [r3, #20]
}
 81023f8:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );

	if ( maxTimerTick < timerTicks )
 81023fa:	693b      	ldr	r3, [r7, #16]
 81023fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8102400:	429a      	cmp	r2, r3
 8102402:	d202      	bcs.n	810240a <scheduler_start+0x202>
	{
		timerTicks = maxTimerTick;
 8102404:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8102408:	613b      	str	r3, [r7, #16]
	}

    currentTick = ( currentTick + timerTicks ) % hyperTick;
 810240a:	693a      	ldr	r2, [r7, #16]
 810240c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8102410:	4413      	add	r3, r2
 8102412:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8102416:	fbb3 f2f2 	udiv	r2, r3, r2
 810241a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 810241e:	fb01 f202 	mul.w	r2, r1, r2
 8102422:	1a9b      	subs	r3, r3, r2
 8102424:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	scheduler_setSchedulerPriorTickStep(schedulerVar, timerTicks);
 8102428:	693b      	ldr	r3, [r7, #16]
 810242a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 810242e:	61ba      	str	r2, [r7, #24]
 8102430:	617b      	str	r3, [r7, #20]
    scheduler->priorTickStep = priorTickStepParam;
 8102432:	69bb      	ldr	r3, [r7, #24]
 8102434:	697a      	ldr	r2, [r7, #20]
 8102436:	609a      	str	r2, [r3, #8]
}
 8102438:	bf00      	nop
 810243a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 810243e:	623b      	str	r3, [r7, #32]
 8102440:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8102444:	61fb      	str	r3, [r7, #28]
    scheduler->currentTick = currentTickParam;
 8102446:	6a3b      	ldr	r3, [r7, #32]
 8102448:	69fa      	ldr	r2, [r7, #28]
 810244a:	605a      	str	r2, [r3, #4]
}
 810244c:	bf00      	nop
	scheduler_setSchedulerCurrentTick(schedulerVar, currentTick);

	switchMemoryProtection_setMemoryProtection( coreVar , schedulableVar );
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	4619      	mov	r1, r3
 8102452:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8102456:	f7ff f8d6 	bl	8101606 <memoryProtection_setMemoryProtection>
 810245a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 810245e:	62bb      	str	r3, [r7, #40]	; 0x28
 8102460:	2302      	movs	r3, #2
 8102462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreOsState(CosmOS_CoreVariableType * core, CosmOS_OsStateType osStateParam)
{
    core->osState = osStateParam;
 8102466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102468:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 810246c:	761a      	strb	r2, [r3, #24]
}
 810246e:	bf00      	nop
 8102470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102474:	633b      	str	r3, [r7, #48]	; 0x30
 8102476:	2300      	movs	r3, #0
 8102478:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scheduler->rescheduleTriggerState = paramRescheduleTriggerState;
 810247c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8102480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102482:	621a      	str	r2, [r3, #32]
}
 8102484:	bf00      	nop

	core_setCoreOsState( coreVar, OS_STATE_ENUM__STARTED );

	scheduler_setSchedulerRescheduleTriggerState( schedulerVar, RESCHEDULE_TRIGGER_STATE_ENUM__SYSTEM );

    CILsysTimer_startTimer( timerTicks, timerTickCount );
 8102486:	693b      	ldr	r3, [r7, #16]
 8102488:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 810248c:	4618      	mov	r0, r3
 810248e:	f000 ff17 	bl	81032c0 <CILsysTimer_startTimer>

    CILstack_setStackPointer( stackPointerRetVal );
 8102492:	68fb      	ldr	r3, [r7, #12]
 8102494:	4618      	mov	r0, r3
 8102496:	f000 fe49 	bl	810312c <CILstack_setStackPointer>
};
 810249a:	bf00      	nop
 810249c:	37d0      	adds	r7, #208	; 0xd0
 810249e:	46bd      	mov	sp, r7
 81024a0:	bd80      	pop	{r7, pc}

081024a2 <schedulerSync_sync>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SchedulerSyncStateType schedulerSync_sync(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_CoreVariableType * coreVar, BitWidthType currentTick, BitWidthType hyperTick)
{
 81024a2:	b580      	push	{r7, lr}
 81024a4:	b096      	sub	sp, #88	; 0x58
 81024a6:	af00      	add	r7, sp, #0
 81024a8:	60f8      	str	r0, [r7, #12]
 81024aa:	60b9      	str	r1, [r7, #8]
 81024ac:	607a      	str	r2, [r7, #4]
 81024ae:	603b      	str	r3, [r7, #0]

    CosmOS_BooleanType syncInitState;

    CosmOS_SchedulerSyncStateType schedulerState = SCHEDULER_SYNC_STATE_ENUM__NOT_IN_SYNC;
 81024b0:	2300      	movs	r3, #0
 81024b2:	657b      	str	r3, [r7, #84]	; 0x54
 81024b4:	68fb      	ldr	r3, [r7, #12]
 81024b6:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->syncInitState);
 81024b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81024ba:	7f1b      	ldrb	r3, [r3, #28]


    syncInitState = scheduler_getSchedulerSyncInitState( schedulerVar );
 81024bc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    if ( __COSMOS_UNLIKELY( syncInitState IS_EQUAL_TO False ) )
 81024c0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 81024c4:	2b00      	cmp	r3, #0
 81024c6:	bf0c      	ite	eq
 81024c8:	2301      	moveq	r3, #1
 81024ca:	2300      	movne	r3, #0
 81024cc:	b2db      	uxtb	r3, r3
 81024ce:	2b00      	cmp	r3, #0
 81024d0:	d030      	beq.n	8102534 <schedulerSync_sync+0x92>
 81024d2:	68fb      	ldr	r3, [r7, #12]
 81024d4:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->firstSyncTaskStartTick);
 81024d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81024d8:	681b      	ldr	r3, [r3, #0]
 81024da:	6a1b      	ldr	r3, [r3, #32]
    {
        BitWidthType firstSyncTaskStartTick;


        firstSyncTaskStartTick = scheduler_getSchedulerFirstSyncTaskStartTick( schedulerVar );
 81024dc:	647b      	str	r3, [r7, #68]	; 0x44

        if ( firstSyncTaskStartTick IS_EQUAL_TO currentTick )
 81024de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81024e0:	687b      	ldr	r3, [r7, #4]
 81024e2:	429a      	cmp	r2, r3
 81024e4:	d150      	bne.n	8102588 <schedulerSync_sync+0xe6>
 81024e6:	68fb      	ldr	r3, [r7, #12]
 81024e8:	623b      	str	r3, [r7, #32]
    return (scheduler->cfg->syncTicks);
 81024ea:	6a3b      	ldr	r3, [r7, #32]
 81024ec:	681b      	ldr	r3, [r3, #0]
 81024ee:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks,
                          nextTick;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 81024f0:	643b      	str	r3, [r7, #64]	; 0x40

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 81024f2:	687a      	ldr	r2, [r7, #4]
 81024f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81024f6:	4413      	add	r3, r2
 81024f8:	683a      	ldr	r2, [r7, #0]
 81024fa:	fbb3 f2f2 	udiv	r2, r3, r2
 81024fe:	6839      	ldr	r1, [r7, #0]
 8102500:	fb01 f202 	mul.w	r2, r1, r2
 8102504:	1a9b      	subs	r3, r3, r2
 8102506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8102508:	68fb      	ldr	r3, [r7, #12]
 810250a:	62bb      	str	r3, [r7, #40]	; 0x28
 810250c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810250e:	627b      	str	r3, [r7, #36]	; 0x24
    scheduler->nextSyncTick = paramNextSyncTick;
 8102510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102514:	619a      	str	r2, [r3, #24]
}
 8102516:	bf00      	nop
 8102518:	68fb      	ldr	r3, [r7, #12]
 810251a:	633b      	str	r3, [r7, #48]	; 0x30
 810251c:	2301      	movs	r3, #1
 810251e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scheduler->syncInitState = paramSyncInitState;
 8102522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102524:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8102528:	771a      	strb	r2, [r3, #28]
}
 810252a:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            scheduler_setSchedulerSyncInitState( schedulerVar, True );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 810252c:	f04f 33ff 	mov.w	r3, #4294967295
 8102530:	657b      	str	r3, [r7, #84]	; 0x54
 8102532:	e029      	b.n	8102588 <schedulerSync_sync+0xe6>
 8102534:	68fb      	ldr	r3, [r7, #12]
 8102536:	61fb      	str	r3, [r7, #28]
    return (scheduler->nextSyncTick);
 8102538:	69fb      	ldr	r3, [r7, #28]
 810253a:	699b      	ldr	r3, [r3, #24]
    else
    {
        BitWidthType nextTick;


        nextTick = scheduler_getSchedulerNextSyncTick( schedulerVar );
 810253c:	64fb      	str	r3, [r7, #76]	; 0x4c

        if ( __COSMOS_UNLIKELY( nextTick IS_EQUAL_TO currentTick ) )
 810253e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	429a      	cmp	r2, r3
 8102544:	bf0c      	ite	eq
 8102546:	2301      	moveq	r3, #1
 8102548:	2300      	movne	r3, #0
 810254a:	b2db      	uxtb	r3, r3
 810254c:	2b00      	cmp	r3, #0
 810254e:	d01b      	beq.n	8102588 <schedulerSync_sync+0xe6>
 8102550:	68fb      	ldr	r3, [r7, #12]
 8102552:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->syncTicks);
 8102554:	693b      	ldr	r3, [r7, #16]
 8102556:	681b      	ldr	r3, [r3, #0]
 8102558:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 810255a:	64bb      	str	r3, [r7, #72]	; 0x48

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 810255c:	687a      	ldr	r2, [r7, #4]
 810255e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102560:	4413      	add	r3, r2
 8102562:	683a      	ldr	r2, [r7, #0]
 8102564:	fbb3 f2f2 	udiv	r2, r3, r2
 8102568:	6839      	ldr	r1, [r7, #0]
 810256a:	fb01 f202 	mul.w	r2, r1, r2
 810256e:	1a9b      	subs	r3, r3, r2
 8102570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102572:	68fb      	ldr	r3, [r7, #12]
 8102574:	61bb      	str	r3, [r7, #24]
 8102576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102578:	617b      	str	r3, [r7, #20]
    scheduler->nextSyncTick = paramNextSyncTick;
 810257a:	69bb      	ldr	r3, [r7, #24]
 810257c:	697a      	ldr	r2, [r7, #20]
 810257e:	619a      	str	r2, [r3, #24]
}
 8102580:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8102582:	f04f 33ff 	mov.w	r3, #4294967295
 8102586:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    if ( schedulerState IS_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 8102588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810258e:	d107      	bne.n	81025a0 <schedulerSync_sync+0xfe>
    {
        coreSync_getBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8102590:	2103      	movs	r1, #3
 8102592:	68b8      	ldr	r0, [r7, #8]
 8102594:	f7fe ff4a 	bl	810142c <coreSync_getBarrier>
        coreSync_reactivateBarrier( coreVar, SCHEDULERS_SYNC_ID );
 8102598:	2103      	movs	r1, #3
 810259a:	68b8      	ldr	r0, [r7, #8]
 810259c:	f7fe ffb4 	bl	8101508 <coreSync_reactivateBarrier>
    }

    return schedulerState;
 81025a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
};
 81025a2:	4618      	mov	r0, r3
 81025a4:	3758      	adds	r7, #88	; 0x58
 81025a6:	46bd      	mov	sp, r7
 81025a8:	bd80      	pop	{r7, pc}

081025aa <spinlock_getSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_getSpinlock(BitWidthType id)
{
 81025aa:	b580      	push	{r7, lr}
 81025ac:	b090      	sub	sp, #64	; 0x40
 81025ae:	af00      	add	r7, sp, #0
 81025b0:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 81025b2:	f7ff fa49 	bl	8101a48 <os_getOsVar>
 81025b6:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81025b8:	464b      	mov	r3, r9
 81025ba:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 81025bc:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 81025be:	637b      	str	r3, [r7, #52]	; 0x34
 81025c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81025c2:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 81025c4:	693b      	ldr	r3, [r7, #16]
 81025c6:	681b      	ldr	r3, [r3, #0]
 81025c8:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 81025ca:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 81025cc:	687a      	ldr	r2, [r7, #4]
 81025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81025d0:	429a      	cmp	r2, r3
 81025d2:	bf34      	ite	cc
 81025d4:	2301      	movcc	r3, #1
 81025d6:	2300      	movcs	r3, #0
 81025d8:	b2db      	uxtb	r3, r3
 81025da:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 81025dc:	697b      	ldr	r3, [r7, #20]
 81025de:	2b00      	cmp	r3, #0
 81025e0:	d101      	bne.n	81025e6 <spinlock_getSpinlock+0x3c>
        os_kernelPanic();
 81025e2:	f7ff fa3b 	bl	8101a5c <os_kernelPanic>
}
 81025e6:	bf00      	nop
 81025e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81025ea:	61fb      	str	r3, [r7, #28]
 81025ec:	687b      	ldr	r3, [r7, #4]
 81025ee:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SpinlockVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SpinlockVariableType * os_getOsSpinlockVar(CosmOS_OsVariableType * osVar, BitWidthType spinlockId)
{
    return (&(osVar->spinlockVars[spinlockId]));
 81025f0:	69fb      	ldr	r3, [r7, #28]
 81025f2:	691a      	ldr	r2, [r3, #16]
 81025f4:	69bb      	ldr	r3, [r7, #24]
 81025f6:	00db      	lsls	r3, r3, #3
 81025f8:	4413      	add	r3, r2

	spinlockVar = os_getOsSpinlockVar(osVar, id);
 81025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 81025fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8102600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102602:	623b      	str	r3, [r7, #32]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType spinlock_willCauseDeadlock(CosmOS_CoreVariableType * coreVar, CosmOS_SpinlockVariableType * spinlockVar)
{
    return ((spinlockVar->spinlock IS_EQUAL_TO SPINLOCK_STATE_ENUM__OCCUPIED)\
 8102604:	6a3b      	ldr	r3, [r7, #32]
 8102606:	681b      	ldr	r3, [r3, #0]
			AND (coreVar->schedulableInExecution IS_EQUAL_TO spinlockVar->schedulableOwner)) ? True : False;
 8102608:	2b01      	cmp	r3, #1
 810260a:	d107      	bne.n	810261c <spinlock_getSpinlock+0x72>
 810260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810260e:	685a      	ldr	r2, [r3, #4]
 8102610:	6a3b      	ldr	r3, [r7, #32]
 8102612:	685b      	ldr	r3, [r3, #4]
 8102614:	429a      	cmp	r2, r3
 8102616:	d101      	bne.n	810261c <spinlock_getSpinlock+0x72>
 8102618:	2301      	movs	r3, #1
 810261a:	e000      	b.n	810261e <spinlock_getSpinlock+0x74>
 810261c:	2300      	movs	r3, #0
 810261e:	b2db      	uxtb	r3, r3

	willCauseDeadlock = spinlock_willCauseDeadlock(coreVar, spinlockVar);
 8102620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if( willCauseDeadlock )
 8102624:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8102628:	2b00      	cmp	r3, #0
 810262a:	d003      	beq.n	8102634 <spinlock_getSpinlock+0x8a>
	{
		spinlockState = SPINLOCK_STATE_ENUM__DEADLOCK_WARNING;
 810262c:	f04f 33ff 	mov.w	r3, #4294967295
 8102630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8102632:	e00d      	b.n	8102650 <spinlock_getSpinlock+0xa6>
	}
	else
	{
		spinlockState = CILspinlock_getSpinlock(&(spinlockVar->spinlock), \
 8102634:	6af8      	ldr	r0, [r7, #44]	; 0x2c
												id, \
												coreVar->schedulableInExecution->cfg->id );
 8102636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102638:	685b      	ldr	r3, [r3, #4]
 810263a:	681b      	ldr	r3, [r3, #0]
		spinlockState = CILspinlock_getSpinlock(&(spinlockVar->spinlock), \
 810263c:	691b      	ldr	r3, [r3, #16]
 810263e:	461a      	mov	r2, r3
 8102640:	6879      	ldr	r1, [r7, #4]
 8102642:	f000 fce0 	bl	8103006 <CILspinlock_getSpinlock>
 8102646:	63f8      	str	r0, [r7, #60]	; 0x3c
		spinlockVar->schedulableOwner = coreVar->schedulableInExecution;
 8102648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810264a:	685a      	ldr	r2, [r3, #4]
 810264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810264e:	605a      	str	r2, [r3, #4]
	}

    return spinlockState;
 8102650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8102652:	4618      	mov	r0, r3
 8102654:	3740      	adds	r7, #64	; 0x40
 8102656:	46bd      	mov	sp, r7
 8102658:	bd80      	pop	{r7, pc}

0810265a <spinlock_trySpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_trySpinlock(BitWidthType id)
{
 810265a:	b580      	push	{r7, lr}
 810265c:	b08c      	sub	sp, #48	; 0x30
 810265e:	af00      	add	r7, sp, #0
 8102660:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 8102662:	f7ff f9f1 	bl	8101a48 <os_getOsVar>
 8102666:	62f8      	str	r0, [r7, #44]	; 0x2c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8102668:	464b      	mov	r3, r9
 810266a:	60bb      	str	r3, [r7, #8]
    return (CosmOS_CoreVariableType *)result;
 810266c:	68bb      	ldr	r3, [r7, #8]
    coreVar = CILcore_getCoreVar();
 810266e:	62bb      	str	r3, [r7, #40]	; 0x28
 8102670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102672:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfSpinlocks);
 8102674:	68fb      	ldr	r3, [r7, #12]
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 810267a:	627b      	str	r3, [r7, #36]	; 0x24

	cosmosAssert( id < numberOfSpinlocks );
 810267c:	687a      	ldr	r2, [r7, #4]
 810267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102680:	429a      	cmp	r2, r3
 8102682:	bf34      	ite	cc
 8102684:	2301      	movcc	r3, #1
 8102686:	2300      	movcs	r3, #0
 8102688:	b2db      	uxtb	r3, r3
 810268a:	613b      	str	r3, [r7, #16]
    if ( IS_NOT( result ) )
 810268c:	693b      	ldr	r3, [r7, #16]
 810268e:	2b00      	cmp	r3, #0
 8102690:	d101      	bne.n	8102696 <spinlock_trySpinlock+0x3c>
        os_kernelPanic();
 8102692:	f7ff f9e3 	bl	8101a5c <os_kernelPanic>
}
 8102696:	bf00      	nop
 8102698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810269a:	61bb      	str	r3, [r7, #24]
 810269c:	687b      	ldr	r3, [r7, #4]
 810269e:	617b      	str	r3, [r7, #20]
    return (&(osVar->spinlockVars[spinlockId]));
 81026a0:	69bb      	ldr	r3, [r7, #24]
 81026a2:	691a      	ldr	r2, [r3, #16]
 81026a4:	697b      	ldr	r3, [r7, #20]
 81026a6:	00db      	lsls	r3, r3, #3
 81026a8:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 81026aa:	623b      	str	r3, [r7, #32]

	spinlockState = CILspinlock_trySpinlock(&(spinlockVar->spinlock), \
 81026ac:	6a38      	ldr	r0, [r7, #32]
											id, \
											coreVar->schedulableInExecution->cfg->id );
 81026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81026b0:	685b      	ldr	r3, [r3, #4]
 81026b2:	681b      	ldr	r3, [r3, #0]
	spinlockState = CILspinlock_trySpinlock(&(spinlockVar->spinlock), \
 81026b4:	691b      	ldr	r3, [r3, #16]
 81026b6:	461a      	mov	r2, r3
 81026b8:	6879      	ldr	r1, [r7, #4]
 81026ba:	f000 fcc4 	bl	8103046 <CILspinlock_trySpinlock>
 81026be:	61f8      	str	r0, [r7, #28]

	if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 81026c0:	69fb      	ldr	r3, [r7, #28]
 81026c2:	2b02      	cmp	r3, #2
 81026c4:	d103      	bne.n	81026ce <spinlock_trySpinlock+0x74>
	{
		spinlockVar->schedulableOwner = coreVar->schedulableInExecution;
 81026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81026c8:	685a      	ldr	r2, [r3, #4]
 81026ca:	6a3b      	ldr	r3, [r7, #32]
 81026cc:	605a      	str	r2, [r3, #4]
	}

    return spinlockState;
 81026ce:	69fb      	ldr	r3, [r7, #28]
}
 81026d0:	4618      	mov	r0, r3
 81026d2:	3730      	adds	r7, #48	; 0x30
 81026d4:	46bd      	mov	sp, r7
 81026d6:	bd80      	pop	{r7, pc}

081026d8 <spinlock_releaseSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_releaseSpinlock(BitWidthType id)
{
 81026d8:	b580      	push	{r7, lr}
 81026da:	b090      	sub	sp, #64	; 0x40
 81026dc:	af00      	add	r7, sp, #0
 81026de:	6078      	str	r0, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;

    osVar = os_getOsVar();
 81026e0:	f7ff f9b2 	bl	8101a48 <os_getOsVar>
 81026e4:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81026e6:	464b      	mov	r3, r9
 81026e8:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 81026ea:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 81026ec:	637b      	str	r3, [r7, #52]	; 0x34
 81026ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81026f0:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 81026f2:	693b      	ldr	r3, [r7, #16]
 81026f4:	681b      	ldr	r3, [r3, #0]
 81026f6:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 81026f8:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 81026fa:	687a      	ldr	r2, [r7, #4]
 81026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81026fe:	429a      	cmp	r2, r3
 8102700:	bf34      	ite	cc
 8102702:	2301      	movcc	r3, #1
 8102704:	2300      	movcs	r3, #0
 8102706:	b2db      	uxtb	r3, r3
 8102708:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 810270a:	697b      	ldr	r3, [r7, #20]
 810270c:	2b00      	cmp	r3, #0
 810270e:	d101      	bne.n	8102714 <spinlock_releaseSpinlock+0x3c>
        os_kernelPanic();
 8102710:	f7ff f9a4 	bl	8101a5c <os_kernelPanic>
}
 8102714:	bf00      	nop
 8102716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102718:	61fb      	str	r3, [r7, #28]
 810271a:	687b      	ldr	r3, [r7, #4]
 810271c:	61bb      	str	r3, [r7, #24]
    return (&(osVar->spinlockVars[spinlockId]));
 810271e:	69fb      	ldr	r3, [r7, #28]
 8102720:	691a      	ldr	r2, [r3, #16]
 8102722:	69bb      	ldr	r3, [r7, #24]
 8102724:	00db      	lsls	r3, r3, #3
 8102726:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 8102728:	62fb      	str	r3, [r7, #44]	; 0x2c
 810272a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810272c:	627b      	str	r3, [r7, #36]	; 0x24
 810272e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102730:	623b      	str	r3, [r7, #32]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType spinlock_ownsSchedulableSpinlock(CosmOS_CoreVariableType * coreVar, CosmOS_SpinlockVariableType * spinlockVar)
{
    return (coreVar->schedulableInExecution IS_EQUAL_TO spinlockVar->schedulableOwner) ? True : False;
 8102732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102734:	685a      	ldr	r2, [r3, #4]
 8102736:	6a3b      	ldr	r3, [r7, #32]
 8102738:	685b      	ldr	r3, [r3, #4]
 810273a:	429a      	cmp	r2, r3
 810273c:	bf0c      	ite	eq
 810273e:	2301      	moveq	r3, #1
 8102740:	2300      	movne	r3, #0
 8102742:	b2db      	uxtb	r3, r3

	ownsSchedulableSpinlock = spinlock_ownsSchedulableSpinlock(coreVar, spinlockVar);
 8102744:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if ( spinlockVar->spinlock IS_EQUAL_TO SPINLOCK_STATE_ENUM__OCCUPIED )
 8102748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810274a:	681b      	ldr	r3, [r3, #0]
 810274c:	2b01      	cmp	r3, #1
 810274e:	d111      	bne.n	8102774 <spinlock_releaseSpinlock+0x9c>
	{
		if ( ownsSchedulableSpinlock )
 8102750:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8102754:	2b00      	cmp	r3, #0
 8102756:	d00a      	beq.n	810276e <spinlock_releaseSpinlock+0x96>
		{
			spinlockState = CILspinlock_releaseSpinlock(&(spinlockVar->spinlock), \
 8102758:	6af8      	ldr	r0, [r7, #44]	; 0x2c
														id, \
														coreVar->schedulableInExecution->cfg->id );
 810275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810275c:	685b      	ldr	r3, [r3, #4]
 810275e:	681b      	ldr	r3, [r3, #0]
			spinlockState = CILspinlock_releaseSpinlock(&(spinlockVar->spinlock), \
 8102760:	691b      	ldr	r3, [r3, #16]
 8102762:	461a      	mov	r2, r3
 8102764:	6879      	ldr	r1, [r7, #4]
 8102766:	f000 fc8a 	bl	810307e <CILspinlock_releaseSpinlock>
 810276a:	63f8      	str	r0, [r7, #60]	; 0x3c
 810276c:	e004      	b.n	8102778 <spinlock_releaseSpinlock+0xa0>
		}
		else
		{
			spinlockState = SPINLOCK_STATE_ENUM__ERROR_SCHEDULABLE_IS_NOT_OWNER;
 810276e:	2303      	movs	r3, #3
 8102770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8102772:	e001      	b.n	8102778 <spinlock_releaseSpinlock+0xa0>
		}
	}
	else
	{
		spinlockState = SPINLOCK_STATE_ENUM__ERROR_NOT_IN_OCCUPIED_STATE;
 8102774:	2304      	movs	r3, #4
 8102776:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	return spinlockState;
 8102778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 810277a:	4618      	mov	r0, r3
 810277c:	3740      	adds	r7, #64	; 0x40
 810277e:	46bd      	mov	sp, r7
 8102780:	bd80      	pop	{r7, pc}

08102782 <stackInit_schedulableStackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType stackInit_schedulableStackInit(CosmOS_SchedulableVariableType  * schedulable)
{
 8102782:	b580      	push	{r7, lr}
 8102784:	b08c      	sub	sp, #48	; 0x30
 8102786:	af00      	add	r7, sp, #0
 8102788:	6078      	str	r0, [r7, #4]
 810278a:	687b      	ldr	r3, [r7, #4]
 810278c:	60fb      	str	r3, [r7, #12]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 810278e:	68fb      	ldr	r3, [r7, #12]
 8102790:	681b      	ldr	r3, [r3, #0]
 8102792:	681b      	ldr	r3, [r3, #0]
    StackPointerType stackPointer;

    CosmOS_StackConfigurationType * stack;


    stack = schedulable_getStack( schedulable );
 8102794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102796:	687b      	ldr	r3, [r7, #4]
 8102798:	613b      	str	r3, [r7, #16]
    return (schedulable->cfg->handler);
 810279a:	693b      	ldr	r3, [r7, #16]
 810279c:	681b      	ldr	r3, [r3, #0]
 810279e:	689b      	ldr	r3, [r3, #8]
    handler = schedulable_getHandler( schedulable );
 81027a0:	62bb      	str	r3, [r7, #40]	; 0x28
 81027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81027a4:	617b      	str	r3, [r7, #20]
    return (stack->stackLowAddress);
 81027a6:	697b      	ldr	r3, [r7, #20]
 81027a8:	685b      	ldr	r3, [r3, #4]

    stackLowAddress = stack_getStackLowAddress( stack );
 81027aa:	627b      	str	r3, [r7, #36]	; 0x24
 81027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81027ae:	61bb      	str	r3, [r7, #24]
    return (stack->stackHighAddress);
 81027b0:	69bb      	ldr	r3, [r7, #24]
 81027b2:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 81027b4:	623b      	str	r3, [r7, #32]

    stackPointer = CILstack_stackInit( stackLowAddress, stackHighAddress, (BitWidthType)handler );
 81027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81027b8:	461a      	mov	r2, r3
 81027ba:	6a39      	ldr	r1, [r7, #32]
 81027bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81027be:	f000 fc72 	bl	81030a6 <CILstack_stackInit>
 81027c2:	61f8      	str	r0, [r7, #28]

    return stackPointer;
 81027c4:	69fb      	ldr	r3, [r7, #28]
}
 81027c6:	4618      	mov	r0, r3
 81027c8:	3730      	adds	r7, #48	; 0x30
 81027ca:	46bd      	mov	sp, r7
 81027cc:	bd80      	pop	{r7, pc}

081027ce <stackInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void stackInit_init(CosmOS_CoreVariableType * coreVar)
{
 81027ce:	b580      	push	{r7, lr}
 81027d0:	b094      	sub	sp, #80	; 0x50
 81027d2:	af00      	add	r7, sp, #0
 81027d4:	6078      	str	r0, [r7, #4]
 81027d6:	687b      	ldr	r3, [r7, #4]
 81027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->cfg->numberOfPrograms);
 81027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81027dc:	681b      	ldr	r3, [r3, #0]
 81027de:	685b      	ldr	r3, [r3, #4]
                  stackPointerRetVal;

    CosmOS_ThreadVariableType * threadVar;
    CosmOS_ProgramVariableType * programVar;

    numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 81027e0:	647b      	str	r3, [r7, #68]	; 0x44

    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 81027e2:	2300      	movs	r3, #0
 81027e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 81027e6:	e03a      	b.n	810285e <stackInit_init+0x90>
 81027e8:	687b      	ldr	r3, [r7, #4]
 81027ea:	627b      	str	r3, [r7, #36]	; 0x24
 81027ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81027ee:	623b      	str	r3, [r7, #32]
    return (&(core->programVars[programIterator]));
 81027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81027f2:	68da      	ldr	r2, [r3, #12]
 81027f4:	6a3b      	ldr	r3, [r7, #32]
 81027f6:	011b      	lsls	r3, r3, #4
 81027f8:	4413      	add	r3, r2
    {
        programVar = core_getCoreProgramVar( coreVar, programIterator );
 81027fa:	643b      	str	r3, [r7, #64]	; 0x40
 81027fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81027fe:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->numberOfThreads);
 8102800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102802:	681b      	ldr	r3, [r3, #0]
 8102804:	689b      	ldr	r3, [r3, #8]
        numberOfThreads = program_getProgramNumberOfThreads( programVar );
 8102806:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 8102808:	2300      	movs	r3, #0
 810280a:	64bb      	str	r3, [r7, #72]	; 0x48
 810280c:	e020      	b.n	8102850 <stackInit_init+0x82>
 810280e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102810:	613b      	str	r3, [r7, #16]
 8102812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102814:	60fb      	str	r3, [r7, #12]
    return (&(program->threadVars[threadIterator]));
 8102816:	693b      	ldr	r3, [r7, #16]
 8102818:	6899      	ldr	r1, [r3, #8]
 810281a:	68fa      	ldr	r2, [r7, #12]
 810281c:	4613      	mov	r3, r2
 810281e:	005b      	lsls	r3, r3, #1
 8102820:	4413      	add	r3, r2
 8102822:	009b      	lsls	r3, r3, #2
 8102824:	440b      	add	r3, r1
        {
            CosmOS_SchedulableVariableType * schedulableVar;


            threadVar = program_getProgramThread( programVar, threadIterator );
 8102826:	63bb      	str	r3, [r7, #56]	; 0x38
 8102828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810282a:	617b      	str	r3, [r7, #20]
 810282c:	697b      	ldr	r3, [r7, #20]
 810282e:	685b      	ldr	r3, [r3, #4]
            schedulableVar = thread_getThreadSchedulable( threadVar );
 8102830:	637b      	str	r3, [r7, #52]	; 0x34

            stackPointerRetVal = stackInit_schedulableStackInit( schedulableVar );
 8102832:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8102834:	f7ff ffa5 	bl	8102782 <stackInit_schedulableStackInit>
 8102838:	6338      	str	r0, [r7, #48]	; 0x30
 810283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810283c:	61fb      	str	r3, [r7, #28]
 810283e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102840:	61bb      	str	r3, [r7, #24]
    schedulable->stackPointer = stackPointerParam;
 8102842:	69fb      	ldr	r3, [r7, #28]
 8102844:	69ba      	ldr	r2, [r7, #24]
 8102846:	609a      	str	r2, [r3, #8]
}
 8102848:	bf00      	nop
        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 810284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810284c:	3301      	adds	r3, #1
 810284e:	64bb      	str	r3, [r7, #72]	; 0x48
 8102850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8102852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102854:	429a      	cmp	r2, r3
 8102856:	d3da      	bcc.n	810280e <stackInit_init+0x40>
    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8102858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810285a:	3301      	adds	r3, #1
 810285c:	64fb      	str	r3, [r7, #76]	; 0x4c
 810285e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8102860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102862:	429a      	cmp	r2, r3
 8102864:	d3c0      	bcc.n	81027e8 <stackInit_init+0x1a>
            schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
        }
    }
}
 8102866:	bf00      	nop
 8102868:	bf00      	nop
 810286a:	3750      	adds	r7, #80	; 0x50
 810286c:	46bd      	mov	sp, r7
 810286e:	bd80      	pop	{r7, pc}

08102870 <sysCalls_bitWidthType_ret_void>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysCalls_bitWidthType_ret_void(BitWidthType id)
{
 8102870:	b580      	push	{r7, lr}
 8102872:	b082      	sub	sp, #8
 8102874:	af00      	add	r7, sp, #0
 8102876:	6078      	str	r0, [r7, #4]
    CILsysCalls_bitWidthType_ret_void( id );
 8102878:	6878      	ldr	r0, [r7, #4]
 810287a:	f000 fcd9 	bl	8103230 <CILsysCalls_bitWidthType_ret_void>
};
 810287e:	bf00      	nop
 8102880:	3708      	adds	r7, #8
 8102882:	46bd      	mov	sp, r7
 8102884:	bd80      	pop	{r7, pc}

08102886 <sysCalls_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_ret_bitWidthType(BitWidthType id)
{
 8102886:	b580      	push	{r7, lr}
 8102888:	b084      	sub	sp, #16
 810288a:	af00      	add	r7, sp, #0
 810288c:	6078      	str	r0, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_ret_bitWidthType( id );
 810288e:	6878      	ldr	r0, [r7, #4]
 8102890:	f000 fcd9 	bl	8103246 <CILsysCalls_bitWidthType_ret_bitWidthType>
 8102894:	60f8      	str	r0, [r7, #12]

    return returnValue;
 8102896:	68fb      	ldr	r3, [r7, #12]
};
 8102898:	4618      	mov	r0, r3
 810289a:	3710      	adds	r7, #16
 810289c:	46bd      	mov	sp, r7
 810289e:	bd80      	pop	{r7, pc}

081028a0 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_bitWidthType_ret_bitWidthType(BitWidthType id, BitWidthType arg)
{
 81028a0:	b580      	push	{r7, lr}
 81028a2:	b084      	sub	sp, #16
 81028a4:	af00      	add	r7, sp, #0
 81028a6:	6078      	str	r0, [r7, #4]
 81028a8:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType( id, arg );
 81028aa:	6839      	ldr	r1, [r7, #0]
 81028ac:	6878      	ldr	r0, [r7, #4]
 81028ae:	f000 fcd8 	bl	8103262 <CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
 81028b2:	60f8      	str	r0, [r7, #12]

    return returnValue;
 81028b4:	68fb      	ldr	r3, [r7, #12]
};
 81028b6:	4618      	mov	r0, r3
 81028b8:	3710      	adds	r7, #16
 81028ba:	46bd      	mov	sp, r7
 81028bc:	bd80      	pop	{r7, pc}

081028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType(BitWidthType id, void * ptr, BitWidthType arg)
{
 81028be:	b580      	push	{r7, lr}
 81028c0:	b086      	sub	sp, #24
 81028c2:	af00      	add	r7, sp, #0
 81028c4:	60f8      	str	r0, [r7, #12]
 81028c6:	60b9      	str	r1, [r7, #8]
 81028c8:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType( id, ptr, arg );
 81028ca:	687a      	ldr	r2, [r7, #4]
 81028cc:	68b9      	ldr	r1, [r7, #8]
 81028ce:	68f8      	ldr	r0, [r7, #12]
 81028d0:	f000 fcd6 	bl	8103280 <CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 81028d4:	6178      	str	r0, [r7, #20]

    return returnValue;
 81028d6:	697b      	ldr	r3, [r7, #20]
};
 81028d8:	4618      	mov	r0, r3
 81028da:	3718      	adds	r7, #24
 81028dc:	46bd      	mov	sp, r7
 81028de:	bd80      	pop	{r7, pc}

081028e0 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_voidPtr_ret_bitWidthType(BitWidthType id, void * ptr)
{
 81028e0:	b580      	push	{r7, lr}
 81028e2:	b084      	sub	sp, #16
 81028e4:	af00      	add	r7, sp, #0
 81028e6:	6078      	str	r0, [r7, #4]
 81028e8:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType( id, ptr );
 81028ea:	6839      	ldr	r1, [r7, #0]
 81028ec:	6878      	ldr	r0, [r7, #4]
 81028ee:	f000 fcd7 	bl	81032a0 <CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 81028f2:	60f8      	str	r0, [r7, #12]

    return returnValue;
 81028f4:	68fb      	ldr	r3, [r7, #12]
};
 81028f6:	4618      	mov	r0, r3
 81028f8:	3710      	adds	r7, #16
 81028fa:	46bd      	mov	sp, r7
 81028fc:	bd80      	pop	{r7, pc}

081028fe <sysJobs_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysJobs_dispatcher(BitWidthType entityId)
{
 81028fe:	b580      	push	{r7, lr}
 8102900:	b098      	sub	sp, #96	; 0x60
 8102902:	af00      	add	r7, sp, #0
 8102904:	6078      	str	r0, [r7, #4]

    CosmOS_CoreVariableType * coreVar;
    CosmOS_SysJobsVariableType * sysJobsVar;


    coreVar = core_getCoreVar();
 8102906:	f7fe fd3c 	bl	8101382 <core_getCoreVar>
 810290a:	6578      	str	r0, [r7, #84]	; 0x54
 810290c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810290e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->sysJobs);
 8102910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102912:	69db      	ldr	r3, [r3, #28]
    sysJobsVar = core_getCoreSysJobs( coreVar );
 8102914:	653b      	str	r3, [r7, #80]	; 0x50
 8102916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102918:	633b      	str	r3, [r7, #48]	; 0x30
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs)
{
    return (sysJobs->currentTick);
 810291a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810291c:	685b      	ldr	r3, [r3, #4]

    sysJobsCurrentTick = sysJobs_getSysJobsCurrentTick( sysJobsVar );
 810291e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102922:	637b      	str	r3, [r7, #52]	; 0x34
    return (sysJobs->cfg->numOfGroups);
 8102924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102926:	681b      	ldr	r3, [r3, #0]
 8102928:	685b      	ldr	r3, [r3, #4]
    numOfGroups = sysJobs_getSysJobsNumOfGroups( sysJobsVar );
 810292a:	64bb      	str	r3, [r7, #72]	; 0x48

    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 810292c:	2300      	movs	r3, #0
 810292e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8102930:	e049      	b.n	81029c6 <sysJobs_dispatcher+0xc8>
 8102932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102934:	62bb      	str	r3, [r7, #40]	; 0x28
 8102936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102938:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsGroupTickMultiplicator(CosmOS_SysJobsVariableType * sysJobs, BitWidthType groupId)
{
    return (sysJobs->cfg->groups[groupId].tickMultiplicator);
 810293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	6819      	ldr	r1, [r3, #0]
 8102940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102942:	4613      	mov	r3, r2
 8102944:	005b      	lsls	r3, r3, #1
 8102946:	4413      	add	r3, r2
 8102948:	009b      	lsls	r3, r3, #2
 810294a:	440b      	add	r3, r1
 810294c:	689b      	ldr	r3, [r3, #8]
    {
        BitWidthType  groupTickMultiplicator;


        groupTickMultiplicator = sysJobs_getSysJobsGroupTickMultiplicator( sysJobsVar, groupIterator );
 810294e:	643b      	str	r3, [r7, #64]	; 0x40

        if ( IS_NOT( sysJobsCurrentTick % groupTickMultiplicator ) )
 8102950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8102954:	fbb3 f2f2 	udiv	r2, r3, r2
 8102958:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810295a:	fb01 f202 	mul.w	r2, r1, r2
 810295e:	1a9b      	subs	r3, r3, r2
 8102960:	2b00      	cmp	r3, #0
 8102962:	d12d      	bne.n	81029c0 <sysJobs_dispatcher+0xc2>
 8102964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102966:	61bb      	str	r3, [r7, #24]
 8102968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810296a:	617b      	str	r3, [r7, #20]
    return (CosmOS_GenericVoidType *)(sysJobs->cfg->groups[groupId].handlers);
 810296c:	69bb      	ldr	r3, [r7, #24]
 810296e:	681b      	ldr	r3, [r3, #0]
 8102970:	6819      	ldr	r1, [r3, #0]
 8102972:	697a      	ldr	r2, [r7, #20]
 8102974:	4613      	mov	r3, r2
 8102976:	005b      	lsls	r3, r3, #1
 8102978:	4413      	add	r3, r2
 810297a:	009b      	lsls	r3, r3, #2
 810297c:	440b      	add	r3, r1
 810297e:	681b      	ldr	r3, [r3, #0]
        {
            BitWidthType numOfHandlers;
            CosmOS_GenericVoidType * handlers;


            handlers = sysJobs_getSysJobsGroupHandlers( sysJobsVar, groupIterator );
 8102980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8102982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102984:	623b      	str	r3, [r7, #32]
 8102986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102988:	61fb      	str	r3, [r7, #28]
    return (sysJobs->cfg->groups[groupId].numOfHandlers);
 810298a:	6a3b      	ldr	r3, [r7, #32]
 810298c:	681b      	ldr	r3, [r3, #0]
 810298e:	6819      	ldr	r1, [r3, #0]
 8102990:	69fa      	ldr	r2, [r7, #28]
 8102992:	4613      	mov	r3, r2
 8102994:	005b      	lsls	r3, r3, #1
 8102996:	4413      	add	r3, r2
 8102998:	009b      	lsls	r3, r3, #2
 810299a:	440b      	add	r3, r1
 810299c:	685b      	ldr	r3, [r3, #4]
            numOfHandlers = sysJobs_getSysJobsGroupNumOfHandlers( sysJobsVar, groupIterator );
 810299e:	63bb      	str	r3, [r7, #56]	; 0x38

            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 81029a0:	2300      	movs	r3, #0
 81029a2:	65bb      	str	r3, [r7, #88]	; 0x58
 81029a4:	e008      	b.n	81029b8 <sysJobs_dispatcher+0xba>
            {
                handlers[handlerIterator]();
 81029a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81029a8:	009b      	lsls	r3, r3, #2
 81029aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81029ac:	4413      	add	r3, r2
 81029ae:	681b      	ldr	r3, [r3, #0]
 81029b0:	4798      	blx	r3
            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 81029b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81029b4:	3301      	adds	r3, #1
 81029b6:	65bb      	str	r3, [r7, #88]	; 0x58
 81029b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 81029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81029bc:	429a      	cmp	r2, r3
 81029be:	d3f2      	bcc.n	81029a6 <sysJobs_dispatcher+0xa8>
    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 81029c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81029c2:	3301      	adds	r3, #1
 81029c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 81029c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 81029c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81029ca:	429a      	cmp	r2, r3
 81029cc:	d3b1      	bcc.n	8102932 <sysJobs_dispatcher+0x34>
 81029ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81029d0:	60bb      	str	r3, [r7, #8]
    return (sysJobs->cfg->hyperTick);
 81029d2:	68bb      	ldr	r3, [r7, #8]
 81029d4:	681b      	ldr	r3, [r3, #0]
 81029d6:	689b      	ldr	r3, [r3, #8]
            }
        }
    }

    hyperTick = sysJobs_getSysJobsHyperTick( sysJobsVar );
 81029d8:	647b      	str	r3, [r7, #68]	; 0x44

    sysJobsCurrentTick = ( ( sysJobsCurrentTick + 1 ) % hyperTick );
 81029da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81029dc:	3301      	adds	r3, #1
 81029de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81029e0:	fbb3 f2f2 	udiv	r2, r3, r2
 81029e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81029e6:	fb01 f202 	mul.w	r2, r1, r2
 81029ea:	1a9b      	subs	r3, r3, r2
 81029ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 81029ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81029f0:	613b      	str	r3, [r7, #16]
 81029f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81029f4:	60fb      	str	r3, [r7, #12]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void sysJobs_setSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs, BitWidthType currentTickParam)
{
    sysJobs->currentTick = currentTickParam;
 81029f6:	693b      	ldr	r3, [r7, #16]
 81029f8:	68fa      	ldr	r2, [r7, #12]
 81029fa:	605a      	str	r2, [r3, #4]
}
 81029fc:	bf00      	nop
    sysJobs_setSysJobsCurrentTick( sysJobsVar, sysJobsCurrentTick );

	__SUPRESS_UNUSED_VAR(entityId);

};
 81029fe:	bf00      	nop
 8102a00:	3760      	adds	r7, #96	; 0x60
 8102a02:	46bd      	mov	sp, r7
 8102a04:	bd80      	pop	{r7, pc}
	...

08102a08 <thread_sleepMs>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SleepStateType thread_sleepMs(BitWidthType entityId, BitWidthType delayMs)
{
 8102a08:	b590      	push	{r4, r7, lr}
 8102a0a:	b097      	sub	sp, #92	; 0x5c
 8102a0c:	af00      	add	r7, sp, #0
 8102a0e:	6078      	str	r0, [r7, #4]
 8102a10:	6039      	str	r1, [r7, #0]
	CosmOS_AlarmVariableType * alarmVar;
	CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


	if ( delayMs )
 8102a12:	683b      	ldr	r3, [r7, #0]
 8102a14:	2b00      	cmp	r3, #0
 8102a16:	d06b      	beq.n	8102af0 <thread_sleepMs+0xe8>
	{
		coreVar = core_getCoreVar();
 8102a18:	f7fe fcb3 	bl	8101382 <core_getCoreVar>
 8102a1c:	6538      	str	r0, [r7, #80]	; 0x50
 8102a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102a20:	633b      	str	r3, [r7, #48]	; 0x30
    return (core->cfg->msToTicks);
 8102a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102a24:	681b      	ldr	r3, [r3, #0]
 8102a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24

		msToTicks = core_getMsToTicks(coreVar);
 8102a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102a2c:	637b      	str	r3, [r7, #52]	; 0x34
    return (core->schedulableInExecution);
 8102a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102a30:	685b      	ldr	r3, [r3, #4]

		schedulableVar = core_getCoreSchedulableInExecution(coreVar);
 8102a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8102a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102a36:	63bb      	str	r3, [r7, #56]	; 0x38
    return (schedulable->cfg->instanceType);
 8102a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	685b      	ldr	r3, [r3, #4]
		schedulableInstanceType = schedulable_getInstanceType(schedulableVar);
 8102a3e:	647b      	str	r3, [r7, #68]	; 0x44

		if (schedulableInstanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD)
 8102a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a46:	d14f      	bne.n	8102ae8 <thread_sleepMs+0xe0>
 8102a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102a4a:	627b      	str	r3, [r7, #36]	; 0x24
    return (schedulable->cfg->alarmId);
 8102a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	6a1b      	ldr	r3, [r3, #32]
		{
			alarmId = schedulable_getAlarmId(schedulableVar);
 8102a52:	643b      	str	r3, [r7, #64]	; 0x40
 8102a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    return (&(core->alarmVars[alarmId]));
 8102a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a5e:	6a19      	ldr	r1, [r3, #32]
 8102a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102a62:	4613      	mov	r3, r2
 8102a64:	005b      	lsls	r3, r3, #1
 8102a66:	4413      	add	r3, r2
 8102a68:	009b      	lsls	r3, r3, #2
 8102a6a:	440b      	add	r3, r1
			alarmVar = core_getAlarmVar(coreVar, alarmId);
 8102a6c:	63fb      	str	r3, [r7, #60]	; 0x3c

			if ( __MUL_OVERFLOW(delayMs,msToTicks,&tickCount) )
 8102a6e:	2400      	movs	r4, #0
 8102a70:	683a      	ldr	r2, [r7, #0]
 8102a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102a74:	fba2 0103 	umull	r0, r1, r2, r3
 8102a78:	f04f 0200 	mov.w	r2, #0
 8102a7c:	f04f 0300 	mov.w	r3, #0
 8102a80:	000a      	movs	r2, r1
 8102a82:	2300      	movs	r3, #0
 8102a84:	2a00      	cmp	r2, #0
 8102a86:	d000      	beq.n	8102a8a <thread_sleepMs+0x82>
 8102a88:	2401      	movs	r4, #1
 8102a8a:	4603      	mov	r3, r0
 8102a8c:	60bb      	str	r3, [r7, #8]
 8102a8e:	4623      	mov	r3, r4
 8102a90:	f003 0301 	and.w	r3, r3, #1
 8102a94:	b2db      	uxtb	r3, r3
 8102a96:	2b00      	cmp	r3, #0
 8102a98:	d003      	beq.n	8102aa2 <thread_sleepMs+0x9a>
			{
				sleepStateReturn = SLEEP_STATE_ENUM__ERROR_EXCEEDING_MAX_MS;
 8102a9a:	2301      	movs	r3, #1
 8102a9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8102aa0:	e029      	b.n	8102af6 <thread_sleepMs+0xee>
 8102aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102aa4:	613b      	str	r3, [r7, #16]
 8102aa6:	2303      	movs	r3, #3
 8102aa8:	60fb      	str	r3, [r7, #12]
    schedulable->state = stateParam;
 8102aaa:	693b      	ldr	r3, [r7, #16]
 8102aac:	68fa      	ldr	r2, [r7, #12]
 8102aae:	605a      	str	r2, [r3, #4]
}
 8102ab0:	bf00      	nop
			}
			else
			{
				schedulable_setState(schedulableVar, SCHEDULABLE_STATE_ENUM__SLEEP);
				alarm_setAlarmTickCount(alarmVar,tickCount);
 8102ab2:	68bb      	ldr	r3, [r7, #8]
 8102ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8102ab6:	61ba      	str	r2, [r7, #24]
 8102ab8:	617b      	str	r3, [r7, #20]
    alarm->tickCount = tickCountParam;
 8102aba:	69bb      	ldr	r3, [r7, #24]
 8102abc:	697a      	ldr	r2, [r7, #20]
 8102abe:	609a      	str	r2, [r3, #8]
}
 8102ac0:	bf00      	nop
 8102ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102ac4:	623b      	str	r3, [r7, #32]
 8102ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8102aca:	61fb      	str	r3, [r7, #28]
    alarm->state = stateParam;
 8102acc:	6a3b      	ldr	r3, [r7, #32]
 8102ace:	69fa      	ldr	r2, [r7, #28]
 8102ad0:	605a      	str	r2, [r3, #4]
}
 8102ad2:	bf00      	nop
				alarm_setAlarmState(alarmVar,ALARM_STATE_ENUM__ACTIVATED);

				sleepStateReturn = SLEEP_STATE_ENUM__OK;
 8102ad4:	2303      	movs	r3, #3
 8102ad6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8102ada:	4b0a      	ldr	r3, [pc, #40]	; (8102b04 <thread_sleepMs+0xfc>)
 8102adc:	685b      	ldr	r3, [r3, #4]
 8102ade:	4a09      	ldr	r2, [pc, #36]	; (8102b04 <thread_sleepMs+0xfc>)
 8102ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8102ae4:	6053      	str	r3, [r2, #4]
}
 8102ae6:	e006      	b.n	8102af6 <thread_sleepMs+0xee>
			}

		}
		else
		{
			sleepStateReturn = SLEEP_STATE_ENUM__ERROR_ONLY_THREADS_CAN_SLEEP;
 8102ae8:	2300      	movs	r3, #0
 8102aea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8102aee:	e002      	b.n	8102af6 <thread_sleepMs+0xee>
		}
	}
	else
	{
		sleepStateReturn = SLEEP_STATE_ENUM__ERROR_MIN_MS;
 8102af0:	2302      	movs	r3, #2
 8102af2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	return sleepStateReturn;
 8102af6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
	__SUPRESS_UNUSED_VAR(entityId);
};
 8102afa:	4618      	mov	r0, r3
 8102afc:	375c      	adds	r7, #92	; 0x5c
 8102afe:	46bd      	mov	sp, r7
 8102b00:	bd90      	pop	{r4, r7, pc}
 8102b02:	bf00      	nop
 8102b04:	e000ed00 	.word	0xe000ed00

08102b08 <CILcore_getCoreId>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILcore_getCoreId(void)
{
 8102b08:	b580      	push	{r7, lr}
 8102b0a:	af00      	add	r7, sp, #0
    return (HAL_GetCurrentCPUID() == CM7_CPUID) ? CORE_0_ID : CORE_1_ID;
 8102b0c:	f002 ff64 	bl	81059d8 <HAL_GetCurrentCPUID>
 8102b10:	4603      	mov	r3, r0
 8102b12:	2b03      	cmp	r3, #3
 8102b14:	bf14      	ite	ne
 8102b16:	2301      	movne	r3, #1
 8102b18:	2300      	moveq	r3, #0
 8102b1a:	b2db      	uxtb	r3, r3
}
 8102b1c:	4618      	mov	r0, r3
 8102b1e:	bd80      	pop	{r7, pc}

08102b20 <CILcore_setCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILcore_setCoreVar(CosmOS_OsVariableType * osVar)
{
 8102b20:	b580      	push	{r7, lr}
 8102b22:	b08a      	sub	sp, #40	; 0x28
 8102b24:	af00      	add	r7, sp, #0
 8102b26:	6078      	str	r0, [r7, #4]
    BitWidthType coreId,
                numberOfCores;

    CosmOS_CoreVariableType * coreVar;

    coreId = CILcore_getCoreId();
 8102b28:	f7ff ffee 	bl	8102b08 <CILcore_getCoreId>
 8102b2c:	6278      	str	r0, [r7, #36]	; 0x24
 8102b2e:	687b      	ldr	r3, [r7, #4]
 8102b30:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfCores);
 8102b32:	68fb      	ldr	r3, [r7, #12]
 8102b34:	681b      	ldr	r3, [r3, #0]
 8102b36:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 8102b38:	623b      	str	r3, [r7, #32]

    cosmosAssert( coreId < numberOfCores );
 8102b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102b3c:	6a3b      	ldr	r3, [r7, #32]
 8102b3e:	429a      	cmp	r2, r3
 8102b40:	bf34      	ite	cc
 8102b42:	2301      	movcc	r3, #1
 8102b44:	2300      	movcs	r3, #0
 8102b46:	b2db      	uxtb	r3, r3
 8102b48:	613b      	str	r3, [r7, #16]
    if ( IS_NOT( result ) )
 8102b4a:	693b      	ldr	r3, [r7, #16]
 8102b4c:	2b00      	cmp	r3, #0
 8102b4e:	d101      	bne.n	8102b54 <CILcore_setCoreVar+0x34>
        os_kernelPanic();
 8102b50:	f7fe ff84 	bl	8101a5c <os_kernelPanic>
}
 8102b54:	bf00      	nop
 8102b56:	687b      	ldr	r3, [r7, #4]
 8102b58:	61bb      	str	r3, [r7, #24]
 8102b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102b5c:	617b      	str	r3, [r7, #20]
    return (&(osVar->coreVars[coreId]));
 8102b5e:	69bb      	ldr	r3, [r7, #24]
 8102b60:	6859      	ldr	r1, [r3, #4]
 8102b62:	697a      	ldr	r2, [r7, #20]
 8102b64:	4613      	mov	r3, r2
 8102b66:	00db      	lsls	r3, r3, #3
 8102b68:	4413      	add	r3, r2
 8102b6a:	009b      	lsls	r3, r3, #2
 8102b6c:	440b      	add	r3, r1

    coreVar = os_getCoreVar( osVar, coreId );
 8102b6e:	61fb      	str	r3, [r7, #28]

    //must be changed, not valid for all compilers
    __asm volatile("MOV R9,%[coreVariable]" : [coreVariable] "=r" (coreVar));
 8102b70:	4699      	mov	r9, r3
 8102b72:	61fb      	str	r3, [r7, #28]
}
 8102b74:	bf00      	nop
 8102b76:	3728      	adds	r7, #40	; 0x28
 8102b78:	46bd      	mov	sp, r7
 8102b7a:	bd80      	pop	{r7, pc}

08102b7c <CILGPIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILGPIO_togglePin(void *GPIOx, BitWidthType GPIO_Pin)
{
 8102b7c:	b580      	push	{r7, lr}
 8102b7e:	b082      	sub	sp, #8
 8102b80:	af00      	add	r7, sp, #0
 8102b82:	6078      	str	r0, [r7, #4]
 8102b84:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin( GPIOx, (uint16_t)GPIO_Pin );
 8102b86:	683b      	ldr	r3, [r7, #0]
 8102b88:	b29b      	uxth	r3, r3
 8102b8a:	4619      	mov	r1, r3
 8102b8c:	6878      	ldr	r0, [r7, #4]
 8102b8e:	f003 f900 	bl	8105d92 <HAL_GPIO_TogglePin>
}
 8102b92:	bf00      	nop
 8102b94:	3708      	adds	r7, #8
 8102b96:	46bd      	mov	sp, r7
 8102b98:	bd80      	pop	{r7, pc}
	...

08102b9c <CILmemoryProtection_init>:
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_init(AddressType codeMemoryHighAddress,\
												AddressType codeMemoryLowAddress, \
												AddressType stackMemoryHighAddress, \
												AddressType stackMemoryLowAddress)
{
 8102b9c:	b580      	push	{r7, lr}
 8102b9e:	b090      	sub	sp, #64	; 0x40
 8102ba0:	af00      	add	r7, sp, #0
 8102ba2:	60f8      	str	r0, [r7, #12]
 8102ba4:	60b9      	str	r1, [r7, #8]
 8102ba6:	607a      	str	r2, [r7, #4]
 8102ba8:	603b      	str	r3, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8102baa:	f107 0310 	add.w	r3, r7, #16
 8102bae:	2200      	movs	r2, #0
 8102bb0:	601a      	str	r2, [r3, #0]
 8102bb2:	605a      	str	r2, [r3, #4]
 8102bb4:	609a      	str	r2, [r3, #8]
 8102bb6:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8102bb8:	f002 fe92 	bl	81058e0 <HAL_MPU_Disable>
    //MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
    //MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
    //MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

	//TODO: Patched cause MPU should take in count whole FLASH - functions from the routes are used from the local core flash bank which booted the os consts to RAM
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102bbc:	2301      	movs	r3, #1
 8102bbe:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8102bc0:	2300      	movs	r3, #0
 8102bc2:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = 0x08000000;
 8102bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8102bc8:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 8102bca:	2314      	movs	r3, #20
 8102bcc:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102bce:	2300      	movs	r3, #0
 8102bd0:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102bd2:	2301      	movs	r3, #1
 8102bd4:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8102bd6:	2306      	movs	r3, #6
 8102bd8:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102bda:	2300      	movs	r3, #0
 8102bdc:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102bde:	2301      	movs	r3, #1
 8102be0:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102be2:	2301      	movs	r3, #1
 8102be4:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102be6:	2301      	movs	r3, #1
 8102be8:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102bea:	f107 0310 	add.w	r3, r7, #16
 8102bee:	4618      	mov	r0, r3
 8102bf0:	f002 feae 	bl	8105950 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102bf4:	2301      	movs	r3, #1
 8102bf6:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8102bf8:	2301      	movs	r3, #1
 8102bfa:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = stackMemoryLowAddress;
 8102bfc:	683b      	ldr	r3, [r7, #0]
 8102bfe:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( stackMemoryHighAddress - stackMemoryLowAddress )));
 8102c00:	687a      	ldr	r2, [r7, #4]
 8102c02:	683b      	ldr	r3, [r7, #0]
 8102c04:	1ad3      	subs	r3, r2, r3
 8102c06:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 1;
 8102c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102c0a:	085b      	lsrs	r3, r3, #1
 8102c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102c0e:	4313      	orrs	r3, r2
 8102c10:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 2;
 8102c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102c14:	089b      	lsrs	r3, r3, #2
 8102c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102c18:	4313      	orrs	r3, r2
 8102c1a:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 4;
 8102c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102c1e:	091b      	lsrs	r3, r3, #4
 8102c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102c22:	4313      	orrs	r3, r2
 8102c24:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 8;
 8102c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102c28:	0a1b      	lsrs	r3, r3, #8
 8102c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102c2c:	4313      	orrs	r3, r2
 8102c2e:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 16;
 8102c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102c32:	0c1b      	lsrs	r3, r3, #16
 8102c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102c36:	4313      	orrs	r3, r2
 8102c38:	627b      	str	r3, [r7, #36]	; 0x24
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8102c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102c3c:	4a77      	ldr	r2, [pc, #476]	; (8102e1c <CILmemoryProtection_init+0x280>)
 8102c3e:	fb02 f303 	mul.w	r3, r2, r3
 8102c42:	0edb      	lsrs	r3, r3, #27
 8102c44:	4a76      	ldr	r2, [pc, #472]	; (8102e20 <CILmemoryProtection_init+0x284>)
 8102c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102c4a:	623b      	str	r3, [r7, #32]
    return (result-1);
 8102c4c:	6a3b      	ldr	r3, [r7, #32]
 8102c4e:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( stackMemoryHighAddress - stackMemoryLowAddress )));
 8102c50:	b2db      	uxtb	r3, r3
 8102c52:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102c54:	2300      	movs	r3, #0
 8102c56:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102c58:	2301      	movs	r3, #1
 8102c5a:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8102c5c:	2302      	movs	r3, #2
 8102c5e:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102c60:	2300      	movs	r3, #0
 8102c62:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102c64:	2301      	movs	r3, #1
 8102c66:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102c68:	2301      	movs	r3, #1
 8102c6a:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102c6c:	2301      	movs	r3, #1
 8102c6e:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102c70:	f107 0310 	add.w	r3, r7, #16
 8102c74:	4618      	mov	r0, r3
 8102c76:	f002 fe6b 	bl	8105950 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102c7a:	2301      	movs	r3, #1
 8102c7c:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8102c7e:	2302      	movs	r3, #2
 8102c80:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress =  (BitWidthType)_s_os_section_consts;
 8102c82:	4b68      	ldr	r3, [pc, #416]	; (8102e24 <CILmemoryProtection_init+0x288>)
 8102c84:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8102c86:	4a68      	ldr	r2, [pc, #416]	; (8102e28 <CILmemoryProtection_init+0x28c>)
 8102c88:	4b66      	ldr	r3, [pc, #408]	; (8102e24 <CILmemoryProtection_init+0x288>)
 8102c8a:	1ad3      	subs	r3, r2, r3
 8102c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 1;
 8102c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102c90:	085b      	lsrs	r3, r3, #1
 8102c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102c94:	4313      	orrs	r3, r2
 8102c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 2;
 8102c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102c9a:	089b      	lsrs	r3, r3, #2
 8102c9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102c9e:	4313      	orrs	r3, r2
 8102ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 4;
 8102ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102ca4:	091b      	lsrs	r3, r3, #4
 8102ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102ca8:	4313      	orrs	r3, r2
 8102caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 8;
 8102cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102cae:	0a1b      	lsrs	r3, r3, #8
 8102cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102cb2:	4313      	orrs	r3, r2
 8102cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 16;
 8102cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102cb8:	0c1b      	lsrs	r3, r3, #16
 8102cba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102cbc:	4313      	orrs	r3, r2
 8102cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8102cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102cc2:	4a56      	ldr	r2, [pc, #344]	; (8102e1c <CILmemoryProtection_init+0x280>)
 8102cc4:	fb02 f303 	mul.w	r3, r2, r3
 8102cc8:	0edb      	lsrs	r3, r3, #27
 8102cca:	4a55      	ldr	r2, [pc, #340]	; (8102e20 <CILmemoryProtection_init+0x284>)
 8102ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    return (result-1);
 8102cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102cd4:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8102cd6:	b2db      	uxtb	r3, r3
 8102cd8:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102cda:	2300      	movs	r3, #0
 8102cdc:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102cde:	2301      	movs	r3, #1
 8102ce0:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8102ce2:	2306      	movs	r3, #6
 8102ce4:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102ce6:	2300      	movs	r3, #0
 8102ce8:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102cea:	2301      	movs	r3, #1
 8102cec:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102cee:	2301      	movs	r3, #1
 8102cf0:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102cf2:	2301      	movs	r3, #1
 8102cf4:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102cf6:	f107 0310 	add.w	r3, r7, #16
 8102cfa:	4618      	mov	r0, r3
 8102cfc:	f002 fe28 	bl	8105950 <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102d00:	2301      	movs	r3, #1
 8102d02:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8102d04:	2303      	movs	r3, #3
 8102d06:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_os_section_vars;
 8102d08:	4b48      	ldr	r3, [pc, #288]	; (8102e2c <CILmemoryProtection_init+0x290>)
 8102d0a:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8102d0c:	4a48      	ldr	r2, [pc, #288]	; (8102e30 <CILmemoryProtection_init+0x294>)
 8102d0e:	4b47      	ldr	r3, [pc, #284]	; (8102e2c <CILmemoryProtection_init+0x290>)
 8102d10:	1ad3      	subs	r3, r2, r3
 8102d12:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 1;
 8102d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d16:	085b      	lsrs	r3, r3, #1
 8102d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102d1a:	4313      	orrs	r3, r2
 8102d1c:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 2;
 8102d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d20:	089b      	lsrs	r3, r3, #2
 8102d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102d24:	4313      	orrs	r3, r2
 8102d26:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 4;
 8102d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d2a:	091b      	lsrs	r3, r3, #4
 8102d2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102d2e:	4313      	orrs	r3, r2
 8102d30:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 8;
 8102d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d34:	0a1b      	lsrs	r3, r3, #8
 8102d36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102d38:	4313      	orrs	r3, r2
 8102d3a:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 16;
 8102d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d3e:	0c1b      	lsrs	r3, r3, #16
 8102d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102d42:	4313      	orrs	r3, r2
 8102d44:	637b      	str	r3, [r7, #52]	; 0x34
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8102d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102d48:	4a34      	ldr	r2, [pc, #208]	; (8102e1c <CILmemoryProtection_init+0x280>)
 8102d4a:	fb02 f303 	mul.w	r3, r2, r3
 8102d4e:	0edb      	lsrs	r3, r3, #27
 8102d50:	4a33      	ldr	r2, [pc, #204]	; (8102e20 <CILmemoryProtection_init+0x284>)
 8102d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102d56:	633b      	str	r3, [r7, #48]	; 0x30
    return (result-1);
 8102d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102d5a:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 8102d5c:	b2db      	uxtb	r3, r3
 8102d5e:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102d60:	2300      	movs	r3, #0
 8102d62:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102d64:	2301      	movs	r3, #1
 8102d66:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8102d68:	2302      	movs	r3, #2
 8102d6a:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102d6c:	2300      	movs	r3, #0
 8102d6e:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102d70:	2301      	movs	r3, #1
 8102d72:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102d74:	2301      	movs	r3, #1
 8102d76:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102d78:	2301      	movs	r3, #1
 8102d7a:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102d7c:	f107 0310 	add.w	r3, r7, #16
 8102d80:	4618      	mov	r0, r3
 8102d82:	f002 fde5 	bl	8105950 <HAL_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102d86:	2301      	movs	r3, #1
 8102d88:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8102d8a:	2304      	movs	r3, #4
 8102d8c:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_unprotected_section;
 8102d8e:	4b29      	ldr	r3, [pc, #164]	; (8102e34 <CILmemoryProtection_init+0x298>)
 8102d90:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_unprotected_section - _s_unprotected_section )));
 8102d92:	4a29      	ldr	r2, [pc, #164]	; (8102e38 <CILmemoryProtection_init+0x29c>)
 8102d94:	4b27      	ldr	r3, [pc, #156]	; (8102e34 <CILmemoryProtection_init+0x298>)
 8102d96:	1ad3      	subs	r3, r2, r3
 8102d98:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 1;
 8102d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102d9c:	085b      	lsrs	r3, r3, #1
 8102d9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8102da0:	4313      	orrs	r3, r2
 8102da2:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 2;
 8102da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102da6:	089b      	lsrs	r3, r3, #2
 8102da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8102daa:	4313      	orrs	r3, r2
 8102dac:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 4;
 8102dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102db0:	091b      	lsrs	r3, r3, #4
 8102db2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8102db4:	4313      	orrs	r3, r2
 8102db6:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 8;
 8102db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102dba:	0a1b      	lsrs	r3, r3, #8
 8102dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8102dbe:	4313      	orrs	r3, r2
 8102dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 16;
 8102dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102dc4:	0c1b      	lsrs	r3, r3, #16
 8102dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8102dc8:	4313      	orrs	r3, r2
 8102dca:	63fb      	str	r3, [r7, #60]	; 0x3c
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8102dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102dce:	4a13      	ldr	r2, [pc, #76]	; (8102e1c <CILmemoryProtection_init+0x280>)
 8102dd0:	fb02 f303 	mul.w	r3, r2, r3
 8102dd4:	0edb      	lsrs	r3, r3, #27
 8102dd6:	4a12      	ldr	r2, [pc, #72]	; (8102e20 <CILmemoryProtection_init+0x284>)
 8102dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102ddc:	63bb      	str	r3, [r7, #56]	; 0x38
    return (result-1);
 8102dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102de0:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_unprotected_section - _s_unprotected_section )));
 8102de2:	b2db      	uxtb	r3, r3
 8102de4:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102de6:	2300      	movs	r3, #0
 8102de8:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102dea:	2301      	movs	r3, #1
 8102dec:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8102dee:	2303      	movs	r3, #3
 8102df0:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102df2:	2300      	movs	r3, #0
 8102df4:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102df6:	2301      	movs	r3, #1
 8102df8:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102dfa:	2301      	movs	r3, #1
 8102dfc:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102dfe:	2301      	movs	r3, #1
 8102e00:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102e02:	f107 0310 	add.w	r3, r7, #16
 8102e06:	4618      	mov	r0, r3
 8102e08:	f002 fda2 	bl	8105950 <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8102e0c:	2006      	movs	r0, #6
 8102e0e:	f002 fd7f 	bl	8105910 <HAL_MPU_Enable>

	__SUPRESS_UNUSED_VAR(codeMemoryHighAddress);
	__SUPRESS_UNUSED_VAR(codeMemoryLowAddress);
}
 8102e12:	bf00      	nop
 8102e14:	3740      	adds	r7, #64	; 0x40
 8102e16:	46bd      	mov	sp, r7
 8102e18:	bd80      	pop	{r7, pc}
 8102e1a:	bf00      	nop
 8102e1c:	07c4acdd 	.word	0x07c4acdd
 8102e20:	3800065c 	.word	0x3800065c
 8102e24:	38000000 	.word	0x38000000
 8102e28:	38000800 	.word	0x38000800
 8102e2c:	38008000 	.word	0x38008000
 8102e30:	38008400 	.word	0x38008400
 8102e34:	10002000 	.word	0x10002000
 8102e38:	10002100 	.word	0x10002100

08102e3c <CILmemoryProtection_setStackOverflowProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setStackOverflowProtection(AddressType stackLowAddress, AddressType stackHighAddress)
{
 8102e3c:	b580      	push	{r7, lr}
 8102e3e:	b088      	sub	sp, #32
 8102e40:	af00      	add	r7, sp, #0
 8102e42:	6078      	str	r0, [r7, #4]
 8102e44:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8102e46:	f107 0308 	add.w	r3, r7, #8
 8102e4a:	2200      	movs	r2, #0
 8102e4c:	601a      	str	r2, [r3, #0]
 8102e4e:	605a      	str	r2, [r3, #4]
 8102e50:	609a      	str	r2, [r3, #8]
 8102e52:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8102e54:	f002 fd44 	bl	81058e0 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102e58:	2301      	movs	r3, #1
 8102e5a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 8102e5c:	2307      	movs	r3, #7
 8102e5e:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (stackLowAddress);
 8102e60:	687b      	ldr	r3, [r7, #4]
 8102e62:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8102e64:	683a      	ldr	r2, [r7, #0]
 8102e66:	687b      	ldr	r3, [r7, #4]
 8102e68:	1ad3      	subs	r3, r2, r3
 8102e6a:	61fb      	str	r3, [r7, #28]
    size |= size >> 1;
 8102e6c:	69fb      	ldr	r3, [r7, #28]
 8102e6e:	085b      	lsrs	r3, r3, #1
 8102e70:	69fa      	ldr	r2, [r7, #28]
 8102e72:	4313      	orrs	r3, r2
 8102e74:	61fb      	str	r3, [r7, #28]
    size |= size >> 2;
 8102e76:	69fb      	ldr	r3, [r7, #28]
 8102e78:	089b      	lsrs	r3, r3, #2
 8102e7a:	69fa      	ldr	r2, [r7, #28]
 8102e7c:	4313      	orrs	r3, r2
 8102e7e:	61fb      	str	r3, [r7, #28]
    size |= size >> 4;
 8102e80:	69fb      	ldr	r3, [r7, #28]
 8102e82:	091b      	lsrs	r3, r3, #4
 8102e84:	69fa      	ldr	r2, [r7, #28]
 8102e86:	4313      	orrs	r3, r2
 8102e88:	61fb      	str	r3, [r7, #28]
    size |= size >> 8;
 8102e8a:	69fb      	ldr	r3, [r7, #28]
 8102e8c:	0a1b      	lsrs	r3, r3, #8
 8102e8e:	69fa      	ldr	r2, [r7, #28]
 8102e90:	4313      	orrs	r3, r2
 8102e92:	61fb      	str	r3, [r7, #28]
    size |= size >> 16;
 8102e94:	69fb      	ldr	r3, [r7, #28]
 8102e96:	0c1b      	lsrs	r3, r3, #16
 8102e98:	69fa      	ldr	r2, [r7, #28]
 8102e9a:	4313      	orrs	r3, r2
 8102e9c:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8102e9e:	69fb      	ldr	r3, [r7, #28]
 8102ea0:	4a12      	ldr	r2, [pc, #72]	; (8102eec <CILmemoryProtection_setStackOverflowProtection+0xb0>)
 8102ea2:	fb02 f303 	mul.w	r3, r2, r3
 8102ea6:	0edb      	lsrs	r3, r3, #27
 8102ea8:	4a11      	ldr	r2, [pc, #68]	; (8102ef0 <CILmemoryProtection_setStackOverflowProtection+0xb4>)
 8102eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102eae:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8102eb0:	69bb      	ldr	r3, [r7, #24]
 8102eb2:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8102eb4:	b2db      	uxtb	r3, r3
 8102eb6:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102eb8:	2300      	movs	r3, #0
 8102eba:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102ebc:	2301      	movs	r3, #1
 8102ebe:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8102ec0:	2303      	movs	r3, #3
 8102ec2:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102ec4:	2300      	movs	r3, #0
 8102ec6:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102ec8:	2301      	movs	r3, #1
 8102eca:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102ecc:	2301      	movs	r3, #1
 8102ece:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102ed0:	2301      	movs	r3, #1
 8102ed2:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102ed4:	f107 0308 	add.w	r3, r7, #8
 8102ed8:	4618      	mov	r0, r3
 8102eda:	f002 fd39 	bl	8105950 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8102ede:	2006      	movs	r0, #6
 8102ee0:	f002 fd16 	bl	8105910 <HAL_MPU_Enable>
}
 8102ee4:	bf00      	nop
 8102ee6:	3720      	adds	r7, #32
 8102ee8:	46bd      	mov	sp, r7
 8102eea:	bd80      	pop	{r7, pc}
 8102eec:	07c4acdd 	.word	0x07c4acdd
 8102ef0:	3800065c 	.word	0x3800065c

08102ef4 <CILmemoryProtection_setProgramMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setProgramMemoryProtection(AddressType lowAddress, AddressType highAddress)
{
 8102ef4:	b580      	push	{r7, lr}
 8102ef6:	b088      	sub	sp, #32
 8102ef8:	af00      	add	r7, sp, #0
 8102efa:	6078      	str	r0, [r7, #4]
 8102efc:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8102efe:	f107 0308 	add.w	r3, r7, #8
 8102f02:	2200      	movs	r2, #0
 8102f04:	601a      	str	r2, [r3, #0]
 8102f06:	605a      	str	r2, [r3, #4]
 8102f08:	609a      	str	r2, [r3, #8]
 8102f0a:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8102f0c:	f002 fce8 	bl	81058e0 <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8102f10:	2301      	movs	r3, #1
 8102f12:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 8102f14:	2306      	movs	r3, #6
 8102f16:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 8102f18:	687b      	ldr	r3, [r7, #4]
 8102f1a:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8102f1c:	683a      	ldr	r2, [r7, #0]
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	1ad3      	subs	r3, r2, r3
 8102f22:	61fb      	str	r3, [r7, #28]
    size |= size >> 1;
 8102f24:	69fb      	ldr	r3, [r7, #28]
 8102f26:	085b      	lsrs	r3, r3, #1
 8102f28:	69fa      	ldr	r2, [r7, #28]
 8102f2a:	4313      	orrs	r3, r2
 8102f2c:	61fb      	str	r3, [r7, #28]
    size |= size >> 2;
 8102f2e:	69fb      	ldr	r3, [r7, #28]
 8102f30:	089b      	lsrs	r3, r3, #2
 8102f32:	69fa      	ldr	r2, [r7, #28]
 8102f34:	4313      	orrs	r3, r2
 8102f36:	61fb      	str	r3, [r7, #28]
    size |= size >> 4;
 8102f38:	69fb      	ldr	r3, [r7, #28]
 8102f3a:	091b      	lsrs	r3, r3, #4
 8102f3c:	69fa      	ldr	r2, [r7, #28]
 8102f3e:	4313      	orrs	r3, r2
 8102f40:	61fb      	str	r3, [r7, #28]
    size |= size >> 8;
 8102f42:	69fb      	ldr	r3, [r7, #28]
 8102f44:	0a1b      	lsrs	r3, r3, #8
 8102f46:	69fa      	ldr	r2, [r7, #28]
 8102f48:	4313      	orrs	r3, r2
 8102f4a:	61fb      	str	r3, [r7, #28]
    size |= size >> 16;
 8102f4c:	69fb      	ldr	r3, [r7, #28]
 8102f4e:	0c1b      	lsrs	r3, r3, #16
 8102f50:	69fa      	ldr	r2, [r7, #28]
 8102f52:	4313      	orrs	r3, r2
 8102f54:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8102f56:	69fb      	ldr	r3, [r7, #28]
 8102f58:	4a12      	ldr	r2, [pc, #72]	; (8102fa4 <CILmemoryProtection_setProgramMemoryProtection+0xb0>)
 8102f5a:	fb02 f303 	mul.w	r3, r2, r3
 8102f5e:	0edb      	lsrs	r3, r3, #27
 8102f60:	4a11      	ldr	r2, [pc, #68]	; (8102fa8 <CILmemoryProtection_setProgramMemoryProtection+0xb4>)
 8102f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102f66:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8102f68:	69bb      	ldr	r3, [r7, #24]
 8102f6a:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8102f6c:	b2db      	uxtb	r3, r3
 8102f6e:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8102f70:	2300      	movs	r3, #0
 8102f72:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8102f74:	2301      	movs	r3, #1
 8102f76:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8102f78:	2303      	movs	r3, #3
 8102f7a:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8102f7c:	2300      	movs	r3, #0
 8102f7e:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8102f80:	2301      	movs	r3, #1
 8102f82:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8102f84:	2301      	movs	r3, #1
 8102f86:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8102f88:	2301      	movs	r3, #1
 8102f8a:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8102f8c:	f107 0308 	add.w	r3, r7, #8
 8102f90:	4618      	mov	r0, r3
 8102f92:	f002 fcdd 	bl	8105950 <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8102f96:	2006      	movs	r0, #6
 8102f98:	f002 fcba 	bl	8105910 <HAL_MPU_Enable>
}
 8102f9c:	bf00      	nop
 8102f9e:	3720      	adds	r7, #32
 8102fa0:	46bd      	mov	sp, r7
 8102fa2:	bd80      	pop	{r7, pc}
 8102fa4:	07c4acdd 	.word	0x07c4acdd
 8102fa8:	3800065c 	.word	0x3800065c

08102fac <CILmutex_tryMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType CILmutex_tryMutex(AddressType * mutexPointer)
{
 8102fac:	b480      	push	{r7}
 8102fae:	b085      	sub	sp, #20
 8102fb0:	af00      	add	r7, sp, #0
 8102fb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8102fb4:	b672      	cpsid	i
}
 8102fb6:	bf00      	nop
    CosmOS_MutexStateType mutexState;

	__disable_irq();
	__asm volatile("MOV R1, #0x1");
 8102fb8:	f04f 0101 	mov.w	r1, #1
	__asm volatile("LDR R3, [R0]");
 8102fbc:	6803      	ldr	r3, [r0, #0]
	__asm volatile("CMP R3, #0");
 8102fbe:	2b00      	cmp	r3, #0
	__asm volatile("ITTE EQ");
 8102fc0:	bf06      	itte	eq
	__asm volatile("STREQ R1, [R0]");
 8102fc2:	6001      	streq	r1, [r0, #0]
	__asm volatile("MOVEQ R1, #0x2");
 8102fc4:	2102      	moveq	r1, #2
	__asm volatile("MOVNE R1, #0x1");
 8102fc6:	2101      	movne	r1, #1
	__asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );
 8102fc8:	460b      	mov	r3, r1
 8102fca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8102fcc:	b662      	cpsie	i
}
 8102fce:	bf00      	nop
	//__asm volatile("MOVNE R1, #0x1");
	//__asm volatile("MOVEQ R1, #0x2");
	//__asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );

	__SUPRESS_UNUSED_VAR(mutexPointer);
    return mutexState;
 8102fd0:	68fb      	ldr	r3, [r7, #12]
}
 8102fd2:	4618      	mov	r0, r3
 8102fd4:	3714      	adds	r7, #20
 8102fd6:	46bd      	mov	sp, r7
 8102fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fdc:	4770      	bx	lr

08102fde <CILmutex_releaseMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType CILmutex_releaseMutex(AddressType * mutexPointer)
{
 8102fde:	b480      	push	{r7}
 8102fe0:	b085      	sub	sp, #20
 8102fe2:	af00      	add	r7, sp, #0
 8102fe4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8102fe6:	b672      	cpsid	i
}
 8102fe8:	bf00      	nop
    CosmOS_MutexStateType mutexState;

	__disable_irq();
	__asm volatile("MOV R1, #0x0");
 8102fea:	f04f 0100 	mov.w	r1, #0
	__asm volatile("STR R1, [R0]");
 8102fee:	6001      	str	r1, [r0, #0]
    __asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );
 8102ff0:	460b      	mov	r3, r1
 8102ff2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8102ff4:	b662      	cpsie	i
}
 8102ff6:	bf00      	nop
	//__asm volatile("BNE tryUnlock");
	//__asm volatile("released:");
    //__asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );

	__SUPRESS_UNUSED_VAR(mutexPointer);
    return mutexState;
 8102ff8:	68fb      	ldr	r3, [r7, #12]
}
 8102ffa:	4618      	mov	r0, r3
 8102ffc:	3714      	adds	r7, #20
 8102ffe:	46bd      	mov	sp, r7
 8103000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103004:	4770      	bx	lr

08103006 <CILspinlock_getSpinlock>:
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_getSpinlock(AddressType * spinlockPointer, \
																	BitWidthType spinlockId, \
																	BitWidthType schedulableId )
{
 8103006:	b580      	push	{r7, lr}
 8103008:	b086      	sub	sp, #24
 810300a:	af00      	add	r7, sp, #0
 810300c:	60f8      	str	r0, [r7, #12]
 810300e:	60b9      	str	r1, [r7, #8]
 8103010:	607a      	str	r2, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	HAL_StatusTypeDef hsem_take_status;


	hsem_take_status = HAL_HSEM_Take(spinlockId, schedulableId);
 8103012:	6879      	ldr	r1, [r7, #4]
 8103014:	68b8      	ldr	r0, [r7, #8]
 8103016:	f002 fed7 	bl	8105dc8 <HAL_HSEM_Take>
 810301a:	4603      	mov	r3, r0
 810301c:	75fb      	strb	r3, [r7, #23]
	while ( hsem_take_status IS_NOT_EQUAL_TO HAL_OK )
 810301e:	e005      	b.n	810302c <CILspinlock_getSpinlock+0x26>
	{
		hsem_take_status = HAL_HSEM_Take(spinlockId, schedulableId);
 8103020:	6879      	ldr	r1, [r7, #4]
 8103022:	68b8      	ldr	r0, [r7, #8]
 8103024:	f002 fed0 	bl	8105dc8 <HAL_HSEM_Take>
 8103028:	4603      	mov	r3, r0
 810302a:	75fb      	strb	r3, [r7, #23]
	while ( hsem_take_status IS_NOT_EQUAL_TO HAL_OK )
 810302c:	7dfb      	ldrb	r3, [r7, #23]
 810302e:	2b00      	cmp	r3, #0
 8103030:	d1f6      	bne.n	8103020 <CILspinlock_getSpinlock+0x1a>
	}

	*spinlockPointer = 1;
 8103032:	68fb      	ldr	r3, [r7, #12]
 8103034:	2201      	movs	r2, #1
 8103036:	601a      	str	r2, [r3, #0]
	spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8103038:	2302      	movs	r3, #2
 810303a:	613b      	str	r3, [r7, #16]
	//__asm volatile("MOVEQ R1, #0x2");
	//__asm volatile("BNE tryLock");
    //__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
	//__SUPRESS_UNUSED_VAR(spinlockPointer);

    return spinlockState;
 810303c:	693b      	ldr	r3, [r7, #16]
}
 810303e:	4618      	mov	r0, r3
 8103040:	3718      	adds	r7, #24
 8103042:	46bd      	mov	sp, r7
 8103044:	bd80      	pop	{r7, pc}

08103046 <CILspinlock_trySpinlock>:
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_trySpinlock(AddressType * spinlockPointer, \
																	BitWidthType spinlockId, \
																	BitWidthType schedulableId )
{
 8103046:	b580      	push	{r7, lr}
 8103048:	b086      	sub	sp, #24
 810304a:	af00      	add	r7, sp, #0
 810304c:	60f8      	str	r0, [r7, #12]
 810304e:	60b9      	str	r1, [r7, #8]
 8103050:	607a      	str	r2, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	HAL_StatusTypeDef hsem_take_status;


	hsem_take_status = HAL_HSEM_Take(spinlockId, schedulableId);
 8103052:	6879      	ldr	r1, [r7, #4]
 8103054:	68b8      	ldr	r0, [r7, #8]
 8103056:	f002 feb7 	bl	8105dc8 <HAL_HSEM_Take>
 810305a:	4603      	mov	r3, r0
 810305c:	74fb      	strb	r3, [r7, #19]
	if ( hsem_take_status IS_EQUAL_TO HAL_OK)
 810305e:	7cfb      	ldrb	r3, [r7, #19]
 8103060:	2b00      	cmp	r3, #0
 8103062:	d105      	bne.n	8103070 <CILspinlock_trySpinlock+0x2a>
	{
		*spinlockPointer = 1;
 8103064:	68fb      	ldr	r3, [r7, #12]
 8103066:	2201      	movs	r2, #1
 8103068:	601a      	str	r2, [r3, #0]
		spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 810306a:	2302      	movs	r3, #2
 810306c:	617b      	str	r3, [r7, #20]
 810306e:	e001      	b.n	8103074 <CILspinlock_trySpinlock+0x2e>
	}
	else
	{
		__SUPRESS_UNUSED_VAR(spinlockPointer);
		spinlockState = SPINLOCK_STATE_ENUM__OCCUPIED;
 8103070:	2301      	movs	r3, #1
 8103072:	617b      	str	r3, [r7, #20]
	//__asm volatile("MOVNE R1, #0x1");
	//__asm volatile("MOVEQ R1, #0x2");
	//__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
	//__SUPRESS_UNUSED_VAR(spinlockPointer);

    return spinlockState;
 8103074:	697b      	ldr	r3, [r7, #20]
}
 8103076:	4618      	mov	r0, r3
 8103078:	3718      	adds	r7, #24
 810307a:	46bd      	mov	sp, r7
 810307c:	bd80      	pop	{r7, pc}

0810307e <CILspinlock_releaseSpinlock>:
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_releaseSpinlock(AddressType * spinlockPointer, \
																		BitWidthType spinlockId, \
																		BitWidthType schedulableId )
{
 810307e:	b580      	push	{r7, lr}
 8103080:	b086      	sub	sp, #24
 8103082:	af00      	add	r7, sp, #0
 8103084:	60f8      	str	r0, [r7, #12]
 8103086:	60b9      	str	r1, [r7, #8]
 8103088:	607a      	str	r2, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;


	HAL_HSEM_Release(spinlockId, schedulableId);
 810308a:	6879      	ldr	r1, [r7, #4]
 810308c:	68b8      	ldr	r0, [r7, #8]
 810308e:	f002 fee1 	bl	8105e54 <HAL_HSEM_Release>

	*spinlockPointer = 0;
 8103092:	68fb      	ldr	r3, [r7, #12]
 8103094:	2200      	movs	r2, #0
 8103096:	601a      	str	r2, [r3, #0]
	spinlockState = SPINLOCK_STATE_ENUM__RELEASED;
 8103098:	2300      	movs	r3, #0
 810309a:	617b      	str	r3, [r7, #20]
	//__asm volatile("BNE tryUnlock");
	//__asm volatile("released:");
    //__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
	//__SUPRESS_UNUSED_VAR(spinlockPointer);

    return spinlockState;
 810309c:	697b      	ldr	r3, [r7, #20]
}
 810309e:	4618      	mov	r0, r3
 81030a0:	3718      	adds	r7, #24
 81030a2:	46bd      	mov	sp, r7
 81030a4:	bd80      	pop	{r7, pc}

081030a6 <CILstack_stackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType CILstack_stackInit(AddressType stackLowAddress, AddressType stackHighAddress, AddressType handlerAddress)
{
 81030a6:	b480      	push	{r7}
 81030a8:	b087      	sub	sp, #28
 81030aa:	af00      	add	r7, sp, #0
 81030ac:	60f8      	str	r0, [r7, #12]
 81030ae:	60b9      	str	r1, [r7, #8]
 81030b0:	607a      	str	r2, [r7, #4]
    CosmOS_StackType *stack = ( CosmOS_StackType* )( stackHighAddress - (AddressType)sizeof(CosmOS_StackType) );
 81030b2:	68bb      	ldr	r3, [r7, #8]
 81030b4:	3b40      	subs	r3, #64	; 0x40
 81030b6:	617b      	str	r3, [r7, #20]

    stack->XPSR  = 0x01000000;
 81030b8:	697b      	ldr	r3, [r7, #20]
 81030ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 81030be:	63da      	str	r2, [r3, #60]	; 0x3c
    stack->PC    = handlerAddress;
 81030c0:	697b      	ldr	r3, [r7, #20]
 81030c2:	687a      	ldr	r2, [r7, #4]
 81030c4:	639a      	str	r2, [r3, #56]	; 0x38
    stack->LR    = 0xFFFFFFFD;
 81030c6:	697b      	ldr	r3, [r7, #20]
 81030c8:	f06f 0202 	mvn.w	r2, #2
 81030cc:	635a      	str	r2, [r3, #52]	; 0x34
    stack->R12   = 0;
 81030ce:	697b      	ldr	r3, [r7, #20]
 81030d0:	2200      	movs	r2, #0
 81030d2:	631a      	str	r2, [r3, #48]	; 0x30
    stack->R3    = 0;
 81030d4:	697b      	ldr	r3, [r7, #20]
 81030d6:	2200      	movs	r2, #0
 81030d8:	62da      	str	r2, [r3, #44]	; 0x2c
    stack->R2    = 0;
 81030da:	697b      	ldr	r3, [r7, #20]
 81030dc:	2200      	movs	r2, #0
 81030de:	629a      	str	r2, [r3, #40]	; 0x28
    stack->R1    = 0;
 81030e0:	697b      	ldr	r3, [r7, #20]
 81030e2:	2200      	movs	r2, #0
 81030e4:	625a      	str	r2, [r3, #36]	; 0x24
    stack->R0    = 0;
 81030e6:	697b      	ldr	r3, [r7, #20]
 81030e8:	2200      	movs	r2, #0
 81030ea:	621a      	str	r2, [r3, #32]
    stack->R14   = 0xFFFFFFFD;
 81030ec:	697b      	ldr	r3, [r7, #20]
 81030ee:	f06f 0202 	mvn.w	r2, #2
 81030f2:	61da      	str	r2, [r3, #28]
    stack->R11   = 0;
 81030f4:	697b      	ldr	r3, [r7, #20]
 81030f6:	2200      	movs	r2, #0
 81030f8:	619a      	str	r2, [r3, #24]
    stack->R10   = 0;
 81030fa:	697b      	ldr	r3, [r7, #20]
 81030fc:	2200      	movs	r2, #0
 81030fe:	615a      	str	r2, [r3, #20]
    stack->R8    = 0;
 8103100:	697b      	ldr	r3, [r7, #20]
 8103102:	2200      	movs	r2, #0
 8103104:	611a      	str	r2, [r3, #16]
    stack->R7    = 0;
 8103106:	697b      	ldr	r3, [r7, #20]
 8103108:	2200      	movs	r2, #0
 810310a:	60da      	str	r2, [r3, #12]
    stack->R6    = 0;
 810310c:	697b      	ldr	r3, [r7, #20]
 810310e:	2200      	movs	r2, #0
 8103110:	609a      	str	r2, [r3, #8]
    stack->R5    = 0;
 8103112:	697b      	ldr	r3, [r7, #20]
 8103114:	2200      	movs	r2, #0
 8103116:	605a      	str	r2, [r3, #4]
    stack->R4    = 0;
 8103118:	697b      	ldr	r3, [r7, #20]
 810311a:	2200      	movs	r2, #0
 810311c:	601a      	str	r2, [r3, #0]

	__SUPRESS_UNUSED_VAR(stackLowAddress);
    return (StackPointerType)(&(stack->R4));
 810311e:	697b      	ldr	r3, [r7, #20]
}
 8103120:	4618      	mov	r0, r3
 8103122:	371c      	adds	r7, #28
 8103124:	46bd      	mov	sp, r7
 8103126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810312a:	4770      	bx	lr

0810312c <CILstack_setStackPointer>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION __NAKED void CILstack_setStackPointer(AddressType address)
{
    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 810312c:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
	__asm volatile ("MSR PSP,R0");
 8103130:	f380 8809 	msr	PSP, r0
    __asm volatile ("MOV R0, #0x3");
 8103134:	f04f 0003 	mov.w	r0, #3
    __asm volatile ("MSR CONTROL, R0");
 8103138:	f380 8814 	msr	CONTROL, r0
    __asm volatile ("ISB");
 810313c:	f3bf 8f6f 	isb	sy
    __asm volatile ("BX R14");
 8103140:	4770      	bx	lr

	__SUPRESS_UNUSED_VAR(address);
}
 8103142:	bf00      	nop

08103144 <CILsysCalls_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_dispatcher(BitWidthType *sp)
{
 8103144:	b580      	push	{r7, lr}
 8103146:	b08e      	sub	sp, #56	; 0x38
 8103148:	af00      	add	r7, sp, #0
 810314a:	6078      	str	r0, [r7, #4]
    CosmOS_GenericVoidType sysCall;
    CosmOS_OsVariableType * osVar;
    CosmOS_RoutesConfigurationType * routeVar;


    uint8_t *pc = (uint8_t*)(sp[6]);
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	3318      	adds	r3, #24
 8103150:	681b      	ldr	r3, [r3, #0]
 8103152:	633b      	str	r3, [r7, #48]	; 0x30

    pc-=2;
 8103154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103156:	3b02      	subs	r3, #2
 8103158:	633b      	str	r3, [r7, #48]	; 0x30

    osVar = os_getOsVar();
 810315a:	f7fe fc75 	bl	8101a48 <os_getOsVar>
 810315e:	62f8      	str	r0, [r7, #44]	; 0x2c

    uint8_t sysCallId = *pc;
 8103160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103162:	781b      	ldrb	r3, [r3, #0]
 8103164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8103168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810316a:	60bb      	str	r3, [r7, #8]
    return (CosmOS_RoutesConfigurationType *)(osVar->cfg->route);
 810316c:	68bb      	ldr	r3, [r7, #8]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	691b      	ldr	r3, [r3, #16]

    routeVar = os_getOsRoutes( osVar );
 8103172:	627b      	str	r3, [r7, #36]	; 0x24

    sysCall = route_getRoutesFunc( routeVar, sp[0] );
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810317a:	613a      	str	r2, [r7, #16]
 810317c:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_GenericVoidType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_GenericVoidType route_getRoutesFunc(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (CosmOS_GenericVoidType)(route->routeFunc[route->routeIdToFunc[callId]]);
 810317e:	693b      	ldr	r3, [r7, #16]
 8103180:	681a      	ldr	r2, [r3, #0]
 8103182:	693b      	ldr	r3, [r7, #16]
 8103184:	6859      	ldr	r1, [r3, #4]
 8103186:	68fb      	ldr	r3, [r7, #12]
 8103188:	009b      	lsls	r3, r3, #2
 810318a:	440b      	add	r3, r1
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	009b      	lsls	r3, r3, #2
 8103190:	4413      	add	r3, r2
 8103192:	681b      	ldr	r3, [r3, #0]
 8103194:	623b      	str	r3, [r7, #32]
    entityId = route_getRoutesEntityId( routeVar, sp[0] );
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	681b      	ldr	r3, [r3, #0]
 810319a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810319c:	61ba      	str	r2, [r7, #24]
 810319e:	617b      	str	r3, [r7, #20]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType route_getRoutesEntityId(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (route->routeIdToEntity[callId]);
 81031a0:	69bb      	ldr	r3, [r7, #24]
 81031a2:	689a      	ldr	r2, [r3, #8]
 81031a4:	697b      	ldr	r3, [r7, #20]
 81031a6:	009b      	lsls	r3, r3, #2
 81031a8:	4413      	add	r3, r2
 81031aa:	681b      	ldr	r3, [r3, #0]
 81031ac:	61fb      	str	r3, [r7, #28]

    switch ( sysCallId )
 81031ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 81031b2:	2b04      	cmp	r3, #4
 81031b4:	d834      	bhi.n	8103220 <CILsysCalls_dispatcher+0xdc>
 81031b6:	a201      	add	r2, pc, #4	; (adr r2, 81031bc <CILsysCalls_dispatcher+0x78>)
 81031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81031bc:	081031d1 	.word	0x081031d1
 81031c0:	081031d9 	.word	0x081031d9
 81031c4:	081031e3 	.word	0x081031e3
 81031c8:	081031f5 	.word	0x081031f5
 81031cc:	0810320d 	.word	0x0810320d
    {
        case 0 :
        {
            ((CosmOS_Generic_bitWidthType_ret_void)sysCall)(entityId);
 81031d0:	6a3b      	ldr	r3, [r7, #32]
 81031d2:	69f8      	ldr	r0, [r7, #28]
 81031d4:	4798      	blx	r3
            break;
 81031d6:	e024      	b.n	8103222 <CILsysCalls_dispatcher+0xde>
        }

		case 1 :
        {
            returnValue = ((CosmOS_Generic_bitWidthType_ret_bitWidthType)sysCall)(entityId);
 81031d8:	6a3b      	ldr	r3, [r7, #32]
 81031da:	69f8      	ldr	r0, [r7, #28]
 81031dc:	4798      	blx	r3
 81031de:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 81031e0:	e01f      	b.n	8103222 <CILsysCalls_dispatcher+0xde>
        }

        case 2 :
        {
            returnValue = ((CosmOS_Generic_bitWidthType_bitWidthType_ret_bitWidthType)sysCall)(entityId, (BitWidthType)sp[1]);
 81031e2:	687b      	ldr	r3, [r7, #4]
 81031e4:	3304      	adds	r3, #4
 81031e6:	681a      	ldr	r2, [r3, #0]
 81031e8:	6a3b      	ldr	r3, [r7, #32]
 81031ea:	4611      	mov	r1, r2
 81031ec:	69f8      	ldr	r0, [r7, #28]
 81031ee:	4798      	blx	r3
 81031f0:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 81031f2:	e016      	b.n	8103222 <CILsysCalls_dispatcher+0xde>
        }

        case 3 :
        {
			returnValue = ((CosmOS_Generic_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType)sysCall)(entityId, (void *)sp[1], sp[2]);
 81031f4:	687b      	ldr	r3, [r7, #4]
 81031f6:	3304      	adds	r3, #4
 81031f8:	681b      	ldr	r3, [r3, #0]
 81031fa:	4619      	mov	r1, r3
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	3308      	adds	r3, #8
 8103200:	681a      	ldr	r2, [r3, #0]
 8103202:	6a3b      	ldr	r3, [r7, #32]
 8103204:	69f8      	ldr	r0, [r7, #28]
 8103206:	4798      	blx	r3
 8103208:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 810320a:	e00a      	b.n	8103222 <CILsysCalls_dispatcher+0xde>
        }

		case 4 :
        {
			returnValue = ((CosmOS_Generic_bitWidthType_voidPtr_ret_bitWidthType)sysCall)(entityId, (void *)sp[1]);
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	3304      	adds	r3, #4
 8103210:	681b      	ldr	r3, [r3, #0]
 8103212:	461a      	mov	r2, r3
 8103214:	6a3b      	ldr	r3, [r7, #32]
 8103216:	4611      	mov	r1, r2
 8103218:	69f8      	ldr	r0, [r7, #28]
 810321a:	4798      	blx	r3
 810321c:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 810321e:	e000      	b.n	8103222 <CILsysCalls_dispatcher+0xde>
        }

        default :
        {
            /* PANIC */
            break;
 8103220:	bf00      	nop
        }
    }

    sp[0] = returnValue;
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103226:	601a      	str	r2, [r3, #0]
}
 8103228:	bf00      	nop
 810322a:	3738      	adds	r7, #56	; 0x38
 810322c:	46bd      	mov	sp, r7
 810322e:	bd80      	pop	{r7, pc}

08103230 <CILsysCalls_bitWidthType_ret_void>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_bitWidthType_ret_void(BitWidthType id)
{
 8103230:	b480      	push	{r7}
 8103232:	b083      	sub	sp, #12
 8103234:	af00      	add	r7, sp, #0
 8103236:	6078      	str	r0, [r7, #4]
    __asm volatile("SVC #0");
 8103238:	df00      	svc	0

	__SUPRESS_UNUSED_VAR(id);
}
 810323a:	bf00      	nop
 810323c:	370c      	adds	r7, #12
 810323e:	46bd      	mov	sp, r7
 8103240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103244:	4770      	bx	lr

08103246 <CILsysCalls_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_ret_bitWidthType(BitWidthType id)
{
 8103246:	b480      	push	{r7}
 8103248:	b085      	sub	sp, #20
 810324a:	af00      	add	r7, sp, #0
 810324c:	6078      	str	r0, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #1");
 810324e:	df01      	svc	1
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8103250:	4603      	mov	r3, r0
 8103252:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
    return returnValue;
 8103254:	68fb      	ldr	r3, [r7, #12]
}
 8103256:	4618      	mov	r0, r3
 8103258:	3714      	adds	r7, #20
 810325a:	46bd      	mov	sp, r7
 810325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103260:	4770      	bx	lr

08103262 <CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType(BitWidthType id, BitWidthType arg)
{
 8103262:	b480      	push	{r7}
 8103264:	b085      	sub	sp, #20
 8103266:	af00      	add	r7, sp, #0
 8103268:	6078      	str	r0, [r7, #4]
 810326a:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    __asm volatile("SVC #2");
 810326c:	df02      	svc	2
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 810326e:	4603      	mov	r3, r0
 8103270:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(arg);
    return returnValue;
 8103272:	68fb      	ldr	r3, [r7, #12]
}
 8103274:	4618      	mov	r0, r3
 8103276:	3714      	adds	r7, #20
 8103278:	46bd      	mov	sp, r7
 810327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810327e:	4770      	bx	lr

08103280 <CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType(BitWidthType id, void * ptr, BitWidthType arg)
{
 8103280:	b480      	push	{r7}
 8103282:	b087      	sub	sp, #28
 8103284:	af00      	add	r7, sp, #0
 8103286:	60f8      	str	r0, [r7, #12]
 8103288:	60b9      	str	r1, [r7, #8]
 810328a:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #3");
 810328c:	df03      	svc	3
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 810328e:	4603      	mov	r3, r0
 8103290:	617b      	str	r3, [r7, #20]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(ptr);
	__SUPRESS_UNUSED_VAR(arg);
    return returnValue;
 8103292:	697b      	ldr	r3, [r7, #20]
}
 8103294:	4618      	mov	r0, r3
 8103296:	371c      	adds	r7, #28
 8103298:	46bd      	mov	sp, r7
 810329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810329e:	4770      	bx	lr

081032a0 <CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType(BitWidthType id, void * ptr)
{
 81032a0:	b480      	push	{r7}
 81032a2:	b085      	sub	sp, #20
 81032a4:	af00      	add	r7, sp, #0
 81032a6:	6078      	str	r0, [r7, #4]
 81032a8:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    __asm volatile("SVC #4");
 81032aa:	df04      	svc	4
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 81032ac:	4603      	mov	r3, r0
 81032ae:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(ptr);
    return returnValue;
 81032b0:	68fb      	ldr	r3, [r7, #12]
}
 81032b2:	4618      	mov	r0, r3
 81032b4:	3714      	adds	r7, #20
 81032b6:	46bd      	mov	sp, r7
 81032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032bc:	4770      	bx	lr
 81032be:	bf00      	nop

081032c0 <CILsysTimer_startTimer>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_startTimer(BitWidthType ticks, BitWidthType timerTickCount)
{
 81032c0:	b480      	push	{r7}
 81032c2:	b083      	sub	sp, #12
 81032c4:	af00      	add	r7, sp, #0
 81032c6:	6078      	str	r0, [r7, #4]
 81032c8:	6039      	str	r1, [r7, #0]

	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)) - 1UL);
 81032ca:	687b      	ldr	r3, [r7, #4]
 81032cc:	683a      	ldr	r2, [r7, #0]
 81032ce:	fb02 f303 	mul.w	r3, r2, r3
 81032d2:	4a07      	ldr	r2, [pc, #28]	; (81032f0 <CILsysTimer_startTimer+0x30>)
 81032d4:	3b01      	subs	r3, #1
 81032d6:	6053      	str	r3, [r2, #4]
	SysTick->VAL   = 0UL;
 81032d8:	4b05      	ldr	r3, [pc, #20]	; (81032f0 <CILsysTimer_startTimer+0x30>)
 81032da:	2200      	movs	r2, #0
 81032dc:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = 	SysTick_CTRL_CLKSOURCE_Msk |
 81032de:	4b04      	ldr	r3, [pc, #16]	; (81032f0 <CILsysTimer_startTimer+0x30>)
 81032e0:	2207      	movs	r2, #7
 81032e2:	601a      	str	r2, [r3, #0]
						SysTick_CTRL_TICKINT_Msk   |
						SysTick_CTRL_ENABLE_Msk;
}
 81032e4:	bf00      	nop
 81032e6:	370c      	adds	r7, #12
 81032e8:	46bd      	mov	sp, r7
 81032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032ee:	4770      	bx	lr
 81032f0:	e000e010 	.word	0xe000e010

081032f4 <CILsysTimer_setTicks>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_setTicks(BitWidthType ticks, BitWidthType timerTickCount)
{
 81032f4:	b480      	push	{r7}
 81032f6:	b083      	sub	sp, #12
 81032f8:	af00      	add	r7, sp, #0
 81032fa:	6078      	str	r0, [r7, #4]
 81032fc:	6039      	str	r1, [r7, #0]
	SysTick->CTRL = 0;
 81032fe:	4b0e      	ldr	r3, [pc, #56]	; (8103338 <CILsysTimer_setTicks+0x44>)
 8103300:	2200      	movs	r2, #0
 8103302:	601a      	str	r2, [r3, #0]

	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)-\
 8103304:	687b      	ldr	r3, [r7, #4]
 8103306:	683a      	ldr	r2, [r7, #0]
 8103308:	fb02 f203 	mul.w	r2, r2, r3
								(SysTick->LOAD - SysTick->VAL)) - 1UL);
 810330c:	4b0a      	ldr	r3, [pc, #40]	; (8103338 <CILsysTimer_setTicks+0x44>)
 810330e:	6899      	ldr	r1, [r3, #8]
 8103310:	4b09      	ldr	r3, [pc, #36]	; (8103338 <CILsysTimer_setTicks+0x44>)
 8103312:	685b      	ldr	r3, [r3, #4]
 8103314:	1acb      	subs	r3, r1, r3
	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)-\
 8103316:	4413      	add	r3, r2
 8103318:	4a07      	ldr	r2, [pc, #28]	; (8103338 <CILsysTimer_setTicks+0x44>)
 810331a:	3b01      	subs	r3, #1
 810331c:	6053      	str	r3, [r2, #4]

	SysTick->VAL   = 0UL;
 810331e:	4b06      	ldr	r3, [pc, #24]	; (8103338 <CILsysTimer_setTicks+0x44>)
 8103320:	2200      	movs	r2, #0
 8103322:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = 	SysTick_CTRL_CLKSOURCE_Msk |
 8103324:	4b04      	ldr	r3, [pc, #16]	; (8103338 <CILsysTimer_setTicks+0x44>)
 8103326:	2207      	movs	r2, #7
 8103328:	601a      	str	r2, [r3, #0]
						SysTick_CTRL_TICKINT_Msk   |
						SysTick_CTRL_ENABLE_Msk;
}
 810332a:	bf00      	nop
 810332c:	370c      	adds	r7, #12
 810332e:	46bd      	mov	sp, r7
 8103330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103334:	4770      	bx	lr
 8103336:	bf00      	nop
 8103338:	e000e010 	.word	0xe000e010

0810333c <CILuart_sysJob>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILuart_sysJob()
{
 810333c:	b480      	push	{r7}
 810333e:	af00      	add	r7, sp, #0

    //TX SIDE
    //check where is DMA and switch it if its buffer is empty
    //check if user is in red zone, if yes check if DMA is on the same buffer, then switch to the other
    //HAL_UART_Receive_DMA()
}
 8103340:	bf00      	nop
 8103342:	46bd      	mov	sp, r7
 8103344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103348:	4770      	bx	lr

0810334a <_e_funcs_align_helper>:
	...

Disassembly of section .application_section_funcs_CM7:

08080000 <Idle_CM7>:
  * @{
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 8080000:	b480      	push	{r7}
 8080002:	af00      	add	r7, sp, #0
 8080004:	bf00      	nop
 8080006:	46bd      	mov	sp, r7
 8080008:	f85d 7b04 	ldr.w	r7, [sp], #4
 808000c:	4770      	bx	lr

0808000e <sysJobs_CM7>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 808000e:	b480      	push	{r7}
 8080010:	af00      	add	r7, sp, #0
 8080012:	bf00      	nop
 8080014:	46bd      	mov	sp, r7
 8080016:	f85d 7b04 	ldr.w	r7, [sp], #4
 808001a:	4770      	bx	lr
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 808001c:	b480      	push	{r7}
 808001e:	af00      	add	r7, sp, #0
 8080020:	bf00      	nop
 8080022:	46bd      	mov	sp, r7
 8080024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080028:	4770      	bx	lr

0808002a <IdleThread_CM7>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM4)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 808002a:	b480      	push	{r7}
 808002c:	af00      	add	r7, sp, #0
 808002e:	bf00      	nop
 8080030:	46bd      	mov	sp, r7
 8080032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080036:	4770      	bx	lr
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 8080038:	b480      	push	{r7}
 808003a:	af00      	add	r7, sp, #0
 808003c:	bf00      	nop
 808003e:	46bd      	mov	sp, r7
 8080040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080044:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 8080046:	b480      	push	{r7}
 8080048:	af00      	add	r7, sp, #0
 808004a:	bf00      	nop
 808004c:	46bd      	mov	sp, r7
 808004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080052:	4770      	bx	lr

08080054 <wrapped_Idle_CM7>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Idle_CM7(void)
{
 8080054:	b580      	push	{r7, lr}
 8080056:	af00      	add	r7, sp, #0
    Idle_CM7();
 8080058:	f7ff ffd2 	bl	8080000 <Idle_CM7>
    for(;;);
 808005c:	e7fe      	b.n	808005c <wrapped_Idle_CM7+0x8>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 808005e:	b480      	push	{r7}
 8080060:	af00      	add	r7, sp, #0
 8080062:	bf00      	nop
 8080064:	46bd      	mov	sp, r7
 8080066:	f85d 7b04 	ldr.w	r7, [sp], #4
 808006a:	4770      	bx	lr

0808006c <wrapped_sysJobs_CM7>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_sysJobs_CM7(void)
{
 808006c:	b580      	push	{r7, lr}
 808006e:	af00      	add	r7, sp, #0
    cosmosApiPrivate_sysJobs_dispatcher();
 8080070:	2010      	movs	r0, #16
 8080072:	f082 fbfd 	bl	8102870 <sysCalls_bitWidthType_ret_void>
    cosmosApiPrivate_schedulable_setExecutionStateToFinished();
 8080076:	200f      	movs	r0, #15
 8080078:	f082 fbfa 	bl	8102870 <sysCalls_bitWidthType_ret_void>
    for(;;);
 808007c:	e7fe      	b.n	808007c <wrapped_sysJobs_CM7+0x10>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 808007e:	b480      	push	{r7}
 8080080:	af00      	add	r7, sp, #0
 8080082:	bf00      	nop
 8080084:	46bd      	mov	sp, r7
 8080086:	f85d 7b04 	ldr.w	r7, [sp], #4
 808008a:	4770      	bx	lr

0808008c <wrapped_Task_0_Core_0_Handler>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Task_0_Core_0_Handler(void)
{
 808008c:	b580      	push	{r7, lr}
 808008e:	af00      	add	r7, sp, #0
    Task_0_Core_0_Handler();
 8080090:	f000 f86a 	bl	8080168 <Task_0_Core_0_Handler>
    cosmosApiPrivate_schedulable_setExecutionStateToFinished();
 8080094:	200f      	movs	r0, #15
 8080096:	f082 fbeb 	bl	8102870 <sysCalls_bitWidthType_ret_void>
    for(;;);
 808009a:	e7fe      	b.n	808009a <wrapped_Task_0_Core_0_Handler+0xe>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 808009c:	b480      	push	{r7}
 808009e:	af00      	add	r7, sp, #0
 80800a0:	bf00      	nop
 80800a2:	46bd      	mov	sp, r7
 80800a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800a8:	4770      	bx	lr

080800aa <wrapped_IdleThread_CM7>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_IdleThread_CM7(void)
{
 80800aa:	b580      	push	{r7, lr}
 80800ac:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM7();
 80800ae:	f7ff ffbc 	bl	808002a <IdleThread_CM7>
 80800b2:	e7fc      	b.n	80800ae <wrapped_IdleThread_CM7+0x4>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 80800b4:	b480      	push	{r7}
 80800b6:	af00      	add	r7, sp, #0
 80800b8:	bf00      	nop
 80800ba:	46bd      	mov	sp, r7
 80800bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800c0:	4770      	bx	lr

080800c2 <wrapped_Thread_Core_0>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Thread_Core_0(void)
{
 80800c2:	b580      	push	{r7, lr}
 80800c4:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        Thread_Core_0();
 80800c6:	f000 f893 	bl	80801f0 <Thread_Core_0>
 80800ca:	e7fc      	b.n	80800c6 <wrapped_Thread_Core_0+0x4>
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
 80800cc:	b480      	push	{r7}
 80800ce:	af00      	add	r7, sp, #0
 80800d0:	bf00      	nop
 80800d2:	46bd      	mov	sp, r7
 80800d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800d8:	4770      	bx	lr
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
 80800da:	b480      	push	{r7}
 80800dc:	af00      	add	r7, sp, #0
 80800de:	bf00      	nop
 80800e0:	46bd      	mov	sp, r7
 80800e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800e6:	4770      	bx	lr
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
 80800e8:	b480      	push	{r7}
 80800ea:	af00      	add	r7, sp, #0
 80800ec:	bf00      	nop
 80800ee:	46bd      	mov	sp, r7
 80800f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800f4:	4770      	bx	lr
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
 80800f6:	b480      	push	{r7}
 80800f8:	af00      	add	r7, sp, #0
 80800fa:	bf00      	nop
 80800fc:	46bd      	mov	sp, r7
 80800fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080102:	4770      	bx	lr
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
 8080104:	b480      	push	{r7}
 8080106:	af00      	add	r7, sp, #0
 8080108:	bf00      	nop
 808010a:	46bd      	mov	sp, r7
 808010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080110:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 8080112:	b480      	push	{r7}
 8080114:	af00      	add	r7, sp, #0
 8080116:	bf00      	nop
 8080118:	46bd      	mov	sp, r7
 808011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808011e:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 8080120:	b480      	push	{r7}
 8080122:	af00      	add	r7, sp, #0
 8080124:	bf00      	nop
 8080126:	46bd      	mov	sp, r7
 8080128:	f85d 7b04 	ldr.w	r7, [sp], #4
 808012c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 808012e:	b480      	push	{r7}
 8080130:	af00      	add	r7, sp, #0
 8080132:	bf00      	nop
 8080134:	46bd      	mov	sp, r7
 8080136:	f85d 7b04 	ldr.w	r7, [sp], #4
 808013a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 808013c:	b480      	push	{r7}
 808013e:	af00      	add	r7, sp, #0
 8080140:	bf00      	nop
 8080142:	46bd      	mov	sp, r7
 8080144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080148:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 808014a:	b480      	push	{r7}
 808014c:	af00      	add	r7, sp, #0
 808014e:	bf00      	nop
 8080150:	46bd      	mov	sp, r7
 8080152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080156:	4770      	bx	lr

08080158 <userKernelPanicHook_CM7>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void userKernelPanicHook_CM7(void)
{
 8080158:	b480      	push	{r7}
 808015a:	af00      	add	r7, sp, #0

/********************************************************************************
** stop_name =userKernelPanicHook_CM7.cfunc
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 808015c:	bf00      	nop
 808015e:	46bd      	mov	sp, r7
 8080160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080164:	4770      	bx	lr
	...

08080168 <Task_0_Core_0_Handler>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void Task_0_Core_0_Handler(void)
{
 8080168:	b580      	push	{r7, lr}
 808016a:	b084      	sub	sp, #16
 808016c:	af00      	add	r7, sp, #0
	CosmOS_SpinlockStateType spinlockState;
	CosmOS_BufferStateType bufferState;
	CosmOS_MutexStateType mutexState;


	if (counter > 100)
 808016e:	4b1d      	ldr	r3, [pc, #116]	; (80801e4 <Task_0_Core_0_Handler+0x7c>)
 8080170:	681b      	ldr	r3, [r3, #0]
 8080172:	2b64      	cmp	r3, #100	; 0x64
 8080174:	dd2b      	ble.n	80801ce <Task_0_Core_0_Handler+0x66>
	{
		counter = 0;
 8080176:	4b1b      	ldr	r3, [pc, #108]	; (80801e4 <Task_0_Core_0_Handler+0x7c>)
 8080178:	2200      	movs	r2, #0
 808017a:	601a      	str	r2, [r3, #0]

		bufferReader_cm7 = 100;
 808017c:	4b1a      	ldr	r3, [pc, #104]	; (80801e8 <Task_0_Core_0_Handler+0x80>)
 808017e:	2264      	movs	r2, #100	; 0x64
 8080180:	601a      	str	r2, [r3, #0]
		bufferState = cosmosApi_write_buffer_x_core_buffer_1(&bufferReader_cm7,sizeof(bufferReader_cm7));
 8080182:	2204      	movs	r2, #4
 8080184:	4918      	ldr	r1, [pc, #96]	; (80801e8 <Task_0_Core_0_Handler+0x80>)
 8080186:	200b      	movs	r0, #11
 8080188:	f082 fb99 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 808018c:	4603      	mov	r3, r0
 808018e:	73fb      	strb	r3, [r7, #15]

		bufferReader_cm7 = 0;
 8080190:	4b15      	ldr	r3, [pc, #84]	; (80801e8 <Task_0_Core_0_Handler+0x80>)
 8080192:	2200      	movs	r2, #0
 8080194:	601a      	str	r2, [r3, #0]
		bufferState = cosmosApi_read_buffer_x_core_buffer_1(&bufferReader_cm7,sizeof(bufferReader_cm7));
 8080196:	2204      	movs	r2, #4
 8080198:	4913      	ldr	r1, [pc, #76]	; (80801e8 <Task_0_Core_0_Handler+0x80>)
 808019a:	200a      	movs	r0, #10
 808019c:	f082 fb8f 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 80801a0:	4603      	mov	r3, r0
 80801a2:	73fb      	strb	r3, [r7, #15]

		spinlockState = cosmosApi_try_spinlock_uart_buffer_read();
 80801a4:	2001      	movs	r0, #1
 80801a6:	f082 fb6e 	bl	8102886 <sysCalls_bitWidthType_ret_bitWidthType>
 80801aa:	4603      	mov	r3, r0
 80801ac:	60bb      	str	r3, [r7, #8]
		spinlockState = cosmosApi_release_spinlock_uart_buffer_read();
 80801ae:	2002      	movs	r0, #2
 80801b0:	f082 fb69 	bl	8102886 <sysCalls_bitWidthType_ret_bitWidthType>
 80801b4:	4603      	mov	r3, r0
 80801b6:	60bb      	str	r3, [r7, #8]

		mutexState = mutex_getMutex(&resourcesMutex_CM7);
 80801b8:	480c      	ldr	r0, [pc, #48]	; (80801ec <Task_0_Core_0_Handler+0x84>)
 80801ba:	f081 fafd 	bl	81017b8 <mutex_getMutex>
 80801be:	4603      	mov	r3, r0
 80801c0:	607b      	str	r3, [r7, #4]
		mutexState = mutex_releaseMutex(&resourcesMutex_CM7);
 80801c2:	480a      	ldr	r0, [pc, #40]	; (80801ec <Task_0_Core_0_Handler+0x84>)
 80801c4:	f081 fbfb 	bl	81019be <mutex_releaseMutex>
 80801c8:	4603      	mov	r3, r0
 80801ca:	607b      	str	r3, [r7, #4]
 80801cc:	e004      	b.n	80801d8 <Task_0_Core_0_Handler+0x70>

	}
	else
	{
		counter++;
 80801ce:	4b05      	ldr	r3, [pc, #20]	; (80801e4 <Task_0_Core_0_Handler+0x7c>)
 80801d0:	681b      	ldr	r3, [r3, #0]
 80801d2:	3301      	adds	r3, #1
 80801d4:	4a03      	ldr	r2, [pc, #12]	; (80801e4 <Task_0_Core_0_Handler+0x7c>)
 80801d6:	6013      	str	r3, [r2, #0]
	}
	__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 80801d8:	ee20 0a20 	vmul.f32	s0, s0, s1
	__SUPRESS_UNUSED_VAR(bufferState);
/********************************************************************************
** stop_name =Task_0_Core_0_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 80801dc:	bf00      	nop
 80801de:	3710      	adds	r7, #16
 80801e0:	46bd      	mov	sp, r7
 80801e2:	bd80      	pop	{r7, pc}
 80801e4:	20001408 	.word	0x20001408
 80801e8:	20001410 	.word	0x20001410
 80801ec:	20001414 	.word	0x20001414

080801f0 <Thread_Core_0>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void Thread_Core_0(void)
{
 80801f0:	b580      	push	{r7, lr}
 80801f2:	b084      	sub	sp, #16
 80801f4:	af00      	add	r7, sp, #0
** start_name =Thread_Core_0
********************************************************************************/
	CosmOS_MutexStateType mutexState;
	CosmOS_SleepStateType sleepState;

	int * L = new int[10];
 80801f6:	2028      	movs	r0, #40	; 0x28
 80801f8:	f086 fbdd 	bl	81069b6 <_Znaj>
 80801fc:	4603      	mov	r3, r0
 80801fe:	60fb      	str	r3, [r7, #12]
	int *integerPointer = new int(100);
 8080200:	2004      	movs	r0, #4
 8080202:	f086 fbab 	bl	810695c <_Znwj>
 8080206:	4603      	mov	r3, r0
 8080208:	2264      	movs	r2, #100	; 0x64
 808020a:	601a      	str	r2, [r3, #0]
 808020c:	60bb      	str	r3, [r7, #8]

	sleepState = cosmosApi_thread_sleepMs(1000);
 808020e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8080212:	2013      	movs	r0, #19
 8080214:	f082 fb44 	bl	81028a0 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
 8080218:	4603      	mov	r3, r0
 808021a:	71fb      	strb	r3, [r7, #7]

	cosmosApi_deviceIO_togglePin(GPIOE, GPIO_PIN_1); //ORANGE LED
 808021c:	2202      	movs	r2, #2
 808021e:	4912      	ldr	r1, [pc, #72]	; (8080268 <Thread_Core_0+0x78>)
 8080220:	200c      	movs	r0, #12
 8080222:	f082 fb4c 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>

	mutexState = mutex_getMutex(&resourcesMutex_CM7);
 8080226:	4811      	ldr	r0, [pc, #68]	; (808026c <Thread_Core_0+0x7c>)
 8080228:	f081 fac6 	bl	81017b8 <mutex_getMutex>
 808022c:	4603      	mov	r3, r0
 808022e:	603b      	str	r3, [r7, #0]
	mutexState = mutex_releaseMutex(&resourcesMutex_CM7);
 8080230:	480e      	ldr	r0, [pc, #56]	; (808026c <Thread_Core_0+0x7c>)
 8080232:	f081 fbc4 	bl	81019be <mutex_releaseMutex>
 8080236:	4603      	mov	r3, r0
 8080238:	603b      	str	r3, [r7, #0]
	mutexState = mutex_tryMutex(&resourcesMutex_CM7);
 808023a:	480c      	ldr	r0, [pc, #48]	; (808026c <Thread_Core_0+0x7c>)
 808023c:	f081 fb96 	bl	810196c <mutex_tryMutex>
 8080240:	4603      	mov	r3, r0
 8080242:	603b      	str	r3, [r7, #0]

	delete[] L;
 8080244:	68fb      	ldr	r3, [r7, #12]
 8080246:	2b00      	cmp	r3, #0
 8080248:	d002      	beq.n	8080250 <Thread_Core_0+0x60>
 808024a:	68f8      	ldr	r0, [r7, #12]
 808024c:	f086 fbb1 	bl	81069b2 <_ZdaPv>
	delete integerPointer;
 8080250:	68bb      	ldr	r3, [r7, #8]
 8080252:	2b00      	cmp	r3, #0
 8080254:	d003      	beq.n	808025e <Thread_Core_0+0x6e>
 8080256:	2104      	movs	r1, #4
 8080258:	4618      	mov	r0, r3
 808025a:	f086 fb9e 	bl	810699a <_ZdlPvj>
	__SUPRESS_UNUSED_VAR(sleepState);
/********************************************************************************
** stop_name =Thread_Core_0
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 808025e:	bf00      	nop
 8080260:	3710      	adds	r7, #16
 8080262:	46bd      	mov	sp, r7
 8080264:	bd80      	pop	{r7, pc}
 8080266:	bf00      	nop
 8080268:	58021000 	.word	0x58021000
 808026c:	20001414 	.word	0x20001414

Disassembly of section .application_section_funcs_CM4:

08180000 <Idle_CM4>:
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 8180000:	b480      	push	{r7}
 8180002:	af00      	add	r7, sp, #0
 8180004:	bf00      	nop
 8180006:	46bd      	mov	sp, r7
 8180008:	f85d 7b04 	ldr.w	r7, [sp], #4
 818000c:	4770      	bx	lr

0818000e <sysJobs_CM4>:
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 818000e:	b480      	push	{r7}
 8180010:	af00      	add	r7, sp, #0
 8180012:	bf00      	nop
 8180014:	46bd      	mov	sp, r7
 8180016:	f85d 7b04 	ldr.w	r7, [sp], #4
 818001a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 818001c:	b480      	push	{r7}
 818001e:	af00      	add	r7, sp, #0
 8180020:	bf00      	nop
 8180022:	46bd      	mov	sp, r7
 8180024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180028:	4770      	bx	lr

0818002a <IdleThread_CM4>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 818002a:	b480      	push	{r7}
 818002c:	af00      	add	r7, sp, #0
 818002e:	bf00      	nop
 8180030:	46bd      	mov	sp, r7
 8180032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180036:	4770      	bx	lr
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM4)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 8180038:	b480      	push	{r7}
 818003a:	af00      	add	r7, sp, #0
 818003c:	bf00      	nop
 818003e:	46bd      	mov	sp, r7
 8180040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180044:	4770      	bx	lr
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM4)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 8180046:	b480      	push	{r7}
 8180048:	af00      	add	r7, sp, #0
 818004a:	bf00      	nop
 818004c:	46bd      	mov	sp, r7
 818004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180052:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 8180054:	b480      	push	{r7}
 8180056:	af00      	add	r7, sp, #0
 8180058:	bf00      	nop
 818005a:	46bd      	mov	sp, r7
 818005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180060:	4770      	bx	lr

08180062 <wrapped_Idle_CM4>:
{
 8180062:	b580      	push	{r7, lr}
 8180064:	af00      	add	r7, sp, #0
    Idle_CM4();
 8180066:	f7ff ffcb 	bl	8180000 <Idle_CM4>
    for(;;);
 818006a:	e7fe      	b.n	818006a <wrapped_Idle_CM4+0x8>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 818006c:	b480      	push	{r7}
 818006e:	af00      	add	r7, sp, #0
 8180070:	bf00      	nop
 8180072:	46bd      	mov	sp, r7
 8180074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180078:	4770      	bx	lr

0818007a <wrapped_sysJobs_CM4>:
{
 818007a:	b580      	push	{r7, lr}
 818007c:	af00      	add	r7, sp, #0
    cosmosApiPrivate_sysJobs_dispatcher();
 818007e:	2010      	movs	r0, #16
 8180080:	f782 fbf6 	bl	8102870 <sysCalls_bitWidthType_ret_void>
    cosmosApiPrivate_schedulable_setExecutionStateToFinished();
 8180084:	200f      	movs	r0, #15
 8180086:	f782 fbf3 	bl	8102870 <sysCalls_bitWidthType_ret_void>
    for(;;);
 818008a:	e7fe      	b.n	818008a <wrapped_sysJobs_CM4+0x10>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 818008c:	b480      	push	{r7}
 818008e:	af00      	add	r7, sp, #0
 8180090:	bf00      	nop
 8180092:	46bd      	mov	sp, r7
 8180094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180098:	4770      	bx	lr

0818009a <wrapped_Task_0_Core_1_Handler>:
{
 818009a:	b580      	push	{r7, lr}
 818009c:	af00      	add	r7, sp, #0
    Task_0_Core_1_Handler();
 818009e:	f000 f87d 	bl	818019c <Task_0_Core_1_Handler>
    cosmosApiPrivate_schedulable_setExecutionStateToFinished();
 81800a2:	200f      	movs	r0, #15
 81800a4:	f782 fbe4 	bl	8102870 <sysCalls_bitWidthType_ret_void>
    for(;;);
 81800a8:	e7fe      	b.n	81800a8 <wrapped_Task_0_Core_1_Handler+0xe>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 81800aa:	b480      	push	{r7}
 81800ac:	af00      	add	r7, sp, #0
 81800ae:	bf00      	nop
 81800b0:	46bd      	mov	sp, r7
 81800b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800b6:	4770      	bx	lr

081800b8 <wrapped_IdleThread_CM4>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void wrapped_IdleThread_CM4(void)
{
 81800b8:	b580      	push	{r7, lr}
 81800ba:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM4();
 81800bc:	f7ff ffb5 	bl	818002a <IdleThread_CM4>
 81800c0:	e7fc      	b.n	81800bc <wrapped_IdleThread_CM4+0x4>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 81800c2:	b480      	push	{r7}
 81800c4:	af00      	add	r7, sp, #0
 81800c6:	bf00      	nop
 81800c8:	46bd      	mov	sp, r7
 81800ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800ce:	4770      	bx	lr

081800d0 <wrapped_Thread_Core_1>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void wrapped_Thread_Core_1(void)
{
 81800d0:	b580      	push	{r7, lr}
 81800d2:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        Thread_Core_1();
 81800d4:	f000 f8b2 	bl	818023c <Thread_Core_1>
 81800d8:	e7fc      	b.n	81800d4 <wrapped_Thread_Core_1+0x4>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 81800da:	b480      	push	{r7}
 81800dc:	af00      	add	r7, sp, #0
 81800de:	bf00      	nop
 81800e0:	46bd      	mov	sp, r7
 81800e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800e6:	4770      	bx	lr

081800e8 <wrapped_Thread_mutex_test_CM4>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void wrapped_Thread_mutex_test_CM4(void)
{
 81800e8:	b580      	push	{r7, lr}
 81800ea:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        Thread_mutex_test_CM4();
 81800ec:	f000 f8da 	bl	81802a4 <Thread_mutex_test_CM4>
 81800f0:	e7fc      	b.n	81800ec <wrapped_Thread_mutex_test_CM4+0x4>
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
 81800f2:	b480      	push	{r7}
 81800f4:	af00      	add	r7, sp, #0
 81800f6:	bf00      	nop
 81800f8:	46bd      	mov	sp, r7
 81800fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800fe:	4770      	bx	lr
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
 8180100:	b480      	push	{r7}
 8180102:	af00      	add	r7, sp, #0
 8180104:	bf00      	nop
 8180106:	46bd      	mov	sp, r7
 8180108:	f85d 7b04 	ldr.w	r7, [sp], #4
 818010c:	4770      	bx	lr
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
 818010e:	b480      	push	{r7}
 8180110:	af00      	add	r7, sp, #0
 8180112:	bf00      	nop
 8180114:	46bd      	mov	sp, r7
 8180116:	f85d 7b04 	ldr.w	r7, [sp], #4
 818011a:	4770      	bx	lr
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
 818011c:	b480      	push	{r7}
 818011e:	af00      	add	r7, sp, #0
 8180120:	bf00      	nop
 8180122:	46bd      	mov	sp, r7
 8180124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180128:	4770      	bx	lr
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
 818012a:	b480      	push	{r7}
 818012c:	af00      	add	r7, sp, #0
 818012e:	bf00      	nop
 8180130:	46bd      	mov	sp, r7
 8180132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180136:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 8180138:	b480      	push	{r7}
 818013a:	af00      	add	r7, sp, #0
 818013c:	bf00      	nop
 818013e:	46bd      	mov	sp, r7
 8180140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180144:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 8180146:	b480      	push	{r7}
 8180148:	af00      	add	r7, sp, #0
 818014a:	bf00      	nop
 818014c:	46bd      	mov	sp, r7
 818014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180152:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 8180154:	b480      	push	{r7}
 8180156:	af00      	add	r7, sp, #0
 8180158:	bf00      	nop
 818015a:	46bd      	mov	sp, r7
 818015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180160:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 8180162:	b480      	push	{r7}
 8180164:	af00      	add	r7, sp, #0
 8180166:	bf00      	nop
 8180168:	46bd      	mov	sp, r7
 818016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 818016e:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 8180170:	b480      	push	{r7}
 8180172:	af00      	add	r7, sp, #0
 8180174:	bf00      	nop
 8180176:	46bd      	mov	sp, r7
 8180178:	f85d 7b04 	ldr.w	r7, [sp], #4
 818017c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 818017e:	b480      	push	{r7}
 8180180:	af00      	add	r7, sp, #0
 8180182:	bf00      	nop
 8180184:	46bd      	mov	sp, r7
 8180186:	f85d 7b04 	ldr.w	r7, [sp], #4
 818018a:	4770      	bx	lr

0818018c <userKernelPanicHook_CM4>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void userKernelPanicHook_CM4(void)
{
 818018c:	b480      	push	{r7}
 818018e:	af00      	add	r7, sp, #0

/********************************************************************************
** stop_name =userKernelPanicHook_CM4.cfunc
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8180190:	bf00      	nop
 8180192:	46bd      	mov	sp, r7
 8180194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180198:	4770      	bx	lr
	...

0818019c <Task_0_Core_1_Handler>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Task_0_Core_1_Handler(void)
{
 818019c:	b580      	push	{r7, lr}
 818019e:	b084      	sub	sp, #16
 81801a0:	af00      	add	r7, sp, #0
********************************************************************************/
	CosmOS_SpinlockStateType spinlockState;
	CosmOS_BufferStateType bufferState;
	CosmOS_MutexStateType mutexState;

	cosmosApi_deviceIO_togglePin(GPIOF, GPIO_PIN_11); //Timing measurement with logic analyzer, pls dont remove
 81801a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81801a6:	4921      	ldr	r1, [pc, #132]	; (818022c <Task_0_Core_1_Handler+0x90>)
 81801a8:	200c      	movs	r0, #12
 81801aa:	f782 fb88 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>

	bufferReader_cm4 = 100;
 81801ae:	4b20      	ldr	r3, [pc, #128]	; (8180230 <Task_0_Core_1_Handler+0x94>)
 81801b0:	2264      	movs	r2, #100	; 0x64
 81801b2:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_write_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 81801b4:	2204      	movs	r2, #4
 81801b6:	491e      	ldr	r1, [pc, #120]	; (8180230 <Task_0_Core_1_Handler+0x94>)
 81801b8:	200b      	movs	r0, #11
 81801ba:	f782 fb80 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 81801be:	4603      	mov	r3, r0
 81801c0:	73fb      	strb	r3, [r7, #15]

	bufferReader_cm4 = 0;
 81801c2:	4b1b      	ldr	r3, [pc, #108]	; (8180230 <Task_0_Core_1_Handler+0x94>)
 81801c4:	2200      	movs	r2, #0
 81801c6:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_read_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 81801c8:	2204      	movs	r2, #4
 81801ca:	4919      	ldr	r1, [pc, #100]	; (8180230 <Task_0_Core_1_Handler+0x94>)
 81801cc:	200a      	movs	r0, #10
 81801ce:	f782 fb76 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 81801d2:	4603      	mov	r3, r0
 81801d4:	73fb      	strb	r3, [r7, #15]

	spinlockState = cosmosApi_try_spinlock_uart_buffer_read();
 81801d6:	2001      	movs	r0, #1
 81801d8:	f782 fb55 	bl	8102886 <sysCalls_bitWidthType_ret_bitWidthType>
 81801dc:	4603      	mov	r3, r0
 81801de:	60bb      	str	r3, [r7, #8]
	spinlockState = cosmosApi_release_spinlock_uart_buffer_read();
 81801e0:	2002      	movs	r0, #2
 81801e2:	f782 fb50 	bl	8102886 <sysCalls_bitWidthType_ret_bitWidthType>
 81801e6:	4603      	mov	r3, r0
 81801e8:	60bb      	str	r3, [r7, #8]

	mutexState = mutex_getMutex(&resourcesMutex);
 81801ea:	4812      	ldr	r0, [pc, #72]	; (8180234 <Task_0_Core_1_Handler+0x98>)
 81801ec:	f781 fae4 	bl	81017b8 <mutex_getMutex>
 81801f0:	4603      	mov	r3, r0
 81801f2:	607b      	str	r3, [r7, #4]
	mutexState = mutex_releaseMutex(&resourcesMutex);
 81801f4:	480f      	ldr	r0, [pc, #60]	; (8180234 <Task_0_Core_1_Handler+0x98>)
 81801f6:	f781 fbe2 	bl	81019be <mutex_releaseMutex>
 81801fa:	4603      	mov	r3, r0
 81801fc:	607b      	str	r3, [r7, #4]

	if ( counter_cm4 > 100 )
 81801fe:	4b0e      	ldr	r3, [pc, #56]	; (8180238 <Task_0_Core_1_Handler+0x9c>)
 8180200:	681b      	ldr	r3, [r3, #0]
 8180202:	2b64      	cmp	r3, #100	; 0x64
 8180204:	dd03      	ble.n	818020e <Task_0_Core_1_Handler+0x72>
	{
		counter_cm4 = 0;
 8180206:	4b0c      	ldr	r3, [pc, #48]	; (8180238 <Task_0_Core_1_Handler+0x9c>)
 8180208:	2200      	movs	r2, #0
 818020a:	601a      	str	r2, [r3, #0]
 818020c:	e004      	b.n	8180218 <Task_0_Core_1_Handler+0x7c>
	}
	else
	{
		counter_cm4++;
 818020e:	4b0a      	ldr	r3, [pc, #40]	; (8180238 <Task_0_Core_1_Handler+0x9c>)
 8180210:	681b      	ldr	r3, [r3, #0]
 8180212:	3301      	adds	r3, #1
 8180214:	4a08      	ldr	r2, [pc, #32]	; (8180238 <Task_0_Core_1_Handler+0x9c>)
 8180216:	6013      	str	r3, [r2, #0]
	}
	cosmosApi_deviceIO_togglePin(GPIOF, GPIO_PIN_11); //Timing measurement with logic analyzer, pls dont remove
 8180218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 818021c:	4903      	ldr	r1, [pc, #12]	; (818022c <Task_0_Core_1_Handler+0x90>)
 818021e:	200c      	movs	r0, #12
 8180220:	f782 fb4d 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	__SUPRESS_UNUSED_VAR(bufferState);
/********************************************************************************
** stop_name =Task_0_Core_1_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8180224:	bf00      	nop
 8180226:	3710      	adds	r7, #16
 8180228:	46bd      	mov	sp, r7
 818022a:	bd80      	pop	{r7, pc}
 818022c:	58021400 	.word	0x58021400
 8180230:	1000180c 	.word	0x1000180c
 8180234:	10001810 	.word	0x10001810
 8180238:	10001808 	.word	0x10001808

0818023c <Thread_Core_1>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Thread_Core_1(void)
{
 818023c:	b580      	push	{r7, lr}
 818023e:	b084      	sub	sp, #16
 8180240:	af00      	add	r7, sp, #0
** start_name =Thread_Core_1
********************************************************************************/
	CosmOS_SleepStateType sleepState;
	CosmOS_MutexStateType mutexState;

	int *integerPointer = new int(100);
 8180242:	2004      	movs	r0, #4
 8180244:	f786 fb8a 	bl	810695c <_Znwj>
 8180248:	4603      	mov	r3, r0
 818024a:	2264      	movs	r2, #100	; 0x64
 818024c:	601a      	str	r2, [r3, #0]
 818024e:	60fb      	str	r3, [r7, #12]
	delete integerPointer;
 8180250:	68fb      	ldr	r3, [r7, #12]
 8180252:	2b00      	cmp	r3, #0
 8180254:	d003      	beq.n	818025e <Thread_Core_1+0x22>
 8180256:	2104      	movs	r1, #4
 8180258:	4618      	mov	r0, r3
 818025a:	f786 fb9e 	bl	810699a <_ZdlPvj>

	//sleepState = cosmosApi_thread_sleepMs(1);
	//cosmosApi_deviceIO_togglePin(GPIOB, GPIO_PIN_0); //GREEN LED

	mutexState = mutex_getMutex(&resourcesMutex);
 818025e:	480f      	ldr	r0, [pc, #60]	; (818029c <Thread_Core_1+0x60>)
 8180260:	f781 faaa 	bl	81017b8 <mutex_getMutex>
 8180264:	4603      	mov	r3, r0
 8180266:	60bb      	str	r3, [r7, #8]
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 8180268:	2210      	movs	r2, #16
 818026a:	490d      	ldr	r1, [pc, #52]	; (81802a0 <Thread_Core_1+0x64>)
 818026c:	200c      	movs	r0, #12
 818026e:	f782 fb26 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	sleepState = cosmosApi_thread_sleepMs(10);
 8180272:	210a      	movs	r1, #10
 8180274:	2013      	movs	r0, #19
 8180276:	f782 fb13 	bl	81028a0 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
 818027a:	4603      	mov	r3, r0
 818027c:	71fb      	strb	r3, [r7, #7]
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 818027e:	2210      	movs	r2, #16
 8180280:	4907      	ldr	r1, [pc, #28]	; (81802a0 <Thread_Core_1+0x64>)
 8180282:	200c      	movs	r0, #12
 8180284:	f782 fb1b 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	mutexState = mutex_releaseMutex(&resourcesMutex);
 8180288:	4804      	ldr	r0, [pc, #16]	; (818029c <Thread_Core_1+0x60>)
 818028a:	f781 fb98 	bl	81019be <mutex_releaseMutex>
 818028e:	4603      	mov	r3, r0
 8180290:	60bb      	str	r3, [r7, #8]
	__SUPRESS_UNUSED_VAR(sleepState);
/********************************************************************************
** stop_name =Thread_Core_1
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8180292:	bf00      	nop
 8180294:	3710      	adds	r7, #16
 8180296:	46bd      	mov	sp, r7
 8180298:	bd80      	pop	{r7, pc}
 818029a:	bf00      	nop
 818029c:	10001810 	.word	0x10001810
 81802a0:	58020000 	.word	0x58020000

081802a4 <Thread_mutex_test_CM4>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Thread_mutex_test_CM4(void)
{
 81802a4:	b580      	push	{r7, lr}
 81802a6:	b082      	sub	sp, #8
 81802a8:	af00      	add	r7, sp, #0
** start_name =Thread_mutex_test_CM4
********************************************************************************/
	CosmOS_MutexStateType mutexState;
	CosmOS_SleepStateType sleepState;

	mutexState = mutex_getMutex(&resourcesMutex);
 81802aa:	4812      	ldr	r0, [pc, #72]	; (81802f4 <Thread_mutex_test_CM4+0x50>)
 81802ac:	f781 fa84 	bl	81017b8 <mutex_getMutex>
 81802b0:	4603      	mov	r3, r0
 81802b2:	607b      	str	r3, [r7, #4]
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 81802b4:	2210      	movs	r2, #16
 81802b6:	4910      	ldr	r1, [pc, #64]	; (81802f8 <Thread_mutex_test_CM4+0x54>)
 81802b8:	200c      	movs	r0, #12
 81802ba:	f782 fb00 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	sleepState = cosmosApi_thread_sleepMs(100);
 81802be:	2164      	movs	r1, #100	; 0x64
 81802c0:	2013      	movs	r0, #19
 81802c2:	f782 faed 	bl	81028a0 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
 81802c6:	4603      	mov	r3, r0
 81802c8:	70fb      	strb	r3, [r7, #3]
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 81802ca:	2210      	movs	r2, #16
 81802cc:	490a      	ldr	r1, [pc, #40]	; (81802f8 <Thread_mutex_test_CM4+0x54>)
 81802ce:	200c      	movs	r0, #12
 81802d0:	f782 faf5 	bl	81028be <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	mutexState = mutex_releaseMutex(&resourcesMutex);
 81802d4:	4807      	ldr	r0, [pc, #28]	; (81802f4 <Thread_mutex_test_CM4+0x50>)
 81802d6:	f781 fb72 	bl	81019be <mutex_releaseMutex>
 81802da:	4603      	mov	r3, r0
 81802dc:	607b      	str	r3, [r7, #4]
	sleepState = cosmosApi_thread_sleepMs(500);
 81802de:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 81802e2:	2013      	movs	r0, #19
 81802e4:	f782 fadc 	bl	81028a0 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
 81802e8:	4603      	mov	r3, r0
 81802ea:	70fb      	strb	r3, [r7, #3]
	__SUPRESS_UNUSED_VAR(sleepState);
/********************************************************************************
** stop_name =Thread_mutex_test_CM4
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 81802ec:	bf00      	nop
 81802ee:	3708      	adds	r7, #8
 81802f0:	46bd      	mov	sp, r7
 81802f2:	bd80      	pop	{r7, pc}
 81802f4:	10001810 	.word	0x10001810
 81802f8:	58020000 	.word	0x58020000

Disassembly of section .text:

08104000 <__do_global_dtors_aux>:
 8104000:	b510      	push	{r4, lr}
 8104002:	4c05      	ldr	r4, [pc, #20]	; (8104018 <_e_os_section_funcs+0x18>)
 8104004:	7823      	ldrb	r3, [r4, #0]
 8104006:	b933      	cbnz	r3, 8104016 <__do_global_dtors_aux+0x16>
 8104008:	4b04      	ldr	r3, [pc, #16]	; (810401c <_e_os_section_funcs+0x1c>)
 810400a:	b113      	cbz	r3, 8104012 <__do_global_dtors_aux+0x12>
 810400c:	4804      	ldr	r0, [pc, #16]	; (8104020 <_e_os_section_funcs+0x20>)
 810400e:	f3af 8000 	nop.w
 8104012:	2301      	movs	r3, #1
 8104014:	7023      	strb	r3, [r4, #0]
 8104016:	bd10      	pop	{r4, pc}
 8104018:	10002074 	.word	0x10002074
 810401c:	00000000 	.word	0x00000000
 8104020:	08106adc 	.word	0x08106adc

08104024 <frame_dummy>:
 8104024:	b508      	push	{r3, lr}
 8104026:	4b03      	ldr	r3, [pc, #12]	; (8104034 <frame_dummy+0x10>)
 8104028:	b11b      	cbz	r3, 8104032 <frame_dummy+0xe>
 810402a:	4903      	ldr	r1, [pc, #12]	; (8104038 <frame_dummy+0x14>)
 810402c:	4803      	ldr	r0, [pc, #12]	; (810403c <frame_dummy+0x18>)
 810402e:	f3af 8000 	nop.w
 8104032:	bd08      	pop	{r3, pc}
 8104034:	00000000 	.word	0x00000000
 8104038:	10002078 	.word	0x10002078
 810403c:	08106adc 	.word	0x08106adc

08104040 <selfrel_offset31>:
 8104040:	6803      	ldr	r3, [r0, #0]
 8104042:	005a      	lsls	r2, r3, #1
 8104044:	bf4c      	ite	mi
 8104046:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 810404a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 810404e:	4418      	add	r0, r3
 8104050:	4770      	bx	lr
 8104052:	bf00      	nop

08104054 <search_EIT_table>:
 8104054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8104058:	b329      	cbz	r1, 81040a6 <search_EIT_table+0x52>
 810405a:	1e4f      	subs	r7, r1, #1
 810405c:	4604      	mov	r4, r0
 810405e:	4615      	mov	r5, r2
 8104060:	463e      	mov	r6, r7
 8104062:	f04f 0800 	mov.w	r8, #0
 8104066:	eb08 0106 	add.w	r1, r8, r6
 810406a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 810406e:	1049      	asrs	r1, r1, #1
 8104070:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8104074:	4648      	mov	r0, r9
 8104076:	f7ff ffe3 	bl	8104040 <selfrel_offset31>
 810407a:	4603      	mov	r3, r0
 810407c:	00c8      	lsls	r0, r1, #3
 810407e:	3008      	adds	r0, #8
 8104080:	428f      	cmp	r7, r1
 8104082:	4420      	add	r0, r4
 8104084:	d009      	beq.n	810409a <search_EIT_table+0x46>
 8104086:	42ab      	cmp	r3, r5
 8104088:	d809      	bhi.n	810409e <search_EIT_table+0x4a>
 810408a:	f7ff ffd9 	bl	8104040 <selfrel_offset31>
 810408e:	3801      	subs	r0, #1
 8104090:	42a8      	cmp	r0, r5
 8104092:	d20a      	bcs.n	81040aa <search_EIT_table+0x56>
 8104094:	f101 0801 	add.w	r8, r1, #1
 8104098:	e7e5      	b.n	8104066 <search_EIT_table+0x12>
 810409a:	42ab      	cmp	r3, r5
 810409c:	d905      	bls.n	81040aa <search_EIT_table+0x56>
 810409e:	4588      	cmp	r8, r1
 81040a0:	d001      	beq.n	81040a6 <search_EIT_table+0x52>
 81040a2:	1e4e      	subs	r6, r1, #1
 81040a4:	e7df      	b.n	8104066 <search_EIT_table+0x12>
 81040a6:	f04f 0900 	mov.w	r9, #0
 81040aa:	4648      	mov	r0, r9
 81040ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

081040b0 <__gnu_unwind_get_pr_addr>:
 81040b0:	2801      	cmp	r0, #1
 81040b2:	d007      	beq.n	81040c4 <__gnu_unwind_get_pr_addr+0x14>
 81040b4:	2802      	cmp	r0, #2
 81040b6:	d007      	beq.n	81040c8 <__gnu_unwind_get_pr_addr+0x18>
 81040b8:	4b04      	ldr	r3, [pc, #16]	; (81040cc <__gnu_unwind_get_pr_addr+0x1c>)
 81040ba:	2800      	cmp	r0, #0
 81040bc:	bf0c      	ite	eq
 81040be:	4618      	moveq	r0, r3
 81040c0:	2000      	movne	r0, #0
 81040c2:	4770      	bx	lr
 81040c4:	4802      	ldr	r0, [pc, #8]	; (81040d0 <__gnu_unwind_get_pr_addr+0x20>)
 81040c6:	4770      	bx	lr
 81040c8:	4802      	ldr	r0, [pc, #8]	; (81040d4 <__gnu_unwind_get_pr_addr+0x24>)
 81040ca:	4770      	bx	lr
 81040cc:	08104775 	.word	0x08104775
 81040d0:	08104779 	.word	0x08104779
 81040d4:	0810477d 	.word	0x0810477d

081040d8 <get_eit_entry>:
 81040d8:	b530      	push	{r4, r5, lr}
 81040da:	4b23      	ldr	r3, [pc, #140]	; (8104168 <get_eit_entry+0x90>)
 81040dc:	b083      	sub	sp, #12
 81040de:	4604      	mov	r4, r0
 81040e0:	1e8d      	subs	r5, r1, #2
 81040e2:	b33b      	cbz	r3, 8104134 <get_eit_entry+0x5c>
 81040e4:	a901      	add	r1, sp, #4
 81040e6:	4628      	mov	r0, r5
 81040e8:	f3af 8000 	nop.w
 81040ec:	b1e8      	cbz	r0, 810412a <get_eit_entry+0x52>
 81040ee:	9901      	ldr	r1, [sp, #4]
 81040f0:	462a      	mov	r2, r5
 81040f2:	f7ff ffaf 	bl	8104054 <search_EIT_table>
 81040f6:	4601      	mov	r1, r0
 81040f8:	b1b8      	cbz	r0, 810412a <get_eit_entry+0x52>
 81040fa:	f7ff ffa1 	bl	8104040 <selfrel_offset31>
 81040fe:	684b      	ldr	r3, [r1, #4]
 8104100:	64a0      	str	r0, [r4, #72]	; 0x48
 8104102:	2b01      	cmp	r3, #1
 8104104:	d02b      	beq.n	810415e <get_eit_entry+0x86>
 8104106:	2b00      	cmp	r3, #0
 8104108:	f101 0004 	add.w	r0, r1, #4
 810410c:	db23      	blt.n	8104156 <get_eit_entry+0x7e>
 810410e:	f7ff ff97 	bl	8104040 <selfrel_offset31>
 8104112:	2300      	movs	r3, #0
 8104114:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8104118:	6803      	ldr	r3, [r0, #0]
 810411a:	2b00      	cmp	r3, #0
 810411c:	db10      	blt.n	8104140 <get_eit_entry+0x68>
 810411e:	f7ff ff8f 	bl	8104040 <selfrel_offset31>
 8104122:	6120      	str	r0, [r4, #16]
 8104124:	2000      	movs	r0, #0
 8104126:	b003      	add	sp, #12
 8104128:	bd30      	pop	{r4, r5, pc}
 810412a:	2300      	movs	r3, #0
 810412c:	2009      	movs	r0, #9
 810412e:	6123      	str	r3, [r4, #16]
 8104130:	b003      	add	sp, #12
 8104132:	bd30      	pop	{r4, r5, pc}
 8104134:	490d      	ldr	r1, [pc, #52]	; (810416c <get_eit_entry+0x94>)
 8104136:	480e      	ldr	r0, [pc, #56]	; (8104170 <get_eit_entry+0x98>)
 8104138:	1a09      	subs	r1, r1, r0
 810413a:	10c9      	asrs	r1, r1, #3
 810413c:	9101      	str	r1, [sp, #4]
 810413e:	e7d7      	b.n	81040f0 <get_eit_entry+0x18>
 8104140:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8104144:	f7ff ffb4 	bl	81040b0 <__gnu_unwind_get_pr_addr>
 8104148:	2800      	cmp	r0, #0
 810414a:	6120      	str	r0, [r4, #16]
 810414c:	bf14      	ite	ne
 810414e:	2000      	movne	r0, #0
 8104150:	2009      	moveq	r0, #9
 8104152:	b003      	add	sp, #12
 8104154:	bd30      	pop	{r4, r5, pc}
 8104156:	2301      	movs	r3, #1
 8104158:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 810415c:	e7dc      	b.n	8104118 <get_eit_entry+0x40>
 810415e:	2300      	movs	r3, #0
 8104160:	6123      	str	r3, [r4, #16]
 8104162:	2005      	movs	r0, #5
 8104164:	e7df      	b.n	8104126 <get_eit_entry+0x4e>
 8104166:	bf00      	nop
 8104168:	00000000 	.word	0x00000000
 810416c:	08106c98 	.word	0x08106c98
 8104170:	08106bb0 	.word	0x08106bb0

08104174 <restore_non_core_regs>:
 8104174:	6803      	ldr	r3, [r0, #0]
 8104176:	07da      	lsls	r2, r3, #31
 8104178:	b510      	push	{r4, lr}
 810417a:	4604      	mov	r4, r0
 810417c:	d406      	bmi.n	810418c <restore_non_core_regs+0x18>
 810417e:	079b      	lsls	r3, r3, #30
 8104180:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8104184:	d509      	bpl.n	810419a <restore_non_core_regs+0x26>
 8104186:	f000 fc4b 	bl	8104a20 <__gnu_Unwind_Restore_VFP_D>
 810418a:	6823      	ldr	r3, [r4, #0]
 810418c:	0759      	lsls	r1, r3, #29
 810418e:	d509      	bpl.n	81041a4 <restore_non_core_regs+0x30>
 8104190:	071a      	lsls	r2, r3, #28
 8104192:	d50e      	bpl.n	81041b2 <restore_non_core_regs+0x3e>
 8104194:	06db      	lsls	r3, r3, #27
 8104196:	d513      	bpl.n	81041c0 <restore_non_core_regs+0x4c>
 8104198:	bd10      	pop	{r4, pc}
 810419a:	f000 fc39 	bl	8104a10 <__gnu_Unwind_Restore_VFP>
 810419e:	6823      	ldr	r3, [r4, #0]
 81041a0:	0759      	lsls	r1, r3, #29
 81041a2:	d4f5      	bmi.n	8104190 <restore_non_core_regs+0x1c>
 81041a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 81041a8:	f000 fc42 	bl	8104a30 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 81041ac:	6823      	ldr	r3, [r4, #0]
 81041ae:	071a      	lsls	r2, r3, #28
 81041b0:	d4f0      	bmi.n	8104194 <restore_non_core_regs+0x20>
 81041b2:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 81041b6:	f000 fc43 	bl	8104a40 <__gnu_Unwind_Restore_WMMXD>
 81041ba:	6823      	ldr	r3, [r4, #0]
 81041bc:	06db      	lsls	r3, r3, #27
 81041be:	d4eb      	bmi.n	8104198 <restore_non_core_regs+0x24>
 81041c0:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 81041c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81041c8:	f000 bc7e 	b.w	8104ac8 <__gnu_Unwind_Restore_WMMXC>

081041cc <_Unwind_decode_typeinfo_ptr.isra.0>:
 81041cc:	4603      	mov	r3, r0
 81041ce:	6800      	ldr	r0, [r0, #0]
 81041d0:	b100      	cbz	r0, 81041d4 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 81041d2:	4418      	add	r0, r3
 81041d4:	4770      	bx	lr
 81041d6:	bf00      	nop

081041d8 <__gnu_unwind_24bit.isra.0>:
 81041d8:	2009      	movs	r0, #9
 81041da:	4770      	bx	lr

081041dc <_Unwind_DebugHook>:
 81041dc:	4770      	bx	lr
 81041de:	bf00      	nop

081041e0 <unwind_phase2>:
 81041e0:	b570      	push	{r4, r5, r6, lr}
 81041e2:	4604      	mov	r4, r0
 81041e4:	460e      	mov	r6, r1
 81041e6:	6c31      	ldr	r1, [r6, #64]	; 0x40
 81041e8:	4620      	mov	r0, r4
 81041ea:	f7ff ff75 	bl	81040d8 <get_eit_entry>
 81041ee:	4605      	mov	r5, r0
 81041f0:	b988      	cbnz	r0, 8104216 <unwind_phase2+0x36>
 81041f2:	6c33      	ldr	r3, [r6, #64]	; 0x40
 81041f4:	6163      	str	r3, [r4, #20]
 81041f6:	4632      	mov	r2, r6
 81041f8:	6923      	ldr	r3, [r4, #16]
 81041fa:	4621      	mov	r1, r4
 81041fc:	2001      	movs	r0, #1
 81041fe:	4798      	blx	r3
 8104200:	2808      	cmp	r0, #8
 8104202:	d0f0      	beq.n	81041e6 <unwind_phase2+0x6>
 8104204:	2807      	cmp	r0, #7
 8104206:	d106      	bne.n	8104216 <unwind_phase2+0x36>
 8104208:	4628      	mov	r0, r5
 810420a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 810420c:	f7ff ffe6 	bl	81041dc <_Unwind_DebugHook>
 8104210:	1d30      	adds	r0, r6, #4
 8104212:	f000 fbf1 	bl	81049f8 <__restore_core_regs>
 8104216:	f002 fbf5 	bl	8106a04 <abort>
 810421a:	bf00      	nop

0810421c <unwind_phase2_forced>:
 810421c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8104220:	1d0d      	adds	r5, r1, #4
 8104222:	4606      	mov	r6, r0
 8104224:	4614      	mov	r4, r2
 8104226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104228:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 810422c:	f10d 0c0c 	add.w	ip, sp, #12
 8104230:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8104234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104236:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 810423a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810423c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8104240:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8104244:	ad02      	add	r5, sp, #8
 8104246:	68f7      	ldr	r7, [r6, #12]
 8104248:	f8d6 8018 	ldr.w	r8, [r6, #24]
 810424c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8104250:	2300      	movs	r3, #0
 8104252:	602b      	str	r3, [r5, #0]
 8104254:	e021      	b.n	810429a <unwind_phase2_forced+0x7e>
 8104256:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8104258:	6173      	str	r3, [r6, #20]
 810425a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 810425e:	4629      	mov	r1, r5
 8104260:	a87a      	add	r0, sp, #488	; 0x1e8
 8104262:	f002 fbd6 	bl	8106a12 <memcpy>
 8104266:	6933      	ldr	r3, [r6, #16]
 8104268:	aa7a      	add	r2, sp, #488	; 0x1e8
 810426a:	4631      	mov	r1, r6
 810426c:	4650      	mov	r0, sl
 810426e:	4798      	blx	r3
 8104270:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8104272:	e9cd 5800 	strd	r5, r8, [sp]
 8104276:	4621      	mov	r1, r4
 8104278:	646b      	str	r3, [r5, #68]	; 0x44
 810427a:	4681      	mov	r9, r0
 810427c:	4633      	mov	r3, r6
 810427e:	4632      	mov	r2, r6
 8104280:	2001      	movs	r0, #1
 8104282:	47b8      	blx	r7
 8104284:	4604      	mov	r4, r0
 8104286:	b9e8      	cbnz	r0, 81042c4 <unwind_phase2_forced+0xa8>
 8104288:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 810428c:	a97a      	add	r1, sp, #488	; 0x1e8
 810428e:	4628      	mov	r0, r5
 8104290:	f002 fbbf 	bl	8106a12 <memcpy>
 8104294:	f1b9 0f08 	cmp.w	r9, #8
 8104298:	d11b      	bne.n	81042d2 <unwind_phase2_forced+0xb6>
 810429a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 810429c:	4630      	mov	r0, r6
 810429e:	f7ff ff1b 	bl	81040d8 <get_eit_entry>
 81042a2:	3409      	adds	r4, #9
 81042a4:	fa5f fa84 	uxtb.w	sl, r4
 81042a8:	4681      	mov	r9, r0
 81042aa:	2800      	cmp	r0, #0
 81042ac:	d0d3      	beq.n	8104256 <unwind_phase2_forced+0x3a>
 81042ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
 81042b0:	f04a 0110 	orr.w	r1, sl, #16
 81042b4:	e9cd 5800 	strd	r5, r8, [sp]
 81042b8:	4632      	mov	r2, r6
 81042ba:	646b      	str	r3, [r5, #68]	; 0x44
 81042bc:	2001      	movs	r0, #1
 81042be:	4633      	mov	r3, r6
 81042c0:	47b8      	blx	r7
 81042c2:	b108      	cbz	r0, 81042c8 <unwind_phase2_forced+0xac>
 81042c4:	f04f 0909 	mov.w	r9, #9
 81042c8:	4648      	mov	r0, r9
 81042ca:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 81042ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81042d2:	f1b9 0f07 	cmp.w	r9, #7
 81042d6:	d1f5      	bne.n	81042c4 <unwind_phase2_forced+0xa8>
 81042d8:	4620      	mov	r0, r4
 81042da:	6c29      	ldr	r1, [r5, #64]	; 0x40
 81042dc:	f7ff ff7e 	bl	81041dc <_Unwind_DebugHook>
 81042e0:	a803      	add	r0, sp, #12
 81042e2:	f000 fb89 	bl	81049f8 <__restore_core_regs>
 81042e6:	bf00      	nop

081042e8 <_Unwind_GetCFA>:
 81042e8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 81042ea:	4770      	bx	lr

081042ec <__gnu_Unwind_RaiseException>:
 81042ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 81042ee:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 81042f0:	640b      	str	r3, [r1, #64]	; 0x40
 81042f2:	1d0e      	adds	r6, r1, #4
 81042f4:	460f      	mov	r7, r1
 81042f6:	4605      	mov	r5, r0
 81042f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 81042fa:	b0f9      	sub	sp, #484	; 0x1e4
 81042fc:	ac01      	add	r4, sp, #4
 81042fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104300:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8104302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104304:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8104306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104308:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 810430c:	f04f 36ff 	mov.w	r6, #4294967295
 8104310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8104314:	9600      	str	r6, [sp, #0]
 8104316:	e006      	b.n	8104326 <__gnu_Unwind_RaiseException+0x3a>
 8104318:	692b      	ldr	r3, [r5, #16]
 810431a:	466a      	mov	r2, sp
 810431c:	4629      	mov	r1, r5
 810431e:	4798      	blx	r3
 8104320:	2808      	cmp	r0, #8
 8104322:	4604      	mov	r4, r0
 8104324:	d108      	bne.n	8104338 <__gnu_Unwind_RaiseException+0x4c>
 8104326:	9910      	ldr	r1, [sp, #64]	; 0x40
 8104328:	4628      	mov	r0, r5
 810432a:	f7ff fed5 	bl	81040d8 <get_eit_entry>
 810432e:	2800      	cmp	r0, #0
 8104330:	d0f2      	beq.n	8104318 <__gnu_Unwind_RaiseException+0x2c>
 8104332:	2009      	movs	r0, #9
 8104334:	b079      	add	sp, #484	; 0x1e4
 8104336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8104338:	4668      	mov	r0, sp
 810433a:	f7ff ff1b 	bl	8104174 <restore_non_core_regs>
 810433e:	2c06      	cmp	r4, #6
 8104340:	d1f7      	bne.n	8104332 <__gnu_Unwind_RaiseException+0x46>
 8104342:	4639      	mov	r1, r7
 8104344:	4628      	mov	r0, r5
 8104346:	f7ff ff4b 	bl	81041e0 <unwind_phase2>
 810434a:	bf00      	nop

0810434c <__gnu_Unwind_ForcedUnwind>:
 810434c:	b430      	push	{r4, r5}
 810434e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8104350:	60c1      	str	r1, [r0, #12]
 8104352:	6182      	str	r2, [r0, #24]
 8104354:	4619      	mov	r1, r3
 8104356:	641d      	str	r5, [r3, #64]	; 0x40
 8104358:	2200      	movs	r2, #0
 810435a:	bc30      	pop	{r4, r5}
 810435c:	e75e      	b.n	810421c <unwind_phase2_forced>
 810435e:	bf00      	nop

08104360 <__gnu_Unwind_Resume>:
 8104360:	b570      	push	{r4, r5, r6, lr}
 8104362:	68c6      	ldr	r6, [r0, #12]
 8104364:	6943      	ldr	r3, [r0, #20]
 8104366:	640b      	str	r3, [r1, #64]	; 0x40
 8104368:	b9ae      	cbnz	r6, 8104396 <__gnu_Unwind_Resume+0x36>
 810436a:	6903      	ldr	r3, [r0, #16]
 810436c:	460a      	mov	r2, r1
 810436e:	4604      	mov	r4, r0
 8104370:	460d      	mov	r5, r1
 8104372:	4601      	mov	r1, r0
 8104374:	2002      	movs	r0, #2
 8104376:	4798      	blx	r3
 8104378:	2807      	cmp	r0, #7
 810437a:	d005      	beq.n	8104388 <__gnu_Unwind_Resume+0x28>
 810437c:	2808      	cmp	r0, #8
 810437e:	d10f      	bne.n	81043a0 <__gnu_Unwind_Resume+0x40>
 8104380:	4629      	mov	r1, r5
 8104382:	4620      	mov	r0, r4
 8104384:	f7ff ff2c 	bl	81041e0 <unwind_phase2>
 8104388:	4630      	mov	r0, r6
 810438a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 810438c:	f7ff ff26 	bl	81041dc <_Unwind_DebugHook>
 8104390:	1d28      	adds	r0, r5, #4
 8104392:	f000 fb31 	bl	81049f8 <__restore_core_regs>
 8104396:	2201      	movs	r2, #1
 8104398:	f7ff ff40 	bl	810421c <unwind_phase2_forced>
 810439c:	f002 fb32 	bl	8106a04 <abort>
 81043a0:	f002 fb30 	bl	8106a04 <abort>

081043a4 <__gnu_Unwind_Resume_or_Rethrow>:
 81043a4:	68c2      	ldr	r2, [r0, #12]
 81043a6:	b11a      	cbz	r2, 81043b0 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 81043a8:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 81043aa:	640a      	str	r2, [r1, #64]	; 0x40
 81043ac:	2200      	movs	r2, #0
 81043ae:	e735      	b.n	810421c <unwind_phase2_forced>
 81043b0:	e79c      	b.n	81042ec <__gnu_Unwind_RaiseException>
 81043b2:	bf00      	nop

081043b4 <_Unwind_Complete>:
 81043b4:	4770      	bx	lr
 81043b6:	bf00      	nop

081043b8 <_Unwind_DeleteException>:
 81043b8:	6883      	ldr	r3, [r0, #8]
 81043ba:	4601      	mov	r1, r0
 81043bc:	b10b      	cbz	r3, 81043c2 <_Unwind_DeleteException+0xa>
 81043be:	2001      	movs	r0, #1
 81043c0:	4718      	bx	r3
 81043c2:	4770      	bx	lr

081043c4 <_Unwind_VRS_Get>:
 81043c4:	2901      	cmp	r1, #1
 81043c6:	d012      	beq.n	81043ee <_Unwind_VRS_Get+0x2a>
 81043c8:	d809      	bhi.n	81043de <_Unwind_VRS_Get+0x1a>
 81043ca:	b973      	cbnz	r3, 81043ea <_Unwind_VRS_Get+0x26>
 81043cc:	2a0f      	cmp	r2, #15
 81043ce:	d80c      	bhi.n	81043ea <_Unwind_VRS_Get+0x26>
 81043d0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 81043d4:	4618      	mov	r0, r3
 81043d6:	6853      	ldr	r3, [r2, #4]
 81043d8:	9a00      	ldr	r2, [sp, #0]
 81043da:	6013      	str	r3, [r2, #0]
 81043dc:	4770      	bx	lr
 81043de:	3903      	subs	r1, #3
 81043e0:	2901      	cmp	r1, #1
 81043e2:	bf94      	ite	ls
 81043e4:	2001      	movls	r0, #1
 81043e6:	2002      	movhi	r0, #2
 81043e8:	4770      	bx	lr
 81043ea:	2002      	movs	r0, #2
 81043ec:	4770      	bx	lr
 81043ee:	4608      	mov	r0, r1
 81043f0:	4770      	bx	lr
 81043f2:	bf00      	nop

081043f4 <_Unwind_GetGR>:
 81043f4:	b510      	push	{r4, lr}
 81043f6:	b084      	sub	sp, #16
 81043f8:	2300      	movs	r3, #0
 81043fa:	ac03      	add	r4, sp, #12
 81043fc:	460a      	mov	r2, r1
 81043fe:	9400      	str	r4, [sp, #0]
 8104400:	4619      	mov	r1, r3
 8104402:	f7ff ffdf 	bl	81043c4 <_Unwind_VRS_Get>
 8104406:	9803      	ldr	r0, [sp, #12]
 8104408:	b004      	add	sp, #16
 810440a:	bd10      	pop	{r4, pc}

0810440c <_Unwind_VRS_Set>:
 810440c:	2901      	cmp	r1, #1
 810440e:	d012      	beq.n	8104436 <_Unwind_VRS_Set+0x2a>
 8104410:	d809      	bhi.n	8104426 <_Unwind_VRS_Set+0x1a>
 8104412:	b973      	cbnz	r3, 8104432 <_Unwind_VRS_Set+0x26>
 8104414:	2a0f      	cmp	r2, #15
 8104416:	d80c      	bhi.n	8104432 <_Unwind_VRS_Set+0x26>
 8104418:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 810441c:	9a00      	ldr	r2, [sp, #0]
 810441e:	6812      	ldr	r2, [r2, #0]
 8104420:	6042      	str	r2, [r0, #4]
 8104422:	4618      	mov	r0, r3
 8104424:	4770      	bx	lr
 8104426:	3903      	subs	r1, #3
 8104428:	2901      	cmp	r1, #1
 810442a:	bf94      	ite	ls
 810442c:	2001      	movls	r0, #1
 810442e:	2002      	movhi	r0, #2
 8104430:	4770      	bx	lr
 8104432:	2002      	movs	r0, #2
 8104434:	4770      	bx	lr
 8104436:	4608      	mov	r0, r1
 8104438:	4770      	bx	lr
 810443a:	bf00      	nop

0810443c <_Unwind_SetGR>:
 810443c:	b510      	push	{r4, lr}
 810443e:	b084      	sub	sp, #16
 8104440:	2300      	movs	r3, #0
 8104442:	ac03      	add	r4, sp, #12
 8104444:	9203      	str	r2, [sp, #12]
 8104446:	9400      	str	r4, [sp, #0]
 8104448:	460a      	mov	r2, r1
 810444a:	4619      	mov	r1, r3
 810444c:	f7ff ffde 	bl	810440c <_Unwind_VRS_Set>
 8104450:	b004      	add	sp, #16
 8104452:	bd10      	pop	{r4, pc}

08104454 <__gnu_Unwind_Backtrace>:
 8104454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8104456:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8104458:	6413      	str	r3, [r2, #64]	; 0x40
 810445a:	1d15      	adds	r5, r2, #4
 810445c:	468c      	mov	ip, r1
 810445e:	4606      	mov	r6, r0
 8104460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104462:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8104466:	ac17      	add	r4, sp, #92	; 0x5c
 8104468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810446a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810446c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810446e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8104470:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8104472:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8104476:	f04f 37ff 	mov.w	r7, #4294967295
 810447a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 810447e:	4665      	mov	r5, ip
 8104480:	9716      	str	r7, [sp, #88]	; 0x58
 8104482:	e010      	b.n	81044a6 <__gnu_Unwind_Backtrace+0x52>
 8104484:	f7ff ffda 	bl	810443c <_Unwind_SetGR>
 8104488:	4629      	mov	r1, r5
 810448a:	a816      	add	r0, sp, #88	; 0x58
 810448c:	47b0      	blx	r6
 810448e:	4603      	mov	r3, r0
 8104490:	aa16      	add	r2, sp, #88	; 0x58
 8104492:	4669      	mov	r1, sp
 8104494:	2008      	movs	r0, #8
 8104496:	b983      	cbnz	r3, 81044ba <__gnu_Unwind_Backtrace+0x66>
 8104498:	9b04      	ldr	r3, [sp, #16]
 810449a:	4798      	blx	r3
 810449c:	2805      	cmp	r0, #5
 810449e:	4604      	mov	r4, r0
 81044a0:	d00c      	beq.n	81044bc <__gnu_Unwind_Backtrace+0x68>
 81044a2:	2809      	cmp	r0, #9
 81044a4:	d009      	beq.n	81044ba <__gnu_Unwind_Backtrace+0x66>
 81044a6:	9926      	ldr	r1, [sp, #152]	; 0x98
 81044a8:	4668      	mov	r0, sp
 81044aa:	f7ff fe15 	bl	81040d8 <get_eit_entry>
 81044ae:	4603      	mov	r3, r0
 81044b0:	466a      	mov	r2, sp
 81044b2:	210c      	movs	r1, #12
 81044b4:	a816      	add	r0, sp, #88	; 0x58
 81044b6:	2b00      	cmp	r3, #0
 81044b8:	d0e4      	beq.n	8104484 <__gnu_Unwind_Backtrace+0x30>
 81044ba:	2409      	movs	r4, #9
 81044bc:	a816      	add	r0, sp, #88	; 0x58
 81044be:	f7ff fe59 	bl	8104174 <restore_non_core_regs>
 81044c2:	4620      	mov	r0, r4
 81044c4:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 81044c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81044ca:	bf00      	nop

081044cc <__gnu_unwind_pr_common>:
 81044cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81044d0:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 81044d2:	b089      	sub	sp, #36	; 0x24
 81044d4:	460d      	mov	r5, r1
 81044d6:	f854 1b04 	ldr.w	r1, [r4], #4
 81044da:	9406      	str	r4, [sp, #24]
 81044dc:	4617      	mov	r7, r2
 81044de:	f000 0803 	and.w	r8, r0, #3
 81044e2:	461e      	mov	r6, r3
 81044e4:	2b00      	cmp	r3, #0
 81044e6:	d079      	beq.n	81045dc <__gnu_unwind_pr_common+0x110>
 81044e8:	0c0b      	lsrs	r3, r1, #16
 81044ea:	b2da      	uxtb	r2, r3
 81044ec:	0409      	lsls	r1, r1, #16
 81044ee:	f88d 301d 	strb.w	r3, [sp, #29]
 81044f2:	2302      	movs	r3, #2
 81044f4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 81044f8:	9105      	str	r1, [sp, #20]
 81044fa:	f88d 301c 	strb.w	r3, [sp, #28]
 81044fe:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8104500:	f1b8 0f02 	cmp.w	r8, #2
 8104504:	bf08      	it	eq
 8104506:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8104508:	f013 0301 	ands.w	r3, r3, #1
 810450c:	d00c      	beq.n	8104528 <__gnu_unwind_pr_common+0x5c>
 810450e:	4638      	mov	r0, r7
 8104510:	a905      	add	r1, sp, #20
 8104512:	f000 fb73 	bl	8104bfc <__gnu_unwind_execute>
 8104516:	b918      	cbnz	r0, 8104520 <__gnu_unwind_pr_common+0x54>
 8104518:	2008      	movs	r0, #8
 810451a:	b009      	add	sp, #36	; 0x24
 810451c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104520:	2009      	movs	r0, #9
 8104522:	b009      	add	sp, #36	; 0x24
 8104524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104528:	f8d4 a000 	ldr.w	sl, [r4]
 810452c:	f1ba 0f00 	cmp.w	sl, #0
 8104530:	d0ed      	beq.n	810450e <__gnu_unwind_pr_common+0x42>
 8104532:	9301      	str	r3, [sp, #4]
 8104534:	f000 0308 	and.w	r3, r0, #8
 8104538:	9302      	str	r3, [sp, #8]
 810453a:	2e02      	cmp	r6, #2
 810453c:	d04a      	beq.n	81045d4 <__gnu_unwind_pr_common+0x108>
 810453e:	f8b4 a000 	ldrh.w	sl, [r4]
 8104542:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8104546:	3404      	adds	r4, #4
 8104548:	6caa      	ldr	r2, [r5, #72]	; 0x48
 810454a:	f029 0b01 	bic.w	fp, r9, #1
 810454e:	210f      	movs	r1, #15
 8104550:	4638      	mov	r0, r7
 8104552:	4493      	add	fp, r2
 8104554:	f7ff ff4e 	bl	81043f4 <_Unwind_GetGR>
 8104558:	4583      	cmp	fp, r0
 810455a:	d839      	bhi.n	81045d0 <__gnu_unwind_pr_common+0x104>
 810455c:	f02a 0201 	bic.w	r2, sl, #1
 8104560:	445a      	add	r2, fp
 8104562:	4282      	cmp	r2, r0
 8104564:	bf94      	ite	ls
 8104566:	2000      	movls	r0, #0
 8104568:	2001      	movhi	r0, #1
 810456a:	ea4f 0349 	mov.w	r3, r9, lsl #1
 810456e:	f003 0302 	and.w	r3, r3, #2
 8104572:	f00a 0a01 	and.w	sl, sl, #1
 8104576:	ea43 030a 	orr.w	r3, r3, sl
 810457a:	2b01      	cmp	r3, #1
 810457c:	d049      	beq.n	8104612 <__gnu_unwind_pr_common+0x146>
 810457e:	2b02      	cmp	r3, #2
 8104580:	d032      	beq.n	81045e8 <__gnu_unwind_pr_common+0x11c>
 8104582:	2b00      	cmp	r3, #0
 8104584:	d1cc      	bne.n	8104520 <__gnu_unwind_pr_common+0x54>
 8104586:	f1b8 0f00 	cmp.w	r8, #0
 810458a:	d002      	beq.n	8104592 <__gnu_unwind_pr_common+0xc6>
 810458c:	2800      	cmp	r0, #0
 810458e:	f040 80cd 	bne.w	810472c <__gnu_unwind_pr_common+0x260>
 8104592:	3404      	adds	r4, #4
 8104594:	f8d4 a000 	ldr.w	sl, [r4]
 8104598:	f1ba 0f00 	cmp.w	sl, #0
 810459c:	d1cd      	bne.n	810453a <__gnu_unwind_pr_common+0x6e>
 810459e:	a905      	add	r1, sp, #20
 81045a0:	4638      	mov	r0, r7
 81045a2:	f000 fb2b 	bl	8104bfc <__gnu_unwind_execute>
 81045a6:	2800      	cmp	r0, #0
 81045a8:	d1ba      	bne.n	8104520 <__gnu_unwind_pr_common+0x54>
 81045aa:	9b01      	ldr	r3, [sp, #4]
 81045ac:	2b00      	cmp	r3, #0
 81045ae:	d0b3      	beq.n	8104518 <__gnu_unwind_pr_common+0x4c>
 81045b0:	210f      	movs	r1, #15
 81045b2:	4638      	mov	r0, r7
 81045b4:	f7ff ff1e 	bl	81043f4 <_Unwind_GetGR>
 81045b8:	210e      	movs	r1, #14
 81045ba:	4602      	mov	r2, r0
 81045bc:	4638      	mov	r0, r7
 81045be:	f7ff ff3d 	bl	810443c <_Unwind_SetGR>
 81045c2:	4638      	mov	r0, r7
 81045c4:	4a6a      	ldr	r2, [pc, #424]	; (8104770 <__gnu_unwind_pr_common+0x2a4>)
 81045c6:	210f      	movs	r1, #15
 81045c8:	f7ff ff38 	bl	810443c <_Unwind_SetGR>
 81045cc:	2007      	movs	r0, #7
 81045ce:	e7a8      	b.n	8104522 <__gnu_unwind_pr_common+0x56>
 81045d0:	2000      	movs	r0, #0
 81045d2:	e7ca      	b.n	810456a <__gnu_unwind_pr_common+0x9e>
 81045d4:	f8d4 9004 	ldr.w	r9, [r4, #4]
 81045d8:	3408      	adds	r4, #8
 81045da:	e7b5      	b.n	8104548 <__gnu_unwind_pr_common+0x7c>
 81045dc:	0209      	lsls	r1, r1, #8
 81045de:	2303      	movs	r3, #3
 81045e0:	9105      	str	r1, [sp, #20]
 81045e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 81045e6:	e78a      	b.n	81044fe <__gnu_unwind_pr_common+0x32>
 81045e8:	6823      	ldr	r3, [r4, #0]
 81045ea:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 81045ee:	f1b8 0f00 	cmp.w	r8, #0
 81045f2:	d145      	bne.n	8104680 <__gnu_unwind_pr_common+0x1b4>
 81045f4:	b128      	cbz	r0, 8104602 <__gnu_unwind_pr_common+0x136>
 81045f6:	9a02      	ldr	r2, [sp, #8]
 81045f8:	2a00      	cmp	r2, #0
 81045fa:	d05c      	beq.n	81046b6 <__gnu_unwind_pr_common+0x1ea>
 81045fc:	f1bb 0f00 	cmp.w	fp, #0
 8104600:	d074      	beq.n	81046ec <__gnu_unwind_pr_common+0x220>
 8104602:	2b00      	cmp	r3, #0
 8104604:	da00      	bge.n	8104608 <__gnu_unwind_pr_common+0x13c>
 8104606:	3404      	adds	r4, #4
 8104608:	f10b 0b01 	add.w	fp, fp, #1
 810460c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8104610:	e7c0      	b.n	8104594 <__gnu_unwind_pr_common+0xc8>
 8104612:	f1b8 0f00 	cmp.w	r8, #0
 8104616:	d119      	bne.n	810464c <__gnu_unwind_pr_common+0x180>
 8104618:	b1b0      	cbz	r0, 8104648 <__gnu_unwind_pr_common+0x17c>
 810461a:	e9d4 2300 	ldrd	r2, r3, [r4]
 810461e:	1c99      	adds	r1, r3, #2
 8104620:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8104624:	f43f af7c 	beq.w	8104520 <__gnu_unwind_pr_common+0x54>
 8104628:	f105 0158 	add.w	r1, r5, #88	; 0x58
 810462c:	3301      	adds	r3, #1
 810462e:	9104      	str	r1, [sp, #16]
 8104630:	f000 8090 	beq.w	8104754 <__gnu_unwind_pr_common+0x288>
 8104634:	1d20      	adds	r0, r4, #4
 8104636:	f7ff fdc9 	bl	81041cc <_Unwind_decode_typeinfo_ptr.isra.0>
 810463a:	ab04      	add	r3, sp, #16
 810463c:	4601      	mov	r1, r0
 810463e:	4628      	mov	r0, r5
 8104640:	f3af 8000 	nop.w
 8104644:	2800      	cmp	r0, #0
 8104646:	d15b      	bne.n	8104700 <__gnu_unwind_pr_common+0x234>
 8104648:	3408      	adds	r4, #8
 810464a:	e7a3      	b.n	8104594 <__gnu_unwind_pr_common+0xc8>
 810464c:	210d      	movs	r1, #13
 810464e:	4638      	mov	r0, r7
 8104650:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8104654:	f7ff fece 	bl	81043f4 <_Unwind_GetGR>
 8104658:	4581      	cmp	r9, r0
 810465a:	d1f5      	bne.n	8104648 <__gnu_unwind_pr_common+0x17c>
 810465c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 810465e:	429c      	cmp	r4, r3
 8104660:	d1f2      	bne.n	8104648 <__gnu_unwind_pr_common+0x17c>
 8104662:	4620      	mov	r0, r4
 8104664:	f7ff fcec 	bl	8104040 <selfrel_offset31>
 8104668:	210f      	movs	r1, #15
 810466a:	4602      	mov	r2, r0
 810466c:	4638      	mov	r0, r7
 810466e:	f7ff fee5 	bl	810443c <_Unwind_SetGR>
 8104672:	4638      	mov	r0, r7
 8104674:	462a      	mov	r2, r5
 8104676:	2100      	movs	r1, #0
 8104678:	f7ff fee0 	bl	810443c <_Unwind_SetGR>
 810467c:	2007      	movs	r0, #7
 810467e:	e750      	b.n	8104522 <__gnu_unwind_pr_common+0x56>
 8104680:	210d      	movs	r1, #13
 8104682:	4638      	mov	r0, r7
 8104684:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8104688:	f7ff feb4 	bl	81043f4 <_Unwind_GetGR>
 810468c:	4581      	cmp	r9, r0
 810468e:	d001      	beq.n	8104694 <__gnu_unwind_pr_common+0x1c8>
 8104690:	6823      	ldr	r3, [r4, #0]
 8104692:	e7b6      	b.n	8104602 <__gnu_unwind_pr_common+0x136>
 8104694:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8104696:	429c      	cmp	r4, r3
 8104698:	d1fa      	bne.n	8104690 <__gnu_unwind_pr_common+0x1c4>
 810469a:	2204      	movs	r2, #4
 810469c:	2100      	movs	r1, #0
 810469e:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 81046a2:	18a3      	adds	r3, r4, r2
 81046a4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 81046a8:	636b      	str	r3, [r5, #52]	; 0x34
 81046aa:	6823      	ldr	r3, [r4, #0]
 81046ac:	428b      	cmp	r3, r1
 81046ae:	db59      	blt.n	8104764 <__gnu_unwind_pr_common+0x298>
 81046b0:	2301      	movs	r3, #1
 81046b2:	9301      	str	r3, [sp, #4]
 81046b4:	e7a8      	b.n	8104608 <__gnu_unwind_pr_common+0x13c>
 81046b6:	f105 0358 	add.w	r3, r5, #88	; 0x58
 81046ba:	f8cd 800c 	str.w	r8, [sp, #12]
 81046be:	f104 0a04 	add.w	sl, r4, #4
 81046c2:	46b0      	mov	r8, r6
 81046c4:	4691      	mov	r9, r2
 81046c6:	461e      	mov	r6, r3
 81046c8:	e00d      	b.n	81046e6 <__gnu_unwind_pr_common+0x21a>
 81046ca:	9604      	str	r6, [sp, #16]
 81046cc:	f7ff fd7e 	bl	81041cc <_Unwind_decode_typeinfo_ptr.isra.0>
 81046d0:	ab04      	add	r3, sp, #16
 81046d2:	4601      	mov	r1, r0
 81046d4:	2200      	movs	r2, #0
 81046d6:	4628      	mov	r0, r5
 81046d8:	f3af 8000 	nop.w
 81046dc:	f109 0901 	add.w	r9, r9, #1
 81046e0:	f10a 0a04 	add.w	sl, sl, #4
 81046e4:	b9e8      	cbnz	r0, 8104722 <__gnu_unwind_pr_common+0x256>
 81046e6:	45d9      	cmp	r9, fp
 81046e8:	4650      	mov	r0, sl
 81046ea:	d1ee      	bne.n	81046ca <__gnu_unwind_pr_common+0x1fe>
 81046ec:	4638      	mov	r0, r7
 81046ee:	210d      	movs	r1, #13
 81046f0:	f7ff fe80 	bl	81043f4 <_Unwind_GetGR>
 81046f4:	9b04      	ldr	r3, [sp, #16]
 81046f6:	6228      	str	r0, [r5, #32]
 81046f8:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 81046fc:	2006      	movs	r0, #6
 81046fe:	e710      	b.n	8104522 <__gnu_unwind_pr_common+0x56>
 8104700:	4681      	mov	r9, r0
 8104702:	210d      	movs	r1, #13
 8104704:	4638      	mov	r0, r7
 8104706:	f7ff fe75 	bl	81043f4 <_Unwind_GetGR>
 810470a:	f1b9 0f02 	cmp.w	r9, #2
 810470e:	6228      	str	r0, [r5, #32]
 8104710:	d125      	bne.n	810475e <__gnu_unwind_pr_common+0x292>
 8104712:	462b      	mov	r3, r5
 8104714:	9a04      	ldr	r2, [sp, #16]
 8104716:	f843 2f2c 	str.w	r2, [r3, #44]!
 810471a:	626b      	str	r3, [r5, #36]	; 0x24
 810471c:	62ac      	str	r4, [r5, #40]	; 0x28
 810471e:	2006      	movs	r0, #6
 8104720:	e6ff      	b.n	8104522 <__gnu_unwind_pr_common+0x56>
 8104722:	4646      	mov	r6, r8
 8104724:	6823      	ldr	r3, [r4, #0]
 8104726:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810472a:	e76a      	b.n	8104602 <__gnu_unwind_pr_common+0x136>
 810472c:	4620      	mov	r0, r4
 810472e:	f7ff fc87 	bl	8104040 <selfrel_offset31>
 8104732:	3404      	adds	r4, #4
 8104734:	4602      	mov	r2, r0
 8104736:	63ac      	str	r4, [r5, #56]	; 0x38
 8104738:	4628      	mov	r0, r5
 810473a:	4614      	mov	r4, r2
 810473c:	f3af 8000 	nop.w
 8104740:	2800      	cmp	r0, #0
 8104742:	f43f aeed 	beq.w	8104520 <__gnu_unwind_pr_common+0x54>
 8104746:	4638      	mov	r0, r7
 8104748:	4622      	mov	r2, r4
 810474a:	210f      	movs	r1, #15
 810474c:	f7ff fe76 	bl	810443c <_Unwind_SetGR>
 8104750:	2007      	movs	r0, #7
 8104752:	e6e6      	b.n	8104522 <__gnu_unwind_pr_common+0x56>
 8104754:	4638      	mov	r0, r7
 8104756:	210d      	movs	r1, #13
 8104758:	f7ff fe4c 	bl	81043f4 <_Unwind_GetGR>
 810475c:	6228      	str	r0, [r5, #32]
 810475e:	9b04      	ldr	r3, [sp, #16]
 8104760:	626b      	str	r3, [r5, #36]	; 0x24
 8104762:	e7db      	b.n	810471c <__gnu_unwind_pr_common+0x250>
 8104764:	f10b 0001 	add.w	r0, fp, #1
 8104768:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 810476c:	e77a      	b.n	8104664 <__gnu_unwind_pr_common+0x198>
 810476e:	bf00      	nop
 8104770:	00000000 	.word	0x00000000

08104774 <__aeabi_unwind_cpp_pr0>:
 8104774:	2300      	movs	r3, #0
 8104776:	e6a9      	b.n	81044cc <__gnu_unwind_pr_common>

08104778 <__aeabi_unwind_cpp_pr1>:
 8104778:	2301      	movs	r3, #1
 810477a:	e6a7      	b.n	81044cc <__gnu_unwind_pr_common>

0810477c <__aeabi_unwind_cpp_pr2>:
 810477c:	2302      	movs	r3, #2
 810477e:	e6a5      	b.n	81044cc <__gnu_unwind_pr_common>

08104780 <_Unwind_VRS_Pop>:
 8104780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8104784:	4606      	mov	r6, r0
 8104786:	b0c3      	sub	sp, #268	; 0x10c
 8104788:	4615      	mov	r5, r2
 810478a:	461c      	mov	r4, r3
 810478c:	2904      	cmp	r1, #4
 810478e:	f200 80b9 	bhi.w	8104904 <_Unwind_VRS_Pop+0x184>
 8104792:	e8df f001 	tbb	[pc, r1]
 8104796:	539a      	.short	0x539a
 8104798:	29b7      	.short	0x29b7
 810479a:	03          	.byte	0x03
 810479b:	00          	.byte	0x00
 810479c:	2c00      	cmp	r4, #0
 810479e:	f040 80b1 	bne.w	8104904 <_Unwind_VRS_Pop+0x184>
 81047a2:	2a10      	cmp	r2, #16
 81047a4:	f200 80ae 	bhi.w	8104904 <_Unwind_VRS_Pop+0x184>
 81047a8:	6803      	ldr	r3, [r0, #0]
 81047aa:	06d8      	lsls	r0, r3, #27
 81047ac:	f100 80f3 	bmi.w	8104996 <_Unwind_VRS_Pop+0x216>
 81047b0:	af20      	add	r7, sp, #128	; 0x80
 81047b2:	4638      	mov	r0, r7
 81047b4:	f000 f992 	bl	8104adc <__gnu_Unwind_Save_WMMXC>
 81047b8:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 81047ba:	2300      	movs	r3, #0
 81047bc:	2401      	movs	r4, #1
 81047be:	fa04 f203 	lsl.w	r2, r4, r3
 81047c2:	422a      	tst	r2, r5
 81047c4:	4601      	mov	r1, r0
 81047c6:	d004      	beq.n	81047d2 <_Unwind_VRS_Pop+0x52>
 81047c8:	f851 2b04 	ldr.w	r2, [r1], #4
 81047cc:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 81047d0:	4608      	mov	r0, r1
 81047d2:	3301      	adds	r3, #1
 81047d4:	2b04      	cmp	r3, #4
 81047d6:	d1f2      	bne.n	81047be <_Unwind_VRS_Pop+0x3e>
 81047d8:	63b0      	str	r0, [r6, #56]	; 0x38
 81047da:	4638      	mov	r0, r7
 81047dc:	f000 f974 	bl	8104ac8 <__gnu_Unwind_Restore_WMMXC>
 81047e0:	2000      	movs	r0, #0
 81047e2:	b043      	add	sp, #268	; 0x10c
 81047e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81047e8:	2c03      	cmp	r4, #3
 81047ea:	f040 808b 	bne.w	8104904 <_Unwind_VRS_Pop+0x184>
 81047ee:	b294      	uxth	r4, r2
 81047f0:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 81047f4:	2b10      	cmp	r3, #16
 81047f6:	ea4f 4512 	mov.w	r5, r2, lsr #16
 81047fa:	f200 8083 	bhi.w	8104904 <_Unwind_VRS_Pop+0x184>
 81047fe:	6803      	ldr	r3, [r0, #0]
 8104800:	071f      	lsls	r7, r3, #28
 8104802:	f100 80d0 	bmi.w	81049a6 <_Unwind_VRS_Pop+0x226>
 8104806:	af20      	add	r7, sp, #128	; 0x80
 8104808:	4638      	mov	r0, r7
 810480a:	f000 f93b 	bl	8104a84 <__gnu_Unwind_Save_WMMXD>
 810480e:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8104812:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8104814:	b154      	cbz	r4, 810482c <_Unwind_VRS_Pop+0xac>
 8104816:	460b      	mov	r3, r1
 8104818:	1ae8      	subs	r0, r5, r3
 810481a:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 810481e:	00e4      	lsls	r4, r4, #3
 8104820:	581a      	ldr	r2, [r3, r0]
 8104822:	f843 2b04 	str.w	r2, [r3], #4
 8104826:	428b      	cmp	r3, r1
 8104828:	d1fa      	bne.n	8104820 <_Unwind_VRS_Pop+0xa0>
 810482a:	4425      	add	r5, r4
 810482c:	4638      	mov	r0, r7
 810482e:	63b5      	str	r5, [r6, #56]	; 0x38
 8104830:	f000 f906 	bl	8104a40 <__gnu_Unwind_Restore_WMMXD>
 8104834:	2000      	movs	r0, #0
 8104836:	b043      	add	sp, #268	; 0x10c
 8104838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810483c:	2c01      	cmp	r4, #1
 810483e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8104842:	b295      	uxth	r5, r2
 8104844:	d05a      	beq.n	81048fc <_Unwind_VRS_Pop+0x17c>
 8104846:	2c05      	cmp	r4, #5
 8104848:	d15c      	bne.n	8104904 <_Unwind_VRS_Pop+0x184>
 810484a:	eb08 0905 	add.w	r9, r8, r5
 810484e:	f1b9 0f20 	cmp.w	r9, #32
 8104852:	d857      	bhi.n	8104904 <_Unwind_VRS_Pop+0x184>
 8104854:	f1b8 0f0f 	cmp.w	r8, #15
 8104858:	d977      	bls.n	810494a <_Unwind_VRS_Pop+0x1ca>
 810485a:	46a9      	mov	r9, r5
 810485c:	2d00      	cmp	r5, #0
 810485e:	f040 8088 	bne.w	8104972 <_Unwind_VRS_Pop+0x1f2>
 8104862:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8104864:	b36d      	cbz	r5, 81048c2 <_Unwind_VRS_Pop+0x142>
 8104866:	af20      	add	r7, sp, #128	; 0x80
 8104868:	f04f 0900 	mov.w	r9, #0
 810486c:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8104870:	3f04      	subs	r7, #4
 8104872:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8104876:	f853 1b04 	ldr.w	r1, [r3], #4
 810487a:	f847 1f04 	str.w	r1, [r7, #4]!
 810487e:	42ab      	cmp	r3, r5
 8104880:	d1f9      	bne.n	8104876 <_Unwind_VRS_Pop+0xf6>
 8104882:	f1b9 0f00 	cmp.w	r9, #0
 8104886:	d00f      	beq.n	81048a8 <_Unwind_VRS_Pop+0x128>
 8104888:	466f      	mov	r7, sp
 810488a:	4641      	mov	r1, r8
 810488c:	2910      	cmp	r1, #16
 810488e:	bf38      	it	cc
 8104890:	2110      	movcc	r1, #16
 8104892:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8104896:	3984      	subs	r1, #132	; 0x84
 8104898:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 810489c:	f853 0b04 	ldr.w	r0, [r3], #4
 81048a0:	f841 0f04 	str.w	r0, [r1, #4]!
 81048a4:	42ab      	cmp	r3, r5
 81048a6:	d1f9      	bne.n	810489c <_Unwind_VRS_Pop+0x11c>
 81048a8:	2c01      	cmp	r4, #1
 81048aa:	f000 8084 	beq.w	81049b6 <_Unwind_VRS_Pop+0x236>
 81048ae:	f1b8 0f0f 	cmp.w	r8, #15
 81048b2:	63b5      	str	r5, [r6, #56]	; 0x38
 81048b4:	d945      	bls.n	8104942 <_Unwind_VRS_Pop+0x1c2>
 81048b6:	f1b9 0f00 	cmp.w	r9, #0
 81048ba:	d002      	beq.n	81048c2 <_Unwind_VRS_Pop+0x142>
 81048bc:	4668      	mov	r0, sp
 81048be:	f000 f8b7 	bl	8104a30 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 81048c2:	2000      	movs	r0, #0
 81048c4:	b043      	add	sp, #268	; 0x10c
 81048c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81048ca:	b9dc      	cbnz	r4, 8104904 <_Unwind_VRS_Pop+0x184>
 81048cc:	6b87      	ldr	r7, [r0, #56]	; 0x38
 81048ce:	4623      	mov	r3, r4
 81048d0:	2001      	movs	r0, #1
 81048d2:	b294      	uxth	r4, r2
 81048d4:	f106 0c04 	add.w	ip, r6, #4
 81048d8:	fa00 f203 	lsl.w	r2, r0, r3
 81048dc:	4222      	tst	r2, r4
 81048de:	4639      	mov	r1, r7
 81048e0:	d004      	beq.n	81048ec <_Unwind_VRS_Pop+0x16c>
 81048e2:	f851 2b04 	ldr.w	r2, [r1], #4
 81048e6:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 81048ea:	460f      	mov	r7, r1
 81048ec:	3301      	adds	r3, #1
 81048ee:	2b10      	cmp	r3, #16
 81048f0:	d1f2      	bne.n	81048d8 <_Unwind_VRS_Pop+0x158>
 81048f2:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 81048f6:	d1e4      	bne.n	81048c2 <_Unwind_VRS_Pop+0x142>
 81048f8:	63b7      	str	r7, [r6, #56]	; 0x38
 81048fa:	e004      	b.n	8104906 <_Unwind_VRS_Pop+0x186>
 81048fc:	eb08 0305 	add.w	r3, r8, r5
 8104900:	2b10      	cmp	r3, #16
 8104902:	d903      	bls.n	810490c <_Unwind_VRS_Pop+0x18c>
 8104904:	2002      	movs	r0, #2
 8104906:	b043      	add	sp, #268	; 0x10c
 8104908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810490c:	f1b8 0f0f 	cmp.w	r8, #15
 8104910:	d8f8      	bhi.n	8104904 <_Unwind_VRS_Pop+0x184>
 8104912:	6833      	ldr	r3, [r6, #0]
 8104914:	07da      	lsls	r2, r3, #31
 8104916:	d506      	bpl.n	8104926 <_Unwind_VRS_Pop+0x1a6>
 8104918:	4630      	mov	r0, r6
 810491a:	f023 0303 	bic.w	r3, r3, #3
 810491e:	f840 3b48 	str.w	r3, [r0], #72
 8104922:	f000 f879 	bl	8104a18 <__gnu_Unwind_Save_VFP>
 8104926:	af20      	add	r7, sp, #128	; 0x80
 8104928:	4638      	mov	r0, r7
 810492a:	f000 f875 	bl	8104a18 <__gnu_Unwind_Save_VFP>
 810492e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8104930:	2d00      	cmp	r5, #0
 8104932:	d199      	bne.n	8104868 <_Unwind_VRS_Pop+0xe8>
 8104934:	461d      	mov	r5, r3
 8104936:	3504      	adds	r5, #4
 8104938:	63b5      	str	r5, [r6, #56]	; 0x38
 810493a:	4638      	mov	r0, r7
 810493c:	f000 f868 	bl	8104a10 <__gnu_Unwind_Restore_VFP>
 8104940:	e7bf      	b.n	81048c2 <_Unwind_VRS_Pop+0x142>
 8104942:	a820      	add	r0, sp, #128	; 0x80
 8104944:	f000 f86c 	bl	8104a20 <__gnu_Unwind_Restore_VFP_D>
 8104948:	e7b5      	b.n	81048b6 <_Unwind_VRS_Pop+0x136>
 810494a:	f1b9 0f10 	cmp.w	r9, #16
 810494e:	d940      	bls.n	81049d2 <_Unwind_VRS_Pop+0x252>
 8104950:	f1a9 0910 	sub.w	r9, r9, #16
 8104954:	6833      	ldr	r3, [r6, #0]
 8104956:	07d9      	lsls	r1, r3, #31
 8104958:	d508      	bpl.n	810496c <_Unwind_VRS_Pop+0x1ec>
 810495a:	f023 0301 	bic.w	r3, r3, #1
 810495e:	4630      	mov	r0, r6
 8104960:	f043 0302 	orr.w	r3, r3, #2
 8104964:	f840 3b48 	str.w	r3, [r0], #72
 8104968:	f000 f85e 	bl	8104a28 <__gnu_Unwind_Save_VFP_D>
 810496c:	f1b9 0f00 	cmp.w	r9, #0
 8104970:	d032      	beq.n	81049d8 <_Unwind_VRS_Pop+0x258>
 8104972:	6833      	ldr	r3, [r6, #0]
 8104974:	075a      	lsls	r2, r3, #29
 8104976:	d420      	bmi.n	81049ba <_Unwind_VRS_Pop+0x23a>
 8104978:	f1b8 0f0f 	cmp.w	r8, #15
 810497c:	d925      	bls.n	81049ca <_Unwind_VRS_Pop+0x24a>
 810497e:	466f      	mov	r7, sp
 8104980:	4638      	mov	r0, r7
 8104982:	f1c8 0510 	rsb	r5, r8, #16
 8104986:	f000 f857 	bl	8104a38 <__gnu_Unwind_Save_VFP_D_16_to_31>
 810498a:	2d00      	cmp	r5, #0
 810498c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 810498e:	f77f af7c 	ble.w	810488a <_Unwind_VRS_Pop+0x10a>
 8104992:	af20      	add	r7, sp, #128	; 0x80
 8104994:	e76a      	b.n	810486c <_Unwind_VRS_Pop+0xec>
 8104996:	f023 0310 	bic.w	r3, r3, #16
 810499a:	6033      	str	r3, [r6, #0]
 810499c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 81049a0:	f000 f89c 	bl	8104adc <__gnu_Unwind_Save_WMMXC>
 81049a4:	e704      	b.n	81047b0 <_Unwind_VRS_Pop+0x30>
 81049a6:	f023 0308 	bic.w	r3, r3, #8
 81049aa:	6003      	str	r3, [r0, #0]
 81049ac:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 81049b0:	f000 f868 	bl	8104a84 <__gnu_Unwind_Save_WMMXD>
 81049b4:	e727      	b.n	8104806 <_Unwind_VRS_Pop+0x86>
 81049b6:	af20      	add	r7, sp, #128	; 0x80
 81049b8:	e7bd      	b.n	8104936 <_Unwind_VRS_Pop+0x1b6>
 81049ba:	4630      	mov	r0, r6
 81049bc:	f023 0304 	bic.w	r3, r3, #4
 81049c0:	f840 3bd0 	str.w	r3, [r0], #208
 81049c4:	f000 f838 	bl	8104a38 <__gnu_Unwind_Save_VFP_D_16_to_31>
 81049c8:	e7d6      	b.n	8104978 <_Unwind_VRS_Pop+0x1f8>
 81049ca:	a820      	add	r0, sp, #128	; 0x80
 81049cc:	f000 f82c 	bl	8104a28 <__gnu_Unwind_Save_VFP_D>
 81049d0:	e7d5      	b.n	810497e <_Unwind_VRS_Pop+0x1fe>
 81049d2:	f04f 0900 	mov.w	r9, #0
 81049d6:	e7bd      	b.n	8104954 <_Unwind_VRS_Pop+0x1d4>
 81049d8:	f1b8 0f0f 	cmp.w	r8, #15
 81049dc:	f63f af41 	bhi.w	8104862 <_Unwind_VRS_Pop+0xe2>
 81049e0:	af20      	add	r7, sp, #128	; 0x80
 81049e2:	4638      	mov	r0, r7
 81049e4:	f000 f820 	bl	8104a28 <__gnu_Unwind_Save_VFP_D>
 81049e8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 81049ea:	2d00      	cmp	r5, #0
 81049ec:	f47f af3c 	bne.w	8104868 <_Unwind_VRS_Pop+0xe8>
 81049f0:	4638      	mov	r0, r7
 81049f2:	f000 f815 	bl	8104a20 <__gnu_Unwind_Restore_VFP_D>
 81049f6:	e764      	b.n	81048c2 <_Unwind_VRS_Pop+0x142>

081049f8 <__restore_core_regs>:
 81049f8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 81049fc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8104a00:	469c      	mov	ip, r3
 8104a02:	46a6      	mov	lr, r4
 8104a04:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8104a08:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8104a0c:	46e5      	mov	sp, ip
 8104a0e:	bd00      	pop	{pc}

08104a10 <__gnu_Unwind_Restore_VFP>:
 8104a10:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8104a14:	4770      	bx	lr
 8104a16:	bf00      	nop

08104a18 <__gnu_Unwind_Save_VFP>:
 8104a18:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8104a1c:	4770      	bx	lr
 8104a1e:	bf00      	nop

08104a20 <__gnu_Unwind_Restore_VFP_D>:
 8104a20:	ec90 0b20 	vldmia	r0, {d0-d15}
 8104a24:	4770      	bx	lr
 8104a26:	bf00      	nop

08104a28 <__gnu_Unwind_Save_VFP_D>:
 8104a28:	ec80 0b20 	vstmia	r0, {d0-d15}
 8104a2c:	4770      	bx	lr
 8104a2e:	bf00      	nop

08104a30 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8104a30:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8104a34:	4770      	bx	lr
 8104a36:	bf00      	nop

08104a38 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8104a38:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8104a3c:	4770      	bx	lr
 8104a3e:	bf00      	nop

08104a40 <__gnu_Unwind_Restore_WMMXD>:
 8104a40:	ecf0 0102 	ldfe	f0, [r0], #8
 8104a44:	ecf0 1102 	ldfe	f1, [r0], #8
 8104a48:	ecf0 2102 	ldfe	f2, [r0], #8
 8104a4c:	ecf0 3102 	ldfe	f3, [r0], #8
 8104a50:	ecf0 4102 	ldfe	f4, [r0], #8
 8104a54:	ecf0 5102 	ldfe	f5, [r0], #8
 8104a58:	ecf0 6102 	ldfe	f6, [r0], #8
 8104a5c:	ecf0 7102 	ldfe	f7, [r0], #8
 8104a60:	ecf0 8102 	ldfp	f0, [r0], #8
 8104a64:	ecf0 9102 	ldfp	f1, [r0], #8
 8104a68:	ecf0 a102 	ldfp	f2, [r0], #8
 8104a6c:	ecf0 b102 	ldfp	f3, [r0], #8
 8104a70:	ecf0 c102 	ldfp	f4, [r0], #8
 8104a74:	ecf0 d102 	ldfp	f5, [r0], #8
 8104a78:	ecf0 e102 	ldfp	f6, [r0], #8
 8104a7c:	ecf0 f102 	ldfp	f7, [r0], #8
 8104a80:	4770      	bx	lr
 8104a82:	bf00      	nop

08104a84 <__gnu_Unwind_Save_WMMXD>:
 8104a84:	ece0 0102 	stfe	f0, [r0], #8
 8104a88:	ece0 1102 	stfe	f1, [r0], #8
 8104a8c:	ece0 2102 	stfe	f2, [r0], #8
 8104a90:	ece0 3102 	stfe	f3, [r0], #8
 8104a94:	ece0 4102 	stfe	f4, [r0], #8
 8104a98:	ece0 5102 	stfe	f5, [r0], #8
 8104a9c:	ece0 6102 	stfe	f6, [r0], #8
 8104aa0:	ece0 7102 	stfe	f7, [r0], #8
 8104aa4:	ece0 8102 	stfp	f0, [r0], #8
 8104aa8:	ece0 9102 	stfp	f1, [r0], #8
 8104aac:	ece0 a102 	stfp	f2, [r0], #8
 8104ab0:	ece0 b102 	stfp	f3, [r0], #8
 8104ab4:	ece0 c102 	stfp	f4, [r0], #8
 8104ab8:	ece0 d102 	stfp	f5, [r0], #8
 8104abc:	ece0 e102 	stfp	f6, [r0], #8
 8104ac0:	ece0 f102 	stfp	f7, [r0], #8
 8104ac4:	4770      	bx	lr
 8104ac6:	bf00      	nop

08104ac8 <__gnu_Unwind_Restore_WMMXC>:
 8104ac8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8104acc:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8104ad0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8104ad4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8104ad8:	4770      	bx	lr
 8104ada:	bf00      	nop

08104adc <__gnu_Unwind_Save_WMMXC>:
 8104adc:	fca0 8101 	stc2	1, cr8, [r0], #4
 8104ae0:	fca0 9101 	stc2	1, cr9, [r0], #4
 8104ae4:	fca0 a101 	stc2	1, cr10, [r0], #4
 8104ae8:	fca0 b101 	stc2	1, cr11, [r0], #4
 8104aec:	4770      	bx	lr
 8104aee:	bf00      	nop

08104af0 <_Unwind_RaiseException>:
 8104af0:	46ec      	mov	ip, sp
 8104af2:	b500      	push	{lr}
 8104af4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8104af8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8104afc:	f04f 0300 	mov.w	r3, #0
 8104b00:	e92d 000c 	stmdb	sp!, {r2, r3}
 8104b04:	a901      	add	r1, sp, #4
 8104b06:	f7ff fbf1 	bl	81042ec <__gnu_Unwind_RaiseException>
 8104b0a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8104b0e:	b012      	add	sp, #72	; 0x48
 8104b10:	4770      	bx	lr
 8104b12:	bf00      	nop

08104b14 <_Unwind_Resume>:
 8104b14:	46ec      	mov	ip, sp
 8104b16:	b500      	push	{lr}
 8104b18:	e92d 5000 	stmdb	sp!, {ip, lr}
 8104b1c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8104b20:	f04f 0300 	mov.w	r3, #0
 8104b24:	e92d 000c 	stmdb	sp!, {r2, r3}
 8104b28:	a901      	add	r1, sp, #4
 8104b2a:	f7ff fc19 	bl	8104360 <__gnu_Unwind_Resume>
 8104b2e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8104b32:	b012      	add	sp, #72	; 0x48
 8104b34:	4770      	bx	lr
 8104b36:	bf00      	nop

08104b38 <_Unwind_Resume_or_Rethrow>:
 8104b38:	46ec      	mov	ip, sp
 8104b3a:	b500      	push	{lr}
 8104b3c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8104b40:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8104b44:	f04f 0300 	mov.w	r3, #0
 8104b48:	e92d 000c 	stmdb	sp!, {r2, r3}
 8104b4c:	a901      	add	r1, sp, #4
 8104b4e:	f7ff fc29 	bl	81043a4 <__gnu_Unwind_Resume_or_Rethrow>
 8104b52:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8104b56:	b012      	add	sp, #72	; 0x48
 8104b58:	4770      	bx	lr
 8104b5a:	bf00      	nop

08104b5c <_Unwind_ForcedUnwind>:
 8104b5c:	46ec      	mov	ip, sp
 8104b5e:	b500      	push	{lr}
 8104b60:	e92d 5000 	stmdb	sp!, {ip, lr}
 8104b64:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8104b68:	f04f 0300 	mov.w	r3, #0
 8104b6c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8104b70:	ab01      	add	r3, sp, #4
 8104b72:	f7ff fbeb 	bl	810434c <__gnu_Unwind_ForcedUnwind>
 8104b76:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8104b7a:	b012      	add	sp, #72	; 0x48
 8104b7c:	4770      	bx	lr
 8104b7e:	bf00      	nop

08104b80 <_Unwind_Backtrace>:
 8104b80:	46ec      	mov	ip, sp
 8104b82:	b500      	push	{lr}
 8104b84:	e92d 5000 	stmdb	sp!, {ip, lr}
 8104b88:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8104b8c:	f04f 0300 	mov.w	r3, #0
 8104b90:	e92d 000c 	stmdb	sp!, {r2, r3}
 8104b94:	aa01      	add	r2, sp, #4
 8104b96:	f7ff fc5d 	bl	8104454 <__gnu_Unwind_Backtrace>
 8104b9a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8104b9e:	b012      	add	sp, #72	; 0x48
 8104ba0:	4770      	bx	lr
 8104ba2:	bf00      	nop

08104ba4 <next_unwind_byte>:
 8104ba4:	7a02      	ldrb	r2, [r0, #8]
 8104ba6:	b97a      	cbnz	r2, 8104bc8 <next_unwind_byte+0x24>
 8104ba8:	7a43      	ldrb	r3, [r0, #9]
 8104baa:	b1a3      	cbz	r3, 8104bd6 <next_unwind_byte+0x32>
 8104bac:	6842      	ldr	r2, [r0, #4]
 8104bae:	3b01      	subs	r3, #1
 8104bb0:	b410      	push	{r4}
 8104bb2:	7243      	strb	r3, [r0, #9]
 8104bb4:	6813      	ldr	r3, [r2, #0]
 8104bb6:	2103      	movs	r1, #3
 8104bb8:	1d14      	adds	r4, r2, #4
 8104bba:	7201      	strb	r1, [r0, #8]
 8104bbc:	021a      	lsls	r2, r3, #8
 8104bbe:	6044      	str	r4, [r0, #4]
 8104bc0:	6002      	str	r2, [r0, #0]
 8104bc2:	bc10      	pop	{r4}
 8104bc4:	0e18      	lsrs	r0, r3, #24
 8104bc6:	4770      	bx	lr
 8104bc8:	6803      	ldr	r3, [r0, #0]
 8104bca:	3a01      	subs	r2, #1
 8104bcc:	7202      	strb	r2, [r0, #8]
 8104bce:	021a      	lsls	r2, r3, #8
 8104bd0:	6002      	str	r2, [r0, #0]
 8104bd2:	0e18      	lsrs	r0, r3, #24
 8104bd4:	4770      	bx	lr
 8104bd6:	20b0      	movs	r0, #176	; 0xb0
 8104bd8:	4770      	bx	lr
 8104bda:	bf00      	nop

08104bdc <_Unwind_GetGR.constprop.0>:
 8104bdc:	b500      	push	{lr}
 8104bde:	b085      	sub	sp, #20
 8104be0:	aa03      	add	r2, sp, #12
 8104be2:	2300      	movs	r3, #0
 8104be4:	9200      	str	r2, [sp, #0]
 8104be6:	4619      	mov	r1, r3
 8104be8:	220c      	movs	r2, #12
 8104bea:	f7ff fbeb 	bl	81043c4 <_Unwind_VRS_Get>
 8104bee:	9803      	ldr	r0, [sp, #12]
 8104bf0:	b005      	add	sp, #20
 8104bf2:	f85d fb04 	ldr.w	pc, [sp], #4
 8104bf6:	bf00      	nop

08104bf8 <unwind_UCB_from_context>:
 8104bf8:	e7f0      	b.n	8104bdc <_Unwind_GetGR.constprop.0>
 8104bfa:	bf00      	nop

08104bfc <__gnu_unwind_execute>:
 8104bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8104c00:	4605      	mov	r5, r0
 8104c02:	b085      	sub	sp, #20
 8104c04:	460e      	mov	r6, r1
 8104c06:	f04f 0800 	mov.w	r8, #0
 8104c0a:	4630      	mov	r0, r6
 8104c0c:	f7ff ffca 	bl	8104ba4 <next_unwind_byte>
 8104c10:	28b0      	cmp	r0, #176	; 0xb0
 8104c12:	4604      	mov	r4, r0
 8104c14:	f000 80b2 	beq.w	8104d7c <__gnu_unwind_execute+0x180>
 8104c18:	0607      	lsls	r7, r0, #24
 8104c1a:	d520      	bpl.n	8104c5e <__gnu_unwind_execute+0x62>
 8104c1c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8104c20:	2b80      	cmp	r3, #128	; 0x80
 8104c22:	d04d      	beq.n	8104cc0 <__gnu_unwind_execute+0xc4>
 8104c24:	2b90      	cmp	r3, #144	; 0x90
 8104c26:	d036      	beq.n	8104c96 <__gnu_unwind_execute+0x9a>
 8104c28:	2ba0      	cmp	r3, #160	; 0xa0
 8104c2a:	d060      	beq.n	8104cee <__gnu_unwind_execute+0xf2>
 8104c2c:	2bb0      	cmp	r3, #176	; 0xb0
 8104c2e:	d074      	beq.n	8104d1a <__gnu_unwind_execute+0x11e>
 8104c30:	2bc0      	cmp	r3, #192	; 0xc0
 8104c32:	f000 808b 	beq.w	8104d4c <__gnu_unwind_execute+0x150>
 8104c36:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8104c3a:	2bd0      	cmp	r3, #208	; 0xd0
 8104c3c:	d10b      	bne.n	8104c56 <__gnu_unwind_execute+0x5a>
 8104c3e:	f000 0207 	and.w	r2, r0, #7
 8104c42:	3201      	adds	r2, #1
 8104c44:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8104c48:	2305      	movs	r3, #5
 8104c4a:	2101      	movs	r1, #1
 8104c4c:	4628      	mov	r0, r5
 8104c4e:	f7ff fd97 	bl	8104780 <_Unwind_VRS_Pop>
 8104c52:	2800      	cmp	r0, #0
 8104c54:	d0d9      	beq.n	8104c0a <__gnu_unwind_execute+0xe>
 8104c56:	2009      	movs	r0, #9
 8104c58:	b005      	add	sp, #20
 8104c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8104c5e:	f10d 090c 	add.w	r9, sp, #12
 8104c62:	2300      	movs	r3, #0
 8104c64:	4619      	mov	r1, r3
 8104c66:	0087      	lsls	r7, r0, #2
 8104c68:	f8cd 9000 	str.w	r9, [sp]
 8104c6c:	220d      	movs	r2, #13
 8104c6e:	4628      	mov	r0, r5
 8104c70:	f7ff fba8 	bl	81043c4 <_Unwind_VRS_Get>
 8104c74:	b2ff      	uxtb	r7, r7
 8104c76:	9b03      	ldr	r3, [sp, #12]
 8104c78:	f8cd 9000 	str.w	r9, [sp]
 8104c7c:	3704      	adds	r7, #4
 8104c7e:	0660      	lsls	r0, r4, #25
 8104c80:	bf4c      	ite	mi
 8104c82:	1bdf      	submi	r7, r3, r7
 8104c84:	18ff      	addpl	r7, r7, r3
 8104c86:	2300      	movs	r3, #0
 8104c88:	4619      	mov	r1, r3
 8104c8a:	220d      	movs	r2, #13
 8104c8c:	4628      	mov	r0, r5
 8104c8e:	9703      	str	r7, [sp, #12]
 8104c90:	f7ff fbbc 	bl	810440c <_Unwind_VRS_Set>
 8104c94:	e7b9      	b.n	8104c0a <__gnu_unwind_execute+0xe>
 8104c96:	f000 030d 	and.w	r3, r0, #13
 8104c9a:	2b0d      	cmp	r3, #13
 8104c9c:	d0db      	beq.n	8104c56 <__gnu_unwind_execute+0x5a>
 8104c9e:	af03      	add	r7, sp, #12
 8104ca0:	2300      	movs	r3, #0
 8104ca2:	f000 020f 	and.w	r2, r0, #15
 8104ca6:	4619      	mov	r1, r3
 8104ca8:	9700      	str	r7, [sp, #0]
 8104caa:	4628      	mov	r0, r5
 8104cac:	f7ff fb8a 	bl	81043c4 <_Unwind_VRS_Get>
 8104cb0:	2300      	movs	r3, #0
 8104cb2:	9700      	str	r7, [sp, #0]
 8104cb4:	4619      	mov	r1, r3
 8104cb6:	220d      	movs	r2, #13
 8104cb8:	4628      	mov	r0, r5
 8104cba:	f7ff fba7 	bl	810440c <_Unwind_VRS_Set>
 8104cbe:	e7a4      	b.n	8104c0a <__gnu_unwind_execute+0xe>
 8104cc0:	4630      	mov	r0, r6
 8104cc2:	f7ff ff6f 	bl	8104ba4 <next_unwind_byte>
 8104cc6:	0224      	lsls	r4, r4, #8
 8104cc8:	4320      	orrs	r0, r4
 8104cca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8104cce:	d0c2      	beq.n	8104c56 <__gnu_unwind_execute+0x5a>
 8104cd0:	0104      	lsls	r4, r0, #4
 8104cd2:	2300      	movs	r3, #0
 8104cd4:	b2a2      	uxth	r2, r4
 8104cd6:	4619      	mov	r1, r3
 8104cd8:	4628      	mov	r0, r5
 8104cda:	f7ff fd51 	bl	8104780 <_Unwind_VRS_Pop>
 8104cde:	2800      	cmp	r0, #0
 8104ce0:	d1b9      	bne.n	8104c56 <__gnu_unwind_execute+0x5a>
 8104ce2:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8104ce6:	bf18      	it	ne
 8104ce8:	f04f 0801 	movne.w	r8, #1
 8104cec:	e78d      	b.n	8104c0a <__gnu_unwind_execute+0xe>
 8104cee:	43c2      	mvns	r2, r0
 8104cf0:	f002 0307 	and.w	r3, r2, #7
 8104cf4:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8104cf8:	411a      	asrs	r2, r3
 8104cfa:	0701      	lsls	r1, r0, #28
 8104cfc:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8104d00:	f04f 0300 	mov.w	r3, #0
 8104d04:	bf48      	it	mi
 8104d06:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8104d0a:	4619      	mov	r1, r3
 8104d0c:	4628      	mov	r0, r5
 8104d0e:	f7ff fd37 	bl	8104780 <_Unwind_VRS_Pop>
 8104d12:	2800      	cmp	r0, #0
 8104d14:	f43f af79 	beq.w	8104c0a <__gnu_unwind_execute+0xe>
 8104d18:	e79d      	b.n	8104c56 <__gnu_unwind_execute+0x5a>
 8104d1a:	28b1      	cmp	r0, #177	; 0xb1
 8104d1c:	d033      	beq.n	8104d86 <__gnu_unwind_execute+0x18a>
 8104d1e:	28b2      	cmp	r0, #178	; 0xb2
 8104d20:	f000 808b 	beq.w	8104e3a <__gnu_unwind_execute+0x23e>
 8104d24:	28b3      	cmp	r0, #179	; 0xb3
 8104d26:	d039      	beq.n	8104d9c <__gnu_unwind_execute+0x1a0>
 8104d28:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8104d2c:	2bb4      	cmp	r3, #180	; 0xb4
 8104d2e:	d092      	beq.n	8104c56 <__gnu_unwind_execute+0x5a>
 8104d30:	f000 0207 	and.w	r2, r0, #7
 8104d34:	3201      	adds	r2, #1
 8104d36:	2301      	movs	r3, #1
 8104d38:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8104d3c:	4619      	mov	r1, r3
 8104d3e:	4628      	mov	r0, r5
 8104d40:	f7ff fd1e 	bl	8104780 <_Unwind_VRS_Pop>
 8104d44:	2800      	cmp	r0, #0
 8104d46:	f43f af60 	beq.w	8104c0a <__gnu_unwind_execute+0xe>
 8104d4a:	e784      	b.n	8104c56 <__gnu_unwind_execute+0x5a>
 8104d4c:	28c6      	cmp	r0, #198	; 0xc6
 8104d4e:	d042      	beq.n	8104dd6 <__gnu_unwind_execute+0x1da>
 8104d50:	28c7      	cmp	r0, #199	; 0xc7
 8104d52:	d04c      	beq.n	8104dee <__gnu_unwind_execute+0x1f2>
 8104d54:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8104d58:	2bc0      	cmp	r3, #192	; 0xc0
 8104d5a:	d05b      	beq.n	8104e14 <__gnu_unwind_execute+0x218>
 8104d5c:	28c8      	cmp	r0, #200	; 0xc8
 8104d5e:	d060      	beq.n	8104e22 <__gnu_unwind_execute+0x226>
 8104d60:	28c9      	cmp	r0, #201	; 0xc9
 8104d62:	f47f af78 	bne.w	8104c56 <__gnu_unwind_execute+0x5a>
 8104d66:	4630      	mov	r0, r6
 8104d68:	f7ff ff1c 	bl	8104ba4 <next_unwind_byte>
 8104d6c:	0302      	lsls	r2, r0, #12
 8104d6e:	f000 000f 	and.w	r0, r0, #15
 8104d72:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8104d76:	3001      	adds	r0, #1
 8104d78:	4302      	orrs	r2, r0
 8104d7a:	e765      	b.n	8104c48 <__gnu_unwind_execute+0x4c>
 8104d7c:	f1b8 0f00 	cmp.w	r8, #0
 8104d80:	d018      	beq.n	8104db4 <__gnu_unwind_execute+0x1b8>
 8104d82:	2000      	movs	r0, #0
 8104d84:	e768      	b.n	8104c58 <__gnu_unwind_execute+0x5c>
 8104d86:	4630      	mov	r0, r6
 8104d88:	f7ff ff0c 	bl	8104ba4 <next_unwind_byte>
 8104d8c:	4602      	mov	r2, r0
 8104d8e:	2800      	cmp	r0, #0
 8104d90:	f43f af61 	beq.w	8104c56 <__gnu_unwind_execute+0x5a>
 8104d94:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8104d98:	d0d0      	beq.n	8104d3c <__gnu_unwind_execute+0x140>
 8104d9a:	e75c      	b.n	8104c56 <__gnu_unwind_execute+0x5a>
 8104d9c:	4630      	mov	r0, r6
 8104d9e:	f7ff ff01 	bl	8104ba4 <next_unwind_byte>
 8104da2:	0301      	lsls	r1, r0, #12
 8104da4:	f000 000f 	and.w	r0, r0, #15
 8104da8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8104dac:	1c42      	adds	r2, r0, #1
 8104dae:	2301      	movs	r3, #1
 8104db0:	430a      	orrs	r2, r1
 8104db2:	e7c3      	b.n	8104d3c <__gnu_unwind_execute+0x140>
 8104db4:	ac03      	add	r4, sp, #12
 8104db6:	4643      	mov	r3, r8
 8104db8:	220e      	movs	r2, #14
 8104dba:	4641      	mov	r1, r8
 8104dbc:	9400      	str	r4, [sp, #0]
 8104dbe:	4628      	mov	r0, r5
 8104dc0:	f7ff fb00 	bl	81043c4 <_Unwind_VRS_Get>
 8104dc4:	9400      	str	r4, [sp, #0]
 8104dc6:	4628      	mov	r0, r5
 8104dc8:	4643      	mov	r3, r8
 8104dca:	220f      	movs	r2, #15
 8104dcc:	4641      	mov	r1, r8
 8104dce:	f7ff fb1d 	bl	810440c <_Unwind_VRS_Set>
 8104dd2:	4640      	mov	r0, r8
 8104dd4:	e740      	b.n	8104c58 <__gnu_unwind_execute+0x5c>
 8104dd6:	4630      	mov	r0, r6
 8104dd8:	f7ff fee4 	bl	8104ba4 <next_unwind_byte>
 8104ddc:	0301      	lsls	r1, r0, #12
 8104dde:	f000 000f 	and.w	r0, r0, #15
 8104de2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8104de6:	1c42      	adds	r2, r0, #1
 8104de8:	2303      	movs	r3, #3
 8104dea:	430a      	orrs	r2, r1
 8104dec:	e7a6      	b.n	8104d3c <__gnu_unwind_execute+0x140>
 8104dee:	4630      	mov	r0, r6
 8104df0:	f7ff fed8 	bl	8104ba4 <next_unwind_byte>
 8104df4:	4602      	mov	r2, r0
 8104df6:	2800      	cmp	r0, #0
 8104df8:	f43f af2d 	beq.w	8104c56 <__gnu_unwind_execute+0x5a>
 8104dfc:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8104e00:	f47f af29 	bne.w	8104c56 <__gnu_unwind_execute+0x5a>
 8104e04:	2104      	movs	r1, #4
 8104e06:	4628      	mov	r0, r5
 8104e08:	f7ff fcba 	bl	8104780 <_Unwind_VRS_Pop>
 8104e0c:	2800      	cmp	r0, #0
 8104e0e:	f43f aefc 	beq.w	8104c0a <__gnu_unwind_execute+0xe>
 8104e12:	e720      	b.n	8104c56 <__gnu_unwind_execute+0x5a>
 8104e14:	f000 020f 	and.w	r2, r0, #15
 8104e18:	3201      	adds	r2, #1
 8104e1a:	2303      	movs	r3, #3
 8104e1c:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8104e20:	e78c      	b.n	8104d3c <__gnu_unwind_execute+0x140>
 8104e22:	4630      	mov	r0, r6
 8104e24:	f7ff febe 	bl	8104ba4 <next_unwind_byte>
 8104e28:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8104e2c:	f000 030f 	and.w	r3, r0, #15
 8104e30:	3210      	adds	r2, #16
 8104e32:	3301      	adds	r3, #1
 8104e34:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8104e38:	e706      	b.n	8104c48 <__gnu_unwind_execute+0x4c>
 8104e3a:	2300      	movs	r3, #0
 8104e3c:	f10d 090c 	add.w	r9, sp, #12
 8104e40:	220d      	movs	r2, #13
 8104e42:	4619      	mov	r1, r3
 8104e44:	f8cd 9000 	str.w	r9, [sp]
 8104e48:	4628      	mov	r0, r5
 8104e4a:	f7ff fabb 	bl	81043c4 <_Unwind_VRS_Get>
 8104e4e:	4630      	mov	r0, r6
 8104e50:	f7ff fea8 	bl	8104ba4 <next_unwind_byte>
 8104e54:	0602      	lsls	r2, r0, #24
 8104e56:	f04f 0702 	mov.w	r7, #2
 8104e5a:	d50c      	bpl.n	8104e76 <__gnu_unwind_execute+0x27a>
 8104e5c:	9b03      	ldr	r3, [sp, #12]
 8104e5e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8104e62:	40b8      	lsls	r0, r7
 8104e64:	4403      	add	r3, r0
 8104e66:	4630      	mov	r0, r6
 8104e68:	9303      	str	r3, [sp, #12]
 8104e6a:	f7ff fe9b 	bl	8104ba4 <next_unwind_byte>
 8104e6e:	0603      	lsls	r3, r0, #24
 8104e70:	f107 0707 	add.w	r7, r7, #7
 8104e74:	d4f2      	bmi.n	8104e5c <__gnu_unwind_execute+0x260>
 8104e76:	9b03      	ldr	r3, [sp, #12]
 8104e78:	f8cd 9000 	str.w	r9, [sp]
 8104e7c:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8104e80:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8104e84:	40bc      	lsls	r4, r7
 8104e86:	2300      	movs	r3, #0
 8104e88:	4414      	add	r4, r2
 8104e8a:	4619      	mov	r1, r3
 8104e8c:	220d      	movs	r2, #13
 8104e8e:	4628      	mov	r0, r5
 8104e90:	9403      	str	r4, [sp, #12]
 8104e92:	f7ff fabb 	bl	810440c <_Unwind_VRS_Set>
 8104e96:	e6b8      	b.n	8104c0a <__gnu_unwind_execute+0xe>

08104e98 <__gnu_unwind_frame>:
 8104e98:	b510      	push	{r4, lr}
 8104e9a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8104e9c:	b084      	sub	sp, #16
 8104e9e:	6853      	ldr	r3, [r2, #4]
 8104ea0:	2403      	movs	r4, #3
 8104ea2:	f88d 400c 	strb.w	r4, [sp, #12]
 8104ea6:	021b      	lsls	r3, r3, #8
 8104ea8:	f102 0408 	add.w	r4, r2, #8
 8104eac:	4608      	mov	r0, r1
 8104eae:	79d2      	ldrb	r2, [r2, #7]
 8104eb0:	9301      	str	r3, [sp, #4]
 8104eb2:	a901      	add	r1, sp, #4
 8104eb4:	9402      	str	r4, [sp, #8]
 8104eb6:	f88d 200d 	strb.w	r2, [sp, #13]
 8104eba:	f7ff fe9f 	bl	8104bfc <__gnu_unwind_execute>
 8104ebe:	b004      	add	sp, #16
 8104ec0:	bd10      	pop	{r4, pc}
 8104ec2:	bf00      	nop

08104ec4 <_Unwind_GetRegionStart>:
 8104ec4:	b508      	push	{r3, lr}
 8104ec6:	f7ff fe97 	bl	8104bf8 <unwind_UCB_from_context>
 8104eca:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8104ecc:	bd08      	pop	{r3, pc}
 8104ece:	bf00      	nop

08104ed0 <_Unwind_GetLanguageSpecificData>:
 8104ed0:	b508      	push	{r3, lr}
 8104ed2:	f7ff fe91 	bl	8104bf8 <unwind_UCB_from_context>
 8104ed6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8104ed8:	79c3      	ldrb	r3, [r0, #7]
 8104eda:	3302      	adds	r3, #2
 8104edc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8104ee0:	bd08      	pop	{r3, pc}
 8104ee2:	bf00      	nop

08104ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8104ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8104f1c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8104ee8:	f001 fd1c 	bl	8106924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8104eec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8104eee:	e003      	b.n	8104ef8 <LoopCopyDataInit>

08104ef0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8104ef0:	4b0b      	ldr	r3, [pc, #44]	; (8104f20 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8104ef2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8104ef4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8104ef6:	3104      	adds	r1, #4

08104ef8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8104ef8:	480a      	ldr	r0, [pc, #40]	; (8104f24 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8104efa:	4b0b      	ldr	r3, [pc, #44]	; (8104f28 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8104efc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8104efe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8104f00:	d3f6      	bcc.n	8104ef0 <CopyDataInit>
  ldr  r2, =_sbss
 8104f02:	4a0a      	ldr	r2, [pc, #40]	; (8104f2c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8104f04:	e002      	b.n	8104f0c <LoopFillZerobss>

08104f06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8104f06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8104f08:	f842 3b04 	str.w	r3, [r2], #4

08104f0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8104f0c:	4b08      	ldr	r3, [pc, #32]	; (8104f30 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8104f0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8104f10:	d3f9      	bcc.n	8104f06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8104f12:	f001 fd53 	bl	81069bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8104f16:	f000 f839 	bl	8104f8c <main>
  bx  lr    
 8104f1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8104f1c:	10020000 	.word	0x10020000
  ldr  r3, =_sidata
 8104f20:	08106ca0 	.word	0x08106ca0
  ldr  r0, =_sdata
 8104f24:	10002000 	.word	0x10002000
  ldr  r3, =_edata
 8104f28:	10002074 	.word	0x10002074
  ldr  r2, =_sbss
 8104f2c:	10002074 	.word	0x10002074
  ldr  r3, = _ebss
 8104f30:	100020e4 	.word	0x100020e4

08104f34 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8104f34:	e7fe      	b.n	8104f34 <ADC3_IRQHandler>
	...

08104f38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8104f38:	b480      	push	{r7}
 8104f3a:	b083      	sub	sp, #12
 8104f3c:	af00      	add	r7, sp, #0
 8104f3e:	4603      	mov	r3, r0
 8104f40:	6039      	str	r1, [r7, #0]
 8104f42:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104f44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104f48:	2b00      	cmp	r3, #0
 8104f4a:	db0a      	blt.n	8104f62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104f4c:	683b      	ldr	r3, [r7, #0]
 8104f4e:	b2da      	uxtb	r2, r3
 8104f50:	490c      	ldr	r1, [pc, #48]	; (8104f84 <__NVIC_SetPriority+0x4c>)
 8104f52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104f56:	0112      	lsls	r2, r2, #4
 8104f58:	b2d2      	uxtb	r2, r2
 8104f5a:	440b      	add	r3, r1
 8104f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8104f60:	e00a      	b.n	8104f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104f62:	683b      	ldr	r3, [r7, #0]
 8104f64:	b2da      	uxtb	r2, r3
 8104f66:	4908      	ldr	r1, [pc, #32]	; (8104f88 <__NVIC_SetPriority+0x50>)
 8104f68:	88fb      	ldrh	r3, [r7, #6]
 8104f6a:	f003 030f 	and.w	r3, r3, #15
 8104f6e:	3b04      	subs	r3, #4
 8104f70:	0112      	lsls	r2, r2, #4
 8104f72:	b2d2      	uxtb	r2, r2
 8104f74:	440b      	add	r3, r1
 8104f76:	761a      	strb	r2, [r3, #24]
}
 8104f78:	bf00      	nop
 8104f7a:	370c      	adds	r7, #12
 8104f7c:	46bd      	mov	sp, r7
 8104f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104f82:	4770      	bx	lr
 8104f84:	e000e100 	.word	0xe000e100
 8104f88:	e000ed00 	.word	0xe000ed00

08104f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8104f8c:	b580      	push	{r7, lr}
 8104f8e:	b082      	sub	sp, #8
 8104f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	cosmosApi_boot();
 8104f92:	f000 f98b 	bl	81052ac <osBoot_boot>
	NVIC_SetPriority(SVCall_IRQn,3);
 8104f96:	2103      	movs	r1, #3
 8104f98:	f06f 0004 	mvn.w	r0, #4
 8104f9c:	f7ff ffcc 	bl	8104f38 <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn,4);
 8104fa0:	2104      	movs	r1, #4
 8104fa2:	f06f 0001 	mvn.w	r0, #1
 8104fa6:	f7ff ffc7 	bl	8104f38 <__NVIC_SetPriority>
  NVIC_SetPriority (SysTick_IRQn, 0);         /* set Priority for Systick Interrupt */
 8104faa:	2100      	movs	r1, #0
 8104fac:	f04f 30ff 	mov.w	r0, #4294967295
 8104fb0:	f7ff ffc2 	bl	8104f38 <__NVIC_SetPriority>
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8104fb4:	4b26      	ldr	r3, [pc, #152]	; (8105050 <main+0xc4>)
 8104fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104fba:	4a25      	ldr	r2, [pc, #148]	; (8105050 <main+0xc4>)
 8104fbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8104fc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8104fc4:	4b22      	ldr	r3, [pc, #136]	; (8105050 <main+0xc4>)
 8104fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8104fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104fce:	607b      	str	r3, [r7, #4]
 8104fd0:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8104fd2:	2001      	movs	r0, #1
 8104fd4:	f000 ff62 	bl	8105e9c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8104fd8:	f000 fffa 	bl	8105fd0 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8104fdc:	2201      	movs	r2, #1
 8104fde:	2102      	movs	r1, #2
 8104fe0:	2000      	movs	r0, #0
 8104fe2:	f000 ff7b 	bl	8105edc <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8104fe6:	4b1b      	ldr	r3, [pc, #108]	; (8105054 <main+0xc8>)
 8104fe8:	681b      	ldr	r3, [r3, #0]
 8104fea:	091b      	lsrs	r3, r3, #4
 8104fec:	f003 030f 	and.w	r3, r3, #15
 8104ff0:	2b07      	cmp	r3, #7
 8104ff2:	d108      	bne.n	8105006 <main+0x7a>
 8104ff4:	4b18      	ldr	r3, [pc, #96]	; (8105058 <main+0xcc>)
 8104ff6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8104ffa:	4a17      	ldr	r2, [pc, #92]	; (8105058 <main+0xcc>)
 8104ffc:	f043 0301 	orr.w	r3, r3, #1
 8105000:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8105004:	e007      	b.n	8105016 <main+0x8a>
 8105006:	4b14      	ldr	r3, [pc, #80]	; (8105058 <main+0xcc>)
 8105008:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 810500c:	4a12      	ldr	r2, [pc, #72]	; (8105058 <main+0xcc>)
 810500e:	f043 0301 	orr.w	r3, r3, #1
 8105012:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  __HAL_RCC_HSEM_CLK_ENABLE();
 8105016:	4b0e      	ldr	r3, [pc, #56]	; (8105050 <main+0xc4>)
 8105018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810501c:	4a0c      	ldr	r2, [pc, #48]	; (8105050 <main+0xc4>)
 810501e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8105022:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8105026:	4b0a      	ldr	r3, [pc, #40]	; (8105050 <main+0xc4>)
 8105028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810502c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105030:	603b      	str	r3, [r7, #0]
 8105032:	683b      	ldr	r3, [r7, #0]
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8105034:	f000 fb02 	bl	810563c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8105038:	f000 f82a 	bl	8105090 <MX_GPIO_Init>
  MX_DMA_Init();
 810503c:	f000 f80e 	bl	810505c <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
	cosmosApi_osInit_init();
 8105040:	200d      	movs	r0, #13
 8105042:	f7fd fc15 	bl	8102870 <sysCalls_bitWidthType_ret_void>
	cosmosApi_os_start();
 8105046:	200e      	movs	r0, #14
 8105048:	f7fd fc12 	bl	8102870 <sysCalls_bitWidthType_ret_void>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810504c:	e7fe      	b.n	810504c <main+0xc0>
 810504e:	bf00      	nop
 8105050:	58024400 	.word	0x58024400
 8105054:	e000ed00 	.word	0xe000ed00
 8105058:	58026400 	.word	0x58026400

0810505c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 810505c:	b480      	push	{r7}
 810505e:	b083      	sub	sp, #12
 8105060:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8105062:	4b0a      	ldr	r3, [pc, #40]	; (810508c <MX_DMA_Init+0x30>)
 8105064:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8105068:	4a08      	ldr	r2, [pc, #32]	; (810508c <MX_DMA_Init+0x30>)
 810506a:	f043 0301 	orr.w	r3, r3, #1
 810506e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8105072:	4b06      	ldr	r3, [pc, #24]	; (810508c <MX_DMA_Init+0x30>)
 8105074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8105078:	f003 0301 	and.w	r3, r3, #1
 810507c:	607b      	str	r3, [r7, #4]
 810507e:	687b      	ldr	r3, [r7, #4]

}
 8105080:	bf00      	nop
 8105082:	370c      	adds	r7, #12
 8105084:	46bd      	mov	sp, r7
 8105086:	f85d 7b04 	ldr.w	r7, [sp], #4
 810508a:	4770      	bx	lr
 810508c:	58024400 	.word	0x58024400

08105090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8105090:	b580      	push	{r7, lr}
 8105092:	b088      	sub	sp, #32
 8105094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8105096:	f107 030c 	add.w	r3, r7, #12
 810509a:	2200      	movs	r2, #0
 810509c:	601a      	str	r2, [r3, #0]
 810509e:	605a      	str	r2, [r3, #4]
 81050a0:	609a      	str	r2, [r3, #8]
 81050a2:	60da      	str	r2, [r3, #12]
 81050a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81050a6:	4b24      	ldr	r3, [pc, #144]	; (8105138 <MX_GPIO_Init+0xa8>)
 81050a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81050ac:	4a22      	ldr	r2, [pc, #136]	; (8105138 <MX_GPIO_Init+0xa8>)
 81050ae:	f043 0301 	orr.w	r3, r3, #1
 81050b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81050b6:	4b20      	ldr	r3, [pc, #128]	; (8105138 <MX_GPIO_Init+0xa8>)
 81050b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81050bc:	f003 0301 	and.w	r3, r3, #1
 81050c0:	60bb      	str	r3, [r7, #8]
 81050c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81050c4:	4b1c      	ldr	r3, [pc, #112]	; (8105138 <MX_GPIO_Init+0xa8>)
 81050c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81050ca:	4a1b      	ldr	r2, [pc, #108]	; (8105138 <MX_GPIO_Init+0xa8>)
 81050cc:	f043 0302 	orr.w	r3, r3, #2
 81050d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81050d4:	4b18      	ldr	r3, [pc, #96]	; (8105138 <MX_GPIO_Init+0xa8>)
 81050d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81050da:	f003 0302 	and.w	r3, r3, #2
 81050de:	607b      	str	r3, [r7, #4]
 81050e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81050e2:	2200      	movs	r2, #0
 81050e4:	2110      	movs	r1, #16
 81050e6:	4815      	ldr	r0, [pc, #84]	; (810513c <MX_GPIO_Init+0xac>)
 81050e8:	f000 fe3a 	bl	8105d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 81050ec:	2200      	movs	r2, #0
 81050ee:	2101      	movs	r1, #1
 81050f0:	4813      	ldr	r0, [pc, #76]	; (8105140 <MX_GPIO_Init+0xb0>)
 81050f2:	f000 fe35 	bl	8105d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 81050f6:	2310      	movs	r3, #16
 81050f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81050fa:	2301      	movs	r3, #1
 81050fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81050fe:	2300      	movs	r3, #0
 8105100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8105102:	2303      	movs	r3, #3
 8105104:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8105106:	f107 030c 	add.w	r3, r7, #12
 810510a:	4619      	mov	r1, r3
 810510c:	480b      	ldr	r0, [pc, #44]	; (810513c <MX_GPIO_Init+0xac>)
 810510e:	f000 fc77 	bl	8105a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8105112:	2301      	movs	r3, #1
 8105114:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8105116:	2301      	movs	r3, #1
 8105118:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810511a:	2300      	movs	r3, #0
 810511c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810511e:	2303      	movs	r3, #3
 8105120:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8105122:	f107 030c 	add.w	r3, r7, #12
 8105126:	4619      	mov	r1, r3
 8105128:	4805      	ldr	r0, [pc, #20]	; (8105140 <MX_GPIO_Init+0xb0>)
 810512a:	f000 fc69 	bl	8105a00 <HAL_GPIO_Init>

}
 810512e:	bf00      	nop
 8105130:	3720      	adds	r7, #32
 8105132:	46bd      	mov	sp, r7
 8105134:	bd80      	pop	{r7, pc}
 8105136:	bf00      	nop
 8105138:	58024400 	.word	0x58024400
 810513c:	58020000 	.word	0x58020000
 8105140:	58020400 	.word	0x58020400

08105144 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8105144:	b580      	push	{r7, lr}
 8105146:	b082      	sub	sp, #8
 8105148:	af00      	add	r7, sp, #0
 810514a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	681b      	ldr	r3, [r3, #0]
 8105150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105154:	d101      	bne.n	810515a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8105156:	f000 facf 	bl	81056f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810515a:	bf00      	nop
 810515c:	3708      	adds	r7, #8
 810515e:	46bd      	mov	sp, r7
 8105160:	bd80      	pop	{r7, pc}
	...

08105164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8105164:	b480      	push	{r7}
 8105166:	b083      	sub	sp, #12
 8105168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810516a:	4b0a      	ldr	r3, [pc, #40]	; (8105194 <HAL_MspInit+0x30>)
 810516c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105170:	4a08      	ldr	r2, [pc, #32]	; (8105194 <HAL_MspInit+0x30>)
 8105172:	f043 0302 	orr.w	r3, r3, #2
 8105176:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810517a:	4b06      	ldr	r3, [pc, #24]	; (8105194 <HAL_MspInit+0x30>)
 810517c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105180:	f003 0302 	and.w	r3, r3, #2
 8105184:	607b      	str	r3, [r7, #4]
 8105186:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8105188:	bf00      	nop
 810518a:	370c      	adds	r7, #12
 810518c:	46bd      	mov	sp, r7
 810518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105192:	4770      	bx	lr
 8105194:	58024400 	.word	0x58024400

08105198 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8105198:	b580      	push	{r7, lr}
 810519a:	b090      	sub	sp, #64	; 0x40
 810519c:	af00      	add	r7, sp, #0
 810519e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81051a0:	687b      	ldr	r3, [r7, #4]
 81051a2:	2b0f      	cmp	r3, #15
 81051a4:	d827      	bhi.n	81051f6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 81051a6:	2200      	movs	r2, #0
 81051a8:	6879      	ldr	r1, [r7, #4]
 81051aa:	201c      	movs	r0, #28
 81051ac:	f000 fb70 	bl	8105890 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81051b0:	201c      	movs	r0, #28
 81051b2:	f000 fb87 	bl	81058c4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 81051b6:	4a29      	ldr	r2, [pc, #164]	; (810525c <HAL_InitTick+0xc4>)
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 81051bc:	4b28      	ldr	r3, [pc, #160]	; (8105260 <HAL_InitTick+0xc8>)
 81051be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81051c2:	4a27      	ldr	r2, [pc, #156]	; (8105260 <HAL_InitTick+0xc8>)
 81051c4:	f043 0301 	orr.w	r3, r3, #1
 81051c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81051cc:	4b24      	ldr	r3, [pc, #144]	; (8105260 <HAL_InitTick+0xc8>)
 81051ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81051d2:	f003 0301 	and.w	r3, r3, #1
 81051d6:	60fb      	str	r3, [r7, #12]
 81051d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81051da:	f107 0210 	add.w	r2, r7, #16
 81051de:	f107 0314 	add.w	r3, r7, #20
 81051e2:	4611      	mov	r1, r2
 81051e4:	4618      	mov	r0, r3
 81051e6:	f001 f8c3 	bl	8106370 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81051ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81051ec:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 81051ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051f0:	2b00      	cmp	r3, #0
 81051f2:	d106      	bne.n	8105202 <HAL_InitTick+0x6a>
 81051f4:	e001      	b.n	81051fa <HAL_InitTick+0x62>
    return HAL_ERROR;
 81051f6:	2301      	movs	r3, #1
 81051f8:	e02c      	b.n	8105254 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 81051fa:	f001 f8a3 	bl	8106344 <HAL_RCC_GetPCLK1Freq>
 81051fe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8105200:	e004      	b.n	810520c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8105202:	f001 f89f 	bl	8106344 <HAL_RCC_GetPCLK1Freq>
 8105206:	4603      	mov	r3, r0
 8105208:	005b      	lsls	r3, r3, #1
 810520a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 810520c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810520e:	4a15      	ldr	r2, [pc, #84]	; (8105264 <HAL_InitTick+0xcc>)
 8105210:	fba2 2303 	umull	r2, r3, r2, r3
 8105214:	0c9b      	lsrs	r3, r3, #18
 8105216:	3b01      	subs	r3, #1
 8105218:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 810521a:	4b13      	ldr	r3, [pc, #76]	; (8105268 <HAL_InitTick+0xd0>)
 810521c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8105220:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8105222:	4b11      	ldr	r3, [pc, #68]	; (8105268 <HAL_InitTick+0xd0>)
 8105224:	f240 32e7 	movw	r2, #999	; 0x3e7
 8105228:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 810522a:	4a0f      	ldr	r2, [pc, #60]	; (8105268 <HAL_InitTick+0xd0>)
 810522c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810522e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8105230:	4b0d      	ldr	r3, [pc, #52]	; (8105268 <HAL_InitTick+0xd0>)
 8105232:	2200      	movs	r2, #0
 8105234:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8105236:	4b0c      	ldr	r3, [pc, #48]	; (8105268 <HAL_InitTick+0xd0>)
 8105238:	2200      	movs	r2, #0
 810523a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 810523c:	480a      	ldr	r0, [pc, #40]	; (8105268 <HAL_InitTick+0xd0>)
 810523e:	f001 f8d9 	bl	81063f4 <HAL_TIM_Base_Init>
 8105242:	4603      	mov	r3, r0
 8105244:	2b00      	cmp	r3, #0
 8105246:	d104      	bne.n	8105252 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8105248:	4807      	ldr	r0, [pc, #28]	; (8105268 <HAL_InitTick+0xd0>)
 810524a:	f001 f935 	bl	81064b8 <HAL_TIM_Base_Start_IT>
 810524e:	4603      	mov	r3, r0
 8105250:	e000      	b.n	8105254 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8105252:	2301      	movs	r3, #1
}
 8105254:	4618      	mov	r0, r3
 8105256:	3740      	adds	r7, #64	; 0x40
 8105258:	46bd      	mov	sp, r7
 810525a:	bd80      	pop	{r7, pc}
 810525c:	10002000 	.word	0x10002000
 8105260:	58024400 	.word	0x58024400
 8105264:	431bde83 	.word	0x431bde83
 8105268:	10002090 	.word	0x10002090

0810526c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810526c:	b480      	push	{r7}
 810526e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8105270:	e7fe      	b.n	8105270 <NMI_Handler+0x4>

08105272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8105272:	b480      	push	{r7}
 8105274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8105276:	e7fe      	b.n	8105276 <HardFault_Handler+0x4>

08105278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8105278:	b480      	push	{r7}
 810527a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810527c:	e7fe      	b.n	810527c <MemManage_Handler+0x4>

0810527e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810527e:	b480      	push	{r7}
 8105280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8105282:	e7fe      	b.n	8105282 <BusFault_Handler+0x4>

08105284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8105284:	b480      	push	{r7}
 8105286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8105288:	e7fe      	b.n	8105288 <UsageFault_Handler+0x4>

0810528a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810528a:	b480      	push	{r7}
 810528c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810528e:	bf00      	nop
 8105290:	46bd      	mov	sp, r7
 8105292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105296:	4770      	bx	lr

08105298 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8105298:	b580      	push	{r7, lr}
 810529a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 810529c:	4802      	ldr	r0, [pc, #8]	; (81052a8 <TIM2_IRQHandler+0x10>)
 810529e:	f001 f941 	bl	8106524 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81052a2:	bf00      	nop
 81052a4:	bd80      	pop	{r7, pc}
 81052a6:	bf00      	nop
 81052a8:	10002090 	.word	0x10002090

081052ac <osBoot_boot>:
{
 81052ac:	b580      	push	{r7, lr}
 81052ae:	b08c      	sub	sp, #48	; 0x30
 81052b0:	af00      	add	r7, sp, #0
	coreId = CILcore_getCoreId();
 81052b2:	f7fd fc29 	bl	8102b08 <CILcore_getCoreId>
 81052b6:	62b8      	str	r0, [r7, #40]	; 0x28
	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 81052b8:	4a29      	ldr	r2, [pc, #164]	; (8105360 <osBoot_boot+0xb4>)
 81052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81052bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81052c0:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 81052c2:	4a27      	ldr	r2, [pc, #156]	; (8105360 <osBoot_boot+0xb4>)
 81052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81052c6:	00db      	lsls	r3, r3, #3
 81052c8:	4413      	add	r3, r2
 81052ca:	685b      	ldr	r3, [r3, #4]
 81052cc:	623b      	str	r3, [r7, #32]
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 81052ce:	2300      	movs	r3, #0
 81052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 81052d2:	e03c      	b.n	810534e <osBoot_boot+0xa2>
		osBoot_bootSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 81052d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81052d6:	4613      	mov	r3, r2
 81052d8:	005b      	lsls	r3, r3, #1
 81052da:	4413      	add	r3, r2
 81052dc:	009b      	lsls	r3, r3, #2
 81052de:	461a      	mov	r2, r3
 81052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81052e2:	4413      	add	r3, r2
 81052e4:	6818      	ldr	r0, [r3, #0]
 81052e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81052e8:	4613      	mov	r3, r2
 81052ea:	005b      	lsls	r3, r3, #1
 81052ec:	4413      	add	r3, r2
 81052ee:	009b      	lsls	r3, r3, #2
 81052f0:	461a      	mov	r2, r3
 81052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81052f4:	4413      	add	r3, r2
 81052f6:	6859      	ldr	r1, [r3, #4]
 81052f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81052fa:	4613      	mov	r3, r2
 81052fc:	005b      	lsls	r3, r3, #1
 81052fe:	4413      	add	r3, r2
 8105300:	009b      	lsls	r3, r3, #2
 8105302:	461a      	mov	r2, r3
 8105304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105306:	4413      	add	r3, r2
 8105308:	689b      	ldr	r3, [r3, #8]
 810530a:	61f8      	str	r0, [r7, #28]
 810530c:	61b9      	str	r1, [r7, #24]
 810530e:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8105310:	69ba      	ldr	r2, [r7, #24]
 8105312:	69fb      	ldr	r3, [r7, #28]
 8105314:	1ad3      	subs	r3, r2, r3
 8105316:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 8105318:	69fb      	ldr	r3, [r7, #28]
 810531a:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 810531c:	697b      	ldr	r3, [r7, #20]
 810531e:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8105320:	2300      	movs	r3, #0
 8105322:	607b      	str	r3, [r7, #4]
 8105324:	e00a      	b.n	810533c <osBoot_boot+0x90>
		*pDst++=*pSrc++;
 8105326:	68ba      	ldr	r2, [r7, #8]
 8105328:	1c53      	adds	r3, r2, #1
 810532a:	60bb      	str	r3, [r7, #8]
 810532c:	68fb      	ldr	r3, [r7, #12]
 810532e:	1c59      	adds	r1, r3, #1
 8105330:	60f9      	str	r1, [r7, #12]
 8105332:	7812      	ldrb	r2, [r2, #0]
 8105334:	701a      	strb	r2, [r3, #0]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8105336:	687b      	ldr	r3, [r7, #4]
 8105338:	3301      	adds	r3, #1
 810533a:	607b      	str	r3, [r7, #4]
 810533c:	693b      	ldr	r3, [r7, #16]
 810533e:	009b      	lsls	r3, r3, #2
 8105340:	687a      	ldr	r2, [r7, #4]
 8105342:	429a      	cmp	r2, r3
 8105344:	d3ef      	bcc.n	8105326 <osBoot_boot+0x7a>
}
 8105346:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 8105348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810534a:	3301      	adds	r3, #1
 810534c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810534e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105350:	6a3b      	ldr	r3, [r7, #32]
 8105352:	429a      	cmp	r2, r3
 8105354:	d3be      	bcc.n	81052d4 <osBoot_boot+0x28>
};
 8105356:	bf00      	nop
 8105358:	bf00      	nop
 810535a:	3730      	adds	r7, #48	; 0x30
 810535c:	46bd      	mov	sp, r7
 810535e:	bd80      	pop	{r7, pc}
 8105360:	08106b3c 	.word	0x08106b3c

08105364 <malloc_varAlloc>:
  *
  * @return CosmOS_MallocVariableType *
********************************************************************************/
static CosmOS_MallocVariableType * malloc_varAlloc( AddressType nextAvailableAddress, AddressType priorMallocAddress,\
													AddressType nextMallocAddress, BitWidthType size )
{
 8105364:	b480      	push	{r7}
 8105366:	b087      	sub	sp, #28
 8105368:	af00      	add	r7, sp, #0
 810536a:	60f8      	str	r0, [r7, #12]
 810536c:	60b9      	str	r1, [r7, #8]
 810536e:	607a      	str	r2, [r7, #4]
 8105370:	603b      	str	r3, [r7, #0]
	CosmOS_MallocVariableType * newMallocVar = (CosmOS_MallocVariableType *)nextAvailableAddress;
 8105372:	68fb      	ldr	r3, [r7, #12]
 8105374:	617b      	str	r3, [r7, #20]

	newMallocVar->prior = (CosmOS_MallocVariableType *)priorMallocAddress;
 8105376:	68ba      	ldr	r2, [r7, #8]
 8105378:	697b      	ldr	r3, [r7, #20]
 810537a:	601a      	str	r2, [r3, #0]
	newMallocVar->next = (CosmOS_MallocVariableType *)nextMallocAddress;
 810537c:	687a      	ldr	r2, [r7, #4]
 810537e:	697b      	ldr	r3, [r7, #20]
 8105380:	605a      	str	r2, [r3, #4]
	newMallocVar->size = (ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType)) + \
							(AddressType)ALIGN(size,sizeof(AddressType)));
 8105382:	683b      	ldr	r3, [r7, #0]
 8105384:	3303      	adds	r3, #3
 8105386:	f023 0303 	bic.w	r3, r3, #3
	newMallocVar->size = (ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType)) + \
 810538a:	f103 020c 	add.w	r2, r3, #12
 810538e:	697b      	ldr	r3, [r7, #20]
 8105390:	609a      	str	r2, [r3, #8]

	return newMallocVar;
 8105392:	697b      	ldr	r3, [r7, #20]
}
 8105394:	4618      	mov	r0, r3
 8105396:	371c      	adds	r7, #28
 8105398:	46bd      	mov	sp, r7
 810539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810539e:	4770      	bx	lr

081053a0 <malloc>:
  * @param[in]  size_t size
  *
  * @return void *
********************************************************************************/
void *malloc(size_t size)
{
 81053a0:	b580      	push	{r7, lr}
 81053a2:	b092      	sub	sp, #72	; 0x48
 81053a4:	af00      	add	r7, sp, #0
 81053a6:	6078      	str	r0, [r7, #4]
	CosmOS_ProgramVariableType *programVar;
	CosmOS_MallocVariableType *currentMallocVar,
								*newMallocVar;


	coreVar = core_getCoreVar();
 81053a8:	f7fb ffeb 	bl	8101382 <core_getCoreVar>
 81053ac:	63b8      	str	r0, [r7, #56]	; 0x38
 81053ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053b0:	613b      	str	r3, [r7, #16]
    return (core->programInExecution);
 81053b2:	693b      	ldr	r3, [r7, #16]
 81053b4:	689b      	ldr	r3, [r3, #8]

	programVar = core_getCoreProgramInExecution(coreVar);
 81053b6:	637b      	str	r3, [r7, #52]	; 0x34
 81053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81053ba:	617b      	str	r3, [r7, #20]
    return (program->cfg->programHeapLowAddress);
 81053bc:	697b      	ldr	r3, [r7, #20]
 81053be:	681b      	ldr	r3, [r3, #0]
 81053c0:	69db      	ldr	r3, [r3, #28]

	heapLowAddress = program_getProgramHeapLowAddress(programVar);
 81053c2:	633b      	str	r3, [r7, #48]	; 0x30
 81053c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81053c6:	61bb      	str	r3, [r7, #24]
    return (program->cfg->programHeapHighAddress);
 81053c8:	69bb      	ldr	r3, [r7, #24]
 81053ca:	681b      	ldr	r3, [r3, #0]
 81053cc:	6a1b      	ldr	r3, [r3, #32]
	heapHighAddress = program_getProgramHeapHighAddress(programVar);
 81053ce:	62fb      	str	r3, [r7, #44]	; 0x2c

	allocated = False;
 81053d0:	2300      	movs	r3, #0
 81053d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	lastItem = False;
 81053d6:	2300      	movs	r3, #0
 81053d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	currentMallocVar = (CosmOS_MallocVariableType *)heapLowAddress;
 81053dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81053de:	63fb      	str	r3, [r7, #60]	; 0x3c
	returnAddress = (AddressType)NULL;
 81053e0:	2300      	movs	r3, #0
 81053e2:	647b      	str	r3, [r7, #68]	; 0x44

	mutexState = mutex_getMutex(programVar->cfg->heapMutex);
 81053e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81053e6:	681b      	ldr	r3, [r3, #0]
 81053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81053ea:	4618      	mov	r0, r3
 81053ec:	f7fc f9e4 	bl	81017b8 <mutex_getMutex>
 81053f0:	62b8      	str	r0, [r7, #40]	; 0x28

	//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
	cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED);
 81053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81053f4:	2b02      	cmp	r3, #2
 81053f6:	bf0c      	ite	eq
 81053f8:	2301      	moveq	r3, #1
 81053fa:	2300      	movne	r3, #0
 81053fc:	b2db      	uxtb	r3, r3
 81053fe:	61fb      	str	r3, [r7, #28]
    if ( IS_NOT( result ) )
 8105400:	69fb      	ldr	r3, [r7, #28]
 8105402:	2b00      	cmp	r3, #0
 8105404:	d101      	bne.n	810540a <malloc+0x6a>
        os_kernelPanic();
 8105406:	f7fc fb29 	bl	8101a5c <os_kernelPanic>
}
 810540a:	bf00      	nop

	while (IS_NOT(lastItem) __OR IS_NOT(allocated))
 810540c:	e049      	b.n	81054a2 <malloc+0x102>
	{
		if (currentMallocVar->next IS_NOT_EQUAL_TO NULL)
 810540e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105410:	685b      	ldr	r3, [r3, #4]
 8105412:	2b00      	cmp	r3, #0
 8105414:	d027      	beq.n	8105466 <malloc+0xc6>
		{
			nextAvailableAddress = (AddressType)currentMallocVar + (AddressType)currentMallocVar->size;
 8105416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105418:	689a      	ldr	r2, [r3, #8]
 810541a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810541c:	4413      	add	r3, r2
 810541e:	627b      	str	r3, [r7, #36]	; 0x24
			if (size < ((AddressType)currentMallocVar->next - nextAvailableAddress))
 8105420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105422:	685b      	ldr	r3, [r3, #4]
 8105424:	461a      	mov	r2, r3
 8105426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105428:	1ad3      	subs	r3, r2, r3
 810542a:	687a      	ldr	r2, [r7, #4]
 810542c:	429a      	cmp	r2, r3
 810542e:	d216      	bcs.n	810545e <malloc+0xbe>
			{
				newMallocVar = malloc_varAlloc(nextAvailableAddress,
 8105430:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
												(AddressType)currentMallocVar,
												(AddressType)currentMallocVar->next,
 8105432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105434:	685b      	ldr	r3, [r3, #4]
				newMallocVar = malloc_varAlloc(nextAvailableAddress,
 8105436:	461a      	mov	r2, r3
 8105438:	687b      	ldr	r3, [r7, #4]
 810543a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 810543c:	f7ff ff92 	bl	8105364 <malloc_varAlloc>
 8105440:	6238      	str	r0, [r7, #32]
												size);

				((CosmOS_MallocVariableType *)currentMallocVar->next)->prior = newMallocVar;
 8105442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105444:	685b      	ldr	r3, [r3, #4]
 8105446:	6a3a      	ldr	r2, [r7, #32]
 8105448:	601a      	str	r2, [r3, #0]
				currentMallocVar->next = newMallocVar;
 810544a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810544c:	6a3a      	ldr	r2, [r7, #32]
 810544e:	605a      	str	r2, [r3, #4]

				returnAddress = (AddressType)newMallocVar +
 8105450:	6a3b      	ldr	r3, [r7, #32]
 8105452:	330c      	adds	r3, #12
 8105454:	647b      	str	r3, [r7, #68]	; 0x44
								(AddressType)ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType));
				allocated = True;
 8105456:	2301      	movs	r3, #1
 8105458:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810545c:	e021      	b.n	81054a2 <malloc+0x102>
			}
			else
			{
				currentMallocVar = currentMallocVar->next;
 810545e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105460:	685b      	ldr	r3, [r3, #4]
 8105462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105464:	e01d      	b.n	81054a2 <malloc+0x102>
			}
		}
		else
		{
			nextAvailableAddress = (AddressType)currentMallocVar + (AddressType)currentMallocVar->size;
 8105466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105468:	689a      	ldr	r2, [r3, #8]
 810546a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810546c:	4413      	add	r3, r2
 810546e:	627b      	str	r3, [r7, #36]	; 0x24
			if (size < (heapHighAddress - nextAvailableAddress))
 8105470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105474:	1ad3      	subs	r3, r2, r3
 8105476:	687a      	ldr	r2, [r7, #4]
 8105478:	429a      	cmp	r2, r3
 810547a:	d20f      	bcs.n	810549c <malloc+0xfc>
			{
				newMallocVar = malloc_varAlloc(nextAvailableAddress,
 810547c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810547e:	687b      	ldr	r3, [r7, #4]
 8105480:	2200      	movs	r2, #0
 8105482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8105484:	f7ff ff6e 	bl	8105364 <malloc_varAlloc>
 8105488:	6238      	str	r0, [r7, #32]
												(AddressType)currentMallocVar,
												(AddressType)NULL,
												size);

				currentMallocVar->next = newMallocVar;
 810548a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810548c:	6a3a      	ldr	r2, [r7, #32]
 810548e:	605a      	str	r2, [r3, #4]

				returnAddress = (AddressType)newMallocVar +
 8105490:	6a3b      	ldr	r3, [r7, #32]
 8105492:	330c      	adds	r3, #12
 8105494:	647b      	str	r3, [r7, #68]	; 0x44
								(AddressType)ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType));
				allocated = True;
 8105496:	2301      	movs	r3, #1
 8105498:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			}
			lastItem = True;
 810549c:	2301      	movs	r3, #1
 810549e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	while (IS_NOT(lastItem) __OR IS_NOT(allocated))
 81054a2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 81054a6:	2b00      	cmp	r3, #0
 81054a8:	d0b1      	beq.n	810540e <malloc+0x6e>
 81054aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81054ae:	2b00      	cmp	r3, #0
 81054b0:	d0ad      	beq.n	810540e <malloc+0x6e>
		}
	}

	mutexState = mutex_releaseMutex(programVar->cfg->heapMutex);
 81054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81054b4:	681b      	ldr	r3, [r3, #0]
 81054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81054b8:	4618      	mov	r0, r3
 81054ba:	f7fc fa80 	bl	81019be <mutex_releaseMutex>
 81054be:	62b8      	str	r0, [r7, #40]	; 0x28

	//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
	cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__RELEASED);
 81054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81054c2:	2b00      	cmp	r3, #0
 81054c4:	bf0c      	ite	eq
 81054c6:	2301      	moveq	r3, #1
 81054c8:	2300      	movne	r3, #0
 81054ca:	b2db      	uxtb	r3, r3
 81054cc:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 81054ce:	68fb      	ldr	r3, [r7, #12]
 81054d0:	2b00      	cmp	r3, #0
 81054d2:	d101      	bne.n	81054d8 <malloc+0x138>
        os_kernelPanic();
 81054d4:	f7fc fac2 	bl	8101a5c <os_kernelPanic>
}
 81054d8:	bf00      	nop

	return (void *)returnAddress;
 81054da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 81054dc:	4618      	mov	r0, r3
 81054de:	3748      	adds	r7, #72	; 0x48
 81054e0:	46bd      	mov	sp, r7
 81054e2:	bd80      	pop	{r7, pc}

081054e4 <free>:
  * @param[in]  void * ptr
  *
  * @return none
********************************************************************************/
void free(void *ptr)
{
 81054e4:	b580      	push	{r7, lr}
 81054e6:	b08a      	sub	sp, #40	; 0x28
 81054e8:	af00      	add	r7, sp, #0
 81054ea:	6078      	str	r0, [r7, #4]

	CosmOS_CoreVariableType *coreVar;
	CosmOS_ProgramVariableType *programVar;

	CosmOS_MallocVariableType *mallocVarToFree =
	(CosmOS_MallocVariableType *)((AddressType)ptr - ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType)));
 81054ec:	687b      	ldr	r3, [r7, #4]
 81054ee:	3b0c      	subs	r3, #12
	CosmOS_MallocVariableType *mallocVarToFree =
 81054f0:	627b      	str	r3, [r7, #36]	; 0x24


	coreVar = core_getCoreVar();
 81054f2:	f7fb ff46 	bl	8101382 <core_getCoreVar>
 81054f6:	6238      	str	r0, [r7, #32]
 81054f8:	6a3b      	ldr	r3, [r7, #32]
 81054fa:	613b      	str	r3, [r7, #16]
 81054fc:	693b      	ldr	r3, [r7, #16]
 81054fe:	689b      	ldr	r3, [r3, #8]

	programVar = core_getCoreProgramInExecution(coreVar);
 8105500:	61fb      	str	r3, [r7, #28]

	mutexState = mutex_getMutex(programVar->cfg->heapMutex);
 8105502:	69fb      	ldr	r3, [r7, #28]
 8105504:	681b      	ldr	r3, [r3, #0]
 8105506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105508:	4618      	mov	r0, r3
 810550a:	f7fc f955 	bl	81017b8 <mutex_getMutex>
 810550e:	61b8      	str	r0, [r7, #24]

	//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
	cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED);
 8105510:	69bb      	ldr	r3, [r7, #24]
 8105512:	2b02      	cmp	r3, #2
 8105514:	bf0c      	ite	eq
 8105516:	2301      	moveq	r3, #1
 8105518:	2300      	movne	r3, #0
 810551a:	b2db      	uxtb	r3, r3
 810551c:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 810551e:	697b      	ldr	r3, [r7, #20]
 8105520:	2b00      	cmp	r3, #0
 8105522:	d101      	bne.n	8105528 <free+0x44>
        os_kernelPanic();
 8105524:	f7fc fa9a 	bl	8101a5c <os_kernelPanic>
}
 8105528:	bf00      	nop

	if (mallocVarToFree->prior)
 810552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810552c:	681b      	ldr	r3, [r3, #0]
 810552e:	2b00      	cmp	r3, #0
 8105530:	d004      	beq.n	810553c <free+0x58>
	{
		((CosmOS_MallocVariableType *)mallocVarToFree->prior)->next =
 8105532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105534:	681b      	ldr	r3, [r3, #0]
			mallocVarToFree->next ? mallocVarToFree->next : NULL;
 8105536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8105538:	6852      	ldr	r2, [r2, #4]
		((CosmOS_MallocVariableType *)mallocVarToFree->prior)->next =
 810553a:	605a      	str	r2, [r3, #4]
	}

	if (mallocVarToFree->next)
 810553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810553e:	685b      	ldr	r3, [r3, #4]
 8105540:	2b00      	cmp	r3, #0
 8105542:	d004      	beq.n	810554e <free+0x6a>
	{
		((CosmOS_MallocVariableType *)mallocVarToFree->next)->prior =
 8105544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105546:	685b      	ldr	r3, [r3, #4]
			mallocVarToFree->prior ? mallocVarToFree->prior : NULL;
 8105548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810554a:	6812      	ldr	r2, [r2, #0]
		((CosmOS_MallocVariableType *)mallocVarToFree->next)->prior =
 810554c:	601a      	str	r2, [r3, #0]
	}

	mutexState = mutex_releaseMutex(programVar->cfg->heapMutex);
 810554e:	69fb      	ldr	r3, [r7, #28]
 8105550:	681b      	ldr	r3, [r3, #0]
 8105552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105554:	4618      	mov	r0, r3
 8105556:	f7fc fa32 	bl	81019be <mutex_releaseMutex>
 810555a:	61b8      	str	r0, [r7, #24]

	//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
	cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__RELEASED);
 810555c:	69bb      	ldr	r3, [r7, #24]
 810555e:	2b00      	cmp	r3, #0
 8105560:	bf0c      	ite	eq
 8105562:	2301      	moveq	r3, #1
 8105564:	2300      	movne	r3, #0
 8105566:	b2db      	uxtb	r3, r3
 8105568:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 810556a:	68fb      	ldr	r3, [r7, #12]
 810556c:	2b00      	cmp	r3, #0
 810556e:	d101      	bne.n	8105574 <free+0x90>
        os_kernelPanic();
 8105570:	f7fc fa74 	bl	8101a5c <os_kernelPanic>
}
 8105574:	bf00      	nop
}
 8105576:	bf00      	nop
 8105578:	3728      	adds	r7, #40	; 0x28
 810557a:	46bd      	mov	sp, r7
 810557c:	bd80      	pop	{r7, pc}

0810557e <interrupt_enableInterrupts>:
  * @param[in] BitWidthType entityId
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_enableInterrupts(BitWidthType entityId)
{
 810557e:	b480      	push	{r7}
 8105580:	b083      	sub	sp, #12
 8105582:	af00      	add	r7, sp, #0
 8105584:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8105586:	b662      	cpsie	i
}
 8105588:	bf00      	nop
}
 810558a:	bf00      	nop
	CILinterrupt_enableInterrupts();

	__SUPRESS_UNUSED_VAR(entityId);
}
 810558c:	bf00      	nop
 810558e:	370c      	adds	r7, #12
 8105590:	46bd      	mov	sp, r7
 8105592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105596:	4770      	bx	lr

08105598 <interrupt_disableInterrupts>:
  * @param[in]  BitWidthType entityId
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_disableInterrupts(BitWidthType entityId)
{
 8105598:	b480      	push	{r7}
 810559a:	b083      	sub	sp, #12
 810559c:	af00      	add	r7, sp, #0
 810559e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 81055a0:	b672      	cpsid	i
}
 81055a2:	bf00      	nop
}
 81055a4:	bf00      	nop
	CILinterrupt_disableInterrupts();

	__SUPRESS_UNUSED_VAR(entityId);
}
 81055a6:	bf00      	nop
 81055a8:	370c      	adds	r7, #12
 81055aa:	46bd      	mov	sp, r7
 81055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055b0:	4770      	bx	lr

081055b2 <PendSV_Handler>:
  *
  * @return none
********************************************************************************/
__NAKED void PendSV_Handler(void)
{
	__asm volatile ("cpsid i" : : : "memory");
 81055b2:	b672      	cpsid	i
    __asm volatile ("MRS R0,PSP");
 81055b4:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("ISB");
 81055b8:	f3bf 8f6f 	isb	sy

    __asm volatile ("TST R14, #16");
 81055bc:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 81055c0:	bf08      	it	eq
    __asm volatile ("VSTMDBEQ R0!,{S16-S31}"); /* If fp is true save floating point registers on stack */
 81055c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    __asm volatile ("STMDB R0!,{R4-R8,R10,R11,R14}");
 81055c6:	e920 4df0 	stmdb	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}

    __asm volatile ("BL scheduler_scheduleNextInstance");
 81055ca:	f7fc fc48 	bl	8101e5e <scheduler_scheduleNextInstance>
    __asm volatile ("ISB");
 81055ce:	f3bf 8f6f 	isb	sy

    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 81055d2:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
    __asm volatile ("TST R14, #16");
 81055d6:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 81055da:	bf08      	it	eq
    __asm volatile ("VLDMIAEQ R0!,{S16-S31}"); /* If fp is true restore floating point registers on stack */
 81055dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    __asm volatile ("MSR PSP,R0");
 81055e0:	f380 8809 	msr	PSP, r0
    __asm volatile ("ISB");
 81055e4:	f3bf 8f6f 	isb	sy
	__asm volatile ("cpsie i" : : : "memory");
 81055e8:	b662      	cpsie	i
    __asm volatile ("BX R14");
 81055ea:	4770      	bx	lr
}
 81055ec:	bf00      	nop
	...

081055f0 <SysTick_Handler>:
  * @param[in]  none
  *
  * @return none
********************************************************************************/
void SysTick_Handler( void )
{
 81055f0:	b580      	push	{r7, lr}
 81055f2:	b084      	sub	sp, #16
 81055f4:	af00      	add	r7, sp, #0
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SchedulerVariableType * schedulerVar;


	coreVar = core_getCoreVar();
 81055f6:	f7fb fec4 	bl	8101382 <core_getCoreVar>
 81055fa:	60f8      	str	r0, [r7, #12]
 81055fc:	68fb      	ldr	r3, [r7, #12]
 81055fe:	607b      	str	r3, [r7, #4]
    return (core->schedulerVar);
 8105600:	687b      	ldr	r3, [r7, #4]
 8105602:	691b      	ldr	r3, [r3, #16]
	schedulerVar = core_getCoreSchedulerVar( coreVar );
 8105604:	60bb      	str	r3, [r7, #8]

	schedulerVar->rescheduleTriggerState = RESCHEDULE_TRIGGER_STATE_ENUM__TIMER;
 8105606:	68bb      	ldr	r3, [r7, #8]
 8105608:	f04f 32ff 	mov.w	r2, #4294967295
 810560c:	621a      	str	r2, [r3, #32]
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 810560e:	4b05      	ldr	r3, [pc, #20]	; (8105624 <SysTick_Handler+0x34>)
 8105610:	685b      	ldr	r3, [r3, #4]
 8105612:	4a04      	ldr	r2, [pc, #16]	; (8105624 <SysTick_Handler+0x34>)
 8105614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105618:	6053      	str	r3, [r2, #4]
}
 810561a:	bf00      	nop

	CILinterrupt_contextSwitchRoutineTrigger();
}
 810561c:	bf00      	nop
 810561e:	3710      	adds	r7, #16
 8105620:	46bd      	mov	sp, r7
 8105622:	bd80      	pop	{r7, pc}
 8105624:	e000ed00 	.word	0xe000ed00

08105628 <SVC_Handler>:
  *
  * @return none
********************************************************************************/
__NAKED void SVC_Handler( void )
{
    __asm volatile ("TST LR, #4");
 8105628:	f01e 0f04 	tst.w	lr, #4
    __asm volatile ("ITE EQ");
 810562c:	bf0c      	ite	eq
    __asm volatile ("MRSEQ r0, MSP");
 810562e:	f3ef 8008 	mrseq	r0, MSP
    __asm volatile ("MRSNE r0, PSP");
 8105632:	f3ef 8009 	mrsne	r0, PSP
    __asm volatile ( "B CILsysCalls_dispatcher");
 8105636:	f7fd bd85 	b.w	8103144 <CILsysCalls_dispatcher>
}
 810563a:	bf00      	nop

0810563c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810563c:	b580      	push	{r7, lr}
 810563e:	b082      	sub	sp, #8
 8105640:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8105642:	4b28      	ldr	r3, [pc, #160]	; (81056e4 <HAL_Init+0xa8>)
 8105644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8105648:	4a26      	ldr	r2, [pc, #152]	; (81056e4 <HAL_Init+0xa8>)
 810564a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810564e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8105652:	4b24      	ldr	r3, [pc, #144]	; (81056e4 <HAL_Init+0xa8>)
 8105654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8105658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810565c:	603b      	str	r3, [r7, #0]
 810565e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8105660:	4b21      	ldr	r3, [pc, #132]	; (81056e8 <HAL_Init+0xac>)
 8105662:	681b      	ldr	r3, [r3, #0]
 8105664:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8105668:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810566c:	4a1e      	ldr	r2, [pc, #120]	; (81056e8 <HAL_Init+0xac>)
 810566e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8105672:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8105674:	4b1c      	ldr	r3, [pc, #112]	; (81056e8 <HAL_Init+0xac>)
 8105676:	681b      	ldr	r3, [r3, #0]
 8105678:	4a1b      	ldr	r2, [pc, #108]	; (81056e8 <HAL_Init+0xac>)
 810567a:	f043 0301 	orr.w	r3, r3, #1
 810567e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8105680:	2003      	movs	r0, #3
 8105682:	f000 f8fa 	bl	810587a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8105686:	f000 fcb1 	bl	8105fec <HAL_RCC_GetSysClockFreq>
 810568a:	4602      	mov	r2, r0
 810568c:	4b15      	ldr	r3, [pc, #84]	; (81056e4 <HAL_Init+0xa8>)
 810568e:	699b      	ldr	r3, [r3, #24]
 8105690:	0a1b      	lsrs	r3, r3, #8
 8105692:	f003 030f 	and.w	r3, r3, #15
 8105696:	4915      	ldr	r1, [pc, #84]	; (81056ec <HAL_Init+0xb0>)
 8105698:	5ccb      	ldrb	r3, [r1, r3]
 810569a:	f003 031f 	and.w	r3, r3, #31
 810569e:	fa22 f303 	lsr.w	r3, r2, r3
 81056a2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81056a4:	4b0f      	ldr	r3, [pc, #60]	; (81056e4 <HAL_Init+0xa8>)
 81056a6:	699b      	ldr	r3, [r3, #24]
 81056a8:	f003 030f 	and.w	r3, r3, #15
 81056ac:	4a0f      	ldr	r2, [pc, #60]	; (81056ec <HAL_Init+0xb0>)
 81056ae:	5cd3      	ldrb	r3, [r2, r3]
 81056b0:	f003 031f 	and.w	r3, r3, #31
 81056b4:	687a      	ldr	r2, [r7, #4]
 81056b6:	fa22 f303 	lsr.w	r3, r2, r3
 81056ba:	4a0d      	ldr	r2, [pc, #52]	; (81056f0 <HAL_Init+0xb4>)
 81056bc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81056be:	4b0c      	ldr	r3, [pc, #48]	; (81056f0 <HAL_Init+0xb4>)
 81056c0:	681b      	ldr	r3, [r3, #0]
 81056c2:	4a0c      	ldr	r2, [pc, #48]	; (81056f4 <HAL_Init+0xb8>)
 81056c4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81056c6:	2000      	movs	r0, #0
 81056c8:	f7ff fd66 	bl	8105198 <HAL_InitTick>
 81056cc:	4603      	mov	r3, r0
 81056ce:	2b00      	cmp	r3, #0
 81056d0:	d001      	beq.n	81056d6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81056d2:	2301      	movs	r3, #1
 81056d4:	e002      	b.n	81056dc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81056d6:	f7ff fd45 	bl	8105164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81056da:	2300      	movs	r3, #0
}
 81056dc:	4618      	mov	r0, r3
 81056de:	3708      	adds	r7, #8
 81056e0:	46bd      	mov	sp, r7
 81056e2:	bd80      	pop	{r7, pc}
 81056e4:	58024400 	.word	0x58024400
 81056e8:	40024400 	.word	0x40024400
 81056ec:	08106b4c 	.word	0x08106b4c
 81056f0:	1000200c 	.word	0x1000200c
 81056f4:	10002008 	.word	0x10002008

081056f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81056f8:	b480      	push	{r7}
 81056fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81056fc:	4b06      	ldr	r3, [pc, #24]	; (8105718 <HAL_IncTick+0x20>)
 81056fe:	781b      	ldrb	r3, [r3, #0]
 8105700:	461a      	mov	r2, r3
 8105702:	4b06      	ldr	r3, [pc, #24]	; (810571c <HAL_IncTick+0x24>)
 8105704:	681b      	ldr	r3, [r3, #0]
 8105706:	4413      	add	r3, r2
 8105708:	4a04      	ldr	r2, [pc, #16]	; (810571c <HAL_IncTick+0x24>)
 810570a:	6013      	str	r3, [r2, #0]
}
 810570c:	bf00      	nop
 810570e:	46bd      	mov	sp, r7
 8105710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105714:	4770      	bx	lr
 8105716:	bf00      	nop
 8105718:	10002004 	.word	0x10002004
 810571c:	100020dc 	.word	0x100020dc

08105720 <__NVIC_SetPriorityGrouping>:
{
 8105720:	b480      	push	{r7}
 8105722:	b085      	sub	sp, #20
 8105724:	af00      	add	r7, sp, #0
 8105726:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8105728:	687b      	ldr	r3, [r7, #4]
 810572a:	f003 0307 	and.w	r3, r3, #7
 810572e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8105730:	4b0c      	ldr	r3, [pc, #48]	; (8105764 <__NVIC_SetPriorityGrouping+0x44>)
 8105732:	68db      	ldr	r3, [r3, #12]
 8105734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8105736:	68ba      	ldr	r2, [r7, #8]
 8105738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 810573c:	4013      	ands	r3, r2
 810573e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8105740:	68fb      	ldr	r3, [r7, #12]
 8105742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8105744:	68bb      	ldr	r3, [r7, #8]
 8105746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8105748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 810574c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8105752:	4a04      	ldr	r2, [pc, #16]	; (8105764 <__NVIC_SetPriorityGrouping+0x44>)
 8105754:	68bb      	ldr	r3, [r7, #8]
 8105756:	60d3      	str	r3, [r2, #12]
}
 8105758:	bf00      	nop
 810575a:	3714      	adds	r7, #20
 810575c:	46bd      	mov	sp, r7
 810575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105762:	4770      	bx	lr
 8105764:	e000ed00 	.word	0xe000ed00

08105768 <__NVIC_GetPriorityGrouping>:
{
 8105768:	b480      	push	{r7}
 810576a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810576c:	4b04      	ldr	r3, [pc, #16]	; (8105780 <__NVIC_GetPriorityGrouping+0x18>)
 810576e:	68db      	ldr	r3, [r3, #12]
 8105770:	0a1b      	lsrs	r3, r3, #8
 8105772:	f003 0307 	and.w	r3, r3, #7
}
 8105776:	4618      	mov	r0, r3
 8105778:	46bd      	mov	sp, r7
 810577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810577e:	4770      	bx	lr
 8105780:	e000ed00 	.word	0xe000ed00

08105784 <__NVIC_EnableIRQ>:
{
 8105784:	b480      	push	{r7}
 8105786:	b083      	sub	sp, #12
 8105788:	af00      	add	r7, sp, #0
 810578a:	4603      	mov	r3, r0
 810578c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810578e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8105792:	2b00      	cmp	r3, #0
 8105794:	db0b      	blt.n	81057ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8105796:	88fb      	ldrh	r3, [r7, #6]
 8105798:	f003 021f 	and.w	r2, r3, #31
 810579c:	4907      	ldr	r1, [pc, #28]	; (81057bc <__NVIC_EnableIRQ+0x38>)
 810579e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81057a2:	095b      	lsrs	r3, r3, #5
 81057a4:	2001      	movs	r0, #1
 81057a6:	fa00 f202 	lsl.w	r2, r0, r2
 81057aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 81057ae:	bf00      	nop
 81057b0:	370c      	adds	r7, #12
 81057b2:	46bd      	mov	sp, r7
 81057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057b8:	4770      	bx	lr
 81057ba:	bf00      	nop
 81057bc:	e000e100 	.word	0xe000e100

081057c0 <__NVIC_SetPriority>:
{
 81057c0:	b480      	push	{r7}
 81057c2:	b083      	sub	sp, #12
 81057c4:	af00      	add	r7, sp, #0
 81057c6:	4603      	mov	r3, r0
 81057c8:	6039      	str	r1, [r7, #0]
 81057ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81057cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81057d0:	2b00      	cmp	r3, #0
 81057d2:	db0a      	blt.n	81057ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81057d4:	683b      	ldr	r3, [r7, #0]
 81057d6:	b2da      	uxtb	r2, r3
 81057d8:	490c      	ldr	r1, [pc, #48]	; (810580c <__NVIC_SetPriority+0x4c>)
 81057da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81057de:	0112      	lsls	r2, r2, #4
 81057e0:	b2d2      	uxtb	r2, r2
 81057e2:	440b      	add	r3, r1
 81057e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81057e8:	e00a      	b.n	8105800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81057ea:	683b      	ldr	r3, [r7, #0]
 81057ec:	b2da      	uxtb	r2, r3
 81057ee:	4908      	ldr	r1, [pc, #32]	; (8105810 <__NVIC_SetPriority+0x50>)
 81057f0:	88fb      	ldrh	r3, [r7, #6]
 81057f2:	f003 030f 	and.w	r3, r3, #15
 81057f6:	3b04      	subs	r3, #4
 81057f8:	0112      	lsls	r2, r2, #4
 81057fa:	b2d2      	uxtb	r2, r2
 81057fc:	440b      	add	r3, r1
 81057fe:	761a      	strb	r2, [r3, #24]
}
 8105800:	bf00      	nop
 8105802:	370c      	adds	r7, #12
 8105804:	46bd      	mov	sp, r7
 8105806:	f85d 7b04 	ldr.w	r7, [sp], #4
 810580a:	4770      	bx	lr
 810580c:	e000e100 	.word	0xe000e100
 8105810:	e000ed00 	.word	0xe000ed00

08105814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105814:	b480      	push	{r7}
 8105816:	b089      	sub	sp, #36	; 0x24
 8105818:	af00      	add	r7, sp, #0
 810581a:	60f8      	str	r0, [r7, #12]
 810581c:	60b9      	str	r1, [r7, #8]
 810581e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8105820:	68fb      	ldr	r3, [r7, #12]
 8105822:	f003 0307 	and.w	r3, r3, #7
 8105826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8105828:	69fb      	ldr	r3, [r7, #28]
 810582a:	f1c3 0307 	rsb	r3, r3, #7
 810582e:	2b04      	cmp	r3, #4
 8105830:	bf28      	it	cs
 8105832:	2304      	movcs	r3, #4
 8105834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8105836:	69fb      	ldr	r3, [r7, #28]
 8105838:	3304      	adds	r3, #4
 810583a:	2b06      	cmp	r3, #6
 810583c:	d902      	bls.n	8105844 <NVIC_EncodePriority+0x30>
 810583e:	69fb      	ldr	r3, [r7, #28]
 8105840:	3b03      	subs	r3, #3
 8105842:	e000      	b.n	8105846 <NVIC_EncodePriority+0x32>
 8105844:	2300      	movs	r3, #0
 8105846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8105848:	f04f 32ff 	mov.w	r2, #4294967295
 810584c:	69bb      	ldr	r3, [r7, #24]
 810584e:	fa02 f303 	lsl.w	r3, r2, r3
 8105852:	43da      	mvns	r2, r3
 8105854:	68bb      	ldr	r3, [r7, #8]
 8105856:	401a      	ands	r2, r3
 8105858:	697b      	ldr	r3, [r7, #20]
 810585a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810585c:	f04f 31ff 	mov.w	r1, #4294967295
 8105860:	697b      	ldr	r3, [r7, #20]
 8105862:	fa01 f303 	lsl.w	r3, r1, r3
 8105866:	43d9      	mvns	r1, r3
 8105868:	687b      	ldr	r3, [r7, #4]
 810586a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810586c:	4313      	orrs	r3, r2
         );
}
 810586e:	4618      	mov	r0, r3
 8105870:	3724      	adds	r7, #36	; 0x24
 8105872:	46bd      	mov	sp, r7
 8105874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105878:	4770      	bx	lr

0810587a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810587a:	b580      	push	{r7, lr}
 810587c:	b082      	sub	sp, #8
 810587e:	af00      	add	r7, sp, #0
 8105880:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8105882:	6878      	ldr	r0, [r7, #4]
 8105884:	f7ff ff4c 	bl	8105720 <__NVIC_SetPriorityGrouping>
}
 8105888:	bf00      	nop
 810588a:	3708      	adds	r7, #8
 810588c:	46bd      	mov	sp, r7
 810588e:	bd80      	pop	{r7, pc}

08105890 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8105890:	b580      	push	{r7, lr}
 8105892:	b086      	sub	sp, #24
 8105894:	af00      	add	r7, sp, #0
 8105896:	4603      	mov	r3, r0
 8105898:	60b9      	str	r1, [r7, #8]
 810589a:	607a      	str	r2, [r7, #4]
 810589c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810589e:	f7ff ff63 	bl	8105768 <__NVIC_GetPriorityGrouping>
 81058a2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81058a4:	687a      	ldr	r2, [r7, #4]
 81058a6:	68b9      	ldr	r1, [r7, #8]
 81058a8:	6978      	ldr	r0, [r7, #20]
 81058aa:	f7ff ffb3 	bl	8105814 <NVIC_EncodePriority>
 81058ae:	4602      	mov	r2, r0
 81058b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81058b4:	4611      	mov	r1, r2
 81058b6:	4618      	mov	r0, r3
 81058b8:	f7ff ff82 	bl	81057c0 <__NVIC_SetPriority>
}
 81058bc:	bf00      	nop
 81058be:	3718      	adds	r7, #24
 81058c0:	46bd      	mov	sp, r7
 81058c2:	bd80      	pop	{r7, pc}

081058c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81058c4:	b580      	push	{r7, lr}
 81058c6:	b082      	sub	sp, #8
 81058c8:	af00      	add	r7, sp, #0
 81058ca:	4603      	mov	r3, r0
 81058cc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81058ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81058d2:	4618      	mov	r0, r3
 81058d4:	f7ff ff56 	bl	8105784 <__NVIC_EnableIRQ>
}
 81058d8:	bf00      	nop
 81058da:	3708      	adds	r7, #8
 81058dc:	46bd      	mov	sp, r7
 81058de:	bd80      	pop	{r7, pc}

081058e0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 81058e0:	b480      	push	{r7}
 81058e2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 81058e4:	f3bf 8f5f 	dmb	sy
}
 81058e8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 81058ea:	4b07      	ldr	r3, [pc, #28]	; (8105908 <HAL_MPU_Disable+0x28>)
 81058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81058ee:	4a06      	ldr	r2, [pc, #24]	; (8105908 <HAL_MPU_Disable+0x28>)
 81058f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81058f4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 81058f6:	4b05      	ldr	r3, [pc, #20]	; (810590c <HAL_MPU_Disable+0x2c>)
 81058f8:	2200      	movs	r2, #0
 81058fa:	605a      	str	r2, [r3, #4]
}
 81058fc:	bf00      	nop
 81058fe:	46bd      	mov	sp, r7
 8105900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105904:	4770      	bx	lr
 8105906:	bf00      	nop
 8105908:	e000ed00 	.word	0xe000ed00
 810590c:	e000ed90 	.word	0xe000ed90

08105910 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8105910:	b480      	push	{r7}
 8105912:	b083      	sub	sp, #12
 8105914:	af00      	add	r7, sp, #0
 8105916:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8105918:	4a0b      	ldr	r2, [pc, #44]	; (8105948 <HAL_MPU_Enable+0x38>)
 810591a:	687b      	ldr	r3, [r7, #4]
 810591c:	f043 0301 	orr.w	r3, r3, #1
 8105920:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8105922:	4b0a      	ldr	r3, [pc, #40]	; (810594c <HAL_MPU_Enable+0x3c>)
 8105924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105926:	4a09      	ldr	r2, [pc, #36]	; (810594c <HAL_MPU_Enable+0x3c>)
 8105928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 810592c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 810592e:	f3bf 8f4f 	dsb	sy
}
 8105932:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105934:	f3bf 8f6f 	isb	sy
}
 8105938:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 810593a:	bf00      	nop
 810593c:	370c      	adds	r7, #12
 810593e:	46bd      	mov	sp, r7
 8105940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105944:	4770      	bx	lr
 8105946:	bf00      	nop
 8105948:	e000ed90 	.word	0xe000ed90
 810594c:	e000ed00 	.word	0xe000ed00

08105950 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8105950:	b480      	push	{r7}
 8105952:	b083      	sub	sp, #12
 8105954:	af00      	add	r7, sp, #0
 8105956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8105958:	687b      	ldr	r3, [r7, #4]
 810595a:	785a      	ldrb	r2, [r3, #1]
 810595c:	4b1d      	ldr	r3, [pc, #116]	; (81059d4 <HAL_MPU_ConfigRegion+0x84>)
 810595e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8105960:	687b      	ldr	r3, [r7, #4]
 8105962:	781b      	ldrb	r3, [r3, #0]
 8105964:	2b00      	cmp	r3, #0
 8105966:	d029      	beq.n	81059bc <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8105968:	4a1a      	ldr	r2, [pc, #104]	; (81059d4 <HAL_MPU_ConfigRegion+0x84>)
 810596a:	687b      	ldr	r3, [r7, #4]
 810596c:	685b      	ldr	r3, [r3, #4]
 810596e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8105970:	687b      	ldr	r3, [r7, #4]
 8105972:	7b1b      	ldrb	r3, [r3, #12]
 8105974:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8105976:	687b      	ldr	r3, [r7, #4]
 8105978:	7adb      	ldrb	r3, [r3, #11]
 810597a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 810597c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 810597e:	687b      	ldr	r3, [r7, #4]
 8105980:	7a9b      	ldrb	r3, [r3, #10]
 8105982:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8105984:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8105986:	687b      	ldr	r3, [r7, #4]
 8105988:	7b5b      	ldrb	r3, [r3, #13]
 810598a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 810598c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 810598e:	687b      	ldr	r3, [r7, #4]
 8105990:	7b9b      	ldrb	r3, [r3, #14]
 8105992:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8105994:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8105996:	687b      	ldr	r3, [r7, #4]
 8105998:	7bdb      	ldrb	r3, [r3, #15]
 810599a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 810599c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 810599e:	687b      	ldr	r3, [r7, #4]
 81059a0:	7a5b      	ldrb	r3, [r3, #9]
 81059a2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 81059a4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 81059a6:	687b      	ldr	r3, [r7, #4]
 81059a8:	7a1b      	ldrb	r3, [r3, #8]
 81059aa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 81059ac:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 81059ae:	687a      	ldr	r2, [r7, #4]
 81059b0:	7812      	ldrb	r2, [r2, #0]
 81059b2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 81059b4:	4a07      	ldr	r2, [pc, #28]	; (81059d4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 81059b6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 81059b8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 81059ba:	e005      	b.n	81059c8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 81059bc:	4b05      	ldr	r3, [pc, #20]	; (81059d4 <HAL_MPU_ConfigRegion+0x84>)
 81059be:	2200      	movs	r2, #0
 81059c0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 81059c2:	4b04      	ldr	r3, [pc, #16]	; (81059d4 <HAL_MPU_ConfigRegion+0x84>)
 81059c4:	2200      	movs	r2, #0
 81059c6:	611a      	str	r2, [r3, #16]
}
 81059c8:	bf00      	nop
 81059ca:	370c      	adds	r7, #12
 81059cc:	46bd      	mov	sp, r7
 81059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059d2:	4770      	bx	lr
 81059d4:	e000ed90 	.word	0xe000ed90

081059d8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81059d8:	b480      	push	{r7}
 81059da:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81059dc:	4b07      	ldr	r3, [pc, #28]	; (81059fc <HAL_GetCurrentCPUID+0x24>)
 81059de:	681b      	ldr	r3, [r3, #0]
 81059e0:	091b      	lsrs	r3, r3, #4
 81059e2:	f003 030f 	and.w	r3, r3, #15
 81059e6:	2b07      	cmp	r3, #7
 81059e8:	d101      	bne.n	81059ee <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81059ea:	2303      	movs	r3, #3
 81059ec:	e000      	b.n	81059f0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 81059ee:	2301      	movs	r3, #1
  }
}
 81059f0:	4618      	mov	r0, r3
 81059f2:	46bd      	mov	sp, r7
 81059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81059f8:	4770      	bx	lr
 81059fa:	bf00      	nop
 81059fc:	e000ed00 	.word	0xe000ed00

08105a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8105a00:	b480      	push	{r7}
 8105a02:	b089      	sub	sp, #36	; 0x24
 8105a04:	af00      	add	r7, sp, #0
 8105a06:	6078      	str	r0, [r7, #4]
 8105a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8105a0a:	2300      	movs	r3, #0
 8105a0c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8105a0e:	4b89      	ldr	r3, [pc, #548]	; (8105c34 <HAL_GPIO_Init+0x234>)
 8105a10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105a12:	e194      	b.n	8105d3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8105a14:	683b      	ldr	r3, [r7, #0]
 8105a16:	681a      	ldr	r2, [r3, #0]
 8105a18:	2101      	movs	r1, #1
 8105a1a:	69fb      	ldr	r3, [r7, #28]
 8105a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8105a20:	4013      	ands	r3, r2
 8105a22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8105a24:	693b      	ldr	r3, [r7, #16]
 8105a26:	2b00      	cmp	r3, #0
 8105a28:	f000 8186 	beq.w	8105d38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8105a2c:	683b      	ldr	r3, [r7, #0]
 8105a2e:	685b      	ldr	r3, [r3, #4]
 8105a30:	2b01      	cmp	r3, #1
 8105a32:	d00b      	beq.n	8105a4c <HAL_GPIO_Init+0x4c>
 8105a34:	683b      	ldr	r3, [r7, #0]
 8105a36:	685b      	ldr	r3, [r3, #4]
 8105a38:	2b02      	cmp	r3, #2
 8105a3a:	d007      	beq.n	8105a4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8105a3c:	683b      	ldr	r3, [r7, #0]
 8105a3e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8105a40:	2b11      	cmp	r3, #17
 8105a42:	d003      	beq.n	8105a4c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8105a44:	683b      	ldr	r3, [r7, #0]
 8105a46:	685b      	ldr	r3, [r3, #4]
 8105a48:	2b12      	cmp	r3, #18
 8105a4a:	d130      	bne.n	8105aae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8105a4c:	687b      	ldr	r3, [r7, #4]
 8105a4e:	689b      	ldr	r3, [r3, #8]
 8105a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105a52:	69fb      	ldr	r3, [r7, #28]
 8105a54:	005b      	lsls	r3, r3, #1
 8105a56:	2203      	movs	r2, #3
 8105a58:	fa02 f303 	lsl.w	r3, r2, r3
 8105a5c:	43db      	mvns	r3, r3
 8105a5e:	69ba      	ldr	r2, [r7, #24]
 8105a60:	4013      	ands	r3, r2
 8105a62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105a64:	683b      	ldr	r3, [r7, #0]
 8105a66:	68da      	ldr	r2, [r3, #12]
 8105a68:	69fb      	ldr	r3, [r7, #28]
 8105a6a:	005b      	lsls	r3, r3, #1
 8105a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8105a70:	69ba      	ldr	r2, [r7, #24]
 8105a72:	4313      	orrs	r3, r2
 8105a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8105a76:	687b      	ldr	r3, [r7, #4]
 8105a78:	69ba      	ldr	r2, [r7, #24]
 8105a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8105a7c:	687b      	ldr	r3, [r7, #4]
 8105a7e:	685b      	ldr	r3, [r3, #4]
 8105a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105a82:	2201      	movs	r2, #1
 8105a84:	69fb      	ldr	r3, [r7, #28]
 8105a86:	fa02 f303 	lsl.w	r3, r2, r3
 8105a8a:	43db      	mvns	r3, r3
 8105a8c:	69ba      	ldr	r2, [r7, #24]
 8105a8e:	4013      	ands	r3, r2
 8105a90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8105a92:	683b      	ldr	r3, [r7, #0]
 8105a94:	685b      	ldr	r3, [r3, #4]
 8105a96:	091b      	lsrs	r3, r3, #4
 8105a98:	f003 0201 	and.w	r2, r3, #1
 8105a9c:	69fb      	ldr	r3, [r7, #28]
 8105a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8105aa2:	69ba      	ldr	r2, [r7, #24]
 8105aa4:	4313      	orrs	r3, r2
 8105aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105aa8:	687b      	ldr	r3, [r7, #4]
 8105aaa:	69ba      	ldr	r2, [r7, #24]
 8105aac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8105aae:	687b      	ldr	r3, [r7, #4]
 8105ab0:	68db      	ldr	r3, [r3, #12]
 8105ab2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105ab4:	69fb      	ldr	r3, [r7, #28]
 8105ab6:	005b      	lsls	r3, r3, #1
 8105ab8:	2203      	movs	r2, #3
 8105aba:	fa02 f303 	lsl.w	r3, r2, r3
 8105abe:	43db      	mvns	r3, r3
 8105ac0:	69ba      	ldr	r2, [r7, #24]
 8105ac2:	4013      	ands	r3, r2
 8105ac4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8105ac6:	683b      	ldr	r3, [r7, #0]
 8105ac8:	689a      	ldr	r2, [r3, #8]
 8105aca:	69fb      	ldr	r3, [r7, #28]
 8105acc:	005b      	lsls	r3, r3, #1
 8105ace:	fa02 f303 	lsl.w	r3, r2, r3
 8105ad2:	69ba      	ldr	r2, [r7, #24]
 8105ad4:	4313      	orrs	r3, r2
 8105ad6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8105ad8:	687b      	ldr	r3, [r7, #4]
 8105ada:	69ba      	ldr	r2, [r7, #24]
 8105adc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8105ade:	683b      	ldr	r3, [r7, #0]
 8105ae0:	685b      	ldr	r3, [r3, #4]
 8105ae2:	2b02      	cmp	r3, #2
 8105ae4:	d003      	beq.n	8105aee <HAL_GPIO_Init+0xee>
 8105ae6:	683b      	ldr	r3, [r7, #0]
 8105ae8:	685b      	ldr	r3, [r3, #4]
 8105aea:	2b12      	cmp	r3, #18
 8105aec:	d123      	bne.n	8105b36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8105aee:	69fb      	ldr	r3, [r7, #28]
 8105af0:	08da      	lsrs	r2, r3, #3
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	3208      	adds	r2, #8
 8105af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8105afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8105afc:	69fb      	ldr	r3, [r7, #28]
 8105afe:	f003 0307 	and.w	r3, r3, #7
 8105b02:	009b      	lsls	r3, r3, #2
 8105b04:	220f      	movs	r2, #15
 8105b06:	fa02 f303 	lsl.w	r3, r2, r3
 8105b0a:	43db      	mvns	r3, r3
 8105b0c:	69ba      	ldr	r2, [r7, #24]
 8105b0e:	4013      	ands	r3, r2
 8105b10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8105b12:	683b      	ldr	r3, [r7, #0]
 8105b14:	691a      	ldr	r2, [r3, #16]
 8105b16:	69fb      	ldr	r3, [r7, #28]
 8105b18:	f003 0307 	and.w	r3, r3, #7
 8105b1c:	009b      	lsls	r3, r3, #2
 8105b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8105b22:	69ba      	ldr	r2, [r7, #24]
 8105b24:	4313      	orrs	r3, r2
 8105b26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105b28:	69fb      	ldr	r3, [r7, #28]
 8105b2a:	08da      	lsrs	r2, r3, #3
 8105b2c:	687b      	ldr	r3, [r7, #4]
 8105b2e:	3208      	adds	r2, #8
 8105b30:	69b9      	ldr	r1, [r7, #24]
 8105b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8105b36:	687b      	ldr	r3, [r7, #4]
 8105b38:	681b      	ldr	r3, [r3, #0]
 8105b3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105b3c:	69fb      	ldr	r3, [r7, #28]
 8105b3e:	005b      	lsls	r3, r3, #1
 8105b40:	2203      	movs	r2, #3
 8105b42:	fa02 f303 	lsl.w	r3, r2, r3
 8105b46:	43db      	mvns	r3, r3
 8105b48:	69ba      	ldr	r2, [r7, #24]
 8105b4a:	4013      	ands	r3, r2
 8105b4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8105b4e:	683b      	ldr	r3, [r7, #0]
 8105b50:	685b      	ldr	r3, [r3, #4]
 8105b52:	f003 0203 	and.w	r2, r3, #3
 8105b56:	69fb      	ldr	r3, [r7, #28]
 8105b58:	005b      	lsls	r3, r3, #1
 8105b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8105b5e:	69ba      	ldr	r2, [r7, #24]
 8105b60:	4313      	orrs	r3, r2
 8105b62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8105b64:	687b      	ldr	r3, [r7, #4]
 8105b66:	69ba      	ldr	r2, [r7, #24]
 8105b68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8105b6a:	683b      	ldr	r3, [r7, #0]
 8105b6c:	685b      	ldr	r3, [r3, #4]
 8105b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8105b72:	2b00      	cmp	r3, #0
 8105b74:	f000 80e0 	beq.w	8105d38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105b78:	4b2f      	ldr	r3, [pc, #188]	; (8105c38 <HAL_GPIO_Init+0x238>)
 8105b7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105b7e:	4a2e      	ldr	r2, [pc, #184]	; (8105c38 <HAL_GPIO_Init+0x238>)
 8105b80:	f043 0302 	orr.w	r3, r3, #2
 8105b84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8105b88:	4b2b      	ldr	r3, [pc, #172]	; (8105c38 <HAL_GPIO_Init+0x238>)
 8105b8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8105b8e:	f003 0302 	and.w	r3, r3, #2
 8105b92:	60fb      	str	r3, [r7, #12]
 8105b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8105b96:	4a29      	ldr	r2, [pc, #164]	; (8105c3c <HAL_GPIO_Init+0x23c>)
 8105b98:	69fb      	ldr	r3, [r7, #28]
 8105b9a:	089b      	lsrs	r3, r3, #2
 8105b9c:	3302      	adds	r3, #2
 8105b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8105ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8105ba4:	69fb      	ldr	r3, [r7, #28]
 8105ba6:	f003 0303 	and.w	r3, r3, #3
 8105baa:	009b      	lsls	r3, r3, #2
 8105bac:	220f      	movs	r2, #15
 8105bae:	fa02 f303 	lsl.w	r3, r2, r3
 8105bb2:	43db      	mvns	r3, r3
 8105bb4:	69ba      	ldr	r2, [r7, #24]
 8105bb6:	4013      	ands	r3, r2
 8105bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105bba:	687b      	ldr	r3, [r7, #4]
 8105bbc:	4a20      	ldr	r2, [pc, #128]	; (8105c40 <HAL_GPIO_Init+0x240>)
 8105bbe:	4293      	cmp	r3, r2
 8105bc0:	d052      	beq.n	8105c68 <HAL_GPIO_Init+0x268>
 8105bc2:	687b      	ldr	r3, [r7, #4]
 8105bc4:	4a1f      	ldr	r2, [pc, #124]	; (8105c44 <HAL_GPIO_Init+0x244>)
 8105bc6:	4293      	cmp	r3, r2
 8105bc8:	d031      	beq.n	8105c2e <HAL_GPIO_Init+0x22e>
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	4a1e      	ldr	r2, [pc, #120]	; (8105c48 <HAL_GPIO_Init+0x248>)
 8105bce:	4293      	cmp	r3, r2
 8105bd0:	d02b      	beq.n	8105c2a <HAL_GPIO_Init+0x22a>
 8105bd2:	687b      	ldr	r3, [r7, #4]
 8105bd4:	4a1d      	ldr	r2, [pc, #116]	; (8105c4c <HAL_GPIO_Init+0x24c>)
 8105bd6:	4293      	cmp	r3, r2
 8105bd8:	d025      	beq.n	8105c26 <HAL_GPIO_Init+0x226>
 8105bda:	687b      	ldr	r3, [r7, #4]
 8105bdc:	4a1c      	ldr	r2, [pc, #112]	; (8105c50 <HAL_GPIO_Init+0x250>)
 8105bde:	4293      	cmp	r3, r2
 8105be0:	d01f      	beq.n	8105c22 <HAL_GPIO_Init+0x222>
 8105be2:	687b      	ldr	r3, [r7, #4]
 8105be4:	4a1b      	ldr	r2, [pc, #108]	; (8105c54 <HAL_GPIO_Init+0x254>)
 8105be6:	4293      	cmp	r3, r2
 8105be8:	d019      	beq.n	8105c1e <HAL_GPIO_Init+0x21e>
 8105bea:	687b      	ldr	r3, [r7, #4]
 8105bec:	4a1a      	ldr	r2, [pc, #104]	; (8105c58 <HAL_GPIO_Init+0x258>)
 8105bee:	4293      	cmp	r3, r2
 8105bf0:	d013      	beq.n	8105c1a <HAL_GPIO_Init+0x21a>
 8105bf2:	687b      	ldr	r3, [r7, #4]
 8105bf4:	4a19      	ldr	r2, [pc, #100]	; (8105c5c <HAL_GPIO_Init+0x25c>)
 8105bf6:	4293      	cmp	r3, r2
 8105bf8:	d00d      	beq.n	8105c16 <HAL_GPIO_Init+0x216>
 8105bfa:	687b      	ldr	r3, [r7, #4]
 8105bfc:	4a18      	ldr	r2, [pc, #96]	; (8105c60 <HAL_GPIO_Init+0x260>)
 8105bfe:	4293      	cmp	r3, r2
 8105c00:	d007      	beq.n	8105c12 <HAL_GPIO_Init+0x212>
 8105c02:	687b      	ldr	r3, [r7, #4]
 8105c04:	4a17      	ldr	r2, [pc, #92]	; (8105c64 <HAL_GPIO_Init+0x264>)
 8105c06:	4293      	cmp	r3, r2
 8105c08:	d101      	bne.n	8105c0e <HAL_GPIO_Init+0x20e>
 8105c0a:	2309      	movs	r3, #9
 8105c0c:	e02d      	b.n	8105c6a <HAL_GPIO_Init+0x26a>
 8105c0e:	230a      	movs	r3, #10
 8105c10:	e02b      	b.n	8105c6a <HAL_GPIO_Init+0x26a>
 8105c12:	2308      	movs	r3, #8
 8105c14:	e029      	b.n	8105c6a <HAL_GPIO_Init+0x26a>
 8105c16:	2307      	movs	r3, #7
 8105c18:	e027      	b.n	8105c6a <HAL_GPIO_Init+0x26a>
 8105c1a:	2306      	movs	r3, #6
 8105c1c:	e025      	b.n	8105c6a <HAL_GPIO_Init+0x26a>
 8105c1e:	2305      	movs	r3, #5
 8105c20:	e023      	b.n	8105c6a <HAL_GPIO_Init+0x26a>
 8105c22:	2304      	movs	r3, #4
 8105c24:	e021      	b.n	8105c6a <HAL_GPIO_Init+0x26a>
 8105c26:	2303      	movs	r3, #3
 8105c28:	e01f      	b.n	8105c6a <HAL_GPIO_Init+0x26a>
 8105c2a:	2302      	movs	r3, #2
 8105c2c:	e01d      	b.n	8105c6a <HAL_GPIO_Init+0x26a>
 8105c2e:	2301      	movs	r3, #1
 8105c30:	e01b      	b.n	8105c6a <HAL_GPIO_Init+0x26a>
 8105c32:	bf00      	nop
 8105c34:	580000c0 	.word	0x580000c0
 8105c38:	58024400 	.word	0x58024400
 8105c3c:	58000400 	.word	0x58000400
 8105c40:	58020000 	.word	0x58020000
 8105c44:	58020400 	.word	0x58020400
 8105c48:	58020800 	.word	0x58020800
 8105c4c:	58020c00 	.word	0x58020c00
 8105c50:	58021000 	.word	0x58021000
 8105c54:	58021400 	.word	0x58021400
 8105c58:	58021800 	.word	0x58021800
 8105c5c:	58021c00 	.word	0x58021c00
 8105c60:	58022000 	.word	0x58022000
 8105c64:	58022400 	.word	0x58022400
 8105c68:	2300      	movs	r3, #0
 8105c6a:	69fa      	ldr	r2, [r7, #28]
 8105c6c:	f002 0203 	and.w	r2, r2, #3
 8105c70:	0092      	lsls	r2, r2, #2
 8105c72:	4093      	lsls	r3, r2
 8105c74:	69ba      	ldr	r2, [r7, #24]
 8105c76:	4313      	orrs	r3, r2
 8105c78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105c7a:	4938      	ldr	r1, [pc, #224]	; (8105d5c <HAL_GPIO_Init+0x35c>)
 8105c7c:	69fb      	ldr	r3, [r7, #28]
 8105c7e:	089b      	lsrs	r3, r3, #2
 8105c80:	3302      	adds	r3, #2
 8105c82:	69ba      	ldr	r2, [r7, #24]
 8105c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8105c88:	697b      	ldr	r3, [r7, #20]
 8105c8a:	681b      	ldr	r3, [r3, #0]
 8105c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105c8e:	693b      	ldr	r3, [r7, #16]
 8105c90:	43db      	mvns	r3, r3
 8105c92:	69ba      	ldr	r2, [r7, #24]
 8105c94:	4013      	ands	r3, r2
 8105c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8105c98:	683b      	ldr	r3, [r7, #0]
 8105c9a:	685b      	ldr	r3, [r3, #4]
 8105c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8105ca0:	2b00      	cmp	r3, #0
 8105ca2:	d003      	beq.n	8105cac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8105ca4:	69ba      	ldr	r2, [r7, #24]
 8105ca6:	693b      	ldr	r3, [r7, #16]
 8105ca8:	4313      	orrs	r3, r2
 8105caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8105cac:	697b      	ldr	r3, [r7, #20]
 8105cae:	69ba      	ldr	r2, [r7, #24]
 8105cb0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8105cb2:	697b      	ldr	r3, [r7, #20]
 8105cb4:	685b      	ldr	r3, [r3, #4]
 8105cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105cb8:	693b      	ldr	r3, [r7, #16]
 8105cba:	43db      	mvns	r3, r3
 8105cbc:	69ba      	ldr	r2, [r7, #24]
 8105cbe:	4013      	ands	r3, r2
 8105cc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8105cc2:	683b      	ldr	r3, [r7, #0]
 8105cc4:	685b      	ldr	r3, [r3, #4]
 8105cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105cca:	2b00      	cmp	r3, #0
 8105ccc:	d003      	beq.n	8105cd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8105cce:	69ba      	ldr	r2, [r7, #24]
 8105cd0:	693b      	ldr	r3, [r7, #16]
 8105cd2:	4313      	orrs	r3, r2
 8105cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105cd6:	697b      	ldr	r3, [r7, #20]
 8105cd8:	69ba      	ldr	r2, [r7, #24]
 8105cda:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8105ce0:	681b      	ldr	r3, [r3, #0]
 8105ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105ce4:	693b      	ldr	r3, [r7, #16]
 8105ce6:	43db      	mvns	r3, r3
 8105ce8:	69ba      	ldr	r2, [r7, #24]
 8105cea:	4013      	ands	r3, r2
 8105cec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8105cee:	683b      	ldr	r3, [r7, #0]
 8105cf0:	685b      	ldr	r3, [r3, #4]
 8105cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8105cf6:	2b00      	cmp	r3, #0
 8105cf8:	d003      	beq.n	8105d02 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8105cfa:	69ba      	ldr	r2, [r7, #24]
 8105cfc:	693b      	ldr	r3, [r7, #16]
 8105cfe:	4313      	orrs	r3, r2
 8105d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105d02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105d06:	69bb      	ldr	r3, [r7, #24]
 8105d08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8105d0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8105d0e:	685b      	ldr	r3, [r3, #4]
 8105d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105d12:	693b      	ldr	r3, [r7, #16]
 8105d14:	43db      	mvns	r3, r3
 8105d16:	69ba      	ldr	r2, [r7, #24]
 8105d18:	4013      	ands	r3, r2
 8105d1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8105d1c:	683b      	ldr	r3, [r7, #0]
 8105d1e:	685b      	ldr	r3, [r3, #4]
 8105d20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8105d24:	2b00      	cmp	r3, #0
 8105d26:	d003      	beq.n	8105d30 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8105d28:	69ba      	ldr	r2, [r7, #24]
 8105d2a:	693b      	ldr	r3, [r7, #16]
 8105d2c:	4313      	orrs	r3, r2
 8105d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8105d34:	69bb      	ldr	r3, [r7, #24]
 8105d36:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8105d38:	69fb      	ldr	r3, [r7, #28]
 8105d3a:	3301      	adds	r3, #1
 8105d3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105d3e:	683b      	ldr	r3, [r7, #0]
 8105d40:	681a      	ldr	r2, [r3, #0]
 8105d42:	69fb      	ldr	r3, [r7, #28]
 8105d44:	fa22 f303 	lsr.w	r3, r2, r3
 8105d48:	2b00      	cmp	r3, #0
 8105d4a:	f47f ae63 	bne.w	8105a14 <HAL_GPIO_Init+0x14>
  }
}
 8105d4e:	bf00      	nop
 8105d50:	bf00      	nop
 8105d52:	3724      	adds	r7, #36	; 0x24
 8105d54:	46bd      	mov	sp, r7
 8105d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d5a:	4770      	bx	lr
 8105d5c:	58000400 	.word	0x58000400

08105d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8105d60:	b480      	push	{r7}
 8105d62:	b083      	sub	sp, #12
 8105d64:	af00      	add	r7, sp, #0
 8105d66:	6078      	str	r0, [r7, #4]
 8105d68:	460b      	mov	r3, r1
 8105d6a:	807b      	strh	r3, [r7, #2]
 8105d6c:	4613      	mov	r3, r2
 8105d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8105d70:	787b      	ldrb	r3, [r7, #1]
 8105d72:	2b00      	cmp	r3, #0
 8105d74:	d003      	beq.n	8105d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8105d76:	887a      	ldrh	r2, [r7, #2]
 8105d78:	687b      	ldr	r3, [r7, #4]
 8105d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8105d7c:	e003      	b.n	8105d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8105d7e:	887b      	ldrh	r3, [r7, #2]
 8105d80:	041a      	lsls	r2, r3, #16
 8105d82:	687b      	ldr	r3, [r7, #4]
 8105d84:	619a      	str	r2, [r3, #24]
}
 8105d86:	bf00      	nop
 8105d88:	370c      	adds	r7, #12
 8105d8a:	46bd      	mov	sp, r7
 8105d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d90:	4770      	bx	lr

08105d92 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8105d92:	b480      	push	{r7}
 8105d94:	b083      	sub	sp, #12
 8105d96:	af00      	add	r7, sp, #0
 8105d98:	6078      	str	r0, [r7, #4]
 8105d9a:	460b      	mov	r3, r1
 8105d9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8105d9e:	687b      	ldr	r3, [r7, #4]
 8105da0:	695a      	ldr	r2, [r3, #20]
 8105da2:	887b      	ldrh	r3, [r7, #2]
 8105da4:	401a      	ands	r2, r3
 8105da6:	887b      	ldrh	r3, [r7, #2]
 8105da8:	429a      	cmp	r2, r3
 8105daa:	d104      	bne.n	8105db6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8105dac:	887b      	ldrh	r3, [r7, #2]
 8105dae:	041a      	lsls	r2, r3, #16
 8105db0:	687b      	ldr	r3, [r7, #4]
 8105db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8105db4:	e002      	b.n	8105dbc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8105db6:	887a      	ldrh	r2, [r7, #2]
 8105db8:	687b      	ldr	r3, [r7, #4]
 8105dba:	619a      	str	r2, [r3, #24]
}
 8105dbc:	bf00      	nop
 8105dbe:	370c      	adds	r7, #12
 8105dc0:	46bd      	mov	sp, r7
 8105dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105dc6:	4770      	bx	lr

08105dc8 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 8105dc8:	b5b0      	push	{r4, r5, r7, lr}
 8105dca:	b086      	sub	sp, #24
 8105dcc:	af00      	add	r7, sp, #0
 8105dce:	6078      	str	r0, [r7, #4]
 8105dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

#if  USE_MULTI_CORE_SHARED_CODE != 0U
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = ((ProcessID & HSEM_R_PROCID) | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID) | HSEM_R_LOCK);
 8105dd2:	683b      	ldr	r3, [r7, #0]
 8105dd4:	b2dc      	uxtb	r4, r3
 8105dd6:	f7ff fdff 	bl	81059d8 <HAL_GetCurrentCPUID>
 8105dda:	4602      	mov	r2, r0
 8105ddc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8105de0:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105de2:	68fb      	ldr	r3, [r7, #12]
 8105de4:	fa93 f3a3 	rbit	r3, r3
 8105de8:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8105dea:	68bb      	ldr	r3, [r7, #8]
 8105dec:	fab3 f383 	clz	r3, r3
 8105df0:	b2db      	uxtb	r3, r3
 8105df2:	fa02 f303 	lsl.w	r3, r2, r3
 8105df6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8105dfa:	4323      	orrs	r3, r4
 8105dfc:	4914      	ldr	r1, [pc, #80]	; (8105e50 <HAL_HSEM_Take+0x88>)
 8105dfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == ((ProcessID & HSEM_R_PROCID) | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID) | HSEM_R_LOCK))
 8105e08:	4a11      	ldr	r2, [pc, #68]	; (8105e50 <HAL_HSEM_Take+0x88>)
 8105e0a:	687b      	ldr	r3, [r7, #4]
 8105e0c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8105e10:	683b      	ldr	r3, [r7, #0]
 8105e12:	b2dd      	uxtb	r5, r3
 8105e14:	f7ff fde0 	bl	81059d8 <HAL_GetCurrentCPUID>
 8105e18:	4602      	mov	r2, r0
 8105e1a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8105e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105e20:	697b      	ldr	r3, [r7, #20]
 8105e22:	fa93 f3a3 	rbit	r3, r3
 8105e26:	613b      	str	r3, [r7, #16]
  return result;
 8105e28:	693b      	ldr	r3, [r7, #16]
 8105e2a:	fab3 f383 	clz	r3, r3
 8105e2e:	b2db      	uxtb	r3, r3
 8105e30:	fa02 f303 	lsl.w	r3, r2, r3
 8105e34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8105e38:	432b      	orrs	r3, r5
 8105e3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8105e3e:	429c      	cmp	r4, r3
 8105e40:	d101      	bne.n	8105e46 <HAL_HSEM_Take+0x7e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 8105e42:	2300      	movs	r3, #0
 8105e44:	e000      	b.n	8105e48 <HAL_HSEM_Take+0x80>
    return HAL_OK;
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 8105e46:	2301      	movs	r3, #1
}
 8105e48:	4618      	mov	r0, r3
 8105e4a:	3718      	adds	r7, #24
 8105e4c:	46bd      	mov	sp, r7
 8105e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8105e50:	58026400 	.word	0x58026400

08105e54 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8105e54:	b580      	push	{r7, lr}
 8105e56:	b084      	sub	sp, #16
 8105e58:	af00      	add	r7, sp, #0
 8105e5a:	6078      	str	r0, [r7, #4]
 8105e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
 8105e5e:	f7ff fdbb 	bl	81059d8 <HAL_GetCurrentCPUID>
 8105e62:	4602      	mov	r2, r0
 8105e64:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8105e68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8105e6a:	68fb      	ldr	r3, [r7, #12]
 8105e6c:	fa93 f3a3 	rbit	r3, r3
 8105e70:	60bb      	str	r3, [r7, #8]
  return result;
 8105e72:	68bb      	ldr	r3, [r7, #8]
 8105e74:	fab3 f383 	clz	r3, r3
 8105e78:	b2db      	uxtb	r3, r3
 8105e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8105e7e:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 8105e82:	4905      	ldr	r1, [pc, #20]	; (8105e98 <HAL_HSEM_Release+0x44>)
 8105e84:	683b      	ldr	r3, [r7, #0]
 8105e86:	431a      	orrs	r2, r3
 8105e88:	687b      	ldr	r3, [r7, #4]
 8105e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
#endif

}
 8105e8e:	bf00      	nop
 8105e90:	3710      	adds	r7, #16
 8105e92:	46bd      	mov	sp, r7
 8105e94:	bd80      	pop	{r7, pc}
 8105e96:	bf00      	nop
 8105e98:	58026400 	.word	0x58026400

08105e9c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105e9c:	b580      	push	{r7, lr}
 8105e9e:	b082      	sub	sp, #8
 8105ea0:	af00      	add	r7, sp, #0
 8105ea2:	6078      	str	r0, [r7, #4]
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  /*enable the semaphore mask interrupts */
  if (HAL_GetCurrentCPUID() == HSEM_CPU1_COREID)
 8105ea4:	f7ff fd98 	bl	81059d8 <HAL_GetCurrentCPUID>
 8105ea8:	4603      	mov	r3, r0
 8105eaa:	2b03      	cmp	r3, #3
 8105eac:	d108      	bne.n	8105ec0 <HAL_HSEM_ActivateNotification+0x24>
  {
    /*Use interrupt line 0 for CPU1 Master */
    HSEM->C1IER |= SemMask;
 8105eae:	4b0a      	ldr	r3, [pc, #40]	; (8105ed8 <HAL_HSEM_ActivateNotification+0x3c>)
 8105eb0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8105eb4:	4908      	ldr	r1, [pc, #32]	; (8105ed8 <HAL_HSEM_ActivateNotification+0x3c>)
 8105eb6:	687b      	ldr	r3, [r7, #4]
 8105eb8:	4313      	orrs	r3, r2
 8105eba:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
#endif
}
 8105ebe:	e007      	b.n	8105ed0 <HAL_HSEM_ActivateNotification+0x34>
    HSEM->C2IER |= SemMask;
 8105ec0:	4b05      	ldr	r3, [pc, #20]	; (8105ed8 <HAL_HSEM_ActivateNotification+0x3c>)
 8105ec2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8105ec6:	4904      	ldr	r1, [pc, #16]	; (8105ed8 <HAL_HSEM_ActivateNotification+0x3c>)
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	4313      	orrs	r3, r2
 8105ecc:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
}
 8105ed0:	bf00      	nop
 8105ed2:	3708      	adds	r7, #8
 8105ed4:	46bd      	mov	sp, r7
 8105ed6:	bd80      	pop	{r7, pc}
 8105ed8:	58026400 	.word	0x58026400

08105edc <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8105edc:	b580      	push	{r7, lr}
 8105ede:	b084      	sub	sp, #16
 8105ee0:	af00      	add	r7, sp, #0
 8105ee2:	60f8      	str	r0, [r7, #12]
 8105ee4:	460b      	mov	r3, r1
 8105ee6:	607a      	str	r2, [r7, #4]
 8105ee8:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8105eea:	4b37      	ldr	r3, [pc, #220]	; (8105fc8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105eec:	681b      	ldr	r3, [r3, #0]
 8105eee:	f023 0201 	bic.w	r2, r3, #1
 8105ef2:	4935      	ldr	r1, [pc, #212]	; (8105fc8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105ef4:	68fb      	ldr	r3, [r7, #12]
 8105ef6:	4313      	orrs	r3, r2
 8105ef8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8105efa:	687b      	ldr	r3, [r7, #4]
 8105efc:	2b00      	cmp	r3, #0
 8105efe:	d123      	bne.n	8105f48 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105f00:	f7ff fd6a 	bl	81059d8 <HAL_GetCurrentCPUID>
 8105f04:	4603      	mov	r3, r0
 8105f06:	2b03      	cmp	r3, #3
 8105f08:	d158      	bne.n	8105fbc <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8105f0a:	4b2f      	ldr	r3, [pc, #188]	; (8105fc8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105f0c:	691b      	ldr	r3, [r3, #16]
 8105f0e:	4a2e      	ldr	r2, [pc, #184]	; (8105fc8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105f10:	f023 0301 	bic.w	r3, r3, #1
 8105f14:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105f16:	4b2d      	ldr	r3, [pc, #180]	; (8105fcc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105f18:	691b      	ldr	r3, [r3, #16]
 8105f1a:	4a2c      	ldr	r2, [pc, #176]	; (8105fcc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105f1c:	f043 0304 	orr.w	r3, r3, #4
 8105f20:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105f22:	f3bf 8f4f 	dsb	sy
}
 8105f26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105f28:	f3bf 8f6f 	isb	sy
}
 8105f2c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105f2e:	7afb      	ldrb	r3, [r7, #11]
 8105f30:	2b01      	cmp	r3, #1
 8105f32:	d101      	bne.n	8105f38 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105f34:	bf30      	wfi
 8105f36:	e000      	b.n	8105f3a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105f38:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105f3a:	4b24      	ldr	r3, [pc, #144]	; (8105fcc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105f3c:	691b      	ldr	r3, [r3, #16]
 8105f3e:	4a23      	ldr	r2, [pc, #140]	; (8105fcc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105f40:	f023 0304 	bic.w	r3, r3, #4
 8105f44:	6113      	str	r3, [r2, #16]
 8105f46:	e03c      	b.n	8105fc2 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	2b01      	cmp	r3, #1
 8105f4c:	d123      	bne.n	8105f96 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8105f4e:	f7ff fd43 	bl	81059d8 <HAL_GetCurrentCPUID>
 8105f52:	4603      	mov	r3, r0
 8105f54:	2b01      	cmp	r3, #1
 8105f56:	d133      	bne.n	8105fc0 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8105f58:	4b1b      	ldr	r3, [pc, #108]	; (8105fc8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105f5a:	695b      	ldr	r3, [r3, #20]
 8105f5c:	4a1a      	ldr	r2, [pc, #104]	; (8105fc8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105f5e:	f023 0302 	bic.w	r3, r3, #2
 8105f62:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105f64:	4b19      	ldr	r3, [pc, #100]	; (8105fcc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105f66:	691b      	ldr	r3, [r3, #16]
 8105f68:	4a18      	ldr	r2, [pc, #96]	; (8105fcc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105f6a:	f043 0304 	orr.w	r3, r3, #4
 8105f6e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105f70:	f3bf 8f4f 	dsb	sy
}
 8105f74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105f76:	f3bf 8f6f 	isb	sy
}
 8105f7a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8105f7c:	7afb      	ldrb	r3, [r7, #11]
 8105f7e:	2b01      	cmp	r3, #1
 8105f80:	d101      	bne.n	8105f86 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105f82:	bf30      	wfi
 8105f84:	e000      	b.n	8105f88 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105f86:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105f88:	4b10      	ldr	r3, [pc, #64]	; (8105fcc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105f8a:	691b      	ldr	r3, [r3, #16]
 8105f8c:	4a0f      	ldr	r2, [pc, #60]	; (8105fcc <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105f8e:	f023 0304 	bic.w	r3, r3, #4
 8105f92:	6113      	str	r3, [r2, #16]
 8105f94:	e015      	b.n	8105fc2 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105f96:	f7ff fd1f 	bl	81059d8 <HAL_GetCurrentCPUID>
 8105f9a:	4603      	mov	r3, r0
 8105f9c:	2b03      	cmp	r3, #3
 8105f9e:	d106      	bne.n	8105fae <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105fa0:	4b09      	ldr	r3, [pc, #36]	; (8105fc8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105fa2:	691b      	ldr	r3, [r3, #16]
 8105fa4:	4a08      	ldr	r2, [pc, #32]	; (8105fc8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105fa6:	f023 0304 	bic.w	r3, r3, #4
 8105faa:	6113      	str	r3, [r2, #16]
 8105fac:	e009      	b.n	8105fc2 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105fae:	4b06      	ldr	r3, [pc, #24]	; (8105fc8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105fb0:	695b      	ldr	r3, [r3, #20]
 8105fb2:	4a05      	ldr	r2, [pc, #20]	; (8105fc8 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105fb4:	f023 0304 	bic.w	r3, r3, #4
 8105fb8:	6153      	str	r3, [r2, #20]
 8105fba:	e002      	b.n	8105fc2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105fbc:	bf00      	nop
 8105fbe:	e000      	b.n	8105fc2 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105fc0:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105fc2:	3710      	adds	r7, #16
 8105fc4:	46bd      	mov	sp, r7
 8105fc6:	bd80      	pop	{r7, pc}
 8105fc8:	58024800 	.word	0x58024800
 8105fcc:	e000ed00 	.word	0xe000ed00

08105fd0 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105fd0:	b580      	push	{r7, lr}
 8105fd2:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105fd4:	f7ff fd00 	bl	81059d8 <HAL_GetCurrentCPUID>
 8105fd8:	4603      	mov	r3, r0
 8105fda:	2b03      	cmp	r3, #3
 8105fdc:	d101      	bne.n	8105fe2 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105fde:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105fe0:	e001      	b.n	8105fe6 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105fe2:	bf40      	sev
    __WFE ();
 8105fe4:	bf20      	wfe
}
 8105fe6:	bf00      	nop
 8105fe8:	bd80      	pop	{r7, pc}
	...

08105fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105fec:	b480      	push	{r7}
 8105fee:	b089      	sub	sp, #36	; 0x24
 8105ff0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105ff2:	4bb3      	ldr	r3, [pc, #716]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105ff4:	691b      	ldr	r3, [r3, #16]
 8105ff6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8105ffa:	2b18      	cmp	r3, #24
 8105ffc:	f200 8155 	bhi.w	81062aa <HAL_RCC_GetSysClockFreq+0x2be>
 8106000:	a201      	add	r2, pc, #4	; (adr r2, 8106008 <HAL_RCC_GetSysClockFreq+0x1c>)
 8106002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106006:	bf00      	nop
 8106008:	0810606d 	.word	0x0810606d
 810600c:	081062ab 	.word	0x081062ab
 8106010:	081062ab 	.word	0x081062ab
 8106014:	081062ab 	.word	0x081062ab
 8106018:	081062ab 	.word	0x081062ab
 810601c:	081062ab 	.word	0x081062ab
 8106020:	081062ab 	.word	0x081062ab
 8106024:	081062ab 	.word	0x081062ab
 8106028:	08106093 	.word	0x08106093
 810602c:	081062ab 	.word	0x081062ab
 8106030:	081062ab 	.word	0x081062ab
 8106034:	081062ab 	.word	0x081062ab
 8106038:	081062ab 	.word	0x081062ab
 810603c:	081062ab 	.word	0x081062ab
 8106040:	081062ab 	.word	0x081062ab
 8106044:	081062ab 	.word	0x081062ab
 8106048:	08106099 	.word	0x08106099
 810604c:	081062ab 	.word	0x081062ab
 8106050:	081062ab 	.word	0x081062ab
 8106054:	081062ab 	.word	0x081062ab
 8106058:	081062ab 	.word	0x081062ab
 810605c:	081062ab 	.word	0x081062ab
 8106060:	081062ab 	.word	0x081062ab
 8106064:	081062ab 	.word	0x081062ab
 8106068:	0810609f 	.word	0x0810609f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810606c:	4b94      	ldr	r3, [pc, #592]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810606e:	681b      	ldr	r3, [r3, #0]
 8106070:	f003 0320 	and.w	r3, r3, #32
 8106074:	2b00      	cmp	r3, #0
 8106076:	d009      	beq.n	810608c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8106078:	4b91      	ldr	r3, [pc, #580]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810607a:	681b      	ldr	r3, [r3, #0]
 810607c:	08db      	lsrs	r3, r3, #3
 810607e:	f003 0303 	and.w	r3, r3, #3
 8106082:	4a90      	ldr	r2, [pc, #576]	; (81062c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106084:	fa22 f303 	lsr.w	r3, r2, r3
 8106088:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810608a:	e111      	b.n	81062b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810608c:	4b8d      	ldr	r3, [pc, #564]	; (81062c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810608e:	61bb      	str	r3, [r7, #24]
    break;
 8106090:	e10e      	b.n	81062b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8106092:	4b8d      	ldr	r3, [pc, #564]	; (81062c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8106094:	61bb      	str	r3, [r7, #24]
    break;
 8106096:	e10b      	b.n	81062b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8106098:	4b8c      	ldr	r3, [pc, #560]	; (81062cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 810609a:	61bb      	str	r3, [r7, #24]
    break;
 810609c:	e108      	b.n	81062b0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810609e:	4b88      	ldr	r3, [pc, #544]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81060a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060a2:	f003 0303 	and.w	r3, r3, #3
 81060a6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 81060a8:	4b85      	ldr	r3, [pc, #532]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81060aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060ac:	091b      	lsrs	r3, r3, #4
 81060ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81060b2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 81060b4:	4b82      	ldr	r3, [pc, #520]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81060b8:	f003 0301 	and.w	r3, r3, #1
 81060bc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 81060be:	4b80      	ldr	r3, [pc, #512]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81060c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 81060c2:	08db      	lsrs	r3, r3, #3
 81060c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81060c8:	68fa      	ldr	r2, [r7, #12]
 81060ca:	fb02 f303 	mul.w	r3, r2, r3
 81060ce:	ee07 3a90 	vmov	s15, r3
 81060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81060d6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 81060da:	693b      	ldr	r3, [r7, #16]
 81060dc:	2b00      	cmp	r3, #0
 81060de:	f000 80e1 	beq.w	81062a4 <HAL_RCC_GetSysClockFreq+0x2b8>
 81060e2:	697b      	ldr	r3, [r7, #20]
 81060e4:	2b02      	cmp	r3, #2
 81060e6:	f000 8083 	beq.w	81061f0 <HAL_RCC_GetSysClockFreq+0x204>
 81060ea:	697b      	ldr	r3, [r7, #20]
 81060ec:	2b02      	cmp	r3, #2
 81060ee:	f200 80a1 	bhi.w	8106234 <HAL_RCC_GetSysClockFreq+0x248>
 81060f2:	697b      	ldr	r3, [r7, #20]
 81060f4:	2b00      	cmp	r3, #0
 81060f6:	d003      	beq.n	8106100 <HAL_RCC_GetSysClockFreq+0x114>
 81060f8:	697b      	ldr	r3, [r7, #20]
 81060fa:	2b01      	cmp	r3, #1
 81060fc:	d056      	beq.n	81061ac <HAL_RCC_GetSysClockFreq+0x1c0>
 81060fe:	e099      	b.n	8106234 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106100:	4b6f      	ldr	r3, [pc, #444]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106102:	681b      	ldr	r3, [r3, #0]
 8106104:	f003 0320 	and.w	r3, r3, #32
 8106108:	2b00      	cmp	r3, #0
 810610a:	d02d      	beq.n	8106168 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810610c:	4b6c      	ldr	r3, [pc, #432]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810610e:	681b      	ldr	r3, [r3, #0]
 8106110:	08db      	lsrs	r3, r3, #3
 8106112:	f003 0303 	and.w	r3, r3, #3
 8106116:	4a6b      	ldr	r2, [pc, #428]	; (81062c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8106118:	fa22 f303 	lsr.w	r3, r2, r3
 810611c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810611e:	687b      	ldr	r3, [r7, #4]
 8106120:	ee07 3a90 	vmov	s15, r3
 8106124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106128:	693b      	ldr	r3, [r7, #16]
 810612a:	ee07 3a90 	vmov	s15, r3
 810612e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106136:	4b62      	ldr	r3, [pc, #392]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810613a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810613e:	ee07 3a90 	vmov	s15, r3
 8106142:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106146:	ed97 6a02 	vldr	s12, [r7, #8]
 810614a:	eddf 5a61 	vldr	s11, [pc, #388]	; 81062d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810614e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106152:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106156:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810615a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810615e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106162:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8106166:	e087      	b.n	8106278 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106168:	693b      	ldr	r3, [r7, #16]
 810616a:	ee07 3a90 	vmov	s15, r3
 810616e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106172:	eddf 6a58 	vldr	s13, [pc, #352]	; 81062d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8106176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810617a:	4b51      	ldr	r3, [pc, #324]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810617e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106182:	ee07 3a90 	vmov	s15, r3
 8106186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810618a:	ed97 6a02 	vldr	s12, [r7, #8]
 810618e:	eddf 5a50 	vldr	s11, [pc, #320]	; 81062d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8106192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810619a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810619e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81061a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81061a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81061aa:	e065      	b.n	8106278 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81061ac:	693b      	ldr	r3, [r7, #16]
 81061ae:	ee07 3a90 	vmov	s15, r3
 81061b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061b6:	eddf 6a48 	vldr	s13, [pc, #288]	; 81062d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 81061ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061be:	4b40      	ldr	r3, [pc, #256]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81061c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81061c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061c6:	ee07 3a90 	vmov	s15, r3
 81061ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061ce:	ed97 6a02 	vldr	s12, [r7, #8]
 81061d2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 81062d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 81061d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81061da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81061de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81061e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81061e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81061ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81061ee:	e043      	b.n	8106278 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 81061f0:	693b      	ldr	r3, [r7, #16]
 81061f2:	ee07 3a90 	vmov	s15, r3
 81061f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061fa:	eddf 6a38 	vldr	s13, [pc, #224]	; 81062dc <HAL_RCC_GetSysClockFreq+0x2f0>
 81061fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106202:	4b2f      	ldr	r3, [pc, #188]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8106206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810620a:	ee07 3a90 	vmov	s15, r3
 810620e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106212:	ed97 6a02 	vldr	s12, [r7, #8]
 8106216:	eddf 5a2e 	vldr	s11, [pc, #184]	; 81062d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810621a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810621e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810622a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810622e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106232:	e021      	b.n	8106278 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8106234:	693b      	ldr	r3, [r7, #16]
 8106236:	ee07 3a90 	vmov	s15, r3
 810623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810623e:	eddf 6a26 	vldr	s13, [pc, #152]	; 81062d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8106242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106246:	4b1e      	ldr	r3, [pc, #120]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8106248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810624a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810624e:	ee07 3a90 	vmov	s15, r3
 8106252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106256:	ed97 6a02 	vldr	s12, [r7, #8]
 810625a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 81062d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 810625e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810626a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810626e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106276:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8106278:	4b11      	ldr	r3, [pc, #68]	; (81062c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810627c:	0a5b      	lsrs	r3, r3, #9
 810627e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106282:	3301      	adds	r3, #1
 8106284:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8106286:	683b      	ldr	r3, [r7, #0]
 8106288:	ee07 3a90 	vmov	s15, r3
 810628c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8106290:	edd7 6a07 	vldr	s13, [r7, #28]
 8106294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810629c:	ee17 3a90 	vmov	r3, s15
 81062a0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 81062a2:	e005      	b.n	81062b0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 81062a4:	2300      	movs	r3, #0
 81062a6:	61bb      	str	r3, [r7, #24]
    break;
 81062a8:	e002      	b.n	81062b0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 81062aa:	4b07      	ldr	r3, [pc, #28]	; (81062c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81062ac:	61bb      	str	r3, [r7, #24]
    break;
 81062ae:	bf00      	nop
  }

  return sysclockfreq;
 81062b0:	69bb      	ldr	r3, [r7, #24]
}
 81062b2:	4618      	mov	r0, r3
 81062b4:	3724      	adds	r7, #36	; 0x24
 81062b6:	46bd      	mov	sp, r7
 81062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062bc:	4770      	bx	lr
 81062be:	bf00      	nop
 81062c0:	58024400 	.word	0x58024400
 81062c4:	03d09000 	.word	0x03d09000
 81062c8:	003d0900 	.word	0x003d0900
 81062cc:	007a1200 	.word	0x007a1200
 81062d0:	46000000 	.word	0x46000000
 81062d4:	4c742400 	.word	0x4c742400
 81062d8:	4a742400 	.word	0x4a742400
 81062dc:	4af42400 	.word	0x4af42400

081062e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 81062e0:	b580      	push	{r7, lr}
 81062e2:	b082      	sub	sp, #8
 81062e4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 81062e6:	f7ff fe81 	bl	8105fec <HAL_RCC_GetSysClockFreq>
 81062ea:	4602      	mov	r2, r0
 81062ec:	4b11      	ldr	r3, [pc, #68]	; (8106334 <HAL_RCC_GetHCLKFreq+0x54>)
 81062ee:	699b      	ldr	r3, [r3, #24]
 81062f0:	0a1b      	lsrs	r3, r3, #8
 81062f2:	f003 030f 	and.w	r3, r3, #15
 81062f6:	4910      	ldr	r1, [pc, #64]	; (8106338 <HAL_RCC_GetHCLKFreq+0x58>)
 81062f8:	5ccb      	ldrb	r3, [r1, r3]
 81062fa:	f003 031f 	and.w	r3, r3, #31
 81062fe:	fa22 f303 	lsr.w	r3, r2, r3
 8106302:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8106304:	4b0b      	ldr	r3, [pc, #44]	; (8106334 <HAL_RCC_GetHCLKFreq+0x54>)
 8106306:	699b      	ldr	r3, [r3, #24]
 8106308:	f003 030f 	and.w	r3, r3, #15
 810630c:	4a0a      	ldr	r2, [pc, #40]	; (8106338 <HAL_RCC_GetHCLKFreq+0x58>)
 810630e:	5cd3      	ldrb	r3, [r2, r3]
 8106310:	f003 031f 	and.w	r3, r3, #31
 8106314:	687a      	ldr	r2, [r7, #4]
 8106316:	fa22 f303 	lsr.w	r3, r2, r3
 810631a:	4a08      	ldr	r2, [pc, #32]	; (810633c <HAL_RCC_GetHCLKFreq+0x5c>)
 810631c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810631e:	4b07      	ldr	r3, [pc, #28]	; (810633c <HAL_RCC_GetHCLKFreq+0x5c>)
 8106320:	681b      	ldr	r3, [r3, #0]
 8106322:	4a07      	ldr	r2, [pc, #28]	; (8106340 <HAL_RCC_GetHCLKFreq+0x60>)
 8106324:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8106326:	4b05      	ldr	r3, [pc, #20]	; (810633c <HAL_RCC_GetHCLKFreq+0x5c>)
 8106328:	681b      	ldr	r3, [r3, #0]
}
 810632a:	4618      	mov	r0, r3
 810632c:	3708      	adds	r7, #8
 810632e:	46bd      	mov	sp, r7
 8106330:	bd80      	pop	{r7, pc}
 8106332:	bf00      	nop
 8106334:	58024400 	.word	0x58024400
 8106338:	08106b4c 	.word	0x08106b4c
 810633c:	1000200c 	.word	0x1000200c
 8106340:	10002008 	.word	0x10002008

08106344 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8106344:	b580      	push	{r7, lr}
 8106346:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8106348:	f7ff ffca 	bl	81062e0 <HAL_RCC_GetHCLKFreq>
 810634c:	4602      	mov	r2, r0
 810634e:	4b06      	ldr	r3, [pc, #24]	; (8106368 <HAL_RCC_GetPCLK1Freq+0x24>)
 8106350:	69db      	ldr	r3, [r3, #28]
 8106352:	091b      	lsrs	r3, r3, #4
 8106354:	f003 0307 	and.w	r3, r3, #7
 8106358:	4904      	ldr	r1, [pc, #16]	; (810636c <HAL_RCC_GetPCLK1Freq+0x28>)
 810635a:	5ccb      	ldrb	r3, [r1, r3]
 810635c:	f003 031f 	and.w	r3, r3, #31
 8106360:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8106364:	4618      	mov	r0, r3
 8106366:	bd80      	pop	{r7, pc}
 8106368:	58024400 	.word	0x58024400
 810636c:	08106b4c 	.word	0x08106b4c

08106370 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8106370:	b480      	push	{r7}
 8106372:	b083      	sub	sp, #12
 8106374:	af00      	add	r7, sp, #0
 8106376:	6078      	str	r0, [r7, #4]
 8106378:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810637a:	687b      	ldr	r3, [r7, #4]
 810637c:	223f      	movs	r2, #63	; 0x3f
 810637e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8106380:	4b1a      	ldr	r3, [pc, #104]	; (81063ec <HAL_RCC_GetClockConfig+0x7c>)
 8106382:	691b      	ldr	r3, [r3, #16]
 8106384:	f003 0207 	and.w	r2, r3, #7
 8106388:	687b      	ldr	r3, [r7, #4]
 810638a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810638c:	4b17      	ldr	r3, [pc, #92]	; (81063ec <HAL_RCC_GetClockConfig+0x7c>)
 810638e:	699b      	ldr	r3, [r3, #24]
 8106390:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8106398:	4b14      	ldr	r3, [pc, #80]	; (81063ec <HAL_RCC_GetClockConfig+0x7c>)
 810639a:	699b      	ldr	r3, [r3, #24]
 810639c:	f003 020f 	and.w	r2, r3, #15
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 81063a4:	4b11      	ldr	r3, [pc, #68]	; (81063ec <HAL_RCC_GetClockConfig+0x7c>)
 81063a6:	699b      	ldr	r3, [r3, #24]
 81063a8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81063ac:	687b      	ldr	r3, [r7, #4]
 81063ae:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 81063b0:	4b0e      	ldr	r3, [pc, #56]	; (81063ec <HAL_RCC_GetClockConfig+0x7c>)
 81063b2:	69db      	ldr	r3, [r3, #28]
 81063b4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81063b8:	687b      	ldr	r3, [r7, #4]
 81063ba:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 81063bc:	4b0b      	ldr	r3, [pc, #44]	; (81063ec <HAL_RCC_GetClockConfig+0x7c>)
 81063be:	69db      	ldr	r3, [r3, #28]
 81063c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 81063c4:	687b      	ldr	r3, [r7, #4]
 81063c6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 81063c8:	4b08      	ldr	r3, [pc, #32]	; (81063ec <HAL_RCC_GetClockConfig+0x7c>)
 81063ca:	6a1b      	ldr	r3, [r3, #32]
 81063cc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 81063d4:	4b06      	ldr	r3, [pc, #24]	; (81063f0 <HAL_RCC_GetClockConfig+0x80>)
 81063d6:	681b      	ldr	r3, [r3, #0]
 81063d8:	f003 020f 	and.w	r2, r3, #15
 81063dc:	683b      	ldr	r3, [r7, #0]
 81063de:	601a      	str	r2, [r3, #0]
}
 81063e0:	bf00      	nop
 81063e2:	370c      	adds	r7, #12
 81063e4:	46bd      	mov	sp, r7
 81063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063ea:	4770      	bx	lr
 81063ec:	58024400 	.word	0x58024400
 81063f0:	52002000 	.word	0x52002000

081063f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 81063f4:	b580      	push	{r7, lr}
 81063f6:	b082      	sub	sp, #8
 81063f8:	af00      	add	r7, sp, #0
 81063fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 81063fc:	687b      	ldr	r3, [r7, #4]
 81063fe:	2b00      	cmp	r3, #0
 8106400:	d101      	bne.n	8106406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8106402:	2301      	movs	r3, #1
 8106404:	e049      	b.n	810649a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106406:	687b      	ldr	r3, [r7, #4]
 8106408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810640c:	b2db      	uxtb	r3, r3
 810640e:	2b00      	cmp	r3, #0
 8106410:	d106      	bne.n	8106420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106412:	687b      	ldr	r3, [r7, #4]
 8106414:	2200      	movs	r2, #0
 8106416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810641a:	6878      	ldr	r0, [r7, #4]
 810641c:	f000 f841 	bl	81064a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	2202      	movs	r2, #2
 8106424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	681a      	ldr	r2, [r3, #0]
 810642c:	687b      	ldr	r3, [r7, #4]
 810642e:	3304      	adds	r3, #4
 8106430:	4619      	mov	r1, r3
 8106432:	4610      	mov	r0, r2
 8106434:	f000 f9be 	bl	81067b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106438:	687b      	ldr	r3, [r7, #4]
 810643a:	2201      	movs	r2, #1
 810643c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106440:	687b      	ldr	r3, [r7, #4]
 8106442:	2201      	movs	r2, #1
 8106444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	2201      	movs	r2, #1
 810644c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106450:	687b      	ldr	r3, [r7, #4]
 8106452:	2201      	movs	r2, #1
 8106454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106458:	687b      	ldr	r3, [r7, #4]
 810645a:	2201      	movs	r2, #1
 810645c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106460:	687b      	ldr	r3, [r7, #4]
 8106462:	2201      	movs	r2, #1
 8106464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	2201      	movs	r2, #1
 810646c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106470:	687b      	ldr	r3, [r7, #4]
 8106472:	2201      	movs	r2, #1
 8106474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106478:	687b      	ldr	r3, [r7, #4]
 810647a:	2201      	movs	r2, #1
 810647c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106480:	687b      	ldr	r3, [r7, #4]
 8106482:	2201      	movs	r2, #1
 8106484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	2201      	movs	r2, #1
 810648c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106490:	687b      	ldr	r3, [r7, #4]
 8106492:	2201      	movs	r2, #1
 8106494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106498:	2300      	movs	r3, #0
}
 810649a:	4618      	mov	r0, r3
 810649c:	3708      	adds	r7, #8
 810649e:	46bd      	mov	sp, r7
 81064a0:	bd80      	pop	{r7, pc}

081064a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 81064a2:	b480      	push	{r7}
 81064a4:	b083      	sub	sp, #12
 81064a6:	af00      	add	r7, sp, #0
 81064a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 81064aa:	bf00      	nop
 81064ac:	370c      	adds	r7, #12
 81064ae:	46bd      	mov	sp, r7
 81064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064b4:	4770      	bx	lr
	...

081064b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81064b8:	b480      	push	{r7}
 81064ba:	b085      	sub	sp, #20
 81064bc:	af00      	add	r7, sp, #0
 81064be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81064c6:	b2db      	uxtb	r3, r3
 81064c8:	2b01      	cmp	r3, #1
 81064ca:	d001      	beq.n	81064d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 81064cc:	2301      	movs	r3, #1
 81064ce:	e021      	b.n	8106514 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	2202      	movs	r2, #2
 81064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	681b      	ldr	r3, [r3, #0]
 81064dc:	68da      	ldr	r2, [r3, #12]
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	681b      	ldr	r3, [r3, #0]
 81064e2:	f042 0201 	orr.w	r2, r2, #1
 81064e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	681b      	ldr	r3, [r3, #0]
 81064ec:	689a      	ldr	r2, [r3, #8]
 81064ee:	4b0c      	ldr	r3, [pc, #48]	; (8106520 <HAL_TIM_Base_Start_IT+0x68>)
 81064f0:	4013      	ands	r3, r2
 81064f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81064f4:	68fb      	ldr	r3, [r7, #12]
 81064f6:	2b06      	cmp	r3, #6
 81064f8:	d00b      	beq.n	8106512 <HAL_TIM_Base_Start_IT+0x5a>
 81064fa:	68fb      	ldr	r3, [r7, #12]
 81064fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106500:	d007      	beq.n	8106512 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	681b      	ldr	r3, [r3, #0]
 8106506:	681a      	ldr	r2, [r3, #0]
 8106508:	687b      	ldr	r3, [r7, #4]
 810650a:	681b      	ldr	r3, [r3, #0]
 810650c:	f042 0201 	orr.w	r2, r2, #1
 8106510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8106512:	2300      	movs	r3, #0
}
 8106514:	4618      	mov	r0, r3
 8106516:	3714      	adds	r7, #20
 8106518:	46bd      	mov	sp, r7
 810651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810651e:	4770      	bx	lr
 8106520:	00010007 	.word	0x00010007

08106524 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106524:	b580      	push	{r7, lr}
 8106526:	b082      	sub	sp, #8
 8106528:	af00      	add	r7, sp, #0
 810652a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810652c:	687b      	ldr	r3, [r7, #4]
 810652e:	681b      	ldr	r3, [r3, #0]
 8106530:	691b      	ldr	r3, [r3, #16]
 8106532:	f003 0302 	and.w	r3, r3, #2
 8106536:	2b02      	cmp	r3, #2
 8106538:	d122      	bne.n	8106580 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810653a:	687b      	ldr	r3, [r7, #4]
 810653c:	681b      	ldr	r3, [r3, #0]
 810653e:	68db      	ldr	r3, [r3, #12]
 8106540:	f003 0302 	and.w	r3, r3, #2
 8106544:	2b02      	cmp	r3, #2
 8106546:	d11b      	bne.n	8106580 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8106548:	687b      	ldr	r3, [r7, #4]
 810654a:	681b      	ldr	r3, [r3, #0]
 810654c:	f06f 0202 	mvn.w	r2, #2
 8106550:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106552:	687b      	ldr	r3, [r7, #4]
 8106554:	2201      	movs	r2, #1
 8106556:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106558:	687b      	ldr	r3, [r7, #4]
 810655a:	681b      	ldr	r3, [r3, #0]
 810655c:	699b      	ldr	r3, [r3, #24]
 810655e:	f003 0303 	and.w	r3, r3, #3
 8106562:	2b00      	cmp	r3, #0
 8106564:	d003      	beq.n	810656e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106566:	6878      	ldr	r0, [r7, #4]
 8106568:	f000 f905 	bl	8106776 <HAL_TIM_IC_CaptureCallback>
 810656c:	e005      	b.n	810657a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810656e:	6878      	ldr	r0, [r7, #4]
 8106570:	f000 f8f7 	bl	8106762 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106574:	6878      	ldr	r0, [r7, #4]
 8106576:	f000 f908 	bl	810678a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810657a:	687b      	ldr	r3, [r7, #4]
 810657c:	2200      	movs	r2, #0
 810657e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8106580:	687b      	ldr	r3, [r7, #4]
 8106582:	681b      	ldr	r3, [r3, #0]
 8106584:	691b      	ldr	r3, [r3, #16]
 8106586:	f003 0304 	and.w	r3, r3, #4
 810658a:	2b04      	cmp	r3, #4
 810658c:	d122      	bne.n	81065d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	681b      	ldr	r3, [r3, #0]
 8106592:	68db      	ldr	r3, [r3, #12]
 8106594:	f003 0304 	and.w	r3, r3, #4
 8106598:	2b04      	cmp	r3, #4
 810659a:	d11b      	bne.n	81065d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810659c:	687b      	ldr	r3, [r7, #4]
 810659e:	681b      	ldr	r3, [r3, #0]
 81065a0:	f06f 0204 	mvn.w	r2, #4
 81065a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81065a6:	687b      	ldr	r3, [r7, #4]
 81065a8:	2202      	movs	r2, #2
 81065aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81065ac:	687b      	ldr	r3, [r7, #4]
 81065ae:	681b      	ldr	r3, [r3, #0]
 81065b0:	699b      	ldr	r3, [r3, #24]
 81065b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81065b6:	2b00      	cmp	r3, #0
 81065b8:	d003      	beq.n	81065c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81065ba:	6878      	ldr	r0, [r7, #4]
 81065bc:	f000 f8db 	bl	8106776 <HAL_TIM_IC_CaptureCallback>
 81065c0:	e005      	b.n	81065ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81065c2:	6878      	ldr	r0, [r7, #4]
 81065c4:	f000 f8cd 	bl	8106762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81065c8:	6878      	ldr	r0, [r7, #4]
 81065ca:	f000 f8de 	bl	810678a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81065ce:	687b      	ldr	r3, [r7, #4]
 81065d0:	2200      	movs	r2, #0
 81065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81065d4:	687b      	ldr	r3, [r7, #4]
 81065d6:	681b      	ldr	r3, [r3, #0]
 81065d8:	691b      	ldr	r3, [r3, #16]
 81065da:	f003 0308 	and.w	r3, r3, #8
 81065de:	2b08      	cmp	r3, #8
 81065e0:	d122      	bne.n	8106628 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81065e2:	687b      	ldr	r3, [r7, #4]
 81065e4:	681b      	ldr	r3, [r3, #0]
 81065e6:	68db      	ldr	r3, [r3, #12]
 81065e8:	f003 0308 	and.w	r3, r3, #8
 81065ec:	2b08      	cmp	r3, #8
 81065ee:	d11b      	bne.n	8106628 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81065f0:	687b      	ldr	r3, [r7, #4]
 81065f2:	681b      	ldr	r3, [r3, #0]
 81065f4:	f06f 0208 	mvn.w	r2, #8
 81065f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81065fa:	687b      	ldr	r3, [r7, #4]
 81065fc:	2204      	movs	r2, #4
 81065fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8106600:	687b      	ldr	r3, [r7, #4]
 8106602:	681b      	ldr	r3, [r3, #0]
 8106604:	69db      	ldr	r3, [r3, #28]
 8106606:	f003 0303 	and.w	r3, r3, #3
 810660a:	2b00      	cmp	r3, #0
 810660c:	d003      	beq.n	8106616 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810660e:	6878      	ldr	r0, [r7, #4]
 8106610:	f000 f8b1 	bl	8106776 <HAL_TIM_IC_CaptureCallback>
 8106614:	e005      	b.n	8106622 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8106616:	6878      	ldr	r0, [r7, #4]
 8106618:	f000 f8a3 	bl	8106762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810661c:	6878      	ldr	r0, [r7, #4]
 810661e:	f000 f8b4 	bl	810678a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106622:	687b      	ldr	r3, [r7, #4]
 8106624:	2200      	movs	r2, #0
 8106626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8106628:	687b      	ldr	r3, [r7, #4]
 810662a:	681b      	ldr	r3, [r3, #0]
 810662c:	691b      	ldr	r3, [r3, #16]
 810662e:	f003 0310 	and.w	r3, r3, #16
 8106632:	2b10      	cmp	r3, #16
 8106634:	d122      	bne.n	810667c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8106636:	687b      	ldr	r3, [r7, #4]
 8106638:	681b      	ldr	r3, [r3, #0]
 810663a:	68db      	ldr	r3, [r3, #12]
 810663c:	f003 0310 	and.w	r3, r3, #16
 8106640:	2b10      	cmp	r3, #16
 8106642:	d11b      	bne.n	810667c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8106644:	687b      	ldr	r3, [r7, #4]
 8106646:	681b      	ldr	r3, [r3, #0]
 8106648:	f06f 0210 	mvn.w	r2, #16
 810664c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810664e:	687b      	ldr	r3, [r7, #4]
 8106650:	2208      	movs	r2, #8
 8106652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106654:	687b      	ldr	r3, [r7, #4]
 8106656:	681b      	ldr	r3, [r3, #0]
 8106658:	69db      	ldr	r3, [r3, #28]
 810665a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810665e:	2b00      	cmp	r3, #0
 8106660:	d003      	beq.n	810666a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106662:	6878      	ldr	r0, [r7, #4]
 8106664:	f000 f887 	bl	8106776 <HAL_TIM_IC_CaptureCallback>
 8106668:	e005      	b.n	8106676 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810666a:	6878      	ldr	r0, [r7, #4]
 810666c:	f000 f879 	bl	8106762 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106670:	6878      	ldr	r0, [r7, #4]
 8106672:	f000 f88a 	bl	810678a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106676:	687b      	ldr	r3, [r7, #4]
 8106678:	2200      	movs	r2, #0
 810667a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810667c:	687b      	ldr	r3, [r7, #4]
 810667e:	681b      	ldr	r3, [r3, #0]
 8106680:	691b      	ldr	r3, [r3, #16]
 8106682:	f003 0301 	and.w	r3, r3, #1
 8106686:	2b01      	cmp	r3, #1
 8106688:	d10e      	bne.n	81066a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810668a:	687b      	ldr	r3, [r7, #4]
 810668c:	681b      	ldr	r3, [r3, #0]
 810668e:	68db      	ldr	r3, [r3, #12]
 8106690:	f003 0301 	and.w	r3, r3, #1
 8106694:	2b01      	cmp	r3, #1
 8106696:	d107      	bne.n	81066a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8106698:	687b      	ldr	r3, [r7, #4]
 810669a:	681b      	ldr	r3, [r3, #0]
 810669c:	f06f 0201 	mvn.w	r2, #1
 81066a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 81066a2:	6878      	ldr	r0, [r7, #4]
 81066a4:	f7fe fd4e 	bl	8105144 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 81066a8:	687b      	ldr	r3, [r7, #4]
 81066aa:	681b      	ldr	r3, [r3, #0]
 81066ac:	691b      	ldr	r3, [r3, #16]
 81066ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81066b2:	2b80      	cmp	r3, #128	; 0x80
 81066b4:	d10e      	bne.n	81066d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81066b6:	687b      	ldr	r3, [r7, #4]
 81066b8:	681b      	ldr	r3, [r3, #0]
 81066ba:	68db      	ldr	r3, [r3, #12]
 81066bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81066c0:	2b80      	cmp	r3, #128	; 0x80
 81066c2:	d107      	bne.n	81066d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	681b      	ldr	r3, [r3, #0]
 81066c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81066cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81066ce:	6878      	ldr	r0, [r7, #4]
 81066d0:	f000 f914 	bl	81068fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81066d4:	687b      	ldr	r3, [r7, #4]
 81066d6:	681b      	ldr	r3, [r3, #0]
 81066d8:	691b      	ldr	r3, [r3, #16]
 81066da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81066de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81066e2:	d10e      	bne.n	8106702 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81066e4:	687b      	ldr	r3, [r7, #4]
 81066e6:	681b      	ldr	r3, [r3, #0]
 81066e8:	68db      	ldr	r3, [r3, #12]
 81066ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81066ee:	2b80      	cmp	r3, #128	; 0x80
 81066f0:	d107      	bne.n	8106702 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81066f2:	687b      	ldr	r3, [r7, #4]
 81066f4:	681b      	ldr	r3, [r3, #0]
 81066f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81066fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81066fc:	6878      	ldr	r0, [r7, #4]
 81066fe:	f000 f907 	bl	8106910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8106702:	687b      	ldr	r3, [r7, #4]
 8106704:	681b      	ldr	r3, [r3, #0]
 8106706:	691b      	ldr	r3, [r3, #16]
 8106708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810670c:	2b40      	cmp	r3, #64	; 0x40
 810670e:	d10e      	bne.n	810672e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8106710:	687b      	ldr	r3, [r7, #4]
 8106712:	681b      	ldr	r3, [r3, #0]
 8106714:	68db      	ldr	r3, [r3, #12]
 8106716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810671a:	2b40      	cmp	r3, #64	; 0x40
 810671c:	d107      	bne.n	810672e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810671e:	687b      	ldr	r3, [r7, #4]
 8106720:	681b      	ldr	r3, [r3, #0]
 8106722:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8106726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106728:	6878      	ldr	r0, [r7, #4]
 810672a:	f000 f838 	bl	810679e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810672e:	687b      	ldr	r3, [r7, #4]
 8106730:	681b      	ldr	r3, [r3, #0]
 8106732:	691b      	ldr	r3, [r3, #16]
 8106734:	f003 0320 	and.w	r3, r3, #32
 8106738:	2b20      	cmp	r3, #32
 810673a:	d10e      	bne.n	810675a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810673c:	687b      	ldr	r3, [r7, #4]
 810673e:	681b      	ldr	r3, [r3, #0]
 8106740:	68db      	ldr	r3, [r3, #12]
 8106742:	f003 0320 	and.w	r3, r3, #32
 8106746:	2b20      	cmp	r3, #32
 8106748:	d107      	bne.n	810675a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810674a:	687b      	ldr	r3, [r7, #4]
 810674c:	681b      	ldr	r3, [r3, #0]
 810674e:	f06f 0220 	mvn.w	r2, #32
 8106752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106754:	6878      	ldr	r0, [r7, #4]
 8106756:	f000 f8c7 	bl	81068e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810675a:	bf00      	nop
 810675c:	3708      	adds	r7, #8
 810675e:	46bd      	mov	sp, r7
 8106760:	bd80      	pop	{r7, pc}

08106762 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106762:	b480      	push	{r7}
 8106764:	b083      	sub	sp, #12
 8106766:	af00      	add	r7, sp, #0
 8106768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810676a:	bf00      	nop
 810676c:	370c      	adds	r7, #12
 810676e:	46bd      	mov	sp, r7
 8106770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106774:	4770      	bx	lr

08106776 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8106776:	b480      	push	{r7}
 8106778:	b083      	sub	sp, #12
 810677a:	af00      	add	r7, sp, #0
 810677c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810677e:	bf00      	nop
 8106780:	370c      	adds	r7, #12
 8106782:	46bd      	mov	sp, r7
 8106784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106788:	4770      	bx	lr

0810678a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810678a:	b480      	push	{r7}
 810678c:	b083      	sub	sp, #12
 810678e:	af00      	add	r7, sp, #0
 8106790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8106792:	bf00      	nop
 8106794:	370c      	adds	r7, #12
 8106796:	46bd      	mov	sp, r7
 8106798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810679c:	4770      	bx	lr

0810679e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810679e:	b480      	push	{r7}
 81067a0:	b083      	sub	sp, #12
 81067a2:	af00      	add	r7, sp, #0
 81067a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 81067a6:	bf00      	nop
 81067a8:	370c      	adds	r7, #12
 81067aa:	46bd      	mov	sp, r7
 81067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81067b0:	4770      	bx	lr
	...

081067b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 81067b4:	b480      	push	{r7}
 81067b6:	b085      	sub	sp, #20
 81067b8:	af00      	add	r7, sp, #0
 81067ba:	6078      	str	r0, [r7, #4]
 81067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 81067be:	687b      	ldr	r3, [r7, #4]
 81067c0:	681b      	ldr	r3, [r3, #0]
 81067c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 81067c4:	687b      	ldr	r3, [r7, #4]
 81067c6:	4a40      	ldr	r2, [pc, #256]	; (81068c8 <TIM_Base_SetConfig+0x114>)
 81067c8:	4293      	cmp	r3, r2
 81067ca:	d013      	beq.n	81067f4 <TIM_Base_SetConfig+0x40>
 81067cc:	687b      	ldr	r3, [r7, #4]
 81067ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81067d2:	d00f      	beq.n	81067f4 <TIM_Base_SetConfig+0x40>
 81067d4:	687b      	ldr	r3, [r7, #4]
 81067d6:	4a3d      	ldr	r2, [pc, #244]	; (81068cc <TIM_Base_SetConfig+0x118>)
 81067d8:	4293      	cmp	r3, r2
 81067da:	d00b      	beq.n	81067f4 <TIM_Base_SetConfig+0x40>
 81067dc:	687b      	ldr	r3, [r7, #4]
 81067de:	4a3c      	ldr	r2, [pc, #240]	; (81068d0 <TIM_Base_SetConfig+0x11c>)
 81067e0:	4293      	cmp	r3, r2
 81067e2:	d007      	beq.n	81067f4 <TIM_Base_SetConfig+0x40>
 81067e4:	687b      	ldr	r3, [r7, #4]
 81067e6:	4a3b      	ldr	r2, [pc, #236]	; (81068d4 <TIM_Base_SetConfig+0x120>)
 81067e8:	4293      	cmp	r3, r2
 81067ea:	d003      	beq.n	81067f4 <TIM_Base_SetConfig+0x40>
 81067ec:	687b      	ldr	r3, [r7, #4]
 81067ee:	4a3a      	ldr	r2, [pc, #232]	; (81068d8 <TIM_Base_SetConfig+0x124>)
 81067f0:	4293      	cmp	r3, r2
 81067f2:	d108      	bne.n	8106806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 81067f4:	68fb      	ldr	r3, [r7, #12]
 81067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81067fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 81067fc:	683b      	ldr	r3, [r7, #0]
 81067fe:	685b      	ldr	r3, [r3, #4]
 8106800:	68fa      	ldr	r2, [r7, #12]
 8106802:	4313      	orrs	r3, r2
 8106804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106806:	687b      	ldr	r3, [r7, #4]
 8106808:	4a2f      	ldr	r2, [pc, #188]	; (81068c8 <TIM_Base_SetConfig+0x114>)
 810680a:	4293      	cmp	r3, r2
 810680c:	d01f      	beq.n	810684e <TIM_Base_SetConfig+0x9a>
 810680e:	687b      	ldr	r3, [r7, #4]
 8106810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106814:	d01b      	beq.n	810684e <TIM_Base_SetConfig+0x9a>
 8106816:	687b      	ldr	r3, [r7, #4]
 8106818:	4a2c      	ldr	r2, [pc, #176]	; (81068cc <TIM_Base_SetConfig+0x118>)
 810681a:	4293      	cmp	r3, r2
 810681c:	d017      	beq.n	810684e <TIM_Base_SetConfig+0x9a>
 810681e:	687b      	ldr	r3, [r7, #4]
 8106820:	4a2b      	ldr	r2, [pc, #172]	; (81068d0 <TIM_Base_SetConfig+0x11c>)
 8106822:	4293      	cmp	r3, r2
 8106824:	d013      	beq.n	810684e <TIM_Base_SetConfig+0x9a>
 8106826:	687b      	ldr	r3, [r7, #4]
 8106828:	4a2a      	ldr	r2, [pc, #168]	; (81068d4 <TIM_Base_SetConfig+0x120>)
 810682a:	4293      	cmp	r3, r2
 810682c:	d00f      	beq.n	810684e <TIM_Base_SetConfig+0x9a>
 810682e:	687b      	ldr	r3, [r7, #4]
 8106830:	4a29      	ldr	r2, [pc, #164]	; (81068d8 <TIM_Base_SetConfig+0x124>)
 8106832:	4293      	cmp	r3, r2
 8106834:	d00b      	beq.n	810684e <TIM_Base_SetConfig+0x9a>
 8106836:	687b      	ldr	r3, [r7, #4]
 8106838:	4a28      	ldr	r2, [pc, #160]	; (81068dc <TIM_Base_SetConfig+0x128>)
 810683a:	4293      	cmp	r3, r2
 810683c:	d007      	beq.n	810684e <TIM_Base_SetConfig+0x9a>
 810683e:	687b      	ldr	r3, [r7, #4]
 8106840:	4a27      	ldr	r2, [pc, #156]	; (81068e0 <TIM_Base_SetConfig+0x12c>)
 8106842:	4293      	cmp	r3, r2
 8106844:	d003      	beq.n	810684e <TIM_Base_SetConfig+0x9a>
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	4a26      	ldr	r2, [pc, #152]	; (81068e4 <TIM_Base_SetConfig+0x130>)
 810684a:	4293      	cmp	r3, r2
 810684c:	d108      	bne.n	8106860 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810684e:	68fb      	ldr	r3, [r7, #12]
 8106850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106856:	683b      	ldr	r3, [r7, #0]
 8106858:	68db      	ldr	r3, [r3, #12]
 810685a:	68fa      	ldr	r2, [r7, #12]
 810685c:	4313      	orrs	r3, r2
 810685e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106860:	68fb      	ldr	r3, [r7, #12]
 8106862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8106866:	683b      	ldr	r3, [r7, #0]
 8106868:	695b      	ldr	r3, [r3, #20]
 810686a:	4313      	orrs	r3, r2
 810686c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810686e:	687b      	ldr	r3, [r7, #4]
 8106870:	68fa      	ldr	r2, [r7, #12]
 8106872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106874:	683b      	ldr	r3, [r7, #0]
 8106876:	689a      	ldr	r2, [r3, #8]
 8106878:	687b      	ldr	r3, [r7, #4]
 810687a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810687c:	683b      	ldr	r3, [r7, #0]
 810687e:	681a      	ldr	r2, [r3, #0]
 8106880:	687b      	ldr	r3, [r7, #4]
 8106882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106884:	687b      	ldr	r3, [r7, #4]
 8106886:	4a10      	ldr	r2, [pc, #64]	; (81068c8 <TIM_Base_SetConfig+0x114>)
 8106888:	4293      	cmp	r3, r2
 810688a:	d00f      	beq.n	81068ac <TIM_Base_SetConfig+0xf8>
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	4a12      	ldr	r2, [pc, #72]	; (81068d8 <TIM_Base_SetConfig+0x124>)
 8106890:	4293      	cmp	r3, r2
 8106892:	d00b      	beq.n	81068ac <TIM_Base_SetConfig+0xf8>
 8106894:	687b      	ldr	r3, [r7, #4]
 8106896:	4a11      	ldr	r2, [pc, #68]	; (81068dc <TIM_Base_SetConfig+0x128>)
 8106898:	4293      	cmp	r3, r2
 810689a:	d007      	beq.n	81068ac <TIM_Base_SetConfig+0xf8>
 810689c:	687b      	ldr	r3, [r7, #4]
 810689e:	4a10      	ldr	r2, [pc, #64]	; (81068e0 <TIM_Base_SetConfig+0x12c>)
 81068a0:	4293      	cmp	r3, r2
 81068a2:	d003      	beq.n	81068ac <TIM_Base_SetConfig+0xf8>
 81068a4:	687b      	ldr	r3, [r7, #4]
 81068a6:	4a0f      	ldr	r2, [pc, #60]	; (81068e4 <TIM_Base_SetConfig+0x130>)
 81068a8:	4293      	cmp	r3, r2
 81068aa:	d103      	bne.n	81068b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 81068ac:	683b      	ldr	r3, [r7, #0]
 81068ae:	691a      	ldr	r2, [r3, #16]
 81068b0:	687b      	ldr	r3, [r7, #4]
 81068b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 81068b4:	687b      	ldr	r3, [r7, #4]
 81068b6:	2201      	movs	r2, #1
 81068b8:	615a      	str	r2, [r3, #20]
}
 81068ba:	bf00      	nop
 81068bc:	3714      	adds	r7, #20
 81068be:	46bd      	mov	sp, r7
 81068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068c4:	4770      	bx	lr
 81068c6:	bf00      	nop
 81068c8:	40010000 	.word	0x40010000
 81068cc:	40000400 	.word	0x40000400
 81068d0:	40000800 	.word	0x40000800
 81068d4:	40000c00 	.word	0x40000c00
 81068d8:	40010400 	.word	0x40010400
 81068dc:	40014000 	.word	0x40014000
 81068e0:	40014400 	.word	0x40014400
 81068e4:	40014800 	.word	0x40014800

081068e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81068e8:	b480      	push	{r7}
 81068ea:	b083      	sub	sp, #12
 81068ec:	af00      	add	r7, sp, #0
 81068ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 81068f0:	bf00      	nop
 81068f2:	370c      	adds	r7, #12
 81068f4:	46bd      	mov	sp, r7
 81068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81068fa:	4770      	bx	lr

081068fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81068fc:	b480      	push	{r7}
 81068fe:	b083      	sub	sp, #12
 8106900:	af00      	add	r7, sp, #0
 8106902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8106904:	bf00      	nop
 8106906:	370c      	adds	r7, #12
 8106908:	46bd      	mov	sp, r7
 810690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810690e:	4770      	bx	lr

08106910 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8106910:	b480      	push	{r7}
 8106912:	b083      	sub	sp, #12
 8106914:	af00      	add	r7, sp, #0
 8106916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8106918:	bf00      	nop
 810691a:	370c      	adds	r7, #12
 810691c:	46bd      	mov	sp, r7
 810691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106922:	4770      	bx	lr

08106924 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8106924:	b480      	push	{r7}
 8106926:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8106928:	4b0b      	ldr	r3, [pc, #44]	; (8106958 <SystemInit+0x34>)
 810692a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810692e:	4a0a      	ldr	r2, [pc, #40]	; (8106958 <SystemInit+0x34>)
 8106930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8106934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8106938:	4b07      	ldr	r3, [pc, #28]	; (8106958 <SystemInit+0x34>)
 810693a:	691b      	ldr	r3, [r3, #16]
 810693c:	4a06      	ldr	r2, [pc, #24]	; (8106958 <SystemInit+0x34>)
 810693e:	f043 0310 	orr.w	r3, r3, #16
 8106942:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8106944:	4b04      	ldr	r3, [pc, #16]	; (8106958 <SystemInit+0x34>)
 8106946:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810694a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810694c:	bf00      	nop
 810694e:	46bd      	mov	sp, r7
 8106950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106954:	4770      	bx	lr
 8106956:	bf00      	nop
 8106958:	e000ed00 	.word	0xe000ed00

0810695c <_Znwj>:
  * @param[in]  size_t size
  *
  * @return void *
********************************************************************************/
void * operator new(size_t size) noexcept
{
 810695c:	b580      	push	{r7, lr}
 810695e:	b084      	sub	sp, #16
 8106960:	af00      	add	r7, sp, #0
 8106962:	6078      	str	r0, [r7, #4]
	void *ptr;

	if ( IS_NOT( size ) )
 8106964:	687b      	ldr	r3, [r7, #4]
 8106966:	2b00      	cmp	r3, #0
 8106968:	d102      	bne.n	8106970 <_Znwj+0x14>
	{
		++size;
 810696a:	687b      	ldr	r3, [r7, #4]
 810696c:	3301      	adds	r3, #1
 810696e:	607b      	str	r3, [r7, #4]
	}

	ptr = malloc(size);
 8106970:	6878      	ldr	r0, [r7, #4]
 8106972:	f7fe fd15 	bl	81053a0 <malloc>
 8106976:	4603      	mov	r3, r0
 8106978:	60fb      	str	r3, [r7, #12]

	return ptr;
 810697a:	68fb      	ldr	r3, [r7, #12]
}
 810697c:	4618      	mov	r0, r3
 810697e:	3710      	adds	r7, #16
 8106980:	46bd      	mov	sp, r7
 8106982:	bd80      	pop	{r7, pc}

08106984 <_ZdlPv>:
  * @param[in]  void * ptr
  *
  * @return none
********************************************************************************/
void operator delete(void* ptr) noexcept
{
 8106984:	b580      	push	{r7, lr}
 8106986:	b082      	sub	sp, #8
 8106988:	af00      	add	r7, sp, #0
 810698a:	6078      	str	r0, [r7, #4]
	free(ptr);
 810698c:	6878      	ldr	r0, [r7, #4]
 810698e:	f7fe fda9 	bl	81054e4 <free>
}
 8106992:	bf00      	nop
 8106994:	3708      	adds	r7, #8
 8106996:	46bd      	mov	sp, r7
 8106998:	bd80      	pop	{r7, pc}

0810699a <_ZdlPvj>:
  * @param[in]  size_t size
	*
  * @return none
********************************************************************************/
void operator delete(void* ptr, size_t size) noexcept
{
 810699a:	b580      	push	{r7, lr}
 810699c:	b082      	sub	sp, #8
 810699e:	af00      	add	r7, sp, #0
 81069a0:	6078      	str	r0, [r7, #4]
 81069a2:	6039      	str	r1, [r7, #0]
	free(ptr);
 81069a4:	6878      	ldr	r0, [r7, #4]
 81069a6:	f7fe fd9d 	bl	81054e4 <free>
	__SUPRESS_UNUSED_VAR(size);
}
 81069aa:	bf00      	nop
 81069ac:	3708      	adds	r7, #8
 81069ae:	46bd      	mov	sp, r7
 81069b0:	bd80      	pop	{r7, pc}

081069b2 <_ZdaPv>:
 81069b2:	f7ff bfe7 	b.w	8106984 <_ZdlPv>

081069b6 <_Znaj>:
 81069b6:	f7ff bfd1 	b.w	810695c <_Znwj>
	...

081069bc <__libc_init_array>:
 81069bc:	b570      	push	{r4, r5, r6, lr}
 81069be:	4d0d      	ldr	r5, [pc, #52]	; (81069f4 <__libc_init_array+0x38>)
 81069c0:	4c0d      	ldr	r4, [pc, #52]	; (81069f8 <__libc_init_array+0x3c>)
 81069c2:	1b64      	subs	r4, r4, r5
 81069c4:	10a4      	asrs	r4, r4, #2
 81069c6:	2600      	movs	r6, #0
 81069c8:	42a6      	cmp	r6, r4
 81069ca:	d109      	bne.n	81069e0 <__libc_init_array+0x24>
 81069cc:	4d0b      	ldr	r5, [pc, #44]	; (81069fc <__libc_init_array+0x40>)
 81069ce:	4c0c      	ldr	r4, [pc, #48]	; (8106a00 <__libc_init_array+0x44>)
 81069d0:	f000 f884 	bl	8106adc <_init>
 81069d4:	1b64      	subs	r4, r4, r5
 81069d6:	10a4      	asrs	r4, r4, #2
 81069d8:	2600      	movs	r6, #0
 81069da:	42a6      	cmp	r6, r4
 81069dc:	d105      	bne.n	81069ea <__libc_init_array+0x2e>
 81069de:	bd70      	pop	{r4, r5, r6, pc}
 81069e0:	f855 3b04 	ldr.w	r3, [r5], #4
 81069e4:	4798      	blx	r3
 81069e6:	3601      	adds	r6, #1
 81069e8:	e7ee      	b.n	81069c8 <__libc_init_array+0xc>
 81069ea:	f855 3b04 	ldr.w	r3, [r5], #4
 81069ee:	4798      	blx	r3
 81069f0:	3601      	adds	r6, #1
 81069f2:	e7f2      	b.n	81069da <__libc_init_array+0x1e>
 81069f4:	08106c98 	.word	0x08106c98
 81069f8:	08106c98 	.word	0x08106c98
 81069fc:	08106c98 	.word	0x08106c98
 8106a00:	08106c9c 	.word	0x08106c9c

08106a04 <abort>:
 8106a04:	b508      	push	{r3, lr}
 8106a06:	2006      	movs	r0, #6
 8106a08:	f000 f83a 	bl	8106a80 <raise>
 8106a0c:	2001      	movs	r0, #1
 8106a0e:	f000 f863 	bl	8106ad8 <_exit>

08106a12 <memcpy>:
 8106a12:	440a      	add	r2, r1
 8106a14:	4291      	cmp	r1, r2
 8106a16:	f100 33ff 	add.w	r3, r0, #4294967295
 8106a1a:	d100      	bne.n	8106a1e <memcpy+0xc>
 8106a1c:	4770      	bx	lr
 8106a1e:	b510      	push	{r4, lr}
 8106a20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8106a24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8106a28:	4291      	cmp	r1, r2
 8106a2a:	d1f9      	bne.n	8106a20 <memcpy+0xe>
 8106a2c:	bd10      	pop	{r4, pc}

08106a2e <_raise_r>:
 8106a2e:	291f      	cmp	r1, #31
 8106a30:	b538      	push	{r3, r4, r5, lr}
 8106a32:	4604      	mov	r4, r0
 8106a34:	460d      	mov	r5, r1
 8106a36:	d904      	bls.n	8106a42 <_raise_r+0x14>
 8106a38:	2316      	movs	r3, #22
 8106a3a:	6003      	str	r3, [r0, #0]
 8106a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8106a40:	bd38      	pop	{r3, r4, r5, pc}
 8106a42:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8106a44:	b112      	cbz	r2, 8106a4c <_raise_r+0x1e>
 8106a46:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8106a4a:	b94b      	cbnz	r3, 8106a60 <_raise_r+0x32>
 8106a4c:	4620      	mov	r0, r4
 8106a4e:	f000 f831 	bl	8106ab4 <_getpid_r>
 8106a52:	462a      	mov	r2, r5
 8106a54:	4601      	mov	r1, r0
 8106a56:	4620      	mov	r0, r4
 8106a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8106a5c:	f000 b818 	b.w	8106a90 <_kill_r>
 8106a60:	2b01      	cmp	r3, #1
 8106a62:	d00a      	beq.n	8106a7a <_raise_r+0x4c>
 8106a64:	1c59      	adds	r1, r3, #1
 8106a66:	d103      	bne.n	8106a70 <_raise_r+0x42>
 8106a68:	2316      	movs	r3, #22
 8106a6a:	6003      	str	r3, [r0, #0]
 8106a6c:	2001      	movs	r0, #1
 8106a6e:	e7e7      	b.n	8106a40 <_raise_r+0x12>
 8106a70:	2400      	movs	r4, #0
 8106a72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8106a76:	4628      	mov	r0, r5
 8106a78:	4798      	blx	r3
 8106a7a:	2000      	movs	r0, #0
 8106a7c:	e7e0      	b.n	8106a40 <_raise_r+0x12>
	...

08106a80 <raise>:
 8106a80:	4b02      	ldr	r3, [pc, #8]	; (8106a8c <raise+0xc>)
 8106a82:	4601      	mov	r1, r0
 8106a84:	6818      	ldr	r0, [r3, #0]
 8106a86:	f7ff bfd2 	b.w	8106a2e <_raise_r>
 8106a8a:	bf00      	nop
 8106a8c:	10002010 	.word	0x10002010

08106a90 <_kill_r>:
 8106a90:	b538      	push	{r3, r4, r5, lr}
 8106a92:	4d07      	ldr	r5, [pc, #28]	; (8106ab0 <_kill_r+0x20>)
 8106a94:	2300      	movs	r3, #0
 8106a96:	4604      	mov	r4, r0
 8106a98:	4608      	mov	r0, r1
 8106a9a:	4611      	mov	r1, r2
 8106a9c:	602b      	str	r3, [r5, #0]
 8106a9e:	f000 f813 	bl	8106ac8 <_kill>
 8106aa2:	1c43      	adds	r3, r0, #1
 8106aa4:	d102      	bne.n	8106aac <_kill_r+0x1c>
 8106aa6:	682b      	ldr	r3, [r5, #0]
 8106aa8:	b103      	cbz	r3, 8106aac <_kill_r+0x1c>
 8106aaa:	6023      	str	r3, [r4, #0]
 8106aac:	bd38      	pop	{r3, r4, r5, pc}
 8106aae:	bf00      	nop
 8106ab0:	100020e0 	.word	0x100020e0

08106ab4 <_getpid_r>:
 8106ab4:	f000 b800 	b.w	8106ab8 <_getpid>

08106ab8 <_getpid>:
 8106ab8:	4b02      	ldr	r3, [pc, #8]	; (8106ac4 <_getpid+0xc>)
 8106aba:	2258      	movs	r2, #88	; 0x58
 8106abc:	601a      	str	r2, [r3, #0]
 8106abe:	f04f 30ff 	mov.w	r0, #4294967295
 8106ac2:	4770      	bx	lr
 8106ac4:	100020e0 	.word	0x100020e0

08106ac8 <_kill>:
 8106ac8:	4b02      	ldr	r3, [pc, #8]	; (8106ad4 <_kill+0xc>)
 8106aca:	2258      	movs	r2, #88	; 0x58
 8106acc:	601a      	str	r2, [r3, #0]
 8106ace:	f04f 30ff 	mov.w	r0, #4294967295
 8106ad2:	4770      	bx	lr
 8106ad4:	100020e0 	.word	0x100020e0

08106ad8 <_exit>:
 8106ad8:	e7fe      	b.n	8106ad8 <_exit>
 8106ada:	bf00      	nop

08106adc <_init>:
 8106adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106ade:	bf00      	nop
 8106ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106ae2:	bc08      	pop	{r3}
 8106ae4:	469e      	mov	lr, r3
 8106ae6:	4770      	bx	lr

08106ae8 <_fini>:
 8106ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106aea:	bf00      	nop
 8106aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106aee:	bc08      	pop	{r3}
 8106af0:	469e      	mov	lr, r3
 8106af2:	4770      	bx	lr
