
../../../../../../Cosmos/generated/build/system/CM4/bin/CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .program_default_CM7_section_init 00000008  20001400  08100298  00021400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .program_default_CM7_section_noInit 00000000  20001408  20001408  000702dc  2**0
                  CONTENTS
  3 .program_blinking_led_CM7_section_init 0000001c  20001800  081002a0  00021800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .program_blinking_led_CM7_section_noInit 00000000  2000181c  2000181c  000702dc  2**0
                  CONTENTS
  5 .program_default_CM4_section_init 00000008  10001400  081002bc  00031400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .program_default_CM4_section_noInit 00000000  10001408  10001408  000702dc  2**0
                  CONTENTS
  7 .program_blinking_led_CM4_section_init 00000018  10001800  081002c4  00031800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .program_blinking_led_CM4_section_noInit 00000000  10001818  10001818  000702dc  2**0
                  CONTENTS
  9 .program_logger_section_init 00000008  20001c00  081002dc  00031c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .program_logger_section_noInit 00000000  20001c08  20001c08  000702dc  2**0
                  CONTENTS
 11 .os_section_consts 00001000  38000000  081002e4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .os_section_vars 00000800  38008000  081012e4  00048000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .os_section_funcs 0000651c  08101ae4  08101ae4  00051ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .application_section_funcs_CM7 00000434  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .application_section_funcs_CM4 000002dc  08180000  08180000  00070000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text         00004058  08108000  08108000  00058000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .rodata       000001c0  0810c058  0810c058  0005c058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .ARM.extab    000000a4  0810c218  0810c218  0005c218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .ARM          00000120  0810c2bc  0810c2bc  0005c2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .init_array   00000004  0810c3dc  0810c3dc  0005c3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 21 .fini_array   00000004  0810c3e0  0810c3e0  0005c3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data         0000007c  30040000  0810c3e4  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 23 .bss          00000384  3004007c  0810c460  0006007c  2**2
                  ALLOC
 24 .ARM.attributes 0000002e  00000000  00000000  000702dc  2**0
                  CONTENTS, READONLY
 25 .debug_line   0002f4aa  00000000  00000000  0007030a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_info   0004bee5  00000000  00000000  0009f7b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_abbrev 000095d2  00000000  00000000  000eb699  2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_aranges 00001a20  00000000  00000000  000f4c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_str    00195dbc  00000000  00000000  000f6690  2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_ranges 00001510  00000000  00000000  0028c450  2**3
                  CONTENTS, READONLY, DEBUGGING
 31 .debug_macro  0004679e  00000000  00000000  0028d960  2**0
                  CONTENTS, READONLY, DEBUGGING
 32 .comment      00000079  00000000  00000000  002d40fe  2**0
                  CONTENTS, READONLY
 33 .debug_frame  00005a58  00000000  00000000  002d4178  2**2
                  CONTENTS, READONLY, DEBUGGING
 34 .stabstr      00000076  00000000  00000000  002d9bd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .os_section_funcs:

08101ae4 <alarm_expire>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void alarm_expire(CosmOS_AlarmVariableType *alarmVar)
{
 8101ae4:	b480      	push	{r7}
 8101ae6:	b08b      	sub	sp, #44	; 0x2c
 8101ae8:	af00      	add	r7, sp, #0
 8101aea:	6078      	str	r0, [r7, #4]
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	60bb      	str	r3, [r7, #8]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * alarm_getAlarmSchedulable(CosmOS_AlarmVariableType * alarm)
{
    return (CosmOS_SchedulableVariableType *)(alarm->cfg->schedulableVar);
 8101af0:	68bb      	ldr	r3, [r7, #8]
 8101af2:	681b      	ldr	r3, [r3, #0]
 8101af4:	681b      	ldr	r3, [r3, #0]
	CosmOS_SchedulableVariableType * schedulableVar;


	schedulableVar = alarm_getAlarmSchedulable(alarmVar);
 8101af6:	627b      	str	r3, [r7, #36]	; 0x24
 8101af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101afa:	613b      	str	r3, [r7, #16]
 8101afc:	f04f 33ff 	mov.w	r3, #4294967295
 8101b00:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_SchedulableStateType
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setState(CosmOS_SchedulableVariableType * schedulable, CosmOS_SchedulableStateType stateParam)
{
    schedulable->state = stateParam;
 8101b02:	693b      	ldr	r3, [r7, #16]
 8101b04:	68fa      	ldr	r2, [r7, #12]
 8101b06:	605a      	str	r2, [r3, #4]
}
 8101b08:	bf00      	nop
 8101b0a:	687b      	ldr	r3, [r7, #4]
 8101b0c:	61bb      	str	r3, [r7, #24]
 8101b0e:	2300      	movs	r3, #0
 8101b10:	617b      	str	r3, [r7, #20]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void alarm_setAlarmState(CosmOS_AlarmVariableType * alarm, CosmOS_AlarmStateType stateParam)
{
    alarm->state = stateParam;
 8101b12:	69bb      	ldr	r3, [r7, #24]
 8101b14:	697a      	ldr	r2, [r7, #20]
 8101b16:	605a      	str	r2, [r3, #4]
}
 8101b18:	bf00      	nop
 8101b1a:	687b      	ldr	r3, [r7, #4]
 8101b1c:	623b      	str	r3, [r7, #32]
 8101b1e:	2300      	movs	r3, #0
 8101b20:	61fb      	str	r3, [r7, #28]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void alarm_setAlarmTickCount(CosmOS_AlarmVariableType * alarm, BitWidthType tickCountParam)
{
    alarm->tickCount = tickCountParam;
 8101b22:	6a3b      	ldr	r3, [r7, #32]
 8101b24:	69fa      	ldr	r2, [r7, #28]
 8101b26:	609a      	str	r2, [r3, #8]
}
 8101b28:	bf00      	nop

	schedulable_setState(schedulableVar, SCHEDULABLE_STATE_ENUM__READY);
	alarm_setAlarmState(alarmVar,ALARM_STATE_ENUM__DISABLED);
	alarm_setAlarmTickCount(alarmVar,0);
};
 8101b2a:	bf00      	nop
 8101b2c:	372c      	adds	r7, #44	; 0x2c
 8101b2e:	46bd      	mov	sp, r7
 8101b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b34:	4770      	bx	lr

08101b36 <buffer_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_readArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8101b36:	b580      	push	{r7, lr}
 8101b38:	b098      	sub	sp, #96	; 0x60
 8101b3a:	af00      	add	r7, sp, #0
 8101b3c:	60f8      	str	r0, [r7, #12]
 8101b3e:	60b9      	str	r1, [r7, #8]
 8101b40:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8101b42:	f000 fda3 	bl	810268c <os_getOsVar>
 8101b46:	64f8      	str	r0, [r7, #76]	; 0x4c
  * @return CosmOS_CoreVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_CoreVariableType * CILcore_getCoreVar(void)
{
    uint32_t result;
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101b48:	464b      	mov	r3, r9
 8101b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8101b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8101b4e:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8101b50:	687a      	ldr	r2, [r7, #4]
 8101b52:	68b9      	ldr	r1, [r7, #8]
 8101b54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8101b56:	f000 fbc4 	bl	81022e2 <memoryProtection_isMemoryRegionProtected>
 8101b5a:	4603      	mov	r3, r0
 8101b5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8101b60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8101b64:	2b00      	cmp	r3, #0
 8101b66:	d003      	beq.n	8101b70 <buffer_readArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8101b68:	2305      	movs	r3, #5
 8101b6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101b6e:	e069      	b.n	8101c44 <buffer_readArray+0x10e>
 8101b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101b72:	623b      	str	r3, [r7, #32]
 8101b74:	68fb      	ldr	r3, [r7, #12]
 8101b76:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * os_getOsBufferVar(CosmOS_OsVariableType * osVar, BitWidthType bufferId)
{
    return (&(osVar->bufferVars[bufferId]));
 8101b78:	6a3b      	ldr	r3, [r7, #32]
 8101b7a:	689a      	ldr	r2, [r3, #8]
 8101b7c:	69fb      	ldr	r3, [r7, #28]
 8101b7e:	011b      	lsls	r3, r3, #4
 8101b80:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * readPermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8101b82:	643b      	str	r3, [r7, #64]	; 0x40
 8101b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101b86:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_PermissionsConfigurationType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_PermissionsConfigurationType * buffer_getBufferReadPermission(CosmOS_BufferVariableType * bufferVar)
{
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->readPermission);
 8101b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101b8a:	681b      	ldr	r3, [r3, #0]
 8101b8c:	68db      	ldr	r3, [r3, #12]

        readPermission = buffer_getBufferReadPermission( bufferVar );
 8101b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( readPermission, coreVar );
 8101b90:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8101b92:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8101b94:	f000 fe5c 	bl	8102850 <permission_tryAccess>
 8101b98:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8101b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101ba0:	d103      	bne.n	8101baa <buffer_readArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8101ba2:	2303      	movs	r3, #3
 8101ba4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101ba8:	e04c      	b.n	8101c44 <buffer_readArray+0x10e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101baa:	b672      	cpsid	i
}
 8101bac:	bf00      	nop
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void CILinterrupt_disableInterrupts(void)
{
		__disable_irq();
}
 8101bae:	bf00      	nop
 8101bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101bb2:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 8101bb4:	69bb      	ldr	r3, [r7, #24]
 8101bb6:	681b      	ldr	r3, [r3, #0]
 8101bb8:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8101bba:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 8101bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101bbe:	2b00      	cmp	r3, #0
 8101bc0:	d00a      	beq.n	8101bd8 <buffer_readArray+0xa2>
 8101bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101bc4:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8101bc6:	697b      	ldr	r3, [r7, #20]
 8101bc8:	681b      	ldr	r3, [r3, #0]
 8101bca:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 8101bcc:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 8101bce:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8101bd0:	f001 fb65 	bl	810329e <spinlock_trySpinlock>
 8101bd4:	6578      	str	r0, [r7, #84]	; 0x54
 8101bd6:	e001      	b.n	8101bdc <buffer_readArray+0xa6>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8101bd8:	2302      	movs	r3, #2
 8101bda:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8101bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101bde:	2b02      	cmp	r3, #2
 8101be0:	d12a      	bne.n	8101c38 <buffer_readArray+0x102>
 8101be2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101be4:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getFullCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return (bufferVar->fullCells);
 8101be6:	693b      	ldr	r3, [r7, #16]
 8101be8:	68db      	ldr	r3, [r3, #12]
			{
				fullCellsNum = buffer_getFullCellsNum( bufferVar );
 8101bea:	633b      	str	r3, [r7, #48]	; 0x30

				if ( fullCellsNum >= size)
 8101bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101bee:	687b      	ldr	r3, [r7, #4]
 8101bf0:	429a      	cmp	r2, r3
 8101bf2:	d316      	bcc.n	8101c22 <buffer_readArray+0xec>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 8101bf4:	68bb      	ldr	r3, [r7, #8]
 8101bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8101bf8:	2300      	movs	r3, #0
 8101bfa:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8101bfc:	e00c      	b.n	8101c18 <buffer_readArray+0xe2>
					{
						bufferState = buffer_pull( bufferVar, ( userBuffer + userBufferIndex ) );
 8101bfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101c02:	4413      	add	r3, r2
 8101c04:	4619      	mov	r1, r3
 8101c06:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8101c08:	f000 f8b4 	bl	8101d74 <buffer_pull>
 8101c0c:	4603      	mov	r3, r0
 8101c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 8101c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101c14:	3301      	adds	r3, #1
 8101c16:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 8101c18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101c1a:	687b      	ldr	r3, [r7, #4]
 8101c1c:	429a      	cmp	r2, r3
 8101c1e:	d3ee      	bcc.n	8101bfe <buffer_readArray+0xc8>
 8101c20:	e002      	b.n	8101c28 <buffer_readArray+0xf2>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM;
 8101c22:	2307      	movs	r3, #7
 8101c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 8101c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101c2a:	2b00      	cmp	r3, #0
 8101c2c:	d007      	beq.n	8101c3e <buffer_readArray+0x108>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 8101c2e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8101c30:	f001 fb74 	bl	810331c <spinlock_releaseSpinlock>
 8101c34:	6578      	str	r0, [r7, #84]	; 0x54
 8101c36:	e002      	b.n	8101c3e <buffer_readArray+0x108>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 8101c38:	2304      	movs	r3, #4
 8101c3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 8101c3e:	b662      	cpsie	i
}
 8101c40:	bf00      	nop
}
 8101c42:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8101c44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8101c48:	4618      	mov	r0, r3
 8101c4a:	3760      	adds	r7, #96	; 0x60
 8101c4c:	46bd      	mov	sp, r7
 8101c4e:	bd80      	pop	{r7, pc}

08101c50 <buffer_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType buffer_writeArray(BitWidthType id, void * buffer, BitWidthType size)
{
 8101c50:	b580      	push	{r7, lr}
 8101c52:	b098      	sub	sp, #96	; 0x60
 8101c54:	af00      	add	r7, sp, #0
 8101c56:	60f8      	str	r0, [r7, #12]
 8101c58:	60b9      	str	r1, [r7, #8]
 8101c5a:	607a      	str	r2, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;


    osVar = os_getOsVar();
 8101c5c:	f000 fd16 	bl	810268c <os_getOsVar>
 8101c60:	64f8      	str	r0, [r7, #76]	; 0x4c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101c62:	464b      	mov	r3, r9
 8101c64:	62bb      	str	r3, [r7, #40]	; 0x28
    return (CosmOS_CoreVariableType *)result;
 8101c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
    coreVar = CILcore_getCoreVar();
 8101c68:	64bb      	str	r3, [r7, #72]	; 0x48

	isMemoryRegionProtected = memoryProtection_isMemoryRegionProtected( coreVar, buffer, size );
 8101c6a:	687a      	ldr	r2, [r7, #4]
 8101c6c:	68b9      	ldr	r1, [r7, #8]
 8101c6e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8101c70:	f000 fb37 	bl	81022e2 <memoryProtection_isMemoryRegionProtected>
 8101c74:	4603      	mov	r3, r0
 8101c76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    if ( isMemoryRegionProtected )
 8101c7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8101c7e:	2b00      	cmp	r3, #0
 8101c80:	d003      	beq.n	8101c8a <buffer_writeArray+0x3a>
    {
        bufferState = BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED;
 8101c82:	2305      	movs	r3, #5
 8101c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101c88:	e06e      	b.n	8101d68 <buffer_writeArray+0x118>
 8101c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101c8c:	623b      	str	r3, [r7, #32]
 8101c8e:	68fb      	ldr	r3, [r7, #12]
 8101c90:	61fb      	str	r3, [r7, #28]
 8101c92:	6a3b      	ldr	r3, [r7, #32]
 8101c94:	689a      	ldr	r2, [r3, #8]
 8101c96:	69fb      	ldr	r3, [r7, #28]
 8101c98:	011b      	lsls	r3, r3, #4
 8101c9a:	4413      	add	r3, r2
        CosmOS_AccessStateType accessState;

        CosmOS_BufferVariableType * bufferVar;
        CosmOS_PermissionsConfigurationType * writePermission;

        bufferVar = os_getOsBufferVar( osVar, id );
 8101c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8101c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101ca0:	627b      	str	r3, [r7, #36]	; 0x24
    return (CosmOS_PermissionsConfigurationType *)(bufferVar->cfg->writePermission);
 8101ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101ca4:	681b      	ldr	r3, [r3, #0]
 8101ca6:	691b      	ldr	r3, [r3, #16]

        writePermission = buffer_getBufferWritePermission( bufferVar );
 8101ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        accessState = permission_tryAccess( writePermission, coreVar );
 8101caa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8101cac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8101cae:	f000 fdcf 	bl	8102850 <permission_tryAccess>
 8101cb2:	63b8      	str	r0, [r7, #56]	; 0x38

        if ( accessState IS_EQUAL_TO ACCESS_STATE_ENUM__DENIED )
 8101cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8101cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101cba:	d103      	bne.n	8101cc4 <buffer_writeArray+0x74>
        {
            bufferState = BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED;
 8101cbc:	2303      	movs	r3, #3
 8101cbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8101cc2:	e051      	b.n	8101d68 <buffer_writeArray+0x118>
  __ASM volatile ("cpsid i" : : : "memory");
 8101cc4:	b672      	cpsid	i
}
 8101cc6:	bf00      	nop
}
 8101cc8:	bf00      	nop
 8101cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101ccc:	61bb      	str	r3, [r7, #24]
    return (bufferVar->cfg->isInterCore);
 8101cce:	69bb      	ldr	r3, [r7, #24]
 8101cd0:	681b      	ldr	r3, [r3, #0]
 8101cd2:	7d1b      	ldrb	r3, [r3, #20]
			CosmOS_AccessStateType isBufferInterCore;
			CosmOS_SpinlockStateType spinlockState;

			CILinterrupt_disableInterrupts();

			isBufferInterCore = buffer_isBufferInterCore( bufferVar );
 8101cd4:	637b      	str	r3, [r7, #52]	; 0x34

			if ( isBufferInterCore )
 8101cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101cd8:	2b00      	cmp	r3, #0
 8101cda:	d00a      	beq.n	8101cf2 <buffer_writeArray+0xa2>
 8101cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101cde:	617b      	str	r3, [r7, #20]
    return (bufferVar->cfg->spinlockId);
 8101ce0:	697b      	ldr	r3, [r7, #20]
 8101ce2:	681b      	ldr	r3, [r3, #0]
 8101ce4:	699b      	ldr	r3, [r3, #24]
			{
				spinlockId = buffer_getBufferSpinlockId( bufferVar );
 8101ce6:	65bb      	str	r3, [r7, #88]	; 0x58
				spinlockState = spinlock_trySpinlock( spinlockId );
 8101ce8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8101cea:	f001 fad8 	bl	810329e <spinlock_trySpinlock>
 8101cee:	6578      	str	r0, [r7, #84]	; 0x54
 8101cf0:	e001      	b.n	8101cf6 <buffer_writeArray+0xa6>
			}
			else
			{
				spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8101cf2:	2302      	movs	r3, #2
 8101cf4:	657b      	str	r3, [r7, #84]	; 0x54
			}

			if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8101cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8101cf8:	2b02      	cmp	r3, #2
 8101cfa:	d12f      	bne.n	8101d5c <buffer_writeArray+0x10c>
 8101cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8101cfe:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType buffer_getEmptyCellsNum(CosmOS_BufferVariableType * bufferVar)
{
    return ((bufferVar->cfg->size) - (bufferVar->fullCells));
 8101d00:	693b      	ldr	r3, [r7, #16]
 8101d02:	681b      	ldr	r3, [r3, #0]
 8101d04:	689a      	ldr	r2, [r3, #8]
 8101d06:	693b      	ldr	r3, [r7, #16]
 8101d08:	68db      	ldr	r3, [r3, #12]
 8101d0a:	1ad3      	subs	r3, r2, r3
			{
				emptyCellsNum = buffer_getEmptyCellsNum( bufferVar );
 8101d0c:	633b      	str	r3, [r7, #48]	; 0x30

				if ( emptyCellsNum >= size)
 8101d0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101d10:	687b      	ldr	r3, [r7, #4]
 8101d12:	429a      	cmp	r2, r3
 8101d14:	d317      	bcc.n	8101d46 <buffer_writeArray+0xf6>
					BitWidthType userBufferIndex;

            	    unsigned char * userBuffer;


					userBuffer = buffer;
 8101d16:	68bb      	ldr	r3, [r7, #8]
 8101d18:	62fb      	str	r3, [r7, #44]	; 0x2c
					userBufferIndex = 0;
 8101d1a:	2300      	movs	r3, #0
 8101d1c:	653b      	str	r3, [r7, #80]	; 0x50

					while ( ( userBufferIndex < size ) )
 8101d1e:	e00d      	b.n	8101d3c <buffer_writeArray+0xec>
					{
            	        bufferState = buffer_push( bufferVar, *( userBuffer + userBufferIndex ) );
 8101d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8101d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101d24:	4413      	add	r3, r2
 8101d26:	781b      	ldrb	r3, [r3, #0]
 8101d28:	4619      	mov	r1, r3
 8101d2a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8101d2c:	f000 f85c 	bl	8101de8 <buffer_push>
 8101d30:	4603      	mov	r3, r0
 8101d32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						userBufferIndex++;
 8101d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8101d38:	3301      	adds	r3, #1
 8101d3a:	653b      	str	r3, [r7, #80]	; 0x50
					while ( ( userBufferIndex < size ) )
 8101d3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8101d3e:	687b      	ldr	r3, [r7, #4]
 8101d40:	429a      	cmp	r2, r3
 8101d42:	d3ed      	bcc.n	8101d20 <buffer_writeArray+0xd0>
 8101d44:	e002      	b.n	8101d4c <buffer_writeArray+0xfc>
					}
				}
				else
				{
					bufferState = BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS;
 8101d46:	2306      	movs	r3, #6
 8101d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}

				if ( isBufferInterCore )
 8101d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101d4e:	2b00      	cmp	r3, #0
 8101d50:	d007      	beq.n	8101d62 <buffer_writeArray+0x112>
				{
					spinlockState = spinlock_releaseSpinlock( spinlockId );
 8101d52:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8101d54:	f001 fae2 	bl	810331c <spinlock_releaseSpinlock>
 8101d58:	6578      	str	r0, [r7, #84]	; 0x54
 8101d5a:	e002      	b.n	8101d62 <buffer_writeArray+0x112>
				}
			}
			else
			{
				bufferState = BUFFER_STATE_ENUM__ERROR_SPINLOCK_NOT_OBTAINED;
 8101d5c:	2304      	movs	r3, #4
 8101d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  __ASM volatile ("cpsie i" : : : "memory");
 8101d62:	b662      	cpsie	i
}
 8101d64:	bf00      	nop
}
 8101d66:	bf00      	nop
        }
    }

    /* MEMORY BARRIER HAS TO BE IMPLEMENTED */

    return bufferState;
 8101d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8101d6c:	4618      	mov	r0, r3
 8101d6e:	3760      	adds	r7, #96	; 0x60
 8101d70:	46bd      	mov	sp, r7
 8101d72:	bd80      	pop	{r7, pc}

08101d74 <buffer_pull>:
{
 8101d74:	b480      	push	{r7}
 8101d76:	b089      	sub	sp, #36	; 0x24
 8101d78:	af00      	add	r7, sp, #0
 8101d7a:	6078      	str	r0, [r7, #4]
 8101d7c:	6039      	str	r1, [r7, #0]
 8101d7e:	687b      	ldr	r3, [r7, #4]
 8101d80:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8101d82:	68bb      	ldr	r3, [r7, #8]
 8101d84:	681b      	ldr	r3, [r3, #0]
 8101d86:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8101d88:	61fb      	str	r3, [r7, #28]
 8101d8a:	687b      	ldr	r3, [r7, #4]
 8101d8c:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8101d8e:	68fb      	ldr	r3, [r7, #12]
 8101d90:	681b      	ldr	r3, [r3, #0]
 8101d92:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8101d94:	61bb      	str	r3, [r7, #24]
    *data = *( osBuffer + bufferVar->tail );
 8101d96:	687b      	ldr	r3, [r7, #4]
 8101d98:	689b      	ldr	r3, [r3, #8]
 8101d9a:	69ba      	ldr	r2, [r7, #24]
 8101d9c:	4413      	add	r3, r2
 8101d9e:	781a      	ldrb	r2, [r3, #0]
 8101da0:	683b      	ldr	r3, [r7, #0]
 8101da2:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells--;
 8101da4:	687b      	ldr	r3, [r7, #4]
 8101da6:	68db      	ldr	r3, [r3, #12]
 8101da8:	1e5a      	subs	r2, r3, #1
 8101daa:	687b      	ldr	r3, [r7, #4]
 8101dac:	60da      	str	r2, [r3, #12]
    bufferVar->tail = ( ( bufferVar->tail + 1 ) % bufferSize );
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	689b      	ldr	r3, [r3, #8]
 8101db2:	3301      	adds	r3, #1
 8101db4:	69fa      	ldr	r2, [r7, #28]
 8101db6:	fbb3 f2f2 	udiv	r2, r3, r2
 8101dba:	69f9      	ldr	r1, [r7, #28]
 8101dbc:	fb01 f202 	mul.w	r2, r1, r2
 8101dc0:	1a9a      	subs	r2, r3, r2
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	609a      	str	r2, [r3, #8]
 8101dc6:	687b      	ldr	r3, [r7, #4]
 8101dc8:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isEmpty(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT(bufferVar->fullCells) ? BUFFER_STATE_ENUM__EMPTY : BUFFER_STATE_ENUM__OK);
 8101dca:	693b      	ldr	r3, [r7, #16]
 8101dcc:	68db      	ldr	r3, [r3, #12]
 8101dce:	2b00      	cmp	r3, #0
 8101dd0:	bf0c      	ite	eq
 8101dd2:	2301      	moveq	r3, #1
 8101dd4:	2300      	movne	r3, #0
 8101dd6:	b2db      	uxtb	r3, r3
    bufferState = buffer_isEmpty( bufferVar );
 8101dd8:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8101dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8101ddc:	4618      	mov	r0, r3
 8101dde:	3724      	adds	r7, #36	; 0x24
 8101de0:	46bd      	mov	sp, r7
 8101de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101de6:	4770      	bx	lr

08101de8 <buffer_push>:
{
 8101de8:	b480      	push	{r7}
 8101dea:	b089      	sub	sp, #36	; 0x24
 8101dec:	af00      	add	r7, sp, #0
 8101dee:	6078      	str	r0, [r7, #4]
 8101df0:	460b      	mov	r3, r1
 8101df2:	70fb      	strb	r3, [r7, #3]
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	60bb      	str	r3, [r7, #8]
    return (bufferVar->cfg->size);
 8101df8:	68bb      	ldr	r3, [r7, #8]
 8101dfa:	681b      	ldr	r3, [r3, #0]
 8101dfc:	689b      	ldr	r3, [r3, #8]
    bufferSize = buffer_getBufferSize( bufferVar );
 8101dfe:	61fb      	str	r3, [r7, #28]
 8101e00:	687b      	ldr	r3, [r7, #4]
 8101e02:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 8101e04:	68fb      	ldr	r3, [r7, #12]
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	681b      	ldr	r3, [r3, #0]
    osBuffer = buffer_getBuffer( bufferVar );
 8101e0a:	61bb      	str	r3, [r7, #24]
    *( osBuffer + bufferVar->head ) = data;
 8101e0c:	687b      	ldr	r3, [r7, #4]
 8101e0e:	685b      	ldr	r3, [r3, #4]
 8101e10:	69ba      	ldr	r2, [r7, #24]
 8101e12:	4413      	add	r3, r2
 8101e14:	78fa      	ldrb	r2, [r7, #3]
 8101e16:	701a      	strb	r2, [r3, #0]
    bufferVar->fullCells++;
 8101e18:	687b      	ldr	r3, [r7, #4]
 8101e1a:	68db      	ldr	r3, [r3, #12]
 8101e1c:	1c5a      	adds	r2, r3, #1
 8101e1e:	687b      	ldr	r3, [r7, #4]
 8101e20:	60da      	str	r2, [r3, #12]
    bufferVar->head = ( ( bufferVar->head + 1 ) % bufferSize );
 8101e22:	687b      	ldr	r3, [r7, #4]
 8101e24:	685b      	ldr	r3, [r3, #4]
 8101e26:	3301      	adds	r3, #1
 8101e28:	69fa      	ldr	r2, [r7, #28]
 8101e2a:	fbb3 f2f2 	udiv	r2, r3, r2
 8101e2e:	69f9      	ldr	r1, [r7, #28]
 8101e30:	fb01 f202 	mul.w	r2, r1, r2
 8101e34:	1a9a      	subs	r2, r3, r2
 8101e36:	687b      	ldr	r3, [r7, #4]
 8101e38:	605a      	str	r2, [r3, #4]
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	613b      	str	r3, [r7, #16]
  *
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferStateType buffer_isFull(CosmOS_BufferVariableType * bufferVar)
{
    return (IS_NOT((bufferVar->cfg->size) ^ (bufferVar->fullCells)) ? \
 8101e3e:	693b      	ldr	r3, [r7, #16]
 8101e40:	681b      	ldr	r3, [r3, #0]
 8101e42:	689a      	ldr	r2, [r3, #8]
 8101e44:	693b      	ldr	r3, [r7, #16]
 8101e46:	68db      	ldr	r3, [r3, #12]
    BUFFER_STATE_ENUM__FULL : BUFFER_STATE_ENUM__OK);
 8101e48:	429a      	cmp	r2, r3
 8101e4a:	d101      	bne.n	8101e50 <buffer_push+0x68>
 8101e4c:	2302      	movs	r3, #2
 8101e4e:	e000      	b.n	8101e52 <buffer_push+0x6a>
 8101e50:	2300      	movs	r3, #0
    bufferState = buffer_isFull( bufferVar );
 8101e52:	75fb      	strb	r3, [r7, #23]
    return bufferState;
 8101e54:	7dfb      	ldrb	r3, [r7, #23]
}
 8101e56:	4618      	mov	r0, r3
 8101e58:	3724      	adds	r7, #36	; 0x24
 8101e5a:	46bd      	mov	sp, r7
 8101e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e60:	4770      	bx	lr

08101e62 <bufferDouble_readArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_readArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8101e62:	b580      	push	{r7, lr}
 8101e64:	b08e      	sub	sp, #56	; 0x38
 8101e66:	af00      	add	r7, sp, #0
 8101e68:	60f8      	str	r0, [r7, #12]
 8101e6a:	60b9      	str	r1, [r7, #8]
 8101e6c:	607a      	str	r2, [r7, #4]
 8101e6e:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8101e70:	f000 fc0c 	bl	810268c <os_getOsVar>
 8101e74:	6338      	str	r0, [r7, #48]	; 0x30
 8101e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101e78:	623b      	str	r3, [r7, #32]
 8101e7a:	68fb      	ldr	r3, [r7, #12]
 8101e7c:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_BufferDoubleVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferDoubleVariableType * os_getOsBufferDoubleVar(CosmOS_OsVariableType * osVar, BitWidthType bufferDoubleId)
{
    return (&(osVar->bufferDoubleVars[bufferDoubleId]));
 8101e7e:	6a3b      	ldr	r3, [r7, #32]
 8101e80:	68d9      	ldr	r1, [r3, #12]
 8101e82:	69fa      	ldr	r2, [r7, #28]
 8101e84:	4613      	mov	r3, r2
 8101e86:	005b      	lsls	r3, r3, #1
 8101e88:	4413      	add	r3, r2
 8101e8a:	009b      	lsls	r3, r3, #2
 8101e8c:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8101e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8101e90:	78fb      	ldrb	r3, [r7, #3]
 8101e92:	2b00      	cmp	r3, #0
 8101e94:	d002      	beq.n	8101e9c <bufferDouble_readArray+0x3a>
 8101e96:	2b01      	cmp	r3, #1
 8101e98:	d00b      	beq.n	8101eb2 <bufferDouble_readArray+0x50>
 8101e9a:	e015      	b.n	8101ec8 <bufferDouble_readArray+0x66>
 8101e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101e9e:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_BufferVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BufferVariableType * bufferDouble_getBufferDoubleUserBuffer(CosmOS_BufferDoubleVariableType * bufferDoubleVar)
{
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8101ea0:	69bb      	ldr	r3, [r7, #24]
 8101ea2:	681b      	ldr	r3, [r3, #0]
 8101ea4:	681a      	ldr	r2, [r3, #0]
 8101ea6:	69bb      	ldr	r3, [r7, #24]
 8101ea8:	689b      	ldr	r3, [r3, #8]
 8101eaa:	009b      	lsls	r3, r3, #2
 8101eac:	4413      	add	r3, r2
    {
        case BUFFER_DOUBLE_ACCESS_ENUM__USER :
        {
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8101eae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101eb0:	e00d      	b.n	8101ece <bufferDouble_readArray+0x6c>
 8101eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101eb4:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8101eb6:	697b      	ldr	r3, [r7, #20]
 8101eb8:	681b      	ldr	r3, [r3, #0]
 8101eba:	681a      	ldr	r2, [r3, #0]
 8101ebc:	697b      	ldr	r3, [r7, #20]
 8101ebe:	685b      	ldr	r3, [r3, #4]
 8101ec0:	009b      	lsls	r3, r3, #2
 8101ec2:	4413      	add	r3, r2
        }

        case BUFFER_DOUBLE_ACCESS_ENUM__KERNEL :
        {
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8101ec4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101ec6:	e002      	b.n	8101ece <bufferDouble_readArray+0x6c>
        }

        default :
        {
            os_kernelPanic();
 8101ec8:	f000 fbea 	bl	81026a0 <os_kernelPanic>
            break;
 8101ecc:	bf00      	nop
 8101ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101ed0:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->id);
 8101ed2:	693b      	ldr	r3, [r7, #16]
 8101ed4:	681b      	ldr	r3, [r3, #0]
 8101ed6:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 8101ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_readArray( bufferId, buffer, size );
 8101eda:	687a      	ldr	r2, [r7, #4]
 8101edc:	68b9      	ldr	r1, [r7, #8]
 8101ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8101ee0:	f7ff fe29 	bl	8101b36 <buffer_readArray>
 8101ee4:	4603      	mov	r3, r0
 8101ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8101eea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8101eee:	4618      	mov	r0, r3
 8101ef0:	3738      	adds	r7, #56	; 0x38
 8101ef2:	46bd      	mov	sp, r7
 8101ef4:	bd80      	pop	{r7, pc}

08101ef6 <bufferDouble_writeArray>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BufferStateType bufferDouble_writeArray(BitWidthType id, void * buffer, BitWidthType size, CosmOS_BufferDoubleAccessType access)
{
 8101ef6:	b580      	push	{r7, lr}
 8101ef8:	b08e      	sub	sp, #56	; 0x38
 8101efa:	af00      	add	r7, sp, #0
 8101efc:	60f8      	str	r0, [r7, #12]
 8101efe:	60b9      	str	r1, [r7, #8]
 8101f00:	607a      	str	r2, [r7, #4]
 8101f02:	70fb      	strb	r3, [r7, #3]
    CosmOS_OsVariableType * osVar;
    CosmOS_BufferVariableType * bufferVar;
    CosmOS_BufferDoubleVariableType * bufferDoubleVar;


    osVar = os_getOsVar();
 8101f04:	f000 fbc2 	bl	810268c <os_getOsVar>
 8101f08:	6338      	str	r0, [r7, #48]	; 0x30
 8101f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8101f0c:	623b      	str	r3, [r7, #32]
 8101f0e:	68fb      	ldr	r3, [r7, #12]
 8101f10:	61fb      	str	r3, [r7, #28]
 8101f12:	6a3b      	ldr	r3, [r7, #32]
 8101f14:	68d9      	ldr	r1, [r3, #12]
 8101f16:	69fa      	ldr	r2, [r7, #28]
 8101f18:	4613      	mov	r3, r2
 8101f1a:	005b      	lsls	r3, r3, #1
 8101f1c:	4413      	add	r3, r2
 8101f1e:	009b      	lsls	r3, r3, #2
 8101f20:	440b      	add	r3, r1

    bufferDoubleVar = os_getOsBufferDoubleVar( osVar, id );
 8101f22:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch ( access )
 8101f24:	78fb      	ldrb	r3, [r7, #3]
 8101f26:	2b00      	cmp	r3, #0
 8101f28:	d002      	beq.n	8101f30 <bufferDouble_writeArray+0x3a>
 8101f2a:	2b01      	cmp	r3, #1
 8101f2c:	d00b      	beq.n	8101f46 <bufferDouble_writeArray+0x50>
 8101f2e:	e015      	b.n	8101f5c <bufferDouble_writeArray+0x66>
 8101f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101f32:	61bb      	str	r3, [r7, #24]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeUserBufferId]));
 8101f34:	69bb      	ldr	r3, [r7, #24]
 8101f36:	681b      	ldr	r3, [r3, #0]
 8101f38:	681a      	ldr	r2, [r3, #0]
 8101f3a:	69bb      	ldr	r3, [r7, #24]
 8101f3c:	689b      	ldr	r3, [r3, #8]
 8101f3e:	009b      	lsls	r3, r3, #2
 8101f40:	4413      	add	r3, r2
    {
        case BUFFER_DOUBLE_ACCESS_ENUM__USER :
        {
            bufferVar = bufferDouble_getBufferDoubleUserBuffer( bufferDoubleVar );
 8101f42:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101f44:	e00d      	b.n	8101f62 <bufferDouble_writeArray+0x6c>
 8101f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101f48:	617b      	str	r3, [r7, #20]
    return (CosmOS_BufferVariableType *)(&(bufferDoubleVar->cfg->bufferPair[bufferDoubleVar->activeKernelBufferId]));
 8101f4a:	697b      	ldr	r3, [r7, #20]
 8101f4c:	681b      	ldr	r3, [r3, #0]
 8101f4e:	681a      	ldr	r2, [r3, #0]
 8101f50:	697b      	ldr	r3, [r7, #20]
 8101f52:	685b      	ldr	r3, [r3, #4]
 8101f54:	009b      	lsls	r3, r3, #2
 8101f56:	4413      	add	r3, r2
        }

        case BUFFER_DOUBLE_ACCESS_ENUM__KERNEL :
        {
            bufferVar = bufferDouble_getBufferDoubleKernelBuffer( bufferDoubleVar );
 8101f58:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8101f5a:	e002      	b.n	8101f62 <bufferDouble_writeArray+0x6c>
        }

        default :
        {
            os_kernelPanic();
 8101f5c:	f000 fba0 	bl	81026a0 <os_kernelPanic>
            break;
 8101f60:	bf00      	nop
 8101f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101f64:	613b      	str	r3, [r7, #16]
 8101f66:	693b      	ldr	r3, [r7, #16]
 8101f68:	681b      	ldr	r3, [r3, #0]
 8101f6a:	685b      	ldr	r3, [r3, #4]
        }
    }

    bufferId = buffer_getBufferId( bufferVar );
 8101f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    bufferState = buffer_writeArray( bufferId, buffer, size );
 8101f6e:	687a      	ldr	r2, [r7, #4]
 8101f70:	68b9      	ldr	r1, [r7, #8]
 8101f72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8101f74:	f7ff fe6c 	bl	8101c50 <buffer_writeArray>
 8101f78:	4603      	mov	r3, r0
 8101f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    return bufferState;
 8101f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8101f82:	4618      	mov	r0, r3
 8101f84:	3738      	adds	r7, #56	; 0x38
 8101f86:	46bd      	mov	sp, r7
 8101f88:	bd80      	pop	{r7, pc}

08101f8a <core_getCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_CoreVariableType * core_getCoreVar(void)
{
 8101f8a:	b480      	push	{r7}
 8101f8c:	b083      	sub	sp, #12
 8101f8e:	af00      	add	r7, sp, #0
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8101f90:	464b      	mov	r3, r9
 8101f92:	603b      	str	r3, [r7, #0]
    return (CosmOS_CoreVariableType *)result;
 8101f94:	683b      	ldr	r3, [r7, #0]
	CosmOS_CoreVariableType * coreVar;

	coreVar = CILcore_getCoreVar();
 8101f96:	607b      	str	r3, [r7, #4]

	return coreVar;
 8101f98:	687b      	ldr	r3, [r7, #4]
}
 8101f9a:	4618      	mov	r0, r3
 8101f9c:	370c      	adds	r7, #12
 8101f9e:	46bd      	mov	sp, r7
 8101fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fa4:	4770      	bx	lr

08101fa6 <core_setSchedulableIntoCurrentContext>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void core_setSchedulableIntoCurrentContext(CosmOS_CoreVariableType * coreVar, CosmOS_SchedulableVariableType * schedulableVar)
{
 8101fa6:	b480      	push	{r7}
 8101fa8:	b095      	sub	sp, #84	; 0x54
 8101faa:	af00      	add	r7, sp, #0
 8101fac:	6078      	str	r0, [r7, #4]
 8101fae:	6039      	str	r1, [r7, #0]
 8101fb0:	683b      	ldr	r3, [r7, #0]
 8101fb2:	61fb      	str	r3, [r7, #28]
    return (schedulable->cfg->programId);
 8101fb4:	69fb      	ldr	r3, [r7, #28]
 8101fb6:	681b      	ldr	r3, [r3, #0]
 8101fb8:	699b      	ldr	r3, [r3, #24]
	CosmOS_SchedulableStateType priorSchedulableVarState;

	CosmOS_ProgramVariableType * programVar;
	CosmOS_SchedulableVariableType * priorSchedulableVar;

	programId = schedulable_getProgramId( schedulableVar );
 8101fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8101fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8101fc2:	623b      	str	r3, [r7, #32]
  *
  * @return CosmOS_ProgramVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ProgramVariableType * core_getCoreProgramVar(CosmOS_CoreVariableType * core, BitWidthType programIterator)
{
    return (&(core->programVars[programIterator]));
 8101fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101fc6:	68da      	ldr	r2, [r3, #12]
 8101fc8:	6a3b      	ldr	r3, [r7, #32]
 8101fca:	011b      	lsls	r3, r3, #4
 8101fcc:	4413      	add	r3, r2
    programVar = core_getCoreProgramVar( coreVar, programId );
 8101fce:	64bb      	str	r3, [r7, #72]	; 0x48
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    return (core->schedulableInExecution);
 8101fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101fd6:	685b      	ldr	r3, [r3, #4]
	priorSchedulableVar = core_getCoreSchedulableInExecution( coreVar );
 8101fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8101fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8101fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (schedulable->state);
 8101fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8101fe0:	685b      	ldr	r3, [r3, #4]
	priorSchedulableVarState = schedulable_getState( priorSchedulableVar );
 8101fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8101fe4:	687b      	ldr	r3, [r7, #4]
 8101fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8101fe8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8101fea:	633b      	str	r3, [r7, #48]	; 0x30
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreProgramInExecution(CosmOS_CoreVariableType * core, CosmOS_ProgramVariableType * programInExecutionParam)
{
    core->programInExecution = programInExecutionParam;
 8101fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8101fee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8101ff0:	609a      	str	r2, [r3, #8]
}
 8101ff2:	bf00      	nop
 8101ff4:	687b      	ldr	r3, [r7, #4]
 8101ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8101ff8:	683b      	ldr	r3, [r7, #0]
 8101ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreSchedulableInExecution(CosmOS_CoreVariableType * core, CosmOS_SchedulableVariableType * schedulableInExecutionParam)
{
    core->schedulableInExecution = schedulableInExecutionParam;
 8101ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8101ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8102000:	605a      	str	r2, [r3, #4]
}
 8102002:	bf00      	nop

	core_setCoreProgramInExecution( coreVar, programVar );
    core_setCoreSchedulableInExecution( coreVar, schedulableVar );

	if (priorSchedulableVarState IS_EQUAL_TO SCHEDULABLE_STATE_ENUM__RUNNING)
 8102004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102006:	2b00      	cmp	r3, #0
 8102008:	d108      	bne.n	810201c <core_setSchedulableIntoCurrentContext+0x76>
 810200a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810200c:	61bb      	str	r3, [r7, #24]
 810200e:	f04f 33ff 	mov.w	r3, #4294967295
 8102012:	617b      	str	r3, [r7, #20]
    schedulable->state = stateParam;
 8102014:	69bb      	ldr	r3, [r7, #24]
 8102016:	697a      	ldr	r2, [r7, #20]
 8102018:	605a      	str	r2, [r3, #4]
}
 810201a:	bf00      	nop
 810201c:	683b      	ldr	r3, [r7, #0]
 810201e:	613b      	str	r3, [r7, #16]
 8102020:	2300      	movs	r3, #0
 8102022:	60fb      	str	r3, [r7, #12]
    schedulable->state = stateParam;
 8102024:	693b      	ldr	r3, [r7, #16]
 8102026:	68fa      	ldr	r2, [r7, #12]
 8102028:	605a      	str	r2, [r3, #4]
}
 810202a:	bf00      	nop
	{
		schedulable_setState(priorSchedulableVar, SCHEDULABLE_STATE_ENUM__READY);
	}
	schedulable_setState(schedulableVar, SCHEDULABLE_STATE_ENUM__RUNNING);
}
 810202c:	bf00      	nop
 810202e:	3754      	adds	r7, #84	; 0x54
 8102030:	46bd      	mov	sp, r7
 8102032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102036:	4770      	bx	lr

08102038 <coreSync_getBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_getBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 8102038:	b580      	push	{r7, lr}
 810203a:	b096      	sub	sp, #88	; 0x58
 810203c:	af00      	add	r7, sp, #0
 810203e:	6078      	str	r0, [r7, #4]
 8102040:	6039      	str	r1, [r7, #0]
 8102042:	687b      	ldr	r3, [r7, #4]
 8102044:	62bb      	str	r3, [r7, #40]	; 0x28
 8102046:	683b      	ldr	r3, [r7, #0]
 8102048:	627b      	str	r3, [r7, #36]	; 0x24
    return (&(core->barrierVars[barrierId]));
 810204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810204c:	695a      	ldr	r2, [r3, #20]
 810204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102050:	009b      	lsls	r3, r3, #2
 8102052:	4413      	add	r3, r2
	CosmOS_BarrierVariableType * barrierVar;

	volatile CosmOS_BarrierStateType barrierState;


	barrierVar = core_getBarrierVar( coreVar, barrierId );
 8102054:	653b      	str	r3, [r7, #80]	; 0x50
 8102056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102058:	633b      	str	r3, [r7, #48]	; 0x30
 810205a:	f04f 33ff 	mov.w	r3, #4294967295
 810205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void coreSync_setBarrierState(CosmOS_BarrierVariableType * barrier, CosmOS_BarrierStateType barrierStateParam)
{
    barrier->barrierState = barrierStateParam;
 8102060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102064:	601a      	str	r2, [r3, #0]
}
 8102066:	bf00      	nop
	coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__REACHED);

	/* MEMORY BARRIER HAS TO BE IMPLEMENTED */

	osVar = os_getOsVar();
 8102068:	f000 fb10 	bl	810268c <os_getOsVar>
 810206c:	64f8      	str	r0, [r7, #76]	; 0x4c
 810206e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102070:	637b      	str	r3, [r7, #52]	; 0x34
    return (osVar->cfg->numberOfCores);
 8102072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102074:	681b      	ldr	r3, [r3, #0]
 8102076:	685b      	ldr	r3, [r3, #4]
	numberOfCores = os_getOsNumberOfCores( osVar );
 8102078:	64bb      	str	r3, [r7, #72]	; 0x48

	numberOfSynchronizedCores = 0;
 810207a:	2300      	movs	r3, #0
 810207c:	657b      	str	r3, [r7, #84]	; 0x54
 810207e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8102082:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8102084:	63bb      	str	r3, [r7, #56]	; 0x38
    return (&(osVar->coreVars[coreId]));
 8102086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102088:	6859      	ldr	r1, [r3, #4]
 810208a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810208c:	4613      	mov	r3, r2
 810208e:	00db      	lsls	r3, r3, #3
 8102090:	4413      	add	r3, r2
 8102092:	009b      	lsls	r3, r3, #2
 8102094:	440b      	add	r3, r1

	coreVar = os_getCoreVar( osVar, numberOfSynchronizedCores );
 8102096:	607b      	str	r3, [r7, #4]
 8102098:	687b      	ldr	r3, [r7, #4]
 810209a:	647b      	str	r3, [r7, #68]	; 0x44
 810209c:	683b      	ldr	r3, [r7, #0]
 810209e:	643b      	str	r3, [r7, #64]	; 0x40
 81020a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81020a2:	695a      	ldr	r2, [r3, #20]
 81020a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81020a6:	009b      	lsls	r3, r3, #2
 81020a8:	4413      	add	r3, r2
	barrierVar = core_getBarrierVar( coreVar, barrierId );
 81020aa:	653b      	str	r3, [r7, #80]	; 0x50

	while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 81020ac:	e029      	b.n	8102102 <coreSync_getBarrier+0xca>
 81020ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81020b0:	623b      	str	r3, [r7, #32]
    return (barrier->barrierState);
 81020b2:	6a3b      	ldr	r3, [r7, #32]
 81020b4:	681b      	ldr	r3, [r3, #0]
	{
		barrierState = coreSync_getBarrierState( barrierVar );
 81020b6:	60fb      	str	r3, [r7, #12]

		if ( ( barrierState IS_EQUAL_TO BARRIER_STATE_ENUM__REACHED ) )
 81020b8:	68fb      	ldr	r3, [r7, #12]
 81020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 81020be:	d120      	bne.n	8102102 <coreSync_getBarrier+0xca>
		{
			numberOfSynchronizedCores++;
 81020c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81020c2:	3301      	adds	r3, #1
 81020c4:	657b      	str	r3, [r7, #84]	; 0x54

			coreVar = os_getCoreVar( osVar, ( numberOfSynchronizedCores % numberOfCores ) );
 81020c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81020c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81020ca:	fbb3 f2f2 	udiv	r2, r3, r2
 81020ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 81020d0:	fb01 f202 	mul.w	r2, r1, r2
 81020d4:	1a9b      	subs	r3, r3, r2
 81020d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 81020d8:	617a      	str	r2, [r7, #20]
 81020da:	613b      	str	r3, [r7, #16]
 81020dc:	697b      	ldr	r3, [r7, #20]
 81020de:	6859      	ldr	r1, [r3, #4]
 81020e0:	693a      	ldr	r2, [r7, #16]
 81020e2:	4613      	mov	r3, r2
 81020e4:	00db      	lsls	r3, r3, #3
 81020e6:	4413      	add	r3, r2
 81020e8:	009b      	lsls	r3, r3, #2
 81020ea:	440b      	add	r3, r1
 81020ec:	607b      	str	r3, [r7, #4]
 81020ee:	687b      	ldr	r3, [r7, #4]
 81020f0:	61fb      	str	r3, [r7, #28]
 81020f2:	683b      	ldr	r3, [r7, #0]
 81020f4:	61bb      	str	r3, [r7, #24]
 81020f6:	69fb      	ldr	r3, [r7, #28]
 81020f8:	695a      	ldr	r2, [r3, #20]
 81020fa:	69bb      	ldr	r3, [r7, #24]
 81020fc:	009b      	lsls	r3, r3, #2
 81020fe:	4413      	add	r3, r2
			barrierVar = core_getBarrierVar( coreVar, barrierId );
 8102100:	653b      	str	r3, [r7, #80]	; 0x50
	while( numberOfSynchronizedCores IS_NOT_EQUAL_TO numberOfCores )
 8102102:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8102104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102106:	429a      	cmp	r2, r3
 8102108:	d1d1      	bne.n	81020ae <coreSync_getBarrier+0x76>
		}
	}
}
 810210a:	bf00      	nop
 810210c:	bf00      	nop
 810210e:	3758      	adds	r7, #88	; 0x58
 8102110:	46bd      	mov	sp, r7
 8102112:	bd80      	pop	{r7, pc}

08102114 <coreSync_reactivateBarrier>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void coreSync_reactivateBarrier(CosmOS_CoreVariableType * coreVar, BitWidthType barrierId)
{
 8102114:	b580      	push	{r7, lr}
 8102116:	b088      	sub	sp, #32
 8102118:	af00      	add	r7, sp, #0
 810211a:	6078      	str	r0, [r7, #4]
 810211c:	6039      	str	r1, [r7, #0]
	CosmOS_BarrierVariableType * barrierVar;

	cosmosAssert( barrierId IS_EQUAL_TO SCHEDULERS_SYNC_ID );
 810211e:	683b      	ldr	r3, [r7, #0]
 8102120:	2b03      	cmp	r3, #3
 8102122:	bf0c      	ite	eq
 8102124:	2301      	moveq	r3, #1
 8102126:	2300      	movne	r3, #0
 8102128:	b2db      	uxtb	r3, r3
 810212a:	60bb      	str	r3, [r7, #8]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void cosmosAssert(BitWidthType result)
{
    if ( IS_NOT( result ) )
 810212c:	68bb      	ldr	r3, [r7, #8]
 810212e:	2b00      	cmp	r3, #0
 8102130:	d101      	bne.n	8102136 <coreSync_reactivateBarrier+0x22>
		{
        os_kernelPanic();
 8102132:	f000 fab5 	bl	81026a0 <os_kernelPanic>
    }
}
 8102136:	bf00      	nop
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	613b      	str	r3, [r7, #16]
 810213c:	683b      	ldr	r3, [r7, #0]
 810213e:	60fb      	str	r3, [r7, #12]
 8102140:	693b      	ldr	r3, [r7, #16]
 8102142:	695a      	ldr	r2, [r3, #20]
 8102144:	68fb      	ldr	r3, [r7, #12]
 8102146:	009b      	lsls	r3, r3, #2
 8102148:	4413      	add	r3, r2

	barrierVar = core_getBarrierVar( coreVar, barrierId );
 810214a:	61fb      	str	r3, [r7, #28]
 810214c:	69fb      	ldr	r3, [r7, #28]
 810214e:	61bb      	str	r3, [r7, #24]
 8102150:	2300      	movs	r3, #0
 8102152:	617b      	str	r3, [r7, #20]
    barrier->barrierState = barrierStateParam;
 8102154:	69bb      	ldr	r3, [r7, #24]
 8102156:	697a      	ldr	r2, [r7, #20]
 8102158:	601a      	str	r2, [r3, #0]
}
 810215a:	bf00      	nop
	coreSync_setBarrierState( barrierVar, BARRIER_STATE_ENUM__ACTIVATED );

	/* MEMORY BARRIER HAS TO BE IMPLEMENTED */
}
 810215c:	bf00      	nop
 810215e:	3720      	adds	r7, #32
 8102160:	46bd      	mov	sp, r7
 8102162:	bd80      	pop	{r7, pc}

08102164 <deviceIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void deviceIO_togglePin(BitWidthType id, void *GPIOx, BitWidthType GPIO_Pin)
{
 8102164:	b580      	push	{r7, lr}
 8102166:	b084      	sub	sp, #16
 8102168:	af00      	add	r7, sp, #0
 810216a:	60f8      	str	r0, [r7, #12]
 810216c:	60b9      	str	r1, [r7, #8]
 810216e:	607a      	str	r2, [r7, #4]
    CILGPIO_togglePin( GPIOx, GPIO_Pin );
 8102170:	6879      	ldr	r1, [r7, #4]
 8102172:	68b8      	ldr	r0, [r7, #8]
 8102174:	f001 fb52 	bl	810381c <CILGPIO_togglePin>

	__SUPRESS_UNUSED_VAR(id);
}
 8102178:	bf00      	nop
 810217a:	3710      	adds	r7, #16
 810217c:	46bd      	mov	sp, r7
 810217e:	bd80      	pop	{r7, pc}

08102180 <memoryManager_heapInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryManager_heapInit( CosmOS_CoreVariableType * coreVar )
{
 8102180:	b480      	push	{r7}
 8102182:	b089      	sub	sp, #36	; 0x24
 8102184:	af00      	add	r7, sp, #0
 8102186:	6078      	str	r0, [r7, #4]
 8102188:	687b      	ldr	r3, [r7, #4]
 810218a:	60bb      	str	r3, [r7, #8]
    return (core->programVars);
 810218c:	68bb      	ldr	r3, [r7, #8]
 810218e:	68db      	ldr	r3, [r3, #12]

	CosmOS_ProgramVariableType * programVars;
	CosmOS_MallocVariableType * currentMallocVar;


	programVars = core_getCoreProgramVars( coreVar );
 8102190:	61bb      	str	r3, [r7, #24]
 8102192:	687b      	ldr	r3, [r7, #4]
 8102194:	60fb      	str	r3, [r7, #12]
    return (core->cfg->numberOfPrograms);
 8102196:	68fb      	ldr	r3, [r7, #12]
 8102198:	681b      	ldr	r3, [r3, #0]
 810219a:	685b      	ldr	r3, [r3, #4]
	numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 810219c:	617b      	str	r3, [r7, #20]

	for (BitWidthType i = 0; i < numberOfPrograms; i++)
 810219e:	2300      	movs	r3, #0
 81021a0:	61fb      	str	r3, [r7, #28]
 81021a2:	e01a      	b.n	81021da <memoryManager_heapInit+0x5a>
	{
		if (programVars[i].cfg->programHeapSize)
 81021a4:	69fb      	ldr	r3, [r7, #28]
 81021a6:	011b      	lsls	r3, r3, #4
 81021a8:	69ba      	ldr	r2, [r7, #24]
 81021aa:	4413      	add	r3, r2
 81021ac:	681b      	ldr	r3, [r3, #0]
 81021ae:	699b      	ldr	r3, [r3, #24]
 81021b0:	2b00      	cmp	r3, #0
 81021b2:	d00f      	beq.n	81021d4 <memoryManager_heapInit+0x54>
		{
			currentMallocVar = (CosmOS_MallocVariableType *)programVars[i].cfg->programHeapLowAddress;
 81021b4:	69fb      	ldr	r3, [r7, #28]
 81021b6:	011b      	lsls	r3, r3, #4
 81021b8:	69ba      	ldr	r2, [r7, #24]
 81021ba:	4413      	add	r3, r2
 81021bc:	681b      	ldr	r3, [r3, #0]
 81021be:	69db      	ldr	r3, [r3, #28]
 81021c0:	613b      	str	r3, [r7, #16]

			currentMallocVar->prior = NULL;
 81021c2:	693b      	ldr	r3, [r7, #16]
 81021c4:	2200      	movs	r2, #0
 81021c6:	601a      	str	r2, [r3, #0]
			currentMallocVar->next = NULL;
 81021c8:	693b      	ldr	r3, [r7, #16]
 81021ca:	2200      	movs	r2, #0
 81021cc:	605a      	str	r2, [r3, #4]
			currentMallocVar->size = (BitWidthType)ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType));
 81021ce:	693b      	ldr	r3, [r7, #16]
 81021d0:	220c      	movs	r2, #12
 81021d2:	609a      	str	r2, [r3, #8]
	for (BitWidthType i = 0; i < numberOfPrograms; i++)
 81021d4:	69fb      	ldr	r3, [r7, #28]
 81021d6:	3301      	adds	r3, #1
 81021d8:	61fb      	str	r3, [r7, #28]
 81021da:	69fa      	ldr	r2, [r7, #28]
 81021dc:	697b      	ldr	r3, [r7, #20]
 81021de:	429a      	cmp	r2, r3
 81021e0:	d3e0      	bcc.n	81021a4 <memoryManager_heapInit+0x24>
		}
	}
}
 81021e2:	bf00      	nop
 81021e4:	bf00      	nop
 81021e6:	3724      	adds	r7, #36	; 0x24
 81021e8:	46bd      	mov	sp, r7
 81021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021ee:	4770      	bx	lr

081021f0 <memoryProtection_init>:
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_init(AddressType codeMemoryHighAddress,\
												AddressType codeMemoryLowAddress, \
												AddressType stackMemoryHighAddress, \
												AddressType stackMemoryLowAddress)
{
 81021f0:	b580      	push	{r7, lr}
 81021f2:	b084      	sub	sp, #16
 81021f4:	af00      	add	r7, sp, #0
 81021f6:	60f8      	str	r0, [r7, #12]
 81021f8:	60b9      	str	r1, [r7, #8]
 81021fa:	607a      	str	r2, [r7, #4]
 81021fc:	603b      	str	r3, [r7, #0]
    CILmemoryProtection_init(codeMemoryHighAddress,codeMemoryLowAddress,
 81021fe:	683b      	ldr	r3, [r7, #0]
 8102200:	687a      	ldr	r2, [r7, #4]
 8102202:	68b9      	ldr	r1, [r7, #8]
 8102204:	68f8      	ldr	r0, [r7, #12]
 8102206:	f001 fb19 	bl	810383c <CILmemoryProtection_init>
							stackMemoryHighAddress,stackMemoryLowAddress);
}
 810220a:	bf00      	nop
 810220c:	3710      	adds	r7, #16
 810220e:	46bd      	mov	sp, r7
 8102210:	bd80      	pop	{r7, pc}

08102212 <memoryProtection_setMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void memoryProtection_setMemoryProtection(CosmOS_CoreVariableType * core,CosmOS_SchedulableVariableType  * schedulable)
{
 8102212:	b580      	push	{r7, lr}
 8102214:	b09c      	sub	sp, #112	; 0x70
 8102216:	af00      	add	r7, sp, #0
 8102218:	6078      	str	r0, [r7, #4]
 810221a:	6039      	str	r1, [r7, #0]
 810221c:	683b      	ldr	r3, [r7, #0]
 810221e:	60bb      	str	r3, [r7, #8]
    return (schedulable->cfg->programId);
 8102220:	68bb      	ldr	r3, [r7, #8]
 8102222:	681b      	ldr	r3, [r3, #0]
 8102224:	699b      	ldr	r3, [r3, #24]

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;


    programId = schedulable_getProgramId( schedulable );
 8102226:	66fb      	str	r3, [r7, #108]	; 0x6c
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	613b      	str	r3, [r7, #16]
 810222c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810222e:	60fb      	str	r3, [r7, #12]
    return (&(core->programVars[programIterator]));
 8102230:	693b      	ldr	r3, [r7, #16]
 8102232:	68da      	ldr	r2, [r3, #12]
 8102234:	68fb      	ldr	r3, [r7, #12]
 8102236:	011b      	lsls	r3, r3, #4
 8102238:	4413      	add	r3, r2
    programVar = core_getCoreProgramVar( core, programId );
 810223a:	66bb      	str	r3, [r7, #104]	; 0x68
 810223c:	683b      	ldr	r3, [r7, #0]
 810223e:	617b      	str	r3, [r7, #20]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8102240:	697b      	ldr	r3, [r7, #20]
 8102242:	681b      	ldr	r3, [r3, #0]
 8102244:	681b      	ldr	r3, [r3, #0]

    stack = schedulable_getStack( schedulable );
 8102246:	667b      	str	r3, [r7, #100]	; 0x64
 8102248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810224a:	62bb      	str	r3, [r7, #40]	; 0x28
 810224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810224e:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackLowAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackLowAddress);
 8102250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102252:	685b      	ldr	r3, [r3, #4]
    lowAddress = stack_getStackLowAddress( stack );
 8102254:	623b      	str	r3, [r7, #32]
 8102256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102258:	61fb      	str	r3, [r7, #28]
  *
  * @return AddressType
********************************************************************************/
__STATIC_FORCEINLINE AddressType stack_getStackHighAddress(CosmOS_StackConfigurationType * stack)
{
    return (stack->stackHighAddress);
 810225a:	69fb      	ldr	r3, [r7, #28]
 810225c:	689b      	ldr	r3, [r3, #8]
    highAddress = stack_getStackHighAddress( stack );
 810225e:	61bb      	str	r3, [r7, #24]
    CILmemoryProtection_setStackOverflowProtection( lowAddress, highAddress );
 8102260:	69b9      	ldr	r1, [r7, #24]
 8102262:	6a38      	ldr	r0, [r7, #32]
 8102264:	f001 fc3a 	bl	8103adc <CILmemoryProtection_setStackOverflowProtection>
}
 8102268:	bf00      	nop
 810226a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 810226c:	647b      	str	r3, [r7, #68]	; 0x44
 810226e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102270:	643b      	str	r3, [r7, #64]	; 0x40
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemorySize(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemorySize);
 8102272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102274:	681b      	ldr	r3, [r3, #0]
 8102276:	68db      	ldr	r3, [r3, #12]
    size = program_getProgramMemorySize( program );
 8102278:	63fb      	str	r3, [r7, #60]	; 0x3c
 810227a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810227c:	63bb      	str	r3, [r7, #56]	; 0x38
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryLowAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryLowAddress);
 810227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102280:	681b      	ldr	r3, [r3, #0]
 8102282:	691b      	ldr	r3, [r3, #16]
    lowAddress = program_getProgramMemoryLowAddress( program );
 8102284:	637b      	str	r3, [r7, #52]	; 0x34
 8102286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102288:	633b      	str	r3, [r7, #48]	; 0x30
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType program_getProgramMemoryHighAddress(CosmOS_ProgramVariableType * program)
{
    return (program->cfg->programMemoryHighAddress);
 810228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 810228c:	681b      	ldr	r3, [r3, #0]
 810228e:	695b      	ldr	r3, [r3, #20]
    highAddress = program_getProgramMemoryHighAddress( program );
 8102290:	62fb      	str	r3, [r7, #44]	; 0x2c
    if ( size )
 8102292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102294:	2b00      	cmp	r3, #0
 8102296:	d003      	beq.n	81022a0 <memoryProtection_setMemoryProtection+0x8e>
        CILmemoryProtection_setProgramMemoryProtection( lowAddress, highAddress );
 8102298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810229a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 810229c:	f001 fc7a 	bl	8103b94 <CILmemoryProtection_setProgramMemoryProtection>
}
 81022a0:	bf00      	nop
 81022a2:	683b      	ldr	r3, [r7, #0]
 81022a4:	663b      	str	r3, [r7, #96]	; 0x60
 81022a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81022a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    return (schedulable->cfg->peripheralAccessSize);
 81022aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81022ac:	681b      	ldr	r3, [r3, #0]
 81022ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    size = schedulable_getPeripheralAccessSize( schedulable );
 81022b0:	65bb      	str	r3, [r7, #88]	; 0x58
 81022b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81022b4:	657b      	str	r3, [r7, #84]	; 0x54
    return (schedulable->cfg->peripheralAccessLowAddress);
 81022b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81022b8:	681b      	ldr	r3, [r3, #0]
 81022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    lowAddress = schedulable_getPeripheralAccessLowAddress( schedulable );
 81022bc:	653b      	str	r3, [r7, #80]	; 0x50
 81022be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81022c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    return (schedulable->cfg->peripheralAccessHighAddress);
 81022c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81022c4:	681b      	ldr	r3, [r3, #0]
 81022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    highAddress = schedulable_getPeripheralAccessHighAddress( schedulable );
 81022c8:	64bb      	str	r3, [r7, #72]	; 0x48
    if ( size )
 81022ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81022cc:	2b00      	cmp	r3, #0
 81022ce:	d003      	beq.n	81022d8 <memoryProtection_setMemoryProtection+0xc6>
        CILmemoryProtection_setSchedulablePeripheralProtection( lowAddress, highAddress );
 81022d0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 81022d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 81022d4:	f001 fcba 	bl	8103c4c <CILmemoryProtection_setSchedulablePeripheralProtection>
}
 81022d8:	bf00      	nop

    memoryProtection_setStackOverflowProtection( stack );
    memoryProtection_setProgramMemoryProtection( programVar );
	memoryProtection_setSchedulablePeripheralProtection( schedulable );
}
 81022da:	bf00      	nop
 81022dc:	3770      	adds	r7, #112	; 0x70
 81022de:	46bd      	mov	sp, r7
 81022e0:	bd80      	pop	{r7, pc}

081022e2 <memoryProtection_isMemoryRegionProtected>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_BooleanType memoryProtection_isMemoryRegionProtected(CosmOS_CoreVariableType * core, void * regionLowAddressPointer, BitWidthType size)
{
 81022e2:	b480      	push	{r7}
 81022e4:	b097      	sub	sp, #92	; 0x5c
 81022e6:	af00      	add	r7, sp, #0
 81022e8:	60f8      	str	r0, [r7, #12]
 81022ea:	60b9      	str	r1, [r7, #8]
 81022ec:	607a      	str	r2, [r7, #4]
				programLowAddress,
				programHighAddress,
				regionLowAddress,
				regionHighAddress;

	CosmOS_BooleanType isMemoryRegionProtected = True;
 81022ee:	2301      	movs	r3, #1
 81022f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    CosmOS_StackConfigurationType * stack;
    CosmOS_ProgramVariableType * programVar;
	CosmOS_SchedulableVariableType * schedulable;

	regionLowAddress = (AddressType)regionLowAddressPointer;
 81022f4:	68bb      	ldr	r3, [r7, #8]
 81022f6:	653b      	str	r3, [r7, #80]	; 0x50
 81022f8:	68fb      	ldr	r3, [r7, #12]
 81022fa:	617b      	str	r3, [r7, #20]
    return (core->programInExecution);
 81022fc:	697b      	ldr	r3, [r7, #20]
 81022fe:	689b      	ldr	r3, [r3, #8]

    programVar = core_getCoreProgramInExecution( core );
 8102300:	64fb      	str	r3, [r7, #76]	; 0x4c
 8102302:	68fb      	ldr	r3, [r7, #12]
 8102304:	61bb      	str	r3, [r7, #24]
    return (core->schedulableInExecution);
 8102306:	69bb      	ldr	r3, [r7, #24]
 8102308:	685b      	ldr	r3, [r3, #4]
	schedulable = core_getCoreSchedulableInExecution( core );
 810230a:	64bb      	str	r3, [r7, #72]	; 0x48
 810230c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810230e:	61fb      	str	r3, [r7, #28]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 8102310:	69fb      	ldr	r3, [r7, #28]
 8102312:	681b      	ldr	r3, [r3, #0]
 8102314:	681b      	ldr	r3, [r3, #0]
    stack = schedulable_getStack( schedulable );
 8102316:	647b      	str	r3, [r7, #68]	; 0x44
 8102318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810231a:	623b      	str	r3, [r7, #32]
    return (stack->stackLowAddress);
 810231c:	6a3b      	ldr	r3, [r7, #32]
 810231e:	685b      	ldr	r3, [r3, #4]

	stackLowAddress = stack_getStackLowAddress( stack );
 8102320:	643b      	str	r3, [r7, #64]	; 0x40
 8102322:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102324:	627b      	str	r3, [r7, #36]	; 0x24
    return (stack->stackHighAddress);
 8102326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102328:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 810232a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810232c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810232e:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->programMemoryLowAddress);
 8102330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102332:	681b      	ldr	r3, [r3, #0]
 8102334:	691b      	ldr	r3, [r3, #16]

    programLowAddress = program_getProgramMemoryLowAddress( programVar );
 8102336:	63bb      	str	r3, [r7, #56]	; 0x38
 8102338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810233a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (program->cfg->programMemoryHighAddress);
 810233c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810233e:	681b      	ldr	r3, [r3, #0]
 8102340:	695b      	ldr	r3, [r3, #20]
    programHighAddress = program_getProgramMemoryHighAddress( programVar );
 8102342:	637b      	str	r3, [r7, #52]	; 0x34

	regionHighAddress = regionLowAddress + (AddressType)size;
 8102344:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8102346:	687b      	ldr	r3, [r7, #4]
 8102348:	4413      	add	r3, r2
 810234a:	633b      	str	r3, [r7, #48]	; 0x30

	if (((regionHighAddress < stackHighAddress) && (regionLowAddress > stackLowAddress)) || \
 810234c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810234e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102350:	429a      	cmp	r2, r3
 8102352:	d203      	bcs.n	810235c <memoryProtection_isMemoryRegionProtected+0x7a>
 8102354:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8102356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102358:	429a      	cmp	r2, r3
 810235a:	d807      	bhi.n	810236c <memoryProtection_isMemoryRegionProtected+0x8a>
 810235c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810235e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102360:	429a      	cmp	r2, r3
 8102362:	d206      	bcs.n	8102372 <memoryProtection_isMemoryRegionProtected+0x90>
		((regionHighAddress < programHighAddress) && (regionLowAddress > programLowAddress)))
 8102364:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8102366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102368:	429a      	cmp	r2, r3
 810236a:	d902      	bls.n	8102372 <memoryProtection_isMemoryRegionProtected+0x90>
	{
		isMemoryRegionProtected = False;
 810236c:	2300      	movs	r3, #0
 810236e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}

	return isMemoryRegionProtected;
 8102372:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8102376:	4618      	mov	r0, r3
 8102378:	375c      	adds	r7, #92	; 0x5c
 810237a:	46bd      	mov	sp, r7
 810237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102380:	4770      	bx	lr
	...

08102384 <mutex_getMutexInternal>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_getMutexInternal(BitWidthType entityId, CosmOS_MutexVariableType * mutexVar)
{
 8102384:	b580      	push	{r7, lr}
 8102386:	b088      	sub	sp, #32
 8102388:	af00      	add	r7, sp, #0
 810238a:	6078      	str	r0, [r7, #4]
 810238c:	6039      	str	r1, [r7, #0]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 810238e:	464b      	mov	r3, r9
 8102390:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 8102392:	693b      	ldr	r3, [r7, #16]

	CosmOS_CoreVariableType * coreVar;
	CosmOS_ThreadVariableType * threadVar;


	coreVar = CILcore_getCoreVar();
 8102394:	61fb      	str	r3, [r7, #28]

	mutexState = CILmutex_tryMutex(&(mutexVar->mutex));
 8102396:	683b      	ldr	r3, [r7, #0]
 8102398:	4618      	mov	r0, r3
 810239a:	f001 fcb3 	bl	8103d04 <CILmutex_tryMutex>
 810239e:	61b8      	str	r0, [r7, #24]
	if ( mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED )
 81023a0:	69bb      	ldr	r3, [r7, #24]
 81023a2:	2b02      	cmp	r3, #2
 81023a4:	d104      	bne.n	81023b0 <mutex_getMutexInternal+0x2c>
	{
		mutexVar->schedulableOwner = coreVar->schedulableInExecution;
 81023a6:	69fb      	ldr	r3, [r7, #28]
 81023a8:	685a      	ldr	r2, [r3, #4]
 81023aa:	683b      	ldr	r3, [r7, #0]
 81023ac:	605a      	str	r2, [r3, #4]
 81023ae:	e01e      	b.n	81023ee <mutex_getMutexInternal+0x6a>
		__SUPRESS_UNUSED_VAR(threadVar);
	}
	else
	{
		threadVar = program_getProgramThread(coreVar->programInExecution,coreVar->schedulableInExecution->cfg->instanceId);
 81023b0:	69fb      	ldr	r3, [r7, #28]
 81023b2:	689a      	ldr	r2, [r3, #8]
 81023b4:	69fb      	ldr	r3, [r7, #28]
 81023b6:	685b      	ldr	r3, [r3, #4]
 81023b8:	681b      	ldr	r3, [r3, #0]
 81023ba:	695b      	ldr	r3, [r3, #20]
 81023bc:	60fa      	str	r2, [r7, #12]
 81023be:	60bb      	str	r3, [r7, #8]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * program_getProgramThread(CosmOS_ProgramVariableType * program, BitWidthType threadIterator)
{
    return (&(program->threadVars[threadIterator]));
 81023c0:	68fb      	ldr	r3, [r7, #12]
 81023c2:	6899      	ldr	r1, [r3, #8]
 81023c4:	68ba      	ldr	r2, [r7, #8]
 81023c6:	4613      	mov	r3, r2
 81023c8:	005b      	lsls	r3, r3, #1
 81023ca:	4413      	add	r3, r2
 81023cc:	009b      	lsls	r3, r3, #2
 81023ce:	440b      	add	r3, r1
 81023d0:	617b      	str	r3, [r7, #20]
		threadVar->blockingMutexVar = mutexVar;
 81023d2:	697b      	ldr	r3, [r7, #20]
 81023d4:	683a      	ldr	r2, [r7, #0]
 81023d6:	609a      	str	r2, [r3, #8]
		coreVar->schedulableInExecution->state = SCHEDULABLE_STATE_ENUM__BLOCKED;
 81023d8:	69fb      	ldr	r3, [r7, #28]
 81023da:	685b      	ldr	r3, [r3, #4]
 81023dc:	2202      	movs	r2, #2
 81023de:	605a      	str	r2, [r3, #4]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void CILinterrupt_contextSwitchRoutineTrigger(void)
{
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 81023e0:	4b05      	ldr	r3, [pc, #20]	; (81023f8 <mutex_getMutexInternal+0x74>)
 81023e2:	685b      	ldr	r3, [r3, #4]
 81023e4:	4a04      	ldr	r2, [pc, #16]	; (81023f8 <mutex_getMutexInternal+0x74>)
 81023e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81023ea:	6053      	str	r3, [r2, #4]
}
 81023ec:	bf00      	nop
		CILinterrupt_contextSwitchRoutineTrigger();
	}

	__SUPRESS_UNUSED_VAR(entityId);
	return mutexState;
 81023ee:	69bb      	ldr	r3, [r7, #24]
}
 81023f0:	4618      	mov	r0, r3
 81023f2:	3720      	adds	r7, #32
 81023f4:	46bd      	mov	sp, r7
 81023f6:	bd80      	pop	{r7, pc}
 81023f8:	e000ed00 	.word	0xe000ed00

081023fc <mutex_getMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_getMutex(CosmOS_MutexVariableType * mutexVar)
{
 81023fc:	b580      	push	{r7, lr}
 81023fe:	b088      	sub	sp, #32
 8102400:	af00      	add	r7, sp, #0
 8102402:	6078      	str	r0, [r7, #4]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8102404:	464b      	mov	r3, r9
 8102406:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 8102408:	693b      	ldr	r3, [r7, #16]
	CosmOS_MutexStateType mutexState;

	CosmOS_CoreVariableType * coreVar;


	coreVar = CILcore_getCoreVar();
 810240a:	61bb      	str	r3, [r7, #24]

	isMutexInProtectedMemory = memoryProtection_isMemoryRegionProtected(coreVar, (void *)mutexVar, sizeof(mutexVar));
 810240c:	2204      	movs	r2, #4
 810240e:	6879      	ldr	r1, [r7, #4]
 8102410:	69b8      	ldr	r0, [r7, #24]
 8102412:	f7ff ff66 	bl	81022e2 <memoryProtection_isMemoryRegionProtected>
 8102416:	4603      	mov	r3, r0
 8102418:	75fb      	strb	r3, [r7, #23]

	if ( IS_NOT(isMutexInProtectedMemory) )
 810241a:	7dfb      	ldrb	r3, [r7, #23]
 810241c:	2b00      	cmp	r3, #0
 810241e:	d12c      	bne.n	810247a <mutex_getMutex+0x7e>
	{
		if (coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 8102420:	69bb      	ldr	r3, [r7, #24]
 8102422:	685b      	ldr	r3, [r3, #4]
 8102424:	681b      	ldr	r3, [r3, #0]
 8102426:	685b      	ldr	r3, [r3, #4]
 8102428:	f1b3 3fff 	cmp.w	r3, #4294967295
 810242c:	d122      	bne.n	8102474 <mutex_getMutex+0x78>
 810242e:	69bb      	ldr	r3, [r7, #24]
 8102430:	60fb      	str	r3, [r7, #12]
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	60bb      	str	r3, [r7, #8]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType mutex_willCauseDeadlock(CosmOS_CoreVariableType * coreVar, CosmOS_MutexVariableType * mutexVar)
{
	return ((mutexVar->mutex IS_EQUAL_TO MUTEX_STATE_ENUM__OCCUPIED)\
 8102436:	68bb      	ldr	r3, [r7, #8]
 8102438:	681b      	ldr	r3, [r3, #0]
			AND (coreVar->schedulableInExecution IS_EQUAL_TO mutexVar->schedulableOwner)) ? True : False;
 810243a:	2b01      	cmp	r3, #1
 810243c:	d107      	bne.n	810244e <mutex_getMutex+0x52>
 810243e:	68fb      	ldr	r3, [r7, #12]
 8102440:	685a      	ldr	r2, [r3, #4]
 8102442:	68bb      	ldr	r3, [r7, #8]
 8102444:	685b      	ldr	r3, [r3, #4]
 8102446:	429a      	cmp	r2, r3
 8102448:	d101      	bne.n	810244e <mutex_getMutex+0x52>
 810244a:	2301      	movs	r3, #1
 810244c:	e000      	b.n	8102450 <mutex_getMutex+0x54>
 810244e:	2300      	movs	r3, #0
 8102450:	b2db      	uxtb	r3, r3
		{
			willCauseDeadlock = mutex_willCauseDeadlock(coreVar, mutexVar);
 8102452:	75bb      	strb	r3, [r7, #22]
			if( willCauseDeadlock )
 8102454:	7dbb      	ldrb	r3, [r7, #22]
 8102456:	2b00      	cmp	r3, #0
 8102458:	d003      	beq.n	8102462 <mutex_getMutex+0x66>
			{
				mutexState = MUTEX_STATE_ENUM__DEADLOCK_WARNING;
 810245a:	f04f 33ff 	mov.w	r3, #4294967295
 810245e:	61fb      	str	r3, [r7, #28]
 8102460:	e00d      	b.n	810247e <mutex_getMutex+0x82>
			}
			else
			{
				do
				{
					mutexState = cosmosApiInternal_mutex_getMutexInternal(mutexVar);
 8102462:	6879      	ldr	r1, [r7, #4]
 8102464:	2019      	movs	r0, #25
 8102466:	f001 f85d 	bl	8103524 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 810246a:	61f8      	str	r0, [r7, #28]
				} while ( mutexState IS_NOT_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED );
 810246c:	69fb      	ldr	r3, [r7, #28]
 810246e:	2b02      	cmp	r3, #2
 8102470:	d1f7      	bne.n	8102462 <mutex_getMutex+0x66>
 8102472:	e004      	b.n	810247e <mutex_getMutex+0x82>

			}
		}
		else
		{
			mutexState = MUTEX_STATE_ENUM__ERROR_ONLY_THREADS_CAN_MUTEX;
 8102474:	2305      	movs	r3, #5
 8102476:	61fb      	str	r3, [r7, #28]
 8102478:	e001      	b.n	810247e <mutex_getMutex+0x82>
		}
	}
	else
	{
		mutexState = MUTEX_STATE_ENUM__ERROR_INVALID_MUTEX_ADDRESS;
 810247a:	2306      	movs	r3, #6
 810247c:	61fb      	str	r3, [r7, #28]
	}

	return mutexState;
 810247e:	69fb      	ldr	r3, [r7, #28]
}
 8102480:	4618      	mov	r0, r3
 8102482:	3720      	adds	r7, #32
 8102484:	46bd      	mov	sp, r7
 8102486:	bd80      	pop	{r7, pc}

08102488 <mutex_tryMutexInternal>:
{
 8102488:	b580      	push	{r7, lr}
 810248a:	b086      	sub	sp, #24
 810248c:	af00      	add	r7, sp, #0
 810248e:	6078      	str	r0, [r7, #4]
 8102490:	6039      	str	r1, [r7, #0]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 8102492:	464b      	mov	r3, r9
 8102494:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 8102496:	68fb      	ldr	r3, [r7, #12]
	coreVar = CILcore_getCoreVar();
 8102498:	617b      	str	r3, [r7, #20]
	mutexState = CILmutex_tryMutex(&(mutexVar->mutex));
 810249a:	683b      	ldr	r3, [r7, #0]
 810249c:	4618      	mov	r0, r3
 810249e:	f001 fc31 	bl	8103d04 <CILmutex_tryMutex>
 81024a2:	6138      	str	r0, [r7, #16]
	if ( mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED )
 81024a4:	693b      	ldr	r3, [r7, #16]
 81024a6:	2b02      	cmp	r3, #2
 81024a8:	d103      	bne.n	81024b2 <mutex_tryMutexInternal+0x2a>
		mutexVar->schedulableOwner = coreVar->schedulableInExecution;
 81024aa:	697b      	ldr	r3, [r7, #20]
 81024ac:	685a      	ldr	r2, [r3, #4]
 81024ae:	683b      	ldr	r3, [r7, #0]
 81024b0:	605a      	str	r2, [r3, #4]
	return mutexState;
 81024b2:	693b      	ldr	r3, [r7, #16]
}
 81024b4:	4618      	mov	r0, r3
 81024b6:	3718      	adds	r7, #24
 81024b8:	46bd      	mov	sp, r7
 81024ba:	bd80      	pop	{r7, pc}

081024bc <mutex_releaseMutexInternal>:
{
 81024bc:	b580      	push	{r7, lr}
 81024be:	b08a      	sub	sp, #40	; 0x28
 81024c0:	af00      	add	r7, sp, #0
 81024c2:	6078      	str	r0, [r7, #4]
 81024c4:	6039      	str	r1, [r7, #0]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81024c6:	464b      	mov	r3, r9
 81024c8:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 81024ca:	693b      	ldr	r3, [r7, #16]
	coreVar = CILcore_getCoreVar();
 81024cc:	61fb      	str	r3, [r7, #28]
	mutexState = CILmutex_releaseMutex(&(mutexVar->mutex));
 81024ce:	683b      	ldr	r3, [r7, #0]
 81024d0:	4618      	mov	r0, r3
 81024d2:	f001 fc30 	bl	8103d36 <CILmutex_releaseMutex>
 81024d6:	61b8      	str	r0, [r7, #24]
	higherPriorityThreadBlocked = False;
 81024d8:	2300      	movs	r3, #0
 81024da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (BitWidthType iterator = 0; iterator < coreVar->programInExecution->cfg->numberOfThreads; iterator++)
 81024de:	2300      	movs	r3, #0
 81024e0:	623b      	str	r3, [r7, #32]
 81024e2:	e04b      	b.n	810257c <mutex_releaseMutexInternal+0xc0>
		if (coreVar->programInExecution->threadVars[iterator].blockingMutexVar IS_EQUAL_TO mutexVar)
 81024e4:	69fb      	ldr	r3, [r7, #28]
 81024e6:	689b      	ldr	r3, [r3, #8]
 81024e8:	6899      	ldr	r1, [r3, #8]
 81024ea:	6a3a      	ldr	r2, [r7, #32]
 81024ec:	4613      	mov	r3, r2
 81024ee:	005b      	lsls	r3, r3, #1
 81024f0:	4413      	add	r3, r2
 81024f2:	009b      	lsls	r3, r3, #2
 81024f4:	440b      	add	r3, r1
 81024f6:	689b      	ldr	r3, [r3, #8]
 81024f8:	683a      	ldr	r2, [r7, #0]
 81024fa:	429a      	cmp	r2, r3
 81024fc:	d13b      	bne.n	8102576 <mutex_releaseMutexInternal+0xba>
			coreVar->programInExecution->threadVars[iterator].schedulable->state = SCHEDULABLE_STATE_ENUM__READY;
 81024fe:	69fb      	ldr	r3, [r7, #28]
 8102500:	689b      	ldr	r3, [r3, #8]
 8102502:	6899      	ldr	r1, [r3, #8]
 8102504:	6a3a      	ldr	r2, [r7, #32]
 8102506:	4613      	mov	r3, r2
 8102508:	005b      	lsls	r3, r3, #1
 810250a:	4413      	add	r3, r2
 810250c:	009b      	lsls	r3, r3, #2
 810250e:	440b      	add	r3, r1
 8102510:	685b      	ldr	r3, [r3, #4]
 8102512:	f04f 32ff 	mov.w	r2, #4294967295
 8102516:	605a      	str	r2, [r3, #4]
			coreVar->programInExecution->threadVars[iterator].blockingMutexVar = NULL;
 8102518:	69fb      	ldr	r3, [r7, #28]
 810251a:	689b      	ldr	r3, [r3, #8]
 810251c:	6899      	ldr	r1, [r3, #8]
 810251e:	6a3a      	ldr	r2, [r7, #32]
 8102520:	4613      	mov	r3, r2
 8102522:	005b      	lsls	r3, r3, #1
 8102524:	4413      	add	r3, r2
 8102526:	009b      	lsls	r3, r3, #2
 8102528:	440b      	add	r3, r1
 810252a:	2200      	movs	r2, #0
 810252c:	609a      	str	r2, [r3, #8]
			threadVar = program_getProgramThread(coreVar->programInExecution,coreVar->schedulableInExecution->cfg->instanceId);
 810252e:	69fb      	ldr	r3, [r7, #28]
 8102530:	689a      	ldr	r2, [r3, #8]
 8102532:	69fb      	ldr	r3, [r7, #28]
 8102534:	685b      	ldr	r3, [r3, #4]
 8102536:	681b      	ldr	r3, [r3, #0]
 8102538:	695b      	ldr	r3, [r3, #20]
 810253a:	60fa      	str	r2, [r7, #12]
 810253c:	60bb      	str	r3, [r7, #8]
 810253e:	68fb      	ldr	r3, [r7, #12]
 8102540:	6899      	ldr	r1, [r3, #8]
 8102542:	68ba      	ldr	r2, [r7, #8]
 8102544:	4613      	mov	r3, r2
 8102546:	005b      	lsls	r3, r3, #1
 8102548:	4413      	add	r3, r2
 810254a:	009b      	lsls	r3, r3, #2
 810254c:	440b      	add	r3, r1
 810254e:	617b      	str	r3, [r7, #20]
			if ( coreVar->programInExecution->threadVars[iterator].cfg->priority > threadVar->cfg->priority )
 8102550:	69fb      	ldr	r3, [r7, #28]
 8102552:	689b      	ldr	r3, [r3, #8]
 8102554:	6899      	ldr	r1, [r3, #8]
 8102556:	6a3a      	ldr	r2, [r7, #32]
 8102558:	4613      	mov	r3, r2
 810255a:	005b      	lsls	r3, r3, #1
 810255c:	4413      	add	r3, r2
 810255e:	009b      	lsls	r3, r3, #2
 8102560:	440b      	add	r3, r1
 8102562:	681b      	ldr	r3, [r3, #0]
 8102564:	681a      	ldr	r2, [r3, #0]
 8102566:	697b      	ldr	r3, [r7, #20]
 8102568:	681b      	ldr	r3, [r3, #0]
 810256a:	681b      	ldr	r3, [r3, #0]
 810256c:	429a      	cmp	r2, r3
 810256e:	d902      	bls.n	8102576 <mutex_releaseMutexInternal+0xba>
				higherPriorityThreadBlocked = True;
 8102570:	2301      	movs	r3, #1
 8102572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for (BitWidthType iterator = 0; iterator < coreVar->programInExecution->cfg->numberOfThreads; iterator++)
 8102576:	6a3b      	ldr	r3, [r7, #32]
 8102578:	3301      	adds	r3, #1
 810257a:	623b      	str	r3, [r7, #32]
 810257c:	69fb      	ldr	r3, [r7, #28]
 810257e:	689b      	ldr	r3, [r3, #8]
 8102580:	681b      	ldr	r3, [r3, #0]
 8102582:	689b      	ldr	r3, [r3, #8]
 8102584:	6a3a      	ldr	r2, [r7, #32]
 8102586:	429a      	cmp	r2, r3
 8102588:	d3ac      	bcc.n	81024e4 <mutex_releaseMutexInternal+0x28>
	if (higherPriorityThreadBlocked)
 810258a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810258e:	2b00      	cmp	r3, #0
 8102590:	d006      	beq.n	81025a0 <mutex_releaseMutexInternal+0xe4>
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8102592:	4b06      	ldr	r3, [pc, #24]	; (81025ac <mutex_releaseMutexInternal+0xf0>)
 8102594:	685b      	ldr	r3, [r3, #4]
 8102596:	4a05      	ldr	r2, [pc, #20]	; (81025ac <mutex_releaseMutexInternal+0xf0>)
 8102598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810259c:	6053      	str	r3, [r2, #4]
}
 810259e:	bf00      	nop
	return mutexState;
 81025a0:	69bb      	ldr	r3, [r7, #24]
}
 81025a2:	4618      	mov	r0, r3
 81025a4:	3728      	adds	r7, #40	; 0x28
 81025a6:	46bd      	mov	sp, r7
 81025a8:	bd80      	pop	{r7, pc}
 81025aa:	bf00      	nop
 81025ac:	e000ed00 	.word	0xe000ed00

081025b0 <mutex_tryMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_tryMutex(CosmOS_MutexVariableType * mutexVar)
{
 81025b0:	b580      	push	{r7, lr}
 81025b2:	b086      	sub	sp, #24
 81025b4:	af00      	add	r7, sp, #0
 81025b6:	6078      	str	r0, [r7, #4]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81025b8:	464b      	mov	r3, r9
 81025ba:	60bb      	str	r3, [r7, #8]
    return (CosmOS_CoreVariableType *)result;
 81025bc:	68bb      	ldr	r3, [r7, #8]
	CosmOS_MutexStateType mutexState;

	CosmOS_CoreVariableType * coreVar;


	coreVar = CILcore_getCoreVar();
 81025be:	613b      	str	r3, [r7, #16]

	isMutexInProtectedMemory = memoryProtection_isMemoryRegionProtected(coreVar, (void *)mutexVar, sizeof(mutexVar));
 81025c0:	2204      	movs	r2, #4
 81025c2:	6879      	ldr	r1, [r7, #4]
 81025c4:	6938      	ldr	r0, [r7, #16]
 81025c6:	f7ff fe8c 	bl	81022e2 <memoryProtection_isMemoryRegionProtected>
 81025ca:	4603      	mov	r3, r0
 81025cc:	73fb      	strb	r3, [r7, #15]

	if ( IS_NOT(isMutexInProtectedMemory) )
 81025ce:	7bfb      	ldrb	r3, [r7, #15]
 81025d0:	2b00      	cmp	r3, #0
 81025d2:	d10f      	bne.n	81025f4 <mutex_tryMutex+0x44>
	{
		if (coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 81025d4:	693b      	ldr	r3, [r7, #16]
 81025d6:	685b      	ldr	r3, [r3, #4]
 81025d8:	681b      	ldr	r3, [r3, #0]
 81025da:	685b      	ldr	r3, [r3, #4]
 81025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 81025e0:	d105      	bne.n	81025ee <mutex_tryMutex+0x3e>
		{
			mutexState = cosmosApiInternal_mutex_tryMutexInternal(mutexVar);
 81025e2:	6879      	ldr	r1, [r7, #4]
 81025e4:	201a      	movs	r0, #26
 81025e6:	f000 ff9d 	bl	8103524 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 81025ea:	6178      	str	r0, [r7, #20]
 81025ec:	e004      	b.n	81025f8 <mutex_tryMutex+0x48>
		}
		else
		{
			mutexState = MUTEX_STATE_ENUM__ERROR_ONLY_THREADS_CAN_MUTEX;
 81025ee:	2305      	movs	r3, #5
 81025f0:	617b      	str	r3, [r7, #20]
 81025f2:	e001      	b.n	81025f8 <mutex_tryMutex+0x48>
		}
	}
	else
	{
		mutexState = MUTEX_STATE_ENUM__ERROR_INVALID_MUTEX_ADDRESS;
 81025f4:	2306      	movs	r3, #6
 81025f6:	617b      	str	r3, [r7, #20]
	}

	return mutexState;
 81025f8:	697b      	ldr	r3, [r7, #20]
}
 81025fa:	4618      	mov	r0, r3
 81025fc:	3718      	adds	r7, #24
 81025fe:	46bd      	mov	sp, r7
 8102600:	bd80      	pop	{r7, pc}

08102602 <mutex_releaseMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType mutex_releaseMutex(CosmOS_MutexVariableType * mutexVar)
{
 8102602:	b580      	push	{r7, lr}
 8102604:	b088      	sub	sp, #32
 8102606:	af00      	add	r7, sp, #0
 8102608:	6078      	str	r0, [r7, #4]
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 810260a:	464b      	mov	r3, r9
 810260c:	613b      	str	r3, [r7, #16]
    return (CosmOS_CoreVariableType *)result;
 810260e:	693b      	ldr	r3, [r7, #16]
	CosmOS_MutexStateType mutexState;

	CosmOS_CoreVariableType * coreVar;


	coreVar = CILcore_getCoreVar();
 8102610:	61bb      	str	r3, [r7, #24]

	isMutexInProtectedMemory = memoryProtection_isMemoryRegionProtected(coreVar, (void *)mutexVar, sizeof(mutexVar));
 8102612:	2204      	movs	r2, #4
 8102614:	6879      	ldr	r1, [r7, #4]
 8102616:	69b8      	ldr	r0, [r7, #24]
 8102618:	f7ff fe63 	bl	81022e2 <memoryProtection_isMemoryRegionProtected>
 810261c:	4603      	mov	r3, r0
 810261e:	75fb      	strb	r3, [r7, #23]

	if ( IS_NOT(isMutexInProtectedMemory) )
 8102620:	7dfb      	ldrb	r3, [r7, #23]
 8102622:	2b00      	cmp	r3, #0
 8102624:	d12a      	bne.n	810267c <mutex_releaseMutex+0x7a>
	{
		if (coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 8102626:	69bb      	ldr	r3, [r7, #24]
 8102628:	685b      	ldr	r3, [r3, #4]
 810262a:	681b      	ldr	r3, [r3, #0]
 810262c:	685b      	ldr	r3, [r3, #4]
 810262e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102632:	d120      	bne.n	8102676 <mutex_releaseMutex+0x74>
 8102634:	69bb      	ldr	r3, [r7, #24]
 8102636:	60fb      	str	r3, [r7, #12]
 8102638:	687b      	ldr	r3, [r7, #4]
 810263a:	60bb      	str	r3, [r7, #8]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType mutex_ownsSchedulableMutex(CosmOS_CoreVariableType * coreVar, CosmOS_MutexVariableType * mutexVar)
{
	return (coreVar->schedulableInExecution IS_EQUAL_TO mutexVar->schedulableOwner) ? True : False;
 810263c:	68fb      	ldr	r3, [r7, #12]
 810263e:	685a      	ldr	r2, [r3, #4]
 8102640:	68bb      	ldr	r3, [r7, #8]
 8102642:	685b      	ldr	r3, [r3, #4]
 8102644:	429a      	cmp	r2, r3
 8102646:	bf0c      	ite	eq
 8102648:	2301      	moveq	r3, #1
 810264a:	2300      	movne	r3, #0
 810264c:	b2db      	uxtb	r3, r3
		{
			ownsSchedulableMutex = mutex_ownsSchedulableMutex(coreVar, mutexVar);
 810264e:	75bb      	strb	r3, [r7, #22]
			if ( mutexVar->mutex IS_EQUAL_TO MUTEX_STATE_ENUM__OCCUPIED )
 8102650:	687b      	ldr	r3, [r7, #4]
 8102652:	681b      	ldr	r3, [r3, #0]
 8102654:	2b01      	cmp	r3, #1
 8102656:	d10b      	bne.n	8102670 <mutex_releaseMutex+0x6e>
			{
				if ( ownsSchedulableMutex )
 8102658:	7dbb      	ldrb	r3, [r7, #22]
 810265a:	2b00      	cmp	r3, #0
 810265c:	d005      	beq.n	810266a <mutex_releaseMutex+0x68>
				{
					mutexState = cosmosApiInternal_mutex_releaseMutexInternal(mutexVar);
 810265e:	6879      	ldr	r1, [r7, #4]
 8102660:	201b      	movs	r0, #27
 8102662:	f000 ff5f 	bl	8103524 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 8102666:	61f8      	str	r0, [r7, #28]
 8102668:	e00a      	b.n	8102680 <mutex_releaseMutex+0x7e>
				}
				else
				{
					mutexState = MUTEX_STATE_ENUM__ERROR_SCHEDULABLE_IS_NOT_OWNER;
 810266a:	2303      	movs	r3, #3
 810266c:	61fb      	str	r3, [r7, #28]
 810266e:	e007      	b.n	8102680 <mutex_releaseMutex+0x7e>
				}
			}
			else
			{
				mutexState = MUTEX_STATE_ENUM__ERROR_NOT_IN_OCCUPIED_STATE;
 8102670:	2304      	movs	r3, #4
 8102672:	61fb      	str	r3, [r7, #28]
 8102674:	e004      	b.n	8102680 <mutex_releaseMutex+0x7e>
			}
		}
		else
		{
			mutexState = MUTEX_STATE_ENUM__ERROR_ONLY_THREADS_CAN_MUTEX;
 8102676:	2305      	movs	r3, #5
 8102678:	61fb      	str	r3, [r7, #28]
 810267a:	e001      	b.n	8102680 <mutex_releaseMutex+0x7e>
		}
	}
	else
	{
		mutexState = MUTEX_STATE_ENUM__ERROR_INVALID_MUTEX_ADDRESS;
 810267c:	2306      	movs	r3, #6
 810267e:	61fb      	str	r3, [r7, #28]
	}

	return mutexState;
 8102680:	69fb      	ldr	r3, [r7, #28]
}
 8102682:	4618      	mov	r0, r3
 8102684:	3720      	adds	r7, #32
 8102686:	46bd      	mov	sp, r7
 8102688:	bd80      	pop	{r7, pc}
 810268a:	bf00      	nop

0810268c <os_getOsVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_OsVariableType * os_getOsVar(void)
{
 810268c:	b480      	push	{r7}
 810268e:	af00      	add	r7, sp, #0
    return &OsVar;
 8102690:	4b02      	ldr	r3, [pc, #8]	; (810269c <os_getOsVar+0x10>)
}
 8102692:	4618      	mov	r0, r3
 8102694:	46bd      	mov	sp, r7
 8102696:	f85d 7b04 	ldr.w	r7, [sp], #4
 810269a:	4770      	bx	lr
 810269c:	3800835c 	.word	0x3800835c

081026a0 <os_kernelPanic>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_kernelPanic(void)
{
 81026a0:	b580      	push	{r7, lr}
 81026a2:	b082      	sub	sp, #8
 81026a4:	af00      	add	r7, sp, #0
	CosmOS_CoreVariableType * coreVar;


	coreVar = core_getCoreVar();
 81026a6:	f7ff fc70 	bl	8101f8a <core_getCoreVar>
 81026aa:	6078      	str	r0, [r7, #4]
    coreVar->cfg->kernelPanicHook();
 81026ac:	687b      	ldr	r3, [r7, #4]
 81026ae:	681b      	ldr	r3, [r3, #0]
 81026b0:	691b      	ldr	r3, [r3, #16]
 81026b2:	4798      	blx	r3

	for(;;);
 81026b4:	e7fe      	b.n	81026b4 <os_kernelPanic+0x14>

081026b6 <os_start>:
{
 81026b6:	b580      	push	{r7, lr}
 81026b8:	b082      	sub	sp, #8
 81026ba:	af00      	add	r7, sp, #0
 81026bc:	6078      	str	r0, [r7, #4]
    scheduler_start();
 81026be:	f000 fbc7 	bl	8102e50 <scheduler_start>
};
 81026c2:	bf00      	nop
 81026c4:	3708      	adds	r7, #8
 81026c6:	46bd      	mov	sp, r7
 81026c8:	bd80      	pop	{r7, pc}

081026ca <os_write8>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_write8(BitWidthType entityId,uint8_t *address,uint8_t value)
{
 81026ca:	b480      	push	{r7}
 81026cc:	b085      	sub	sp, #20
 81026ce:	af00      	add	r7, sp, #0
 81026d0:	60f8      	str	r0, [r7, #12]
 81026d2:	60b9      	str	r1, [r7, #8]
 81026d4:	4613      	mov	r3, r2
 81026d6:	71fb      	strb	r3, [r7, #7]
	//TODO: memoryProtection_isMemoryRegionProtected check
	*address = value;
 81026d8:	68bb      	ldr	r3, [r7, #8]
 81026da:	79fa      	ldrb	r2, [r7, #7]
 81026dc:	701a      	strb	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(entityId);
}
 81026de:	bf00      	nop
 81026e0:	3714      	adds	r7, #20
 81026e2:	46bd      	mov	sp, r7
 81026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026e8:	4770      	bx	lr

081026ea <os_write16>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_write16(BitWidthType entityId,uint16_t *address,uint16_t value)
{
 81026ea:	b480      	push	{r7}
 81026ec:	b085      	sub	sp, #20
 81026ee:	af00      	add	r7, sp, #0
 81026f0:	60f8      	str	r0, [r7, #12]
 81026f2:	60b9      	str	r1, [r7, #8]
 81026f4:	4613      	mov	r3, r2
 81026f6:	80fb      	strh	r3, [r7, #6]
	//TODO: memoryProtection_isMemoryRegionProtected check
	*address = value;
 81026f8:	68bb      	ldr	r3, [r7, #8]
 81026fa:	88fa      	ldrh	r2, [r7, #6]
 81026fc:	801a      	strh	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(entityId);
}
 81026fe:	bf00      	nop
 8102700:	3714      	adds	r7, #20
 8102702:	46bd      	mov	sp, r7
 8102704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102708:	4770      	bx	lr

0810270a <os_write32>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void os_write32(BitWidthType entityId,uint32_t *address,uint32_t value)
{
 810270a:	b480      	push	{r7}
 810270c:	b085      	sub	sp, #20
 810270e:	af00      	add	r7, sp, #0
 8102710:	60f8      	str	r0, [r7, #12]
 8102712:	60b9      	str	r1, [r7, #8]
 8102714:	607a      	str	r2, [r7, #4]
	//TODO: memoryProtection_isMemoryRegionProtected check
	*address = value;
 8102716:	68bb      	ldr	r3, [r7, #8]
 8102718:	687a      	ldr	r2, [r7, #4]
 810271a:	601a      	str	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(entityId);
}
 810271c:	bf00      	nop
 810271e:	3714      	adds	r7, #20
 8102720:	46bd      	mov	sp, r7
 8102722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102726:	4770      	bx	lr

08102728 <osBoot_bootValidate>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osBoot_bootValidate(void)
{
 8102728:	b580      	push	{r7, lr}
 810272a:	b08c      	sub	sp, #48	; 0x30
 810272c:	af00      	add	r7, sp, #0
	BitWidthType  coreId,
					programSectionsNumber;

	CosmOS_ProgramSectionConfigurationType * programSections;

	coreId = CILcore_getCoreId();
 810272e:	f001 f83b 	bl	81037a8 <CILcore_getCoreId>
 8102732:	62b8      	str	r0, [r7, #40]	; 0x28

	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 8102734:	4a2f      	ldr	r2, [pc, #188]	; (81027f4 <osBoot_bootValidate+0xcc>)
 8102736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810273c:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 810273e:	4a2d      	ldr	r2, [pc, #180]	; (81027f4 <osBoot_bootValidate+0xcc>)
 8102740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102742:	00db      	lsls	r3, r3, #3
 8102744:	4413      	add	r3, r2
 8102746:	685b      	ldr	r3, [r3, #4]
 8102748:	623b      	str	r3, [r7, #32]


	for (BitWidthType i=0; i < programSectionsNumber; i++)
 810274a:	2300      	movs	r3, #0
 810274c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810274e:	e048      	b.n	81027e2 <osBoot_bootValidate+0xba>
	{
		osBoot_validateSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 8102750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102752:	4613      	mov	r3, r2
 8102754:	005b      	lsls	r3, r3, #1
 8102756:	4413      	add	r3, r2
 8102758:	009b      	lsls	r3, r3, #2
 810275a:	461a      	mov	r2, r3
 810275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810275e:	4413      	add	r3, r2
 8102760:	6818      	ldr	r0, [r3, #0]
 8102762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102764:	4613      	mov	r3, r2
 8102766:	005b      	lsls	r3, r3, #1
 8102768:	4413      	add	r3, r2
 810276a:	009b      	lsls	r3, r3, #2
 810276c:	461a      	mov	r2, r3
 810276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102770:	4413      	add	r3, r2
 8102772:	6859      	ldr	r1, [r3, #4]
 8102774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102776:	4613      	mov	r3, r2
 8102778:	005b      	lsls	r3, r3, #1
 810277a:	4413      	add	r3, r2
 810277c:	009b      	lsls	r3, r3, #2
 810277e:	461a      	mov	r2, r3
 8102780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102782:	4413      	add	r3, r2
 8102784:	689b      	ldr	r3, [r3, #8]
 8102786:	61f8      	str	r0, [r7, #28]
 8102788:	61b9      	str	r1, [r7, #24]
 810278a:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 810278c:	69ba      	ldr	r2, [r7, #24]
 810278e:	69fb      	ldr	r3, [r7, #28]
 8102790:	1ad3      	subs	r3, r2, r3
 8102792:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 8102794:	69fb      	ldr	r3, [r7, #28]
 8102796:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 8102798:	697b      	ldr	r3, [r7, #20]
 810279a:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 810279c:	2300      	movs	r3, #0
 810279e:	607b      	str	r3, [r7, #4]
 81027a0:	e016      	b.n	81027d0 <osBoot_bootValidate+0xa8>
		cosmosAssert( (*pDst++) IS_EQUAL_TO (*pSrc++) );
 81027a2:	68fb      	ldr	r3, [r7, #12]
 81027a4:	1c5a      	adds	r2, r3, #1
 81027a6:	60fa      	str	r2, [r7, #12]
 81027a8:	781a      	ldrb	r2, [r3, #0]
 81027aa:	68bb      	ldr	r3, [r7, #8]
 81027ac:	1c59      	adds	r1, r3, #1
 81027ae:	60b9      	str	r1, [r7, #8]
 81027b0:	781b      	ldrb	r3, [r3, #0]
 81027b2:	429a      	cmp	r2, r3
 81027b4:	bf0c      	ite	eq
 81027b6:	2301      	moveq	r3, #1
 81027b8:	2300      	movne	r3, #0
 81027ba:	b2db      	uxtb	r3, r3
 81027bc:	603b      	str	r3, [r7, #0]
    if ( IS_NOT( result ) )
 81027be:	683b      	ldr	r3, [r7, #0]
 81027c0:	2b00      	cmp	r3, #0
 81027c2:	d101      	bne.n	81027c8 <osBoot_bootValidate+0xa0>
        os_kernelPanic();
 81027c4:	f7ff ff6c 	bl	81026a0 <os_kernelPanic>
}
 81027c8:	bf00      	nop
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 81027ca:	687b      	ldr	r3, [r7, #4]
 81027cc:	3301      	adds	r3, #1
 81027ce:	607b      	str	r3, [r7, #4]
 81027d0:	693b      	ldr	r3, [r7, #16]
 81027d2:	009b      	lsls	r3, r3, #2
 81027d4:	687a      	ldr	r2, [r7, #4]
 81027d6:	429a      	cmp	r2, r3
 81027d8:	d3e3      	bcc.n	81027a2 <osBoot_bootValidate+0x7a>
}
 81027da:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 81027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81027de:	3301      	adds	r3, #1
 81027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 81027e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81027e4:	6a3b      	ldr	r3, [r7, #32]
 81027e6:	429a      	cmp	r2, r3
 81027e8:	d3b2      	bcc.n	8102750 <osBoot_bootValidate+0x28>
	}
};
 81027ea:	bf00      	nop
 81027ec:	bf00      	nop
 81027ee:	3730      	adds	r7, #48	; 0x30
 81027f0:	46bd      	mov	sp, r7
 81027f2:	bd80      	pop	{r7, pc}
 81027f4:	0810c0d0 	.word	0x0810c0d0

081027f8 <osInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void osInit_init(BitWidthType entityId)
{
 81027f8:	b580      	push	{r7, lr}
 81027fa:	b084      	sub	sp, #16
 81027fc:	af00      	add	r7, sp, #0
 81027fe:	6078      	str	r0, [r7, #4]
    CosmOS_CoreVariableType * coreVar;
    CosmOS_OsVariableType * osVar;
	//TODO check if the os sections were booted and init and start was not called yet

	osVar = os_getOsVar();
 8102800:	f7ff ff44 	bl	810268c <os_getOsVar>
 8102804:	60f8      	str	r0, [r7, #12]

	CILcore_setCoreVar(osVar);
 8102806:	68f8      	ldr	r0, [r7, #12]
 8102808:	f000 ffda 	bl	81037c0 <CILcore_setCoreVar>

    coreVar = core_getCoreVar();
 810280c:	f7ff fbbd 	bl	8101f8a <core_getCoreVar>
 8102810:	60b8      	str	r0, [r7, #8]

    switchMemoryProtection_init(coreVar->cfg->codeMemoryHighAddress, \
 8102812:	68bb      	ldr	r3, [r7, #8]
 8102814:	681b      	ldr	r3, [r3, #0]
 8102816:	6a18      	ldr	r0, [r3, #32]
 8102818:	68bb      	ldr	r3, [r7, #8]
 810281a:	681b      	ldr	r3, [r3, #0]
 810281c:	69d9      	ldr	r1, [r3, #28]
 810281e:	68bb      	ldr	r3, [r7, #8]
 8102820:	681b      	ldr	r3, [r3, #0]
 8102822:	699a      	ldr	r2, [r3, #24]
 8102824:	68bb      	ldr	r3, [r7, #8]
 8102826:	681b      	ldr	r3, [r3, #0]
 8102828:	695b      	ldr	r3, [r3, #20]
 810282a:	f7ff fce1 	bl	81021f0 <memoryProtection_init>
								coreVar->cfg->codeMemoryLowAddress, \
								coreVar->cfg->stackMemoryHighAddress, \
								coreVar->cfg->stackMemoryLowAddress );
	osBoot_bootValidate();
 810282e:	f7ff ff7b 	bl	8102728 <osBoot_bootValidate>

    stackInit_init( coreVar );
 8102832:	68b8      	ldr	r0, [r7, #8]
 8102834:	f000 fded 	bl	8103412 <stackInit_init>

	memoryManager_heapInit( coreVar );
 8102838:	68b8      	ldr	r0, [r7, #8]
 810283a:	f7ff fca1 	bl	8102180 <memoryManager_heapInit>

    coreSync_getBarrier( coreVar, OS_INIT_ID );
 810283e:	2100      	movs	r1, #0
 8102840:	68b8      	ldr	r0, [r7, #8]
 8102842:	f7ff fbf9 	bl	8102038 <coreSync_getBarrier>

	__SUPRESS_UNUSED_VAR(entityId);

};
 8102846:	bf00      	nop
 8102848:	3710      	adds	r7, #16
 810284a:	46bd      	mov	sp, r7
 810284c:	bd80      	pop	{r7, pc}
	...

08102850 <permission_tryAccess>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_AccessStateType permission_tryAccess(CosmOS_PermissionsConfigurationType * permission,CosmOS_CoreVariableType * coreVar)
{
 8102850:	b580      	push	{r7, lr}
 8102852:	b088      	sub	sp, #32
 8102854:	af00      	add	r7, sp, #0
 8102856:	6078      	str	r0, [r7, #4]
 8102858:	6039      	str	r1, [r7, #0]
 810285a:	683b      	ldr	r3, [r7, #0]
 810285c:	60bb      	str	r3, [r7, #8]
 810285e:	68bb      	ldr	r3, [r7, #8]
 8102860:	685b      	ldr	r3, [r3, #4]
    CosmOS_AccessStateType accessState;

    CosmOS_SchedulableVariableType * schedulableVar;

    schedulableVar = core_getCoreSchedulableInExecution( coreVar );
 8102862:	61fb      	str	r3, [r7, #28]
 8102864:	687b      	ldr	r3, [r7, #4]
 8102866:	617b      	str	r3, [r7, #20]
 8102868:	69fb      	ldr	r3, [r7, #28]
 810286a:	613b      	str	r3, [r7, #16]
    cosmosAssert( IS_NOT( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] & \
 810286c:	697b      	ldr	r3, [r7, #20]
 810286e:	681a      	ldr	r2, [r3, #0]
 8102870:	693b      	ldr	r3, [r7, #16]
 8102872:	681b      	ldr	r3, [r3, #0]
 8102874:	691b      	ldr	r3, [r3, #16]
 8102876:	491c      	ldr	r1, [pc, #112]	; (81028e8 <permission_tryAccess+0x98>)
 8102878:	5ccb      	ldrb	r3, [r1, r3]
 810287a:	009b      	lsls	r3, r3, #2
 810287c:	4413      	add	r3, r2
 810287e:	681a      	ldr	r2, [r3, #0]
 8102880:	697b      	ldr	r3, [r7, #20]
 8102882:	6859      	ldr	r1, [r3, #4]
 8102884:	693b      	ldr	r3, [r7, #16]
 8102886:	681b      	ldr	r3, [r3, #0]
 8102888:	691b      	ldr	r3, [r3, #16]
 810288a:	4817      	ldr	r0, [pc, #92]	; (81028e8 <permission_tryAccess+0x98>)
 810288c:	5cc3      	ldrb	r3, [r0, r3]
 810288e:	009b      	lsls	r3, r3, #2
 8102890:	440b      	add	r3, r1
 8102892:	681b      	ldr	r3, [r3, #0]
 8102894:	4013      	ands	r3, r2
 8102896:	2b00      	cmp	r3, #0
 8102898:	bf0c      	ite	eq
 810289a:	2301      	moveq	r3, #1
 810289c:	2300      	movne	r3, #0
 810289e:	b2db      	uxtb	r3, r3
 81028a0:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 81028a2:	68fb      	ldr	r3, [r7, #12]
 81028a4:	2b00      	cmp	r3, #0
 81028a6:	d101      	bne.n	81028ac <permission_tryAccess+0x5c>
        os_kernelPanic();
 81028a8:	f7ff fefa 	bl	81026a0 <os_kernelPanic>
}
 81028ac:	bf00      	nop
    return ((( permission->bitLocksTasks[SchedulableIdToBitLock[schedulableVar->cfg->id]] >> schedulableVar->cfg->id ) & BITLOCK_MASK ) ? \
 81028ae:	697b      	ldr	r3, [r7, #20]
 81028b0:	681a      	ldr	r2, [r3, #0]
 81028b2:	693b      	ldr	r3, [r7, #16]
 81028b4:	681b      	ldr	r3, [r3, #0]
 81028b6:	691b      	ldr	r3, [r3, #16]
 81028b8:	490b      	ldr	r1, [pc, #44]	; (81028e8 <permission_tryAccess+0x98>)
 81028ba:	5ccb      	ldrb	r3, [r1, r3]
 81028bc:	009b      	lsls	r3, r3, #2
 81028be:	4413      	add	r3, r2
 81028c0:	681a      	ldr	r2, [r3, #0]
 81028c2:	693b      	ldr	r3, [r7, #16]
 81028c4:	681b      	ldr	r3, [r3, #0]
 81028c6:	691b      	ldr	r3, [r3, #16]
 81028c8:	fa22 f303 	lsr.w	r3, r2, r3
 81028cc:	f003 0301 	and.w	r3, r3, #1
            ACCESS_STATE_ENUM__ALLOWED : ACCESS_STATE_ENUM__DENIED );
 81028d0:	2b00      	cmp	r3, #0
 81028d2:	d001      	beq.n	81028d8 <permission_tryAccess+0x88>
 81028d4:	2300      	movs	r3, #0
 81028d6:	e001      	b.n	81028dc <permission_tryAccess+0x8c>
 81028d8:	f04f 33ff 	mov.w	r3, #4294967295
    accessState = permission_trySchedulableAccess( permission, schedulableVar );
 81028dc:	61bb      	str	r3, [r7, #24]

    return accessState;
 81028de:	69bb      	ldr	r3, [r7, #24]
}
 81028e0:	4618      	mov	r0, r3
 81028e2:	3720      	adds	r7, #32
 81028e4:	46bd      	mov	sp, r7
 81028e6:	bd80      	pop	{r7, pc}
 81028e8:	38000104 	.word	0x38000104

081028ec <schedulable_setExecutionStateToFinished>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void schedulable_setExecutionStateToFinished(BitWidthType entityId)
{
 81028ec:	b580      	push	{r7, lr}
 81028ee:	b088      	sub	sp, #32
 81028f0:	af00      	add	r7, sp, #0
 81028f2:	6078      	str	r0, [r7, #4]
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 81028f4:	f7ff fb49 	bl	8101f8a <core_getCoreVar>
 81028f8:	61f8      	str	r0, [r7, #28]
 81028fa:	69fb      	ldr	r3, [r7, #28]
 81028fc:	60fb      	str	r3, [r7, #12]
 81028fe:	68fb      	ldr	r3, [r7, #12]
 8102900:	685b      	ldr	r3, [r3, #4]

    schedulableVar = core_getCoreSchedulableInExecution( coreVar );
 8102902:	61bb      	str	r3, [r7, #24]
 8102904:	69bb      	ldr	r3, [r7, #24]
 8102906:	617b      	str	r3, [r7, #20]
 8102908:	2301      	movs	r3, #1
 810290a:	613b      	str	r3, [r7, #16]
    schedulable->state = stateParam;
 810290c:	697b      	ldr	r3, [r7, #20]
 810290e:	693a      	ldr	r2, [r7, #16]
 8102910:	605a      	str	r2, [r3, #4]
}
 8102912:	bf00      	nop

    schedulable_setState( schedulableVar, SCHEDULABLE_STATE_ENUM__EXECUTED );

	__SUPRESS_UNUSED_VAR(entityId);
};
 8102914:	bf00      	nop
 8102916:	3720      	adds	r7, #32
 8102918:	46bd      	mov	sp, r7
 810291a:	bd80      	pop	{r7, pc}

0810291c <scheduler_updateAlarms>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_updateAlarms(CosmOS_CoreVariableType * coreVar, BitWidthType priorTickStep)
{
 810291c:	b580      	push	{r7, lr}
 810291e:	b08e      	sub	sp, #56	; 0x38
 8102920:	af00      	add	r7, sp, #0
 8102922:	6078      	str	r0, [r7, #4]
 8102924:	6039      	str	r1, [r7, #0]
 8102926:	687b      	ldr	r3, [r7, #4]
 8102928:	623b      	str	r3, [r7, #32]
    return (core->cfg->numberOfAlarms);
 810292a:	6a3b      	ldr	r3, [r7, #32]
 810292c:	681b      	ldr	r3, [r3, #0]
 810292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28

	CosmOS_AlarmStateType alarmState;

	CosmOS_AlarmVariableType * alarmVar;

	numberOfAlarms = core_getCoreNumberOfAlarms(coreVar);
 8102930:	633b      	str	r3, [r7, #48]	; 0x30
	for (BitWidthType iterator = 0; iterator < numberOfAlarms; iterator++)
 8102932:	2300      	movs	r3, #0
 8102934:	637b      	str	r3, [r7, #52]	; 0x34
 8102936:	e031      	b.n	810299c <scheduler_updateAlarms+0x80>
 8102938:	687b      	ldr	r3, [r7, #4]
 810293a:	61bb      	str	r3, [r7, #24]
 810293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810293e:	617b      	str	r3, [r7, #20]
    return (&(core->alarmVars[alarmId]));
 8102940:	69bb      	ldr	r3, [r7, #24]
 8102942:	6a19      	ldr	r1, [r3, #32]
 8102944:	697a      	ldr	r2, [r7, #20]
 8102946:	4613      	mov	r3, r2
 8102948:	005b      	lsls	r3, r3, #1
 810294a:	4413      	add	r3, r2
 810294c:	009b      	lsls	r3, r3, #2
 810294e:	440b      	add	r3, r1
	{
		alarmVar = core_getAlarmVar(coreVar, iterator);
 8102950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8102952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102954:	61fb      	str	r3, [r7, #28]
    return (alarm->state);
 8102956:	69fb      	ldr	r3, [r7, #28]
 8102958:	685b      	ldr	r3, [r3, #4]
		alarmState = alarm_getAlarmState(alarmVar);
 810295a:	62bb      	str	r3, [r7, #40]	; 0x28

		if (alarmState IS_EQUAL_TO ALARM_STATE_ENUM__ACTIVATED)
 810295c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102962:	d118      	bne.n	8102996 <scheduler_updateAlarms+0x7a>
 8102964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102966:	613b      	str	r3, [r7, #16]
    return (alarm->tickCount);
 8102968:	693b      	ldr	r3, [r7, #16]
 810296a:	689b      	ldr	r3, [r3, #8]
		{
			tickCount = alarm_getAlarmTickCount(alarmVar);
 810296c:	627b      	str	r3, [r7, #36]	; 0x24

			if ( tickCount <= priorTickStep )
 810296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102970:	683b      	ldr	r3, [r7, #0]
 8102972:	429a      	cmp	r2, r3
 8102974:	d803      	bhi.n	810297e <scheduler_updateAlarms+0x62>
			{
				alarm_expire(alarmVar);
 8102976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8102978:	f7ff f8b4 	bl	8101ae4 <alarm_expire>
 810297c:	e00b      	b.n	8102996 <scheduler_updateAlarms+0x7a>
			}
			else
			{
				tickCount -= priorTickStep;
 810297e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102980:	683b      	ldr	r3, [r7, #0]
 8102982:	1ad3      	subs	r3, r2, r3
 8102984:	627b      	str	r3, [r7, #36]	; 0x24
 8102986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102988:	60fb      	str	r3, [r7, #12]
 810298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810298c:	60bb      	str	r3, [r7, #8]
    alarm->tickCount = tickCountParam;
 810298e:	68fb      	ldr	r3, [r7, #12]
 8102990:	68ba      	ldr	r2, [r7, #8]
 8102992:	609a      	str	r2, [r3, #8]
}
 8102994:	bf00      	nop
	for (BitWidthType iterator = 0; iterator < numberOfAlarms; iterator++)
 8102996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8102998:	3301      	adds	r3, #1
 810299a:	637b      	str	r3, [r7, #52]	; 0x34
 810299c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81029a0:	429a      	cmp	r2, r3
 81029a2:	d3c9      	bcc.n	8102938 <scheduler_updateAlarms+0x1c>
				alarm_setAlarmTickCount(alarmVar,tickCount);
			}
		}
	}
}
 81029a4:	bf00      	nop
 81029a6:	bf00      	nop
 81029a8:	3738      	adds	r7, #56	; 0x38
 81029aa:	46bd      	mov	sp, r7
 81029ac:	bd80      	pop	{r7, pc}

081029ae <scheduler_performanceScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_performanceScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks)
{
 81029ae:	b480      	push	{r7}
 81029b0:	b093      	sub	sp, #76	; 0x4c
 81029b2:	af00      	add	r7, sp, #0
 81029b4:	60f8      	str	r0, [r7, #12]
 81029b6:	60b9      	str	r1, [r7, #8]
 81029b8:	607a      	str	r2, [r7, #4]
 81029ba:	603b      	str	r3, [r7, #0]
 81029bc:	68fb      	ldr	r3, [r7, #12]
 81029be:	62fb      	str	r3, [r7, #44]	; 0x2c
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType scheduler_getSchedulerThreadListElementsNum(CosmOS_SchedulerVariableType * scheduler)
{
    return (scheduler->cfg->threadListElementsNum);
 81029c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81029c2:	681b      	ldr	r3, [r3, #0]
 81029c4:	695b      	ldr	r3, [r3, #20]
	CosmOS_SchedulableStateType schedulableState;

	CosmOS_ThreadVariableType *threadVar;
	CosmOS_SchedulableVariableType *currentSchedulableVar;

    threadListElementsNum = scheduler_getSchedulerThreadListElementsNum(schedulerVar);
 81029c6:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (BitWidthType iterator = 0; iterator < threadListElementsNum; iterator++)
 81029c8:	2300      	movs	r3, #0
 81029ca:	643b      	str	r3, [r7, #64]	; 0x40
 81029cc:	e01c      	b.n	8102a08 <scheduler_performanceScheduling+0x5a>
 81029ce:	68fb      	ldr	r3, [r7, #12]
 81029d0:	623b      	str	r3, [r7, #32]
 81029d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 81029d4:	61fb      	str	r3, [r7, #28]
  *
  * @return CosmOS_ThreadVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_ThreadVariableType * scheduler_getSchedulerThreadListThreadVar(CosmOS_SchedulerVariableType * scheduler, BitWidthType threadListIterator)
{
    return (CosmOS_ThreadVariableType *)(scheduler->cfg->threadList[threadListIterator].threadVar);
 81029d6:	6a3b      	ldr	r3, [r7, #32]
 81029d8:	681b      	ldr	r3, [r3, #0]
 81029da:	685a      	ldr	r2, [r3, #4]
 81029dc:	69fb      	ldr	r3, [r7, #28]
 81029de:	009b      	lsls	r3, r3, #2
 81029e0:	4413      	add	r3, r2
 81029e2:	681b      	ldr	r3, [r3, #0]
	{
		threadVar = scheduler_getSchedulerThreadListThreadVar(schedulerVar, iterator);
 81029e4:	63bb      	str	r3, [r7, #56]	; 0x38
 81029e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81029e8:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * thread_getThreadSchedulable(CosmOS_ThreadVariableType * thread)
{
    return (CosmOS_SchedulableVariableType *)(thread->schedulable);
 81029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81029ec:	685b      	ldr	r3, [r3, #4]
		currentSchedulableVar = thread_getThreadSchedulable(threadVar);
 81029ee:	647b      	str	r3, [r7, #68]	; 0x44
 81029f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81029f2:	62bb      	str	r3, [r7, #40]	; 0x28
    return (schedulable->state);
 81029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81029f6:	685b      	ldr	r3, [r3, #4]
		schedulableState = schedulable_getState(currentSchedulableVar);
 81029f8:	637b      	str	r3, [r7, #52]	; 0x34

		if (schedulableState IS_EQUAL_TO SCHEDULABLE_STATE_ENUM__READY)
 81029fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a00:	d007      	beq.n	8102a12 <scheduler_performanceScheduling+0x64>
	for (BitWidthType iterator = 0; iterator < threadListElementsNum; iterator++)
 8102a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102a04:	3301      	adds	r3, #1
 8102a06:	643b      	str	r3, [r7, #64]	; 0x40
 8102a08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8102a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102a0c:	429a      	cmp	r2, r3
 8102a0e:	d3de      	bcc.n	81029ce <scheduler_performanceScheduling+0x20>
 8102a10:	e000      	b.n	8102a14 <scheduler_performanceScheduling+0x66>
		{
			break;
 8102a12:	bf00      	nop
		}
	}

    *schedulableVar = currentSchedulableVar;
 8102a14:	68bb      	ldr	r3, [r7, #8]
 8102a16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8102a18:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = schedulable_getStackPointer(*schedulableVar);
 8102a1a:	68bb      	ldr	r3, [r7, #8]
 8102a1c:	681b      	ldr	r3, [r3, #0]
 8102a1e:	617b      	str	r3, [r7, #20]
    return (schedulable->stackPointer);
 8102a20:	697b      	ldr	r3, [r7, #20]
 8102a22:	689a      	ldr	r2, [r3, #8]
 8102a24:	687b      	ldr	r3, [r7, #4]
 8102a26:	601a      	str	r2, [r3, #0]
 8102a28:	68fb      	ldr	r3, [r7, #12]
 8102a2a:	61bb      	str	r3, [r7, #24]
    return (scheduler->cfg->preemptTick);
 8102a2c:	69bb      	ldr	r3, [r7, #24]
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	68db      	ldr	r3, [r3, #12]

    preemptTick = scheduler_getSchedulerPreemptTick(schedulerVar);
 8102a32:	633b      	str	r3, [r7, #48]	; 0x30
    *timerTicks = preemptTick;
 8102a34:	683b      	ldr	r3, [r7, #0]
 8102a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8102a38:	601a      	str	r2, [r3, #0]
}
 8102a3a:	bf00      	nop
 8102a3c:	374c      	adds	r7, #76	; 0x4c
 8102a3e:	46bd      	mov	sp, r7
 8102a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a44:	4770      	bx	lr

08102a46 <scheduler_classicScheduling>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_classicScheduling(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_SchedulableVariableType ** schedulableVar,\
StackPointerType * stackPointerRetVal,BitWidthType * timerTicks, BitWidthType startTick, BitWidthType currentTick)
{
 8102a46:	b580      	push	{r7, lr}
 8102a48:	b088      	sub	sp, #32
 8102a4a:	af00      	add	r7, sp, #0
 8102a4c:	60f8      	str	r0, [r7, #12]
 8102a4e:	60b9      	str	r1, [r7, #8]
 8102a50:	607a      	str	r2, [r7, #4]
 8102a52:	603b      	str	r3, [r7, #0]
 8102a54:	68fb      	ldr	r3, [r7, #12]
 8102a56:	617b      	str	r3, [r7, #20]
    return (CosmOS_TaskVariableType *)(scheduler->cfg->idleTaskVar);
 8102a58:	697b      	ldr	r3, [r7, #20]
 8102a5a:	681b      	ldr	r3, [r3, #0]
 8102a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    CosmOS_TaskVariableType * taskVar;


    taskVar = scheduler_getSchedulerIdleTaskVar( schedulerVar );
 8102a5e:	61fb      	str	r3, [r7, #28]
 8102a60:	69fb      	ldr	r3, [r7, #28]
 8102a62:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SchedulableVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SchedulableVariableType * task_getTaskSchedulable(CosmOS_TaskVariableType * task)
{
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8102a64:	69bb      	ldr	r3, [r7, #24]
 8102a66:	685a      	ldr	r2, [r3, #4]

    *schedulableVar = task_getTaskSchedulable( taskVar );
 8102a68:	68bb      	ldr	r3, [r7, #8]
 8102a6a:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8102a6c:	68bb      	ldr	r3, [r7, #8]
 8102a6e:	681b      	ldr	r3, [r3, #0]
 8102a70:	4618      	mov	r0, r3
 8102a72:	f000 fca8 	bl	81033c6 <stackInit_schedulableStackInit>
 8102a76:	4602      	mov	r2, r0
 8102a78:	687b      	ldr	r3, [r7, #4]
 8102a7a:	601a      	str	r2, [r3, #0]

    if ( startTick < currentTick )
 8102a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a80:	429a      	cmp	r2, r3
 8102a82:	d207      	bcs.n	8102a94 <scheduler_classicScheduling+0x4e>
 8102a84:	68fb      	ldr	r3, [r7, #12]
 8102a86:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->lastToFirstTaskTicks);
 8102a88:	693b      	ldr	r3, [r7, #16]
 8102a8a:	681b      	ldr	r3, [r3, #0]
 8102a8c:	699a      	ldr	r2, [r3, #24]
    {
        *timerTicks = scheduler_getSchedulerLastToFirstTaskTicks(schedulerVar);
 8102a8e:	683b      	ldr	r3, [r7, #0]
 8102a90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        *timerTicks = startTick - currentTick;
    }
}
 8102a92:	e004      	b.n	8102a9e <scheduler_classicScheduling+0x58>
        *timerTicks = startTick - currentTick;
 8102a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8102a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a98:	1ad2      	subs	r2, r2, r3
 8102a9a:	683b      	ldr	r3, [r7, #0]
 8102a9c:	601a      	str	r2, [r3, #0]
}
 8102a9e:	bf00      	nop
 8102aa0:	3720      	adds	r7, #32
 8102aa2:	46bd      	mov	sp, r7
 8102aa4:	bd80      	pop	{r7, pc}

08102aa6 <scheduler_scheduleNextInstance>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType scheduler_scheduleNextInstance(StackPointerType stackPointer)
{
 8102aa6:	b580      	push	{r7, lr}
 8102aa8:	b0c4      	sub	sp, #272	; 0x110
 8102aaa:	af00      	add	r7, sp, #0
 8102aac:	1d3b      	adds	r3, r7, #4
 8102aae:	6018      	str	r0, [r3, #0]
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;
    CosmOS_SchedulableVariableType * priorSchedulableVar;


    coreVar = core_getCoreVar();
 8102ab0:	f7ff fa6b 	bl	8101f8a <core_getCoreVar>
 8102ab4:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8102ab8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8102abc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    return (core->schedulerVar);
 8102ac0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8102ac4:	691b      	ldr	r3, [r3, #16]
    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8102ac6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8102aca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8102ace:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    return (core->schedulableInExecution);
 8102ad2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8102ad6:	685b      	ldr	r3, [r3, #4]
    priorSchedulableVar = core_getCoreSchedulableInExecution( coreVar );
 8102ad8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8102adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    return (scheduler->rescheduleTriggerState);
 8102ae4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8102ae8:	6a1b      	ldr	r3, [r3, #32]
	rescheduleTriggerState = scheduler_getSchedulerRescheduleTriggerState( schedulerVar );
 8102aea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

	switch ( rescheduleTriggerState )
 8102aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8102af2:	2b00      	cmp	r3, #0
 8102af4:	f000 816a 	beq.w	8102dcc <scheduler_scheduleNextInstance+0x326>
 8102af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8102afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102b00:	f040 8195 	bne.w	8102e2e <scheduler_scheduleNextInstance+0x388>
 8102b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102b08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->cfg->hyperTick);
 8102b0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8102b10:	681b      	ldr	r3, [r3, #0]
 8102b12:	689b      	ldr	r3, [r3, #8]
    {
        case RESCHEDULE_TRIGGER_STATE_ENUM__TIMER :
        {
			hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8102b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8102b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->schedulerState);
 8102b20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8102b24:	695b      	ldr	r3, [r3, #20]
			schedulerState = scheduler_getSchedulerState( schedulerVar );
 8102b26:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8102b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102b2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    return (scheduler->currentTick);
 8102b32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8102b36:	685b      	ldr	r3, [r3, #4]
			currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8102b38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8102b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    return (scheduler->cfg->maxTimerTick);
 8102b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			maxTimerTick = scheduler_getSchedulerMaxTimerTick( schedulerVar );
 8102b4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8102b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    return (scheduler->priorTickStep);
 8102b58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8102b5c:	689b      	ldr	r3, [r3, #8]
			priorTickStep = scheduler_getSchedulerPriorTickStep(schedulerVar);
 8102b5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8102b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102b66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    return (scheduler->cfg->timerTickCount);
 8102b6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8102b6e:	681b      	ldr	r3, [r3, #0]
 8102b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			timerTickCount = scheduler_getSchedulerTimerTickCount( schedulerVar );
 8102b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8102b76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8102b7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    return (schedulable->cfg->instanceType);
 8102b7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8102b82:	681b      	ldr	r3, [r3, #0]
 8102b84:	685b      	ldr	r3, [r3, #4]
			priorSchedulableInstanceType = schedulable_getInstanceType( priorSchedulableVar );
 8102b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8102b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102b8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    return (scheduler->scheduleTableIterator);
 8102b92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8102b96:	68db      	ldr	r3, [r3, #12]
			scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8102b98:	617b      	str	r3, [r7, #20]
 8102b9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102b9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    return (scheduler->cfg->scheduleTableElementsNum);
 8102ba2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102ba6:	681b      	ldr	r3, [r3, #0]
 8102ba8:	691b      	ldr	r3, [r3, #16]
			scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8102baa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
			startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8102bae:	697b      	ldr	r3, [r7, #20]
 8102bb0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8102bb4:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8102bb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8102bbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8102bc0:	681b      	ldr	r3, [r3, #0]
 8102bc2:	681a      	ldr	r2, [r3, #0]
 8102bc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8102bc8:	00db      	lsls	r3, r3, #3
 8102bca:	4413      	add	r3, r2
 8102bcc:	681b      	ldr	r3, [r3, #0]
 8102bce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

			//TODO: this should be moved to the sysTick interrupt with higher priority to have faster response - without else, that should stay here
			if ( schedulerState IS_EQUAL_TO SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK )
 8102bd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8102bd6:	2b00      	cmp	r3, #0
 8102bd8:	d108      	bne.n	8102bec <scheduler_scheduleNextInstance+0x146>
 8102bda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8102bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (schedulable->state);
 8102be2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8102be6:	685b      	ldr	r3, [r3, #4]
			{
				CosmOS_SchedulableStateType schedulableState;

				schedulableState = schedulable_getState( priorSchedulableVar );
 8102be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
				{
					/* reaction */
				}
			}

			if ( priorSchedulableInstanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 8102bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8102bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102bf4:	d10d      	bne.n	8102c12 <scheduler_scheduleNextInstance+0x16c>
 8102bf6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8102bfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8102bfe:	1d3b      	adds	r3, r7, #4
 8102c00:	681b      	ldr	r3, [r3, #0]
 8102c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void schedulable_setStackPointer(CosmOS_SchedulableVariableType * schedulable, StackPointerType stackPointerParam)
{
    schedulable->stackPointer = stackPointerParam;
 8102c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8102c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8102c0e:	609a      	str	r2, [r3, #8]
}
 8102c10:	bf00      	nop
				/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
				switchScheduler_schedulable_setStackPointer( priorSchedulableVar, stackPointer );
			}

			/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
			switchScheduler_updateAlarms(coreVar, priorTickStep);
 8102c12:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8102c16:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102c1a:	f7ff fe7f 	bl	810291c <scheduler_updateAlarms>

			if ( scheduleTableElementsNum AND startTick IS_EQUAL_TO currentTick )
 8102c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8102c22:	2b00      	cmp	r3, #0
 8102c24:	d06e      	beq.n	8102d04 <scheduler_scheduleNextInstance+0x25e>
 8102c26:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8102c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8102c2e:	429a      	cmp	r2, r3
 8102c30:	d168      	bne.n	8102d04 <scheduler_scheduleNextInstance+0x25e>
 8102c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102c36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8102c3a:	f107 030c 	add.w	r3, r7, #12
 8102c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8102c42:	f107 0310 	add.w	r3, r7, #16
 8102c46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8102c4a:	f107 0318 	add.w	r3, r7, #24
 8102c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8102c52:	f107 0314 	add.w	r3, r7, #20
 8102c56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8102c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8102c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8102c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8102c6a:	67ba      	str	r2, [r7, #120]	; 0x78
 8102c6c:	677b      	str	r3, [r7, #116]	; 0x74
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8102c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102c70:	681b      	ldr	r3, [r3, #0]
 8102c72:	681a      	ldr	r2, [r3, #0]
 8102c74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102c76:	00db      	lsls	r3, r3, #3
 8102c78:	4413      	add	r3, r2
 8102c7a:	685b      	ldr	r3, [r3, #4]
 8102c7c:	673b      	str	r3, [r7, #112]	; 0x70
 8102c7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102c80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8102c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c84:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8102c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8102c8a:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8102c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8102c90:	681b      	ldr	r3, [r3, #0]
 8102c92:	4618      	mov	r0, r3
 8102c94:	f000 fb97 	bl	81033c6 <stackInit_schedulableStackInit>
 8102c98:	4602      	mov	r2, r0
 8102c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8102c9e:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_STATE_ENUM__RUNNING );
 8102ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8102ca4:	681b      	ldr	r3, [r3, #0]
 8102ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8102ca8:	2300      	movs	r3, #0
 8102caa:	667b      	str	r3, [r7, #100]	; 0x64
    schedulable->state = stateParam;
 8102cac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102cae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8102cb0:	605a      	str	r2, [r3, #4]
}
 8102cb2:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8102cb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8102cb8:	681b      	ldr	r3, [r3, #0]
 8102cba:	3301      	adds	r3, #1
 8102cbc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8102cbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8102cc2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8102cc4:	fb01 f202 	mul.w	r2, r1, r2
 8102cc8:	1a9a      	subs	r2, r3, r2
 8102cca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8102cce:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8102cd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8102cd4:	681b      	ldr	r3, [r3, #0]
 8102cd6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8102cda:	663a      	str	r2, [r7, #96]	; 0x60
 8102cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerScheduleTableIterator(CosmOS_SchedulerVariableType * scheduler, BitWidthType scheduleTableIteratorParam)
{
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8102cde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8102ce2:	60da      	str	r2, [r3, #12]
}
 8102ce4:	bf00      	nop
 8102ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102ce8:	65bb      	str	r3, [r7, #88]	; 0x58
    return (task->cfg->wcet);
 8102cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102cec:	681b      	ldr	r3, [r3, #0]
 8102cee:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8102cf0:	657b      	str	r3, [r7, #84]	; 0x54
    *timerTicks = wcet;
 8102cf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8102cf6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8102cf8:	601a      	str	r2, [r3, #0]
}
 8102cfa:	bf00      	nop
			{
				scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,\
												&timerTicks, &scheduleTableIterator, scheduleTableElementsNum);

				schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8102cfc:	2300      	movs	r3, #0
 8102cfe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8102d02:	e00c      	b.n	8102d1e <scheduler_scheduleNextInstance+0x278>
			}
			else
			{
				/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
				switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 8102d04:	f107 0318 	add.w	r3, r7, #24
 8102d08:	f107 0210 	add.w	r2, r7, #16
 8102d0c:	f107 010c 	add.w	r1, r7, #12
 8102d10:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8102d14:	f7ff fe4b 	bl	81029ae <scheduler_performanceScheduling>
														&stackPointerRetVal, &timerTicks );
				/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
				switchScheduler_classicScheduling( schedulerVar, &schedulableVar,\
													&stackPointerRetVal, &timerTicks, startTick, currentTick );

				schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 8102d18:	2301      	movs	r3, #1
 8102d1a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			}

			schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8102d1e:	f107 030c 	add.w	r3, r7, #12
 8102d22:	681a      	ldr	r2, [r3, #0]
 8102d24:	f107 0310 	add.w	r3, r7, #16
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8102d2c:	647b      	str	r3, [r7, #68]	; 0x44
    schedulable->stackPointer = stackPointerParam;
 8102d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8102d32:	609a      	str	r2, [r3, #8]
}
 8102d34:	bf00      	nop
			core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8102d36:	f107 030c 	add.w	r3, r7, #12
 8102d3a:	681b      	ldr	r3, [r3, #0]
 8102d3c:	4619      	mov	r1, r3
 8102d3e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102d42:	f7ff f930 	bl	8101fa6 <core_setSchedulableIntoCurrentContext>
 8102d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8102d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8102d50:	64fb      	str	r3, [r7, #76]	; 0x4c
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_SchedulerStateType schedulerStateParam)
{
    scheduler->schedulerState = schedulerStateParam;
 8102d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102d54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8102d56:	615a      	str	r2, [r3, #20]
}
 8102d58:	bf00      	nop

			scheduler_setSchedulerState( schedulerVar, schedulerState );

			if ( maxTimerTick < timerTicks )
 8102d5a:	69bb      	ldr	r3, [r7, #24]
 8102d5c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8102d60:	429a      	cmp	r2, r3
 8102d62:	d202      	bcs.n	8102d6a <scheduler_scheduleNextInstance+0x2c4>
			{
				timerTicks = maxTimerTick;
 8102d64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8102d68:	61bb      	str	r3, [r7, #24]
			}

			currentTick = ( ( currentTick + timerTicks ) % hyperTick );
 8102d6a:	69ba      	ldr	r2, [r7, #24]
 8102d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8102d70:	4413      	add	r3, r2
 8102d72:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8102d76:	fbb3 f2f2 	udiv	r2, r3, r2
 8102d7a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8102d7e:	fb01 f202 	mul.w	r2, r1, r2
 8102d82:	1a9b      	subs	r3, r3, r2
 8102d84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
			scheduler_setSchedulerPriorTickStep(schedulerVar, timerTicks);
 8102d88:	69bb      	ldr	r3, [r7, #24]
 8102d8a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8102d8e:	63ba      	str	r2, [r7, #56]	; 0x38
 8102d90:	637b      	str	r3, [r7, #52]	; 0x34
    scheduler->priorTickStep = priorTickStepParam;
 8102d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8102d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8102d96:	609a      	str	r2, [r3, #8]
}
 8102d98:	bf00      	nop
 8102d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8102da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8102da4:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->currentTick = currentTickParam;
 8102da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102da8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8102daa:	605a      	str	r2, [r3, #4]
}
 8102dac:	bf00      	nop
			scheduler_setSchedulerCurrentTick( schedulerVar, currentTick );

			switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 8102dae:	f107 030c 	add.w	r3, r7, #12
 8102db2:	681b      	ldr	r3, [r3, #0]
 8102db4:	4619      	mov	r1, r3
 8102db6:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102dba:	f7ff fa2a 	bl	8102212 <memoryProtection_setMemoryProtection>

			CILsysTimer_setTicks( timerTicks, timerTickCount );
 8102dbe:	69bb      	ldr	r3, [r7, #24]
 8102dc0:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8102dc4:	4618      	mov	r0, r3
 8102dc6:	f001 f941 	bl	810404c <CILsysTimer_setTicks>
			break;
 8102dca:	e030      	b.n	8102e2e <scheduler_scheduleNextInstance+0x388>
 8102dcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8102dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8102dd2:	1d3b      	adds	r3, r7, #4
 8102dd4:	681b      	ldr	r3, [r3, #0]
 8102dd6:	627b      	str	r3, [r7, #36]	; 0x24
    schedulable->stackPointer = stackPointerParam;
 8102dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8102ddc:	609a      	str	r2, [r3, #8]
}
 8102dde:	bf00      	nop
		case RESCHEDULE_TRIGGER_STATE_ENUM__SYSTEM :
        {
			/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
			switchScheduler_schedulable_setStackPointer( priorSchedulableVar, stackPointer );
			/* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
			switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 8102de0:	f107 0318 	add.w	r3, r7, #24
 8102de4:	f107 0210 	add.w	r2, r7, #16
 8102de8:	f107 010c 	add.w	r1, r7, #12
 8102dec:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8102df0:	f7ff fddd 	bl	81029ae <scheduler_performanceScheduling>
													&stackPointerRetVal, &timerTicks );

			schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8102df4:	f107 030c 	add.w	r3, r7, #12
 8102df8:	681a      	ldr	r2, [r3, #0]
 8102dfa:	f107 0310 	add.w	r3, r7, #16
 8102dfe:	681b      	ldr	r3, [r3, #0]
 8102e00:	633a      	str	r2, [r7, #48]	; 0x30
 8102e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    schedulable->stackPointer = stackPointerParam;
 8102e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8102e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8102e08:	609a      	str	r2, [r3, #8]
}
 8102e0a:	bf00      	nop
			core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8102e0c:	f107 030c 	add.w	r3, r7, #12
 8102e10:	681b      	ldr	r3, [r3, #0]
 8102e12:	4619      	mov	r1, r3
 8102e14:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102e18:	f7ff f8c5 	bl	8101fa6 <core_setSchedulableIntoCurrentContext>

			switchMemoryProtection_setMemoryProtection( coreVar, schedulableVar );
 8102e1c:	f107 030c 	add.w	r3, r7, #12
 8102e20:	681b      	ldr	r3, [r3, #0]
 8102e22:	4619      	mov	r1, r3
 8102e24:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8102e28:	f7ff f9f3 	bl	8102212 <memoryProtection_setMemoryProtection>

			break;
 8102e2c:	bf00      	nop
 8102e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8102e32:	623b      	str	r3, [r7, #32]
 8102e34:	2300      	movs	r3, #0
 8102e36:	61fb      	str	r3, [r7, #28]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void scheduler_setSchedulerRescheduleTriggerState(CosmOS_SchedulerVariableType * scheduler, CosmOS_RescheduleTriggerStateType paramRescheduleTriggerState)
{
    scheduler->rescheduleTriggerState = paramRescheduleTriggerState;
 8102e38:	6a3b      	ldr	r3, [r7, #32]
 8102e3a:	69fa      	ldr	r2, [r7, #28]
 8102e3c:	621a      	str	r2, [r3, #32]
}
 8102e3e:	bf00      	nop
		}
	}

	scheduler_setSchedulerRescheduleTriggerState( schedulerVar, RESCHEDULE_TRIGGER_STATE_ENUM__SYSTEM );
    return stackPointerRetVal;
 8102e40:	f107 0310 	add.w	r3, r7, #16
 8102e44:	681b      	ldr	r3, [r3, #0]
};
 8102e46:	4618      	mov	r0, r3
 8102e48:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8102e4c:	46bd      	mov	sp, r7
 8102e4e:	bd80      	pop	{r7, pc}

08102e50 <scheduler_start>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void scheduler_start(void)
{
 8102e50:	b580      	push	{r7, lr}
 8102e52:	b0b4      	sub	sp, #208	; 0xd0
 8102e54:	af00      	add	r7, sp, #0
    CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulerVariableType * schedulerVar;
    CosmOS_SchedulableVariableType * schedulableVar;


    coreVar = core_getCoreVar();
 8102e56:	f7ff f898 	bl	8101f8a <core_getCoreVar>
 8102e5a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8102e5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8102e62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    return (core->schedulerVar);
 8102e66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8102e6a:	691b      	ldr	r3, [r3, #16]
    schedulerVar = core_getCoreSchedulerVar( coreVar );
 8102e6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8102e70:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102e74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    return (scheduler->cfg->hyperTick);
 8102e78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8102e7c:	681b      	ldr	r3, [r3, #0]
 8102e7e:	689b      	ldr	r3, [r3, #8]
    hyperTick = scheduler_getSchedulerHyperTick( schedulerVar );
 8102e80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8102e84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102e88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    return (scheduler->currentTick);
 8102e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8102e90:	685b      	ldr	r3, [r3, #4]
    currentTick = scheduler_getSchedulerCurrentTick( schedulerVar );
 8102e92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8102e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    return (scheduler->cfg->maxTimerTick);
 8102e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	maxTimerTick = scheduler_getSchedulerMaxTimerTick( schedulerVar );
 8102ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8102eaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    return (scheduler->cfg->timerTickCount);
 8102eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	timerTickCount = scheduler_getSchedulerTimerTickCount( schedulerVar );
 8102eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8102ebe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    return (scheduler->scheduleTableIterator);
 8102ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8102eca:	68db      	ldr	r3, [r3, #12]
    scheduleTableIterator = scheduler_getSchedulerScheduleTableIterator( schedulerVar );
 8102ecc:	60bb      	str	r3, [r7, #8]
 8102ece:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102ed2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    return (scheduler->cfg->scheduleTableElementsNum);
 8102ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8102eda:	681b      	ldr	r3, [r3, #0]
 8102edc:	691b      	ldr	r3, [r3, #16]
    scheduleTableElementsNum = scheduler_getSchedulerScheduleTableElementsNum( schedulerVar );
 8102ede:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    if ( scheduleTableElementsNum )
 8102ee2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8102ee6:	2b00      	cmp	r3, #0
 8102ee8:	d022      	beq.n	8102f30 <scheduler_start+0xe0>
    {
        cosmosAssert( scheduleTableIterator < scheduleTableElementsNum );
 8102eea:	68bb      	ldr	r3, [r7, #8]
 8102eec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8102ef0:	429a      	cmp	r2, r3
 8102ef2:	bf8c      	ite	hi
 8102ef4:	2301      	movhi	r3, #1
 8102ef6:	2300      	movls	r3, #0
 8102ef8:	b2db      	uxtb	r3, r3
 8102efa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if ( IS_NOT( result ) )
 8102efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8102f02:	2b00      	cmp	r3, #0
 8102f04:	d101      	bne.n	8102f0a <scheduler_start+0xba>
        os_kernelPanic();
 8102f06:	f7ff fbcb 	bl	81026a0 <os_kernelPanic>
}
 8102f0a:	bf00      	nop

        startTick = scheduler_getSchedulerScheduleTableStartTick( schedulerVar, scheduleTableIterator );
 8102f0c:	68bb      	ldr	r3, [r7, #8]
 8102f0e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8102f12:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8102f16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    return (scheduler->cfg->scheduleTable[scheduleTableIterator].startTick);
 8102f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8102f1e:	681b      	ldr	r3, [r3, #0]
 8102f20:	681a      	ldr	r2, [r3, #0]
 8102f22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8102f26:	00db      	lsls	r3, r3, #3
 8102f28:	4413      	add	r3, r2
 8102f2a:	681b      	ldr	r3, [r3, #0]
 8102f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    }

    if ( scheduleTableElementsNum AND (startTick IS_EQUAL_TO currentTick) )
 8102f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8102f34:	2b00      	cmp	r3, #0
 8102f36:	d060      	beq.n	8102ffa <scheduler_start+0x1aa>
 8102f38:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8102f3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8102f40:	429a      	cmp	r2, r3
 8102f42:	d15a      	bne.n	8102ffa <scheduler_start+0x1aa>
 8102f44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8102f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8102f4c:	1d3b      	adds	r3, r7, #4
 8102f4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8102f50:	f107 030c 	add.w	r3, r7, #12
 8102f54:	67bb      	str	r3, [r7, #120]	; 0x78
 8102f56:	f107 0310 	add.w	r3, r7, #16
 8102f5a:	677b      	str	r3, [r7, #116]	; 0x74
 8102f5c:	f107 0308 	add.w	r3, r7, #8
 8102f60:	673b      	str	r3, [r7, #112]	; 0x70
 8102f62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8102f66:	66fb      	str	r3, [r7, #108]	; 0x6c
    taskVar = scheduler_getSchedulerScheduleTableTaskVar( schedulerVar, *scheduleTableIterator );
 8102f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8102f70:	66ba      	str	r2, [r7, #104]	; 0x68
 8102f72:	667b      	str	r3, [r7, #100]	; 0x64
    return (CosmOS_TaskVariableType *)(scheduler->cfg->scheduleTable[scheduleTableIterator].taskVar);
 8102f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	681a      	ldr	r2, [r3, #0]
 8102f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8102f7c:	00db      	lsls	r3, r3, #3
 8102f7e:	4413      	add	r3, r2
 8102f80:	685b      	ldr	r3, [r3, #4]
 8102f82:	663b      	str	r3, [r7, #96]	; 0x60
 8102f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102f86:	65fb      	str	r3, [r7, #92]	; 0x5c
    return (CosmOS_SchedulableVariableType *)(task->schedulable);
 8102f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8102f8a:	685a      	ldr	r2, [r3, #4]
    *schedulableVar = task_getTaskSchedulable( taskVar );
 8102f8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8102f8e:	601a      	str	r2, [r3, #0]
    *stackPointerRetVal = stackInit_schedulableStackInit( *schedulableVar );
 8102f90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8102f92:	681b      	ldr	r3, [r3, #0]
 8102f94:	4618      	mov	r0, r3
 8102f96:	f000 fa16 	bl	81033c6 <stackInit_schedulableStackInit>
 8102f9a:	4602      	mov	r2, r0
 8102f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8102f9e:	601a      	str	r2, [r3, #0]
    schedulable_setState( *schedulableVar, SCHEDULABLE_STATE_ENUM__RUNNING );
 8102fa0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8102fa2:	681b      	ldr	r3, [r3, #0]
 8102fa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8102fa6:	2300      	movs	r3, #0
 8102fa8:	657b      	str	r3, [r7, #84]	; 0x54
    schedulable->state = stateParam;
 8102faa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8102fac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8102fae:	605a      	str	r2, [r3, #4]
}
 8102fb0:	bf00      	nop
    *scheduleTableIterator = ( ( (*scheduleTableIterator) + 1 ) % scheduleTableElementsNum );
 8102fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102fb4:	681b      	ldr	r3, [r3, #0]
 8102fb6:	3301      	adds	r3, #1
 8102fb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8102fba:	fbb3 f2f2 	udiv	r2, r3, r2
 8102fbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8102fc0:	fb01 f202 	mul.w	r2, r1, r2
 8102fc4:	1a9a      	subs	r2, r3, r2
 8102fc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102fc8:	601a      	str	r2, [r3, #0]
    scheduler_setSchedulerScheduleTableIterator( schedulerVar, *scheduleTableIterator );
 8102fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102fcc:	681b      	ldr	r3, [r3, #0]
 8102fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8102fd2:	653a      	str	r2, [r7, #80]	; 0x50
 8102fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    scheduler->scheduleTableIterator = scheduleTableIteratorParam;
 8102fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102fd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8102fda:	60da      	str	r2, [r3, #12]
}
 8102fdc:	bf00      	nop
 8102fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102fe0:	64bb      	str	r3, [r7, #72]	; 0x48
    return (task->cfg->wcet);
 8102fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8102fe4:	681b      	ldr	r3, [r3, #0]
 8102fe6:	681b      	ldr	r3, [r3, #0]
    wcet = task_getTaskWcet( taskVar );
 8102fe8:	647b      	str	r3, [r7, #68]	; 0x44
    *timerTicks = wcet;
 8102fea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8102fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8102fee:	601a      	str	r2, [r3, #0]
}
 8102ff0:	bf00      	nop
    {
        scheduler_classicSchedulingCore(schedulerVar,&schedulableVar,&stackPointerRetVal,&timerTicks,\
											&scheduleTableIterator, scheduleTableElementsNum);

        schedulerState = SCHEDULER_STATE_ENUM__TASK_EXECUTED_IN_WCET_CHECK;
 8102ff2:	2300      	movs	r3, #0
 8102ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8102ff8:	e00b      	b.n	8103012 <scheduler_start+0x1c2>
    }
    else
    {
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO ON */
        switchScheduler_performanceScheduling( schedulerVar, &schedulableVar,\
 8102ffa:	f107 0310 	add.w	r3, r7, #16
 8102ffe:	f107 020c 	add.w	r2, r7, #12
 8103002:	1d39      	adds	r1, r7, #4
 8103004:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8103008:	f7ff fcd1 	bl	81029ae <scheduler_performanceScheduling>
												&stackPointerRetVal, &timerTicks );
        /* SCHEDULER_PERFORMANCE_SCHEDULING IS_EQUAL_TO OFF */
        switchScheduler_classicScheduling( schedulerVar, &schedulableVar,\
											&stackPointerRetVal, &timerTicks, startTick, currentTick );

        schedulerState = SCHEDULER_STATE_ENUM__WAITING_FOR_START_TIME;
 810300c:	2301      	movs	r3, #1
 810300e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    }

    schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
 8103012:	687a      	ldr	r2, [r7, #4]
 8103014:	68fb      	ldr	r3, [r7, #12]
 8103016:	63ba      	str	r2, [r7, #56]	; 0x38
 8103018:	637b      	str	r3, [r7, #52]	; 0x34
    schedulable->stackPointer = stackPointerParam;
 810301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810301c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 810301e:	609a      	str	r2, [r3, #8]
}
 8103020:	bf00      	nop
    core_setSchedulableIntoCurrentContext( coreVar, schedulableVar );
 8103022:	687b      	ldr	r3, [r7, #4]
 8103024:	4619      	mov	r1, r3
 8103026:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 810302a:	f7fe ffbc 	bl	8101fa6 <core_setSchedulableIntoCurrentContext>
 810302e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8103032:	643b      	str	r3, [r7, #64]	; 0x40
 8103034:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8103038:	63fb      	str	r3, [r7, #60]	; 0x3c
    scheduler->schedulerState = schedulerStateParam;
 810303a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810303c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 810303e:	615a      	str	r2, [r3, #20]
}
 8103040:	bf00      	nop

    scheduler_setSchedulerState( schedulerVar, schedulerState );

	if ( maxTimerTick < timerTicks )
 8103042:	693b      	ldr	r3, [r7, #16]
 8103044:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8103048:	429a      	cmp	r2, r3
 810304a:	d202      	bcs.n	8103052 <scheduler_start+0x202>
	{
		timerTicks = maxTimerTick;
 810304c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8103050:	613b      	str	r3, [r7, #16]
	}

    currentTick = ( currentTick + timerTicks ) % hyperTick;
 8103052:	693a      	ldr	r2, [r7, #16]
 8103054:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8103058:	4413      	add	r3, r2
 810305a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 810305e:	fbb3 f2f2 	udiv	r2, r3, r2
 8103062:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8103066:	fb01 f202 	mul.w	r2, r1, r2
 810306a:	1a9b      	subs	r3, r3, r2
 810306c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	scheduler_setSchedulerPriorTickStep(schedulerVar, timerTicks);
 8103070:	693b      	ldr	r3, [r7, #16]
 8103072:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8103076:	61ba      	str	r2, [r7, #24]
 8103078:	617b      	str	r3, [r7, #20]
    scheduler->priorTickStep = priorTickStepParam;
 810307a:	69bb      	ldr	r3, [r7, #24]
 810307c:	697a      	ldr	r2, [r7, #20]
 810307e:	609a      	str	r2, [r3, #8]
}
 8103080:	bf00      	nop
 8103082:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8103086:	623b      	str	r3, [r7, #32]
 8103088:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 810308c:	61fb      	str	r3, [r7, #28]
    scheduler->currentTick = currentTickParam;
 810308e:	6a3b      	ldr	r3, [r7, #32]
 8103090:	69fa      	ldr	r2, [r7, #28]
 8103092:	605a      	str	r2, [r3, #4]
}
 8103094:	bf00      	nop
	scheduler_setSchedulerCurrentTick(schedulerVar, currentTick);

	switchMemoryProtection_setMemoryProtection( coreVar , schedulableVar );
 8103096:	687b      	ldr	r3, [r7, #4]
 8103098:	4619      	mov	r1, r3
 810309a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 810309e:	f7ff f8b8 	bl	8102212 <memoryProtection_setMemoryProtection>
 81030a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 81030a6:	62bb      	str	r3, [r7, #40]	; 0x28
 81030a8:	2302      	movs	r3, #2
 81030aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void core_setCoreOsState(CosmOS_CoreVariableType * core, CosmOS_OsStateType osStateParam)
{
    core->osState = osStateParam;
 81030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81030b0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 81030b4:	761a      	strb	r2, [r3, #24]
}
 81030b6:	bf00      	nop
 81030b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 81030bc:	633b      	str	r3, [r7, #48]	; 0x30
 81030be:	2300      	movs	r3, #0
 81030c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    scheduler->rescheduleTriggerState = paramRescheduleTriggerState;
 81030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81030c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81030c6:	621a      	str	r2, [r3, #32]
}
 81030c8:	bf00      	nop

	core_setCoreOsState( coreVar, OS_STATE_ENUM__STARTED );

	scheduler_setSchedulerRescheduleTriggerState( schedulerVar, RESCHEDULE_TRIGGER_STATE_ENUM__SYSTEM );

    CILsysTimer_startTimer( timerTicks, timerTickCount );
 81030ca:	693b      	ldr	r3, [r7, #16]
 81030cc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 81030d0:	4618      	mov	r0, r3
 81030d2:	f000 ffa1 	bl	8104018 <CILsysTimer_startTimer>

    CILstack_setStackPointer( stackPointerRetVal );
 81030d6:	68fb      	ldr	r3, [r7, #12]
 81030d8:	4618      	mov	r0, r3
 81030da:	f000 fed3 	bl	8103e84 <CILstack_setStackPointer>
};
 81030de:	bf00      	nop
 81030e0:	37d0      	adds	r7, #208	; 0xd0
 81030e2:	46bd      	mov	sp, r7
 81030e4:	bd80      	pop	{r7, pc}

081030e6 <schedulerSync_sync>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SchedulerSyncStateType schedulerSync_sync(CosmOS_SchedulerVariableType * schedulerVar, CosmOS_CoreVariableType * coreVar, BitWidthType currentTick, BitWidthType hyperTick)
{
 81030e6:	b580      	push	{r7, lr}
 81030e8:	b096      	sub	sp, #88	; 0x58
 81030ea:	af00      	add	r7, sp, #0
 81030ec:	60f8      	str	r0, [r7, #12]
 81030ee:	60b9      	str	r1, [r7, #8]
 81030f0:	607a      	str	r2, [r7, #4]
 81030f2:	603b      	str	r3, [r7, #0]

    CosmOS_BooleanType syncInitState;

    CosmOS_SchedulerSyncStateType schedulerState = SCHEDULER_SYNC_STATE_ENUM__NOT_IN_SYNC;
 81030f4:	2300      	movs	r3, #0
 81030f6:	657b      	str	r3, [r7, #84]	; 0x54
 81030f8:	68fb      	ldr	r3, [r7, #12]
 81030fa:	63bb      	str	r3, [r7, #56]	; 0x38
    return (scheduler->syncInitState);
 81030fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81030fe:	7f1b      	ldrb	r3, [r3, #28]


    syncInitState = scheduler_getSchedulerSyncInitState( schedulerVar );
 8103100:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    if ( __COSMOS_UNLIKELY( syncInitState IS_EQUAL_TO False ) )
 8103104:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8103108:	2b00      	cmp	r3, #0
 810310a:	bf0c      	ite	eq
 810310c:	2301      	moveq	r3, #1
 810310e:	2300      	movne	r3, #0
 8103110:	b2db      	uxtb	r3, r3
 8103112:	2b00      	cmp	r3, #0
 8103114:	d030      	beq.n	8103178 <schedulerSync_sync+0x92>
 8103116:	68fb      	ldr	r3, [r7, #12]
 8103118:	637b      	str	r3, [r7, #52]	; 0x34
    return (scheduler->cfg->firstSyncTaskStartTick);
 810311a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810311c:	681b      	ldr	r3, [r3, #0]
 810311e:	6a1b      	ldr	r3, [r3, #32]
    {
        BitWidthType firstSyncTaskStartTick;


        firstSyncTaskStartTick = scheduler_getSchedulerFirstSyncTaskStartTick( schedulerVar );
 8103120:	647b      	str	r3, [r7, #68]	; 0x44

        if ( firstSyncTaskStartTick IS_EQUAL_TO currentTick )
 8103122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8103124:	687b      	ldr	r3, [r7, #4]
 8103126:	429a      	cmp	r2, r3
 8103128:	d150      	bne.n	81031cc <schedulerSync_sync+0xe6>
 810312a:	68fb      	ldr	r3, [r7, #12]
 810312c:	623b      	str	r3, [r7, #32]
    return (scheduler->cfg->syncTicks);
 810312e:	6a3b      	ldr	r3, [r7, #32]
 8103130:	681b      	ldr	r3, [r3, #0]
 8103132:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks,
                          nextTick;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 8103134:	643b      	str	r3, [r7, #64]	; 0x40

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 8103136:	687a      	ldr	r2, [r7, #4]
 8103138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 810313a:	4413      	add	r3, r2
 810313c:	683a      	ldr	r2, [r7, #0]
 810313e:	fbb3 f2f2 	udiv	r2, r3, r2
 8103142:	6839      	ldr	r1, [r7, #0]
 8103144:	fb01 f202 	mul.w	r2, r1, r2
 8103148:	1a9b      	subs	r3, r3, r2
 810314a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810314c:	68fb      	ldr	r3, [r7, #12]
 810314e:	62bb      	str	r3, [r7, #40]	; 0x28
 8103150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103152:	627b      	str	r3, [r7, #36]	; 0x24
    scheduler->nextSyncTick = paramNextSyncTick;
 8103154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103158:	619a      	str	r2, [r3, #24]
}
 810315a:	bf00      	nop
 810315c:	68fb      	ldr	r3, [r7, #12]
 810315e:	633b      	str	r3, [r7, #48]	; 0x30
 8103160:	2301      	movs	r3, #1
 8103162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    scheduler->syncInitState = paramSyncInitState;
 8103166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103168:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 810316c:	771a      	strb	r2, [r3, #28]
}
 810316e:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            scheduler_setSchedulerSyncInitState( schedulerVar, True );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 8103170:	f04f 33ff 	mov.w	r3, #4294967295
 8103174:	657b      	str	r3, [r7, #84]	; 0x54
 8103176:	e029      	b.n	81031cc <schedulerSync_sync+0xe6>
 8103178:	68fb      	ldr	r3, [r7, #12]
 810317a:	61fb      	str	r3, [r7, #28]
    return (scheduler->nextSyncTick);
 810317c:	69fb      	ldr	r3, [r7, #28]
 810317e:	699b      	ldr	r3, [r3, #24]
    else
    {
        BitWidthType nextTick;


        nextTick = scheduler_getSchedulerNextSyncTick( schedulerVar );
 8103180:	64fb      	str	r3, [r7, #76]	; 0x4c

        if ( __COSMOS_UNLIKELY( nextTick IS_EQUAL_TO currentTick ) )
 8103182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	429a      	cmp	r2, r3
 8103188:	bf0c      	ite	eq
 810318a:	2301      	moveq	r3, #1
 810318c:	2300      	movne	r3, #0
 810318e:	b2db      	uxtb	r3, r3
 8103190:	2b00      	cmp	r3, #0
 8103192:	d01b      	beq.n	81031cc <schedulerSync_sync+0xe6>
 8103194:	68fb      	ldr	r3, [r7, #12]
 8103196:	613b      	str	r3, [r7, #16]
    return (scheduler->cfg->syncTicks);
 8103198:	693b      	ldr	r3, [r7, #16]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	69db      	ldr	r3, [r3, #28]
        {
            BitWidthType  syncTicks;


            syncTicks = scheduler_getSchedulerSyncTicks( schedulerVar );
 810319e:	64bb      	str	r3, [r7, #72]	; 0x48

            nextTick = ( currentTick + syncTicks ) % hyperTick;
 81031a0:	687a      	ldr	r2, [r7, #4]
 81031a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81031a4:	4413      	add	r3, r2
 81031a6:	683a      	ldr	r2, [r7, #0]
 81031a8:	fbb3 f2f2 	udiv	r2, r3, r2
 81031ac:	6839      	ldr	r1, [r7, #0]
 81031ae:	fb01 f202 	mul.w	r2, r1, r2
 81031b2:	1a9b      	subs	r3, r3, r2
 81031b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 81031b6:	68fb      	ldr	r3, [r7, #12]
 81031b8:	61bb      	str	r3, [r7, #24]
 81031ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81031bc:	617b      	str	r3, [r7, #20]
    scheduler->nextSyncTick = paramNextSyncTick;
 81031be:	69bb      	ldr	r3, [r7, #24]
 81031c0:	697a      	ldr	r2, [r7, #20]
 81031c2:	619a      	str	r2, [r3, #24]
}
 81031c4:	bf00      	nop
            scheduler_setSchedulerNextSyncTick( schedulerVar, nextTick );

            schedulerState = SCHEDULER_SYNC_STATE_ENUM__IN_SYNC;
 81031c6:	f04f 33ff 	mov.w	r3, #4294967295
 81031ca:	657b      	str	r3, [r7, #84]	; 0x54
        }
    }

    if ( schedulerState IS_EQUAL_TO SCHEDULER_SYNC_STATE_ENUM__IN_SYNC )
 81031cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81031d2:	d107      	bne.n	81031e4 <schedulerSync_sync+0xfe>
    {
        coreSync_getBarrier( coreVar, SCHEDULERS_SYNC_ID );
 81031d4:	2103      	movs	r1, #3
 81031d6:	68b8      	ldr	r0, [r7, #8]
 81031d8:	f7fe ff2e 	bl	8102038 <coreSync_getBarrier>
        coreSync_reactivateBarrier( coreVar, SCHEDULERS_SYNC_ID );
 81031dc:	2103      	movs	r1, #3
 81031de:	68b8      	ldr	r0, [r7, #8]
 81031e0:	f7fe ff98 	bl	8102114 <coreSync_reactivateBarrier>
    }

    return schedulerState;
 81031e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
};
 81031e6:	4618      	mov	r0, r3
 81031e8:	3758      	adds	r7, #88	; 0x58
 81031ea:	46bd      	mov	sp, r7
 81031ec:	bd80      	pop	{r7, pc}

081031ee <spinlock_getSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_getSpinlock(BitWidthType id)
{
 81031ee:	b580      	push	{r7, lr}
 81031f0:	b090      	sub	sp, #64	; 0x40
 81031f2:	af00      	add	r7, sp, #0
 81031f4:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 81031f6:	f7ff fa49 	bl	810268c <os_getOsVar>
 81031fa:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81031fc:	464b      	mov	r3, r9
 81031fe:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 8103200:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 8103202:	637b      	str	r3, [r7, #52]	; 0x34
 8103204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103206:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 8103208:	693b      	ldr	r3, [r7, #16]
 810320a:	681b      	ldr	r3, [r3, #0]
 810320c:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 810320e:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 8103210:	687a      	ldr	r2, [r7, #4]
 8103212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103214:	429a      	cmp	r2, r3
 8103216:	bf34      	ite	cc
 8103218:	2301      	movcc	r3, #1
 810321a:	2300      	movcs	r3, #0
 810321c:	b2db      	uxtb	r3, r3
 810321e:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 8103220:	697b      	ldr	r3, [r7, #20]
 8103222:	2b00      	cmp	r3, #0
 8103224:	d101      	bne.n	810322a <spinlock_getSpinlock+0x3c>
        os_kernelPanic();
 8103226:	f7ff fa3b 	bl	81026a0 <os_kernelPanic>
}
 810322a:	bf00      	nop
 810322c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810322e:	61fb      	str	r3, [r7, #28]
 8103230:	687b      	ldr	r3, [r7, #4]
 8103232:	61bb      	str	r3, [r7, #24]
  *
  * @return CosmOS_SpinlockVariableType *
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_SpinlockVariableType * os_getOsSpinlockVar(CosmOS_OsVariableType * osVar, BitWidthType spinlockId)
{
    return (&(osVar->spinlockVars[spinlockId]));
 8103234:	69fb      	ldr	r3, [r7, #28]
 8103236:	691a      	ldr	r2, [r3, #16]
 8103238:	69bb      	ldr	r3, [r7, #24]
 810323a:	00db      	lsls	r3, r3, #3
 810323c:	4413      	add	r3, r2

	spinlockVar = os_getOsSpinlockVar(osVar, id);
 810323e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8103240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103242:	627b      	str	r3, [r7, #36]	; 0x24
 8103244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103246:	623b      	str	r3, [r7, #32]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType spinlock_willCauseDeadlock(CosmOS_CoreVariableType * coreVar, CosmOS_SpinlockVariableType * spinlockVar)
{
    return ((spinlockVar->spinlock IS_EQUAL_TO SPINLOCK_STATE_ENUM__OCCUPIED)\
 8103248:	6a3b      	ldr	r3, [r7, #32]
 810324a:	681b      	ldr	r3, [r3, #0]
			AND (coreVar->schedulableInExecution IS_EQUAL_TO spinlockVar->schedulableOwner)) ? True : False;
 810324c:	2b01      	cmp	r3, #1
 810324e:	d107      	bne.n	8103260 <spinlock_getSpinlock+0x72>
 8103250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103252:	685a      	ldr	r2, [r3, #4]
 8103254:	6a3b      	ldr	r3, [r7, #32]
 8103256:	685b      	ldr	r3, [r3, #4]
 8103258:	429a      	cmp	r2, r3
 810325a:	d101      	bne.n	8103260 <spinlock_getSpinlock+0x72>
 810325c:	2301      	movs	r3, #1
 810325e:	e000      	b.n	8103262 <spinlock_getSpinlock+0x74>
 8103260:	2300      	movs	r3, #0
 8103262:	b2db      	uxtb	r3, r3

	willCauseDeadlock = spinlock_willCauseDeadlock(coreVar, spinlockVar);
 8103264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if( willCauseDeadlock )
 8103268:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 810326c:	2b00      	cmp	r3, #0
 810326e:	d003      	beq.n	8103278 <spinlock_getSpinlock+0x8a>
	{
		spinlockState = SPINLOCK_STATE_ENUM__DEADLOCK_WARNING;
 8103270:	f04f 33ff 	mov.w	r3, #4294967295
 8103274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8103276:	e00d      	b.n	8103294 <spinlock_getSpinlock+0xa6>
	}
	else
	{
		spinlockState = CILspinlock_getSpinlock(&(spinlockVar->spinlock), \
 8103278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
												id, \
												coreVar->schedulableInExecution->cfg->id );
 810327a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810327c:	685b      	ldr	r3, [r3, #4]
 810327e:	681b      	ldr	r3, [r3, #0]
		spinlockState = CILspinlock_getSpinlock(&(spinlockVar->spinlock), \
 8103280:	691b      	ldr	r3, [r3, #16]
 8103282:	461a      	mov	r2, r3
 8103284:	6879      	ldr	r1, [r7, #4]
 8103286:	f000 fd6a 	bl	8103d5e <CILspinlock_getSpinlock>
 810328a:	63f8      	str	r0, [r7, #60]	; 0x3c
		spinlockVar->schedulableOwner = coreVar->schedulableInExecution;
 810328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810328e:	685a      	ldr	r2, [r3, #4]
 8103290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103292:	605a      	str	r2, [r3, #4]
	}

    return spinlockState;
 8103294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8103296:	4618      	mov	r0, r3
 8103298:	3740      	adds	r7, #64	; 0x40
 810329a:	46bd      	mov	sp, r7
 810329c:	bd80      	pop	{r7, pc}

0810329e <spinlock_trySpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_trySpinlock(BitWidthType id)
{
 810329e:	b580      	push	{r7, lr}
 81032a0:	b08c      	sub	sp, #48	; 0x30
 81032a2:	af00      	add	r7, sp, #0
 81032a4:	6078      	str	r0, [r7, #4]
	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;


    osVar = os_getOsVar();
 81032a6:	f7ff f9f1 	bl	810268c <os_getOsVar>
 81032aa:	62f8      	str	r0, [r7, #44]	; 0x2c
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 81032ac:	464b      	mov	r3, r9
 81032ae:	60bb      	str	r3, [r7, #8]
    return (CosmOS_CoreVariableType *)result;
 81032b0:	68bb      	ldr	r3, [r7, #8]
    coreVar = CILcore_getCoreVar();
 81032b2:	62bb      	str	r3, [r7, #40]	; 0x28
 81032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81032b6:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfSpinlocks);
 81032b8:	68fb      	ldr	r3, [r7, #12]
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 81032be:	627b      	str	r3, [r7, #36]	; 0x24

	cosmosAssert( id < numberOfSpinlocks );
 81032c0:	687a      	ldr	r2, [r7, #4]
 81032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81032c4:	429a      	cmp	r2, r3
 81032c6:	bf34      	ite	cc
 81032c8:	2301      	movcc	r3, #1
 81032ca:	2300      	movcs	r3, #0
 81032cc:	b2db      	uxtb	r3, r3
 81032ce:	613b      	str	r3, [r7, #16]
    if ( IS_NOT( result ) )
 81032d0:	693b      	ldr	r3, [r7, #16]
 81032d2:	2b00      	cmp	r3, #0
 81032d4:	d101      	bne.n	81032da <spinlock_trySpinlock+0x3c>
        os_kernelPanic();
 81032d6:	f7ff f9e3 	bl	81026a0 <os_kernelPanic>
}
 81032da:	bf00      	nop
 81032dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81032de:	61bb      	str	r3, [r7, #24]
 81032e0:	687b      	ldr	r3, [r7, #4]
 81032e2:	617b      	str	r3, [r7, #20]
    return (&(osVar->spinlockVars[spinlockId]));
 81032e4:	69bb      	ldr	r3, [r7, #24]
 81032e6:	691a      	ldr	r2, [r3, #16]
 81032e8:	697b      	ldr	r3, [r7, #20]
 81032ea:	00db      	lsls	r3, r3, #3
 81032ec:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 81032ee:	623b      	str	r3, [r7, #32]

	spinlockState = CILspinlock_trySpinlock(&(spinlockVar->spinlock), \
 81032f0:	6a38      	ldr	r0, [r7, #32]
											id, \
											coreVar->schedulableInExecution->cfg->id );
 81032f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81032f4:	685b      	ldr	r3, [r3, #4]
 81032f6:	681b      	ldr	r3, [r3, #0]
	spinlockState = CILspinlock_trySpinlock(&(spinlockVar->spinlock), \
 81032f8:	691b      	ldr	r3, [r3, #16]
 81032fa:	461a      	mov	r2, r3
 81032fc:	6879      	ldr	r1, [r7, #4]
 81032fe:	f000 fd4e 	bl	8103d9e <CILspinlock_trySpinlock>
 8103302:	61f8      	str	r0, [r7, #28]

	if ( spinlockState IS_EQUAL_TO SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED )
 8103304:	69fb      	ldr	r3, [r7, #28]
 8103306:	2b02      	cmp	r3, #2
 8103308:	d103      	bne.n	8103312 <spinlock_trySpinlock+0x74>
	{
		spinlockVar->schedulableOwner = coreVar->schedulableInExecution;
 810330a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810330c:	685a      	ldr	r2, [r3, #4]
 810330e:	6a3b      	ldr	r3, [r7, #32]
 8103310:	605a      	str	r2, [r3, #4]
	}

    return spinlockState;
 8103312:	69fb      	ldr	r3, [r7, #28]
}
 8103314:	4618      	mov	r0, r3
 8103316:	3730      	adds	r7, #48	; 0x30
 8103318:	46bd      	mov	sp, r7
 810331a:	bd80      	pop	{r7, pc}

0810331c <spinlock_releaseSpinlock>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType spinlock_releaseSpinlock(BitWidthType id)
{
 810331c:	b580      	push	{r7, lr}
 810331e:	b090      	sub	sp, #64	; 0x40
 8103320:	af00      	add	r7, sp, #0
 8103322:	6078      	str	r0, [r7, #4]

	CosmOS_OsVariableType * osVar;
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SpinlockVariableType * spinlockVar;

    osVar = os_getOsVar();
 8103324:	f7ff f9b2 	bl	810268c <os_getOsVar>
 8103328:	63b8      	str	r0, [r7, #56]	; 0x38
    __asm volatile ("MOV %[resultVariable], R9":  [resultVariable] "=r" (result) );
 810332a:	464b      	mov	r3, r9
 810332c:	60fb      	str	r3, [r7, #12]
    return (CosmOS_CoreVariableType *)result;
 810332e:	68fb      	ldr	r3, [r7, #12]
    coreVar = CILcore_getCoreVar();
 8103330:	637b      	str	r3, [r7, #52]	; 0x34
 8103332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103334:	613b      	str	r3, [r7, #16]
    return (osVar->cfg->numberOfSpinlocks);
 8103336:	693b      	ldr	r3, [r7, #16]
 8103338:	681b      	ldr	r3, [r3, #0]
 810333a:	695b      	ldr	r3, [r3, #20]

	numberOfSpinlocks = os_getOsNumberOfSpinlocks(osVar);
 810333c:	633b      	str	r3, [r7, #48]	; 0x30

	cosmosAssert( id < numberOfSpinlocks );
 810333e:	687a      	ldr	r2, [r7, #4]
 8103340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103342:	429a      	cmp	r2, r3
 8103344:	bf34      	ite	cc
 8103346:	2301      	movcc	r3, #1
 8103348:	2300      	movcs	r3, #0
 810334a:	b2db      	uxtb	r3, r3
 810334c:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 810334e:	697b      	ldr	r3, [r7, #20]
 8103350:	2b00      	cmp	r3, #0
 8103352:	d101      	bne.n	8103358 <spinlock_releaseSpinlock+0x3c>
        os_kernelPanic();
 8103354:	f7ff f9a4 	bl	81026a0 <os_kernelPanic>
}
 8103358:	bf00      	nop
 810335a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810335c:	61fb      	str	r3, [r7, #28]
 810335e:	687b      	ldr	r3, [r7, #4]
 8103360:	61bb      	str	r3, [r7, #24]
    return (&(osVar->spinlockVars[spinlockId]));
 8103362:	69fb      	ldr	r3, [r7, #28]
 8103364:	691a      	ldr	r2, [r3, #16]
 8103366:	69bb      	ldr	r3, [r7, #24]
 8103368:	00db      	lsls	r3, r3, #3
 810336a:	4413      	add	r3, r2
	spinlockVar = os_getOsSpinlockVar(osVar, id);
 810336c:	62fb      	str	r3, [r7, #44]	; 0x2c
 810336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103370:	627b      	str	r3, [r7, #36]	; 0x24
 8103372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103374:	623b      	str	r3, [r7, #32]
	*
  * @return CosmOS_BufferStateType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_BooleanType spinlock_ownsSchedulableSpinlock(CosmOS_CoreVariableType * coreVar, CosmOS_SpinlockVariableType * spinlockVar)
{
    return (coreVar->schedulableInExecution IS_EQUAL_TO spinlockVar->schedulableOwner) ? True : False;
 8103376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103378:	685a      	ldr	r2, [r3, #4]
 810337a:	6a3b      	ldr	r3, [r7, #32]
 810337c:	685b      	ldr	r3, [r3, #4]
 810337e:	429a      	cmp	r2, r3
 8103380:	bf0c      	ite	eq
 8103382:	2301      	moveq	r3, #1
 8103384:	2300      	movne	r3, #0
 8103386:	b2db      	uxtb	r3, r3

	ownsSchedulableSpinlock = spinlock_ownsSchedulableSpinlock(coreVar, spinlockVar);
 8103388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if ( spinlockVar->spinlock IS_EQUAL_TO SPINLOCK_STATE_ENUM__OCCUPIED )
 810338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810338e:	681b      	ldr	r3, [r3, #0]
 8103390:	2b01      	cmp	r3, #1
 8103392:	d111      	bne.n	81033b8 <spinlock_releaseSpinlock+0x9c>
	{
		if ( ownsSchedulableSpinlock )
 8103394:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8103398:	2b00      	cmp	r3, #0
 810339a:	d00a      	beq.n	81033b2 <spinlock_releaseSpinlock+0x96>
		{
			spinlockState = CILspinlock_releaseSpinlock(&(spinlockVar->spinlock), \
 810339c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
														id, \
														coreVar->schedulableInExecution->cfg->id );
 810339e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81033a0:	685b      	ldr	r3, [r3, #4]
 81033a2:	681b      	ldr	r3, [r3, #0]
			spinlockState = CILspinlock_releaseSpinlock(&(spinlockVar->spinlock), \
 81033a4:	691b      	ldr	r3, [r3, #16]
 81033a6:	461a      	mov	r2, r3
 81033a8:	6879      	ldr	r1, [r7, #4]
 81033aa:	f000 fd14 	bl	8103dd6 <CILspinlock_releaseSpinlock>
 81033ae:	63f8      	str	r0, [r7, #60]	; 0x3c
 81033b0:	e004      	b.n	81033bc <spinlock_releaseSpinlock+0xa0>
		}
		else
		{
			spinlockState = SPINLOCK_STATE_ENUM__ERROR_SCHEDULABLE_IS_NOT_OWNER;
 81033b2:	2303      	movs	r3, #3
 81033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81033b6:	e001      	b.n	81033bc <spinlock_releaseSpinlock+0xa0>
		}
	}
	else
	{
		spinlockState = SPINLOCK_STATE_ENUM__ERROR_NOT_IN_OCCUPIED_STATE;
 81033b8:	2304      	movs	r3, #4
 81033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	return spinlockState;
 81033bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81033be:	4618      	mov	r0, r3
 81033c0:	3740      	adds	r7, #64	; 0x40
 81033c2:	46bd      	mov	sp, r7
 81033c4:	bd80      	pop	{r7, pc}

081033c6 <stackInit_schedulableStackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType stackInit_schedulableStackInit(CosmOS_SchedulableVariableType  * schedulable)
{
 81033c6:	b580      	push	{r7, lr}
 81033c8:	b08c      	sub	sp, #48	; 0x30
 81033ca:	af00      	add	r7, sp, #0
 81033cc:	6078      	str	r0, [r7, #4]
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	60fb      	str	r3, [r7, #12]
    return (CosmOS_StackConfigurationType *)(schedulable->cfg->stack);
 81033d2:	68fb      	ldr	r3, [r7, #12]
 81033d4:	681b      	ldr	r3, [r3, #0]
 81033d6:	681b      	ldr	r3, [r3, #0]
    StackPointerType stackPointer;

    CosmOS_StackConfigurationType * stack;


    stack = schedulable_getStack( schedulable );
 81033d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 81033da:	687b      	ldr	r3, [r7, #4]
 81033dc:	613b      	str	r3, [r7, #16]
    return (schedulable->cfg->handler);
 81033de:	693b      	ldr	r3, [r7, #16]
 81033e0:	681b      	ldr	r3, [r3, #0]
 81033e2:	689b      	ldr	r3, [r3, #8]
    handler = schedulable_getHandler( schedulable );
 81033e4:	62bb      	str	r3, [r7, #40]	; 0x28
 81033e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81033e8:	617b      	str	r3, [r7, #20]
    return (stack->stackLowAddress);
 81033ea:	697b      	ldr	r3, [r7, #20]
 81033ec:	685b      	ldr	r3, [r3, #4]

    stackLowAddress = stack_getStackLowAddress( stack );
 81033ee:	627b      	str	r3, [r7, #36]	; 0x24
 81033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81033f2:	61bb      	str	r3, [r7, #24]
    return (stack->stackHighAddress);
 81033f4:	69bb      	ldr	r3, [r7, #24]
 81033f6:	689b      	ldr	r3, [r3, #8]
    stackHighAddress = stack_getStackHighAddress( stack );
 81033f8:	623b      	str	r3, [r7, #32]

    stackPointer = CILstack_stackInit( stackLowAddress, stackHighAddress, (BitWidthType)handler );
 81033fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81033fc:	461a      	mov	r2, r3
 81033fe:	6a39      	ldr	r1, [r7, #32]
 8103400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8103402:	f000 fcfc 	bl	8103dfe <CILstack_stackInit>
 8103406:	61f8      	str	r0, [r7, #28]

    return stackPointer;
 8103408:	69fb      	ldr	r3, [r7, #28]
}
 810340a:	4618      	mov	r0, r3
 810340c:	3730      	adds	r7, #48	; 0x30
 810340e:	46bd      	mov	sp, r7
 8103410:	bd80      	pop	{r7, pc}

08103412 <stackInit_init>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void stackInit_init(CosmOS_CoreVariableType * coreVar)
{
 8103412:	b580      	push	{r7, lr}
 8103414:	b094      	sub	sp, #80	; 0x50
 8103416:	af00      	add	r7, sp, #0
 8103418:	6078      	str	r0, [r7, #4]
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->cfg->numberOfPrograms);
 810341e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103420:	681b      	ldr	r3, [r3, #0]
 8103422:	685b      	ldr	r3, [r3, #4]
                  stackPointerRetVal;

    CosmOS_ThreadVariableType * threadVar;
    CosmOS_ProgramVariableType * programVar;

    numberOfPrograms = core_getCoreNumberOfPrograms( coreVar );
 8103424:	647b      	str	r3, [r7, #68]	; 0x44

    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 8103426:	2300      	movs	r3, #0
 8103428:	64fb      	str	r3, [r7, #76]	; 0x4c
 810342a:	e03a      	b.n	81034a2 <stackInit_init+0x90>
 810342c:	687b      	ldr	r3, [r7, #4]
 810342e:	627b      	str	r3, [r7, #36]	; 0x24
 8103430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103432:	623b      	str	r3, [r7, #32]
    return (&(core->programVars[programIterator]));
 8103434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103436:	68da      	ldr	r2, [r3, #12]
 8103438:	6a3b      	ldr	r3, [r7, #32]
 810343a:	011b      	lsls	r3, r3, #4
 810343c:	4413      	add	r3, r2
    {
        programVar = core_getCoreProgramVar( coreVar, programIterator );
 810343e:	643b      	str	r3, [r7, #64]	; 0x40
 8103440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103442:	62bb      	str	r3, [r7, #40]	; 0x28
    return (program->cfg->numberOfThreads);
 8103444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	689b      	ldr	r3, [r3, #8]
        numberOfThreads = program_getProgramNumberOfThreads( programVar );
 810344a:	63fb      	str	r3, [r7, #60]	; 0x3c

        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 810344c:	2300      	movs	r3, #0
 810344e:	64bb      	str	r3, [r7, #72]	; 0x48
 8103450:	e020      	b.n	8103494 <stackInit_init+0x82>
 8103452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103454:	613b      	str	r3, [r7, #16]
 8103456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103458:	60fb      	str	r3, [r7, #12]
    return (&(program->threadVars[threadIterator]));
 810345a:	693b      	ldr	r3, [r7, #16]
 810345c:	6899      	ldr	r1, [r3, #8]
 810345e:	68fa      	ldr	r2, [r7, #12]
 8103460:	4613      	mov	r3, r2
 8103462:	005b      	lsls	r3, r3, #1
 8103464:	4413      	add	r3, r2
 8103466:	009b      	lsls	r3, r3, #2
 8103468:	440b      	add	r3, r1
        {
            CosmOS_SchedulableVariableType * schedulableVar;


            threadVar = program_getProgramThread( programVar, threadIterator );
 810346a:	63bb      	str	r3, [r7, #56]	; 0x38
 810346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810346e:	617b      	str	r3, [r7, #20]
 8103470:	697b      	ldr	r3, [r7, #20]
 8103472:	685b      	ldr	r3, [r3, #4]
            schedulableVar = thread_getThreadSchedulable( threadVar );
 8103474:	637b      	str	r3, [r7, #52]	; 0x34

            stackPointerRetVal = stackInit_schedulableStackInit( schedulableVar );
 8103476:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8103478:	f7ff ffa5 	bl	81033c6 <stackInit_schedulableStackInit>
 810347c:	6338      	str	r0, [r7, #48]	; 0x30
 810347e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8103480:	61fb      	str	r3, [r7, #28]
 8103482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103484:	61bb      	str	r3, [r7, #24]
    schedulable->stackPointer = stackPointerParam;
 8103486:	69fb      	ldr	r3, [r7, #28]
 8103488:	69ba      	ldr	r2, [r7, #24]
 810348a:	609a      	str	r2, [r3, #8]
}
 810348c:	bf00      	nop
        for( BitWidthType threadIterator = 0; threadIterator < numberOfThreads; threadIterator++ )
 810348e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8103490:	3301      	adds	r3, #1
 8103492:	64bb      	str	r3, [r7, #72]	; 0x48
 8103494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8103496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103498:	429a      	cmp	r2, r3
 810349a:	d3da      	bcc.n	8103452 <stackInit_init+0x40>
    for ( BitWidthType programIterator = 0; programIterator < numberOfPrograms; programIterator++ )
 810349c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810349e:	3301      	adds	r3, #1
 81034a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 81034a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 81034a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81034a6:	429a      	cmp	r2, r3
 81034a8:	d3c0      	bcc.n	810342c <stackInit_init+0x1a>
            schedulable_setStackPointer( schedulableVar, stackPointerRetVal );
        }
    }
}
 81034aa:	bf00      	nop
 81034ac:	bf00      	nop
 81034ae:	3750      	adds	r7, #80	; 0x50
 81034b0:	46bd      	mov	sp, r7
 81034b2:	bd80      	pop	{r7, pc}

081034b4 <sysCalls_bitWidthType_ret_void>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysCalls_bitWidthType_ret_void(BitWidthType id)
{
 81034b4:	b580      	push	{r7, lr}
 81034b6:	b082      	sub	sp, #8
 81034b8:	af00      	add	r7, sp, #0
 81034ba:	6078      	str	r0, [r7, #4]
    CILsysCalls_bitWidthType_ret_void( id );
 81034bc:	6878      	ldr	r0, [r7, #4]
 81034be:	f000 fd63 	bl	8103f88 <CILsysCalls_bitWidthType_ret_void>
};
 81034c2:	bf00      	nop
 81034c4:	3708      	adds	r7, #8
 81034c6:	46bd      	mov	sp, r7
 81034c8:	bd80      	pop	{r7, pc}

081034ca <sysCalls_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_ret_bitWidthType(BitWidthType id)
{
 81034ca:	b580      	push	{r7, lr}
 81034cc:	b084      	sub	sp, #16
 81034ce:	af00      	add	r7, sp, #0
 81034d0:	6078      	str	r0, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_ret_bitWidthType( id );
 81034d2:	6878      	ldr	r0, [r7, #4]
 81034d4:	f000 fd63 	bl	8103f9e <CILsysCalls_bitWidthType_ret_bitWidthType>
 81034d8:	60f8      	str	r0, [r7, #12]

    return returnValue;
 81034da:	68fb      	ldr	r3, [r7, #12]
};
 81034dc:	4618      	mov	r0, r3
 81034de:	3710      	adds	r7, #16
 81034e0:	46bd      	mov	sp, r7
 81034e2:	bd80      	pop	{r7, pc}

081034e4 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_bitWidthType_ret_bitWidthType(BitWidthType id, BitWidthType arg)
{
 81034e4:	b580      	push	{r7, lr}
 81034e6:	b084      	sub	sp, #16
 81034e8:	af00      	add	r7, sp, #0
 81034ea:	6078      	str	r0, [r7, #4]
 81034ec:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType( id, arg );
 81034ee:	6839      	ldr	r1, [r7, #0]
 81034f0:	6878      	ldr	r0, [r7, #4]
 81034f2:	f000 fd62 	bl	8103fba <CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
 81034f6:	60f8      	str	r0, [r7, #12]

    return returnValue;
 81034f8:	68fb      	ldr	r3, [r7, #12]
};
 81034fa:	4618      	mov	r0, r3
 81034fc:	3710      	adds	r7, #16
 81034fe:	46bd      	mov	sp, r7
 8103500:	bd80      	pop	{r7, pc}

08103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType(BitWidthType id, void * ptr, BitWidthType arg)
{
 8103502:	b580      	push	{r7, lr}
 8103504:	b086      	sub	sp, #24
 8103506:	af00      	add	r7, sp, #0
 8103508:	60f8      	str	r0, [r7, #12]
 810350a:	60b9      	str	r1, [r7, #8]
 810350c:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType( id, ptr, arg );
 810350e:	687a      	ldr	r2, [r7, #4]
 8103510:	68b9      	ldr	r1, [r7, #8]
 8103512:	68f8      	ldr	r0, [r7, #12]
 8103514:	f000 fd60 	bl	8103fd8 <CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 8103518:	6178      	str	r0, [r7, #20]

    return returnValue;
 810351a:	697b      	ldr	r3, [r7, #20]
};
 810351c:	4618      	mov	r0, r3
 810351e:	3718      	adds	r7, #24
 8103520:	46bd      	mov	sp, r7
 8103522:	bd80      	pop	{r7, pc}

08103524 <sysCalls_bitWidthType_voidPtr_ret_bitWidthType>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType sysCalls_bitWidthType_voidPtr_ret_bitWidthType(BitWidthType id, void * ptr)
{
 8103524:	b580      	push	{r7, lr}
 8103526:	b084      	sub	sp, #16
 8103528:	af00      	add	r7, sp, #0
 810352a:	6078      	str	r0, [r7, #4]
 810352c:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    returnValue = CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType( id, ptr );
 810352e:	6839      	ldr	r1, [r7, #0]
 8103530:	6878      	ldr	r0, [r7, #4]
 8103532:	f000 fd61 	bl	8103ff8 <CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType>
 8103536:	60f8      	str	r0, [r7, #12]

    return returnValue;
 8103538:	68fb      	ldr	r3, [r7, #12]
};
 810353a:	4618      	mov	r0, r3
 810353c:	3710      	adds	r7, #16
 810353e:	46bd      	mov	sp, r7
 8103540:	bd80      	pop	{r7, pc}

08103542 <sysJobs_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void sysJobs_dispatcher(BitWidthType entityId)
{
 8103542:	b580      	push	{r7, lr}
 8103544:	b098      	sub	sp, #96	; 0x60
 8103546:	af00      	add	r7, sp, #0
 8103548:	6078      	str	r0, [r7, #4]

    CosmOS_CoreVariableType * coreVar;
    CosmOS_SysJobsVariableType * sysJobsVar;


    coreVar = core_getCoreVar();
 810354a:	f7fe fd1e 	bl	8101f8a <core_getCoreVar>
 810354e:	6578      	str	r0, [r7, #84]	; 0x54
 8103550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8103552:	62fb      	str	r3, [r7, #44]	; 0x2c
    return (core->sysJobs);
 8103554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103556:	69db      	ldr	r3, [r3, #28]
    sysJobsVar = core_getCoreSysJobs( coreVar );
 8103558:	653b      	str	r3, [r7, #80]	; 0x50
 810355a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810355c:	633b      	str	r3, [r7, #48]	; 0x30
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs)
{
    return (sysJobs->currentTick);
 810355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103560:	685b      	ldr	r3, [r3, #4]

    sysJobsCurrentTick = sysJobs_getSysJobsCurrentTick( sysJobsVar );
 8103562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8103564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103566:	637b      	str	r3, [r7, #52]	; 0x34
    return (sysJobs->cfg->numOfGroups);
 8103568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810356a:	681b      	ldr	r3, [r3, #0]
 810356c:	685b      	ldr	r3, [r3, #4]
    numOfGroups = sysJobs_getSysJobsNumOfGroups( sysJobsVar );
 810356e:	64bb      	str	r3, [r7, #72]	; 0x48

    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8103570:	2300      	movs	r3, #0
 8103572:	65fb      	str	r3, [r7, #92]	; 0x5c
 8103574:	e049      	b.n	810360a <sysJobs_dispatcher+0xc8>
 8103576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103578:	62bb      	str	r3, [r7, #40]	; 0x28
 810357a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 810357c:	627b      	str	r3, [r7, #36]	; 0x24
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType sysJobs_getSysJobsGroupTickMultiplicator(CosmOS_SysJobsVariableType * sysJobs, BitWidthType groupId)
{
    return (sysJobs->cfg->groups[groupId].tickMultiplicator);
 810357e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103580:	681b      	ldr	r3, [r3, #0]
 8103582:	6819      	ldr	r1, [r3, #0]
 8103584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103586:	4613      	mov	r3, r2
 8103588:	005b      	lsls	r3, r3, #1
 810358a:	4413      	add	r3, r2
 810358c:	009b      	lsls	r3, r3, #2
 810358e:	440b      	add	r3, r1
 8103590:	689b      	ldr	r3, [r3, #8]
    {
        BitWidthType  groupTickMultiplicator;


        groupTickMultiplicator = sysJobs_getSysJobsGroupTickMultiplicator( sysJobsVar, groupIterator );
 8103592:	643b      	str	r3, [r7, #64]	; 0x40

        if ( IS_NOT( sysJobsCurrentTick % groupTickMultiplicator ) )
 8103594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8103598:	fbb3 f2f2 	udiv	r2, r3, r2
 810359c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 810359e:	fb01 f202 	mul.w	r2, r1, r2
 81035a2:	1a9b      	subs	r3, r3, r2
 81035a4:	2b00      	cmp	r3, #0
 81035a6:	d12d      	bne.n	8103604 <sysJobs_dispatcher+0xc2>
 81035a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81035aa:	61bb      	str	r3, [r7, #24]
 81035ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81035ae:	617b      	str	r3, [r7, #20]
    return (CosmOS_GenericVoidType *)(sysJobs->cfg->groups[groupId].handlers);
 81035b0:	69bb      	ldr	r3, [r7, #24]
 81035b2:	681b      	ldr	r3, [r3, #0]
 81035b4:	6819      	ldr	r1, [r3, #0]
 81035b6:	697a      	ldr	r2, [r7, #20]
 81035b8:	4613      	mov	r3, r2
 81035ba:	005b      	lsls	r3, r3, #1
 81035bc:	4413      	add	r3, r2
 81035be:	009b      	lsls	r3, r3, #2
 81035c0:	440b      	add	r3, r1
 81035c2:	681b      	ldr	r3, [r3, #0]
        {
            BitWidthType numOfHandlers;
            CosmOS_GenericVoidType * handlers;


            handlers = sysJobs_getSysJobsGroupHandlers( sysJobsVar, groupIterator );
 81035c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 81035c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81035c8:	623b      	str	r3, [r7, #32]
 81035ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81035cc:	61fb      	str	r3, [r7, #28]
    return (sysJobs->cfg->groups[groupId].numOfHandlers);
 81035ce:	6a3b      	ldr	r3, [r7, #32]
 81035d0:	681b      	ldr	r3, [r3, #0]
 81035d2:	6819      	ldr	r1, [r3, #0]
 81035d4:	69fa      	ldr	r2, [r7, #28]
 81035d6:	4613      	mov	r3, r2
 81035d8:	005b      	lsls	r3, r3, #1
 81035da:	4413      	add	r3, r2
 81035dc:	009b      	lsls	r3, r3, #2
 81035de:	440b      	add	r3, r1
 81035e0:	685b      	ldr	r3, [r3, #4]
            numOfHandlers = sysJobs_getSysJobsGroupNumOfHandlers( sysJobsVar, groupIterator );
 81035e2:	63bb      	str	r3, [r7, #56]	; 0x38

            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 81035e4:	2300      	movs	r3, #0
 81035e6:	65bb      	str	r3, [r7, #88]	; 0x58
 81035e8:	e008      	b.n	81035fc <sysJobs_dispatcher+0xba>
            {
                handlers[handlerIterator]();
 81035ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81035ec:	009b      	lsls	r3, r3, #2
 81035ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 81035f0:	4413      	add	r3, r2
 81035f2:	681b      	ldr	r3, [r3, #0]
 81035f4:	4798      	blx	r3
            for ( BitWidthType handlerIterator = 0; handlerIterator < numOfHandlers; handlerIterator++ )
 81035f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81035f8:	3301      	adds	r3, #1
 81035fa:	65bb      	str	r3, [r7, #88]	; 0x58
 81035fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 81035fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103600:	429a      	cmp	r2, r3
 8103602:	d3f2      	bcc.n	81035ea <sysJobs_dispatcher+0xa8>
    for ( BitWidthType groupIterator = 0; groupIterator < numOfGroups; groupIterator++ )
 8103604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8103606:	3301      	adds	r3, #1
 8103608:	65fb      	str	r3, [r7, #92]	; 0x5c
 810360a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 810360c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810360e:	429a      	cmp	r2, r3
 8103610:	d3b1      	bcc.n	8103576 <sysJobs_dispatcher+0x34>
 8103612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103614:	60bb      	str	r3, [r7, #8]
    return (sysJobs->cfg->hyperTick);
 8103616:	68bb      	ldr	r3, [r7, #8]
 8103618:	681b      	ldr	r3, [r3, #0]
 810361a:	689b      	ldr	r3, [r3, #8]
            }
        }
    }

    hyperTick = sysJobs_getSysJobsHyperTick( sysJobsVar );
 810361c:	647b      	str	r3, [r7, #68]	; 0x44

    sysJobsCurrentTick = ( ( sysJobsCurrentTick + 1 ) % hyperTick );
 810361e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103620:	3301      	adds	r3, #1
 8103622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8103624:	fbb3 f2f2 	udiv	r2, r3, r2
 8103628:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810362a:	fb01 f202 	mul.w	r2, r1, r2
 810362e:	1a9b      	subs	r3, r3, r2
 8103630:	64fb      	str	r3, [r7, #76]	; 0x4c
 8103632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8103634:	613b      	str	r3, [r7, #16]
 8103636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8103638:	60fb      	str	r3, [r7, #12]
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void sysJobs_setSysJobsCurrentTick(CosmOS_SysJobsVariableType * sysJobs, BitWidthType currentTickParam)
{
    sysJobs->currentTick = currentTickParam;
 810363a:	693b      	ldr	r3, [r7, #16]
 810363c:	68fa      	ldr	r2, [r7, #12]
 810363e:	605a      	str	r2, [r3, #4]
}
 8103640:	bf00      	nop
    sysJobs_setSysJobsCurrentTick( sysJobsVar, sysJobsCurrentTick );

	__SUPRESS_UNUSED_VAR(entityId);

};
 8103642:	bf00      	nop
 8103644:	3760      	adds	r7, #96	; 0x60
 8103646:	46bd      	mov	sp, r7
 8103648:	bd80      	pop	{r7, pc}
	...

0810364c <thread_sleepMsInternal>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SleepStateType thread_sleepMsInternal(BitWidthType entityId, CosmOS_CoreVariableType * coreVar, BitWidthType tickCount)
{
 810364c:	b480      	push	{r7}
 810364e:	b093      	sub	sp, #76	; 0x4c
 8103650:	af00      	add	r7, sp, #0
 8103652:	60f8      	str	r0, [r7, #12]
 8103654:	60b9      	str	r1, [r7, #8]
 8103656:	607a      	str	r2, [r7, #4]
 8103658:	68bb      	ldr	r3, [r7, #8]
 810365a:	613b      	str	r3, [r7, #16]
    return (core->schedulableInExecution);
 810365c:	693b      	ldr	r3, [r7, #16]
 810365e:	685b      	ldr	r3, [r3, #4]

	CosmOS_AlarmVariableType * alarmVar;
    CosmOS_SchedulableVariableType * schedulableVar;


	schedulableVar = core_getCoreSchedulableInExecution(coreVar);
 8103660:	647b      	str	r3, [r7, #68]	; 0x44
 8103662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8103664:	617b      	str	r3, [r7, #20]
    return (schedulable->cfg->alarmId);
 8103666:	697b      	ldr	r3, [r7, #20]
 8103668:	681b      	ldr	r3, [r3, #0]
 810366a:	6a1b      	ldr	r3, [r3, #32]

	alarmId = schedulable_getAlarmId(schedulableVar);
 810366c:	643b      	str	r3, [r7, #64]	; 0x40
 810366e:	68bb      	ldr	r3, [r7, #8]
 8103670:	61fb      	str	r3, [r7, #28]
 8103672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8103674:	61bb      	str	r3, [r7, #24]
    return (&(core->alarmVars[alarmId]));
 8103676:	69fb      	ldr	r3, [r7, #28]
 8103678:	6a19      	ldr	r1, [r3, #32]
 810367a:	69ba      	ldr	r2, [r7, #24]
 810367c:	4613      	mov	r3, r2
 810367e:	005b      	lsls	r3, r3, #1
 8103680:	4413      	add	r3, r2
 8103682:	009b      	lsls	r3, r3, #2
 8103684:	440b      	add	r3, r1
	alarmVar = core_getAlarmVar(coreVar, alarmId);
 8103686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8103688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810368a:	627b      	str	r3, [r7, #36]	; 0x24
 810368c:	2303      	movs	r3, #3
 810368e:	623b      	str	r3, [r7, #32]
    schedulable->state = stateParam;
 8103690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103692:	6a3a      	ldr	r2, [r7, #32]
 8103694:	605a      	str	r2, [r3, #4]
}
 8103696:	bf00      	nop
 8103698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810369a:	62fb      	str	r3, [r7, #44]	; 0x2c
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	62bb      	str	r3, [r7, #40]	; 0x28
    alarm->tickCount = tickCountParam;
 81036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81036a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 81036a4:	609a      	str	r2, [r3, #8]
}
 81036a6:	bf00      	nop
 81036a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81036aa:	637b      	str	r3, [r7, #52]	; 0x34
 81036ac:	f04f 33ff 	mov.w	r3, #4294967295
 81036b0:	633b      	str	r3, [r7, #48]	; 0x30
    alarm->state = stateParam;
 81036b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81036b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 81036b6:	605a      	str	r2, [r3, #4]
}
 81036b8:	bf00      	nop

	schedulable_setState(schedulableVar, SCHEDULABLE_STATE_ENUM__SLEEP);
	alarm_setAlarmTickCount(alarmVar,tickCount);
	alarm_setAlarmState(alarmVar,ALARM_STATE_ENUM__ACTIVATED);

	sleepStateReturn = SLEEP_STATE_ENUM__OK;
 81036ba:	2303      	movs	r3, #3
 81036bc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 81036c0:	4b07      	ldr	r3, [pc, #28]	; (81036e0 <thread_sleepMsInternal+0x94>)
 81036c2:	685b      	ldr	r3, [r3, #4]
 81036c4:	4a06      	ldr	r2, [pc, #24]	; (81036e0 <thread_sleepMsInternal+0x94>)
 81036c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 81036ca:	6053      	str	r3, [r2, #4]
}
 81036cc:	bf00      	nop

	CILinterrupt_contextSwitchRoutineTrigger();

	return sleepStateReturn;
 81036ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
	__SUPRESS_UNUSED_VAR(entityId);
};
 81036d2:	4618      	mov	r0, r3
 81036d4:	374c      	adds	r7, #76	; 0x4c
 81036d6:	46bd      	mov	sp, r7
 81036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036dc:	4770      	bx	lr
 81036de:	bf00      	nop
 81036e0:	e000ed00 	.word	0xe000ed00

081036e4 <thread_sleepMs>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SleepStateType thread_sleepMs(BitWidthType delayMs)
{
 81036e4:	b590      	push	{r4, r7, lr}
 81036e6:	b08d      	sub	sp, #52	; 0x34
 81036e8:	af00      	add	r7, sp, #0
 81036ea:	6078      	str	r0, [r7, #4]

	CosmOS_CoreVariableType * coreVar;
    CosmOS_SchedulableVariableType * schedulableVar;


	if ( delayMs )
 81036ec:	687b      	ldr	r3, [r7, #4]
 81036ee:	2b00      	cmp	r3, #0
 81036f0:	d050      	beq.n	8103794 <thread_sleepMs+0xb0>
	{
		coreVar = core_getCoreVar();
 81036f2:	f7fe fc4a 	bl	8101f8a <core_getCoreVar>
 81036f6:	62b8      	str	r0, [r7, #40]	; 0x28
 81036f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81036fa:	613b      	str	r3, [r7, #16]
    return (core->cfg->msToTicks);
 81036fc:	693b      	ldr	r3, [r7, #16]
 81036fe:	681b      	ldr	r3, [r3, #0]
 8103700:	6a5b      	ldr	r3, [r3, #36]	; 0x24

		msToTicks = core_getMsToTicks(coreVar);
 8103702:	627b      	str	r3, [r7, #36]	; 0x24
 8103704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103706:	617b      	str	r3, [r7, #20]
    return (core->schedulableInExecution);
 8103708:	697b      	ldr	r3, [r7, #20]
 810370a:	685b      	ldr	r3, [r3, #4]

		schedulableVar = core_getCoreSchedulableInExecution(coreVar);
 810370c:	623b      	str	r3, [r7, #32]
 810370e:	6a3b      	ldr	r3, [r7, #32]
 8103710:	61bb      	str	r3, [r7, #24]
    return (schedulable->cfg->instanceType);
 8103712:	69bb      	ldr	r3, [r7, #24]
 8103714:	681b      	ldr	r3, [r3, #0]
 8103716:	685b      	ldr	r3, [r3, #4]
		schedulableInstanceType = schedulable_getInstanceType(schedulableVar);
 8103718:	61fb      	str	r3, [r7, #28]

		if (schedulableInstanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD)
 810371a:	69fb      	ldr	r3, [r7, #28]
 810371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8103720:	d134      	bne.n	810378c <thread_sleepMs+0xa8>
		{
			if ( __MUL_OVERFLOW(delayMs,msToTicks,&tickCount) )
 8103722:	2400      	movs	r4, #0
 8103724:	687a      	ldr	r2, [r7, #4]
 8103726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103728:	fba2 0103 	umull	r0, r1, r2, r3
 810372c:	f04f 0200 	mov.w	r2, #0
 8103730:	f04f 0300 	mov.w	r3, #0
 8103734:	000a      	movs	r2, r1
 8103736:	2300      	movs	r3, #0
 8103738:	2a00      	cmp	r2, #0
 810373a:	d000      	beq.n	810373e <thread_sleepMs+0x5a>
 810373c:	2401      	movs	r4, #1
 810373e:	4603      	mov	r3, r0
 8103740:	60fb      	str	r3, [r7, #12]
 8103742:	4623      	mov	r3, r4
 8103744:	f003 0301 	and.w	r3, r3, #1
 8103748:	b2db      	uxtb	r3, r3
 810374a:	2b00      	cmp	r3, #0
 810374c:	d003      	beq.n	8103756 <thread_sleepMs+0x72>
			{
				sleepStateReturn = SLEEP_STATE_ENUM__ERROR_EXCEEDING_MAX;
 810374e:	2301      	movs	r3, #1
 8103750:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8103754:	e021      	b.n	810379a <thread_sleepMs+0xb6>
			}
			else
			{
				if ( __ADD_OVERFLOW(tickCount,(BitWidthType)1,&tickCount) )
 8103756:	68fb      	ldr	r3, [r7, #12]
 8103758:	2100      	movs	r1, #0
 810375a:	2201      	movs	r2, #1
 810375c:	189b      	adds	r3, r3, r2
 810375e:	d300      	bcc.n	8103762 <thread_sleepMs+0x7e>
 8103760:	2101      	movs	r1, #1
 8103762:	60fb      	str	r3, [r7, #12]
 8103764:	460b      	mov	r3, r1
 8103766:	f003 0301 	and.w	r3, r3, #1
 810376a:	b2db      	uxtb	r3, r3
 810376c:	2b00      	cmp	r3, #0
 810376e:	d003      	beq.n	8103778 <thread_sleepMs+0x94>
				{
					sleepStateReturn = SLEEP_STATE_ENUM__ERROR_EXCEEDING_MAX;
 8103770:	2301      	movs	r3, #1
 8103772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8103776:	e010      	b.n	810379a <thread_sleepMs+0xb6>
				}
				else
				{
					sleepStateReturn = cosmosApiInternal_thread_sleepMsInternal(coreVar, tickCount);
 8103778:	68fb      	ldr	r3, [r7, #12]
 810377a:	461a      	mov	r2, r3
 810377c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810377e:	2015      	movs	r0, #21
 8103780:	f7ff febf 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 8103784:	4603      	mov	r3, r0
 8103786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 810378a:	e006      	b.n	810379a <thread_sleepMs+0xb6>
				}
			}
		}
		else
		{
			sleepStateReturn = SLEEP_STATE_ENUM__ERROR_ONLY_THREADS_CAN_SLEEP;
 810378c:	2300      	movs	r3, #0
 810378e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8103792:	e002      	b.n	810379a <thread_sleepMs+0xb6>
		}
	}
	else
	{
		sleepStateReturn = SLEEP_STATE_ENUM__ERROR_MIN;
 8103794:	2302      	movs	r3, #2
 8103796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	return sleepStateReturn;
 810379a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
};
 810379e:	4618      	mov	r0, r3
 81037a0:	3734      	adds	r7, #52	; 0x34
 81037a2:	46bd      	mov	sp, r7
 81037a4:	bd90      	pop	{r4, r7, pc}
 81037a6:	bf00      	nop

081037a8 <CILcore_getCoreId>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILcore_getCoreId(void)
{
 81037a8:	b580      	push	{r7, lr}
 81037aa:	af00      	add	r7, sp, #0
    return (HAL_GetCurrentCPUID() == CM7_CPUID) ? CORE_0_ID : CORE_1_ID;
 81037ac:	f006 f98a 	bl	8109ac4 <HAL_GetCurrentCPUID>
 81037b0:	4603      	mov	r3, r0
 81037b2:	2b03      	cmp	r3, #3
 81037b4:	bf14      	ite	ne
 81037b6:	2301      	movne	r3, #1
 81037b8:	2300      	moveq	r3, #0
 81037ba:	b2db      	uxtb	r3, r3
}
 81037bc:	4618      	mov	r0, r3
 81037be:	bd80      	pop	{r7, pc}

081037c0 <CILcore_setCoreVar>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILcore_setCoreVar(CosmOS_OsVariableType * osVar)
{
 81037c0:	b580      	push	{r7, lr}
 81037c2:	b08a      	sub	sp, #40	; 0x28
 81037c4:	af00      	add	r7, sp, #0
 81037c6:	6078      	str	r0, [r7, #4]
    BitWidthType coreId,
                numberOfCores;

    CosmOS_CoreVariableType * coreVar;

    coreId = CILcore_getCoreId();
 81037c8:	f7ff ffee 	bl	81037a8 <CILcore_getCoreId>
 81037cc:	6278      	str	r0, [r7, #36]	; 0x24
 81037ce:	687b      	ldr	r3, [r7, #4]
 81037d0:	60fb      	str	r3, [r7, #12]
    return (osVar->cfg->numberOfCores);
 81037d2:	68fb      	ldr	r3, [r7, #12]
 81037d4:	681b      	ldr	r3, [r3, #0]
 81037d6:	685b      	ldr	r3, [r3, #4]
    numberOfCores = os_getOsNumberOfCores( osVar );
 81037d8:	623b      	str	r3, [r7, #32]

    cosmosAssert( coreId < numberOfCores );
 81037da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81037dc:	6a3b      	ldr	r3, [r7, #32]
 81037de:	429a      	cmp	r2, r3
 81037e0:	bf34      	ite	cc
 81037e2:	2301      	movcc	r3, #1
 81037e4:	2300      	movcs	r3, #0
 81037e6:	b2db      	uxtb	r3, r3
 81037e8:	613b      	str	r3, [r7, #16]
    if ( IS_NOT( result ) )
 81037ea:	693b      	ldr	r3, [r7, #16]
 81037ec:	2b00      	cmp	r3, #0
 81037ee:	d101      	bne.n	81037f4 <CILcore_setCoreVar+0x34>
        os_kernelPanic();
 81037f0:	f7fe ff56 	bl	81026a0 <os_kernelPanic>
}
 81037f4:	bf00      	nop
 81037f6:	687b      	ldr	r3, [r7, #4]
 81037f8:	61bb      	str	r3, [r7, #24]
 81037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81037fc:	617b      	str	r3, [r7, #20]
    return (&(osVar->coreVars[coreId]));
 81037fe:	69bb      	ldr	r3, [r7, #24]
 8103800:	6859      	ldr	r1, [r3, #4]
 8103802:	697a      	ldr	r2, [r7, #20]
 8103804:	4613      	mov	r3, r2
 8103806:	00db      	lsls	r3, r3, #3
 8103808:	4413      	add	r3, r2
 810380a:	009b      	lsls	r3, r3, #2
 810380c:	440b      	add	r3, r1

    coreVar = os_getCoreVar( osVar, coreId );
 810380e:	61fb      	str	r3, [r7, #28]

    //must be changed, not valid for all compilers
    __asm volatile("MOV R9,%[coreVariable]" : [coreVariable] "=r" (coreVar));
 8103810:	4699      	mov	r9, r3
 8103812:	61fb      	str	r3, [r7, #28]
}
 8103814:	bf00      	nop
 8103816:	3728      	adds	r7, #40	; 0x28
 8103818:	46bd      	mov	sp, r7
 810381a:	bd80      	pop	{r7, pc}

0810381c <CILGPIO_togglePin>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILGPIO_togglePin(void *GPIOx, BitWidthType GPIO_Pin)
{
 810381c:	b580      	push	{r7, lr}
 810381e:	b082      	sub	sp, #8
 8103820:	af00      	add	r7, sp, #0
 8103822:	6078      	str	r0, [r7, #4]
 8103824:	6039      	str	r1, [r7, #0]
    HAL_GPIO_TogglePin( GPIOx, (uint16_t)GPIO_Pin );
 8103826:	683b      	ldr	r3, [r7, #0]
 8103828:	b29b      	uxth	r3, r3
 810382a:	4619      	mov	r1, r3
 810382c:	6878      	ldr	r0, [r7, #4]
 810382e:	f006 ff3c 	bl	810a6aa <HAL_GPIO_TogglePin>
}
 8103832:	bf00      	nop
 8103834:	3708      	adds	r7, #8
 8103836:	46bd      	mov	sp, r7
 8103838:	bd80      	pop	{r7, pc}
	...

0810383c <CILmemoryProtection_init>:
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_init(AddressType codeMemoryHighAddress,\
												AddressType codeMemoryLowAddress, \
												AddressType stackMemoryHighAddress, \
												AddressType stackMemoryLowAddress)
{
 810383c:	b580      	push	{r7, lr}
 810383e:	b090      	sub	sp, #64	; 0x40
 8103840:	af00      	add	r7, sp, #0
 8103842:	60f8      	str	r0, [r7, #12]
 8103844:	60b9      	str	r1, [r7, #8]
 8103846:	607a      	str	r2, [r7, #4]
 8103848:	603b      	str	r3, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 810384a:	f107 0310 	add.w	r3, r7, #16
 810384e:	2200      	movs	r2, #0
 8103850:	601a      	str	r2, [r3, #0]
 8103852:	605a      	str	r2, [r3, #4]
 8103854:	609a      	str	r2, [r3, #8]
 8103856:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8103858:	f006 f8b8 	bl	81099cc <HAL_MPU_Disable>
    //MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
    //MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
    //MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

	//TODO: Patched cause MPU should take in count whole FLASH - functions from the routes are used from the local core flash bank which booted the os consts to RAM
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 810385c:	2301      	movs	r3, #1
 810385e:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8103860:	2300      	movs	r3, #0
 8103862:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = 0x08000000;
 8103864:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8103868:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = MPU_REGION_SIZE_2MB;
 810386a:	2314      	movs	r3, #20
 810386c:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 810386e:	2300      	movs	r3, #0
 8103870:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8103872:	2301      	movs	r3, #1
 8103874:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8103876:	2306      	movs	r3, #6
 8103878:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 810387a:	2300      	movs	r3, #0
 810387c:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 810387e:	2301      	movs	r3, #1
 8103880:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8103882:	2301      	movs	r3, #1
 8103884:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103886:	2301      	movs	r3, #1
 8103888:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 810388a:	f107 0310 	add.w	r3, r7, #16
 810388e:	4618      	mov	r0, r3
 8103890:	f006 f8d4 	bl	8109a3c <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103894:	2301      	movs	r3, #1
 8103896:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8103898:	2301      	movs	r3, #1
 810389a:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = stackMemoryLowAddress;
 810389c:	683b      	ldr	r3, [r7, #0]
 810389e:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( stackMemoryHighAddress - stackMemoryLowAddress )));
 81038a0:	687a      	ldr	r2, [r7, #4]
 81038a2:	683b      	ldr	r3, [r7, #0]
 81038a4:	1ad3      	subs	r3, r2, r3
 81038a6:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 1;
 81038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81038aa:	085b      	lsrs	r3, r3, #1
 81038ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81038ae:	4313      	orrs	r3, r2
 81038b0:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 2;
 81038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81038b4:	089b      	lsrs	r3, r3, #2
 81038b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81038b8:	4313      	orrs	r3, r2
 81038ba:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 4;
 81038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81038be:	091b      	lsrs	r3, r3, #4
 81038c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81038c2:	4313      	orrs	r3, r2
 81038c4:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 8;
 81038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81038c8:	0a1b      	lsrs	r3, r3, #8
 81038ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81038cc:	4313      	orrs	r3, r2
 81038ce:	627b      	str	r3, [r7, #36]	; 0x24
    size |= size >> 16;
 81038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81038d2:	0c1b      	lsrs	r3, r3, #16
 81038d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 81038d6:	4313      	orrs	r3, r2
 81038d8:	627b      	str	r3, [r7, #36]	; 0x24
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 81038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81038dc:	4a77      	ldr	r2, [pc, #476]	; (8103abc <CILmemoryProtection_init+0x280>)
 81038de:	fb02 f303 	mul.w	r3, r2, r3
 81038e2:	0edb      	lsrs	r3, r3, #27
 81038e4:	4a76      	ldr	r2, [pc, #472]	; (8103ac0 <CILmemoryProtection_init+0x284>)
 81038e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81038ea:	623b      	str	r3, [r7, #32]
    return (result-1);
 81038ec:	6a3b      	ldr	r3, [r7, #32]
 81038ee:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( stackMemoryHighAddress - stackMemoryLowAddress )));
 81038f0:	b2db      	uxtb	r3, r3
 81038f2:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 81038f4:	2300      	movs	r3, #0
 81038f6:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 81038f8:	2301      	movs	r3, #1
 81038fa:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 81038fc:	2302      	movs	r3, #2
 81038fe:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103900:	2300      	movs	r3, #0
 8103902:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103904:	2301      	movs	r3, #1
 8103906:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8103908:	2301      	movs	r3, #1
 810390a:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 810390c:	2301      	movs	r3, #1
 810390e:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103910:	f107 0310 	add.w	r3, r7, #16
 8103914:	4618      	mov	r0, r3
 8103916:	f006 f891 	bl	8109a3c <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 810391a:	2301      	movs	r3, #1
 810391c:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 810391e:	2302      	movs	r3, #2
 8103920:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress =  (BitWidthType)_s_os_section_consts;
 8103922:	4b68      	ldr	r3, [pc, #416]	; (8103ac4 <CILmemoryProtection_init+0x288>)
 8103924:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8103926:	4a68      	ldr	r2, [pc, #416]	; (8103ac8 <CILmemoryProtection_init+0x28c>)
 8103928:	4b66      	ldr	r3, [pc, #408]	; (8103ac4 <CILmemoryProtection_init+0x288>)
 810392a:	1ad3      	subs	r3, r2, r3
 810392c:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 1;
 810392e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103930:	085b      	lsrs	r3, r3, #1
 8103932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103934:	4313      	orrs	r3, r2
 8103936:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 2;
 8103938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810393a:	089b      	lsrs	r3, r3, #2
 810393c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810393e:	4313      	orrs	r3, r2
 8103940:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 4;
 8103942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103944:	091b      	lsrs	r3, r3, #4
 8103946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103948:	4313      	orrs	r3, r2
 810394a:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 8;
 810394c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810394e:	0a1b      	lsrs	r3, r3, #8
 8103950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8103952:	4313      	orrs	r3, r2
 8103954:	62fb      	str	r3, [r7, #44]	; 0x2c
    size |= size >> 16;
 8103956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103958:	0c1b      	lsrs	r3, r3, #16
 810395a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810395c:	4313      	orrs	r3, r2
 810395e:	62fb      	str	r3, [r7, #44]	; 0x2c
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103962:	4a56      	ldr	r2, [pc, #344]	; (8103abc <CILmemoryProtection_init+0x280>)
 8103964:	fb02 f303 	mul.w	r3, r2, r3
 8103968:	0edb      	lsrs	r3, r3, #27
 810396a:	4a55      	ldr	r2, [pc, #340]	; (8103ac0 <CILmemoryProtection_init+0x284>)
 810396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103970:	62bb      	str	r3, [r7, #40]	; 0x28
    return (result-1);
 8103972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103974:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)( _e_os_section_consts - _s_os_section_consts )));
 8103976:	b2db      	uxtb	r3, r3
 8103978:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 810397a:	2300      	movs	r3, #0
 810397c:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 810397e:	2301      	movs	r3, #1
 8103980:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RO_URO;
 8103982:	2306      	movs	r3, #6
 8103984:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103986:	2300      	movs	r3, #0
 8103988:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 810398a:	2301      	movs	r3, #1
 810398c:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 810398e:	2301      	movs	r3, #1
 8103990:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103992:	2301      	movs	r3, #1
 8103994:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103996:	f107 0310 	add.w	r3, r7, #16
 810399a:	4618      	mov	r0, r3
 810399c:	f006 f84e 	bl	8109a3c <HAL_MPU_ConfigRegion>

    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 81039a0:	2301      	movs	r3, #1
 81039a2:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 81039a4:	2303      	movs	r3, #3
 81039a6:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_os_section_vars;
 81039a8:	4b48      	ldr	r3, [pc, #288]	; (8103acc <CILmemoryProtection_init+0x290>)
 81039aa:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 81039ac:	4a48      	ldr	r2, [pc, #288]	; (8103ad0 <CILmemoryProtection_init+0x294>)
 81039ae:	4b47      	ldr	r3, [pc, #284]	; (8103acc <CILmemoryProtection_init+0x290>)
 81039b0:	1ad3      	subs	r3, r2, r3
 81039b2:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 1;
 81039b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81039b6:	085b      	lsrs	r3, r3, #1
 81039b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81039ba:	4313      	orrs	r3, r2
 81039bc:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 2;
 81039be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81039c0:	089b      	lsrs	r3, r3, #2
 81039c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81039c4:	4313      	orrs	r3, r2
 81039c6:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 4;
 81039c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81039ca:	091b      	lsrs	r3, r3, #4
 81039cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81039ce:	4313      	orrs	r3, r2
 81039d0:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 8;
 81039d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81039d4:	0a1b      	lsrs	r3, r3, #8
 81039d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81039d8:	4313      	orrs	r3, r2
 81039da:	637b      	str	r3, [r7, #52]	; 0x34
    size |= size >> 16;
 81039dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81039de:	0c1b      	lsrs	r3, r3, #16
 81039e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81039e2:	4313      	orrs	r3, r2
 81039e4:	637b      	str	r3, [r7, #52]	; 0x34
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 81039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81039e8:	4a34      	ldr	r2, [pc, #208]	; (8103abc <CILmemoryProtection_init+0x280>)
 81039ea:	fb02 f303 	mul.w	r3, r2, r3
 81039ee:	0edb      	lsrs	r3, r3, #27
 81039f0:	4a33      	ldr	r2, [pc, #204]	; (8103ac0 <CILmemoryProtection_init+0x284>)
 81039f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81039f6:	633b      	str	r3, [r7, #48]	; 0x30
    return (result-1);
 81039f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81039fa:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_os_section_vars - _s_os_section_vars )));
 81039fc:	b2db      	uxtb	r3, r3
 81039fe:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103a00:	2300      	movs	r3, #0
 8103a02:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8103a04:	2301      	movs	r3, #1
 8103a06:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_PRIV_RW_URO;
 8103a08:	2302      	movs	r3, #2
 8103a0a:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103a0c:	2300      	movs	r3, #0
 8103a0e:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103a10:	2301      	movs	r3, #1
 8103a12:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8103a14:	2300      	movs	r3, #0
 8103a16:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8103a18:	2300      	movs	r3, #0
 8103a1a:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103a1c:	f107 0310 	add.w	r3, r7, #16
 8103a20:	4618      	mov	r0, r3
 8103a22:	f006 f80b 	bl	8109a3c <HAL_MPU_ConfigRegion>

	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103a26:	2301      	movs	r3, #1
 8103a28:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8103a2a:	2304      	movs	r3, #4
 8103a2c:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.BaseAddress = (BitWidthType)_s_unprotected_section;
 8103a2e:	4b29      	ldr	r3, [pc, #164]	; (8103ad4 <CILmemoryProtection_init+0x298>)
 8103a30:	617b      	str	r3, [r7, #20]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_unprotected_section - _s_unprotected_section )));
 8103a32:	4a29      	ldr	r2, [pc, #164]	; (8103ad8 <CILmemoryProtection_init+0x29c>)
 8103a34:	4b27      	ldr	r3, [pc, #156]	; (8103ad4 <CILmemoryProtection_init+0x298>)
 8103a36:	1ad3      	subs	r3, r2, r3
 8103a38:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 1;
 8103a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103a3c:	085b      	lsrs	r3, r3, #1
 8103a3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103a40:	4313      	orrs	r3, r2
 8103a42:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 2;
 8103a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103a46:	089b      	lsrs	r3, r3, #2
 8103a48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103a4a:	4313      	orrs	r3, r2
 8103a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 4;
 8103a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103a50:	091b      	lsrs	r3, r3, #4
 8103a52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103a54:	4313      	orrs	r3, r2
 8103a56:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 8;
 8103a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103a5a:	0a1b      	lsrs	r3, r3, #8
 8103a5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103a5e:	4313      	orrs	r3, r2
 8103a60:	63fb      	str	r3, [r7, #60]	; 0x3c
    size |= size >> 16;
 8103a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103a64:	0c1b      	lsrs	r3, r3, #16
 8103a66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8103a68:	4313      	orrs	r3, r2
 8103a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8103a6e:	4a13      	ldr	r2, [pc, #76]	; (8103abc <CILmemoryProtection_init+0x280>)
 8103a70:	fb02 f303 	mul.w	r3, r2, r3
 8103a74:	0edb      	lsrs	r3, r3, #27
 8103a76:	4a12      	ldr	r2, [pc, #72]	; (8103ac0 <CILmemoryProtection_init+0x284>)
 8103a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103a7c:	63bb      	str	r3, [r7, #56]	; 0x38
    return (result-1);
 8103a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8103a80:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( (BitWidthType)(_e_unprotected_section - _s_unprotected_section )));
 8103a82:	b2db      	uxtb	r3, r3
 8103a84:	763b      	strb	r3, [r7, #24]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103a86:	2300      	movs	r3, #0
 8103a88:	767b      	strb	r3, [r7, #25]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8103a8a:	2301      	movs	r3, #1
 8103a8c:	76bb      	strb	r3, [r7, #26]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8103a8e:	2303      	movs	r3, #3
 8103a90:	76fb      	strb	r3, [r7, #27]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8103a92:	2301      	movs	r3, #1
 8103a94:	773b      	strb	r3, [r7, #28]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103a96:	2301      	movs	r3, #1
 8103a98:	777b      	strb	r3, [r7, #29]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8103a9a:	2300      	movs	r3, #0
 8103a9c:	77bb      	strb	r3, [r7, #30]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8103a9e:	2300      	movs	r3, #0
 8103aa0:	77fb      	strb	r3, [r7, #31]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103aa2:	f107 0310 	add.w	r3, r7, #16
 8103aa6:	4618      	mov	r0, r3
 8103aa8:	f005 ffc8 	bl	8109a3c <HAL_MPU_ConfigRegion>

    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8103aac:	2006      	movs	r0, #6
 8103aae:	f005 ffa5 	bl	81099fc <HAL_MPU_Enable>

	__SUPRESS_UNUSED_VAR(codeMemoryHighAddress);
	__SUPRESS_UNUSED_VAR(codeMemoryLowAddress);
}
 8103ab2:	bf00      	nop
 8103ab4:	3740      	adds	r7, #64	; 0x40
 8103ab6:	46bd      	mov	sp, r7
 8103ab8:	bd80      	pop	{r7, pc}
 8103aba:	bf00      	nop
 8103abc:	07c4acdd 	.word	0x07c4acdd
 8103ac0:	380007b4 	.word	0x380007b4
 8103ac4:	38000000 	.word	0x38000000
 8103ac8:	38001000 	.word	0x38001000
 8103acc:	38008000 	.word	0x38008000
 8103ad0:	38008800 	.word	0x38008800
 8103ad4:	30040000 	.word	0x30040000
 8103ad8:	30040400 	.word	0x30040400

08103adc <CILmemoryProtection_setStackOverflowProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setStackOverflowProtection(AddressType stackLowAddress, AddressType stackHighAddress)
{
 8103adc:	b580      	push	{r7, lr}
 8103ade:	b088      	sub	sp, #32
 8103ae0:	af00      	add	r7, sp, #0
 8103ae2:	6078      	str	r0, [r7, #4]
 8103ae4:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8103ae6:	f107 0308 	add.w	r3, r7, #8
 8103aea:	2200      	movs	r2, #0
 8103aec:	601a      	str	r2, [r3, #0]
 8103aee:	605a      	str	r2, [r3, #4]
 8103af0:	609a      	str	r2, [r3, #8]
 8103af2:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8103af4:	f005 ff6a 	bl	81099cc <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103af8:	2301      	movs	r3, #1
 8103afa:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER7;
 8103afc:	2307      	movs	r3, #7
 8103afe:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (stackLowAddress);
 8103b00:	687b      	ldr	r3, [r7, #4]
 8103b02:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8103b04:	683a      	ldr	r2, [r7, #0]
 8103b06:	687b      	ldr	r3, [r7, #4]
 8103b08:	1ad3      	subs	r3, r2, r3
 8103b0a:	61fb      	str	r3, [r7, #28]
    size |= size >> 1;
 8103b0c:	69fb      	ldr	r3, [r7, #28]
 8103b0e:	085b      	lsrs	r3, r3, #1
 8103b10:	69fa      	ldr	r2, [r7, #28]
 8103b12:	4313      	orrs	r3, r2
 8103b14:	61fb      	str	r3, [r7, #28]
    size |= size >> 2;
 8103b16:	69fb      	ldr	r3, [r7, #28]
 8103b18:	089b      	lsrs	r3, r3, #2
 8103b1a:	69fa      	ldr	r2, [r7, #28]
 8103b1c:	4313      	orrs	r3, r2
 8103b1e:	61fb      	str	r3, [r7, #28]
    size |= size >> 4;
 8103b20:	69fb      	ldr	r3, [r7, #28]
 8103b22:	091b      	lsrs	r3, r3, #4
 8103b24:	69fa      	ldr	r2, [r7, #28]
 8103b26:	4313      	orrs	r3, r2
 8103b28:	61fb      	str	r3, [r7, #28]
    size |= size >> 8;
 8103b2a:	69fb      	ldr	r3, [r7, #28]
 8103b2c:	0a1b      	lsrs	r3, r3, #8
 8103b2e:	69fa      	ldr	r2, [r7, #28]
 8103b30:	4313      	orrs	r3, r2
 8103b32:	61fb      	str	r3, [r7, #28]
    size |= size >> 16;
 8103b34:	69fb      	ldr	r3, [r7, #28]
 8103b36:	0c1b      	lsrs	r3, r3, #16
 8103b38:	69fa      	ldr	r2, [r7, #28]
 8103b3a:	4313      	orrs	r3, r2
 8103b3c:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103b3e:	69fb      	ldr	r3, [r7, #28]
 8103b40:	4a12      	ldr	r2, [pc, #72]	; (8103b8c <CILmemoryProtection_setStackOverflowProtection+0xb0>)
 8103b42:	fb02 f303 	mul.w	r3, r2, r3
 8103b46:	0edb      	lsrs	r3, r3, #27
 8103b48:	4a11      	ldr	r2, [pc, #68]	; (8103b90 <CILmemoryProtection_setStackOverflowProtection+0xb4>)
 8103b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103b4e:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8103b50:	69bb      	ldr	r3, [r7, #24]
 8103b52:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( stackHighAddress - stackLowAddress ));
 8103b54:	b2db      	uxtb	r3, r3
 8103b56:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103b58:	2300      	movs	r3, #0
 8103b5a:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8103b5c:	2301      	movs	r3, #1
 8103b5e:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8103b60:	2303      	movs	r3, #3
 8103b62:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103b64:	2300      	movs	r3, #0
 8103b66:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103b68:	2301      	movs	r3, #1
 8103b6a:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8103b6c:	2301      	movs	r3, #1
 8103b6e:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103b70:	2301      	movs	r3, #1
 8103b72:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103b74:	f107 0308 	add.w	r3, r7, #8
 8103b78:	4618      	mov	r0, r3
 8103b7a:	f005 ff5f 	bl	8109a3c <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8103b7e:	2006      	movs	r0, #6
 8103b80:	f005 ff3c 	bl	81099fc <HAL_MPU_Enable>
}
 8103b84:	bf00      	nop
 8103b86:	3720      	adds	r7, #32
 8103b88:	46bd      	mov	sp, r7
 8103b8a:	bd80      	pop	{r7, pc}
 8103b8c:	07c4acdd 	.word	0x07c4acdd
 8103b90:	380007b4 	.word	0x380007b4

08103b94 <CILmemoryProtection_setProgramMemoryProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setProgramMemoryProtection(AddressType lowAddress, AddressType highAddress)
{
 8103b94:	b580      	push	{r7, lr}
 8103b96:	b088      	sub	sp, #32
 8103b98:	af00      	add	r7, sp, #0
 8103b9a:	6078      	str	r0, [r7, #4]
 8103b9c:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8103b9e:	f107 0308 	add.w	r3, r7, #8
 8103ba2:	2200      	movs	r2, #0
 8103ba4:	601a      	str	r2, [r3, #0]
 8103ba6:	605a      	str	r2, [r3, #4]
 8103ba8:	609a      	str	r2, [r3, #8]
 8103baa:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8103bac:	f005 ff0e 	bl	81099cc <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103bb0:	2301      	movs	r3, #1
 8103bb2:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER6;
 8103bb4:	2306      	movs	r3, #6
 8103bb6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 8103bb8:	687b      	ldr	r3, [r7, #4]
 8103bba:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8103bbc:	683a      	ldr	r2, [r7, #0]
 8103bbe:	687b      	ldr	r3, [r7, #4]
 8103bc0:	1ad3      	subs	r3, r2, r3
 8103bc2:	61fb      	str	r3, [r7, #28]
    size |= size >> 1;
 8103bc4:	69fb      	ldr	r3, [r7, #28]
 8103bc6:	085b      	lsrs	r3, r3, #1
 8103bc8:	69fa      	ldr	r2, [r7, #28]
 8103bca:	4313      	orrs	r3, r2
 8103bcc:	61fb      	str	r3, [r7, #28]
    size |= size >> 2;
 8103bce:	69fb      	ldr	r3, [r7, #28]
 8103bd0:	089b      	lsrs	r3, r3, #2
 8103bd2:	69fa      	ldr	r2, [r7, #28]
 8103bd4:	4313      	orrs	r3, r2
 8103bd6:	61fb      	str	r3, [r7, #28]
    size |= size >> 4;
 8103bd8:	69fb      	ldr	r3, [r7, #28]
 8103bda:	091b      	lsrs	r3, r3, #4
 8103bdc:	69fa      	ldr	r2, [r7, #28]
 8103bde:	4313      	orrs	r3, r2
 8103be0:	61fb      	str	r3, [r7, #28]
    size |= size >> 8;
 8103be2:	69fb      	ldr	r3, [r7, #28]
 8103be4:	0a1b      	lsrs	r3, r3, #8
 8103be6:	69fa      	ldr	r2, [r7, #28]
 8103be8:	4313      	orrs	r3, r2
 8103bea:	61fb      	str	r3, [r7, #28]
    size |= size >> 16;
 8103bec:	69fb      	ldr	r3, [r7, #28]
 8103bee:	0c1b      	lsrs	r3, r3, #16
 8103bf0:	69fa      	ldr	r2, [r7, #28]
 8103bf2:	4313      	orrs	r3, r2
 8103bf4:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103bf6:	69fb      	ldr	r3, [r7, #28]
 8103bf8:	4a12      	ldr	r2, [pc, #72]	; (8103c44 <CILmemoryProtection_setProgramMemoryProtection+0xb0>)
 8103bfa:	fb02 f303 	mul.w	r3, r2, r3
 8103bfe:	0edb      	lsrs	r3, r3, #27
 8103c00:	4a11      	ldr	r2, [pc, #68]	; (8103c48 <CILmemoryProtection_setProgramMemoryProtection+0xb4>)
 8103c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103c06:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8103c08:	69bb      	ldr	r3, [r7, #24]
 8103c0a:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8103c0c:	b2db      	uxtb	r3, r3
 8103c0e:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103c10:	2300      	movs	r3, #0
 8103c12:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8103c14:	2301      	movs	r3, #1
 8103c16:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8103c18:	2303      	movs	r3, #3
 8103c1a:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8103c1c:	2300      	movs	r3, #0
 8103c1e:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103c20:	2301      	movs	r3, #1
 8103c22:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8103c24:	2301      	movs	r3, #1
 8103c26:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103c28:	2301      	movs	r3, #1
 8103c2a:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103c2c:	f107 0308 	add.w	r3, r7, #8
 8103c30:	4618      	mov	r0, r3
 8103c32:	f005 ff03 	bl	8109a3c <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8103c36:	2006      	movs	r0, #6
 8103c38:	f005 fee0 	bl	81099fc <HAL_MPU_Enable>
}
 8103c3c:	bf00      	nop
 8103c3e:	3720      	adds	r7, #32
 8103c40:	46bd      	mov	sp, r7
 8103c42:	bd80      	pop	{r7, pc}
 8103c44:	07c4acdd 	.word	0x07c4acdd
 8103c48:	380007b4 	.word	0x380007b4

08103c4c <CILmemoryProtection_setSchedulablePeripheralProtection>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILmemoryProtection_setSchedulablePeripheralProtection(AddressType lowAddress, AddressType highAddress)
{
 8103c4c:	b580      	push	{r7, lr}
 8103c4e:	b088      	sub	sp, #32
 8103c50:	af00      	add	r7, sp, #0
 8103c52:	6078      	str	r0, [r7, #4]
 8103c54:	6039      	str	r1, [r7, #0]
    MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8103c56:	f107 0308 	add.w	r3, r7, #8
 8103c5a:	2200      	movs	r2, #0
 8103c5c:	601a      	str	r2, [r3, #0]
 8103c5e:	605a      	str	r2, [r3, #4]
 8103c60:	609a      	str	r2, [r3, #8]
 8103c62:	60da      	str	r2, [r3, #12]

    HAL_MPU_Disable();
 8103c64:	f005 feb2 	bl	81099cc <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
    */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8103c68:	2301      	movs	r3, #1
 8103c6a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8103c6c:	2305      	movs	r3, #5
 8103c6e:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.BaseAddress = (lowAddress);
 8103c70:	687b      	ldr	r3, [r7, #4]
 8103c72:	60fb      	str	r3, [r7, #12]
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8103c74:	683a      	ldr	r2, [r7, #0]
 8103c76:	687b      	ldr	r3, [r7, #4]
 8103c78:	1ad3      	subs	r3, r2, r3
 8103c7a:	61fb      	str	r3, [r7, #28]
    size |= size >> 1;
 8103c7c:	69fb      	ldr	r3, [r7, #28]
 8103c7e:	085b      	lsrs	r3, r3, #1
 8103c80:	69fa      	ldr	r2, [r7, #28]
 8103c82:	4313      	orrs	r3, r2
 8103c84:	61fb      	str	r3, [r7, #28]
    size |= size >> 2;
 8103c86:	69fb      	ldr	r3, [r7, #28]
 8103c88:	089b      	lsrs	r3, r3, #2
 8103c8a:	69fa      	ldr	r2, [r7, #28]
 8103c8c:	4313      	orrs	r3, r2
 8103c8e:	61fb      	str	r3, [r7, #28]
    size |= size >> 4;
 8103c90:	69fb      	ldr	r3, [r7, #28]
 8103c92:	091b      	lsrs	r3, r3, #4
 8103c94:	69fa      	ldr	r2, [r7, #28]
 8103c96:	4313      	orrs	r3, r2
 8103c98:	61fb      	str	r3, [r7, #28]
    size |= size >> 8;
 8103c9a:	69fb      	ldr	r3, [r7, #28]
 8103c9c:	0a1b      	lsrs	r3, r3, #8
 8103c9e:	69fa      	ldr	r2, [r7, #28]
 8103ca0:	4313      	orrs	r3, r2
 8103ca2:	61fb      	str	r3, [r7, #28]
    size |= size >> 16;
 8103ca4:	69fb      	ldr	r3, [r7, #28]
 8103ca6:	0c1b      	lsrs	r3, r3, #16
 8103ca8:	69fa      	ldr	r2, [r7, #28]
 8103caa:	4313      	orrs	r3, r2
 8103cac:	61fb      	str	r3, [r7, #28]
    result = MultiplyDeBruijnBitPosition[(uint32_t)(size * 0x07C4ACDDU) >> 27];
 8103cae:	69fb      	ldr	r3, [r7, #28]
 8103cb0:	4a12      	ldr	r2, [pc, #72]	; (8103cfc <CILmemoryProtection_setSchedulablePeripheralProtection+0xb0>)
 8103cb2:	fb02 f303 	mul.w	r3, r2, r3
 8103cb6:	0edb      	lsrs	r3, r3, #27
 8103cb8:	4a11      	ldr	r2, [pc, #68]	; (8103d00 <CILmemoryProtection_setSchedulablePeripheralProtection+0xb4>)
 8103cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103cbe:	61bb      	str	r3, [r7, #24]
    return (result-1);
 8103cc0:	69bb      	ldr	r3, [r7, #24]
 8103cc2:	3b01      	subs	r3, #1
    MPU_InitStruct.Size = (CILmemoryProtection_fastLogBase2( highAddress - lowAddress ));
 8103cc4:	b2db      	uxtb	r3, r3
 8103cc6:	743b      	strb	r3, [r7, #16]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8103cc8:	2300      	movs	r3, #0
 8103cca:	747b      	strb	r3, [r7, #17]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8103ccc:	2300      	movs	r3, #0
 8103cce:	74bb      	strb	r3, [r7, #18]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8103cd0:	2303      	movs	r3, #3
 8103cd2:	74fb      	strb	r3, [r7, #19]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8103cd4:	2301      	movs	r3, #1
 8103cd6:	753b      	strb	r3, [r7, #20]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8103cd8:	2301      	movs	r3, #1
 8103cda:	757b      	strb	r3, [r7, #21]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8103cdc:	2300      	movs	r3, #0
 8103cde:	75bb      	strb	r3, [r7, #22]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8103ce0:	2301      	movs	r3, #1
 8103ce2:	75fb      	strb	r3, [r7, #23]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8103ce4:	f107 0308 	add.w	r3, r7, #8
 8103ce8:	4618      	mov	r0, r3
 8103cea:	f005 fea7 	bl	8109a3c <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_HFNMI_PRIVDEF);
 8103cee:	2006      	movs	r0, #6
 8103cf0:	f005 fe84 	bl	81099fc <HAL_MPU_Enable>
}
 8103cf4:	bf00      	nop
 8103cf6:	3720      	adds	r7, #32
 8103cf8:	46bd      	mov	sp, r7
 8103cfa:	bd80      	pop	{r7, pc}
 8103cfc:	07c4acdd 	.word	0x07c4acdd
 8103d00:	380007b4 	.word	0x380007b4

08103d04 <CILmutex_tryMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType CILmutex_tryMutex(AddressType * mutexPointer)
{
 8103d04:	b480      	push	{r7}
 8103d06:	b085      	sub	sp, #20
 8103d08:	af00      	add	r7, sp, #0
 8103d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8103d0c:	b672      	cpsid	i
}
 8103d0e:	bf00      	nop
    CosmOS_MutexStateType mutexState;

	__disable_irq();
	__asm volatile("MOV R1, #0x1");
 8103d10:	f04f 0101 	mov.w	r1, #1
	__asm volatile("LDR R3, [R0]");
 8103d14:	6803      	ldr	r3, [r0, #0]
	__asm volatile("CMP R3, #0");
 8103d16:	2b00      	cmp	r3, #0
	__asm volatile("ITTE EQ");
 8103d18:	bf06      	itte	eq
	__asm volatile("STREQ R1, [R0]");
 8103d1a:	6001      	streq	r1, [r0, #0]
	__asm volatile("MOVEQ R1, #0x2");
 8103d1c:	2102      	moveq	r1, #2
	__asm volatile("MOVNE R1, #0x1");
 8103d1e:	2101      	movne	r1, #1
	__asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );
 8103d20:	460b      	mov	r3, r1
 8103d22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8103d24:	b662      	cpsie	i
}
 8103d26:	bf00      	nop
	//__asm volatile("MOVNE R1, #0x1");
	//__asm volatile("MOVEQ R1, #0x2");
	//__asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );

	__SUPRESS_UNUSED_VAR(mutexPointer);
    return mutexState;
 8103d28:	68fb      	ldr	r3, [r7, #12]
}
 8103d2a:	4618      	mov	r0, r3
 8103d2c:	3714      	adds	r7, #20
 8103d2e:	46bd      	mov	sp, r7
 8103d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d34:	4770      	bx	lr

08103d36 <CILmutex_releaseMutex>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_MutexStateType CILmutex_releaseMutex(AddressType * mutexPointer)
{
 8103d36:	b480      	push	{r7}
 8103d38:	b085      	sub	sp, #20
 8103d3a:	af00      	add	r7, sp, #0
 8103d3c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8103d3e:	b672      	cpsid	i
}
 8103d40:	bf00      	nop
    CosmOS_MutexStateType mutexState;

	__disable_irq();
	__asm volatile("MOV R1, #0x0");
 8103d42:	f04f 0100 	mov.w	r1, #0
	__asm volatile("STR R1, [R0]");
 8103d46:	6001      	str	r1, [r0, #0]
    __asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );
 8103d48:	460b      	mov	r3, r1
 8103d4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8103d4c:	b662      	cpsie	i
}
 8103d4e:	bf00      	nop
	//__asm volatile("BNE tryUnlock");
	//__asm volatile("released:");
    //__asm volatile("MOV %[value], R1":  [value] "=r" (mutexState) );

	__SUPRESS_UNUSED_VAR(mutexPointer);
    return mutexState;
 8103d50:	68fb      	ldr	r3, [r7, #12]
}
 8103d52:	4618      	mov	r0, r3
 8103d54:	3714      	adds	r7, #20
 8103d56:	46bd      	mov	sp, r7
 8103d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103d5c:	4770      	bx	lr

08103d5e <CILspinlock_getSpinlock>:
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_getSpinlock(AddressType * spinlockPointer, \
																	BitWidthType spinlockId, \
																	BitWidthType schedulableId )
{
 8103d5e:	b580      	push	{r7, lr}
 8103d60:	b086      	sub	sp, #24
 8103d62:	af00      	add	r7, sp, #0
 8103d64:	60f8      	str	r0, [r7, #12]
 8103d66:	60b9      	str	r1, [r7, #8]
 8103d68:	607a      	str	r2, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	HAL_StatusTypeDef hsem_take_status;


	hsem_take_status = HAL_HSEM_Take(spinlockId, schedulableId);
 8103d6a:	6879      	ldr	r1, [r7, #4]
 8103d6c:	68b8      	ldr	r0, [r7, #8]
 8103d6e:	f006 fcb7 	bl	810a6e0 <HAL_HSEM_Take>
 8103d72:	4603      	mov	r3, r0
 8103d74:	75fb      	strb	r3, [r7, #23]
	while ( hsem_take_status IS_NOT_EQUAL_TO HAL_OK )
 8103d76:	e005      	b.n	8103d84 <CILspinlock_getSpinlock+0x26>
	{
		hsem_take_status = HAL_HSEM_Take(spinlockId, schedulableId);
 8103d78:	6879      	ldr	r1, [r7, #4]
 8103d7a:	68b8      	ldr	r0, [r7, #8]
 8103d7c:	f006 fcb0 	bl	810a6e0 <HAL_HSEM_Take>
 8103d80:	4603      	mov	r3, r0
 8103d82:	75fb      	strb	r3, [r7, #23]
	while ( hsem_take_status IS_NOT_EQUAL_TO HAL_OK )
 8103d84:	7dfb      	ldrb	r3, [r7, #23]
 8103d86:	2b00      	cmp	r3, #0
 8103d88:	d1f6      	bne.n	8103d78 <CILspinlock_getSpinlock+0x1a>
	}

	*spinlockPointer = 1;
 8103d8a:	68fb      	ldr	r3, [r7, #12]
 8103d8c:	2201      	movs	r2, #1
 8103d8e:	601a      	str	r2, [r3, #0]
	spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8103d90:	2302      	movs	r3, #2
 8103d92:	613b      	str	r3, [r7, #16]
	//__asm volatile("MOVEQ R1, #0x2");
	//__asm volatile("BNE tryLock");
    //__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
	//__SUPRESS_UNUSED_VAR(spinlockPointer);

    return spinlockState;
 8103d94:	693b      	ldr	r3, [r7, #16]
}
 8103d96:	4618      	mov	r0, r3
 8103d98:	3718      	adds	r7, #24
 8103d9a:	46bd      	mov	sp, r7
 8103d9c:	bd80      	pop	{r7, pc}

08103d9e <CILspinlock_trySpinlock>:
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_trySpinlock(AddressType * spinlockPointer, \
																	BitWidthType spinlockId, \
																	BitWidthType schedulableId )
{
 8103d9e:	b580      	push	{r7, lr}
 8103da0:	b086      	sub	sp, #24
 8103da2:	af00      	add	r7, sp, #0
 8103da4:	60f8      	str	r0, [r7, #12]
 8103da6:	60b9      	str	r1, [r7, #8]
 8103da8:	607a      	str	r2, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;

	HAL_StatusTypeDef hsem_take_status;


	hsem_take_status = HAL_HSEM_Take(spinlockId, schedulableId);
 8103daa:	6879      	ldr	r1, [r7, #4]
 8103dac:	68b8      	ldr	r0, [r7, #8]
 8103dae:	f006 fc97 	bl	810a6e0 <HAL_HSEM_Take>
 8103db2:	4603      	mov	r3, r0
 8103db4:	74fb      	strb	r3, [r7, #19]
	if ( hsem_take_status IS_EQUAL_TO HAL_OK)
 8103db6:	7cfb      	ldrb	r3, [r7, #19]
 8103db8:	2b00      	cmp	r3, #0
 8103dba:	d105      	bne.n	8103dc8 <CILspinlock_trySpinlock+0x2a>
	{
		*spinlockPointer = 1;
 8103dbc:	68fb      	ldr	r3, [r7, #12]
 8103dbe:	2201      	movs	r2, #1
 8103dc0:	601a      	str	r2, [r3, #0]
		spinlockState = SPINLOCK_STATE_ENUM__SUCCESSFULLY_LOCKED;
 8103dc2:	2302      	movs	r3, #2
 8103dc4:	617b      	str	r3, [r7, #20]
 8103dc6:	e001      	b.n	8103dcc <CILspinlock_trySpinlock+0x2e>
	}
	else
	{
		__SUPRESS_UNUSED_VAR(spinlockPointer);
		spinlockState = SPINLOCK_STATE_ENUM__OCCUPIED;
 8103dc8:	2301      	movs	r3, #1
 8103dca:	617b      	str	r3, [r7, #20]
	//__asm volatile("MOVNE R1, #0x1");
	//__asm volatile("MOVEQ R1, #0x2");
	//__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
	//__SUPRESS_UNUSED_VAR(spinlockPointer);

    return spinlockState;
 8103dcc:	697b      	ldr	r3, [r7, #20]
}
 8103dce:	4618      	mov	r0, r3
 8103dd0:	3718      	adds	r7, #24
 8103dd2:	46bd      	mov	sp, r7
 8103dd4:	bd80      	pop	{r7, pc}

08103dd6 <CILspinlock_releaseSpinlock>:
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION CosmOS_SpinlockStateType CILspinlock_releaseSpinlock(AddressType * spinlockPointer, \
																		BitWidthType spinlockId, \
																		BitWidthType schedulableId )
{
 8103dd6:	b580      	push	{r7, lr}
 8103dd8:	b086      	sub	sp, #24
 8103dda:	af00      	add	r7, sp, #0
 8103ddc:	60f8      	str	r0, [r7, #12]
 8103dde:	60b9      	str	r1, [r7, #8]
 8103de0:	607a      	str	r2, [r7, #4]
    CosmOS_SpinlockStateType spinlockState;


	HAL_HSEM_Release(spinlockId, schedulableId);
 8103de2:	6879      	ldr	r1, [r7, #4]
 8103de4:	68b8      	ldr	r0, [r7, #8]
 8103de6:	f006 fcc1 	bl	810a76c <HAL_HSEM_Release>

	*spinlockPointer = 0;
 8103dea:	68fb      	ldr	r3, [r7, #12]
 8103dec:	2200      	movs	r2, #0
 8103dee:	601a      	str	r2, [r3, #0]
	spinlockState = SPINLOCK_STATE_ENUM__RELEASED;
 8103df0:	2300      	movs	r3, #0
 8103df2:	617b      	str	r3, [r7, #20]
	//__asm volatile("BNE tryUnlock");
	//__asm volatile("released:");
    //__asm volatile("MOV %[value], R1":  [value] "=r" (spinlockState) );
	//__SUPRESS_UNUSED_VAR(spinlockPointer);

    return spinlockState;
 8103df4:	697b      	ldr	r3, [r7, #20]
}
 8103df6:	4618      	mov	r0, r3
 8103df8:	3718      	adds	r7, #24
 8103dfa:	46bd      	mov	sp, r7
 8103dfc:	bd80      	pop	{r7, pc}

08103dfe <CILstack_stackInit>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION StackPointerType CILstack_stackInit(AddressType stackLowAddress, AddressType stackHighAddress, AddressType handlerAddress)
{
 8103dfe:	b480      	push	{r7}
 8103e00:	b087      	sub	sp, #28
 8103e02:	af00      	add	r7, sp, #0
 8103e04:	60f8      	str	r0, [r7, #12]
 8103e06:	60b9      	str	r1, [r7, #8]
 8103e08:	607a      	str	r2, [r7, #4]
    CosmOS_ContextType *stack = ( CosmOS_ContextType* )( stackHighAddress - (AddressType)sizeof(CosmOS_ContextType) );
 8103e0a:	68bb      	ldr	r3, [r7, #8]
 8103e0c:	3b40      	subs	r3, #64	; 0x40
 8103e0e:	617b      	str	r3, [r7, #20]

    stack->XPSR  = 0x01000000;
 8103e10:	697b      	ldr	r3, [r7, #20]
 8103e12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8103e16:	63da      	str	r2, [r3, #60]	; 0x3c
    stack->PC    = handlerAddress;
 8103e18:	697b      	ldr	r3, [r7, #20]
 8103e1a:	687a      	ldr	r2, [r7, #4]
 8103e1c:	639a      	str	r2, [r3, #56]	; 0x38
    stack->LR    = 0xFFFFFFFD;
 8103e1e:	697b      	ldr	r3, [r7, #20]
 8103e20:	f06f 0202 	mvn.w	r2, #2
 8103e24:	635a      	str	r2, [r3, #52]	; 0x34
    stack->R12   = 0;
 8103e26:	697b      	ldr	r3, [r7, #20]
 8103e28:	2200      	movs	r2, #0
 8103e2a:	631a      	str	r2, [r3, #48]	; 0x30
    stack->R3    = 0;
 8103e2c:	697b      	ldr	r3, [r7, #20]
 8103e2e:	2200      	movs	r2, #0
 8103e30:	62da      	str	r2, [r3, #44]	; 0x2c
    stack->R2    = 0;
 8103e32:	697b      	ldr	r3, [r7, #20]
 8103e34:	2200      	movs	r2, #0
 8103e36:	629a      	str	r2, [r3, #40]	; 0x28
    stack->R1    = 0;
 8103e38:	697b      	ldr	r3, [r7, #20]
 8103e3a:	2200      	movs	r2, #0
 8103e3c:	625a      	str	r2, [r3, #36]	; 0x24
    stack->R0    = 0;
 8103e3e:	697b      	ldr	r3, [r7, #20]
 8103e40:	2200      	movs	r2, #0
 8103e42:	621a      	str	r2, [r3, #32]
    stack->R14   = 0xFFFFFFFD;
 8103e44:	697b      	ldr	r3, [r7, #20]
 8103e46:	f06f 0202 	mvn.w	r2, #2
 8103e4a:	61da      	str	r2, [r3, #28]
    stack->R11   = 0;
 8103e4c:	697b      	ldr	r3, [r7, #20]
 8103e4e:	2200      	movs	r2, #0
 8103e50:	619a      	str	r2, [r3, #24]
    stack->R10   = 0;
 8103e52:	697b      	ldr	r3, [r7, #20]
 8103e54:	2200      	movs	r2, #0
 8103e56:	615a      	str	r2, [r3, #20]
    stack->R8    = 0;
 8103e58:	697b      	ldr	r3, [r7, #20]
 8103e5a:	2200      	movs	r2, #0
 8103e5c:	611a      	str	r2, [r3, #16]
    stack->R7    = 0;
 8103e5e:	697b      	ldr	r3, [r7, #20]
 8103e60:	2200      	movs	r2, #0
 8103e62:	60da      	str	r2, [r3, #12]
    stack->R6    = 0;
 8103e64:	697b      	ldr	r3, [r7, #20]
 8103e66:	2200      	movs	r2, #0
 8103e68:	609a      	str	r2, [r3, #8]
    stack->R5    = 0;
 8103e6a:	697b      	ldr	r3, [r7, #20]
 8103e6c:	2200      	movs	r2, #0
 8103e6e:	605a      	str	r2, [r3, #4]
    stack->R4    = 0;
 8103e70:	697b      	ldr	r3, [r7, #20]
 8103e72:	2200      	movs	r2, #0
 8103e74:	601a      	str	r2, [r3, #0]

	__SUPRESS_UNUSED_VAR(stackLowAddress);
    return (StackPointerType)(&(stack->R4));
 8103e76:	697b      	ldr	r3, [r7, #20]
}
 8103e78:	4618      	mov	r0, r3
 8103e7a:	371c      	adds	r7, #28
 8103e7c:	46bd      	mov	sp, r7
 8103e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e82:	4770      	bx	lr

08103e84 <CILstack_setStackPointer>:
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION __NAKED void CILstack_setStackPointer(AddressType address)
{
    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 8103e84:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
	__asm volatile ("MSR PSP,R0");
 8103e88:	f380 8809 	msr	PSP, r0
    __asm volatile ("MOV R0, #0x3");
 8103e8c:	f04f 0003 	mov.w	r0, #3
    __asm volatile ("MSR CONTROL, R0");
 8103e90:	f380 8814 	msr	CONTROL, r0
    __asm volatile ("ISB");
 8103e94:	f3bf 8f6f 	isb	sy
    __asm volatile ("BX R14");
 8103e98:	4770      	bx	lr

	__SUPRESS_UNUSED_VAR(address);
}
 8103e9a:	bf00      	nop

08103e9c <CILsysCalls_dispatcher>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_dispatcher(BitWidthType *sp)
{
 8103e9c:	b580      	push	{r7, lr}
 8103e9e:	b08e      	sub	sp, #56	; 0x38
 8103ea0:	af00      	add	r7, sp, #0
 8103ea2:	6078      	str	r0, [r7, #4]
    CosmOS_GenericVoidType sysCall;
    CosmOS_OsVariableType * osVar;
    CosmOS_RoutesConfigurationType * routeVar;


    uint8_t *pc = (uint8_t*)(sp[6]);
 8103ea4:	687b      	ldr	r3, [r7, #4]
 8103ea6:	3318      	adds	r3, #24
 8103ea8:	681b      	ldr	r3, [r3, #0]
 8103eaa:	633b      	str	r3, [r7, #48]	; 0x30

    pc-=2;
 8103eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103eae:	3b02      	subs	r3, #2
 8103eb0:	633b      	str	r3, [r7, #48]	; 0x30

    osVar = os_getOsVar();
 8103eb2:	f7fe fbeb 	bl	810268c <os_getOsVar>
 8103eb6:	62f8      	str	r0, [r7, #44]	; 0x2c

    uint8_t sysCallId = *pc;
 8103eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8103eba:	781b      	ldrb	r3, [r3, #0]
 8103ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8103ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8103ec2:	60bb      	str	r3, [r7, #8]
    return (CosmOS_RoutesConfigurationType *)(osVar->cfg->route);
 8103ec4:	68bb      	ldr	r3, [r7, #8]
 8103ec6:	681b      	ldr	r3, [r3, #0]
 8103ec8:	691b      	ldr	r3, [r3, #16]

    routeVar = os_getOsRoutes( osVar );
 8103eca:	627b      	str	r3, [r7, #36]	; 0x24

    sysCall = route_getRoutesFunc( routeVar, sp[0] );
 8103ecc:	687b      	ldr	r3, [r7, #4]
 8103ece:	681b      	ldr	r3, [r3, #0]
 8103ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103ed2:	613a      	str	r2, [r7, #16]
 8103ed4:	60fb      	str	r3, [r7, #12]
  *
  * @return CosmOS_GenericVoidType
********************************************************************************/
__STATIC_FORCEINLINE CosmOS_GenericVoidType route_getRoutesFunc(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (CosmOS_GenericVoidType)(route->routeFunc[route->routeIdToFunc[callId]]);
 8103ed6:	693b      	ldr	r3, [r7, #16]
 8103ed8:	681a      	ldr	r2, [r3, #0]
 8103eda:	693b      	ldr	r3, [r7, #16]
 8103edc:	6859      	ldr	r1, [r3, #4]
 8103ede:	68fb      	ldr	r3, [r7, #12]
 8103ee0:	009b      	lsls	r3, r3, #2
 8103ee2:	440b      	add	r3, r1
 8103ee4:	681b      	ldr	r3, [r3, #0]
 8103ee6:	009b      	lsls	r3, r3, #2
 8103ee8:	4413      	add	r3, r2
 8103eea:	681b      	ldr	r3, [r3, #0]
 8103eec:	623b      	str	r3, [r7, #32]
    entityId = route_getRoutesEntityId( routeVar, sp[0] );
 8103eee:	687b      	ldr	r3, [r7, #4]
 8103ef0:	681b      	ldr	r3, [r3, #0]
 8103ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8103ef4:	61ba      	str	r2, [r7, #24]
 8103ef6:	617b      	str	r3, [r7, #20]
  *
  * @return BitWidthType
********************************************************************************/
__STATIC_FORCEINLINE BitWidthType route_getRoutesEntityId(CosmOS_RoutesConfigurationType * route, BitWidthType callId)
{
    return (route->routeIdToEntity[callId]);
 8103ef8:	69bb      	ldr	r3, [r7, #24]
 8103efa:	689a      	ldr	r2, [r3, #8]
 8103efc:	697b      	ldr	r3, [r7, #20]
 8103efe:	009b      	lsls	r3, r3, #2
 8103f00:	4413      	add	r3, r2
 8103f02:	681b      	ldr	r3, [r3, #0]
 8103f04:	61fb      	str	r3, [r7, #28]

    switch ( sysCallId )
 8103f06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8103f0a:	2b04      	cmp	r3, #4
 8103f0c:	d834      	bhi.n	8103f78 <CILsysCalls_dispatcher+0xdc>
 8103f0e:	a201      	add	r2, pc, #4	; (adr r2, 8103f14 <CILsysCalls_dispatcher+0x78>)
 8103f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f14:	08103f29 	.word	0x08103f29
 8103f18:	08103f31 	.word	0x08103f31
 8103f1c:	08103f3b 	.word	0x08103f3b
 8103f20:	08103f4d 	.word	0x08103f4d
 8103f24:	08103f65 	.word	0x08103f65
    {
        case 0 :
        {
            ((CosmOS_Generic_bitWidthType_ret_void)sysCall)(entityId);
 8103f28:	6a3b      	ldr	r3, [r7, #32]
 8103f2a:	69f8      	ldr	r0, [r7, #28]
 8103f2c:	4798      	blx	r3
            break;
 8103f2e:	e024      	b.n	8103f7a <CILsysCalls_dispatcher+0xde>
        }

		case 1 :
        {
            returnValue = ((CosmOS_Generic_bitWidthType_ret_bitWidthType)sysCall)(entityId);
 8103f30:	6a3b      	ldr	r3, [r7, #32]
 8103f32:	69f8      	ldr	r0, [r7, #28]
 8103f34:	4798      	blx	r3
 8103f36:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8103f38:	e01f      	b.n	8103f7a <CILsysCalls_dispatcher+0xde>
        }

        case 2 :
        {
            returnValue = ((CosmOS_Generic_bitWidthType_bitWidthType_ret_bitWidthType)sysCall)(entityId, (BitWidthType)sp[1]);
 8103f3a:	687b      	ldr	r3, [r7, #4]
 8103f3c:	3304      	adds	r3, #4
 8103f3e:	681a      	ldr	r2, [r3, #0]
 8103f40:	6a3b      	ldr	r3, [r7, #32]
 8103f42:	4611      	mov	r1, r2
 8103f44:	69f8      	ldr	r0, [r7, #28]
 8103f46:	4798      	blx	r3
 8103f48:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8103f4a:	e016      	b.n	8103f7a <CILsysCalls_dispatcher+0xde>
        }

        case 3 :
        {
			returnValue = ((CosmOS_Generic_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType)sysCall)(entityId, (void *)sp[1], sp[2]);
 8103f4c:	687b      	ldr	r3, [r7, #4]
 8103f4e:	3304      	adds	r3, #4
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	4619      	mov	r1, r3
 8103f54:	687b      	ldr	r3, [r7, #4]
 8103f56:	3308      	adds	r3, #8
 8103f58:	681a      	ldr	r2, [r3, #0]
 8103f5a:	6a3b      	ldr	r3, [r7, #32]
 8103f5c:	69f8      	ldr	r0, [r7, #28]
 8103f5e:	4798      	blx	r3
 8103f60:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8103f62:	e00a      	b.n	8103f7a <CILsysCalls_dispatcher+0xde>
        }

		case 4 :
        {
			returnValue = ((CosmOS_Generic_bitWidthType_voidPtr_ret_bitWidthType)sysCall)(entityId, (void *)sp[1]);
 8103f64:	687b      	ldr	r3, [r7, #4]
 8103f66:	3304      	adds	r3, #4
 8103f68:	681b      	ldr	r3, [r3, #0]
 8103f6a:	461a      	mov	r2, r3
 8103f6c:	6a3b      	ldr	r3, [r7, #32]
 8103f6e:	4611      	mov	r1, r2
 8103f70:	69f8      	ldr	r0, [r7, #28]
 8103f72:	4798      	blx	r3
 8103f74:	6378      	str	r0, [r7, #52]	; 0x34
            break;
 8103f76:	e000      	b.n	8103f7a <CILsysCalls_dispatcher+0xde>
        }

        default :
        {
            /* PANIC */
            break;
 8103f78:	bf00      	nop
        }
    }

    sp[0] = returnValue;
 8103f7a:	687b      	ldr	r3, [r7, #4]
 8103f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8103f7e:	601a      	str	r2, [r3, #0]
}
 8103f80:	bf00      	nop
 8103f82:	3738      	adds	r7, #56	; 0x38
 8103f84:	46bd      	mov	sp, r7
 8103f86:	bd80      	pop	{r7, pc}

08103f88 <CILsysCalls_bitWidthType_ret_void>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysCalls_bitWidthType_ret_void(BitWidthType id)
{
 8103f88:	b480      	push	{r7}
 8103f8a:	b083      	sub	sp, #12
 8103f8c:	af00      	add	r7, sp, #0
 8103f8e:	6078      	str	r0, [r7, #4]
    __asm volatile("SVC #0");
 8103f90:	df00      	svc	0

	__SUPRESS_UNUSED_VAR(id);
}
 8103f92:	bf00      	nop
 8103f94:	370c      	adds	r7, #12
 8103f96:	46bd      	mov	sp, r7
 8103f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103f9c:	4770      	bx	lr

08103f9e <CILsysCalls_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_ret_bitWidthType(BitWidthType id)
{
 8103f9e:	b480      	push	{r7}
 8103fa0:	b085      	sub	sp, #20
 8103fa2:	af00      	add	r7, sp, #0
 8103fa4:	6078      	str	r0, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #1");
 8103fa6:	df01      	svc	1
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8103fa8:	4603      	mov	r3, r0
 8103faa:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
    return returnValue;
 8103fac:	68fb      	ldr	r3, [r7, #12]
}
 8103fae:	4618      	mov	r0, r3
 8103fb0:	3714      	adds	r7, #20
 8103fb2:	46bd      	mov	sp, r7
 8103fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fb8:	4770      	bx	lr

08103fba <CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_bitWidthType_ret_bitWidthType(BitWidthType id, BitWidthType arg)
{
 8103fba:	b480      	push	{r7}
 8103fbc:	b085      	sub	sp, #20
 8103fbe:	af00      	add	r7, sp, #0
 8103fc0:	6078      	str	r0, [r7, #4]
 8103fc2:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    __asm volatile("SVC #2");
 8103fc4:	df02      	svc	2
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8103fc6:	4603      	mov	r3, r0
 8103fc8:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(arg);
    return returnValue;
 8103fca:	68fb      	ldr	r3, [r7, #12]
}
 8103fcc:	4618      	mov	r0, r3
 8103fce:	3714      	adds	r7, #20
 8103fd0:	46bd      	mov	sp, r7
 8103fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fd6:	4770      	bx	lr

08103fd8 <CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType(BitWidthType id, void * ptr, BitWidthType arg)
{
 8103fd8:	b480      	push	{r7}
 8103fda:	b087      	sub	sp, #28
 8103fdc:	af00      	add	r7, sp, #0
 8103fde:	60f8      	str	r0, [r7, #12]
 8103fe0:	60b9      	str	r1, [r7, #8]
 8103fe2:	607a      	str	r2, [r7, #4]
    BitWidthType returnValue;

    __asm volatile("SVC #3");
 8103fe4:	df03      	svc	3
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8103fe6:	4603      	mov	r3, r0
 8103fe8:	617b      	str	r3, [r7, #20]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(ptr);
	__SUPRESS_UNUSED_VAR(arg);
    return returnValue;
 8103fea:	697b      	ldr	r3, [r7, #20]
}
 8103fec:	4618      	mov	r0, r3
 8103fee:	371c      	adds	r7, #28
 8103ff0:	46bd      	mov	sp, r7
 8103ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ff6:	4770      	bx	lr

08103ff8 <CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType>:
  * @return BitWidthType
********************************************************************************/
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION BitWidthType CILsysCalls_bitWidthType_voidPtr_ret_bitWidthType(BitWidthType id, void * ptr)
{
 8103ff8:	b480      	push	{r7}
 8103ffa:	b085      	sub	sp, #20
 8103ffc:	af00      	add	r7, sp, #0
 8103ffe:	6078      	str	r0, [r7, #4]
 8104000:	6039      	str	r1, [r7, #0]
    BitWidthType returnValue;

    __asm volatile("SVC #4");
 8104002:	df04      	svc	4
    __asm volatile("MOV %0, R0": "=r" (returnValue) ::);
 8104004:	4603      	mov	r3, r0
 8104006:	60fb      	str	r3, [r7, #12]

	__SUPRESS_UNUSED_VAR(id);
	__SUPRESS_UNUSED_VAR(ptr);
    return returnValue;
 8104008:	68fb      	ldr	r3, [r7, #12]
}
 810400a:	4618      	mov	r0, r3
 810400c:	3714      	adds	r7, #20
 810400e:	46bd      	mov	sp, r7
 8104010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104014:	4770      	bx	lr
 8104016:	bf00      	nop

08104018 <CILsysTimer_startTimer>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_startTimer(BitWidthType ticks, BitWidthType timerTickCount)
{
 8104018:	b480      	push	{r7}
 810401a:	b083      	sub	sp, #12
 810401c:	af00      	add	r7, sp, #0
 810401e:	6078      	str	r0, [r7, #4]
 8104020:	6039      	str	r1, [r7, #0]

	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)) - 1UL);
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	683a      	ldr	r2, [r7, #0]
 8104026:	fb02 f303 	mul.w	r3, r2, r3
 810402a:	4a07      	ldr	r2, [pc, #28]	; (8104048 <CILsysTimer_startTimer+0x30>)
 810402c:	3b01      	subs	r3, #1
 810402e:	6053      	str	r3, [r2, #4]
	SysTick->VAL   = 0UL;
 8104030:	4b05      	ldr	r3, [pc, #20]	; (8104048 <CILsysTimer_startTimer+0x30>)
 8104032:	2200      	movs	r2, #0
 8104034:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = 	SysTick_CTRL_CLKSOURCE_Msk |
 8104036:	4b04      	ldr	r3, [pc, #16]	; (8104048 <CILsysTimer_startTimer+0x30>)
 8104038:	2207      	movs	r2, #7
 810403a:	601a      	str	r2, [r3, #0]
						SysTick_CTRL_TICKINT_Msk   |
						SysTick_CTRL_ENABLE_Msk;
}
 810403c:	bf00      	nop
 810403e:	370c      	adds	r7, #12
 8104040:	46bd      	mov	sp, r7
 8104042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104046:	4770      	bx	lr
 8104048:	e000e010 	.word	0xe000e010

0810404c <CILsysTimer_setTicks>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILsysTimer_setTicks(BitWidthType ticks, BitWidthType timerTickCount)
{
 810404c:	b480      	push	{r7}
 810404e:	b083      	sub	sp, #12
 8104050:	af00      	add	r7, sp, #0
 8104052:	6078      	str	r0, [r7, #4]
 8104054:	6039      	str	r1, [r7, #0]
	SysTick->CTRL = 0;
 8104056:	4b0e      	ldr	r3, [pc, #56]	; (8104090 <CILsysTimer_setTicks+0x44>)
 8104058:	2200      	movs	r2, #0
 810405a:	601a      	str	r2, [r3, #0]

	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)-\
 810405c:	687b      	ldr	r3, [r7, #4]
 810405e:	683a      	ldr	r2, [r7, #0]
 8104060:	fb02 f203 	mul.w	r2, r2, r3
								(SysTick->LOAD - SysTick->VAL)) - 1UL);
 8104064:	4b0a      	ldr	r3, [pc, #40]	; (8104090 <CILsysTimer_setTicks+0x44>)
 8104066:	6899      	ldr	r1, [r3, #8]
 8104068:	4b09      	ldr	r3, [pc, #36]	; (8104090 <CILsysTimer_setTicks+0x44>)
 810406a:	685b      	ldr	r3, [r3, #4]
 810406c:	1acb      	subs	r3, r1, r3
	SysTick->LOAD  = (uint32_t)(((ticks*timerTickCount)-\
 810406e:	4413      	add	r3, r2
 8104070:	4a07      	ldr	r2, [pc, #28]	; (8104090 <CILsysTimer_setTicks+0x44>)
 8104072:	3b01      	subs	r3, #1
 8104074:	6053      	str	r3, [r2, #4]

	SysTick->VAL   = 0UL;
 8104076:	4b06      	ldr	r3, [pc, #24]	; (8104090 <CILsysTimer_setTicks+0x44>)
 8104078:	2200      	movs	r2, #0
 810407a:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = 	SysTick_CTRL_CLKSOURCE_Msk |
 810407c:	4b04      	ldr	r3, [pc, #16]	; (8104090 <CILsysTimer_setTicks+0x44>)
 810407e:	2207      	movs	r2, #7
 8104080:	601a      	str	r2, [r3, #0]
						SysTick_CTRL_TICKINT_Msk   |
						SysTick_CTRL_ENABLE_Msk;
}
 8104082:	bf00      	nop
 8104084:	370c      	adds	r7, #12
 8104086:	46bd      	mov	sp, r7
 8104088:	f85d 7b04 	ldr.w	r7, [sp], #4
 810408c:	4770      	bx	lr
 810408e:	bf00      	nop
 8104090:	e000e010 	.word	0xe000e010

08104094 <CILuart_sysJob>:
********************************************************************************/
/* @cond S */
__SEC_START(__OS_FUNC_SECTION_START)
/* @endcond*/
__OS_FUNC_SECTION void CILuart_sysJob()
{
 8104094:	b480      	push	{r7}
 8104096:	af00      	add	r7, sp, #0

    //TX SIDE
    //check where is DMA and switch it if its buffer is empty
    //check if user is in red zone, if yes check if DMA is on the same buffer, then switch to the other
    //HAL_UART_Receive_DMA()
}
 8104098:	bf00      	nop
 810409a:	46bd      	mov	sp, r7
 810409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040a0:	4770      	bx	lr

081040a2 <_e_funcs_align_helper>:
	...

Disassembly of section .application_section_funcs_CM7:

08080000 <Idle_CM7>:
  * @{
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 8080000:	b480      	push	{r7}
 8080002:	af00      	add	r7, sp, #0
 8080004:	bf00      	nop
 8080006:	46bd      	mov	sp, r7
 8080008:	f85d 7b04 	ldr.w	r7, [sp], #4
 808000c:	4770      	bx	lr

0808000e <sysJobs_CM7>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 808000e:	b480      	push	{r7}
 8080010:	af00      	add	r7, sp, #0
 8080012:	bf00      	nop
 8080014:	46bd      	mov	sp, r7
 8080016:	f85d 7b04 	ldr.w	r7, [sp], #4
 808001a:	4770      	bx	lr
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 808001c:	b480      	push	{r7}
 808001e:	af00      	add	r7, sp, #0
 8080020:	bf00      	nop
 8080022:	46bd      	mov	sp, r7
 8080024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080028:	4770      	bx	lr

0808002a <IdleThread_CM7>:
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM4)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 808002a:	b480      	push	{r7}
 808002c:	af00      	add	r7, sp, #0
 808002e:	bf00      	nop
 8080030:	46bd      	mov	sp, r7
 8080032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080036:	4770      	bx	lr
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM7)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 8080038:	b480      	push	{r7}
 808003a:	af00      	add	r7, sp, #0
 808003c:	bf00      	nop
 808003e:	46bd      	mov	sp, r7
 8080040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080044:	4770      	bx	lr
__SEC_STOP(__APPLICATION_FUNC_SECTION_STOP_CM4)
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Logger_thread(void){};
 8080046:	b480      	push	{r7}
 8080048:	af00      	add	r7, sp, #0
 808004a:	bf00      	nop
 808004c:	46bd      	mov	sp, r7
 808004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080052:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 8080054:	b480      	push	{r7}
 8080056:	af00      	add	r7, sp, #0
 8080058:	bf00      	nop
 808005a:	46bd      	mov	sp, r7
 808005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080060:	4770      	bx	lr

08080062 <wrapped_Idle_CM7>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Idle_CM7(void)
{
 8080062:	b580      	push	{r7, lr}
 8080064:	af00      	add	r7, sp, #0
    Idle_CM7();
 8080066:	f7ff ffcb 	bl	8080000 <Idle_CM7>
    for(;;);
 808006a:	e7fe      	b.n	808006a <wrapped_Idle_CM7+0x8>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 808006c:	b480      	push	{r7}
 808006e:	af00      	add	r7, sp, #0
 8080070:	bf00      	nop
 8080072:	46bd      	mov	sp, r7
 8080074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080078:	4770      	bx	lr

0808007a <wrapped_sysJobs_CM7>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_sysJobs_CM7(void)
{
 808007a:	b580      	push	{r7, lr}
 808007c:	af00      	add	r7, sp, #0
    cosmosApiInternal_sysJobs_dispatcher();
 808007e:	2012      	movs	r0, #18
 8080080:	f083 fa18 	bl	81034b4 <sysCalls_bitWidthType_ret_void>
    cosmosApiInternal_schedulable_setExecutionStateToFinished();
 8080084:	2011      	movs	r0, #17
 8080086:	f083 fa15 	bl	81034b4 <sysCalls_bitWidthType_ret_void>
    for(;;);
 808008a:	e7fe      	b.n	808008a <wrapped_sysJobs_CM7+0x10>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 808008c:	b480      	push	{r7}
 808008e:	af00      	add	r7, sp, #0
 8080090:	bf00      	nop
 8080092:	46bd      	mov	sp, r7
 8080094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080098:	4770      	bx	lr

0808009a <wrapped_Task_0_Core_0_Handler>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Task_0_Core_0_Handler(void)
{
 808009a:	b580      	push	{r7, lr}
 808009c:	af00      	add	r7, sp, #0
    Task_0_Core_0_Handler();
 808009e:	f000 f883 	bl	80801a8 <Task_0_Core_0_Handler>
    cosmosApiInternal_schedulable_setExecutionStateToFinished();
 80800a2:	2011      	movs	r0, #17
 80800a4:	f083 fa06 	bl	81034b4 <sysCalls_bitWidthType_ret_void>
    for(;;);
 80800a8:	e7fe      	b.n	80800a8 <wrapped_Task_0_Core_0_Handler+0xe>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 80800aa:	b480      	push	{r7}
 80800ac:	af00      	add	r7, sp, #0
 80800ae:	bf00      	nop
 80800b0:	46bd      	mov	sp, r7
 80800b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800b6:	4770      	bx	lr

080800b8 <wrapped_IdleThread_CM7>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_IdleThread_CM7(void)
{
 80800b8:	b580      	push	{r7, lr}
 80800ba:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        IdleThread_CM7();
 80800bc:	f7ff ffb5 	bl	808002a <IdleThread_CM7>
 80800c0:	e7fc      	b.n	80800bc <wrapped_IdleThread_CM7+0x4>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 80800c2:	b480      	push	{r7}
 80800c4:	af00      	add	r7, sp, #0
 80800c6:	bf00      	nop
 80800c8:	46bd      	mov	sp, r7
 80800ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800ce:	4770      	bx	lr

080800d0 <wrapped_Thread_Core_0>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Thread_Core_0(void)
{
 80800d0:	b580      	push	{r7, lr}
 80800d2:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        Thread_Core_0();
 80800d4:	f000 f8b6 	bl	8080244 <Thread_Core_0>
 80800d8:	e7fc      	b.n	80800d4 <wrapped_Thread_Core_0+0x4>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Logger_thread(void){};
 80800da:	b480      	push	{r7}
 80800dc:	af00      	add	r7, sp, #0
 80800de:	bf00      	nop
 80800e0:	46bd      	mov	sp, r7
 80800e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800e6:	4770      	bx	lr

080800e8 <wrapped_Logger_thread>:
/* @endcond*/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void wrapped_Logger_thread(void)
{
 80800e8:	b580      	push	{r7, lr}
 80800ea:	af00      	add	r7, sp, #0
    while ( 1 )
    {
        Logger_thread();
 80800ec:	f000 f919 	bl	8080322 <Logger_thread>
 80800f0:	e7fc      	b.n	80800ec <wrapped_Logger_thread+0x4>
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 80800f2:	b480      	push	{r7}
 80800f4:	af00      	add	r7, sp, #0
 80800f6:	bf00      	nop
 80800f8:	46bd      	mov	sp, r7
 80800fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80800fe:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 8080100:	b480      	push	{r7}
 8080102:	af00      	add	r7, sp, #0
 8080104:	bf00      	nop
 8080106:	46bd      	mov	sp, r7
 8080108:	f85d 7b04 	ldr.w	r7, [sp], #4
 808010c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 808010e:	b480      	push	{r7}
 8080110:	af00      	add	r7, sp, #0
 8080112:	bf00      	nop
 8080114:	46bd      	mov	sp, r7
 8080116:	f85d 7b04 	ldr.w	r7, [sp], #4
 808011a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 808011c:	b480      	push	{r7}
 808011e:	af00      	add	r7, sp, #0
 8080120:	bf00      	nop
 8080122:	46bd      	mov	sp, r7
 8080124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080128:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 808012a:	b480      	push	{r7}
 808012c:	af00      	add	r7, sp, #0
 808012e:	bf00      	nop
 8080130:	46bd      	mov	sp, r7
 8080132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080136:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Logger_thread(void){};
 8080138:	b480      	push	{r7}
 808013a:	af00      	add	r7, sp, #0
 808013c:	bf00      	nop
 808013e:	46bd      	mov	sp, r7
 8080140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080144:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Idle_CM7(void){};
 8080146:	b480      	push	{r7}
 8080148:	af00      	add	r7, sp, #0
 808014a:	bf00      	nop
 808014c:	46bd      	mov	sp, r7
 808014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080152:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void sysJobs_CM7(void){};
 8080154:	b480      	push	{r7}
 8080156:	af00      	add	r7, sp, #0
 8080158:	bf00      	nop
 808015a:	46bd      	mov	sp, r7
 808015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080160:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Task_0_Core_0_Handler(void){};
 8080162:	b480      	push	{r7}
 8080164:	af00      	add	r7, sp, #0
 8080166:	bf00      	nop
 8080168:	46bd      	mov	sp, r7
 808016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 808016e:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void IdleThread_CM7(void){};
 8080170:	b480      	push	{r7}
 8080172:	af00      	add	r7, sp, #0
 8080174:	bf00      	nop
 8080176:	46bd      	mov	sp, r7
 8080178:	f85d 7b04 	ldr.w	r7, [sp], #4
 808017c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Thread_Core_0(void){};
 808017e:	b480      	push	{r7}
 8080180:	af00      	add	r7, sp, #0
 8080182:	bf00      	nop
 8080184:	46bd      	mov	sp, r7
 8080186:	f85d 7b04 	ldr.w	r7, [sp], #4
 808018a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM7 __WEAK void Logger_thread(void){};
 808018c:	b480      	push	{r7}
 808018e:	af00      	add	r7, sp, #0
 8080190:	bf00      	nop
 8080192:	46bd      	mov	sp, r7
 8080194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8080198:	4770      	bx	lr

0808019a <userKernelPanicHook_CM7>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void userKernelPanicHook_CM7(void)
{
 808019a:	b480      	push	{r7}
 808019c:	af00      	add	r7, sp, #0

/********************************************************************************
** stop_name =userKernelPanicHook_CM7.cfunc
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 808019e:	bf00      	nop
 80801a0:	46bd      	mov	sp, r7
 80801a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80801a6:	4770      	bx	lr

080801a8 <Task_0_Core_0_Handler>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void Task_0_Core_0_Handler(void)
{
 80801a8:	b580      	push	{r7, lr}
 80801aa:	b084      	sub	sp, #16
 80801ac:	af00      	add	r7, sp, #0
********************************************************************************/
	CosmOS_SpinlockStateType spinlockState;
	CosmOS_BufferStateType bufferState;
	CosmOS_MutexStateType mutexState;

	cosmosApi_deviceIO_togglePin(GPIOF, GPIO_PIN_11); //Timing measurement with logic analyzer, pls dont remove
 80801ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80801b2:	4920      	ldr	r1, [pc, #128]	; (8080234 <Task_0_Core_0_Handler+0x8c>)
 80801b4:	200e      	movs	r0, #14
 80801b6:	f083 f9a4 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	if (counter > 100)
 80801ba:	4b1f      	ldr	r3, [pc, #124]	; (8080238 <Task_0_Core_0_Handler+0x90>)
 80801bc:	681b      	ldr	r3, [r3, #0]
 80801be:	2b64      	cmp	r3, #100	; 0x64
 80801c0:	dd26      	ble.n	8080210 <Task_0_Core_0_Handler+0x68>
	{
		counter = 0;
 80801c2:	4b1d      	ldr	r3, [pc, #116]	; (8080238 <Task_0_Core_0_Handler+0x90>)
 80801c4:	2200      	movs	r2, #0
 80801c6:	601a      	str	r2, [r3, #0]

		bufferReader_cm7 = 100;
 80801c8:	4b1c      	ldr	r3, [pc, #112]	; (808023c <Task_0_Core_0_Handler+0x94>)
 80801ca:	2264      	movs	r2, #100	; 0x64
 80801cc:	601a      	str	r2, [r3, #0]
		bufferState = cosmosApi_write_buffer_x_core_buffer_1(&bufferReader_cm7,sizeof(bufferReader_cm7));
 80801ce:	2204      	movs	r2, #4
 80801d0:	491a      	ldr	r1, [pc, #104]	; (808023c <Task_0_Core_0_Handler+0x94>)
 80801d2:	200b      	movs	r0, #11
 80801d4:	f083 f995 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 80801d8:	4603      	mov	r3, r0
 80801da:	73fb      	strb	r3, [r7, #15]

		bufferReader_cm7 = 0;
 80801dc:	4b17      	ldr	r3, [pc, #92]	; (808023c <Task_0_Core_0_Handler+0x94>)
 80801de:	2200      	movs	r2, #0
 80801e0:	601a      	str	r2, [r3, #0]
		bufferState = cosmosApi_read_buffer_x_core_buffer_1(&bufferReader_cm7,sizeof(bufferReader_cm7));
 80801e2:	2204      	movs	r2, #4
 80801e4:	4915      	ldr	r1, [pc, #84]	; (808023c <Task_0_Core_0_Handler+0x94>)
 80801e6:	200a      	movs	r0, #10
 80801e8:	f083 f98b 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 80801ec:	4603      	mov	r3, r0
 80801ee:	73fb      	strb	r3, [r7, #15]

		spinlockState = cosmosApi_try_spinlock_uart_buffer_read();
 80801f0:	2001      	movs	r0, #1
 80801f2:	f083 f96a 	bl	81034ca <sysCalls_bitWidthType_ret_bitWidthType>
 80801f6:	4603      	mov	r3, r0
 80801f8:	60bb      	str	r3, [r7, #8]
		spinlockState = cosmosApi_release_spinlock_uart_buffer_read();
 80801fa:	2002      	movs	r0, #2
 80801fc:	f083 f965 	bl	81034ca <sysCalls_bitWidthType_ret_bitWidthType>
 8080200:	4603      	mov	r3, r0
 8080202:	60bb      	str	r3, [r7, #8]

		mutexState = mutex_getMutex(&gpio_e_mutex); //trying if kernel will return err cause task cannot use mutexes
 8080204:	480e      	ldr	r0, [pc, #56]	; (8080240 <Task_0_Core_0_Handler+0x98>)
 8080206:	f082 f8f9 	bl	81023fc <mutex_getMutex>
 808020a:	4603      	mov	r3, r0
 808020c:	607b      	str	r3, [r7, #4]
 808020e:	e004      	b.n	808021a <Task_0_Core_0_Handler+0x72>

	}
	else
	{
		counter++;
 8080210:	4b09      	ldr	r3, [pc, #36]	; (8080238 <Task_0_Core_0_Handler+0x90>)
 8080212:	681b      	ldr	r3, [r3, #0]
 8080214:	3301      	adds	r3, #1
 8080216:	4a08      	ldr	r2, [pc, #32]	; (8080238 <Task_0_Core_0_Handler+0x90>)
 8080218:	6013      	str	r3, [r2, #0]
	}
	__asm volatile ("VMUL.F32 s0, s0, s1"); //testing FPU context switch
 808021a:	ee20 0a20 	vmul.f32	s0, s0, s1
	cosmosApi_deviceIO_togglePin(GPIOF, GPIO_PIN_11); //Timing measurement with logic analyzer, pls dont remove
 808021e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8080222:	4904      	ldr	r1, [pc, #16]	; (8080234 <Task_0_Core_0_Handler+0x8c>)
 8080224:	200e      	movs	r0, #14
 8080226:	f083 f96c 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	__SUPRESS_UNUSED_VAR(bufferState);
/********************************************************************************
** stop_name =Task_0_Core_0_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 808022a:	bf00      	nop
 808022c:	3710      	adds	r7, #16
 808022e:	46bd      	mov	sp, r7
 8080230:	bd80      	pop	{r7, pc}
 8080232:	bf00      	nop
 8080234:	58021400 	.word	0x58021400
 8080238:	20001808 	.word	0x20001808
 808023c:	20001810 	.word	0x20001810
 8080240:	20001814 	.word	0x20001814

08080244 <Thread_Core_0>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM7)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM7 void Thread_Core_0(void)
{
 8080244:	b5b0      	push	{r4, r5, r7, lr}
 8080246:	b08e      	sub	sp, #56	; 0x38
 8080248:	af00      	add	r7, sp, #0
** start_name =Thread_Core_0
********************************************************************************/
	CosmOS_MutexStateType mutexState;
	CosmOS_SleepStateType sleepState;

	uint8_t togglePinMessage[] = "Toggeling pin with thread 0 !!!\r\n"; //Data to send
 808024a:	4b22      	ldr	r3, [pc, #136]	; (80802d4 <Thread_Core_0+0x90>)
 808024c:	1d3c      	adds	r4, r7, #4
 808024e:	461d      	mov	r5, r3
 8080250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8080256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8080258:	682b      	ldr	r3, [r5, #0]
 808025a:	8023      	strh	r3, [r4, #0]

	int * integerArr = new int[10];
 808025c:	2028      	movs	r0, #40	; 0x28
 808025e:	f08b fc28 	bl	810bab2 <_Znaj>
 8080262:	4603      	mov	r3, r0
 8080264:	637b      	str	r3, [r7, #52]	; 0x34
	delete integerArr;
 8080266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8080268:	2b00      	cmp	r3, #0
 808026a:	d003      	beq.n	8080274 <Thread_Core_0+0x30>
 808026c:	2104      	movs	r1, #4
 808026e:	4618      	mov	r0, r3
 8080270:	f08b f960 	bl	810b534 <_ZdlPvj>

	GPIO * gpio_e = new GPIO(GPIOE);
 8080274:	2004      	movs	r0, #4
 8080276:	f08b f949 	bl	810b50c <_Znwj>
 808027a:	4603      	mov	r3, r0
 808027c:	461c      	mov	r4, r3
 808027e:	4916      	ldr	r1, [pc, #88]	; (80802d8 <Thread_Core_0+0x94>)
 8080280:	4620      	mov	r0, r4
 8080282:	f08b f963 	bl	810b54c <_ZN4GPIOC1EPv>
 8080286:	633c      	str	r4, [r7, #48]	; 0x30

	sleepState = thread_sleep(1);
 8080288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808028c:	f083 fa2a 	bl	81036e4 <thread_sleepMs>
 8080290:	4603      	mov	r3, r0
 8080292:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	mutexState = mutex_getMutex(&gpio_e_mutex);
 8080296:	4811      	ldr	r0, [pc, #68]	; (80802dc <Thread_Core_0+0x98>)
 8080298:	f082 f8b0 	bl	81023fc <mutex_getMutex>
 808029c:	4603      	mov	r3, r0
 808029e:	62bb      	str	r3, [r7, #40]	; 0x28
	gpio_e->togglePin(GPIO_PIN_1);
 80802a0:	2102      	movs	r1, #2
 80802a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80802a4:	f000 f81c 	bl	80802e0 <_ZN4GPIO9togglePinEj>
	mutexState = mutex_releaseMutex(&gpio_e_mutex);
 80802a8:	480c      	ldr	r0, [pc, #48]	; (80802dc <Thread_Core_0+0x98>)
 80802aa:	f082 f9aa 	bl	8102602 <mutex_releaseMutex>
 80802ae:	4603      	mov	r3, r0
 80802b0:	62bb      	str	r3, [r7, #40]	; 0x28
	user_log(togglePinMessage, sizeof(togglePinMessage));
 80802b2:	1d3b      	adds	r3, r7, #4
 80802b4:	2122      	movs	r1, #34	; 0x22
 80802b6:	4618      	mov	r0, r3
 80802b8:	f000 f822 	bl	8080300 <user_log>

	delete gpio_e;
 80802bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80802be:	2b00      	cmp	r3, #0
 80802c0:	d003      	beq.n	80802ca <Thread_Core_0+0x86>
 80802c2:	2104      	movs	r1, #4
 80802c4:	4618      	mov	r0, r3
 80802c6:	f08b f935 	bl	810b534 <_ZdlPvj>
	__SUPRESS_UNUSED_VAR(sleepState);
/********************************************************************************
** stop_name =Thread_Core_0
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 80802ca:	bf00      	nop
 80802cc:	3738      	adds	r7, #56	; 0x38
 80802ce:	46bd      	mov	sp, r7
 80802d0:	bdb0      	pop	{r4, r5, r7, pc}
 80802d2:	bf00      	nop
 80802d4:	0810c058 	.word	0x0810c058
 80802d8:	58021000 	.word	0x58021000
 80802dc:	20001814 	.word	0x20001814

080802e0 <_ZN4GPIO9togglePinEj>:
/********************************************************************************
** DO NOT MODIFY THIS COMMENT ! Code                 USER SECTION | Start      **
** start_name =blinking_led_CM7_userCodeFree
********************************************************************************/
__APPLICATION_FUNC_SECTION_CM7 void GPIO::togglePin(BitWidthType pinNumber)
{
 80802e0:	b580      	push	{r7, lr}
 80802e2:	b082      	sub	sp, #8
 80802e4:	af00      	add	r7, sp, #0
 80802e6:	6078      	str	r0, [r7, #4]
 80802e8:	6039      	str	r1, [r7, #0]
	cosmosApi_deviceIO_togglePin(address, pinNumber);
 80802ea:	687b      	ldr	r3, [r7, #4]
 80802ec:	681b      	ldr	r3, [r3, #0]
 80802ee:	683a      	ldr	r2, [r7, #0]
 80802f0:	4619      	mov	r1, r3
 80802f2:	200e      	movs	r0, #14
 80802f4:	f083 f905 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
}
 80802f8:	bf00      	nop
 80802fa:	3708      	adds	r7, #8
 80802fc:	46bd      	mov	sp, r7
 80802fe:	bd80      	pop	{r7, pc}

08080300 <user_log>:
/********************************************************************************
** DO NOT MODIFY THIS COMMENT ! Code                 USER SECTION | Start      **
** start_name =logger_userCodeFree
********************************************************************************/
__APPLICATION_FUNC_SECTION_CM7 CosmOS_BufferStateType user_log(void * ptr, BitWidthType size)
{
 8080300:	b580      	push	{r7, lr}
 8080302:	b084      	sub	sp, #16
 8080304:	af00      	add	r7, sp, #0
 8080306:	6078      	str	r0, [r7, #4]
 8080308:	6039      	str	r1, [r7, #0]
	CosmOS_BufferStateType bufferState;
	bufferState = cosmosApi_write_buffer_logger_buffer(ptr, size);
 808030a:	683a      	ldr	r2, [r7, #0]
 808030c:	6879      	ldr	r1, [r7, #4]
 808030e:	200d      	movs	r0, #13
 8080310:	f083 f8f7 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 8080314:	4603      	mov	r3, r0
 8080316:	73fb      	strb	r3, [r7, #15]
	return bufferState;
 8080318:	7bfb      	ldrb	r3, [r7, #15]
};
 808031a:	4618      	mov	r0, r3
 808031c:	3710      	adds	r7, #16
 808031e:	46bd      	mov	sp, r7
 8080320:	bd80      	pop	{r7, pc}

08080322 <Logger_thread>:
{
 8080322:	b580      	push	{r7, lr}
 8080324:	b08e      	sub	sp, #56	; 0x38
 8080326:	af00      	add	r7, sp, #0
	thread_sleepMs(200);
 8080328:	20c8      	movs	r0, #200	; 0xc8
 808032a:	f083 f9db 	bl	81036e4 <thread_sleepMs>
	cosmosApi_interrupt_disableInterrupt(USART3_IRQn);
 808032e:	2127      	movs	r1, #39	; 0x27
 8080330:	201c      	movs	r0, #28
 8080332:	f083 f8d7 	bl	81034e4 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
	cosmosApi_interrupt_disableInterrupt(DMA1_Stream0_IRQn);
 8080336:	210b      	movs	r1, #11
 8080338:	201c      	movs	r0, #28
 808033a:	f083 f8d3 	bl	81034e4 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
	osVar = os_getOsVar();
 808033e:	f082 f9a5 	bl	810268c <os_getOsVar>
 8080342:	4603      	mov	r3, r0
 8080344:	637b      	str	r3, [r7, #52]	; 0x34
 8080346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8080348:	60bb      	str	r3, [r7, #8]
 808034a:	2303      	movs	r3, #3
 808034c:	607b      	str	r3, [r7, #4]
    return (&(osVar->bufferVars[bufferId]));
 808034e:	68bb      	ldr	r3, [r7, #8]
 8080350:	689a      	ldr	r2, [r3, #8]
 8080352:	687b      	ldr	r3, [r7, #4]
 8080354:	011b      	lsls	r3, r3, #4
 8080356:	4413      	add	r3, r2
	loggerBufferVar = os_getOsBufferVar(osVar, logger_buffer_id);
 8080358:	633b      	str	r3, [r7, #48]	; 0x30
 808035a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808035c:	60fb      	str	r3, [r7, #12]
    return (unsigned char *)(bufferVar->cfg->buffer);
 808035e:	68fb      	ldr	r3, [r7, #12]
 8080360:	681b      	ldr	r3, [r3, #0]
 8080362:	681b      	ldr	r3, [r3, #0]
	bufferArr = buffer_getBuffer(loggerBufferVar);
 8080364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8080366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8080368:	613b      	str	r3, [r7, #16]
    return (bufferVar->cfg->size);
 808036a:	693b      	ldr	r3, [r7, #16]
 808036c:	681b      	ldr	r3, [r3, #0]
 808036e:	689b      	ldr	r3, [r3, #8]
	bufferSize = buffer_getBufferSize(loggerBufferVar);
 8080370:	62bb      	str	r3, [r7, #40]	; 0x28
 8080372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8080374:	617b      	str	r3, [r7, #20]
    return (bufferVar->tail);
 8080376:	697b      	ldr	r3, [r7, #20]
 8080378:	689b      	ldr	r3, [r3, #8]
	bufferTail = buffer_getBufferTail(loggerBufferVar);
 808037a:	627b      	str	r3, [r7, #36]	; 0x24
 808037c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 808037e:	61bb      	str	r3, [r7, #24]
    return (bufferVar->fullCells);
 8080380:	69bb      	ldr	r3, [r7, #24]
 8080382:	68db      	ldr	r3, [r3, #12]
	bufferFullCellsNum = buffer_getFullCellsNum(loggerBufferVar);
 8080384:	623b      	str	r3, [r7, #32]
	if ((AddressType)bufferArr + bufferSize < ((AddressType)bufferArr + bufferTail + bufferFullCellsNum))
 8080386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8080388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 808038a:	441a      	add	r2, r3
 808038c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 808038e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8080390:	4419      	add	r1, r3
 8080392:	6a3b      	ldr	r3, [r7, #32]
 8080394:	440b      	add	r3, r1
 8080396:	429a      	cmp	r2, r3
 8080398:	d204      	bcs.n	80803a4 <Logger_thread+0x82>
		sizeToSend = bufferSize - bufferTail;
 808039a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 808039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 808039e:	1ad3      	subs	r3, r2, r3
 80803a0:	61fb      	str	r3, [r7, #28]
 80803a2:	e001      	b.n	80803a8 <Logger_thread+0x86>
		sizeToSend = bufferFullCellsNum;
 80803a4:	6a3b      	ldr	r3, [r7, #32]
 80803a6:	61fb      	str	r3, [r7, #28]
	HAL_UART_Transmit_DMA(&huart3, bufferArr, sizeof(sizeToSend));
 80803a8:	2204      	movs	r2, #4
 80803aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80803ac:	4807      	ldr	r0, [pc, #28]	; (80803cc <Logger_thread+0xaa>)
 80803ae:	f08a ff45 	bl	810b23c <HAL_UART_Transmit_DMA>
	cosmosApi_interrupt_enableInterrupt(USART3_IRQn);
 80803b2:	2127      	movs	r1, #39	; 0x27
 80803b4:	201d      	movs	r0, #29
 80803b6:	f083 f895 	bl	81034e4 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
	cosmosApi_interrupt_enableInterrupt(DMA1_Stream0_IRQn);
 80803ba:	210b      	movs	r1, #11
 80803bc:	201d      	movs	r0, #29
 80803be:	f083 f891 	bl	81034e4 <sysCalls_bitWidthType_bitWidthType_ret_bitWidthType>
};
 80803c2:	bf00      	nop
 80803c4:	3738      	adds	r7, #56	; 0x38
 80803c6:	46bd      	mov	sp, r7
 80803c8:	bd80      	pop	{r7, pc}
 80803ca:	bf00      	nop
 80803cc:	300400a4 	.word	0x300400a4

080803d0 <HAL_UART_TxCpltCallback>:

__APPLICATION_FUNC_SECTION_CM7 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80803d0:	b580      	push	{r7, lr}
 80803d2:	b086      	sub	sp, #24
 80803d4:	af00      	add	r7, sp, #0
 80803d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80803d8:	b672      	cpsid	i
}
 80803da:	bf00      	nop
	__disable_irq();
	CosmOS_BufferVariableType *loggerBufferVar;
	CosmOS_OsVariableType *osVar;

	osVar = os_getOsVar();
 80803dc:	f082 f956 	bl	810268c <os_getOsVar>
 80803e0:	4603      	mov	r3, r0
 80803e2:	617b      	str	r3, [r7, #20]
 80803e4:	697b      	ldr	r3, [r7, #20]
 80803e6:	60fb      	str	r3, [r7, #12]
 80803e8:	2303      	movs	r3, #3
 80803ea:	60bb      	str	r3, [r7, #8]
 80803ec:	68fb      	ldr	r3, [r7, #12]
 80803ee:	689a      	ldr	r2, [r3, #8]
 80803f0:	68bb      	ldr	r3, [r7, #8]
 80803f2:	011b      	lsls	r3, r3, #4
 80803f4:	4413      	add	r3, r2
	loggerBufferVar = os_getOsBufferVar(osVar, logger_buffer_id);
 80803f6:	613b      	str	r3, [r7, #16]

	loggerBufferVar->fullCells = (loggerBufferVar->fullCells - huart->TxXferSize);
 80803f8:	693b      	ldr	r3, [r7, #16]
 80803fa:	68db      	ldr	r3, [r3, #12]
 80803fc:	687a      	ldr	r2, [r7, #4]
 80803fe:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8080402:	1a9a      	subs	r2, r3, r2
 8080404:	693b      	ldr	r3, [r7, #16]
 8080406:	60da      	str	r2, [r3, #12]
	loggerBufferVar->tail = ( ( loggerBufferVar->tail + huart->TxXferSize ) % loggerBufferVar->cfg->size );
 8080408:	693b      	ldr	r3, [r7, #16]
 808040a:	689b      	ldr	r3, [r3, #8]
 808040c:	687a      	ldr	r2, [r7, #4]
 808040e:	f8b2 2054 	ldrh.w	r2, [r2, #84]	; 0x54
 8080412:	4413      	add	r3, r2
 8080414:	693a      	ldr	r2, [r7, #16]
 8080416:	6812      	ldr	r2, [r2, #0]
 8080418:	6892      	ldr	r2, [r2, #8]
 808041a:	fbb3 f1f2 	udiv	r1, r3, r2
 808041e:	fb02 f201 	mul.w	r2, r2, r1
 8080422:	1a9a      	subs	r2, r3, r2
 8080424:	693b      	ldr	r3, [r7, #16]
 8080426:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8080428:	b662      	cpsie	i
}
 808042a:	bf00      	nop
	__enable_irq();
};
 808042c:	bf00      	nop
 808042e:	3718      	adds	r7, #24
 8080430:	46bd      	mov	sp, r7
 8080432:	bd80      	pop	{r7, pc}

Disassembly of section .application_section_funcs_CM4:

08180000 <Idle_CM4>:
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 8180000:	b480      	push	{r7}
 8180002:	af00      	add	r7, sp, #0
 8180004:	bf00      	nop
 8180006:	46bd      	mov	sp, r7
 8180008:	f85d 7b04 	ldr.w	r7, [sp], #4
 818000c:	4770      	bx	lr

0818000e <sysJobs_CM4>:
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 818000e:	b480      	push	{r7}
 8180010:	af00      	add	r7, sp, #0
 8180012:	bf00      	nop
 8180014:	46bd      	mov	sp, r7
 8180016:	f85d 7b04 	ldr.w	r7, [sp], #4
 818001a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 818001c:	b480      	push	{r7}
 818001e:	af00      	add	r7, sp, #0
 8180020:	bf00      	nop
 8180022:	46bd      	mov	sp, r7
 8180024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180028:	4770      	bx	lr

0818002a <IdleThread_CM4>:
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 818002a:	b480      	push	{r7}
 818002c:	af00      	add	r7, sp, #0
 818002e:	bf00      	nop
 8180030:	46bd      	mov	sp, r7
 8180032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180036:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 8180038:	b480      	push	{r7}
 818003a:	af00      	add	r7, sp, #0
 818003c:	bf00      	nop
 818003e:	46bd      	mov	sp, r7
 8180040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180044:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 8180046:	b480      	push	{r7}
 8180048:	af00      	add	r7, sp, #0
 818004a:	bf00      	nop
 818004c:	46bd      	mov	sp, r7
 818004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180052:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 8180054:	b480      	push	{r7}
 8180056:	af00      	add	r7, sp, #0
 8180058:	bf00      	nop
 818005a:	46bd      	mov	sp, r7
 818005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180060:	4770      	bx	lr

08180062 <wrapped_Idle_CM4>:
{
 8180062:	b580      	push	{r7, lr}
 8180064:	af00      	add	r7, sp, #0
    Idle_CM4();
 8180066:	f7ff ffcb 	bl	8180000 <Idle_CM4>
    for(;;);
 818006a:	e7fe      	b.n	818006a <wrapped_Idle_CM4+0x8>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 818006c:	b480      	push	{r7}
 818006e:	af00      	add	r7, sp, #0
 8180070:	bf00      	nop
 8180072:	46bd      	mov	sp, r7
 8180074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180078:	4770      	bx	lr

0818007a <wrapped_sysJobs_CM4>:
{
 818007a:	b580      	push	{r7, lr}
 818007c:	af00      	add	r7, sp, #0
    cosmosApiInternal_sysJobs_dispatcher();
 818007e:	2012      	movs	r0, #18
 8180080:	f783 fa18 	bl	81034b4 <sysCalls_bitWidthType_ret_void>
    cosmosApiInternal_schedulable_setExecutionStateToFinished();
 8180084:	2011      	movs	r0, #17
 8180086:	f783 fa15 	bl	81034b4 <sysCalls_bitWidthType_ret_void>
    for(;;);
 818008a:	e7fe      	b.n	818008a <wrapped_sysJobs_CM4+0x10>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 818008c:	b480      	push	{r7}
 818008e:	af00      	add	r7, sp, #0
 8180090:	bf00      	nop
 8180092:	46bd      	mov	sp, r7
 8180094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180098:	4770      	bx	lr

0818009a <wrapped_Task_0_Core_1_Handler>:
{
 818009a:	b580      	push	{r7, lr}
 818009c:	af00      	add	r7, sp, #0
    Task_0_Core_1_Handler();
 818009e:	f000 f883 	bl	81801a8 <Task_0_Core_1_Handler>
    cosmosApiInternal_schedulable_setExecutionStateToFinished();
 81800a2:	2011      	movs	r0, #17
 81800a4:	f783 fa06 	bl	81034b4 <sysCalls_bitWidthType_ret_void>
    for(;;);
 81800a8:	e7fe      	b.n	81800a8 <wrapped_Task_0_Core_1_Handler+0xe>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 81800aa:	b480      	push	{r7}
 81800ac:	af00      	add	r7, sp, #0
 81800ae:	bf00      	nop
 81800b0:	46bd      	mov	sp, r7
 81800b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800b6:	4770      	bx	lr

081800b8 <wrapped_IdleThread_CM4>:
{
 81800b8:	b580      	push	{r7, lr}
 81800ba:	af00      	add	r7, sp, #0
        IdleThread_CM4();
 81800bc:	f7ff ffb5 	bl	818002a <IdleThread_CM4>
 81800c0:	e7fc      	b.n	81800bc <wrapped_IdleThread_CM4+0x4>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 81800c2:	b480      	push	{r7}
 81800c4:	af00      	add	r7, sp, #0
 81800c6:	bf00      	nop
 81800c8:	46bd      	mov	sp, r7
 81800ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800ce:	4770      	bx	lr

081800d0 <wrapped_Thread_Core_1>:
{
 81800d0:	b580      	push	{r7, lr}
 81800d2:	af00      	add	r7, sp, #0
        Thread_Core_1();
 81800d4:	f000 f8a6 	bl	8180224 <Thread_Core_1>
 81800d8:	e7fc      	b.n	81800d4 <wrapped_Thread_Core_1+0x4>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 81800da:	b480      	push	{r7}
 81800dc:	af00      	add	r7, sp, #0
 81800de:	bf00      	nop
 81800e0:	46bd      	mov	sp, r7
 81800e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800e6:	4770      	bx	lr

081800e8 <wrapped_Thread_mutex_test_CM4>:
{
 81800e8:	b580      	push	{r7, lr}
 81800ea:	af00      	add	r7, sp, #0
        Thread_mutex_test_CM4();
 81800ec:	f000 f8cc 	bl	8180288 <Thread_mutex_test_CM4>
 81800f0:	e7fc      	b.n	81800ec <wrapped_Thread_mutex_test_CM4+0x4>
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 81800f2:	b480      	push	{r7}
 81800f4:	af00      	add	r7, sp, #0
 81800f6:	bf00      	nop
 81800f8:	46bd      	mov	sp, r7
 81800fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81800fe:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 8180100:	b480      	push	{r7}
 8180102:	af00      	add	r7, sp, #0
 8180104:	bf00      	nop
 8180106:	46bd      	mov	sp, r7
 8180108:	f85d 7b04 	ldr.w	r7, [sp], #4
 818010c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 818010e:	b480      	push	{r7}
 8180110:	af00      	add	r7, sp, #0
 8180112:	bf00      	nop
 8180114:	46bd      	mov	sp, r7
 8180116:	f85d 7b04 	ldr.w	r7, [sp], #4
 818011a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 818011c:	b480      	push	{r7}
 818011e:	af00      	add	r7, sp, #0
 8180120:	bf00      	nop
 8180122:	46bd      	mov	sp, r7
 8180124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180128:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 818012a:	b480      	push	{r7}
 818012c:	af00      	add	r7, sp, #0
 818012e:	bf00      	nop
 8180130:	46bd      	mov	sp, r7
 8180132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180136:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 8180138:	b480      	push	{r7}
 818013a:	af00      	add	r7, sp, #0
 818013c:	bf00      	nop
 818013e:	46bd      	mov	sp, r7
 8180140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180144:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Idle_CM4(void){};
 8180146:	b480      	push	{r7}
 8180148:	af00      	add	r7, sp, #0
 818014a:	bf00      	nop
 818014c:	46bd      	mov	sp, r7
 818014e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180152:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void sysJobs_CM4(void){};
 8180154:	b480      	push	{r7}
 8180156:	af00      	add	r7, sp, #0
 8180158:	bf00      	nop
 818015a:	46bd      	mov	sp, r7
 818015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180160:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Task_0_Core_1_Handler(void){};
 8180162:	b480      	push	{r7}
 8180164:	af00      	add	r7, sp, #0
 8180166:	bf00      	nop
 8180168:	46bd      	mov	sp, r7
 818016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 818016e:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void IdleThread_CM4(void){};
 8180170:	b480      	push	{r7}
 8180172:	af00      	add	r7, sp, #0
 8180174:	bf00      	nop
 8180176:	46bd      	mov	sp, r7
 8180178:	f85d 7b04 	ldr.w	r7, [sp], #4
 818017c:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_Core_1(void){};
 818017e:	b480      	push	{r7}
 8180180:	af00      	add	r7, sp, #0
 8180182:	bf00      	nop
 8180184:	46bd      	mov	sp, r7
 8180186:	f85d 7b04 	ldr.w	r7, [sp], #4
 818018a:	4770      	bx	lr
__APPLICATION_FUNC_SECTION_CM4 __WEAK void Thread_mutex_test_CM4(void){};
 818018c:	b480      	push	{r7}
 818018e:	af00      	add	r7, sp, #0
 8180190:	bf00      	nop
 8180192:	46bd      	mov	sp, r7
 8180194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8180198:	4770      	bx	lr

0818019a <userKernelPanicHook_CM4>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void userKernelPanicHook_CM4(void)
{
 818019a:	b480      	push	{r7}
 818019c:	af00      	add	r7, sp, #0

/********************************************************************************
** stop_name =userKernelPanicHook_CM4.cfunc
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 818019e:	bf00      	nop
 81801a0:	46bd      	mov	sp, r7
 81801a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81801a6:	4770      	bx	lr

081801a8 <Task_0_Core_1_Handler>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Task_0_Core_1_Handler(void)
{
 81801a8:	b580      	push	{r7, lr}
 81801aa:	b084      	sub	sp, #16
 81801ac:	af00      	add	r7, sp, #0
	CosmOS_BufferStateType bufferState;
	CosmOS_MutexStateType mutexState;

	//cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove

	bufferReader_cm4 = 100;
 81801ae:	4b1a      	ldr	r3, [pc, #104]	; (8180218 <Task_0_Core_1_Handler+0x70>)
 81801b0:	2264      	movs	r2, #100	; 0x64
 81801b2:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_write_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 81801b4:	2204      	movs	r2, #4
 81801b6:	4918      	ldr	r1, [pc, #96]	; (8180218 <Task_0_Core_1_Handler+0x70>)
 81801b8:	200b      	movs	r0, #11
 81801ba:	f783 f9a2 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 81801be:	4603      	mov	r3, r0
 81801c0:	73fb      	strb	r3, [r7, #15]

	bufferReader_cm4 = 0;
 81801c2:	4b15      	ldr	r3, [pc, #84]	; (8180218 <Task_0_Core_1_Handler+0x70>)
 81801c4:	2200      	movs	r2, #0
 81801c6:	601a      	str	r2, [r3, #0]
	bufferState = cosmosApi_read_buffer_x_core_buffer_1(&bufferReader_cm4,sizeof(bufferReader_cm4));
 81801c8:	2204      	movs	r2, #4
 81801ca:	4913      	ldr	r1, [pc, #76]	; (8180218 <Task_0_Core_1_Handler+0x70>)
 81801cc:	200a      	movs	r0, #10
 81801ce:	f783 f998 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
 81801d2:	4603      	mov	r3, r0
 81801d4:	73fb      	strb	r3, [r7, #15]

	spinlockState = cosmosApi_try_spinlock_uart_buffer_read();
 81801d6:	2001      	movs	r0, #1
 81801d8:	f783 f977 	bl	81034ca <sysCalls_bitWidthType_ret_bitWidthType>
 81801dc:	4603      	mov	r3, r0
 81801de:	60bb      	str	r3, [r7, #8]
	spinlockState = cosmosApi_release_spinlock_uart_buffer_read();
 81801e0:	2002      	movs	r0, #2
 81801e2:	f783 f972 	bl	81034ca <sysCalls_bitWidthType_ret_bitWidthType>
 81801e6:	4603      	mov	r3, r0
 81801e8:	60bb      	str	r3, [r7, #8]

	mutexState = mutex_getMutex(&resourcesMutex); //trying if kernel will return err cause task cannot use mutexes
 81801ea:	480c      	ldr	r0, [pc, #48]	; (818021c <Task_0_Core_1_Handler+0x74>)
 81801ec:	f782 f906 	bl	81023fc <mutex_getMutex>
 81801f0:	4603      	mov	r3, r0
 81801f2:	607b      	str	r3, [r7, #4]

	if ( counter_cm4 > 100 )
 81801f4:	4b0a      	ldr	r3, [pc, #40]	; (8180220 <Task_0_Core_1_Handler+0x78>)
 81801f6:	681b      	ldr	r3, [r3, #0]
 81801f8:	2b64      	cmp	r3, #100	; 0x64
 81801fa:	dd03      	ble.n	8180204 <Task_0_Core_1_Handler+0x5c>
	{
		counter_cm4 = 0;
 81801fc:	4b08      	ldr	r3, [pc, #32]	; (8180220 <Task_0_Core_1_Handler+0x78>)
 81801fe:	2200      	movs	r2, #0
 8180200:	601a      	str	r2, [r3, #0]
	__SUPRESS_UNUSED_VAR(bufferState);
/********************************************************************************
** stop_name =Task_0_Core_1_Handler
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8180202:	e004      	b.n	818020e <Task_0_Core_1_Handler+0x66>
		counter_cm4++;
 8180204:	4b06      	ldr	r3, [pc, #24]	; (8180220 <Task_0_Core_1_Handler+0x78>)
 8180206:	681b      	ldr	r3, [r3, #0]
 8180208:	3301      	adds	r3, #1
 818020a:	4a05      	ldr	r2, [pc, #20]	; (8180220 <Task_0_Core_1_Handler+0x78>)
 818020c:	6013      	str	r3, [r2, #0]
};
 818020e:	bf00      	nop
 8180210:	3710      	adds	r7, #16
 8180212:	46bd      	mov	sp, r7
 8180214:	bd80      	pop	{r7, pc}
 8180216:	bf00      	nop
 8180218:	1000180c 	.word	0x1000180c
 818021c:	10001810 	.word	0x10001810
 8180220:	10001808 	.word	0x10001808

08180224 <Thread_Core_1>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Thread_Core_1(void)
{
 8180224:	b580      	push	{r7, lr}
 8180226:	b084      	sub	sp, #16
 8180228:	af00      	add	r7, sp, #0
** start_name =Thread_Core_1
********************************************************************************/
	CosmOS_SleepStateType sleepState;
	CosmOS_MutexStateType mutexState;

	int *integerPointer = new int(100);
 818022a:	2004      	movs	r0, #4
 818022c:	f78b f96e 	bl	810b50c <_Znwj>
 8180230:	4603      	mov	r3, r0
 8180232:	2264      	movs	r2, #100	; 0x64
 8180234:	601a      	str	r2, [r3, #0]
 8180236:	60fb      	str	r3, [r7, #12]
	delete integerPointer;
 8180238:	68fb      	ldr	r3, [r7, #12]
 818023a:	2b00      	cmp	r3, #0
 818023c:	d003      	beq.n	8180246 <Thread_Core_1+0x22>
 818023e:	2104      	movs	r1, #4
 8180240:	4618      	mov	r0, r3
 8180242:	f78b f977 	bl	810b534 <_ZdlPvj>

	//sleepState = thread_sleepMs(1);
	//cosmosApi_deviceIO_togglePin(GPIOB, GPIO_PIN_0); //GREEN LED

	mutexState = mutex_getMutex(&resourcesMutex);
 8180246:	480e      	ldr	r0, [pc, #56]	; (8180280 <Thread_Core_1+0x5c>)
 8180248:	f782 f8d8 	bl	81023fc <mutex_getMutex>
 818024c:	4603      	mov	r3, r0
 818024e:	60bb      	str	r3, [r7, #8]
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 8180250:	2210      	movs	r2, #16
 8180252:	490c      	ldr	r1, [pc, #48]	; (8180284 <Thread_Core_1+0x60>)
 8180254:	200e      	movs	r0, #14
 8180256:	f783 f954 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	sleepState = thread_sleepMs(10);
 818025a:	200a      	movs	r0, #10
 818025c:	f783 fa42 	bl	81036e4 <thread_sleepMs>
 8180260:	4603      	mov	r3, r0
 8180262:	71fb      	strb	r3, [r7, #7]
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 8180264:	2210      	movs	r2, #16
 8180266:	4907      	ldr	r1, [pc, #28]	; (8180284 <Thread_Core_1+0x60>)
 8180268:	200e      	movs	r0, #14
 818026a:	f783 f94a 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	mutexState = mutex_releaseMutex(&resourcesMutex);
 818026e:	4804      	ldr	r0, [pc, #16]	; (8180280 <Thread_Core_1+0x5c>)
 8180270:	f782 f9c7 	bl	8102602 <mutex_releaseMutex>
 8180274:	4603      	mov	r3, r0
 8180276:	60bb      	str	r3, [r7, #8]
	__SUPRESS_UNUSED_VAR(sleepState);
/********************************************************************************
** stop_name =Thread_Core_1
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 8180278:	bf00      	nop
 818027a:	3710      	adds	r7, #16
 818027c:	46bd      	mov	sp, r7
 818027e:	bd80      	pop	{r7, pc}
 8180280:	10001810 	.word	0x10001810
 8180284:	58020000 	.word	0x58020000

08180288 <Thread_mutex_test_CM4>:
********************************************************************************/
/* @cond S */
__SEC_START(__APPLICATION_FUNC_SECTION_START_CM4)
/* @endcond*/
__APPLICATION_FUNC_SECTION_CM4 void Thread_mutex_test_CM4(void)
{
 8180288:	b580      	push	{r7, lr}
 818028a:	b082      	sub	sp, #8
 818028c:	af00      	add	r7, sp, #0
** start_name =Thread_mutex_test_CM4
********************************************************************************/
	CosmOS_MutexStateType mutexState;
	CosmOS_SleepStateType sleepState;

	mutexState = mutex_getMutex(&resourcesMutex);
 818028e:	4811      	ldr	r0, [pc, #68]	; (81802d4 <Thread_mutex_test_CM4+0x4c>)
 8180290:	f782 f8b4 	bl	81023fc <mutex_getMutex>
 8180294:	4603      	mov	r3, r0
 8180296:	607b      	str	r3, [r7, #4]
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 8180298:	2210      	movs	r2, #16
 818029a:	490f      	ldr	r1, [pc, #60]	; (81802d8 <Thread_mutex_test_CM4+0x50>)
 818029c:	200e      	movs	r0, #14
 818029e:	f783 f930 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	sleepState = thread_sleepMs(100);
 81802a2:	2064      	movs	r0, #100	; 0x64
 81802a4:	f783 fa1e 	bl	81036e4 <thread_sleepMs>
 81802a8:	4603      	mov	r3, r0
 81802aa:	70fb      	strb	r3, [r7, #3]
	cosmosApi_deviceIO_togglePin(GPIOA, GPIO_PIN_4); //Timing measurement with logic analyzer, pls dont remove
 81802ac:	2210      	movs	r2, #16
 81802ae:	490a      	ldr	r1, [pc, #40]	; (81802d8 <Thread_mutex_test_CM4+0x50>)
 81802b0:	200e      	movs	r0, #14
 81802b2:	f783 f926 	bl	8103502 <sysCalls_bitWidthType_voidPtr_bitWidthType_ret_bitWidthType>
	mutexState = mutex_releaseMutex(&resourcesMutex);
 81802b6:	4807      	ldr	r0, [pc, #28]	; (81802d4 <Thread_mutex_test_CM4+0x4c>)
 81802b8:	f782 f9a3 	bl	8102602 <mutex_releaseMutex>
 81802bc:	4603      	mov	r3, r0
 81802be:	607b      	str	r3, [r7, #4]
	sleepState = thread_sleepMs(500);
 81802c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 81802c4:	f783 fa0e 	bl	81036e4 <thread_sleepMs>
 81802c8:	4603      	mov	r3, r0
 81802ca:	70fb      	strb	r3, [r7, #3]
	__SUPRESS_UNUSED_VAR(sleepState);
/********************************************************************************
** stop_name =Thread_mutex_test_CM4
** DO NOT MODIFY THIS COMMENT !                      USER SECTION | Stop       **
********************************************************************************/
};
 81802cc:	bf00      	nop
 81802ce:	3708      	adds	r7, #8
 81802d0:	46bd      	mov	sp, r7
 81802d2:	bd80      	pop	{r7, pc}
 81802d4:	10001810 	.word	0x10001810
 81802d8:	58020000 	.word	0x58020000

Disassembly of section .text:

08108000 <__do_global_dtors_aux>:
 8108000:	b510      	push	{r4, lr}
 8108002:	4c05      	ldr	r4, [pc, #20]	; (8108018 <_e_os_section_funcs+0x18>)
 8108004:	7823      	ldrb	r3, [r4, #0]
 8108006:	b933      	cbnz	r3, 8108016 <__do_global_dtors_aux+0x16>
 8108008:	4b04      	ldr	r3, [pc, #16]	; (810801c <_e_os_section_funcs+0x1c>)
 810800a:	b113      	cbz	r3, 8108012 <__do_global_dtors_aux+0x12>
 810800c:	4804      	ldr	r0, [pc, #16]	; (8108020 <_e_os_section_funcs+0x20>)
 810800e:	f3af 8000 	nop.w
 8108012:	2301      	movs	r3, #1
 8108014:	7023      	strb	r3, [r4, #0]
 8108016:	bd10      	pop	{r4, pc}
 8108018:	3004007c 	.word	0x3004007c
 810801c:	00000000 	.word	0x00000000
 8108020:	0810c040 	.word	0x0810c040

08108024 <frame_dummy>:
 8108024:	b508      	push	{r3, lr}
 8108026:	4b03      	ldr	r3, [pc, #12]	; (8108034 <frame_dummy+0x10>)
 8108028:	b11b      	cbz	r3, 8108032 <frame_dummy+0xe>
 810802a:	4903      	ldr	r1, [pc, #12]	; (8108038 <frame_dummy+0x14>)
 810802c:	4803      	ldr	r0, [pc, #12]	; (810803c <frame_dummy+0x18>)
 810802e:	f3af 8000 	nop.w
 8108032:	bd08      	pop	{r3, pc}
 8108034:	00000000 	.word	0x00000000
 8108038:	30040080 	.word	0x30040080
 810803c:	0810c040 	.word	0x0810c040

08108040 <strcmp>:
 8108040:	f810 2b01 	ldrb.w	r2, [r0], #1
 8108044:	f811 3b01 	ldrb.w	r3, [r1], #1
 8108048:	2a01      	cmp	r2, #1
 810804a:	bf28      	it	cs
 810804c:	429a      	cmpcs	r2, r3
 810804e:	d0f7      	beq.n	8108040 <strcmp>
 8108050:	1ad0      	subs	r0, r2, r3
 8108052:	4770      	bx	lr

08108054 <selfrel_offset31>:
 8108054:	6803      	ldr	r3, [r0, #0]
 8108056:	005a      	lsls	r2, r3, #1
 8108058:	bf4c      	ite	mi
 810805a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 810805e:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8108062:	4418      	add	r0, r3
 8108064:	4770      	bx	lr
 8108066:	bf00      	nop

08108068 <search_EIT_table>:
 8108068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810806c:	b329      	cbz	r1, 81080ba <search_EIT_table+0x52>
 810806e:	1e4f      	subs	r7, r1, #1
 8108070:	4604      	mov	r4, r0
 8108072:	4615      	mov	r5, r2
 8108074:	463e      	mov	r6, r7
 8108076:	f04f 0800 	mov.w	r8, #0
 810807a:	eb08 0106 	add.w	r1, r8, r6
 810807e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8108082:	1049      	asrs	r1, r1, #1
 8108084:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8108088:	4648      	mov	r0, r9
 810808a:	f7ff ffe3 	bl	8108054 <selfrel_offset31>
 810808e:	4603      	mov	r3, r0
 8108090:	00c8      	lsls	r0, r1, #3
 8108092:	3008      	adds	r0, #8
 8108094:	428f      	cmp	r7, r1
 8108096:	4420      	add	r0, r4
 8108098:	d009      	beq.n	81080ae <search_EIT_table+0x46>
 810809a:	42ab      	cmp	r3, r5
 810809c:	d809      	bhi.n	81080b2 <search_EIT_table+0x4a>
 810809e:	f7ff ffd9 	bl	8108054 <selfrel_offset31>
 81080a2:	3801      	subs	r0, #1
 81080a4:	42a8      	cmp	r0, r5
 81080a6:	d20a      	bcs.n	81080be <search_EIT_table+0x56>
 81080a8:	f101 0801 	add.w	r8, r1, #1
 81080ac:	e7e5      	b.n	810807a <search_EIT_table+0x12>
 81080ae:	42ab      	cmp	r3, r5
 81080b0:	d905      	bls.n	81080be <search_EIT_table+0x56>
 81080b2:	4588      	cmp	r8, r1
 81080b4:	d001      	beq.n	81080ba <search_EIT_table+0x52>
 81080b6:	1e4e      	subs	r6, r1, #1
 81080b8:	e7df      	b.n	810807a <search_EIT_table+0x12>
 81080ba:	f04f 0900 	mov.w	r9, #0
 81080be:	4648      	mov	r0, r9
 81080c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

081080c4 <__gnu_unwind_get_pr_addr>:
 81080c4:	2801      	cmp	r0, #1
 81080c6:	d007      	beq.n	81080d8 <__gnu_unwind_get_pr_addr+0x14>
 81080c8:	2802      	cmp	r0, #2
 81080ca:	d007      	beq.n	81080dc <__gnu_unwind_get_pr_addr+0x18>
 81080cc:	4b04      	ldr	r3, [pc, #16]	; (81080e0 <__gnu_unwind_get_pr_addr+0x1c>)
 81080ce:	2800      	cmp	r0, #0
 81080d0:	bf0c      	ite	eq
 81080d2:	4618      	moveq	r0, r3
 81080d4:	2000      	movne	r0, #0
 81080d6:	4770      	bx	lr
 81080d8:	4802      	ldr	r0, [pc, #8]	; (81080e4 <__gnu_unwind_get_pr_addr+0x20>)
 81080da:	4770      	bx	lr
 81080dc:	4802      	ldr	r0, [pc, #8]	; (81080e8 <__gnu_unwind_get_pr_addr+0x24>)
 81080de:	4770      	bx	lr
 81080e0:	08108789 	.word	0x08108789
 81080e4:	0810878d 	.word	0x0810878d
 81080e8:	08108791 	.word	0x08108791

081080ec <get_eit_entry>:
 81080ec:	b530      	push	{r4, r5, lr}
 81080ee:	4b23      	ldr	r3, [pc, #140]	; (810817c <get_eit_entry+0x90>)
 81080f0:	b083      	sub	sp, #12
 81080f2:	4604      	mov	r4, r0
 81080f4:	1e8d      	subs	r5, r1, #2
 81080f6:	b33b      	cbz	r3, 8108148 <get_eit_entry+0x5c>
 81080f8:	a901      	add	r1, sp, #4
 81080fa:	4628      	mov	r0, r5
 81080fc:	f3af 8000 	nop.w
 8108100:	b1e8      	cbz	r0, 810813e <get_eit_entry+0x52>
 8108102:	9901      	ldr	r1, [sp, #4]
 8108104:	462a      	mov	r2, r5
 8108106:	f7ff ffaf 	bl	8108068 <search_EIT_table>
 810810a:	4601      	mov	r1, r0
 810810c:	b1b8      	cbz	r0, 810813e <get_eit_entry+0x52>
 810810e:	f7ff ffa1 	bl	8108054 <selfrel_offset31>
 8108112:	684b      	ldr	r3, [r1, #4]
 8108114:	64a0      	str	r0, [r4, #72]	; 0x48
 8108116:	2b01      	cmp	r3, #1
 8108118:	d02b      	beq.n	8108172 <get_eit_entry+0x86>
 810811a:	2b00      	cmp	r3, #0
 810811c:	f101 0004 	add.w	r0, r1, #4
 8108120:	db23      	blt.n	810816a <get_eit_entry+0x7e>
 8108122:	f7ff ff97 	bl	8108054 <selfrel_offset31>
 8108126:	2300      	movs	r3, #0
 8108128:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 810812c:	6803      	ldr	r3, [r0, #0]
 810812e:	2b00      	cmp	r3, #0
 8108130:	db10      	blt.n	8108154 <get_eit_entry+0x68>
 8108132:	f7ff ff8f 	bl	8108054 <selfrel_offset31>
 8108136:	6120      	str	r0, [r4, #16]
 8108138:	2000      	movs	r0, #0
 810813a:	b003      	add	sp, #12
 810813c:	bd30      	pop	{r4, r5, pc}
 810813e:	2300      	movs	r3, #0
 8108140:	2009      	movs	r0, #9
 8108142:	6123      	str	r3, [r4, #16]
 8108144:	b003      	add	sp, #12
 8108146:	bd30      	pop	{r4, r5, pc}
 8108148:	490d      	ldr	r1, [pc, #52]	; (8108180 <get_eit_entry+0x94>)
 810814a:	480e      	ldr	r0, [pc, #56]	; (8108184 <get_eit_entry+0x98>)
 810814c:	1a09      	subs	r1, r1, r0
 810814e:	10c9      	asrs	r1, r1, #3
 8108150:	9101      	str	r1, [sp, #4]
 8108152:	e7d7      	b.n	8108104 <get_eit_entry+0x18>
 8108154:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8108158:	f7ff ffb4 	bl	81080c4 <__gnu_unwind_get_pr_addr>
 810815c:	2800      	cmp	r0, #0
 810815e:	6120      	str	r0, [r4, #16]
 8108160:	bf14      	ite	ne
 8108162:	2000      	movne	r0, #0
 8108164:	2009      	moveq	r0, #9
 8108166:	b003      	add	sp, #12
 8108168:	bd30      	pop	{r4, r5, pc}
 810816a:	2301      	movs	r3, #1
 810816c:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8108170:	e7dc      	b.n	810812c <get_eit_entry+0x40>
 8108172:	2300      	movs	r3, #0
 8108174:	6123      	str	r3, [r4, #16]
 8108176:	2005      	movs	r0, #5
 8108178:	e7df      	b.n	810813a <get_eit_entry+0x4e>
 810817a:	bf00      	nop
 810817c:	00000000 	.word	0x00000000
 8108180:	0810c3dc 	.word	0x0810c3dc
 8108184:	0810c2bc 	.word	0x0810c2bc

08108188 <restore_non_core_regs>:
 8108188:	6803      	ldr	r3, [r0, #0]
 810818a:	07da      	lsls	r2, r3, #31
 810818c:	b510      	push	{r4, lr}
 810818e:	4604      	mov	r4, r0
 8108190:	d406      	bmi.n	81081a0 <restore_non_core_regs+0x18>
 8108192:	079b      	lsls	r3, r3, #30
 8108194:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8108198:	d509      	bpl.n	81081ae <restore_non_core_regs+0x26>
 810819a:	f000 fc4b 	bl	8108a34 <__gnu_Unwind_Restore_VFP_D>
 810819e:	6823      	ldr	r3, [r4, #0]
 81081a0:	0759      	lsls	r1, r3, #29
 81081a2:	d509      	bpl.n	81081b8 <restore_non_core_regs+0x30>
 81081a4:	071a      	lsls	r2, r3, #28
 81081a6:	d50e      	bpl.n	81081c6 <restore_non_core_regs+0x3e>
 81081a8:	06db      	lsls	r3, r3, #27
 81081aa:	d513      	bpl.n	81081d4 <restore_non_core_regs+0x4c>
 81081ac:	bd10      	pop	{r4, pc}
 81081ae:	f000 fc39 	bl	8108a24 <__gnu_Unwind_Restore_VFP>
 81081b2:	6823      	ldr	r3, [r4, #0]
 81081b4:	0759      	lsls	r1, r3, #29
 81081b6:	d4f5      	bmi.n	81081a4 <restore_non_core_regs+0x1c>
 81081b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 81081bc:	f000 fc42 	bl	8108a44 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 81081c0:	6823      	ldr	r3, [r4, #0]
 81081c2:	071a      	lsls	r2, r3, #28
 81081c4:	d4f0      	bmi.n	81081a8 <restore_non_core_regs+0x20>
 81081c6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 81081ca:	f000 fc43 	bl	8108a54 <__gnu_Unwind_Restore_WMMXD>
 81081ce:	6823      	ldr	r3, [r4, #0]
 81081d0:	06db      	lsls	r3, r3, #27
 81081d2:	d4eb      	bmi.n	81081ac <restore_non_core_regs+0x24>
 81081d4:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 81081d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81081dc:	f000 bc7e 	b.w	8108adc <__gnu_Unwind_Restore_WMMXC>

081081e0 <_Unwind_decode_typeinfo_ptr.isra.0>:
 81081e0:	4603      	mov	r3, r0
 81081e2:	6800      	ldr	r0, [r0, #0]
 81081e4:	b100      	cbz	r0, 81081e8 <_Unwind_decode_typeinfo_ptr.isra.0+0x8>
 81081e6:	4418      	add	r0, r3
 81081e8:	4770      	bx	lr
 81081ea:	bf00      	nop

081081ec <__gnu_unwind_24bit.isra.0>:
 81081ec:	2009      	movs	r0, #9
 81081ee:	4770      	bx	lr

081081f0 <_Unwind_DebugHook>:
 81081f0:	4770      	bx	lr
 81081f2:	bf00      	nop

081081f4 <unwind_phase2>:
 81081f4:	b570      	push	{r4, r5, r6, lr}
 81081f6:	4604      	mov	r4, r0
 81081f8:	460e      	mov	r6, r1
 81081fa:	6c31      	ldr	r1, [r6, #64]	; 0x40
 81081fc:	4620      	mov	r0, r4
 81081fe:	f7ff ff75 	bl	81080ec <get_eit_entry>
 8108202:	4605      	mov	r5, r0
 8108204:	b988      	cbnz	r0, 810822a <unwind_phase2+0x36>
 8108206:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8108208:	6163      	str	r3, [r4, #20]
 810820a:	4632      	mov	r2, r6
 810820c:	6923      	ldr	r3, [r4, #16]
 810820e:	4621      	mov	r1, r4
 8108210:	2001      	movs	r0, #1
 8108212:	4798      	blx	r3
 8108214:	2808      	cmp	r0, #8
 8108216:	d0f0      	beq.n	81081fa <unwind_phase2+0x6>
 8108218:	2807      	cmp	r0, #7
 810821a:	d106      	bne.n	810822a <unwind_phase2+0x36>
 810821c:	4628      	mov	r0, r5
 810821e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8108220:	f7ff ffe6 	bl	81081f0 <_Unwind_DebugHook>
 8108224:	1d30      	adds	r0, r6, #4
 8108226:	f000 fbf1 	bl	8108a0c <__restore_core_regs>
 810822a:	f003 fe73 	bl	810bf14 <abort>
 810822e:	bf00      	nop

08108230 <unwind_phase2_forced>:
 8108230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108234:	1d0d      	adds	r5, r1, #4
 8108236:	4606      	mov	r6, r0
 8108238:	4614      	mov	r4, r2
 810823a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810823c:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8108240:	f10d 0c0c 	add.w	ip, sp, #12
 8108244:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8108248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810824a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 810824e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8108254:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8108258:	ad02      	add	r5, sp, #8
 810825a:	68f7      	ldr	r7, [r6, #12]
 810825c:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8108260:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8108264:	2300      	movs	r3, #0
 8108266:	602b      	str	r3, [r5, #0]
 8108268:	e021      	b.n	81082ae <unwind_phase2_forced+0x7e>
 810826a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 810826c:	6173      	str	r3, [r6, #20]
 810826e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8108272:	4629      	mov	r1, r5
 8108274:	a87a      	add	r0, sp, #488	; 0x1e8
 8108276:	f003 fec3 	bl	810c000 <memcpy>
 810827a:	6933      	ldr	r3, [r6, #16]
 810827c:	aa7a      	add	r2, sp, #488	; 0x1e8
 810827e:	4631      	mov	r1, r6
 8108280:	4650      	mov	r0, sl
 8108282:	4798      	blx	r3
 8108284:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8108286:	e9cd 5800 	strd	r5, r8, [sp]
 810828a:	4621      	mov	r1, r4
 810828c:	646b      	str	r3, [r5, #68]	; 0x44
 810828e:	4681      	mov	r9, r0
 8108290:	4633      	mov	r3, r6
 8108292:	4632      	mov	r2, r6
 8108294:	2001      	movs	r0, #1
 8108296:	47b8      	blx	r7
 8108298:	4604      	mov	r4, r0
 810829a:	b9e8      	cbnz	r0, 81082d8 <unwind_phase2_forced+0xa8>
 810829c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 81082a0:	a97a      	add	r1, sp, #488	; 0x1e8
 81082a2:	4628      	mov	r0, r5
 81082a4:	f003 feac 	bl	810c000 <memcpy>
 81082a8:	f1b9 0f08 	cmp.w	r9, #8
 81082ac:	d11b      	bne.n	81082e6 <unwind_phase2_forced+0xb6>
 81082ae:	6c29      	ldr	r1, [r5, #64]	; 0x40
 81082b0:	4630      	mov	r0, r6
 81082b2:	f7ff ff1b 	bl	81080ec <get_eit_entry>
 81082b6:	3409      	adds	r4, #9
 81082b8:	fa5f fa84 	uxtb.w	sl, r4
 81082bc:	4681      	mov	r9, r0
 81082be:	2800      	cmp	r0, #0
 81082c0:	d0d3      	beq.n	810826a <unwind_phase2_forced+0x3a>
 81082c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 81082c4:	f04a 0110 	orr.w	r1, sl, #16
 81082c8:	e9cd 5800 	strd	r5, r8, [sp]
 81082cc:	4632      	mov	r2, r6
 81082ce:	646b      	str	r3, [r5, #68]	; 0x44
 81082d0:	2001      	movs	r0, #1
 81082d2:	4633      	mov	r3, r6
 81082d4:	47b8      	blx	r7
 81082d6:	b108      	cbz	r0, 81082dc <unwind_phase2_forced+0xac>
 81082d8:	f04f 0909 	mov.w	r9, #9
 81082dc:	4648      	mov	r0, r9
 81082de:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 81082e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81082e6:	f1b9 0f07 	cmp.w	r9, #7
 81082ea:	d1f5      	bne.n	81082d8 <unwind_phase2_forced+0xa8>
 81082ec:	4620      	mov	r0, r4
 81082ee:	6c29      	ldr	r1, [r5, #64]	; 0x40
 81082f0:	f7ff ff7e 	bl	81081f0 <_Unwind_DebugHook>
 81082f4:	a803      	add	r0, sp, #12
 81082f6:	f000 fb89 	bl	8108a0c <__restore_core_regs>
 81082fa:	bf00      	nop

081082fc <_Unwind_GetCFA>:
 81082fc:	6c40      	ldr	r0, [r0, #68]	; 0x44
 81082fe:	4770      	bx	lr

08108300 <__gnu_Unwind_RaiseException>:
 8108300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8108302:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8108304:	640b      	str	r3, [r1, #64]	; 0x40
 8108306:	1d0e      	adds	r6, r1, #4
 8108308:	460f      	mov	r7, r1
 810830a:	4605      	mov	r5, r0
 810830c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 810830e:	b0f9      	sub	sp, #484	; 0x1e4
 8108310:	ac01      	add	r4, sp, #4
 8108312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108314:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8108316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108318:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 810831a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810831c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8108320:	f04f 36ff 	mov.w	r6, #4294967295
 8108324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8108328:	9600      	str	r6, [sp, #0]
 810832a:	e006      	b.n	810833a <__gnu_Unwind_RaiseException+0x3a>
 810832c:	692b      	ldr	r3, [r5, #16]
 810832e:	466a      	mov	r2, sp
 8108330:	4629      	mov	r1, r5
 8108332:	4798      	blx	r3
 8108334:	2808      	cmp	r0, #8
 8108336:	4604      	mov	r4, r0
 8108338:	d108      	bne.n	810834c <__gnu_Unwind_RaiseException+0x4c>
 810833a:	9910      	ldr	r1, [sp, #64]	; 0x40
 810833c:	4628      	mov	r0, r5
 810833e:	f7ff fed5 	bl	81080ec <get_eit_entry>
 8108342:	2800      	cmp	r0, #0
 8108344:	d0f2      	beq.n	810832c <__gnu_Unwind_RaiseException+0x2c>
 8108346:	2009      	movs	r0, #9
 8108348:	b079      	add	sp, #484	; 0x1e4
 810834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810834c:	4668      	mov	r0, sp
 810834e:	f7ff ff1b 	bl	8108188 <restore_non_core_regs>
 8108352:	2c06      	cmp	r4, #6
 8108354:	d1f7      	bne.n	8108346 <__gnu_Unwind_RaiseException+0x46>
 8108356:	4639      	mov	r1, r7
 8108358:	4628      	mov	r0, r5
 810835a:	f7ff ff4b 	bl	81081f4 <unwind_phase2>
 810835e:	bf00      	nop

08108360 <__gnu_Unwind_ForcedUnwind>:
 8108360:	b430      	push	{r4, r5}
 8108362:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8108364:	60c1      	str	r1, [r0, #12]
 8108366:	6182      	str	r2, [r0, #24]
 8108368:	4619      	mov	r1, r3
 810836a:	641d      	str	r5, [r3, #64]	; 0x40
 810836c:	2200      	movs	r2, #0
 810836e:	bc30      	pop	{r4, r5}
 8108370:	e75e      	b.n	8108230 <unwind_phase2_forced>
 8108372:	bf00      	nop

08108374 <__gnu_Unwind_Resume>:
 8108374:	b570      	push	{r4, r5, r6, lr}
 8108376:	68c6      	ldr	r6, [r0, #12]
 8108378:	6943      	ldr	r3, [r0, #20]
 810837a:	640b      	str	r3, [r1, #64]	; 0x40
 810837c:	b9ae      	cbnz	r6, 81083aa <__gnu_Unwind_Resume+0x36>
 810837e:	6903      	ldr	r3, [r0, #16]
 8108380:	460a      	mov	r2, r1
 8108382:	4604      	mov	r4, r0
 8108384:	460d      	mov	r5, r1
 8108386:	4601      	mov	r1, r0
 8108388:	2002      	movs	r0, #2
 810838a:	4798      	blx	r3
 810838c:	2807      	cmp	r0, #7
 810838e:	d005      	beq.n	810839c <__gnu_Unwind_Resume+0x28>
 8108390:	2808      	cmp	r0, #8
 8108392:	d10f      	bne.n	81083b4 <__gnu_Unwind_Resume+0x40>
 8108394:	4629      	mov	r1, r5
 8108396:	4620      	mov	r0, r4
 8108398:	f7ff ff2c 	bl	81081f4 <unwind_phase2>
 810839c:	4630      	mov	r0, r6
 810839e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 81083a0:	f7ff ff26 	bl	81081f0 <_Unwind_DebugHook>
 81083a4:	1d28      	adds	r0, r5, #4
 81083a6:	f000 fb31 	bl	8108a0c <__restore_core_regs>
 81083aa:	2201      	movs	r2, #1
 81083ac:	f7ff ff40 	bl	8108230 <unwind_phase2_forced>
 81083b0:	f003 fdb0 	bl	810bf14 <abort>
 81083b4:	f003 fdae 	bl	810bf14 <abort>

081083b8 <__gnu_Unwind_Resume_or_Rethrow>:
 81083b8:	68c2      	ldr	r2, [r0, #12]
 81083ba:	b11a      	cbz	r2, 81083c4 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 81083bc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 81083be:	640a      	str	r2, [r1, #64]	; 0x40
 81083c0:	2200      	movs	r2, #0
 81083c2:	e735      	b.n	8108230 <unwind_phase2_forced>
 81083c4:	e79c      	b.n	8108300 <__gnu_Unwind_RaiseException>
 81083c6:	bf00      	nop

081083c8 <_Unwind_Complete>:
 81083c8:	4770      	bx	lr
 81083ca:	bf00      	nop

081083cc <_Unwind_DeleteException>:
 81083cc:	6883      	ldr	r3, [r0, #8]
 81083ce:	4601      	mov	r1, r0
 81083d0:	b10b      	cbz	r3, 81083d6 <_Unwind_DeleteException+0xa>
 81083d2:	2001      	movs	r0, #1
 81083d4:	4718      	bx	r3
 81083d6:	4770      	bx	lr

081083d8 <_Unwind_VRS_Get>:
 81083d8:	2901      	cmp	r1, #1
 81083da:	d012      	beq.n	8108402 <_Unwind_VRS_Get+0x2a>
 81083dc:	d809      	bhi.n	81083f2 <_Unwind_VRS_Get+0x1a>
 81083de:	b973      	cbnz	r3, 81083fe <_Unwind_VRS_Get+0x26>
 81083e0:	2a0f      	cmp	r2, #15
 81083e2:	d80c      	bhi.n	81083fe <_Unwind_VRS_Get+0x26>
 81083e4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 81083e8:	4618      	mov	r0, r3
 81083ea:	6853      	ldr	r3, [r2, #4]
 81083ec:	9a00      	ldr	r2, [sp, #0]
 81083ee:	6013      	str	r3, [r2, #0]
 81083f0:	4770      	bx	lr
 81083f2:	3903      	subs	r1, #3
 81083f4:	2901      	cmp	r1, #1
 81083f6:	bf94      	ite	ls
 81083f8:	2001      	movls	r0, #1
 81083fa:	2002      	movhi	r0, #2
 81083fc:	4770      	bx	lr
 81083fe:	2002      	movs	r0, #2
 8108400:	4770      	bx	lr
 8108402:	4608      	mov	r0, r1
 8108404:	4770      	bx	lr
 8108406:	bf00      	nop

08108408 <_Unwind_GetGR>:
 8108408:	b510      	push	{r4, lr}
 810840a:	b084      	sub	sp, #16
 810840c:	2300      	movs	r3, #0
 810840e:	ac03      	add	r4, sp, #12
 8108410:	460a      	mov	r2, r1
 8108412:	9400      	str	r4, [sp, #0]
 8108414:	4619      	mov	r1, r3
 8108416:	f7ff ffdf 	bl	81083d8 <_Unwind_VRS_Get>
 810841a:	9803      	ldr	r0, [sp, #12]
 810841c:	b004      	add	sp, #16
 810841e:	bd10      	pop	{r4, pc}

08108420 <_Unwind_VRS_Set>:
 8108420:	2901      	cmp	r1, #1
 8108422:	d012      	beq.n	810844a <_Unwind_VRS_Set+0x2a>
 8108424:	d809      	bhi.n	810843a <_Unwind_VRS_Set+0x1a>
 8108426:	b973      	cbnz	r3, 8108446 <_Unwind_VRS_Set+0x26>
 8108428:	2a0f      	cmp	r2, #15
 810842a:	d80c      	bhi.n	8108446 <_Unwind_VRS_Set+0x26>
 810842c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8108430:	9a00      	ldr	r2, [sp, #0]
 8108432:	6812      	ldr	r2, [r2, #0]
 8108434:	6042      	str	r2, [r0, #4]
 8108436:	4618      	mov	r0, r3
 8108438:	4770      	bx	lr
 810843a:	3903      	subs	r1, #3
 810843c:	2901      	cmp	r1, #1
 810843e:	bf94      	ite	ls
 8108440:	2001      	movls	r0, #1
 8108442:	2002      	movhi	r0, #2
 8108444:	4770      	bx	lr
 8108446:	2002      	movs	r0, #2
 8108448:	4770      	bx	lr
 810844a:	4608      	mov	r0, r1
 810844c:	4770      	bx	lr
 810844e:	bf00      	nop

08108450 <_Unwind_SetGR>:
 8108450:	b510      	push	{r4, lr}
 8108452:	b084      	sub	sp, #16
 8108454:	2300      	movs	r3, #0
 8108456:	ac03      	add	r4, sp, #12
 8108458:	9203      	str	r2, [sp, #12]
 810845a:	9400      	str	r4, [sp, #0]
 810845c:	460a      	mov	r2, r1
 810845e:	4619      	mov	r1, r3
 8108460:	f7ff ffde 	bl	8108420 <_Unwind_VRS_Set>
 8108464:	b004      	add	sp, #16
 8108466:	bd10      	pop	{r4, pc}

08108468 <__gnu_Unwind_Backtrace>:
 8108468:	b5f0      	push	{r4, r5, r6, r7, lr}
 810846a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 810846c:	6413      	str	r3, [r2, #64]	; 0x40
 810846e:	1d15      	adds	r5, r2, #4
 8108470:	468c      	mov	ip, r1
 8108472:	4606      	mov	r6, r0
 8108474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108476:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 810847a:	ac17      	add	r4, sp, #92	; 0x5c
 810847c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 810847e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108482:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8108484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8108486:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 810848a:	f04f 37ff 	mov.w	r7, #4294967295
 810848e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8108492:	4665      	mov	r5, ip
 8108494:	9716      	str	r7, [sp, #88]	; 0x58
 8108496:	e010      	b.n	81084ba <__gnu_Unwind_Backtrace+0x52>
 8108498:	f7ff ffda 	bl	8108450 <_Unwind_SetGR>
 810849c:	4629      	mov	r1, r5
 810849e:	a816      	add	r0, sp, #88	; 0x58
 81084a0:	47b0      	blx	r6
 81084a2:	4603      	mov	r3, r0
 81084a4:	aa16      	add	r2, sp, #88	; 0x58
 81084a6:	4669      	mov	r1, sp
 81084a8:	2008      	movs	r0, #8
 81084aa:	b983      	cbnz	r3, 81084ce <__gnu_Unwind_Backtrace+0x66>
 81084ac:	9b04      	ldr	r3, [sp, #16]
 81084ae:	4798      	blx	r3
 81084b0:	2805      	cmp	r0, #5
 81084b2:	4604      	mov	r4, r0
 81084b4:	d00c      	beq.n	81084d0 <__gnu_Unwind_Backtrace+0x68>
 81084b6:	2809      	cmp	r0, #9
 81084b8:	d009      	beq.n	81084ce <__gnu_Unwind_Backtrace+0x66>
 81084ba:	9926      	ldr	r1, [sp, #152]	; 0x98
 81084bc:	4668      	mov	r0, sp
 81084be:	f7ff fe15 	bl	81080ec <get_eit_entry>
 81084c2:	4603      	mov	r3, r0
 81084c4:	466a      	mov	r2, sp
 81084c6:	210c      	movs	r1, #12
 81084c8:	a816      	add	r0, sp, #88	; 0x58
 81084ca:	2b00      	cmp	r3, #0
 81084cc:	d0e4      	beq.n	8108498 <__gnu_Unwind_Backtrace+0x30>
 81084ce:	2409      	movs	r4, #9
 81084d0:	a816      	add	r0, sp, #88	; 0x58
 81084d2:	f7ff fe59 	bl	8108188 <restore_non_core_regs>
 81084d6:	4620      	mov	r0, r4
 81084d8:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 81084dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81084de:	bf00      	nop

081084e0 <__gnu_unwind_pr_common>:
 81084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81084e4:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 81084e6:	b089      	sub	sp, #36	; 0x24
 81084e8:	460d      	mov	r5, r1
 81084ea:	f854 1b04 	ldr.w	r1, [r4], #4
 81084ee:	9406      	str	r4, [sp, #24]
 81084f0:	4617      	mov	r7, r2
 81084f2:	f000 0803 	and.w	r8, r0, #3
 81084f6:	461e      	mov	r6, r3
 81084f8:	2b00      	cmp	r3, #0
 81084fa:	d079      	beq.n	81085f0 <__gnu_unwind_pr_common+0x110>
 81084fc:	0c0b      	lsrs	r3, r1, #16
 81084fe:	b2da      	uxtb	r2, r3
 8108500:	0409      	lsls	r1, r1, #16
 8108502:	f88d 301d 	strb.w	r3, [sp, #29]
 8108506:	2302      	movs	r3, #2
 8108508:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 810850c:	9105      	str	r1, [sp, #20]
 810850e:	f88d 301c 	strb.w	r3, [sp, #28]
 8108512:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8108514:	f1b8 0f02 	cmp.w	r8, #2
 8108518:	bf08      	it	eq
 810851a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 810851c:	f013 0301 	ands.w	r3, r3, #1
 8108520:	d00c      	beq.n	810853c <__gnu_unwind_pr_common+0x5c>
 8108522:	4638      	mov	r0, r7
 8108524:	a905      	add	r1, sp, #20
 8108526:	f000 fb73 	bl	8108c10 <__gnu_unwind_execute>
 810852a:	b918      	cbnz	r0, 8108534 <__gnu_unwind_pr_common+0x54>
 810852c:	2008      	movs	r0, #8
 810852e:	b009      	add	sp, #36	; 0x24
 8108530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108534:	2009      	movs	r0, #9
 8108536:	b009      	add	sp, #36	; 0x24
 8108538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810853c:	f8d4 a000 	ldr.w	sl, [r4]
 8108540:	f1ba 0f00 	cmp.w	sl, #0
 8108544:	d0ed      	beq.n	8108522 <__gnu_unwind_pr_common+0x42>
 8108546:	9301      	str	r3, [sp, #4]
 8108548:	f000 0308 	and.w	r3, r0, #8
 810854c:	9302      	str	r3, [sp, #8]
 810854e:	2e02      	cmp	r6, #2
 8108550:	d04a      	beq.n	81085e8 <__gnu_unwind_pr_common+0x108>
 8108552:	f8b4 a000 	ldrh.w	sl, [r4]
 8108556:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 810855a:	3404      	adds	r4, #4
 810855c:	6caa      	ldr	r2, [r5, #72]	; 0x48
 810855e:	f029 0b01 	bic.w	fp, r9, #1
 8108562:	210f      	movs	r1, #15
 8108564:	4638      	mov	r0, r7
 8108566:	4493      	add	fp, r2
 8108568:	f7ff ff4e 	bl	8108408 <_Unwind_GetGR>
 810856c:	4583      	cmp	fp, r0
 810856e:	d839      	bhi.n	81085e4 <__gnu_unwind_pr_common+0x104>
 8108570:	f02a 0201 	bic.w	r2, sl, #1
 8108574:	445a      	add	r2, fp
 8108576:	4282      	cmp	r2, r0
 8108578:	bf94      	ite	ls
 810857a:	2000      	movls	r0, #0
 810857c:	2001      	movhi	r0, #1
 810857e:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8108582:	f003 0302 	and.w	r3, r3, #2
 8108586:	f00a 0a01 	and.w	sl, sl, #1
 810858a:	ea43 030a 	orr.w	r3, r3, sl
 810858e:	2b01      	cmp	r3, #1
 8108590:	d049      	beq.n	8108626 <__gnu_unwind_pr_common+0x146>
 8108592:	2b02      	cmp	r3, #2
 8108594:	d032      	beq.n	81085fc <__gnu_unwind_pr_common+0x11c>
 8108596:	2b00      	cmp	r3, #0
 8108598:	d1cc      	bne.n	8108534 <__gnu_unwind_pr_common+0x54>
 810859a:	f1b8 0f00 	cmp.w	r8, #0
 810859e:	d002      	beq.n	81085a6 <__gnu_unwind_pr_common+0xc6>
 81085a0:	2800      	cmp	r0, #0
 81085a2:	f040 80cd 	bne.w	8108740 <__gnu_unwind_pr_common+0x260>
 81085a6:	3404      	adds	r4, #4
 81085a8:	f8d4 a000 	ldr.w	sl, [r4]
 81085ac:	f1ba 0f00 	cmp.w	sl, #0
 81085b0:	d1cd      	bne.n	810854e <__gnu_unwind_pr_common+0x6e>
 81085b2:	a905      	add	r1, sp, #20
 81085b4:	4638      	mov	r0, r7
 81085b6:	f000 fb2b 	bl	8108c10 <__gnu_unwind_execute>
 81085ba:	2800      	cmp	r0, #0
 81085bc:	d1ba      	bne.n	8108534 <__gnu_unwind_pr_common+0x54>
 81085be:	9b01      	ldr	r3, [sp, #4]
 81085c0:	2b00      	cmp	r3, #0
 81085c2:	d0b3      	beq.n	810852c <__gnu_unwind_pr_common+0x4c>
 81085c4:	210f      	movs	r1, #15
 81085c6:	4638      	mov	r0, r7
 81085c8:	f7ff ff1e 	bl	8108408 <_Unwind_GetGR>
 81085cc:	210e      	movs	r1, #14
 81085ce:	4602      	mov	r2, r0
 81085d0:	4638      	mov	r0, r7
 81085d2:	f7ff ff3d 	bl	8108450 <_Unwind_SetGR>
 81085d6:	4638      	mov	r0, r7
 81085d8:	4a6a      	ldr	r2, [pc, #424]	; (8108784 <__gnu_unwind_pr_common+0x2a4>)
 81085da:	210f      	movs	r1, #15
 81085dc:	f7ff ff38 	bl	8108450 <_Unwind_SetGR>
 81085e0:	2007      	movs	r0, #7
 81085e2:	e7a8      	b.n	8108536 <__gnu_unwind_pr_common+0x56>
 81085e4:	2000      	movs	r0, #0
 81085e6:	e7ca      	b.n	810857e <__gnu_unwind_pr_common+0x9e>
 81085e8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 81085ec:	3408      	adds	r4, #8
 81085ee:	e7b5      	b.n	810855c <__gnu_unwind_pr_common+0x7c>
 81085f0:	0209      	lsls	r1, r1, #8
 81085f2:	2303      	movs	r3, #3
 81085f4:	9105      	str	r1, [sp, #20]
 81085f6:	f8ad 301c 	strh.w	r3, [sp, #28]
 81085fa:	e78a      	b.n	8108512 <__gnu_unwind_pr_common+0x32>
 81085fc:	6823      	ldr	r3, [r4, #0]
 81085fe:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8108602:	f1b8 0f00 	cmp.w	r8, #0
 8108606:	d145      	bne.n	8108694 <__gnu_unwind_pr_common+0x1b4>
 8108608:	b128      	cbz	r0, 8108616 <__gnu_unwind_pr_common+0x136>
 810860a:	9a02      	ldr	r2, [sp, #8]
 810860c:	2a00      	cmp	r2, #0
 810860e:	d05c      	beq.n	81086ca <__gnu_unwind_pr_common+0x1ea>
 8108610:	f1bb 0f00 	cmp.w	fp, #0
 8108614:	d074      	beq.n	8108700 <__gnu_unwind_pr_common+0x220>
 8108616:	2b00      	cmp	r3, #0
 8108618:	da00      	bge.n	810861c <__gnu_unwind_pr_common+0x13c>
 810861a:	3404      	adds	r4, #4
 810861c:	f10b 0b01 	add.w	fp, fp, #1
 8108620:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8108624:	e7c0      	b.n	81085a8 <__gnu_unwind_pr_common+0xc8>
 8108626:	f1b8 0f00 	cmp.w	r8, #0
 810862a:	d119      	bne.n	8108660 <__gnu_unwind_pr_common+0x180>
 810862c:	b1b0      	cbz	r0, 810865c <__gnu_unwind_pr_common+0x17c>
 810862e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8108632:	1c99      	adds	r1, r3, #2
 8108634:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8108638:	f43f af7c 	beq.w	8108534 <__gnu_unwind_pr_common+0x54>
 810863c:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8108640:	3301      	adds	r3, #1
 8108642:	9104      	str	r1, [sp, #16]
 8108644:	f000 8090 	beq.w	8108768 <__gnu_unwind_pr_common+0x288>
 8108648:	1d20      	adds	r0, r4, #4
 810864a:	f7ff fdc9 	bl	81081e0 <_Unwind_decode_typeinfo_ptr.isra.0>
 810864e:	ab04      	add	r3, sp, #16
 8108650:	4601      	mov	r1, r0
 8108652:	4628      	mov	r0, r5
 8108654:	f003 fa4c 	bl	810baf0 <__cxa_type_match>
 8108658:	2800      	cmp	r0, #0
 810865a:	d15b      	bne.n	8108714 <__gnu_unwind_pr_common+0x234>
 810865c:	3408      	adds	r4, #8
 810865e:	e7a3      	b.n	81085a8 <__gnu_unwind_pr_common+0xc8>
 8108660:	210d      	movs	r1, #13
 8108662:	4638      	mov	r0, r7
 8108664:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8108668:	f7ff fece 	bl	8108408 <_Unwind_GetGR>
 810866c:	4581      	cmp	r9, r0
 810866e:	d1f5      	bne.n	810865c <__gnu_unwind_pr_common+0x17c>
 8108670:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8108672:	429c      	cmp	r4, r3
 8108674:	d1f2      	bne.n	810865c <__gnu_unwind_pr_common+0x17c>
 8108676:	4620      	mov	r0, r4
 8108678:	f7ff fcec 	bl	8108054 <selfrel_offset31>
 810867c:	210f      	movs	r1, #15
 810867e:	4602      	mov	r2, r0
 8108680:	4638      	mov	r0, r7
 8108682:	f7ff fee5 	bl	8108450 <_Unwind_SetGR>
 8108686:	4638      	mov	r0, r7
 8108688:	462a      	mov	r2, r5
 810868a:	2100      	movs	r1, #0
 810868c:	f7ff fee0 	bl	8108450 <_Unwind_SetGR>
 8108690:	2007      	movs	r0, #7
 8108692:	e750      	b.n	8108536 <__gnu_unwind_pr_common+0x56>
 8108694:	210d      	movs	r1, #13
 8108696:	4638      	mov	r0, r7
 8108698:	f8d5 9020 	ldr.w	r9, [r5, #32]
 810869c:	f7ff feb4 	bl	8108408 <_Unwind_GetGR>
 81086a0:	4581      	cmp	r9, r0
 81086a2:	d001      	beq.n	81086a8 <__gnu_unwind_pr_common+0x1c8>
 81086a4:	6823      	ldr	r3, [r4, #0]
 81086a6:	e7b6      	b.n	8108616 <__gnu_unwind_pr_common+0x136>
 81086a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 81086aa:	429c      	cmp	r4, r3
 81086ac:	d1fa      	bne.n	81086a4 <__gnu_unwind_pr_common+0x1c4>
 81086ae:	2204      	movs	r2, #4
 81086b0:	2100      	movs	r1, #0
 81086b2:	e9c5 120b 	strd	r1, r2, [r5, #44]	; 0x2c
 81086b6:	18a3      	adds	r3, r4, r2
 81086b8:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 81086bc:	636b      	str	r3, [r5, #52]	; 0x34
 81086be:	6823      	ldr	r3, [r4, #0]
 81086c0:	428b      	cmp	r3, r1
 81086c2:	db59      	blt.n	8108778 <__gnu_unwind_pr_common+0x298>
 81086c4:	2301      	movs	r3, #1
 81086c6:	9301      	str	r3, [sp, #4]
 81086c8:	e7a8      	b.n	810861c <__gnu_unwind_pr_common+0x13c>
 81086ca:	f105 0358 	add.w	r3, r5, #88	; 0x58
 81086ce:	f8cd 800c 	str.w	r8, [sp, #12]
 81086d2:	f104 0a04 	add.w	sl, r4, #4
 81086d6:	46b0      	mov	r8, r6
 81086d8:	4691      	mov	r9, r2
 81086da:	461e      	mov	r6, r3
 81086dc:	e00d      	b.n	81086fa <__gnu_unwind_pr_common+0x21a>
 81086de:	9604      	str	r6, [sp, #16]
 81086e0:	f7ff fd7e 	bl	81081e0 <_Unwind_decode_typeinfo_ptr.isra.0>
 81086e4:	ab04      	add	r3, sp, #16
 81086e6:	4601      	mov	r1, r0
 81086e8:	2200      	movs	r2, #0
 81086ea:	4628      	mov	r0, r5
 81086ec:	f003 fa00 	bl	810baf0 <__cxa_type_match>
 81086f0:	f109 0901 	add.w	r9, r9, #1
 81086f4:	f10a 0a04 	add.w	sl, sl, #4
 81086f8:	b9e8      	cbnz	r0, 8108736 <__gnu_unwind_pr_common+0x256>
 81086fa:	45d9      	cmp	r9, fp
 81086fc:	4650      	mov	r0, sl
 81086fe:	d1ee      	bne.n	81086de <__gnu_unwind_pr_common+0x1fe>
 8108700:	4638      	mov	r0, r7
 8108702:	210d      	movs	r1, #13
 8108704:	f7ff fe80 	bl	8108408 <_Unwind_GetGR>
 8108708:	9b04      	ldr	r3, [sp, #16]
 810870a:	6228      	str	r0, [r5, #32]
 810870c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8108710:	2006      	movs	r0, #6
 8108712:	e710      	b.n	8108536 <__gnu_unwind_pr_common+0x56>
 8108714:	4681      	mov	r9, r0
 8108716:	210d      	movs	r1, #13
 8108718:	4638      	mov	r0, r7
 810871a:	f7ff fe75 	bl	8108408 <_Unwind_GetGR>
 810871e:	f1b9 0f02 	cmp.w	r9, #2
 8108722:	6228      	str	r0, [r5, #32]
 8108724:	d125      	bne.n	8108772 <__gnu_unwind_pr_common+0x292>
 8108726:	462b      	mov	r3, r5
 8108728:	9a04      	ldr	r2, [sp, #16]
 810872a:	f843 2f2c 	str.w	r2, [r3, #44]!
 810872e:	626b      	str	r3, [r5, #36]	; 0x24
 8108730:	62ac      	str	r4, [r5, #40]	; 0x28
 8108732:	2006      	movs	r0, #6
 8108734:	e6ff      	b.n	8108536 <__gnu_unwind_pr_common+0x56>
 8108736:	4646      	mov	r6, r8
 8108738:	6823      	ldr	r3, [r4, #0]
 810873a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810873e:	e76a      	b.n	8108616 <__gnu_unwind_pr_common+0x136>
 8108740:	4620      	mov	r0, r4
 8108742:	f7ff fc87 	bl	8108054 <selfrel_offset31>
 8108746:	3404      	adds	r4, #4
 8108748:	4602      	mov	r2, r0
 810874a:	63ac      	str	r4, [r5, #56]	; 0x38
 810874c:	4628      	mov	r0, r5
 810874e:	4614      	mov	r4, r2
 8108750:	f003 fa2c 	bl	810bbac <__cxa_begin_cleanup>
 8108754:	2800      	cmp	r0, #0
 8108756:	f43f aeed 	beq.w	8108534 <__gnu_unwind_pr_common+0x54>
 810875a:	4638      	mov	r0, r7
 810875c:	4622      	mov	r2, r4
 810875e:	210f      	movs	r1, #15
 8108760:	f7ff fe76 	bl	8108450 <_Unwind_SetGR>
 8108764:	2007      	movs	r0, #7
 8108766:	e6e6      	b.n	8108536 <__gnu_unwind_pr_common+0x56>
 8108768:	4638      	mov	r0, r7
 810876a:	210d      	movs	r1, #13
 810876c:	f7ff fe4c 	bl	8108408 <_Unwind_GetGR>
 8108770:	6228      	str	r0, [r5, #32]
 8108772:	9b04      	ldr	r3, [sp, #16]
 8108774:	626b      	str	r3, [r5, #36]	; 0x24
 8108776:	e7db      	b.n	8108730 <__gnu_unwind_pr_common+0x250>
 8108778:	f10b 0001 	add.w	r0, fp, #1
 810877c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8108780:	e77a      	b.n	8108678 <__gnu_unwind_pr_common+0x198>
 8108782:	bf00      	nop
 8108784:	0810bc3f 	.word	0x0810bc3f

08108788 <__aeabi_unwind_cpp_pr0>:
 8108788:	2300      	movs	r3, #0
 810878a:	e6a9      	b.n	81084e0 <__gnu_unwind_pr_common>

0810878c <__aeabi_unwind_cpp_pr1>:
 810878c:	2301      	movs	r3, #1
 810878e:	e6a7      	b.n	81084e0 <__gnu_unwind_pr_common>

08108790 <__aeabi_unwind_cpp_pr2>:
 8108790:	2302      	movs	r3, #2
 8108792:	e6a5      	b.n	81084e0 <__gnu_unwind_pr_common>

08108794 <_Unwind_VRS_Pop>:
 8108794:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108798:	4606      	mov	r6, r0
 810879a:	b0c3      	sub	sp, #268	; 0x10c
 810879c:	4615      	mov	r5, r2
 810879e:	461c      	mov	r4, r3
 81087a0:	2904      	cmp	r1, #4
 81087a2:	f200 80b9 	bhi.w	8108918 <_Unwind_VRS_Pop+0x184>
 81087a6:	e8df f001 	tbb	[pc, r1]
 81087aa:	539a      	.short	0x539a
 81087ac:	29b7      	.short	0x29b7
 81087ae:	03          	.byte	0x03
 81087af:	00          	.byte	0x00
 81087b0:	2c00      	cmp	r4, #0
 81087b2:	f040 80b1 	bne.w	8108918 <_Unwind_VRS_Pop+0x184>
 81087b6:	2a10      	cmp	r2, #16
 81087b8:	f200 80ae 	bhi.w	8108918 <_Unwind_VRS_Pop+0x184>
 81087bc:	6803      	ldr	r3, [r0, #0]
 81087be:	06d8      	lsls	r0, r3, #27
 81087c0:	f100 80f3 	bmi.w	81089aa <_Unwind_VRS_Pop+0x216>
 81087c4:	af20      	add	r7, sp, #128	; 0x80
 81087c6:	4638      	mov	r0, r7
 81087c8:	f000 f992 	bl	8108af0 <__gnu_Unwind_Save_WMMXC>
 81087cc:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 81087ce:	2300      	movs	r3, #0
 81087d0:	2401      	movs	r4, #1
 81087d2:	fa04 f203 	lsl.w	r2, r4, r3
 81087d6:	422a      	tst	r2, r5
 81087d8:	4601      	mov	r1, r0
 81087da:	d004      	beq.n	81087e6 <_Unwind_VRS_Pop+0x52>
 81087dc:	f851 2b04 	ldr.w	r2, [r1], #4
 81087e0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
 81087e4:	4608      	mov	r0, r1
 81087e6:	3301      	adds	r3, #1
 81087e8:	2b04      	cmp	r3, #4
 81087ea:	d1f2      	bne.n	81087d2 <_Unwind_VRS_Pop+0x3e>
 81087ec:	63b0      	str	r0, [r6, #56]	; 0x38
 81087ee:	4638      	mov	r0, r7
 81087f0:	f000 f974 	bl	8108adc <__gnu_Unwind_Restore_WMMXC>
 81087f4:	2000      	movs	r0, #0
 81087f6:	b043      	add	sp, #268	; 0x10c
 81087f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81087fc:	2c03      	cmp	r4, #3
 81087fe:	f040 808b 	bne.w	8108918 <_Unwind_VRS_Pop+0x184>
 8108802:	b294      	uxth	r4, r2
 8108804:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8108808:	2b10      	cmp	r3, #16
 810880a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 810880e:	f200 8083 	bhi.w	8108918 <_Unwind_VRS_Pop+0x184>
 8108812:	6803      	ldr	r3, [r0, #0]
 8108814:	071f      	lsls	r7, r3, #28
 8108816:	f100 80d0 	bmi.w	81089ba <_Unwind_VRS_Pop+0x226>
 810881a:	af20      	add	r7, sp, #128	; 0x80
 810881c:	4638      	mov	r0, r7
 810881e:	f000 f93b 	bl	8108a98 <__gnu_Unwind_Save_WMMXD>
 8108822:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8108826:	6bb5      	ldr	r5, [r6, #56]	; 0x38
 8108828:	b154      	cbz	r4, 8108840 <_Unwind_VRS_Pop+0xac>
 810882a:	460b      	mov	r3, r1
 810882c:	1ae8      	subs	r0, r5, r3
 810882e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8108832:	00e4      	lsls	r4, r4, #3
 8108834:	581a      	ldr	r2, [r3, r0]
 8108836:	f843 2b04 	str.w	r2, [r3], #4
 810883a:	428b      	cmp	r3, r1
 810883c:	d1fa      	bne.n	8108834 <_Unwind_VRS_Pop+0xa0>
 810883e:	4425      	add	r5, r4
 8108840:	4638      	mov	r0, r7
 8108842:	63b5      	str	r5, [r6, #56]	; 0x38
 8108844:	f000 f906 	bl	8108a54 <__gnu_Unwind_Restore_WMMXD>
 8108848:	2000      	movs	r0, #0
 810884a:	b043      	add	sp, #268	; 0x10c
 810884c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108850:	2c01      	cmp	r4, #1
 8108852:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8108856:	b295      	uxth	r5, r2
 8108858:	d05a      	beq.n	8108910 <_Unwind_VRS_Pop+0x17c>
 810885a:	2c05      	cmp	r4, #5
 810885c:	d15c      	bne.n	8108918 <_Unwind_VRS_Pop+0x184>
 810885e:	eb08 0905 	add.w	r9, r8, r5
 8108862:	f1b9 0f20 	cmp.w	r9, #32
 8108866:	d857      	bhi.n	8108918 <_Unwind_VRS_Pop+0x184>
 8108868:	f1b8 0f0f 	cmp.w	r8, #15
 810886c:	d977      	bls.n	810895e <_Unwind_VRS_Pop+0x1ca>
 810886e:	46a9      	mov	r9, r5
 8108870:	2d00      	cmp	r5, #0
 8108872:	f040 8088 	bne.w	8108986 <_Unwind_VRS_Pop+0x1f2>
 8108876:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8108878:	b36d      	cbz	r5, 81088d6 <_Unwind_VRS_Pop+0x142>
 810887a:	af20      	add	r7, sp, #128	; 0x80
 810887c:	f04f 0900 	mov.w	r9, #0
 8108880:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8108884:	3f04      	subs	r7, #4
 8108886:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 810888a:	f853 1b04 	ldr.w	r1, [r3], #4
 810888e:	f847 1f04 	str.w	r1, [r7, #4]!
 8108892:	42ab      	cmp	r3, r5
 8108894:	d1f9      	bne.n	810888a <_Unwind_VRS_Pop+0xf6>
 8108896:	f1b9 0f00 	cmp.w	r9, #0
 810889a:	d00f      	beq.n	81088bc <_Unwind_VRS_Pop+0x128>
 810889c:	466f      	mov	r7, sp
 810889e:	4641      	mov	r1, r8
 81088a0:	2910      	cmp	r1, #16
 81088a2:	bf38      	it	cc
 81088a4:	2110      	movcc	r1, #16
 81088a6:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 81088aa:	3984      	subs	r1, #132	; 0x84
 81088ac:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 81088b0:	f853 0b04 	ldr.w	r0, [r3], #4
 81088b4:	f841 0f04 	str.w	r0, [r1, #4]!
 81088b8:	42ab      	cmp	r3, r5
 81088ba:	d1f9      	bne.n	81088b0 <_Unwind_VRS_Pop+0x11c>
 81088bc:	2c01      	cmp	r4, #1
 81088be:	f000 8084 	beq.w	81089ca <_Unwind_VRS_Pop+0x236>
 81088c2:	f1b8 0f0f 	cmp.w	r8, #15
 81088c6:	63b5      	str	r5, [r6, #56]	; 0x38
 81088c8:	d945      	bls.n	8108956 <_Unwind_VRS_Pop+0x1c2>
 81088ca:	f1b9 0f00 	cmp.w	r9, #0
 81088ce:	d002      	beq.n	81088d6 <_Unwind_VRS_Pop+0x142>
 81088d0:	4668      	mov	r0, sp
 81088d2:	f000 f8b7 	bl	8108a44 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 81088d6:	2000      	movs	r0, #0
 81088d8:	b043      	add	sp, #268	; 0x10c
 81088da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 81088de:	b9dc      	cbnz	r4, 8108918 <_Unwind_VRS_Pop+0x184>
 81088e0:	6b87      	ldr	r7, [r0, #56]	; 0x38
 81088e2:	4623      	mov	r3, r4
 81088e4:	2001      	movs	r0, #1
 81088e6:	b294      	uxth	r4, r2
 81088e8:	f106 0c04 	add.w	ip, r6, #4
 81088ec:	fa00 f203 	lsl.w	r2, r0, r3
 81088f0:	4222      	tst	r2, r4
 81088f2:	4639      	mov	r1, r7
 81088f4:	d004      	beq.n	8108900 <_Unwind_VRS_Pop+0x16c>
 81088f6:	f851 2b04 	ldr.w	r2, [r1], #4
 81088fa:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
 81088fe:	460f      	mov	r7, r1
 8108900:	3301      	adds	r3, #1
 8108902:	2b10      	cmp	r3, #16
 8108904:	d1f2      	bne.n	81088ec <_Unwind_VRS_Pop+0x158>
 8108906:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 810890a:	d1e4      	bne.n	81088d6 <_Unwind_VRS_Pop+0x142>
 810890c:	63b7      	str	r7, [r6, #56]	; 0x38
 810890e:	e004      	b.n	810891a <_Unwind_VRS_Pop+0x186>
 8108910:	eb08 0305 	add.w	r3, r8, r5
 8108914:	2b10      	cmp	r3, #16
 8108916:	d903      	bls.n	8108920 <_Unwind_VRS_Pop+0x18c>
 8108918:	2002      	movs	r0, #2
 810891a:	b043      	add	sp, #268	; 0x10c
 810891c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108920:	f1b8 0f0f 	cmp.w	r8, #15
 8108924:	d8f8      	bhi.n	8108918 <_Unwind_VRS_Pop+0x184>
 8108926:	6833      	ldr	r3, [r6, #0]
 8108928:	07da      	lsls	r2, r3, #31
 810892a:	d506      	bpl.n	810893a <_Unwind_VRS_Pop+0x1a6>
 810892c:	4630      	mov	r0, r6
 810892e:	f023 0303 	bic.w	r3, r3, #3
 8108932:	f840 3b48 	str.w	r3, [r0], #72
 8108936:	f000 f879 	bl	8108a2c <__gnu_Unwind_Save_VFP>
 810893a:	af20      	add	r7, sp, #128	; 0x80
 810893c:	4638      	mov	r0, r7
 810893e:	f000 f875 	bl	8108a2c <__gnu_Unwind_Save_VFP>
 8108942:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8108944:	2d00      	cmp	r5, #0
 8108946:	d199      	bne.n	810887c <_Unwind_VRS_Pop+0xe8>
 8108948:	461d      	mov	r5, r3
 810894a:	3504      	adds	r5, #4
 810894c:	63b5      	str	r5, [r6, #56]	; 0x38
 810894e:	4638      	mov	r0, r7
 8108950:	f000 f868 	bl	8108a24 <__gnu_Unwind_Restore_VFP>
 8108954:	e7bf      	b.n	81088d6 <_Unwind_VRS_Pop+0x142>
 8108956:	a820      	add	r0, sp, #128	; 0x80
 8108958:	f000 f86c 	bl	8108a34 <__gnu_Unwind_Restore_VFP_D>
 810895c:	e7b5      	b.n	81088ca <_Unwind_VRS_Pop+0x136>
 810895e:	f1b9 0f10 	cmp.w	r9, #16
 8108962:	d940      	bls.n	81089e6 <_Unwind_VRS_Pop+0x252>
 8108964:	f1a9 0910 	sub.w	r9, r9, #16
 8108968:	6833      	ldr	r3, [r6, #0]
 810896a:	07d9      	lsls	r1, r3, #31
 810896c:	d508      	bpl.n	8108980 <_Unwind_VRS_Pop+0x1ec>
 810896e:	f023 0301 	bic.w	r3, r3, #1
 8108972:	4630      	mov	r0, r6
 8108974:	f043 0302 	orr.w	r3, r3, #2
 8108978:	f840 3b48 	str.w	r3, [r0], #72
 810897c:	f000 f85e 	bl	8108a3c <__gnu_Unwind_Save_VFP_D>
 8108980:	f1b9 0f00 	cmp.w	r9, #0
 8108984:	d032      	beq.n	81089ec <_Unwind_VRS_Pop+0x258>
 8108986:	6833      	ldr	r3, [r6, #0]
 8108988:	075a      	lsls	r2, r3, #29
 810898a:	d420      	bmi.n	81089ce <_Unwind_VRS_Pop+0x23a>
 810898c:	f1b8 0f0f 	cmp.w	r8, #15
 8108990:	d925      	bls.n	81089de <_Unwind_VRS_Pop+0x24a>
 8108992:	466f      	mov	r7, sp
 8108994:	4638      	mov	r0, r7
 8108996:	f1c8 0510 	rsb	r5, r8, #16
 810899a:	f000 f857 	bl	8108a4c <__gnu_Unwind_Save_VFP_D_16_to_31>
 810899e:	2d00      	cmp	r5, #0
 81089a0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 81089a2:	f77f af7c 	ble.w	810889e <_Unwind_VRS_Pop+0x10a>
 81089a6:	af20      	add	r7, sp, #128	; 0x80
 81089a8:	e76a      	b.n	8108880 <_Unwind_VRS_Pop+0xec>
 81089aa:	f023 0310 	bic.w	r3, r3, #16
 81089ae:	6033      	str	r3, [r6, #0]
 81089b0:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 81089b4:	f000 f89c 	bl	8108af0 <__gnu_Unwind_Save_WMMXC>
 81089b8:	e704      	b.n	81087c4 <_Unwind_VRS_Pop+0x30>
 81089ba:	f023 0308 	bic.w	r3, r3, #8
 81089be:	6003      	str	r3, [r0, #0]
 81089c0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 81089c4:	f000 f868 	bl	8108a98 <__gnu_Unwind_Save_WMMXD>
 81089c8:	e727      	b.n	810881a <_Unwind_VRS_Pop+0x86>
 81089ca:	af20      	add	r7, sp, #128	; 0x80
 81089cc:	e7bd      	b.n	810894a <_Unwind_VRS_Pop+0x1b6>
 81089ce:	4630      	mov	r0, r6
 81089d0:	f023 0304 	bic.w	r3, r3, #4
 81089d4:	f840 3bd0 	str.w	r3, [r0], #208
 81089d8:	f000 f838 	bl	8108a4c <__gnu_Unwind_Save_VFP_D_16_to_31>
 81089dc:	e7d6      	b.n	810898c <_Unwind_VRS_Pop+0x1f8>
 81089de:	a820      	add	r0, sp, #128	; 0x80
 81089e0:	f000 f82c 	bl	8108a3c <__gnu_Unwind_Save_VFP_D>
 81089e4:	e7d5      	b.n	8108992 <_Unwind_VRS_Pop+0x1fe>
 81089e6:	f04f 0900 	mov.w	r9, #0
 81089ea:	e7bd      	b.n	8108968 <_Unwind_VRS_Pop+0x1d4>
 81089ec:	f1b8 0f0f 	cmp.w	r8, #15
 81089f0:	f63f af41 	bhi.w	8108876 <_Unwind_VRS_Pop+0xe2>
 81089f4:	af20      	add	r7, sp, #128	; 0x80
 81089f6:	4638      	mov	r0, r7
 81089f8:	f000 f820 	bl	8108a3c <__gnu_Unwind_Save_VFP_D>
 81089fc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 81089fe:	2d00      	cmp	r5, #0
 8108a00:	f47f af3c 	bne.w	810887c <_Unwind_VRS_Pop+0xe8>
 8108a04:	4638      	mov	r0, r7
 8108a06:	f000 f815 	bl	8108a34 <__gnu_Unwind_Restore_VFP_D>
 8108a0a:	e764      	b.n	81088d6 <_Unwind_VRS_Pop+0x142>

08108a0c <__restore_core_regs>:
 8108a0c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8108a10:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8108a14:	469c      	mov	ip, r3
 8108a16:	46a6      	mov	lr, r4
 8108a18:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8108a1c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8108a20:	46e5      	mov	sp, ip
 8108a22:	bd00      	pop	{pc}

08108a24 <__gnu_Unwind_Restore_VFP>:
 8108a24:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8108a28:	4770      	bx	lr
 8108a2a:	bf00      	nop

08108a2c <__gnu_Unwind_Save_VFP>:
 8108a2c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8108a30:	4770      	bx	lr
 8108a32:	bf00      	nop

08108a34 <__gnu_Unwind_Restore_VFP_D>:
 8108a34:	ec90 0b20 	vldmia	r0, {d0-d15}
 8108a38:	4770      	bx	lr
 8108a3a:	bf00      	nop

08108a3c <__gnu_Unwind_Save_VFP_D>:
 8108a3c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8108a40:	4770      	bx	lr
 8108a42:	bf00      	nop

08108a44 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8108a44:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8108a48:	4770      	bx	lr
 8108a4a:	bf00      	nop

08108a4c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8108a4c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8108a50:	4770      	bx	lr
 8108a52:	bf00      	nop

08108a54 <__gnu_Unwind_Restore_WMMXD>:
 8108a54:	ecf0 0102 	ldfe	f0, [r0], #8
 8108a58:	ecf0 1102 	ldfe	f1, [r0], #8
 8108a5c:	ecf0 2102 	ldfe	f2, [r0], #8
 8108a60:	ecf0 3102 	ldfe	f3, [r0], #8
 8108a64:	ecf0 4102 	ldfe	f4, [r0], #8
 8108a68:	ecf0 5102 	ldfe	f5, [r0], #8
 8108a6c:	ecf0 6102 	ldfe	f6, [r0], #8
 8108a70:	ecf0 7102 	ldfe	f7, [r0], #8
 8108a74:	ecf0 8102 	ldfp	f0, [r0], #8
 8108a78:	ecf0 9102 	ldfp	f1, [r0], #8
 8108a7c:	ecf0 a102 	ldfp	f2, [r0], #8
 8108a80:	ecf0 b102 	ldfp	f3, [r0], #8
 8108a84:	ecf0 c102 	ldfp	f4, [r0], #8
 8108a88:	ecf0 d102 	ldfp	f5, [r0], #8
 8108a8c:	ecf0 e102 	ldfp	f6, [r0], #8
 8108a90:	ecf0 f102 	ldfp	f7, [r0], #8
 8108a94:	4770      	bx	lr
 8108a96:	bf00      	nop

08108a98 <__gnu_Unwind_Save_WMMXD>:
 8108a98:	ece0 0102 	stfe	f0, [r0], #8
 8108a9c:	ece0 1102 	stfe	f1, [r0], #8
 8108aa0:	ece0 2102 	stfe	f2, [r0], #8
 8108aa4:	ece0 3102 	stfe	f3, [r0], #8
 8108aa8:	ece0 4102 	stfe	f4, [r0], #8
 8108aac:	ece0 5102 	stfe	f5, [r0], #8
 8108ab0:	ece0 6102 	stfe	f6, [r0], #8
 8108ab4:	ece0 7102 	stfe	f7, [r0], #8
 8108ab8:	ece0 8102 	stfp	f0, [r0], #8
 8108abc:	ece0 9102 	stfp	f1, [r0], #8
 8108ac0:	ece0 a102 	stfp	f2, [r0], #8
 8108ac4:	ece0 b102 	stfp	f3, [r0], #8
 8108ac8:	ece0 c102 	stfp	f4, [r0], #8
 8108acc:	ece0 d102 	stfp	f5, [r0], #8
 8108ad0:	ece0 e102 	stfp	f6, [r0], #8
 8108ad4:	ece0 f102 	stfp	f7, [r0], #8
 8108ad8:	4770      	bx	lr
 8108ada:	bf00      	nop

08108adc <__gnu_Unwind_Restore_WMMXC>:
 8108adc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8108ae0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8108ae4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8108ae8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8108aec:	4770      	bx	lr
 8108aee:	bf00      	nop

08108af0 <__gnu_Unwind_Save_WMMXC>:
 8108af0:	fca0 8101 	stc2	1, cr8, [r0], #4
 8108af4:	fca0 9101 	stc2	1, cr9, [r0], #4
 8108af8:	fca0 a101 	stc2	1, cr10, [r0], #4
 8108afc:	fca0 b101 	stc2	1, cr11, [r0], #4
 8108b00:	4770      	bx	lr
 8108b02:	bf00      	nop

08108b04 <_Unwind_RaiseException>:
 8108b04:	46ec      	mov	ip, sp
 8108b06:	b500      	push	{lr}
 8108b08:	e92d 5000 	stmdb	sp!, {ip, lr}
 8108b0c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8108b10:	f04f 0300 	mov.w	r3, #0
 8108b14:	e92d 000c 	stmdb	sp!, {r2, r3}
 8108b18:	a901      	add	r1, sp, #4
 8108b1a:	f7ff fbf1 	bl	8108300 <__gnu_Unwind_RaiseException>
 8108b1e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8108b22:	b012      	add	sp, #72	; 0x48
 8108b24:	4770      	bx	lr
 8108b26:	bf00      	nop

08108b28 <_Unwind_Resume>:
 8108b28:	46ec      	mov	ip, sp
 8108b2a:	b500      	push	{lr}
 8108b2c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8108b30:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8108b34:	f04f 0300 	mov.w	r3, #0
 8108b38:	e92d 000c 	stmdb	sp!, {r2, r3}
 8108b3c:	a901      	add	r1, sp, #4
 8108b3e:	f7ff fc19 	bl	8108374 <__gnu_Unwind_Resume>
 8108b42:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8108b46:	b012      	add	sp, #72	; 0x48
 8108b48:	4770      	bx	lr
 8108b4a:	bf00      	nop

08108b4c <_Unwind_Resume_or_Rethrow>:
 8108b4c:	46ec      	mov	ip, sp
 8108b4e:	b500      	push	{lr}
 8108b50:	e92d 5000 	stmdb	sp!, {ip, lr}
 8108b54:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8108b58:	f04f 0300 	mov.w	r3, #0
 8108b5c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8108b60:	a901      	add	r1, sp, #4
 8108b62:	f7ff fc29 	bl	81083b8 <__gnu_Unwind_Resume_or_Rethrow>
 8108b66:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8108b6a:	b012      	add	sp, #72	; 0x48
 8108b6c:	4770      	bx	lr
 8108b6e:	bf00      	nop

08108b70 <_Unwind_ForcedUnwind>:
 8108b70:	46ec      	mov	ip, sp
 8108b72:	b500      	push	{lr}
 8108b74:	e92d 5000 	stmdb	sp!, {ip, lr}
 8108b78:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8108b7c:	f04f 0300 	mov.w	r3, #0
 8108b80:	e92d 000c 	stmdb	sp!, {r2, r3}
 8108b84:	ab01      	add	r3, sp, #4
 8108b86:	f7ff fbeb 	bl	8108360 <__gnu_Unwind_ForcedUnwind>
 8108b8a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8108b8e:	b012      	add	sp, #72	; 0x48
 8108b90:	4770      	bx	lr
 8108b92:	bf00      	nop

08108b94 <_Unwind_Backtrace>:
 8108b94:	46ec      	mov	ip, sp
 8108b96:	b500      	push	{lr}
 8108b98:	e92d 5000 	stmdb	sp!, {ip, lr}
 8108b9c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8108ba0:	f04f 0300 	mov.w	r3, #0
 8108ba4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8108ba8:	aa01      	add	r2, sp, #4
 8108baa:	f7ff fc5d 	bl	8108468 <__gnu_Unwind_Backtrace>
 8108bae:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8108bb2:	b012      	add	sp, #72	; 0x48
 8108bb4:	4770      	bx	lr
 8108bb6:	bf00      	nop

08108bb8 <next_unwind_byte>:
 8108bb8:	7a02      	ldrb	r2, [r0, #8]
 8108bba:	b97a      	cbnz	r2, 8108bdc <next_unwind_byte+0x24>
 8108bbc:	7a43      	ldrb	r3, [r0, #9]
 8108bbe:	b1a3      	cbz	r3, 8108bea <next_unwind_byte+0x32>
 8108bc0:	6842      	ldr	r2, [r0, #4]
 8108bc2:	3b01      	subs	r3, #1
 8108bc4:	b410      	push	{r4}
 8108bc6:	7243      	strb	r3, [r0, #9]
 8108bc8:	6813      	ldr	r3, [r2, #0]
 8108bca:	2103      	movs	r1, #3
 8108bcc:	1d14      	adds	r4, r2, #4
 8108bce:	7201      	strb	r1, [r0, #8]
 8108bd0:	021a      	lsls	r2, r3, #8
 8108bd2:	6044      	str	r4, [r0, #4]
 8108bd4:	6002      	str	r2, [r0, #0]
 8108bd6:	bc10      	pop	{r4}
 8108bd8:	0e18      	lsrs	r0, r3, #24
 8108bda:	4770      	bx	lr
 8108bdc:	6803      	ldr	r3, [r0, #0]
 8108bde:	3a01      	subs	r2, #1
 8108be0:	7202      	strb	r2, [r0, #8]
 8108be2:	021a      	lsls	r2, r3, #8
 8108be4:	6002      	str	r2, [r0, #0]
 8108be6:	0e18      	lsrs	r0, r3, #24
 8108be8:	4770      	bx	lr
 8108bea:	20b0      	movs	r0, #176	; 0xb0
 8108bec:	4770      	bx	lr
 8108bee:	bf00      	nop

08108bf0 <_Unwind_GetGR.constprop.0>:
 8108bf0:	b500      	push	{lr}
 8108bf2:	b085      	sub	sp, #20
 8108bf4:	aa03      	add	r2, sp, #12
 8108bf6:	2300      	movs	r3, #0
 8108bf8:	9200      	str	r2, [sp, #0]
 8108bfa:	4619      	mov	r1, r3
 8108bfc:	220c      	movs	r2, #12
 8108bfe:	f7ff fbeb 	bl	81083d8 <_Unwind_VRS_Get>
 8108c02:	9803      	ldr	r0, [sp, #12]
 8108c04:	b005      	add	sp, #20
 8108c06:	f85d fb04 	ldr.w	pc, [sp], #4
 8108c0a:	bf00      	nop

08108c0c <unwind_UCB_from_context>:
 8108c0c:	e7f0      	b.n	8108bf0 <_Unwind_GetGR.constprop.0>
 8108c0e:	bf00      	nop

08108c10 <__gnu_unwind_execute>:
 8108c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8108c14:	4605      	mov	r5, r0
 8108c16:	b085      	sub	sp, #20
 8108c18:	460e      	mov	r6, r1
 8108c1a:	f04f 0800 	mov.w	r8, #0
 8108c1e:	4630      	mov	r0, r6
 8108c20:	f7ff ffca 	bl	8108bb8 <next_unwind_byte>
 8108c24:	28b0      	cmp	r0, #176	; 0xb0
 8108c26:	4604      	mov	r4, r0
 8108c28:	f000 80b2 	beq.w	8108d90 <__gnu_unwind_execute+0x180>
 8108c2c:	0607      	lsls	r7, r0, #24
 8108c2e:	d520      	bpl.n	8108c72 <__gnu_unwind_execute+0x62>
 8108c30:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8108c34:	2b80      	cmp	r3, #128	; 0x80
 8108c36:	d04d      	beq.n	8108cd4 <__gnu_unwind_execute+0xc4>
 8108c38:	2b90      	cmp	r3, #144	; 0x90
 8108c3a:	d036      	beq.n	8108caa <__gnu_unwind_execute+0x9a>
 8108c3c:	2ba0      	cmp	r3, #160	; 0xa0
 8108c3e:	d060      	beq.n	8108d02 <__gnu_unwind_execute+0xf2>
 8108c40:	2bb0      	cmp	r3, #176	; 0xb0
 8108c42:	d074      	beq.n	8108d2e <__gnu_unwind_execute+0x11e>
 8108c44:	2bc0      	cmp	r3, #192	; 0xc0
 8108c46:	f000 808b 	beq.w	8108d60 <__gnu_unwind_execute+0x150>
 8108c4a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8108c4e:	2bd0      	cmp	r3, #208	; 0xd0
 8108c50:	d10b      	bne.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108c52:	f000 0207 	and.w	r2, r0, #7
 8108c56:	3201      	adds	r2, #1
 8108c58:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8108c5c:	2305      	movs	r3, #5
 8108c5e:	2101      	movs	r1, #1
 8108c60:	4628      	mov	r0, r5
 8108c62:	f7ff fd97 	bl	8108794 <_Unwind_VRS_Pop>
 8108c66:	2800      	cmp	r0, #0
 8108c68:	d0d9      	beq.n	8108c1e <__gnu_unwind_execute+0xe>
 8108c6a:	2009      	movs	r0, #9
 8108c6c:	b005      	add	sp, #20
 8108c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108c72:	f10d 090c 	add.w	r9, sp, #12
 8108c76:	2300      	movs	r3, #0
 8108c78:	4619      	mov	r1, r3
 8108c7a:	0087      	lsls	r7, r0, #2
 8108c7c:	f8cd 9000 	str.w	r9, [sp]
 8108c80:	220d      	movs	r2, #13
 8108c82:	4628      	mov	r0, r5
 8108c84:	f7ff fba8 	bl	81083d8 <_Unwind_VRS_Get>
 8108c88:	b2ff      	uxtb	r7, r7
 8108c8a:	9b03      	ldr	r3, [sp, #12]
 8108c8c:	f8cd 9000 	str.w	r9, [sp]
 8108c90:	3704      	adds	r7, #4
 8108c92:	0660      	lsls	r0, r4, #25
 8108c94:	bf4c      	ite	mi
 8108c96:	1bdf      	submi	r7, r3, r7
 8108c98:	18ff      	addpl	r7, r7, r3
 8108c9a:	2300      	movs	r3, #0
 8108c9c:	4619      	mov	r1, r3
 8108c9e:	220d      	movs	r2, #13
 8108ca0:	4628      	mov	r0, r5
 8108ca2:	9703      	str	r7, [sp, #12]
 8108ca4:	f7ff fbbc 	bl	8108420 <_Unwind_VRS_Set>
 8108ca8:	e7b9      	b.n	8108c1e <__gnu_unwind_execute+0xe>
 8108caa:	f000 030d 	and.w	r3, r0, #13
 8108cae:	2b0d      	cmp	r3, #13
 8108cb0:	d0db      	beq.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108cb2:	af03      	add	r7, sp, #12
 8108cb4:	2300      	movs	r3, #0
 8108cb6:	f000 020f 	and.w	r2, r0, #15
 8108cba:	4619      	mov	r1, r3
 8108cbc:	9700      	str	r7, [sp, #0]
 8108cbe:	4628      	mov	r0, r5
 8108cc0:	f7ff fb8a 	bl	81083d8 <_Unwind_VRS_Get>
 8108cc4:	2300      	movs	r3, #0
 8108cc6:	9700      	str	r7, [sp, #0]
 8108cc8:	4619      	mov	r1, r3
 8108cca:	220d      	movs	r2, #13
 8108ccc:	4628      	mov	r0, r5
 8108cce:	f7ff fba7 	bl	8108420 <_Unwind_VRS_Set>
 8108cd2:	e7a4      	b.n	8108c1e <__gnu_unwind_execute+0xe>
 8108cd4:	4630      	mov	r0, r6
 8108cd6:	f7ff ff6f 	bl	8108bb8 <next_unwind_byte>
 8108cda:	0224      	lsls	r4, r4, #8
 8108cdc:	4320      	orrs	r0, r4
 8108cde:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8108ce2:	d0c2      	beq.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108ce4:	0104      	lsls	r4, r0, #4
 8108ce6:	2300      	movs	r3, #0
 8108ce8:	b2a2      	uxth	r2, r4
 8108cea:	4619      	mov	r1, r3
 8108cec:	4628      	mov	r0, r5
 8108cee:	f7ff fd51 	bl	8108794 <_Unwind_VRS_Pop>
 8108cf2:	2800      	cmp	r0, #0
 8108cf4:	d1b9      	bne.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108cf6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8108cfa:	bf18      	it	ne
 8108cfc:	f04f 0801 	movne.w	r8, #1
 8108d00:	e78d      	b.n	8108c1e <__gnu_unwind_execute+0xe>
 8108d02:	43c2      	mvns	r2, r0
 8108d04:	f002 0307 	and.w	r3, r2, #7
 8108d08:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8108d0c:	411a      	asrs	r2, r3
 8108d0e:	0701      	lsls	r1, r0, #28
 8108d10:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8108d14:	f04f 0300 	mov.w	r3, #0
 8108d18:	bf48      	it	mi
 8108d1a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8108d1e:	4619      	mov	r1, r3
 8108d20:	4628      	mov	r0, r5
 8108d22:	f7ff fd37 	bl	8108794 <_Unwind_VRS_Pop>
 8108d26:	2800      	cmp	r0, #0
 8108d28:	f43f af79 	beq.w	8108c1e <__gnu_unwind_execute+0xe>
 8108d2c:	e79d      	b.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108d2e:	28b1      	cmp	r0, #177	; 0xb1
 8108d30:	d033      	beq.n	8108d9a <__gnu_unwind_execute+0x18a>
 8108d32:	28b2      	cmp	r0, #178	; 0xb2
 8108d34:	f000 808b 	beq.w	8108e4e <__gnu_unwind_execute+0x23e>
 8108d38:	28b3      	cmp	r0, #179	; 0xb3
 8108d3a:	d039      	beq.n	8108db0 <__gnu_unwind_execute+0x1a0>
 8108d3c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8108d40:	2bb4      	cmp	r3, #180	; 0xb4
 8108d42:	d092      	beq.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108d44:	f000 0207 	and.w	r2, r0, #7
 8108d48:	3201      	adds	r2, #1
 8108d4a:	2301      	movs	r3, #1
 8108d4c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8108d50:	4619      	mov	r1, r3
 8108d52:	4628      	mov	r0, r5
 8108d54:	f7ff fd1e 	bl	8108794 <_Unwind_VRS_Pop>
 8108d58:	2800      	cmp	r0, #0
 8108d5a:	f43f af60 	beq.w	8108c1e <__gnu_unwind_execute+0xe>
 8108d5e:	e784      	b.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108d60:	28c6      	cmp	r0, #198	; 0xc6
 8108d62:	d042      	beq.n	8108dea <__gnu_unwind_execute+0x1da>
 8108d64:	28c7      	cmp	r0, #199	; 0xc7
 8108d66:	d04c      	beq.n	8108e02 <__gnu_unwind_execute+0x1f2>
 8108d68:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8108d6c:	2bc0      	cmp	r3, #192	; 0xc0
 8108d6e:	d05b      	beq.n	8108e28 <__gnu_unwind_execute+0x218>
 8108d70:	28c8      	cmp	r0, #200	; 0xc8
 8108d72:	d060      	beq.n	8108e36 <__gnu_unwind_execute+0x226>
 8108d74:	28c9      	cmp	r0, #201	; 0xc9
 8108d76:	f47f af78 	bne.w	8108c6a <__gnu_unwind_execute+0x5a>
 8108d7a:	4630      	mov	r0, r6
 8108d7c:	f7ff ff1c 	bl	8108bb8 <next_unwind_byte>
 8108d80:	0302      	lsls	r2, r0, #12
 8108d82:	f000 000f 	and.w	r0, r0, #15
 8108d86:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8108d8a:	3001      	adds	r0, #1
 8108d8c:	4302      	orrs	r2, r0
 8108d8e:	e765      	b.n	8108c5c <__gnu_unwind_execute+0x4c>
 8108d90:	f1b8 0f00 	cmp.w	r8, #0
 8108d94:	d018      	beq.n	8108dc8 <__gnu_unwind_execute+0x1b8>
 8108d96:	2000      	movs	r0, #0
 8108d98:	e768      	b.n	8108c6c <__gnu_unwind_execute+0x5c>
 8108d9a:	4630      	mov	r0, r6
 8108d9c:	f7ff ff0c 	bl	8108bb8 <next_unwind_byte>
 8108da0:	4602      	mov	r2, r0
 8108da2:	2800      	cmp	r0, #0
 8108da4:	f43f af61 	beq.w	8108c6a <__gnu_unwind_execute+0x5a>
 8108da8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8108dac:	d0d0      	beq.n	8108d50 <__gnu_unwind_execute+0x140>
 8108dae:	e75c      	b.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108db0:	4630      	mov	r0, r6
 8108db2:	f7ff ff01 	bl	8108bb8 <next_unwind_byte>
 8108db6:	0301      	lsls	r1, r0, #12
 8108db8:	f000 000f 	and.w	r0, r0, #15
 8108dbc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8108dc0:	1c42      	adds	r2, r0, #1
 8108dc2:	2301      	movs	r3, #1
 8108dc4:	430a      	orrs	r2, r1
 8108dc6:	e7c3      	b.n	8108d50 <__gnu_unwind_execute+0x140>
 8108dc8:	ac03      	add	r4, sp, #12
 8108dca:	4643      	mov	r3, r8
 8108dcc:	220e      	movs	r2, #14
 8108dce:	4641      	mov	r1, r8
 8108dd0:	9400      	str	r4, [sp, #0]
 8108dd2:	4628      	mov	r0, r5
 8108dd4:	f7ff fb00 	bl	81083d8 <_Unwind_VRS_Get>
 8108dd8:	9400      	str	r4, [sp, #0]
 8108dda:	4628      	mov	r0, r5
 8108ddc:	4643      	mov	r3, r8
 8108dde:	220f      	movs	r2, #15
 8108de0:	4641      	mov	r1, r8
 8108de2:	f7ff fb1d 	bl	8108420 <_Unwind_VRS_Set>
 8108de6:	4640      	mov	r0, r8
 8108de8:	e740      	b.n	8108c6c <__gnu_unwind_execute+0x5c>
 8108dea:	4630      	mov	r0, r6
 8108dec:	f7ff fee4 	bl	8108bb8 <next_unwind_byte>
 8108df0:	0301      	lsls	r1, r0, #12
 8108df2:	f000 000f 	and.w	r0, r0, #15
 8108df6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8108dfa:	1c42      	adds	r2, r0, #1
 8108dfc:	2303      	movs	r3, #3
 8108dfe:	430a      	orrs	r2, r1
 8108e00:	e7a6      	b.n	8108d50 <__gnu_unwind_execute+0x140>
 8108e02:	4630      	mov	r0, r6
 8108e04:	f7ff fed8 	bl	8108bb8 <next_unwind_byte>
 8108e08:	4602      	mov	r2, r0
 8108e0a:	2800      	cmp	r0, #0
 8108e0c:	f43f af2d 	beq.w	8108c6a <__gnu_unwind_execute+0x5a>
 8108e10:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8108e14:	f47f af29 	bne.w	8108c6a <__gnu_unwind_execute+0x5a>
 8108e18:	2104      	movs	r1, #4
 8108e1a:	4628      	mov	r0, r5
 8108e1c:	f7ff fcba 	bl	8108794 <_Unwind_VRS_Pop>
 8108e20:	2800      	cmp	r0, #0
 8108e22:	f43f aefc 	beq.w	8108c1e <__gnu_unwind_execute+0xe>
 8108e26:	e720      	b.n	8108c6a <__gnu_unwind_execute+0x5a>
 8108e28:	f000 020f 	and.w	r2, r0, #15
 8108e2c:	3201      	adds	r2, #1
 8108e2e:	2303      	movs	r3, #3
 8108e30:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8108e34:	e78c      	b.n	8108d50 <__gnu_unwind_execute+0x140>
 8108e36:	4630      	mov	r0, r6
 8108e38:	f7ff febe 	bl	8108bb8 <next_unwind_byte>
 8108e3c:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8108e40:	f000 030f 	and.w	r3, r0, #15
 8108e44:	3210      	adds	r2, #16
 8108e46:	3301      	adds	r3, #1
 8108e48:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8108e4c:	e706      	b.n	8108c5c <__gnu_unwind_execute+0x4c>
 8108e4e:	2300      	movs	r3, #0
 8108e50:	f10d 090c 	add.w	r9, sp, #12
 8108e54:	220d      	movs	r2, #13
 8108e56:	4619      	mov	r1, r3
 8108e58:	f8cd 9000 	str.w	r9, [sp]
 8108e5c:	4628      	mov	r0, r5
 8108e5e:	f7ff fabb 	bl	81083d8 <_Unwind_VRS_Get>
 8108e62:	4630      	mov	r0, r6
 8108e64:	f7ff fea8 	bl	8108bb8 <next_unwind_byte>
 8108e68:	0602      	lsls	r2, r0, #24
 8108e6a:	f04f 0702 	mov.w	r7, #2
 8108e6e:	d50c      	bpl.n	8108e8a <__gnu_unwind_execute+0x27a>
 8108e70:	9b03      	ldr	r3, [sp, #12]
 8108e72:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8108e76:	40b8      	lsls	r0, r7
 8108e78:	4403      	add	r3, r0
 8108e7a:	4630      	mov	r0, r6
 8108e7c:	9303      	str	r3, [sp, #12]
 8108e7e:	f7ff fe9b 	bl	8108bb8 <next_unwind_byte>
 8108e82:	0603      	lsls	r3, r0, #24
 8108e84:	f107 0707 	add.w	r7, r7, #7
 8108e88:	d4f2      	bmi.n	8108e70 <__gnu_unwind_execute+0x260>
 8108e8a:	9b03      	ldr	r3, [sp, #12]
 8108e8c:	f8cd 9000 	str.w	r9, [sp]
 8108e90:	f000 047f 	and.w	r4, r0, #127	; 0x7f
 8108e94:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8108e98:	40bc      	lsls	r4, r7
 8108e9a:	2300      	movs	r3, #0
 8108e9c:	4414      	add	r4, r2
 8108e9e:	4619      	mov	r1, r3
 8108ea0:	220d      	movs	r2, #13
 8108ea2:	4628      	mov	r0, r5
 8108ea4:	9403      	str	r4, [sp, #12]
 8108ea6:	f7ff fabb 	bl	8108420 <_Unwind_VRS_Set>
 8108eaa:	e6b8      	b.n	8108c1e <__gnu_unwind_execute+0xe>

08108eac <__gnu_unwind_frame>:
 8108eac:	b510      	push	{r4, lr}
 8108eae:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8108eb0:	b084      	sub	sp, #16
 8108eb2:	6853      	ldr	r3, [r2, #4]
 8108eb4:	2403      	movs	r4, #3
 8108eb6:	f88d 400c 	strb.w	r4, [sp, #12]
 8108eba:	021b      	lsls	r3, r3, #8
 8108ebc:	f102 0408 	add.w	r4, r2, #8
 8108ec0:	4608      	mov	r0, r1
 8108ec2:	79d2      	ldrb	r2, [r2, #7]
 8108ec4:	9301      	str	r3, [sp, #4]
 8108ec6:	a901      	add	r1, sp, #4
 8108ec8:	9402      	str	r4, [sp, #8]
 8108eca:	f88d 200d 	strb.w	r2, [sp, #13]
 8108ece:	f7ff fe9f 	bl	8108c10 <__gnu_unwind_execute>
 8108ed2:	b004      	add	sp, #16
 8108ed4:	bd10      	pop	{r4, pc}
 8108ed6:	bf00      	nop

08108ed8 <_Unwind_GetRegionStart>:
 8108ed8:	b508      	push	{r3, lr}
 8108eda:	f7ff fe97 	bl	8108c0c <unwind_UCB_from_context>
 8108ede:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8108ee0:	bd08      	pop	{r3, pc}
 8108ee2:	bf00      	nop

08108ee4 <_Unwind_GetLanguageSpecificData>:
 8108ee4:	b508      	push	{r3, lr}
 8108ee6:	f7ff fe91 	bl	8108c0c <unwind_UCB_from_context>
 8108eea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8108eec:	79c3      	ldrb	r3, [r0, #7]
 8108eee:	3302      	adds	r3, #2
 8108ef0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8108ef4:	bd08      	pop	{r3, pc}
 8108ef6:	bf00      	nop

08108ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8108ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8108f30 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8108efc:	f002 faea 	bl	810b4d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8108f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8108f02:	e003      	b.n	8108f0c <LoopCopyDataInit>

08108f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8108f04:	4b0b      	ldr	r3, [pc, #44]	; (8108f34 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8108f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8108f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8108f0a:	3104      	adds	r1, #4

08108f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8108f0c:	480a      	ldr	r0, [pc, #40]	; (8108f38 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8108f0e:	4b0b      	ldr	r3, [pc, #44]	; (8108f3c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8108f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8108f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8108f14:	d3f6      	bcc.n	8108f04 <CopyDataInit>
  ldr  r2, =_sbss
 8108f16:	4a0a      	ldr	r2, [pc, #40]	; (8108f40 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8108f18:	e002      	b.n	8108f20 <LoopFillZerobss>

08108f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8108f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8108f1c:	f842 3b04 	str.w	r3, [r2], #4

08108f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8108f20:	4b08      	ldr	r3, [pc, #32]	; (8108f44 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8108f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8108f24:	d3f9      	bcc.n	8108f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8108f26:	f002 fffd 	bl	810bf24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8108f2a:	f000 f839 	bl	8108fa0 <main>
  bx  lr    
 8108f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8108f30:	10020000 	.word	0x10020000
  ldr  r3, =_sidata
 8108f34:	0810c3e4 	.word	0x0810c3e4
  ldr  r0, =_sdata
 8108f38:	30040000 	.word	0x30040000
  ldr  r3, =_edata
 8108f3c:	3004007c 	.word	0x3004007c
  ldr  r2, =_sbss
 8108f40:	3004007c 	.word	0x3004007c
  ldr  r3, = _ebss
 8108f44:	300402a0 	.word	0x300402a0

08108f48 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8108f48:	e7fe      	b.n	8108f48 <ADC3_IRQHandler>
	...

08108f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8108f4c:	b480      	push	{r7}
 8108f4e:	b083      	sub	sp, #12
 8108f50:	af00      	add	r7, sp, #0
 8108f52:	4603      	mov	r3, r0
 8108f54:	6039      	str	r1, [r7, #0]
 8108f56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8108f58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108f5c:	2b00      	cmp	r3, #0
 8108f5e:	db0a      	blt.n	8108f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8108f60:	683b      	ldr	r3, [r7, #0]
 8108f62:	b2da      	uxtb	r2, r3
 8108f64:	490c      	ldr	r1, [pc, #48]	; (8108f98 <__NVIC_SetPriority+0x4c>)
 8108f66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8108f6a:	0112      	lsls	r2, r2, #4
 8108f6c:	b2d2      	uxtb	r2, r2
 8108f6e:	440b      	add	r3, r1
 8108f70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8108f74:	e00a      	b.n	8108f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8108f76:	683b      	ldr	r3, [r7, #0]
 8108f78:	b2da      	uxtb	r2, r3
 8108f7a:	4908      	ldr	r1, [pc, #32]	; (8108f9c <__NVIC_SetPriority+0x50>)
 8108f7c:	88fb      	ldrh	r3, [r7, #6]
 8108f7e:	f003 030f 	and.w	r3, r3, #15
 8108f82:	3b04      	subs	r3, #4
 8108f84:	0112      	lsls	r2, r2, #4
 8108f86:	b2d2      	uxtb	r2, r2
 8108f88:	440b      	add	r3, r1
 8108f8a:	761a      	strb	r2, [r3, #24]
}
 8108f8c:	bf00      	nop
 8108f8e:	370c      	adds	r7, #12
 8108f90:	46bd      	mov	sp, r7
 8108f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f96:	4770      	bx	lr
 8108f98:	e000e100 	.word	0xe000e100
 8108f9c:	e000ed00 	.word	0xe000ed00

08108fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8108fa0:	b580      	push	{r7, lr}
 8108fa2:	b082      	sub	sp, #8
 8108fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	cosmosApi_boot();
 8108fa6:	f000 f98b 	bl	81092c0 <osBoot_boot>
	NVIC_SetPriority(SVCall_IRQn,3);
 8108faa:	2103      	movs	r1, #3
 8108fac:	f06f 0004 	mvn.w	r0, #4
 8108fb0:	f7ff ffcc 	bl	8108f4c <__NVIC_SetPriority>
  NVIC_SetPriority(PendSV_IRQn,4);
 8108fb4:	2104      	movs	r1, #4
 8108fb6:	f06f 0001 	mvn.w	r0, #1
 8108fba:	f7ff ffc7 	bl	8108f4c <__NVIC_SetPriority>
  NVIC_SetPriority (SysTick_IRQn, 0);         /* set Priority for Systick Interrupt */
 8108fbe:	2100      	movs	r1, #0
 8108fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8108fc4:	f7ff ffc2 	bl	8108f4c <__NVIC_SetPriority>
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8108fc8:	4b26      	ldr	r3, [pc, #152]	; (8109064 <main+0xc4>)
 8108fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8108fce:	4a25      	ldr	r2, [pc, #148]	; (8109064 <main+0xc4>)
 8108fd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8108fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8108fd8:	4b22      	ldr	r3, [pc, #136]	; (8109064 <main+0xc4>)
 8108fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8108fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8108fe2:	607b      	str	r3, [r7, #4]
 8108fe4:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8108fe6:	2001      	movs	r0, #1
 8108fe8:	f001 fbe4 	bl	810a7b4 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8108fec:	f001 fc7c 	bl	810a8e8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8108ff0:	2201      	movs	r2, #1
 8108ff2:	2102      	movs	r1, #2
 8108ff4:	2000      	movs	r0, #0
 8108ff6:	f001 fbfd 	bl	810a7f4 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8108ffa:	4b1b      	ldr	r3, [pc, #108]	; (8109068 <main+0xc8>)
 8108ffc:	681b      	ldr	r3, [r3, #0]
 8108ffe:	091b      	lsrs	r3, r3, #4
 8109000:	f003 030f 	and.w	r3, r3, #15
 8109004:	2b07      	cmp	r3, #7
 8109006:	d108      	bne.n	810901a <main+0x7a>
 8109008:	4b18      	ldr	r3, [pc, #96]	; (810906c <main+0xcc>)
 810900a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 810900e:	4a17      	ldr	r2, [pc, #92]	; (810906c <main+0xcc>)
 8109010:	f043 0301 	orr.w	r3, r3, #1
 8109014:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8109018:	e007      	b.n	810902a <main+0x8a>
 810901a:	4b14      	ldr	r3, [pc, #80]	; (810906c <main+0xcc>)
 810901c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8109020:	4a12      	ldr	r2, [pc, #72]	; (810906c <main+0xcc>)
 8109022:	f043 0301 	orr.w	r3, r3, #1
 8109026:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  __HAL_RCC_HSEM_CLK_ENABLE();
 810902a:	4b0e      	ldr	r3, [pc, #56]	; (8109064 <main+0xc4>)
 810902c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8109030:	4a0c      	ldr	r2, [pc, #48]	; (8109064 <main+0xc4>)
 8109032:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8109036:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810903a:	4b0a      	ldr	r3, [pc, #40]	; (8109064 <main+0xc4>)
 810903c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8109040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8109044:	603b      	str	r3, [r7, #0]
 8109046:	683b      	ldr	r3, [r7, #0]
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8109048:	f000 fb6e 	bl	8109728 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 810904c:	f000 f82a 	bl	81090a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8109050:	f000 f80e 	bl	8109070 <MX_DMA_Init>
  /* USER CODE BEGIN 2 */
	cosmosApi_osInit_init();
 8109054:	200f      	movs	r0, #15
 8109056:	f7fa fa2d 	bl	81034b4 <sysCalls_bitWidthType_ret_void>
	cosmosApi_os_start();
 810905a:	2010      	movs	r0, #16
 810905c:	f7fa fa2a 	bl	81034b4 <sysCalls_bitWidthType_ret_void>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8109060:	e7fe      	b.n	8109060 <main+0xc0>
 8109062:	bf00      	nop
 8109064:	58024400 	.word	0x58024400
 8109068:	e000ed00 	.word	0xe000ed00
 810906c:	58026400 	.word	0x58026400

08109070 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8109070:	b480      	push	{r7}
 8109072:	b083      	sub	sp, #12
 8109074:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8109076:	4b0a      	ldr	r3, [pc, #40]	; (81090a0 <MX_DMA_Init+0x30>)
 8109078:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810907c:	4a08      	ldr	r2, [pc, #32]	; (81090a0 <MX_DMA_Init+0x30>)
 810907e:	f043 0301 	orr.w	r3, r3, #1
 8109082:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8109086:	4b06      	ldr	r3, [pc, #24]	; (81090a0 <MX_DMA_Init+0x30>)
 8109088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 810908c:	f003 0301 	and.w	r3, r3, #1
 8109090:	607b      	str	r3, [r7, #4]
 8109092:	687b      	ldr	r3, [r7, #4]

}
 8109094:	bf00      	nop
 8109096:	370c      	adds	r7, #12
 8109098:	46bd      	mov	sp, r7
 810909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810909e:	4770      	bx	lr
 81090a0:	58024400 	.word	0x58024400

081090a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81090a4:	b580      	push	{r7, lr}
 81090a6:	b088      	sub	sp, #32
 81090a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81090aa:	f107 030c 	add.w	r3, r7, #12
 81090ae:	2200      	movs	r2, #0
 81090b0:	601a      	str	r2, [r3, #0]
 81090b2:	605a      	str	r2, [r3, #4]
 81090b4:	609a      	str	r2, [r3, #8]
 81090b6:	60da      	str	r2, [r3, #12]
 81090b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81090ba:	4b24      	ldr	r3, [pc, #144]	; (810914c <MX_GPIO_Init+0xa8>)
 81090bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81090c0:	4a22      	ldr	r2, [pc, #136]	; (810914c <MX_GPIO_Init+0xa8>)
 81090c2:	f043 0301 	orr.w	r3, r3, #1
 81090c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81090ca:	4b20      	ldr	r3, [pc, #128]	; (810914c <MX_GPIO_Init+0xa8>)
 81090cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81090d0:	f003 0301 	and.w	r3, r3, #1
 81090d4:	60bb      	str	r3, [r7, #8]
 81090d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81090d8:	4b1c      	ldr	r3, [pc, #112]	; (810914c <MX_GPIO_Init+0xa8>)
 81090da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81090de:	4a1b      	ldr	r2, [pc, #108]	; (810914c <MX_GPIO_Init+0xa8>)
 81090e0:	f043 0302 	orr.w	r3, r3, #2
 81090e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81090e8:	4b18      	ldr	r3, [pc, #96]	; (810914c <MX_GPIO_Init+0xa8>)
 81090ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81090ee:	f003 0302 	and.w	r3, r3, #2
 81090f2:	607b      	str	r3, [r7, #4]
 81090f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 81090f6:	2200      	movs	r2, #0
 81090f8:	2110      	movs	r1, #16
 81090fa:	4815      	ldr	r0, [pc, #84]	; (8109150 <MX_GPIO_Init+0xac>)
 81090fc:	f001 fabc 	bl	810a678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8109100:	2200      	movs	r2, #0
 8109102:	2101      	movs	r1, #1
 8109104:	4813      	ldr	r0, [pc, #76]	; (8109154 <MX_GPIO_Init+0xb0>)
 8109106:	f001 fab7 	bl	810a678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 810910a:	2310      	movs	r3, #16
 810910c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810910e:	2301      	movs	r3, #1
 8109110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8109112:	2300      	movs	r3, #0
 8109114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8109116:	2303      	movs	r3, #3
 8109118:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810911a:	f107 030c 	add.w	r3, r7, #12
 810911e:	4619      	mov	r1, r3
 8109120:	480b      	ldr	r0, [pc, #44]	; (8109150 <MX_GPIO_Init+0xac>)
 8109122:	f001 f8f9 	bl	810a318 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8109126:	2301      	movs	r3, #1
 8109128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810912a:	2301      	movs	r3, #1
 810912c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810912e:	2300      	movs	r3, #0
 8109130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8109132:	2303      	movs	r3, #3
 8109134:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8109136:	f107 030c 	add.w	r3, r7, #12
 810913a:	4619      	mov	r1, r3
 810913c:	4805      	ldr	r0, [pc, #20]	; (8109154 <MX_GPIO_Init+0xb0>)
 810913e:	f001 f8eb 	bl	810a318 <HAL_GPIO_Init>

}
 8109142:	bf00      	nop
 8109144:	3720      	adds	r7, #32
 8109146:	46bd      	mov	sp, r7
 8109148:	bd80      	pop	{r7, pc}
 810914a:	bf00      	nop
 810914c:	58024400 	.word	0x58024400
 8109150:	58020000 	.word	0x58020000
 8109154:	58020400 	.word	0x58020400

08109158 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8109158:	b580      	push	{r7, lr}
 810915a:	b082      	sub	sp, #8
 810915c:	af00      	add	r7, sp, #0
 810915e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8109160:	687b      	ldr	r3, [r7, #4]
 8109162:	681b      	ldr	r3, [r3, #0]
 8109164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8109168:	d101      	bne.n	810916e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 810916a:	f000 fb3b 	bl	81097e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 810916e:	bf00      	nop
 8109170:	3708      	adds	r7, #8
 8109172:	46bd      	mov	sp, r7
 8109174:	bd80      	pop	{r7, pc}
	...

08109178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8109178:	b480      	push	{r7}
 810917a:	b083      	sub	sp, #12
 810917c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810917e:	4b0a      	ldr	r3, [pc, #40]	; (81091a8 <HAL_MspInit+0x30>)
 8109180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8109184:	4a08      	ldr	r2, [pc, #32]	; (81091a8 <HAL_MspInit+0x30>)
 8109186:	f043 0302 	orr.w	r3, r3, #2
 810918a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810918e:	4b06      	ldr	r3, [pc, #24]	; (81091a8 <HAL_MspInit+0x30>)
 8109190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8109194:	f003 0302 	and.w	r3, r3, #2
 8109198:	607b      	str	r3, [r7, #4]
 810919a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810919c:	bf00      	nop
 810919e:	370c      	adds	r7, #12
 81091a0:	46bd      	mov	sp, r7
 81091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091a6:	4770      	bx	lr
 81091a8:	58024400 	.word	0x58024400

081091ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81091ac:	b580      	push	{r7, lr}
 81091ae:	b090      	sub	sp, #64	; 0x40
 81091b0:	af00      	add	r7, sp, #0
 81091b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM2 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 81091b4:	687b      	ldr	r3, [r7, #4]
 81091b6:	2b0f      	cmp	r3, #15
 81091b8:	d827      	bhi.n	810920a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0U);
 81091ba:	2200      	movs	r2, #0
 81091bc:	6879      	ldr	r1, [r7, #4]
 81091be:	201c      	movs	r0, #28
 81091c0:	f000 fbdc 	bl	810997c <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 81091c4:	201c      	movs	r0, #28
 81091c6:	f000 fbf3 	bl	81099b0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 81091ca:	4a29      	ldr	r2, [pc, #164]	; (8109270 <HAL_InitTick+0xc4>)
 81091cc:	687b      	ldr	r3, [r7, #4]
 81091ce:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 81091d0:	4b28      	ldr	r3, [pc, #160]	; (8109274 <HAL_InitTick+0xc8>)
 81091d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81091d6:	4a27      	ldr	r2, [pc, #156]	; (8109274 <HAL_InitTick+0xc8>)
 81091d8:	f043 0301 	orr.w	r3, r3, #1
 81091dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81091e0:	4b24      	ldr	r3, [pc, #144]	; (8109274 <HAL_InitTick+0xc8>)
 81091e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81091e6:	f003 0301 	and.w	r3, r3, #1
 81091ea:	60fb      	str	r3, [r7, #12]
 81091ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 81091ee:	f107 0210 	add.w	r2, r7, #16
 81091f2:	f107 0314 	add.w	r3, r7, #20
 81091f6:	4611      	mov	r1, r2
 81091f8:	4618      	mov	r0, r3
 81091fa:	f001 fd45 	bl	810ac88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 81091fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109200:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8109202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109204:	2b00      	cmp	r3, #0
 8109206:	d106      	bne.n	8109216 <HAL_InitTick+0x6a>
 8109208:	e001      	b.n	810920e <HAL_InitTick+0x62>
    return HAL_ERROR;
 810920a:	2301      	movs	r3, #1
 810920c:	e02c      	b.n	8109268 <HAL_InitTick+0xbc>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810920e:	f001 fd25 	bl	810ac5c <HAL_RCC_GetPCLK1Freq>
 8109212:	63f8      	str	r0, [r7, #60]	; 0x3c
 8109214:	e004      	b.n	8109220 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8109216:	f001 fd21 	bl	810ac5c <HAL_RCC_GetPCLK1Freq>
 810921a:	4603      	mov	r3, r0
 810921c:	005b      	lsls	r3, r3, #1
 810921e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8109220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109222:	4a15      	ldr	r2, [pc, #84]	; (8109278 <HAL_InitTick+0xcc>)
 8109224:	fba2 2303 	umull	r2, r3, r2, r3
 8109228:	0c9b      	lsrs	r3, r3, #18
 810922a:	3b01      	subs	r3, #1
 810922c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 810922e:	4b13      	ldr	r3, [pc, #76]	; (810927c <HAL_InitTick+0xd0>)
 8109230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8109234:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8109236:	4b11      	ldr	r3, [pc, #68]	; (810927c <HAL_InitTick+0xd0>)
 8109238:	f240 32e7 	movw	r2, #999	; 0x3e7
 810923c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 810923e:	4a0f      	ldr	r2, [pc, #60]	; (810927c <HAL_InitTick+0xd0>)
 8109240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109242:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8109244:	4b0d      	ldr	r3, [pc, #52]	; (810927c <HAL_InitTick+0xd0>)
 8109246:	2200      	movs	r2, #0
 8109248:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 810924a:	4b0c      	ldr	r3, [pc, #48]	; (810927c <HAL_InitTick+0xd0>)
 810924c:	2200      	movs	r2, #0
 810924e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8109250:	480a      	ldr	r0, [pc, #40]	; (810927c <HAL_InitTick+0xd0>)
 8109252:	f001 fd5b 	bl	810ad0c <HAL_TIM_Base_Init>
 8109256:	4603      	mov	r3, r0
 8109258:	2b00      	cmp	r3, #0
 810925a:	d104      	bne.n	8109266 <HAL_InitTick+0xba>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 810925c:	4807      	ldr	r0, [pc, #28]	; (810927c <HAL_InitTick+0xd0>)
 810925e:	f001 fdb7 	bl	810add0 <HAL_TIM_Base_Start_IT>
 8109262:	4603      	mov	r3, r0
 8109264:	e000      	b.n	8109268 <HAL_InitTick+0xbc>
  }

  /* Return function status */
  return HAL_ERROR;
 8109266:	2301      	movs	r3, #1
}
 8109268:	4618      	mov	r0, r3
 810926a:	3740      	adds	r7, #64	; 0x40
 810926c:	46bd      	mov	sp, r7
 810926e:	bd80      	pop	{r7, pc}
 8109270:	30040000 	.word	0x30040000
 8109274:	58024400 	.word	0x58024400
 8109278:	431bde83 	.word	0x431bde83
 810927c:	3004024c 	.word	0x3004024c

08109280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8109280:	b480      	push	{r7}
 8109282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8109284:	e7fe      	b.n	8109284 <NMI_Handler+0x4>

08109286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8109286:	b480      	push	{r7}
 8109288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810928a:	e7fe      	b.n	810928a <HardFault_Handler+0x4>

0810928c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 810928c:	b480      	push	{r7}
 810928e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8109290:	e7fe      	b.n	8109290 <MemManage_Handler+0x4>

08109292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8109292:	b480      	push	{r7}
 8109294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8109296:	e7fe      	b.n	8109296 <BusFault_Handler+0x4>

08109298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8109298:	b480      	push	{r7}
 810929a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810929c:	e7fe      	b.n	810929c <UsageFault_Handler+0x4>

0810929e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810929e:	b480      	push	{r7}
 81092a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81092a2:	bf00      	nop
 81092a4:	46bd      	mov	sp, r7
 81092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092aa:	4770      	bx	lr

081092ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 81092ac:	b580      	push	{r7, lr}
 81092ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 81092b0:	4802      	ldr	r0, [pc, #8]	; (81092bc <TIM2_IRQHandler+0x10>)
 81092b2:	f001 fdc3 	bl	810ae3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 81092b6:	bf00      	nop
 81092b8:	bd80      	pop	{r7, pc}
 81092ba:	bf00      	nop
 81092bc:	3004024c 	.word	0x3004024c

081092c0 <osBoot_boot>:
{
 81092c0:	b580      	push	{r7, lr}
 81092c2:	b08c      	sub	sp, #48	; 0x30
 81092c4:	af00      	add	r7, sp, #0
	coreId = CILcore_getCoreId();
 81092c6:	f7fa fa6f 	bl	81037a8 <CILcore_getCoreId>
 81092ca:	62b8      	str	r0, [r7, #40]	; 0x28
	programSections = (CosmOS_ProgramSectionConfigurationType *)bootSections[coreId].programSections;
 81092cc:	4a29      	ldr	r2, [pc, #164]	; (8109374 <osBoot_boot+0xb4>)
 81092ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81092d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 81092d4:	627b      	str	r3, [r7, #36]	; 0x24
	programSectionsNumber = bootSections[coreId].programSectionsNumber;
 81092d6:	4a27      	ldr	r2, [pc, #156]	; (8109374 <osBoot_boot+0xb4>)
 81092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81092da:	00db      	lsls	r3, r3, #3
 81092dc:	4413      	add	r3, r2
 81092de:	685b      	ldr	r3, [r3, #4]
 81092e0:	623b      	str	r3, [r7, #32]
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 81092e2:	2300      	movs	r3, #0
 81092e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 81092e6:	e03c      	b.n	8109362 <osBoot_boot+0xa2>
		osBoot_bootSection(programSections[i].startAddress,programSections[i].endAddress,programSections[i].flashAddress);
 81092e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81092ea:	4613      	mov	r3, r2
 81092ec:	005b      	lsls	r3, r3, #1
 81092ee:	4413      	add	r3, r2
 81092f0:	009b      	lsls	r3, r3, #2
 81092f2:	461a      	mov	r2, r3
 81092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81092f6:	4413      	add	r3, r2
 81092f8:	6818      	ldr	r0, [r3, #0]
 81092fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81092fc:	4613      	mov	r3, r2
 81092fe:	005b      	lsls	r3, r3, #1
 8109300:	4413      	add	r3, r2
 8109302:	009b      	lsls	r3, r3, #2
 8109304:	461a      	mov	r2, r3
 8109306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109308:	4413      	add	r3, r2
 810930a:	6859      	ldr	r1, [r3, #4]
 810930c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810930e:	4613      	mov	r3, r2
 8109310:	005b      	lsls	r3, r3, #1
 8109312:	4413      	add	r3, r2
 8109314:	009b      	lsls	r3, r3, #2
 8109316:	461a      	mov	r2, r3
 8109318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810931a:	4413      	add	r3, r2
 810931c:	689b      	ldr	r3, [r3, #8]
 810931e:	61f8      	str	r0, [r7, #28]
 8109320:	61b9      	str	r1, [r7, #24]
 8109322:	617b      	str	r3, [r7, #20]
	BitWidthType size = (BitWidthType)(sectionEnd - sectionStart);
 8109324:	69ba      	ldr	r2, [r7, #24]
 8109326:	69fb      	ldr	r3, [r7, #28]
 8109328:	1ad3      	subs	r3, r2, r3
 810932a:	613b      	str	r3, [r7, #16]
	unsigned char *pDst = sectionStart;
 810932c:	69fb      	ldr	r3, [r7, #28]
 810932e:	60fb      	str	r3, [r7, #12]
	unsigned char *pSrc = sectionStartInFlash;
 8109330:	697b      	ldr	r3, [r7, #20]
 8109332:	60bb      	str	r3, [r7, #8]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 8109334:	2300      	movs	r3, #0
 8109336:	607b      	str	r3, [r7, #4]
 8109338:	e00a      	b.n	8109350 <osBoot_boot+0x90>
		*pDst++=*pSrc++;
 810933a:	68ba      	ldr	r2, [r7, #8]
 810933c:	1c53      	adds	r3, r2, #1
 810933e:	60bb      	str	r3, [r7, #8]
 8109340:	68fb      	ldr	r3, [r7, #12]
 8109342:	1c59      	adds	r1, r3, #1
 8109344:	60f9      	str	r1, [r7, #12]
 8109346:	7812      	ldrb	r2, [r2, #0]
 8109348:	701a      	strb	r2, [r3, #0]
	for ( BitWidthType i = 0; i < (size * sizeof(BitWidthType)); i++ )
 810934a:	687b      	ldr	r3, [r7, #4]
 810934c:	3301      	adds	r3, #1
 810934e:	607b      	str	r3, [r7, #4]
 8109350:	693b      	ldr	r3, [r7, #16]
 8109352:	009b      	lsls	r3, r3, #2
 8109354:	687a      	ldr	r2, [r7, #4]
 8109356:	429a      	cmp	r2, r3
 8109358:	d3ef      	bcc.n	810933a <osBoot_boot+0x7a>
}
 810935a:	bf00      	nop
	for (BitWidthType i=0; i < programSectionsNumber; i++)
 810935c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 810935e:	3301      	adds	r3, #1
 8109360:	62fb      	str	r3, [r7, #44]	; 0x2c
 8109362:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8109364:	6a3b      	ldr	r3, [r7, #32]
 8109366:	429a      	cmp	r2, r3
 8109368:	d3be      	bcc.n	81092e8 <osBoot_boot+0x28>
};
 810936a:	bf00      	nop
 810936c:	bf00      	nop
 810936e:	3730      	adds	r7, #48	; 0x30
 8109370:	46bd      	mov	sp, r7
 8109372:	bd80      	pop	{r7, pc}
 8109374:	0810c0d0 	.word	0x0810c0d0

08109378 <malloc_varAlloc>:
  *
  * @return CosmOS_MallocVariableType *
********************************************************************************/
static CosmOS_MallocVariableType * malloc_varAlloc( AddressType nextAvailableAddress, AddressType priorMallocAddress,\
													AddressType nextMallocAddress, BitWidthType size )
{
 8109378:	b480      	push	{r7}
 810937a:	b087      	sub	sp, #28
 810937c:	af00      	add	r7, sp, #0
 810937e:	60f8      	str	r0, [r7, #12]
 8109380:	60b9      	str	r1, [r7, #8]
 8109382:	607a      	str	r2, [r7, #4]
 8109384:	603b      	str	r3, [r7, #0]
	CosmOS_MallocVariableType * newMallocVar = (CosmOS_MallocVariableType *)nextAvailableAddress;
 8109386:	68fb      	ldr	r3, [r7, #12]
 8109388:	617b      	str	r3, [r7, #20]

	newMallocVar->prior = (CosmOS_MallocVariableType *)priorMallocAddress;
 810938a:	68ba      	ldr	r2, [r7, #8]
 810938c:	697b      	ldr	r3, [r7, #20]
 810938e:	601a      	str	r2, [r3, #0]
	newMallocVar->next = (CosmOS_MallocVariableType *)nextMallocAddress;
 8109390:	687a      	ldr	r2, [r7, #4]
 8109392:	697b      	ldr	r3, [r7, #20]
 8109394:	605a      	str	r2, [r3, #4]
	newMallocVar->size = (ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType)) + \
							(AddressType)ALIGN(size,sizeof(AddressType)));
 8109396:	683b      	ldr	r3, [r7, #0]
 8109398:	3303      	adds	r3, #3
 810939a:	f023 0303 	bic.w	r3, r3, #3
	newMallocVar->size = (ALIGN(sizeof(CosmOS_MallocVariableType),sizeof(AddressType)) + \
 810939e:	f103 020c 	add.w	r2, r3, #12
 81093a2:	697b      	ldr	r3, [r7, #20]
 81093a4:	609a      	str	r2, [r3, #8]

	return newMallocVar;
 81093a6:	697b      	ldr	r3, [r7, #20]
}
 81093a8:	4618      	mov	r0, r3
 81093aa:	371c      	adds	r7, #28
 81093ac:	46bd      	mov	sp, r7
 81093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093b2:	4770      	bx	lr

081093b4 <malloc_internal>:
  * @param[in]  size_t size
  *
  * @return void *
********************************************************************************/
void *malloc_internal(size_t size)
{
 81093b4:	b580      	push	{r7, lr}
 81093b6:	b092      	sub	sp, #72	; 0x48
 81093b8:	af00      	add	r7, sp, #0
 81093ba:	6078      	str	r0, [r7, #4]
	CosmOS_ProgramVariableType *programVar;
	CosmOS_MallocVariableType *currentMallocVar,
								*newMallocVar;


	coreVar = core_getCoreVar();
 81093bc:	f7f8 fde5 	bl	8101f8a <core_getCoreVar>
 81093c0:	63b8      	str	r0, [r7, #56]	; 0x38
	returnAddress = (AddressType)NULL;
 81093c2:	2300      	movs	r3, #0
 81093c4:	647b      	str	r3, [r7, #68]	; 0x44

	if ( coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 81093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81093c8:	685b      	ldr	r3, [r3, #4]
 81093ca:	681b      	ldr	r3, [r3, #0]
 81093cc:	685b      	ldr	r3, [r3, #4]
 81093ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 81093d2:	f040 808d 	bne.w	81094f0 <malloc_internal+0x13c>
 81093d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81093d8:	613b      	str	r3, [r7, #16]
    return (core->programInExecution);
 81093da:	693b      	ldr	r3, [r7, #16]
 81093dc:	689b      	ldr	r3, [r3, #8]
	{

		programVar = core_getCoreProgramInExecution(coreVar);
 81093de:	637b      	str	r3, [r7, #52]	; 0x34
 81093e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81093e2:	617b      	str	r3, [r7, #20]
    return (program->cfg->programHeapLowAddress);
 81093e4:	697b      	ldr	r3, [r7, #20]
 81093e6:	681b      	ldr	r3, [r3, #0]
 81093e8:	69db      	ldr	r3, [r3, #28]

		heapLowAddress = program_getProgramHeapLowAddress(programVar);
 81093ea:	633b      	str	r3, [r7, #48]	; 0x30
 81093ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81093ee:	61bb      	str	r3, [r7, #24]
    return (program->cfg->programHeapHighAddress);
 81093f0:	69bb      	ldr	r3, [r7, #24]
 81093f2:	681b      	ldr	r3, [r3, #0]
 81093f4:	6a1b      	ldr	r3, [r3, #32]
		heapHighAddress = program_getProgramHeapHighAddress(programVar);
 81093f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		allocated = False;
 81093f8:	2300      	movs	r3, #0
 81093fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		currentMallocVar = (CosmOS_MallocVariableType *)heapLowAddress;
 81093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8109400:	63fb      	str	r3, [r7, #60]	; 0x3c

		mutexState = mutex_getMutex(programVar->cfg->heapMutex);
 8109402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8109404:	681b      	ldr	r3, [r3, #0]
 8109406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109408:	4618      	mov	r0, r3
 810940a:	f7f8 fff7 	bl	81023fc <mutex_getMutex>
 810940e:	62b8      	str	r0, [r7, #40]	; 0x28

		//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
		cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED);
 8109410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109412:	2b02      	cmp	r3, #2
 8109414:	bf0c      	ite	eq
 8109416:	2301      	moveq	r3, #1
 8109418:	2300      	movne	r3, #0
 810941a:	b2db      	uxtb	r3, r3
 810941c:	61fb      	str	r3, [r7, #28]
    if ( IS_NOT( result ) )
 810941e:	69fb      	ldr	r3, [r7, #28]
 8109420:	2b00      	cmp	r3, #0
 8109422:	d101      	bne.n	8109428 <malloc_internal+0x74>
        os_kernelPanic();
 8109424:	f7f9 f93c 	bl	81026a0 <os_kernelPanic>
}
 8109428:	bf00      	nop

		do
		{
			if (currentMallocVar->next IS_NOT_EQUAL_TO NULL)
 810942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810942c:	685b      	ldr	r3, [r3, #4]
 810942e:	2b00      	cmp	r3, #0
 8109430:	d027      	beq.n	8109482 <malloc_internal+0xce>
			{
				nextAvailableAddress = (AddressType)currentMallocVar + (AddressType)currentMallocVar->size;
 8109432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109434:	689a      	ldr	r2, [r3, #8]
 8109436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109438:	4413      	add	r3, r2
 810943a:	627b      	str	r3, [r7, #36]	; 0x24
				if (size < ((AddressType)currentMallocVar->next - nextAvailableAddress))
 810943c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810943e:	685b      	ldr	r3, [r3, #4]
 8109440:	461a      	mov	r2, r3
 8109442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109444:	1ad3      	subs	r3, r2, r3
 8109446:	687a      	ldr	r2, [r7, #4]
 8109448:	429a      	cmp	r2, r3
 810944a:	d216      	bcs.n	810947a <malloc_internal+0xc6>
				{
					newMallocVar = malloc_varAlloc(nextAvailableAddress,
 810944c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
													(AddressType)currentMallocVar,
													(AddressType)currentMallocVar->next,
 810944e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109450:	685b      	ldr	r3, [r3, #4]
					newMallocVar = malloc_varAlloc(nextAvailableAddress,
 8109452:	461a      	mov	r2, r3
 8109454:	687b      	ldr	r3, [r7, #4]
 8109456:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8109458:	f7ff ff8e 	bl	8109378 <malloc_varAlloc>
 810945c:	6238      	str	r0, [r7, #32]
													size);

					((CosmOS_MallocVariableType *)currentMallocVar->next)->prior = newMallocVar;
 810945e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109460:	685b      	ldr	r3, [r3, #4]
 8109462:	6a3a      	ldr	r2, [r7, #32]
 8109464:	601a      	str	r2, [r3, #0]
					currentMallocVar->next = newMallocVar;
 8109466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109468:	6a3a      	ldr	r2, [r7, #32]
 810946a:	605a      	str	r2, [r3, #4]

					returnAddress = (AddressType)newMallocVar +
 810946c:	6a3b      	ldr	r3, [r7, #32]
 810946e:	330c      	adds	r3, #12
 8109470:	647b      	str	r3, [r7, #68]	; 0x44
									(AddressType)ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType));
					allocated = True;
 8109472:	2301      	movs	r3, #1
 8109474:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109478:	e01e      	b.n	81094b8 <malloc_internal+0x104>
				}
				else
				{
					currentMallocVar = currentMallocVar->next;
 810947a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810947c:	685b      	ldr	r3, [r3, #4]
 810947e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8109480:	e01a      	b.n	81094b8 <malloc_internal+0x104>
				}
			}
			else
			{
				nextAvailableAddress = (AddressType)currentMallocVar + (AddressType)currentMallocVar->size;
 8109482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109484:	689a      	ldr	r2, [r3, #8]
 8109486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109488:	4413      	add	r3, r2
 810948a:	627b      	str	r3, [r7, #36]	; 0x24
				if (size < (heapHighAddress - nextAvailableAddress))
 810948c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810948e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109490:	1ad3      	subs	r3, r2, r3
 8109492:	687a      	ldr	r2, [r7, #4]
 8109494:	429a      	cmp	r2, r3
 8109496:	d20f      	bcs.n	81094b8 <malloc_internal+0x104>
				{
					newMallocVar = malloc_varAlloc(nextAvailableAddress,
 8109498:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 810949a:	687b      	ldr	r3, [r7, #4]
 810949c:	2200      	movs	r2, #0
 810949e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 81094a0:	f7ff ff6a 	bl	8109378 <malloc_varAlloc>
 81094a4:	6238      	str	r0, [r7, #32]
													(AddressType)currentMallocVar,
													(AddressType)NULL,
													size);

					currentMallocVar->next = newMallocVar;
 81094a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81094a8:	6a3a      	ldr	r2, [r7, #32]
 81094aa:	605a      	str	r2, [r3, #4]

					returnAddress = (AddressType)newMallocVar +
 81094ac:	6a3b      	ldr	r3, [r7, #32]
 81094ae:	330c      	adds	r3, #12
 81094b0:	647b      	str	r3, [r7, #68]	; 0x44
									(AddressType)ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType));
					allocated = True;
 81094b2:	2301      	movs	r3, #1
 81094b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				}
			}
		} while (currentMallocVar->next AND IS_NOT(allocated));
 81094b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81094ba:	685b      	ldr	r3, [r3, #4]
 81094bc:	2b00      	cmp	r3, #0
 81094be:	d003      	beq.n	81094c8 <malloc_internal+0x114>
 81094c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81094c4:	2b00      	cmp	r3, #0
 81094c6:	d0b0      	beq.n	810942a <malloc_internal+0x76>

		mutexState = mutex_releaseMutex(programVar->cfg->heapMutex);
 81094c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81094ca:	681b      	ldr	r3, [r3, #0]
 81094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81094ce:	4618      	mov	r0, r3
 81094d0:	f7f9 f897 	bl	8102602 <mutex_releaseMutex>
 81094d4:	62b8      	str	r0, [r7, #40]	; 0x28

		//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
		cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__RELEASED);
 81094d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81094d8:	2b00      	cmp	r3, #0
 81094da:	bf0c      	ite	eq
 81094dc:	2301      	moveq	r3, #1
 81094de:	2300      	movne	r3, #0
 81094e0:	b2db      	uxtb	r3, r3
 81094e2:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 81094e4:	68fb      	ldr	r3, [r7, #12]
 81094e6:	2b00      	cmp	r3, #0
 81094e8:	d101      	bne.n	81094ee <malloc_internal+0x13a>
        os_kernelPanic();
 81094ea:	f7f9 f8d9 	bl	81026a0 <os_kernelPanic>
}
 81094ee:	bf00      	nop
	}

	return (void *)returnAddress;
 81094f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 81094f2:	4618      	mov	r0, r3
 81094f4:	3748      	adds	r7, #72	; 0x48
 81094f6:	46bd      	mov	sp, r7
 81094f8:	bd80      	pop	{r7, pc}

081094fa <free_internal>:
  * @param[in]  void * ptr
  *
  * @return none
********************************************************************************/
void free_internal(void *ptr)
{
 81094fa:	b580      	push	{r7, lr}
 81094fc:	b08a      	sub	sp, #40	; 0x28
 81094fe:	af00      	add	r7, sp, #0
 8109500:	6078      	str	r0, [r7, #4]

	CosmOS_CoreVariableType *coreVar;
	CosmOS_ProgramVariableType *programVar;

	CosmOS_MallocVariableType *mallocVarToFree =
	(CosmOS_MallocVariableType *)((AddressType)ptr - ALIGN(sizeof(CosmOS_MallocVariableType), sizeof(AddressType)));
 8109502:	687b      	ldr	r3, [r7, #4]
 8109504:	3b0c      	subs	r3, #12
	CosmOS_MallocVariableType *mallocVarToFree =
 8109506:	627b      	str	r3, [r7, #36]	; 0x24


	coreVar = core_getCoreVar();
 8109508:	f7f8 fd3f 	bl	8101f8a <core_getCoreVar>
 810950c:	6238      	str	r0, [r7, #32]
	if ( coreVar->schedulableInExecution->cfg->instanceType IS_EQUAL_TO SCHEDULABLE_INSTANCE_ENUM__THREAD )
 810950e:	6a3b      	ldr	r3, [r7, #32]
 8109510:	685b      	ldr	r3, [r3, #4]
 8109512:	681b      	ldr	r3, [r3, #0]
 8109514:	685b      	ldr	r3, [r3, #4]
 8109516:	f1b3 3fff 	cmp.w	r3, #4294967295
 810951a:	d13e      	bne.n	810959a <free_internal+0xa0>
 810951c:	6a3b      	ldr	r3, [r7, #32]
 810951e:	613b      	str	r3, [r7, #16]
 8109520:	693b      	ldr	r3, [r7, #16]
 8109522:	689b      	ldr	r3, [r3, #8]
	{
		//TODO: check if the pointer is one of the allocated heap variables
		programVar = core_getCoreProgramInExecution(coreVar);
 8109524:	61fb      	str	r3, [r7, #28]

		mutexState = mutex_getMutex(programVar->cfg->heapMutex);
 8109526:	69fb      	ldr	r3, [r7, #28]
 8109528:	681b      	ldr	r3, [r3, #0]
 810952a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810952c:	4618      	mov	r0, r3
 810952e:	f7f8 ff65 	bl	81023fc <mutex_getMutex>
 8109532:	61b8      	str	r0, [r7, #24]

		//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
		cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__SUCCESSFULLY_LOCKED);
 8109534:	69bb      	ldr	r3, [r7, #24]
 8109536:	2b02      	cmp	r3, #2
 8109538:	bf0c      	ite	eq
 810953a:	2301      	moveq	r3, #1
 810953c:	2300      	movne	r3, #0
 810953e:	b2db      	uxtb	r3, r3
 8109540:	617b      	str	r3, [r7, #20]
    if ( IS_NOT( result ) )
 8109542:	697b      	ldr	r3, [r7, #20]
 8109544:	2b00      	cmp	r3, #0
 8109546:	d101      	bne.n	810954c <free_internal+0x52>
        os_kernelPanic();
 8109548:	f7f9 f8aa 	bl	81026a0 <os_kernelPanic>
}
 810954c:	bf00      	nop

		if (mallocVarToFree->prior)
 810954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109550:	681b      	ldr	r3, [r3, #0]
 8109552:	2b00      	cmp	r3, #0
 8109554:	d004      	beq.n	8109560 <free_internal+0x66>
		{
			((CosmOS_MallocVariableType *)mallocVarToFree->prior)->next =
 8109556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109558:	681b      	ldr	r3, [r3, #0]
				mallocVarToFree->next ? mallocVarToFree->next : NULL;
 810955a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810955c:	6852      	ldr	r2, [r2, #4]
			((CosmOS_MallocVariableType *)mallocVarToFree->prior)->next =
 810955e:	605a      	str	r2, [r3, #4]
		}

		if (mallocVarToFree->next)
 8109560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109562:	685b      	ldr	r3, [r3, #4]
 8109564:	2b00      	cmp	r3, #0
 8109566:	d004      	beq.n	8109572 <free_internal+0x78>
		{
			((CosmOS_MallocVariableType *)mallocVarToFree->next)->prior =
 8109568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810956a:	685b      	ldr	r3, [r3, #4]
				mallocVarToFree->prior ? mallocVarToFree->prior : NULL;
 810956c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 810956e:	6812      	ldr	r2, [r2, #0]
			((CosmOS_MallocVariableType *)mallocVarToFree->next)->prior =
 8109570:	601a      	str	r2, [r3, #0]
		}

		mutexState = mutex_releaseMutex(programVar->cfg->heapMutex);
 8109572:	69fb      	ldr	r3, [r7, #28]
 8109574:	681b      	ldr	r3, [r3, #0]
 8109576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109578:	4618      	mov	r0, r3
 810957a:	f7f9 f842 	bl	8102602 <mutex_releaseMutex>
 810957e:	61b8      	str	r0, [r7, #24]

		//TODO: this assertion cannot be here cause it will in the future disable ISRs - so only os can call it in privileged context
		cosmosAssert(mutexState IS_EQUAL_TO MUTEX_STATE_ENUM__RELEASED);
 8109580:	69bb      	ldr	r3, [r7, #24]
 8109582:	2b00      	cmp	r3, #0
 8109584:	bf0c      	ite	eq
 8109586:	2301      	moveq	r3, #1
 8109588:	2300      	movne	r3, #0
 810958a:	b2db      	uxtb	r3, r3
 810958c:	60fb      	str	r3, [r7, #12]
    if ( IS_NOT( result ) )
 810958e:	68fb      	ldr	r3, [r7, #12]
 8109590:	2b00      	cmp	r3, #0
 8109592:	d101      	bne.n	8109598 <free_internal+0x9e>
        os_kernelPanic();
 8109594:	f7f9 f884 	bl	81026a0 <os_kernelPanic>
}
 8109598:	bf00      	nop
	}
}
 810959a:	bf00      	nop
 810959c:	3728      	adds	r7, #40	; 0x28
 810959e:	46bd      	mov	sp, r7
 81095a0:	bd80      	pop	{r7, pc}
	...

081095a4 <__NVIC_EnableIRQ>:
{
 81095a4:	b480      	push	{r7}
 81095a6:	b083      	sub	sp, #12
 81095a8:	af00      	add	r7, sp, #0
 81095aa:	4603      	mov	r3, r0
 81095ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81095ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81095b2:	2b00      	cmp	r3, #0
 81095b4:	db0b      	blt.n	81095ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81095b6:	88fb      	ldrh	r3, [r7, #6]
 81095b8:	f003 021f 	and.w	r2, r3, #31
 81095bc:	4907      	ldr	r1, [pc, #28]	; (81095dc <__NVIC_EnableIRQ+0x38>)
 81095be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81095c2:	095b      	lsrs	r3, r3, #5
 81095c4:	2001      	movs	r0, #1
 81095c6:	fa00 f202 	lsl.w	r2, r0, r2
 81095ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 81095ce:	bf00      	nop
 81095d0:	370c      	adds	r7, #12
 81095d2:	46bd      	mov	sp, r7
 81095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81095d8:	4770      	bx	lr
 81095da:	bf00      	nop
 81095dc:	e000e100 	.word	0xe000e100

081095e0 <__NVIC_DisableIRQ>:
{
 81095e0:	b480      	push	{r7}
 81095e2:	b083      	sub	sp, #12
 81095e4:	af00      	add	r7, sp, #0
 81095e6:	4603      	mov	r3, r0
 81095e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81095ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81095ee:	2b00      	cmp	r3, #0
 81095f0:	db12      	blt.n	8109618 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81095f2:	88fb      	ldrh	r3, [r7, #6]
 81095f4:	f003 021f 	and.w	r2, r3, #31
 81095f8:	490a      	ldr	r1, [pc, #40]	; (8109624 <__NVIC_DisableIRQ+0x44>)
 81095fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81095fe:	095b      	lsrs	r3, r3, #5
 8109600:	2001      	movs	r0, #1
 8109602:	fa00 f202 	lsl.w	r2, r0, r2
 8109606:	3320      	adds	r3, #32
 8109608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810960c:	f3bf 8f4f 	dsb	sy
}
 8109610:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109612:	f3bf 8f6f 	isb	sy
}
 8109616:	bf00      	nop
}
 8109618:	bf00      	nop
 810961a:	370c      	adds	r7, #12
 810961c:	46bd      	mov	sp, r7
 810961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109622:	4770      	bx	lr
 8109624:	e000e100 	.word	0xe000e100

08109628 <interrupt_enableInterrupts>:
  * @param[in] BitWidthType entityId
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_enableInterrupts(BitWidthType entityId)
{
 8109628:	b480      	push	{r7}
 810962a:	b083      	sub	sp, #12
 810962c:	af00      	add	r7, sp, #0
 810962e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8109630:	b662      	cpsie	i
}
 8109632:	bf00      	nop
}
 8109634:	bf00      	nop
	CILinterrupt_enableInterrupts();

	__SUPRESS_UNUSED_VAR(entityId);
}
 8109636:	bf00      	nop
 8109638:	370c      	adds	r7, #12
 810963a:	46bd      	mov	sp, r7
 810963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109640:	4770      	bx	lr

08109642 <interrupt_enableInterrupt>:
  * @param[in]  BitWidthType ISR
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_enableInterrupt(BitWidthType entityId,BitWidthType ISR)
{
 8109642:	b580      	push	{r7, lr}
 8109644:	b084      	sub	sp, #16
 8109646:	af00      	add	r7, sp, #0
 8109648:	6078      	str	r0, [r7, #4]
 810964a:	6039      	str	r1, [r7, #0]
 810964c:	683b      	ldr	r3, [r7, #0]
 810964e:	60fb      	str	r3, [r7, #12]
		__NVIC_EnableIRQ(ISR);
 8109650:	68fb      	ldr	r3, [r7, #12]
 8109652:	b21b      	sxth	r3, r3
 8109654:	4618      	mov	r0, r3
 8109656:	f7ff ffa5 	bl	81095a4 <__NVIC_EnableIRQ>
}
 810965a:	bf00      	nop
	CILinterrupt_enableInterrupt(ISR);

	__SUPRESS_UNUSED_VAR(entityId);
	__SUPRESS_UNUSED_VAR(ISR);
}
 810965c:	bf00      	nop
 810965e:	3710      	adds	r7, #16
 8109660:	46bd      	mov	sp, r7
 8109662:	bd80      	pop	{r7, pc}

08109664 <interrupt_disableInterrupts>:
  * @param[in]  BitWidthType entityId
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_disableInterrupts(BitWidthType entityId)
{
 8109664:	b480      	push	{r7}
 8109666:	b083      	sub	sp, #12
 8109668:	af00      	add	r7, sp, #0
 810966a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 810966c:	b672      	cpsid	i
}
 810966e:	bf00      	nop
}
 8109670:	bf00      	nop
	CILinterrupt_disableInterrupts();

	__SUPRESS_UNUSED_VAR(entityId);
}
 8109672:	bf00      	nop
 8109674:	370c      	adds	r7, #12
 8109676:	46bd      	mov	sp, r7
 8109678:	f85d 7b04 	ldr.w	r7, [sp], #4
 810967c:	4770      	bx	lr

0810967e <interrupt_disableInterrupt>:
  * @param[in]  BitWidthType ISR
  *
  * @return none
********************************************************************************/
__STATIC_FORCEINLINE void interrupt_disableInterrupt(BitWidthType entityId,BitWidthType ISR)
{
 810967e:	b580      	push	{r7, lr}
 8109680:	b084      	sub	sp, #16
 8109682:	af00      	add	r7, sp, #0
 8109684:	6078      	str	r0, [r7, #4]
 8109686:	6039      	str	r1, [r7, #0]
 8109688:	683b      	ldr	r3, [r7, #0]
 810968a:	60fb      	str	r3, [r7, #12]
		__NVIC_DisableIRQ(ISR);
 810968c:	68fb      	ldr	r3, [r7, #12]
 810968e:	b21b      	sxth	r3, r3
 8109690:	4618      	mov	r0, r3
 8109692:	f7ff ffa5 	bl	81095e0 <__NVIC_DisableIRQ>
}
 8109696:	bf00      	nop
	CILinterrupt_disableInterrupt(ISR);

	__SUPRESS_UNUSED_VAR(entityId);
	__SUPRESS_UNUSED_VAR(ISR);
}
 8109698:	bf00      	nop
 810969a:	3710      	adds	r7, #16
 810969c:	46bd      	mov	sp, r7
 810969e:	bd80      	pop	{r7, pc}

081096a0 <PendSV_Handler>:
  *
  * @return none
********************************************************************************/
__NAKED void PendSV_Handler(void)
{
	__asm volatile ("cpsid i" : : : "memory");
 81096a0:	b672      	cpsid	i
    __asm volatile ("MRS R0,PSP");
 81096a2:	f3ef 8009 	mrs	r0, PSP
    __asm volatile ("ISB");
 81096a6:	f3bf 8f6f 	isb	sy

    __asm volatile ("TST R14, #16");
 81096aa:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 81096ae:	bf08      	it	eq
    __asm volatile ("VSTMDBEQ R0!,{S16-S31}"); /* If fp is true save floating point registers on stack */
 81096b0:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    __asm volatile ("STMDB R0!,{R4-R8,R10,R11,R14}");
 81096b4:	e920 4df0 	stmdb	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}

    __asm volatile ("BL scheduler_scheduleNextInstance");
 81096b8:	f7f9 f9f5 	bl	8102aa6 <scheduler_scheduleNextInstance>
    __asm volatile ("ISB");
 81096bc:	f3bf 8f6f 	isb	sy

    __asm volatile ("LDMIA R0!,{R4-R8,R10,R11,R14}");
 81096c0:	e8b0 4df0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, sl, fp, lr}
    __asm volatile ("TST R14, #16");
 81096c4:	f01e 0f10 	tst.w	lr, #16
    __asm volatile ("IT EQ");
 81096c8:	bf08      	it	eq
    __asm volatile ("VLDMIAEQ R0!,{S16-S31}"); /* If fp is true restore floating point registers on stack */
 81096ca:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    __asm volatile ("MSR PSP,R0");
 81096ce:	f380 8809 	msr	PSP, r0
    __asm volatile ("ISB");
 81096d2:	f3bf 8f6f 	isb	sy
	__asm volatile ("cpsie i" : : : "memory");
 81096d6:	b662      	cpsie	i
    __asm volatile ("BX R14");
 81096d8:	4770      	bx	lr
}
 81096da:	bf00      	nop

081096dc <SysTick_Handler>:
  * @param[in]  none
  *
  * @return none
********************************************************************************/
void SysTick_Handler( void )
{
 81096dc:	b580      	push	{r7, lr}
 81096de:	b084      	sub	sp, #16
 81096e0:	af00      	add	r7, sp, #0
	CosmOS_CoreVariableType * coreVar;
	CosmOS_SchedulerVariableType * schedulerVar;


	coreVar = core_getCoreVar();
 81096e2:	f7f8 fc52 	bl	8101f8a <core_getCoreVar>
 81096e6:	60f8      	str	r0, [r7, #12]
 81096e8:	68fb      	ldr	r3, [r7, #12]
 81096ea:	607b      	str	r3, [r7, #4]
    return (core->schedulerVar);
 81096ec:	687b      	ldr	r3, [r7, #4]
 81096ee:	691b      	ldr	r3, [r3, #16]
	schedulerVar = core_getCoreSchedulerVar( coreVar );
 81096f0:	60bb      	str	r3, [r7, #8]

	schedulerVar->rescheduleTriggerState = RESCHEDULE_TRIGGER_STATE_ENUM__TIMER;
 81096f2:	68bb      	ldr	r3, [r7, #8]
 81096f4:	f04f 32ff 	mov.w	r2, #4294967295
 81096f8:	621a      	str	r2, [r3, #32]
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 81096fa:	4b05      	ldr	r3, [pc, #20]	; (8109710 <SysTick_Handler+0x34>)
 81096fc:	685b      	ldr	r3, [r3, #4]
 81096fe:	4a04      	ldr	r2, [pc, #16]	; (8109710 <SysTick_Handler+0x34>)
 8109700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8109704:	6053      	str	r3, [r2, #4]
}
 8109706:	bf00      	nop

	CILinterrupt_contextSwitchRoutineTrigger();
}
 8109708:	bf00      	nop
 810970a:	3710      	adds	r7, #16
 810970c:	46bd      	mov	sp, r7
 810970e:	bd80      	pop	{r7, pc}
 8109710:	e000ed00 	.word	0xe000ed00

08109714 <SVC_Handler>:
  *
  * @return none
********************************************************************************/
__NAKED void SVC_Handler( void )
{
    __asm volatile ("TST LR, #4");
 8109714:	f01e 0f04 	tst.w	lr, #4
    __asm volatile ("ITE EQ");
 8109718:	bf0c      	ite	eq
    __asm volatile ("MRSEQ r0, MSP");
 810971a:	f3ef 8008 	mrseq	r0, MSP
    __asm volatile ("MRSNE r0, PSP");
 810971e:	f3ef 8009 	mrsne	r0, PSP
    __asm volatile ( "B CILsysCalls_dispatcher");
 8109722:	f7fa bbbb 	b.w	8103e9c <CILsysCalls_dispatcher>
}
 8109726:	bf00      	nop

08109728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8109728:	b580      	push	{r7, lr}
 810972a:	b082      	sub	sp, #8
 810972c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810972e:	4b28      	ldr	r3, [pc, #160]	; (81097d0 <HAL_Init+0xa8>)
 8109730:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8109734:	4a26      	ldr	r2, [pc, #152]	; (81097d0 <HAL_Init+0xa8>)
 8109736:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810973a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810973e:	4b24      	ldr	r3, [pc, #144]	; (81097d0 <HAL_Init+0xa8>)
 8109740:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8109744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8109748:	603b      	str	r3, [r7, #0]
 810974a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810974c:	4b21      	ldr	r3, [pc, #132]	; (81097d4 <HAL_Init+0xac>)
 810974e:	681b      	ldr	r3, [r3, #0]
 8109750:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8109754:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8109758:	4a1e      	ldr	r2, [pc, #120]	; (81097d4 <HAL_Init+0xac>)
 810975a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 810975e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8109760:	4b1c      	ldr	r3, [pc, #112]	; (81097d4 <HAL_Init+0xac>)
 8109762:	681b      	ldr	r3, [r3, #0]
 8109764:	4a1b      	ldr	r2, [pc, #108]	; (81097d4 <HAL_Init+0xac>)
 8109766:	f043 0301 	orr.w	r3, r3, #1
 810976a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 810976c:	2003      	movs	r0, #3
 810976e:	f000 f8fa 	bl	8109966 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8109772:	f001 f8c7 	bl	810a904 <HAL_RCC_GetSysClockFreq>
 8109776:	4602      	mov	r2, r0
 8109778:	4b15      	ldr	r3, [pc, #84]	; (81097d0 <HAL_Init+0xa8>)
 810977a:	699b      	ldr	r3, [r3, #24]
 810977c:	0a1b      	lsrs	r3, r3, #8
 810977e:	f003 030f 	and.w	r3, r3, #15
 8109782:	4915      	ldr	r1, [pc, #84]	; (81097d8 <HAL_Init+0xb0>)
 8109784:	5ccb      	ldrb	r3, [r1, r3]
 8109786:	f003 031f 	and.w	r3, r3, #31
 810978a:	fa22 f303 	lsr.w	r3, r2, r3
 810978e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8109790:	4b0f      	ldr	r3, [pc, #60]	; (81097d0 <HAL_Init+0xa8>)
 8109792:	699b      	ldr	r3, [r3, #24]
 8109794:	f003 030f 	and.w	r3, r3, #15
 8109798:	4a0f      	ldr	r2, [pc, #60]	; (81097d8 <HAL_Init+0xb0>)
 810979a:	5cd3      	ldrb	r3, [r2, r3]
 810979c:	f003 031f 	and.w	r3, r3, #31
 81097a0:	687a      	ldr	r2, [r7, #4]
 81097a2:	fa22 f303 	lsr.w	r3, r2, r3
 81097a6:	4a0d      	ldr	r2, [pc, #52]	; (81097dc <HAL_Init+0xb4>)
 81097a8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81097aa:	4b0c      	ldr	r3, [pc, #48]	; (81097dc <HAL_Init+0xb4>)
 81097ac:	681b      	ldr	r3, [r3, #0]
 81097ae:	4a0c      	ldr	r2, [pc, #48]	; (81097e0 <HAL_Init+0xb8>)
 81097b0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81097b2:	2000      	movs	r0, #0
 81097b4:	f7ff fcfa 	bl	81091ac <HAL_InitTick>
 81097b8:	4603      	mov	r3, r0
 81097ba:	2b00      	cmp	r3, #0
 81097bc:	d001      	beq.n	81097c2 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81097be:	2301      	movs	r3, #1
 81097c0:	e002      	b.n	81097c8 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81097c2:	f7ff fcd9 	bl	8109178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81097c6:	2300      	movs	r3, #0
}
 81097c8:	4618      	mov	r0, r3
 81097ca:	3708      	adds	r7, #8
 81097cc:	46bd      	mov	sp, r7
 81097ce:	bd80      	pop	{r7, pc}
 81097d0:	58024400 	.word	0x58024400
 81097d4:	40024400 	.word	0x40024400
 81097d8:	0810c0e0 	.word	0x0810c0e0
 81097dc:	3004000c 	.word	0x3004000c
 81097e0:	30040008 	.word	0x30040008

081097e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81097e4:	b480      	push	{r7}
 81097e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81097e8:	4b06      	ldr	r3, [pc, #24]	; (8109804 <HAL_IncTick+0x20>)
 81097ea:	781b      	ldrb	r3, [r3, #0]
 81097ec:	461a      	mov	r2, r3
 81097ee:	4b06      	ldr	r3, [pc, #24]	; (8109808 <HAL_IncTick+0x24>)
 81097f0:	681b      	ldr	r3, [r3, #0]
 81097f2:	4413      	add	r3, r2
 81097f4:	4a04      	ldr	r2, [pc, #16]	; (8109808 <HAL_IncTick+0x24>)
 81097f6:	6013      	str	r3, [r2, #0]
}
 81097f8:	bf00      	nop
 81097fa:	46bd      	mov	sp, r7
 81097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109800:	4770      	bx	lr
 8109802:	bf00      	nop
 8109804:	30040004 	.word	0x30040004
 8109808:	30040298 	.word	0x30040298

0810980c <__NVIC_SetPriorityGrouping>:
{
 810980c:	b480      	push	{r7}
 810980e:	b085      	sub	sp, #20
 8109810:	af00      	add	r7, sp, #0
 8109812:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8109814:	687b      	ldr	r3, [r7, #4]
 8109816:	f003 0307 	and.w	r3, r3, #7
 810981a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810981c:	4b0c      	ldr	r3, [pc, #48]	; (8109850 <__NVIC_SetPriorityGrouping+0x44>)
 810981e:	68db      	ldr	r3, [r3, #12]
 8109820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8109822:	68ba      	ldr	r2, [r7, #8]
 8109824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8109828:	4013      	ands	r3, r2
 810982a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810982c:	68fb      	ldr	r3, [r7, #12]
 810982e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8109830:	68bb      	ldr	r3, [r7, #8]
 8109832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8109834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8109838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810983c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810983e:	4a04      	ldr	r2, [pc, #16]	; (8109850 <__NVIC_SetPriorityGrouping+0x44>)
 8109840:	68bb      	ldr	r3, [r7, #8]
 8109842:	60d3      	str	r3, [r2, #12]
}
 8109844:	bf00      	nop
 8109846:	3714      	adds	r7, #20
 8109848:	46bd      	mov	sp, r7
 810984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810984e:	4770      	bx	lr
 8109850:	e000ed00 	.word	0xe000ed00

08109854 <__NVIC_GetPriorityGrouping>:
{
 8109854:	b480      	push	{r7}
 8109856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8109858:	4b04      	ldr	r3, [pc, #16]	; (810986c <__NVIC_GetPriorityGrouping+0x18>)
 810985a:	68db      	ldr	r3, [r3, #12]
 810985c:	0a1b      	lsrs	r3, r3, #8
 810985e:	f003 0307 	and.w	r3, r3, #7
}
 8109862:	4618      	mov	r0, r3
 8109864:	46bd      	mov	sp, r7
 8109866:	f85d 7b04 	ldr.w	r7, [sp], #4
 810986a:	4770      	bx	lr
 810986c:	e000ed00 	.word	0xe000ed00

08109870 <__NVIC_EnableIRQ>:
{
 8109870:	b480      	push	{r7}
 8109872:	b083      	sub	sp, #12
 8109874:	af00      	add	r7, sp, #0
 8109876:	4603      	mov	r3, r0
 8109878:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810987a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810987e:	2b00      	cmp	r3, #0
 8109880:	db0b      	blt.n	810989a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8109882:	88fb      	ldrh	r3, [r7, #6]
 8109884:	f003 021f 	and.w	r2, r3, #31
 8109888:	4907      	ldr	r1, [pc, #28]	; (81098a8 <__NVIC_EnableIRQ+0x38>)
 810988a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810988e:	095b      	lsrs	r3, r3, #5
 8109890:	2001      	movs	r0, #1
 8109892:	fa00 f202 	lsl.w	r2, r0, r2
 8109896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 810989a:	bf00      	nop
 810989c:	370c      	adds	r7, #12
 810989e:	46bd      	mov	sp, r7
 81098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098a4:	4770      	bx	lr
 81098a6:	bf00      	nop
 81098a8:	e000e100 	.word	0xe000e100

081098ac <__NVIC_SetPriority>:
{
 81098ac:	b480      	push	{r7}
 81098ae:	b083      	sub	sp, #12
 81098b0:	af00      	add	r7, sp, #0
 81098b2:	4603      	mov	r3, r0
 81098b4:	6039      	str	r1, [r7, #0]
 81098b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81098b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81098bc:	2b00      	cmp	r3, #0
 81098be:	db0a      	blt.n	81098d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81098c0:	683b      	ldr	r3, [r7, #0]
 81098c2:	b2da      	uxtb	r2, r3
 81098c4:	490c      	ldr	r1, [pc, #48]	; (81098f8 <__NVIC_SetPriority+0x4c>)
 81098c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81098ca:	0112      	lsls	r2, r2, #4
 81098cc:	b2d2      	uxtb	r2, r2
 81098ce:	440b      	add	r3, r1
 81098d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81098d4:	e00a      	b.n	81098ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81098d6:	683b      	ldr	r3, [r7, #0]
 81098d8:	b2da      	uxtb	r2, r3
 81098da:	4908      	ldr	r1, [pc, #32]	; (81098fc <__NVIC_SetPriority+0x50>)
 81098dc:	88fb      	ldrh	r3, [r7, #6]
 81098de:	f003 030f 	and.w	r3, r3, #15
 81098e2:	3b04      	subs	r3, #4
 81098e4:	0112      	lsls	r2, r2, #4
 81098e6:	b2d2      	uxtb	r2, r2
 81098e8:	440b      	add	r3, r1
 81098ea:	761a      	strb	r2, [r3, #24]
}
 81098ec:	bf00      	nop
 81098ee:	370c      	adds	r7, #12
 81098f0:	46bd      	mov	sp, r7
 81098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81098f6:	4770      	bx	lr
 81098f8:	e000e100 	.word	0xe000e100
 81098fc:	e000ed00 	.word	0xe000ed00

08109900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8109900:	b480      	push	{r7}
 8109902:	b089      	sub	sp, #36	; 0x24
 8109904:	af00      	add	r7, sp, #0
 8109906:	60f8      	str	r0, [r7, #12]
 8109908:	60b9      	str	r1, [r7, #8]
 810990a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810990c:	68fb      	ldr	r3, [r7, #12]
 810990e:	f003 0307 	and.w	r3, r3, #7
 8109912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8109914:	69fb      	ldr	r3, [r7, #28]
 8109916:	f1c3 0307 	rsb	r3, r3, #7
 810991a:	2b04      	cmp	r3, #4
 810991c:	bf28      	it	cs
 810991e:	2304      	movcs	r3, #4
 8109920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8109922:	69fb      	ldr	r3, [r7, #28]
 8109924:	3304      	adds	r3, #4
 8109926:	2b06      	cmp	r3, #6
 8109928:	d902      	bls.n	8109930 <NVIC_EncodePriority+0x30>
 810992a:	69fb      	ldr	r3, [r7, #28]
 810992c:	3b03      	subs	r3, #3
 810992e:	e000      	b.n	8109932 <NVIC_EncodePriority+0x32>
 8109930:	2300      	movs	r3, #0
 8109932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8109934:	f04f 32ff 	mov.w	r2, #4294967295
 8109938:	69bb      	ldr	r3, [r7, #24]
 810993a:	fa02 f303 	lsl.w	r3, r2, r3
 810993e:	43da      	mvns	r2, r3
 8109940:	68bb      	ldr	r3, [r7, #8]
 8109942:	401a      	ands	r2, r3
 8109944:	697b      	ldr	r3, [r7, #20]
 8109946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8109948:	f04f 31ff 	mov.w	r1, #4294967295
 810994c:	697b      	ldr	r3, [r7, #20]
 810994e:	fa01 f303 	lsl.w	r3, r1, r3
 8109952:	43d9      	mvns	r1, r3
 8109954:	687b      	ldr	r3, [r7, #4]
 8109956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8109958:	4313      	orrs	r3, r2
         );
}
 810995a:	4618      	mov	r0, r3
 810995c:	3724      	adds	r7, #36	; 0x24
 810995e:	46bd      	mov	sp, r7
 8109960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109964:	4770      	bx	lr

08109966 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8109966:	b580      	push	{r7, lr}
 8109968:	b082      	sub	sp, #8
 810996a:	af00      	add	r7, sp, #0
 810996c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810996e:	6878      	ldr	r0, [r7, #4]
 8109970:	f7ff ff4c 	bl	810980c <__NVIC_SetPriorityGrouping>
}
 8109974:	bf00      	nop
 8109976:	3708      	adds	r7, #8
 8109978:	46bd      	mov	sp, r7
 810997a:	bd80      	pop	{r7, pc}

0810997c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810997c:	b580      	push	{r7, lr}
 810997e:	b086      	sub	sp, #24
 8109980:	af00      	add	r7, sp, #0
 8109982:	4603      	mov	r3, r0
 8109984:	60b9      	str	r1, [r7, #8]
 8109986:	607a      	str	r2, [r7, #4]
 8109988:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 810998a:	f7ff ff63 	bl	8109854 <__NVIC_GetPriorityGrouping>
 810998e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8109990:	687a      	ldr	r2, [r7, #4]
 8109992:	68b9      	ldr	r1, [r7, #8]
 8109994:	6978      	ldr	r0, [r7, #20]
 8109996:	f7ff ffb3 	bl	8109900 <NVIC_EncodePriority>
 810999a:	4602      	mov	r2, r0
 810999c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81099a0:	4611      	mov	r1, r2
 81099a2:	4618      	mov	r0, r3
 81099a4:	f7ff ff82 	bl	81098ac <__NVIC_SetPriority>
}
 81099a8:	bf00      	nop
 81099aa:	3718      	adds	r7, #24
 81099ac:	46bd      	mov	sp, r7
 81099ae:	bd80      	pop	{r7, pc}

081099b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81099b0:	b580      	push	{r7, lr}
 81099b2:	b082      	sub	sp, #8
 81099b4:	af00      	add	r7, sp, #0
 81099b6:	4603      	mov	r3, r0
 81099b8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81099ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81099be:	4618      	mov	r0, r3
 81099c0:	f7ff ff56 	bl	8109870 <__NVIC_EnableIRQ>
}
 81099c4:	bf00      	nop
 81099c6:	3708      	adds	r7, #8
 81099c8:	46bd      	mov	sp, r7
 81099ca:	bd80      	pop	{r7, pc}

081099cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 81099cc:	b480      	push	{r7}
 81099ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 81099d0:	f3bf 8f5f 	dmb	sy
}
 81099d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 81099d6:	4b07      	ldr	r3, [pc, #28]	; (81099f4 <HAL_MPU_Disable+0x28>)
 81099d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81099da:	4a06      	ldr	r2, [pc, #24]	; (81099f4 <HAL_MPU_Disable+0x28>)
 81099dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81099e0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 81099e2:	4b05      	ldr	r3, [pc, #20]	; (81099f8 <HAL_MPU_Disable+0x2c>)
 81099e4:	2200      	movs	r2, #0
 81099e6:	605a      	str	r2, [r3, #4]
}
 81099e8:	bf00      	nop
 81099ea:	46bd      	mov	sp, r7
 81099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81099f0:	4770      	bx	lr
 81099f2:	bf00      	nop
 81099f4:	e000ed00 	.word	0xe000ed00
 81099f8:	e000ed90 	.word	0xe000ed90

081099fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 81099fc:	b480      	push	{r7}
 81099fe:	b083      	sub	sp, #12
 8109a00:	af00      	add	r7, sp, #0
 8109a02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8109a04:	4a0b      	ldr	r2, [pc, #44]	; (8109a34 <HAL_MPU_Enable+0x38>)
 8109a06:	687b      	ldr	r3, [r7, #4]
 8109a08:	f043 0301 	orr.w	r3, r3, #1
 8109a0c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8109a0e:	4b0a      	ldr	r3, [pc, #40]	; (8109a38 <HAL_MPU_Enable+0x3c>)
 8109a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109a12:	4a09      	ldr	r2, [pc, #36]	; (8109a38 <HAL_MPU_Enable+0x3c>)
 8109a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8109a18:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8109a1a:	f3bf 8f4f 	dsb	sy
}
 8109a1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8109a20:	f3bf 8f6f 	isb	sy
}
 8109a24:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8109a26:	bf00      	nop
 8109a28:	370c      	adds	r7, #12
 8109a2a:	46bd      	mov	sp, r7
 8109a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a30:	4770      	bx	lr
 8109a32:	bf00      	nop
 8109a34:	e000ed90 	.word	0xe000ed90
 8109a38:	e000ed00 	.word	0xe000ed00

08109a3c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8109a3c:	b480      	push	{r7}
 8109a3e:	b083      	sub	sp, #12
 8109a40:	af00      	add	r7, sp, #0
 8109a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8109a44:	687b      	ldr	r3, [r7, #4]
 8109a46:	785a      	ldrb	r2, [r3, #1]
 8109a48:	4b1d      	ldr	r3, [pc, #116]	; (8109ac0 <HAL_MPU_ConfigRegion+0x84>)
 8109a4a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8109a4c:	687b      	ldr	r3, [r7, #4]
 8109a4e:	781b      	ldrb	r3, [r3, #0]
 8109a50:	2b00      	cmp	r3, #0
 8109a52:	d029      	beq.n	8109aa8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8109a54:	4a1a      	ldr	r2, [pc, #104]	; (8109ac0 <HAL_MPU_ConfigRegion+0x84>)
 8109a56:	687b      	ldr	r3, [r7, #4]
 8109a58:	685b      	ldr	r3, [r3, #4]
 8109a5a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8109a5c:	687b      	ldr	r3, [r7, #4]
 8109a5e:	7b1b      	ldrb	r3, [r3, #12]
 8109a60:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8109a62:	687b      	ldr	r3, [r7, #4]
 8109a64:	7adb      	ldrb	r3, [r3, #11]
 8109a66:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8109a68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8109a6a:	687b      	ldr	r3, [r7, #4]
 8109a6c:	7a9b      	ldrb	r3, [r3, #10]
 8109a6e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8109a70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8109a72:	687b      	ldr	r3, [r7, #4]
 8109a74:	7b5b      	ldrb	r3, [r3, #13]
 8109a76:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8109a78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8109a7a:	687b      	ldr	r3, [r7, #4]
 8109a7c:	7b9b      	ldrb	r3, [r3, #14]
 8109a7e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8109a80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8109a82:	687b      	ldr	r3, [r7, #4]
 8109a84:	7bdb      	ldrb	r3, [r3, #15]
 8109a86:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8109a88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8109a8a:	687b      	ldr	r3, [r7, #4]
 8109a8c:	7a5b      	ldrb	r3, [r3, #9]
 8109a8e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8109a90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8109a92:	687b      	ldr	r3, [r7, #4]
 8109a94:	7a1b      	ldrb	r3, [r3, #8]
 8109a96:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8109a98:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8109a9a:	687a      	ldr	r2, [r7, #4]
 8109a9c:	7812      	ldrb	r2, [r2, #0]
 8109a9e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8109aa0:	4a07      	ldr	r2, [pc, #28]	; (8109ac0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8109aa2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8109aa4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8109aa6:	e005      	b.n	8109ab4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8109aa8:	4b05      	ldr	r3, [pc, #20]	; (8109ac0 <HAL_MPU_ConfigRegion+0x84>)
 8109aaa:	2200      	movs	r2, #0
 8109aac:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8109aae:	4b04      	ldr	r3, [pc, #16]	; (8109ac0 <HAL_MPU_ConfigRegion+0x84>)
 8109ab0:	2200      	movs	r2, #0
 8109ab2:	611a      	str	r2, [r3, #16]
}
 8109ab4:	bf00      	nop
 8109ab6:	370c      	adds	r7, #12
 8109ab8:	46bd      	mov	sp, r7
 8109aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109abe:	4770      	bx	lr
 8109ac0:	e000ed90 	.word	0xe000ed90

08109ac4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8109ac4:	b480      	push	{r7}
 8109ac6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8109ac8:	4b07      	ldr	r3, [pc, #28]	; (8109ae8 <HAL_GetCurrentCPUID+0x24>)
 8109aca:	681b      	ldr	r3, [r3, #0]
 8109acc:	091b      	lsrs	r3, r3, #4
 8109ace:	f003 030f 	and.w	r3, r3, #15
 8109ad2:	2b07      	cmp	r3, #7
 8109ad4:	d101      	bne.n	8109ada <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8109ad6:	2303      	movs	r3, #3
 8109ad8:	e000      	b.n	8109adc <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8109ada:	2301      	movs	r3, #1
  }
}
 8109adc:	4618      	mov	r0, r3
 8109ade:	46bd      	mov	sp, r7
 8109ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109ae4:	4770      	bx	lr
 8109ae6:	bf00      	nop
 8109ae8:	e000ed00 	.word	0xe000ed00

08109aec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8109aec:	b580      	push	{r7, lr}
 8109aee:	b086      	sub	sp, #24
 8109af0:	af00      	add	r7, sp, #0
 8109af2:	60f8      	str	r0, [r7, #12]
 8109af4:	60b9      	str	r1, [r7, #8]
 8109af6:	607a      	str	r2, [r7, #4]
 8109af8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8109afa:	2300      	movs	r3, #0
 8109afc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8109afe:	68fb      	ldr	r3, [r7, #12]
 8109b00:	2b00      	cmp	r3, #0
 8109b02:	d101      	bne.n	8109b08 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8109b04:	2301      	movs	r3, #1
 8109b06:	e226      	b.n	8109f56 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8109b08:	68fb      	ldr	r3, [r7, #12]
 8109b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8109b0e:	2b01      	cmp	r3, #1
 8109b10:	d101      	bne.n	8109b16 <HAL_DMA_Start_IT+0x2a>
 8109b12:	2302      	movs	r3, #2
 8109b14:	e21f      	b.n	8109f56 <HAL_DMA_Start_IT+0x46a>
 8109b16:	68fb      	ldr	r3, [r7, #12]
 8109b18:	2201      	movs	r2, #1
 8109b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8109b1e:	68fb      	ldr	r3, [r7, #12]
 8109b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8109b24:	b2db      	uxtb	r3, r3
 8109b26:	2b01      	cmp	r3, #1
 8109b28:	f040 820a 	bne.w	8109f40 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8109b2c:	68fb      	ldr	r3, [r7, #12]
 8109b2e:	2202      	movs	r2, #2
 8109b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8109b34:	68fb      	ldr	r3, [r7, #12]
 8109b36:	2200      	movs	r2, #0
 8109b38:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8109b3a:	68fb      	ldr	r3, [r7, #12]
 8109b3c:	681b      	ldr	r3, [r3, #0]
 8109b3e:	4a68      	ldr	r2, [pc, #416]	; (8109ce0 <HAL_DMA_Start_IT+0x1f4>)
 8109b40:	4293      	cmp	r3, r2
 8109b42:	d04a      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109b44:	68fb      	ldr	r3, [r7, #12]
 8109b46:	681b      	ldr	r3, [r3, #0]
 8109b48:	4a66      	ldr	r2, [pc, #408]	; (8109ce4 <HAL_DMA_Start_IT+0x1f8>)
 8109b4a:	4293      	cmp	r3, r2
 8109b4c:	d045      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109b4e:	68fb      	ldr	r3, [r7, #12]
 8109b50:	681b      	ldr	r3, [r3, #0]
 8109b52:	4a65      	ldr	r2, [pc, #404]	; (8109ce8 <HAL_DMA_Start_IT+0x1fc>)
 8109b54:	4293      	cmp	r3, r2
 8109b56:	d040      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109b58:	68fb      	ldr	r3, [r7, #12]
 8109b5a:	681b      	ldr	r3, [r3, #0]
 8109b5c:	4a63      	ldr	r2, [pc, #396]	; (8109cec <HAL_DMA_Start_IT+0x200>)
 8109b5e:	4293      	cmp	r3, r2
 8109b60:	d03b      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109b62:	68fb      	ldr	r3, [r7, #12]
 8109b64:	681b      	ldr	r3, [r3, #0]
 8109b66:	4a62      	ldr	r2, [pc, #392]	; (8109cf0 <HAL_DMA_Start_IT+0x204>)
 8109b68:	4293      	cmp	r3, r2
 8109b6a:	d036      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109b6c:	68fb      	ldr	r3, [r7, #12]
 8109b6e:	681b      	ldr	r3, [r3, #0]
 8109b70:	4a60      	ldr	r2, [pc, #384]	; (8109cf4 <HAL_DMA_Start_IT+0x208>)
 8109b72:	4293      	cmp	r3, r2
 8109b74:	d031      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109b76:	68fb      	ldr	r3, [r7, #12]
 8109b78:	681b      	ldr	r3, [r3, #0]
 8109b7a:	4a5f      	ldr	r2, [pc, #380]	; (8109cf8 <HAL_DMA_Start_IT+0x20c>)
 8109b7c:	4293      	cmp	r3, r2
 8109b7e:	d02c      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109b80:	68fb      	ldr	r3, [r7, #12]
 8109b82:	681b      	ldr	r3, [r3, #0]
 8109b84:	4a5d      	ldr	r2, [pc, #372]	; (8109cfc <HAL_DMA_Start_IT+0x210>)
 8109b86:	4293      	cmp	r3, r2
 8109b88:	d027      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109b8a:	68fb      	ldr	r3, [r7, #12]
 8109b8c:	681b      	ldr	r3, [r3, #0]
 8109b8e:	4a5c      	ldr	r2, [pc, #368]	; (8109d00 <HAL_DMA_Start_IT+0x214>)
 8109b90:	4293      	cmp	r3, r2
 8109b92:	d022      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109b94:	68fb      	ldr	r3, [r7, #12]
 8109b96:	681b      	ldr	r3, [r3, #0]
 8109b98:	4a5a      	ldr	r2, [pc, #360]	; (8109d04 <HAL_DMA_Start_IT+0x218>)
 8109b9a:	4293      	cmp	r3, r2
 8109b9c:	d01d      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109b9e:	68fb      	ldr	r3, [r7, #12]
 8109ba0:	681b      	ldr	r3, [r3, #0]
 8109ba2:	4a59      	ldr	r2, [pc, #356]	; (8109d08 <HAL_DMA_Start_IT+0x21c>)
 8109ba4:	4293      	cmp	r3, r2
 8109ba6:	d018      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109ba8:	68fb      	ldr	r3, [r7, #12]
 8109baa:	681b      	ldr	r3, [r3, #0]
 8109bac:	4a57      	ldr	r2, [pc, #348]	; (8109d0c <HAL_DMA_Start_IT+0x220>)
 8109bae:	4293      	cmp	r3, r2
 8109bb0:	d013      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109bb2:	68fb      	ldr	r3, [r7, #12]
 8109bb4:	681b      	ldr	r3, [r3, #0]
 8109bb6:	4a56      	ldr	r2, [pc, #344]	; (8109d10 <HAL_DMA_Start_IT+0x224>)
 8109bb8:	4293      	cmp	r3, r2
 8109bba:	d00e      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109bbc:	68fb      	ldr	r3, [r7, #12]
 8109bbe:	681b      	ldr	r3, [r3, #0]
 8109bc0:	4a54      	ldr	r2, [pc, #336]	; (8109d14 <HAL_DMA_Start_IT+0x228>)
 8109bc2:	4293      	cmp	r3, r2
 8109bc4:	d009      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109bc6:	68fb      	ldr	r3, [r7, #12]
 8109bc8:	681b      	ldr	r3, [r3, #0]
 8109bca:	4a53      	ldr	r2, [pc, #332]	; (8109d18 <HAL_DMA_Start_IT+0x22c>)
 8109bcc:	4293      	cmp	r3, r2
 8109bce:	d004      	beq.n	8109bda <HAL_DMA_Start_IT+0xee>
 8109bd0:	68fb      	ldr	r3, [r7, #12]
 8109bd2:	681b      	ldr	r3, [r3, #0]
 8109bd4:	4a51      	ldr	r2, [pc, #324]	; (8109d1c <HAL_DMA_Start_IT+0x230>)
 8109bd6:	4293      	cmp	r3, r2
 8109bd8:	d108      	bne.n	8109bec <HAL_DMA_Start_IT+0x100>
 8109bda:	68fb      	ldr	r3, [r7, #12]
 8109bdc:	681b      	ldr	r3, [r3, #0]
 8109bde:	681a      	ldr	r2, [r3, #0]
 8109be0:	68fb      	ldr	r3, [r7, #12]
 8109be2:	681b      	ldr	r3, [r3, #0]
 8109be4:	f022 0201 	bic.w	r2, r2, #1
 8109be8:	601a      	str	r2, [r3, #0]
 8109bea:	e007      	b.n	8109bfc <HAL_DMA_Start_IT+0x110>
 8109bec:	68fb      	ldr	r3, [r7, #12]
 8109bee:	681b      	ldr	r3, [r3, #0]
 8109bf0:	681a      	ldr	r2, [r3, #0]
 8109bf2:	68fb      	ldr	r3, [r7, #12]
 8109bf4:	681b      	ldr	r3, [r3, #0]
 8109bf6:	f022 0201 	bic.w	r2, r2, #1
 8109bfa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8109bfc:	683b      	ldr	r3, [r7, #0]
 8109bfe:	687a      	ldr	r2, [r7, #4]
 8109c00:	68b9      	ldr	r1, [r7, #8]
 8109c02:	68f8      	ldr	r0, [r7, #12]
 8109c04:	f000 f9dc 	bl	8109fc0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8109c08:	68fb      	ldr	r3, [r7, #12]
 8109c0a:	681b      	ldr	r3, [r3, #0]
 8109c0c:	4a34      	ldr	r2, [pc, #208]	; (8109ce0 <HAL_DMA_Start_IT+0x1f4>)
 8109c0e:	4293      	cmp	r3, r2
 8109c10:	d04a      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c12:	68fb      	ldr	r3, [r7, #12]
 8109c14:	681b      	ldr	r3, [r3, #0]
 8109c16:	4a33      	ldr	r2, [pc, #204]	; (8109ce4 <HAL_DMA_Start_IT+0x1f8>)
 8109c18:	4293      	cmp	r3, r2
 8109c1a:	d045      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c1c:	68fb      	ldr	r3, [r7, #12]
 8109c1e:	681b      	ldr	r3, [r3, #0]
 8109c20:	4a31      	ldr	r2, [pc, #196]	; (8109ce8 <HAL_DMA_Start_IT+0x1fc>)
 8109c22:	4293      	cmp	r3, r2
 8109c24:	d040      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c26:	68fb      	ldr	r3, [r7, #12]
 8109c28:	681b      	ldr	r3, [r3, #0]
 8109c2a:	4a30      	ldr	r2, [pc, #192]	; (8109cec <HAL_DMA_Start_IT+0x200>)
 8109c2c:	4293      	cmp	r3, r2
 8109c2e:	d03b      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c30:	68fb      	ldr	r3, [r7, #12]
 8109c32:	681b      	ldr	r3, [r3, #0]
 8109c34:	4a2e      	ldr	r2, [pc, #184]	; (8109cf0 <HAL_DMA_Start_IT+0x204>)
 8109c36:	4293      	cmp	r3, r2
 8109c38:	d036      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c3a:	68fb      	ldr	r3, [r7, #12]
 8109c3c:	681b      	ldr	r3, [r3, #0]
 8109c3e:	4a2d      	ldr	r2, [pc, #180]	; (8109cf4 <HAL_DMA_Start_IT+0x208>)
 8109c40:	4293      	cmp	r3, r2
 8109c42:	d031      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c44:	68fb      	ldr	r3, [r7, #12]
 8109c46:	681b      	ldr	r3, [r3, #0]
 8109c48:	4a2b      	ldr	r2, [pc, #172]	; (8109cf8 <HAL_DMA_Start_IT+0x20c>)
 8109c4a:	4293      	cmp	r3, r2
 8109c4c:	d02c      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c4e:	68fb      	ldr	r3, [r7, #12]
 8109c50:	681b      	ldr	r3, [r3, #0]
 8109c52:	4a2a      	ldr	r2, [pc, #168]	; (8109cfc <HAL_DMA_Start_IT+0x210>)
 8109c54:	4293      	cmp	r3, r2
 8109c56:	d027      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c58:	68fb      	ldr	r3, [r7, #12]
 8109c5a:	681b      	ldr	r3, [r3, #0]
 8109c5c:	4a28      	ldr	r2, [pc, #160]	; (8109d00 <HAL_DMA_Start_IT+0x214>)
 8109c5e:	4293      	cmp	r3, r2
 8109c60:	d022      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c62:	68fb      	ldr	r3, [r7, #12]
 8109c64:	681b      	ldr	r3, [r3, #0]
 8109c66:	4a27      	ldr	r2, [pc, #156]	; (8109d04 <HAL_DMA_Start_IT+0x218>)
 8109c68:	4293      	cmp	r3, r2
 8109c6a:	d01d      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c6c:	68fb      	ldr	r3, [r7, #12]
 8109c6e:	681b      	ldr	r3, [r3, #0]
 8109c70:	4a25      	ldr	r2, [pc, #148]	; (8109d08 <HAL_DMA_Start_IT+0x21c>)
 8109c72:	4293      	cmp	r3, r2
 8109c74:	d018      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c76:	68fb      	ldr	r3, [r7, #12]
 8109c78:	681b      	ldr	r3, [r3, #0]
 8109c7a:	4a24      	ldr	r2, [pc, #144]	; (8109d0c <HAL_DMA_Start_IT+0x220>)
 8109c7c:	4293      	cmp	r3, r2
 8109c7e:	d013      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c80:	68fb      	ldr	r3, [r7, #12]
 8109c82:	681b      	ldr	r3, [r3, #0]
 8109c84:	4a22      	ldr	r2, [pc, #136]	; (8109d10 <HAL_DMA_Start_IT+0x224>)
 8109c86:	4293      	cmp	r3, r2
 8109c88:	d00e      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c8a:	68fb      	ldr	r3, [r7, #12]
 8109c8c:	681b      	ldr	r3, [r3, #0]
 8109c8e:	4a21      	ldr	r2, [pc, #132]	; (8109d14 <HAL_DMA_Start_IT+0x228>)
 8109c90:	4293      	cmp	r3, r2
 8109c92:	d009      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c94:	68fb      	ldr	r3, [r7, #12]
 8109c96:	681b      	ldr	r3, [r3, #0]
 8109c98:	4a1f      	ldr	r2, [pc, #124]	; (8109d18 <HAL_DMA_Start_IT+0x22c>)
 8109c9a:	4293      	cmp	r3, r2
 8109c9c:	d004      	beq.n	8109ca8 <HAL_DMA_Start_IT+0x1bc>
 8109c9e:	68fb      	ldr	r3, [r7, #12]
 8109ca0:	681b      	ldr	r3, [r3, #0]
 8109ca2:	4a1e      	ldr	r2, [pc, #120]	; (8109d1c <HAL_DMA_Start_IT+0x230>)
 8109ca4:	4293      	cmp	r3, r2
 8109ca6:	d101      	bne.n	8109cac <HAL_DMA_Start_IT+0x1c0>
 8109ca8:	2301      	movs	r3, #1
 8109caa:	e000      	b.n	8109cae <HAL_DMA_Start_IT+0x1c2>
 8109cac:	2300      	movs	r3, #0
 8109cae:	2b00      	cmp	r3, #0
 8109cb0:	d036      	beq.n	8109d20 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8109cb2:	68fb      	ldr	r3, [r7, #12]
 8109cb4:	681b      	ldr	r3, [r3, #0]
 8109cb6:	681b      	ldr	r3, [r3, #0]
 8109cb8:	f023 021e 	bic.w	r2, r3, #30
 8109cbc:	68fb      	ldr	r3, [r7, #12]
 8109cbe:	681b      	ldr	r3, [r3, #0]
 8109cc0:	f042 0216 	orr.w	r2, r2, #22
 8109cc4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8109cc6:	68fb      	ldr	r3, [r7, #12]
 8109cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109cca:	2b00      	cmp	r3, #0
 8109ccc:	d03e      	beq.n	8109d4c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8109cce:	68fb      	ldr	r3, [r7, #12]
 8109cd0:	681b      	ldr	r3, [r3, #0]
 8109cd2:	681a      	ldr	r2, [r3, #0]
 8109cd4:	68fb      	ldr	r3, [r7, #12]
 8109cd6:	681b      	ldr	r3, [r3, #0]
 8109cd8:	f042 0208 	orr.w	r2, r2, #8
 8109cdc:	601a      	str	r2, [r3, #0]
 8109cde:	e035      	b.n	8109d4c <HAL_DMA_Start_IT+0x260>
 8109ce0:	40020010 	.word	0x40020010
 8109ce4:	40020028 	.word	0x40020028
 8109ce8:	40020040 	.word	0x40020040
 8109cec:	40020058 	.word	0x40020058
 8109cf0:	40020070 	.word	0x40020070
 8109cf4:	40020088 	.word	0x40020088
 8109cf8:	400200a0 	.word	0x400200a0
 8109cfc:	400200b8 	.word	0x400200b8
 8109d00:	40020410 	.word	0x40020410
 8109d04:	40020428 	.word	0x40020428
 8109d08:	40020440 	.word	0x40020440
 8109d0c:	40020458 	.word	0x40020458
 8109d10:	40020470 	.word	0x40020470
 8109d14:	40020488 	.word	0x40020488
 8109d18:	400204a0 	.word	0x400204a0
 8109d1c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8109d20:	68fb      	ldr	r3, [r7, #12]
 8109d22:	681b      	ldr	r3, [r3, #0]
 8109d24:	681b      	ldr	r3, [r3, #0]
 8109d26:	f023 020e 	bic.w	r2, r3, #14
 8109d2a:	68fb      	ldr	r3, [r7, #12]
 8109d2c:	681b      	ldr	r3, [r3, #0]
 8109d2e:	f042 020a 	orr.w	r2, r2, #10
 8109d32:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8109d34:	68fb      	ldr	r3, [r7, #12]
 8109d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8109d38:	2b00      	cmp	r3, #0
 8109d3a:	d007      	beq.n	8109d4c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8109d3c:	68fb      	ldr	r3, [r7, #12]
 8109d3e:	681b      	ldr	r3, [r3, #0]
 8109d40:	681a      	ldr	r2, [r3, #0]
 8109d42:	68fb      	ldr	r3, [r7, #12]
 8109d44:	681b      	ldr	r3, [r3, #0]
 8109d46:	f042 0204 	orr.w	r2, r2, #4
 8109d4a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8109d4c:	68fb      	ldr	r3, [r7, #12]
 8109d4e:	681b      	ldr	r3, [r3, #0]
 8109d50:	4a83      	ldr	r2, [pc, #524]	; (8109f60 <HAL_DMA_Start_IT+0x474>)
 8109d52:	4293      	cmp	r3, r2
 8109d54:	d072      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109d56:	68fb      	ldr	r3, [r7, #12]
 8109d58:	681b      	ldr	r3, [r3, #0]
 8109d5a:	4a82      	ldr	r2, [pc, #520]	; (8109f64 <HAL_DMA_Start_IT+0x478>)
 8109d5c:	4293      	cmp	r3, r2
 8109d5e:	d06d      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109d60:	68fb      	ldr	r3, [r7, #12]
 8109d62:	681b      	ldr	r3, [r3, #0]
 8109d64:	4a80      	ldr	r2, [pc, #512]	; (8109f68 <HAL_DMA_Start_IT+0x47c>)
 8109d66:	4293      	cmp	r3, r2
 8109d68:	d068      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109d6a:	68fb      	ldr	r3, [r7, #12]
 8109d6c:	681b      	ldr	r3, [r3, #0]
 8109d6e:	4a7f      	ldr	r2, [pc, #508]	; (8109f6c <HAL_DMA_Start_IT+0x480>)
 8109d70:	4293      	cmp	r3, r2
 8109d72:	d063      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109d74:	68fb      	ldr	r3, [r7, #12]
 8109d76:	681b      	ldr	r3, [r3, #0]
 8109d78:	4a7d      	ldr	r2, [pc, #500]	; (8109f70 <HAL_DMA_Start_IT+0x484>)
 8109d7a:	4293      	cmp	r3, r2
 8109d7c:	d05e      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109d7e:	68fb      	ldr	r3, [r7, #12]
 8109d80:	681b      	ldr	r3, [r3, #0]
 8109d82:	4a7c      	ldr	r2, [pc, #496]	; (8109f74 <HAL_DMA_Start_IT+0x488>)
 8109d84:	4293      	cmp	r3, r2
 8109d86:	d059      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109d88:	68fb      	ldr	r3, [r7, #12]
 8109d8a:	681b      	ldr	r3, [r3, #0]
 8109d8c:	4a7a      	ldr	r2, [pc, #488]	; (8109f78 <HAL_DMA_Start_IT+0x48c>)
 8109d8e:	4293      	cmp	r3, r2
 8109d90:	d054      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109d92:	68fb      	ldr	r3, [r7, #12]
 8109d94:	681b      	ldr	r3, [r3, #0]
 8109d96:	4a79      	ldr	r2, [pc, #484]	; (8109f7c <HAL_DMA_Start_IT+0x490>)
 8109d98:	4293      	cmp	r3, r2
 8109d9a:	d04f      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109d9c:	68fb      	ldr	r3, [r7, #12]
 8109d9e:	681b      	ldr	r3, [r3, #0]
 8109da0:	4a77      	ldr	r2, [pc, #476]	; (8109f80 <HAL_DMA_Start_IT+0x494>)
 8109da2:	4293      	cmp	r3, r2
 8109da4:	d04a      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109da6:	68fb      	ldr	r3, [r7, #12]
 8109da8:	681b      	ldr	r3, [r3, #0]
 8109daa:	4a76      	ldr	r2, [pc, #472]	; (8109f84 <HAL_DMA_Start_IT+0x498>)
 8109dac:	4293      	cmp	r3, r2
 8109dae:	d045      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109db0:	68fb      	ldr	r3, [r7, #12]
 8109db2:	681b      	ldr	r3, [r3, #0]
 8109db4:	4a74      	ldr	r2, [pc, #464]	; (8109f88 <HAL_DMA_Start_IT+0x49c>)
 8109db6:	4293      	cmp	r3, r2
 8109db8:	d040      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109dba:	68fb      	ldr	r3, [r7, #12]
 8109dbc:	681b      	ldr	r3, [r3, #0]
 8109dbe:	4a73      	ldr	r2, [pc, #460]	; (8109f8c <HAL_DMA_Start_IT+0x4a0>)
 8109dc0:	4293      	cmp	r3, r2
 8109dc2:	d03b      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109dc4:	68fb      	ldr	r3, [r7, #12]
 8109dc6:	681b      	ldr	r3, [r3, #0]
 8109dc8:	4a71      	ldr	r2, [pc, #452]	; (8109f90 <HAL_DMA_Start_IT+0x4a4>)
 8109dca:	4293      	cmp	r3, r2
 8109dcc:	d036      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109dce:	68fb      	ldr	r3, [r7, #12]
 8109dd0:	681b      	ldr	r3, [r3, #0]
 8109dd2:	4a70      	ldr	r2, [pc, #448]	; (8109f94 <HAL_DMA_Start_IT+0x4a8>)
 8109dd4:	4293      	cmp	r3, r2
 8109dd6:	d031      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109dd8:	68fb      	ldr	r3, [r7, #12]
 8109dda:	681b      	ldr	r3, [r3, #0]
 8109ddc:	4a6e      	ldr	r2, [pc, #440]	; (8109f98 <HAL_DMA_Start_IT+0x4ac>)
 8109dde:	4293      	cmp	r3, r2
 8109de0:	d02c      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109de2:	68fb      	ldr	r3, [r7, #12]
 8109de4:	681b      	ldr	r3, [r3, #0]
 8109de6:	4a6d      	ldr	r2, [pc, #436]	; (8109f9c <HAL_DMA_Start_IT+0x4b0>)
 8109de8:	4293      	cmp	r3, r2
 8109dea:	d027      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109dec:	68fb      	ldr	r3, [r7, #12]
 8109dee:	681b      	ldr	r3, [r3, #0]
 8109df0:	4a6b      	ldr	r2, [pc, #428]	; (8109fa0 <HAL_DMA_Start_IT+0x4b4>)
 8109df2:	4293      	cmp	r3, r2
 8109df4:	d022      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109df6:	68fb      	ldr	r3, [r7, #12]
 8109df8:	681b      	ldr	r3, [r3, #0]
 8109dfa:	4a6a      	ldr	r2, [pc, #424]	; (8109fa4 <HAL_DMA_Start_IT+0x4b8>)
 8109dfc:	4293      	cmp	r3, r2
 8109dfe:	d01d      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109e00:	68fb      	ldr	r3, [r7, #12]
 8109e02:	681b      	ldr	r3, [r3, #0]
 8109e04:	4a68      	ldr	r2, [pc, #416]	; (8109fa8 <HAL_DMA_Start_IT+0x4bc>)
 8109e06:	4293      	cmp	r3, r2
 8109e08:	d018      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109e0a:	68fb      	ldr	r3, [r7, #12]
 8109e0c:	681b      	ldr	r3, [r3, #0]
 8109e0e:	4a67      	ldr	r2, [pc, #412]	; (8109fac <HAL_DMA_Start_IT+0x4c0>)
 8109e10:	4293      	cmp	r3, r2
 8109e12:	d013      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109e14:	68fb      	ldr	r3, [r7, #12]
 8109e16:	681b      	ldr	r3, [r3, #0]
 8109e18:	4a65      	ldr	r2, [pc, #404]	; (8109fb0 <HAL_DMA_Start_IT+0x4c4>)
 8109e1a:	4293      	cmp	r3, r2
 8109e1c:	d00e      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109e1e:	68fb      	ldr	r3, [r7, #12]
 8109e20:	681b      	ldr	r3, [r3, #0]
 8109e22:	4a64      	ldr	r2, [pc, #400]	; (8109fb4 <HAL_DMA_Start_IT+0x4c8>)
 8109e24:	4293      	cmp	r3, r2
 8109e26:	d009      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109e28:	68fb      	ldr	r3, [r7, #12]
 8109e2a:	681b      	ldr	r3, [r3, #0]
 8109e2c:	4a62      	ldr	r2, [pc, #392]	; (8109fb8 <HAL_DMA_Start_IT+0x4cc>)
 8109e2e:	4293      	cmp	r3, r2
 8109e30:	d004      	beq.n	8109e3c <HAL_DMA_Start_IT+0x350>
 8109e32:	68fb      	ldr	r3, [r7, #12]
 8109e34:	681b      	ldr	r3, [r3, #0]
 8109e36:	4a61      	ldr	r2, [pc, #388]	; (8109fbc <HAL_DMA_Start_IT+0x4d0>)
 8109e38:	4293      	cmp	r3, r2
 8109e3a:	d101      	bne.n	8109e40 <HAL_DMA_Start_IT+0x354>
 8109e3c:	2301      	movs	r3, #1
 8109e3e:	e000      	b.n	8109e42 <HAL_DMA_Start_IT+0x356>
 8109e40:	2300      	movs	r3, #0
 8109e42:	2b00      	cmp	r3, #0
 8109e44:	d01a      	beq.n	8109e7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8109e46:	68fb      	ldr	r3, [r7, #12]
 8109e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109e4a:	681b      	ldr	r3, [r3, #0]
 8109e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8109e50:	2b00      	cmp	r3, #0
 8109e52:	d007      	beq.n	8109e64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8109e54:	68fb      	ldr	r3, [r7, #12]
 8109e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109e58:	681a      	ldr	r2, [r3, #0]
 8109e5a:	68fb      	ldr	r3, [r7, #12]
 8109e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8109e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8109e62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8109e64:	68fb      	ldr	r3, [r7, #12]
 8109e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109e68:	2b00      	cmp	r3, #0
 8109e6a:	d007      	beq.n	8109e7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8109e6c:	68fb      	ldr	r3, [r7, #12]
 8109e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109e70:	681a      	ldr	r2, [r3, #0]
 8109e72:	68fb      	ldr	r3, [r7, #12]
 8109e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8109e7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8109e7c:	68fb      	ldr	r3, [r7, #12]
 8109e7e:	681b      	ldr	r3, [r3, #0]
 8109e80:	4a37      	ldr	r2, [pc, #220]	; (8109f60 <HAL_DMA_Start_IT+0x474>)
 8109e82:	4293      	cmp	r3, r2
 8109e84:	d04a      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109e86:	68fb      	ldr	r3, [r7, #12]
 8109e88:	681b      	ldr	r3, [r3, #0]
 8109e8a:	4a36      	ldr	r2, [pc, #216]	; (8109f64 <HAL_DMA_Start_IT+0x478>)
 8109e8c:	4293      	cmp	r3, r2
 8109e8e:	d045      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109e90:	68fb      	ldr	r3, [r7, #12]
 8109e92:	681b      	ldr	r3, [r3, #0]
 8109e94:	4a34      	ldr	r2, [pc, #208]	; (8109f68 <HAL_DMA_Start_IT+0x47c>)
 8109e96:	4293      	cmp	r3, r2
 8109e98:	d040      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109e9a:	68fb      	ldr	r3, [r7, #12]
 8109e9c:	681b      	ldr	r3, [r3, #0]
 8109e9e:	4a33      	ldr	r2, [pc, #204]	; (8109f6c <HAL_DMA_Start_IT+0x480>)
 8109ea0:	4293      	cmp	r3, r2
 8109ea2:	d03b      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109ea4:	68fb      	ldr	r3, [r7, #12]
 8109ea6:	681b      	ldr	r3, [r3, #0]
 8109ea8:	4a31      	ldr	r2, [pc, #196]	; (8109f70 <HAL_DMA_Start_IT+0x484>)
 8109eaa:	4293      	cmp	r3, r2
 8109eac:	d036      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109eae:	68fb      	ldr	r3, [r7, #12]
 8109eb0:	681b      	ldr	r3, [r3, #0]
 8109eb2:	4a30      	ldr	r2, [pc, #192]	; (8109f74 <HAL_DMA_Start_IT+0x488>)
 8109eb4:	4293      	cmp	r3, r2
 8109eb6:	d031      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109eb8:	68fb      	ldr	r3, [r7, #12]
 8109eba:	681b      	ldr	r3, [r3, #0]
 8109ebc:	4a2e      	ldr	r2, [pc, #184]	; (8109f78 <HAL_DMA_Start_IT+0x48c>)
 8109ebe:	4293      	cmp	r3, r2
 8109ec0:	d02c      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109ec2:	68fb      	ldr	r3, [r7, #12]
 8109ec4:	681b      	ldr	r3, [r3, #0]
 8109ec6:	4a2d      	ldr	r2, [pc, #180]	; (8109f7c <HAL_DMA_Start_IT+0x490>)
 8109ec8:	4293      	cmp	r3, r2
 8109eca:	d027      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109ecc:	68fb      	ldr	r3, [r7, #12]
 8109ece:	681b      	ldr	r3, [r3, #0]
 8109ed0:	4a2b      	ldr	r2, [pc, #172]	; (8109f80 <HAL_DMA_Start_IT+0x494>)
 8109ed2:	4293      	cmp	r3, r2
 8109ed4:	d022      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109ed6:	68fb      	ldr	r3, [r7, #12]
 8109ed8:	681b      	ldr	r3, [r3, #0]
 8109eda:	4a2a      	ldr	r2, [pc, #168]	; (8109f84 <HAL_DMA_Start_IT+0x498>)
 8109edc:	4293      	cmp	r3, r2
 8109ede:	d01d      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109ee0:	68fb      	ldr	r3, [r7, #12]
 8109ee2:	681b      	ldr	r3, [r3, #0]
 8109ee4:	4a28      	ldr	r2, [pc, #160]	; (8109f88 <HAL_DMA_Start_IT+0x49c>)
 8109ee6:	4293      	cmp	r3, r2
 8109ee8:	d018      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109eea:	68fb      	ldr	r3, [r7, #12]
 8109eec:	681b      	ldr	r3, [r3, #0]
 8109eee:	4a27      	ldr	r2, [pc, #156]	; (8109f8c <HAL_DMA_Start_IT+0x4a0>)
 8109ef0:	4293      	cmp	r3, r2
 8109ef2:	d013      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109ef4:	68fb      	ldr	r3, [r7, #12]
 8109ef6:	681b      	ldr	r3, [r3, #0]
 8109ef8:	4a25      	ldr	r2, [pc, #148]	; (8109f90 <HAL_DMA_Start_IT+0x4a4>)
 8109efa:	4293      	cmp	r3, r2
 8109efc:	d00e      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109efe:	68fb      	ldr	r3, [r7, #12]
 8109f00:	681b      	ldr	r3, [r3, #0]
 8109f02:	4a24      	ldr	r2, [pc, #144]	; (8109f94 <HAL_DMA_Start_IT+0x4a8>)
 8109f04:	4293      	cmp	r3, r2
 8109f06:	d009      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109f08:	68fb      	ldr	r3, [r7, #12]
 8109f0a:	681b      	ldr	r3, [r3, #0]
 8109f0c:	4a22      	ldr	r2, [pc, #136]	; (8109f98 <HAL_DMA_Start_IT+0x4ac>)
 8109f0e:	4293      	cmp	r3, r2
 8109f10:	d004      	beq.n	8109f1c <HAL_DMA_Start_IT+0x430>
 8109f12:	68fb      	ldr	r3, [r7, #12]
 8109f14:	681b      	ldr	r3, [r3, #0]
 8109f16:	4a21      	ldr	r2, [pc, #132]	; (8109f9c <HAL_DMA_Start_IT+0x4b0>)
 8109f18:	4293      	cmp	r3, r2
 8109f1a:	d108      	bne.n	8109f2e <HAL_DMA_Start_IT+0x442>
 8109f1c:	68fb      	ldr	r3, [r7, #12]
 8109f1e:	681b      	ldr	r3, [r3, #0]
 8109f20:	681a      	ldr	r2, [r3, #0]
 8109f22:	68fb      	ldr	r3, [r7, #12]
 8109f24:	681b      	ldr	r3, [r3, #0]
 8109f26:	f042 0201 	orr.w	r2, r2, #1
 8109f2a:	601a      	str	r2, [r3, #0]
 8109f2c:	e012      	b.n	8109f54 <HAL_DMA_Start_IT+0x468>
 8109f2e:	68fb      	ldr	r3, [r7, #12]
 8109f30:	681b      	ldr	r3, [r3, #0]
 8109f32:	681a      	ldr	r2, [r3, #0]
 8109f34:	68fb      	ldr	r3, [r7, #12]
 8109f36:	681b      	ldr	r3, [r3, #0]
 8109f38:	f042 0201 	orr.w	r2, r2, #1
 8109f3c:	601a      	str	r2, [r3, #0]
 8109f3e:	e009      	b.n	8109f54 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8109f40:	68fb      	ldr	r3, [r7, #12]
 8109f42:	2200      	movs	r2, #0
 8109f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8109f48:	68fb      	ldr	r3, [r7, #12]
 8109f4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8109f4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8109f50:	2301      	movs	r3, #1
 8109f52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8109f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8109f56:	4618      	mov	r0, r3
 8109f58:	3718      	adds	r7, #24
 8109f5a:	46bd      	mov	sp, r7
 8109f5c:	bd80      	pop	{r7, pc}
 8109f5e:	bf00      	nop
 8109f60:	40020010 	.word	0x40020010
 8109f64:	40020028 	.word	0x40020028
 8109f68:	40020040 	.word	0x40020040
 8109f6c:	40020058 	.word	0x40020058
 8109f70:	40020070 	.word	0x40020070
 8109f74:	40020088 	.word	0x40020088
 8109f78:	400200a0 	.word	0x400200a0
 8109f7c:	400200b8 	.word	0x400200b8
 8109f80:	40020410 	.word	0x40020410
 8109f84:	40020428 	.word	0x40020428
 8109f88:	40020440 	.word	0x40020440
 8109f8c:	40020458 	.word	0x40020458
 8109f90:	40020470 	.word	0x40020470
 8109f94:	40020488 	.word	0x40020488
 8109f98:	400204a0 	.word	0x400204a0
 8109f9c:	400204b8 	.word	0x400204b8
 8109fa0:	58025408 	.word	0x58025408
 8109fa4:	5802541c 	.word	0x5802541c
 8109fa8:	58025430 	.word	0x58025430
 8109fac:	58025444 	.word	0x58025444
 8109fb0:	58025458 	.word	0x58025458
 8109fb4:	5802546c 	.word	0x5802546c
 8109fb8:	58025480 	.word	0x58025480
 8109fbc:	58025494 	.word	0x58025494

08109fc0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8109fc0:	b480      	push	{r7}
 8109fc2:	b087      	sub	sp, #28
 8109fc4:	af00      	add	r7, sp, #0
 8109fc6:	60f8      	str	r0, [r7, #12]
 8109fc8:	60b9      	str	r1, [r7, #8]
 8109fca:	607a      	str	r2, [r7, #4]
 8109fcc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8109fce:	68fb      	ldr	r3, [r7, #12]
 8109fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109fd2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8109fd4:	68fb      	ldr	r3, [r7, #12]
 8109fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8109fd8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8109fda:	68fb      	ldr	r3, [r7, #12]
 8109fdc:	681b      	ldr	r3, [r3, #0]
 8109fde:	4a84      	ldr	r2, [pc, #528]	; (810a1f0 <DMA_SetConfig+0x230>)
 8109fe0:	4293      	cmp	r3, r2
 8109fe2:	d072      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 8109fe4:	68fb      	ldr	r3, [r7, #12]
 8109fe6:	681b      	ldr	r3, [r3, #0]
 8109fe8:	4a82      	ldr	r2, [pc, #520]	; (810a1f4 <DMA_SetConfig+0x234>)
 8109fea:	4293      	cmp	r3, r2
 8109fec:	d06d      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 8109fee:	68fb      	ldr	r3, [r7, #12]
 8109ff0:	681b      	ldr	r3, [r3, #0]
 8109ff2:	4a81      	ldr	r2, [pc, #516]	; (810a1f8 <DMA_SetConfig+0x238>)
 8109ff4:	4293      	cmp	r3, r2
 8109ff6:	d068      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 8109ff8:	68fb      	ldr	r3, [r7, #12]
 8109ffa:	681b      	ldr	r3, [r3, #0]
 8109ffc:	4a7f      	ldr	r2, [pc, #508]	; (810a1fc <DMA_SetConfig+0x23c>)
 8109ffe:	4293      	cmp	r3, r2
 810a000:	d063      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a002:	68fb      	ldr	r3, [r7, #12]
 810a004:	681b      	ldr	r3, [r3, #0]
 810a006:	4a7e      	ldr	r2, [pc, #504]	; (810a200 <DMA_SetConfig+0x240>)
 810a008:	4293      	cmp	r3, r2
 810a00a:	d05e      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a00c:	68fb      	ldr	r3, [r7, #12]
 810a00e:	681b      	ldr	r3, [r3, #0]
 810a010:	4a7c      	ldr	r2, [pc, #496]	; (810a204 <DMA_SetConfig+0x244>)
 810a012:	4293      	cmp	r3, r2
 810a014:	d059      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a016:	68fb      	ldr	r3, [r7, #12]
 810a018:	681b      	ldr	r3, [r3, #0]
 810a01a:	4a7b      	ldr	r2, [pc, #492]	; (810a208 <DMA_SetConfig+0x248>)
 810a01c:	4293      	cmp	r3, r2
 810a01e:	d054      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a020:	68fb      	ldr	r3, [r7, #12]
 810a022:	681b      	ldr	r3, [r3, #0]
 810a024:	4a79      	ldr	r2, [pc, #484]	; (810a20c <DMA_SetConfig+0x24c>)
 810a026:	4293      	cmp	r3, r2
 810a028:	d04f      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a02a:	68fb      	ldr	r3, [r7, #12]
 810a02c:	681b      	ldr	r3, [r3, #0]
 810a02e:	4a78      	ldr	r2, [pc, #480]	; (810a210 <DMA_SetConfig+0x250>)
 810a030:	4293      	cmp	r3, r2
 810a032:	d04a      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a034:	68fb      	ldr	r3, [r7, #12]
 810a036:	681b      	ldr	r3, [r3, #0]
 810a038:	4a76      	ldr	r2, [pc, #472]	; (810a214 <DMA_SetConfig+0x254>)
 810a03a:	4293      	cmp	r3, r2
 810a03c:	d045      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a03e:	68fb      	ldr	r3, [r7, #12]
 810a040:	681b      	ldr	r3, [r3, #0]
 810a042:	4a75      	ldr	r2, [pc, #468]	; (810a218 <DMA_SetConfig+0x258>)
 810a044:	4293      	cmp	r3, r2
 810a046:	d040      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a048:	68fb      	ldr	r3, [r7, #12]
 810a04a:	681b      	ldr	r3, [r3, #0]
 810a04c:	4a73      	ldr	r2, [pc, #460]	; (810a21c <DMA_SetConfig+0x25c>)
 810a04e:	4293      	cmp	r3, r2
 810a050:	d03b      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a052:	68fb      	ldr	r3, [r7, #12]
 810a054:	681b      	ldr	r3, [r3, #0]
 810a056:	4a72      	ldr	r2, [pc, #456]	; (810a220 <DMA_SetConfig+0x260>)
 810a058:	4293      	cmp	r3, r2
 810a05a:	d036      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a05c:	68fb      	ldr	r3, [r7, #12]
 810a05e:	681b      	ldr	r3, [r3, #0]
 810a060:	4a70      	ldr	r2, [pc, #448]	; (810a224 <DMA_SetConfig+0x264>)
 810a062:	4293      	cmp	r3, r2
 810a064:	d031      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a066:	68fb      	ldr	r3, [r7, #12]
 810a068:	681b      	ldr	r3, [r3, #0]
 810a06a:	4a6f      	ldr	r2, [pc, #444]	; (810a228 <DMA_SetConfig+0x268>)
 810a06c:	4293      	cmp	r3, r2
 810a06e:	d02c      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a070:	68fb      	ldr	r3, [r7, #12]
 810a072:	681b      	ldr	r3, [r3, #0]
 810a074:	4a6d      	ldr	r2, [pc, #436]	; (810a22c <DMA_SetConfig+0x26c>)
 810a076:	4293      	cmp	r3, r2
 810a078:	d027      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a07a:	68fb      	ldr	r3, [r7, #12]
 810a07c:	681b      	ldr	r3, [r3, #0]
 810a07e:	4a6c      	ldr	r2, [pc, #432]	; (810a230 <DMA_SetConfig+0x270>)
 810a080:	4293      	cmp	r3, r2
 810a082:	d022      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a084:	68fb      	ldr	r3, [r7, #12]
 810a086:	681b      	ldr	r3, [r3, #0]
 810a088:	4a6a      	ldr	r2, [pc, #424]	; (810a234 <DMA_SetConfig+0x274>)
 810a08a:	4293      	cmp	r3, r2
 810a08c:	d01d      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a08e:	68fb      	ldr	r3, [r7, #12]
 810a090:	681b      	ldr	r3, [r3, #0]
 810a092:	4a69      	ldr	r2, [pc, #420]	; (810a238 <DMA_SetConfig+0x278>)
 810a094:	4293      	cmp	r3, r2
 810a096:	d018      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a098:	68fb      	ldr	r3, [r7, #12]
 810a09a:	681b      	ldr	r3, [r3, #0]
 810a09c:	4a67      	ldr	r2, [pc, #412]	; (810a23c <DMA_SetConfig+0x27c>)
 810a09e:	4293      	cmp	r3, r2
 810a0a0:	d013      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a0a2:	68fb      	ldr	r3, [r7, #12]
 810a0a4:	681b      	ldr	r3, [r3, #0]
 810a0a6:	4a66      	ldr	r2, [pc, #408]	; (810a240 <DMA_SetConfig+0x280>)
 810a0a8:	4293      	cmp	r3, r2
 810a0aa:	d00e      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a0ac:	68fb      	ldr	r3, [r7, #12]
 810a0ae:	681b      	ldr	r3, [r3, #0]
 810a0b0:	4a64      	ldr	r2, [pc, #400]	; (810a244 <DMA_SetConfig+0x284>)
 810a0b2:	4293      	cmp	r3, r2
 810a0b4:	d009      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a0b6:	68fb      	ldr	r3, [r7, #12]
 810a0b8:	681b      	ldr	r3, [r3, #0]
 810a0ba:	4a63      	ldr	r2, [pc, #396]	; (810a248 <DMA_SetConfig+0x288>)
 810a0bc:	4293      	cmp	r3, r2
 810a0be:	d004      	beq.n	810a0ca <DMA_SetConfig+0x10a>
 810a0c0:	68fb      	ldr	r3, [r7, #12]
 810a0c2:	681b      	ldr	r3, [r3, #0]
 810a0c4:	4a61      	ldr	r2, [pc, #388]	; (810a24c <DMA_SetConfig+0x28c>)
 810a0c6:	4293      	cmp	r3, r2
 810a0c8:	d101      	bne.n	810a0ce <DMA_SetConfig+0x10e>
 810a0ca:	2301      	movs	r3, #1
 810a0cc:	e000      	b.n	810a0d0 <DMA_SetConfig+0x110>
 810a0ce:	2300      	movs	r3, #0
 810a0d0:	2b00      	cmp	r3, #0
 810a0d2:	d00d      	beq.n	810a0f0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 810a0d4:	68fb      	ldr	r3, [r7, #12]
 810a0d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 810a0d8:	68fa      	ldr	r2, [r7, #12]
 810a0da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 810a0dc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 810a0de:	68fb      	ldr	r3, [r7, #12]
 810a0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810a0e2:	2b00      	cmp	r3, #0
 810a0e4:	d004      	beq.n	810a0f0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 810a0e6:	68fb      	ldr	r3, [r7, #12]
 810a0e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810a0ea:	68fa      	ldr	r2, [r7, #12]
 810a0ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 810a0ee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810a0f0:	68fb      	ldr	r3, [r7, #12]
 810a0f2:	681b      	ldr	r3, [r3, #0]
 810a0f4:	4a3e      	ldr	r2, [pc, #248]	; (810a1f0 <DMA_SetConfig+0x230>)
 810a0f6:	4293      	cmp	r3, r2
 810a0f8:	d04a      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a0fa:	68fb      	ldr	r3, [r7, #12]
 810a0fc:	681b      	ldr	r3, [r3, #0]
 810a0fe:	4a3d      	ldr	r2, [pc, #244]	; (810a1f4 <DMA_SetConfig+0x234>)
 810a100:	4293      	cmp	r3, r2
 810a102:	d045      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a104:	68fb      	ldr	r3, [r7, #12]
 810a106:	681b      	ldr	r3, [r3, #0]
 810a108:	4a3b      	ldr	r2, [pc, #236]	; (810a1f8 <DMA_SetConfig+0x238>)
 810a10a:	4293      	cmp	r3, r2
 810a10c:	d040      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a10e:	68fb      	ldr	r3, [r7, #12]
 810a110:	681b      	ldr	r3, [r3, #0]
 810a112:	4a3a      	ldr	r2, [pc, #232]	; (810a1fc <DMA_SetConfig+0x23c>)
 810a114:	4293      	cmp	r3, r2
 810a116:	d03b      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a118:	68fb      	ldr	r3, [r7, #12]
 810a11a:	681b      	ldr	r3, [r3, #0]
 810a11c:	4a38      	ldr	r2, [pc, #224]	; (810a200 <DMA_SetConfig+0x240>)
 810a11e:	4293      	cmp	r3, r2
 810a120:	d036      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a122:	68fb      	ldr	r3, [r7, #12]
 810a124:	681b      	ldr	r3, [r3, #0]
 810a126:	4a37      	ldr	r2, [pc, #220]	; (810a204 <DMA_SetConfig+0x244>)
 810a128:	4293      	cmp	r3, r2
 810a12a:	d031      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a12c:	68fb      	ldr	r3, [r7, #12]
 810a12e:	681b      	ldr	r3, [r3, #0]
 810a130:	4a35      	ldr	r2, [pc, #212]	; (810a208 <DMA_SetConfig+0x248>)
 810a132:	4293      	cmp	r3, r2
 810a134:	d02c      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a136:	68fb      	ldr	r3, [r7, #12]
 810a138:	681b      	ldr	r3, [r3, #0]
 810a13a:	4a34      	ldr	r2, [pc, #208]	; (810a20c <DMA_SetConfig+0x24c>)
 810a13c:	4293      	cmp	r3, r2
 810a13e:	d027      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a140:	68fb      	ldr	r3, [r7, #12]
 810a142:	681b      	ldr	r3, [r3, #0]
 810a144:	4a32      	ldr	r2, [pc, #200]	; (810a210 <DMA_SetConfig+0x250>)
 810a146:	4293      	cmp	r3, r2
 810a148:	d022      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a14a:	68fb      	ldr	r3, [r7, #12]
 810a14c:	681b      	ldr	r3, [r3, #0]
 810a14e:	4a31      	ldr	r2, [pc, #196]	; (810a214 <DMA_SetConfig+0x254>)
 810a150:	4293      	cmp	r3, r2
 810a152:	d01d      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a154:	68fb      	ldr	r3, [r7, #12]
 810a156:	681b      	ldr	r3, [r3, #0]
 810a158:	4a2f      	ldr	r2, [pc, #188]	; (810a218 <DMA_SetConfig+0x258>)
 810a15a:	4293      	cmp	r3, r2
 810a15c:	d018      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a15e:	68fb      	ldr	r3, [r7, #12]
 810a160:	681b      	ldr	r3, [r3, #0]
 810a162:	4a2e      	ldr	r2, [pc, #184]	; (810a21c <DMA_SetConfig+0x25c>)
 810a164:	4293      	cmp	r3, r2
 810a166:	d013      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a168:	68fb      	ldr	r3, [r7, #12]
 810a16a:	681b      	ldr	r3, [r3, #0]
 810a16c:	4a2c      	ldr	r2, [pc, #176]	; (810a220 <DMA_SetConfig+0x260>)
 810a16e:	4293      	cmp	r3, r2
 810a170:	d00e      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a172:	68fb      	ldr	r3, [r7, #12]
 810a174:	681b      	ldr	r3, [r3, #0]
 810a176:	4a2b      	ldr	r2, [pc, #172]	; (810a224 <DMA_SetConfig+0x264>)
 810a178:	4293      	cmp	r3, r2
 810a17a:	d009      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a17c:	68fb      	ldr	r3, [r7, #12]
 810a17e:	681b      	ldr	r3, [r3, #0]
 810a180:	4a29      	ldr	r2, [pc, #164]	; (810a228 <DMA_SetConfig+0x268>)
 810a182:	4293      	cmp	r3, r2
 810a184:	d004      	beq.n	810a190 <DMA_SetConfig+0x1d0>
 810a186:	68fb      	ldr	r3, [r7, #12]
 810a188:	681b      	ldr	r3, [r3, #0]
 810a18a:	4a28      	ldr	r2, [pc, #160]	; (810a22c <DMA_SetConfig+0x26c>)
 810a18c:	4293      	cmp	r3, r2
 810a18e:	d101      	bne.n	810a194 <DMA_SetConfig+0x1d4>
 810a190:	2301      	movs	r3, #1
 810a192:	e000      	b.n	810a196 <DMA_SetConfig+0x1d6>
 810a194:	2300      	movs	r3, #0
 810a196:	2b00      	cmp	r3, #0
 810a198:	d05a      	beq.n	810a250 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810a19a:	68fb      	ldr	r3, [r7, #12]
 810a19c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a19e:	f003 031f 	and.w	r3, r3, #31
 810a1a2:	223f      	movs	r2, #63	; 0x3f
 810a1a4:	409a      	lsls	r2, r3
 810a1a6:	697b      	ldr	r3, [r7, #20]
 810a1a8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 810a1aa:	68fb      	ldr	r3, [r7, #12]
 810a1ac:	681b      	ldr	r3, [r3, #0]
 810a1ae:	681a      	ldr	r2, [r3, #0]
 810a1b0:	68fb      	ldr	r3, [r7, #12]
 810a1b2:	681b      	ldr	r3, [r3, #0]
 810a1b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 810a1b8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 810a1ba:	68fb      	ldr	r3, [r7, #12]
 810a1bc:	681b      	ldr	r3, [r3, #0]
 810a1be:	683a      	ldr	r2, [r7, #0]
 810a1c0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810a1c2:	68fb      	ldr	r3, [r7, #12]
 810a1c4:	689b      	ldr	r3, [r3, #8]
 810a1c6:	2b40      	cmp	r3, #64	; 0x40
 810a1c8:	d108      	bne.n	810a1dc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 810a1ca:	68fb      	ldr	r3, [r7, #12]
 810a1cc:	681b      	ldr	r3, [r3, #0]
 810a1ce:	687a      	ldr	r2, [r7, #4]
 810a1d0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 810a1d2:	68fb      	ldr	r3, [r7, #12]
 810a1d4:	681b      	ldr	r3, [r3, #0]
 810a1d6:	68ba      	ldr	r2, [r7, #8]
 810a1d8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 810a1da:	e087      	b.n	810a2ec <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 810a1dc:	68fb      	ldr	r3, [r7, #12]
 810a1de:	681b      	ldr	r3, [r3, #0]
 810a1e0:	68ba      	ldr	r2, [r7, #8]
 810a1e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 810a1e4:	68fb      	ldr	r3, [r7, #12]
 810a1e6:	681b      	ldr	r3, [r3, #0]
 810a1e8:	687a      	ldr	r2, [r7, #4]
 810a1ea:	60da      	str	r2, [r3, #12]
}
 810a1ec:	e07e      	b.n	810a2ec <DMA_SetConfig+0x32c>
 810a1ee:	bf00      	nop
 810a1f0:	40020010 	.word	0x40020010
 810a1f4:	40020028 	.word	0x40020028
 810a1f8:	40020040 	.word	0x40020040
 810a1fc:	40020058 	.word	0x40020058
 810a200:	40020070 	.word	0x40020070
 810a204:	40020088 	.word	0x40020088
 810a208:	400200a0 	.word	0x400200a0
 810a20c:	400200b8 	.word	0x400200b8
 810a210:	40020410 	.word	0x40020410
 810a214:	40020428 	.word	0x40020428
 810a218:	40020440 	.word	0x40020440
 810a21c:	40020458 	.word	0x40020458
 810a220:	40020470 	.word	0x40020470
 810a224:	40020488 	.word	0x40020488
 810a228:	400204a0 	.word	0x400204a0
 810a22c:	400204b8 	.word	0x400204b8
 810a230:	58025408 	.word	0x58025408
 810a234:	5802541c 	.word	0x5802541c
 810a238:	58025430 	.word	0x58025430
 810a23c:	58025444 	.word	0x58025444
 810a240:	58025458 	.word	0x58025458
 810a244:	5802546c 	.word	0x5802546c
 810a248:	58025480 	.word	0x58025480
 810a24c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 810a250:	68fb      	ldr	r3, [r7, #12]
 810a252:	681b      	ldr	r3, [r3, #0]
 810a254:	4a28      	ldr	r2, [pc, #160]	; (810a2f8 <DMA_SetConfig+0x338>)
 810a256:	4293      	cmp	r3, r2
 810a258:	d022      	beq.n	810a2a0 <DMA_SetConfig+0x2e0>
 810a25a:	68fb      	ldr	r3, [r7, #12]
 810a25c:	681b      	ldr	r3, [r3, #0]
 810a25e:	4a27      	ldr	r2, [pc, #156]	; (810a2fc <DMA_SetConfig+0x33c>)
 810a260:	4293      	cmp	r3, r2
 810a262:	d01d      	beq.n	810a2a0 <DMA_SetConfig+0x2e0>
 810a264:	68fb      	ldr	r3, [r7, #12]
 810a266:	681b      	ldr	r3, [r3, #0]
 810a268:	4a25      	ldr	r2, [pc, #148]	; (810a300 <DMA_SetConfig+0x340>)
 810a26a:	4293      	cmp	r3, r2
 810a26c:	d018      	beq.n	810a2a0 <DMA_SetConfig+0x2e0>
 810a26e:	68fb      	ldr	r3, [r7, #12]
 810a270:	681b      	ldr	r3, [r3, #0]
 810a272:	4a24      	ldr	r2, [pc, #144]	; (810a304 <DMA_SetConfig+0x344>)
 810a274:	4293      	cmp	r3, r2
 810a276:	d013      	beq.n	810a2a0 <DMA_SetConfig+0x2e0>
 810a278:	68fb      	ldr	r3, [r7, #12]
 810a27a:	681b      	ldr	r3, [r3, #0]
 810a27c:	4a22      	ldr	r2, [pc, #136]	; (810a308 <DMA_SetConfig+0x348>)
 810a27e:	4293      	cmp	r3, r2
 810a280:	d00e      	beq.n	810a2a0 <DMA_SetConfig+0x2e0>
 810a282:	68fb      	ldr	r3, [r7, #12]
 810a284:	681b      	ldr	r3, [r3, #0]
 810a286:	4a21      	ldr	r2, [pc, #132]	; (810a30c <DMA_SetConfig+0x34c>)
 810a288:	4293      	cmp	r3, r2
 810a28a:	d009      	beq.n	810a2a0 <DMA_SetConfig+0x2e0>
 810a28c:	68fb      	ldr	r3, [r7, #12]
 810a28e:	681b      	ldr	r3, [r3, #0]
 810a290:	4a1f      	ldr	r2, [pc, #124]	; (810a310 <DMA_SetConfig+0x350>)
 810a292:	4293      	cmp	r3, r2
 810a294:	d004      	beq.n	810a2a0 <DMA_SetConfig+0x2e0>
 810a296:	68fb      	ldr	r3, [r7, #12]
 810a298:	681b      	ldr	r3, [r3, #0]
 810a29a:	4a1e      	ldr	r2, [pc, #120]	; (810a314 <DMA_SetConfig+0x354>)
 810a29c:	4293      	cmp	r3, r2
 810a29e:	d101      	bne.n	810a2a4 <DMA_SetConfig+0x2e4>
 810a2a0:	2301      	movs	r3, #1
 810a2a2:	e000      	b.n	810a2a6 <DMA_SetConfig+0x2e6>
 810a2a4:	2300      	movs	r3, #0
 810a2a6:	2b00      	cmp	r3, #0
 810a2a8:	d020      	beq.n	810a2ec <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 810a2aa:	68fb      	ldr	r3, [r7, #12]
 810a2ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810a2ae:	f003 031f 	and.w	r3, r3, #31
 810a2b2:	2201      	movs	r2, #1
 810a2b4:	409a      	lsls	r2, r3
 810a2b6:	693b      	ldr	r3, [r7, #16]
 810a2b8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 810a2ba:	68fb      	ldr	r3, [r7, #12]
 810a2bc:	681b      	ldr	r3, [r3, #0]
 810a2be:	683a      	ldr	r2, [r7, #0]
 810a2c0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810a2c2:	68fb      	ldr	r3, [r7, #12]
 810a2c4:	689b      	ldr	r3, [r3, #8]
 810a2c6:	2b40      	cmp	r3, #64	; 0x40
 810a2c8:	d108      	bne.n	810a2dc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 810a2ca:	68fb      	ldr	r3, [r7, #12]
 810a2cc:	681b      	ldr	r3, [r3, #0]
 810a2ce:	687a      	ldr	r2, [r7, #4]
 810a2d0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 810a2d2:	68fb      	ldr	r3, [r7, #12]
 810a2d4:	681b      	ldr	r3, [r3, #0]
 810a2d6:	68ba      	ldr	r2, [r7, #8]
 810a2d8:	60da      	str	r2, [r3, #12]
}
 810a2da:	e007      	b.n	810a2ec <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 810a2dc:	68fb      	ldr	r3, [r7, #12]
 810a2de:	681b      	ldr	r3, [r3, #0]
 810a2e0:	68ba      	ldr	r2, [r7, #8]
 810a2e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 810a2e4:	68fb      	ldr	r3, [r7, #12]
 810a2e6:	681b      	ldr	r3, [r3, #0]
 810a2e8:	687a      	ldr	r2, [r7, #4]
 810a2ea:	60da      	str	r2, [r3, #12]
}
 810a2ec:	bf00      	nop
 810a2ee:	371c      	adds	r7, #28
 810a2f0:	46bd      	mov	sp, r7
 810a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a2f6:	4770      	bx	lr
 810a2f8:	58025408 	.word	0x58025408
 810a2fc:	5802541c 	.word	0x5802541c
 810a300:	58025430 	.word	0x58025430
 810a304:	58025444 	.word	0x58025444
 810a308:	58025458 	.word	0x58025458
 810a30c:	5802546c 	.word	0x5802546c
 810a310:	58025480 	.word	0x58025480
 810a314:	58025494 	.word	0x58025494

0810a318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810a318:	b480      	push	{r7}
 810a31a:	b089      	sub	sp, #36	; 0x24
 810a31c:	af00      	add	r7, sp, #0
 810a31e:	6078      	str	r0, [r7, #4]
 810a320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810a322:	2300      	movs	r3, #0
 810a324:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810a326:	4b89      	ldr	r3, [pc, #548]	; (810a54c <HAL_GPIO_Init+0x234>)
 810a328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810a32a:	e194      	b.n	810a656 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 810a32c:	683b      	ldr	r3, [r7, #0]
 810a32e:	681a      	ldr	r2, [r3, #0]
 810a330:	2101      	movs	r1, #1
 810a332:	69fb      	ldr	r3, [r7, #28]
 810a334:	fa01 f303 	lsl.w	r3, r1, r3
 810a338:	4013      	ands	r3, r2
 810a33a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 810a33c:	693b      	ldr	r3, [r7, #16]
 810a33e:	2b00      	cmp	r3, #0
 810a340:	f000 8186 	beq.w	810a650 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810a344:	683b      	ldr	r3, [r7, #0]
 810a346:	685b      	ldr	r3, [r3, #4]
 810a348:	2b01      	cmp	r3, #1
 810a34a:	d00b      	beq.n	810a364 <HAL_GPIO_Init+0x4c>
 810a34c:	683b      	ldr	r3, [r7, #0]
 810a34e:	685b      	ldr	r3, [r3, #4]
 810a350:	2b02      	cmp	r3, #2
 810a352:	d007      	beq.n	810a364 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810a354:	683b      	ldr	r3, [r7, #0]
 810a356:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 810a358:	2b11      	cmp	r3, #17
 810a35a:	d003      	beq.n	810a364 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810a35c:	683b      	ldr	r3, [r7, #0]
 810a35e:	685b      	ldr	r3, [r3, #4]
 810a360:	2b12      	cmp	r3, #18
 810a362:	d130      	bne.n	810a3c6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810a364:	687b      	ldr	r3, [r7, #4]
 810a366:	689b      	ldr	r3, [r3, #8]
 810a368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810a36a:	69fb      	ldr	r3, [r7, #28]
 810a36c:	005b      	lsls	r3, r3, #1
 810a36e:	2203      	movs	r2, #3
 810a370:	fa02 f303 	lsl.w	r3, r2, r3
 810a374:	43db      	mvns	r3, r3
 810a376:	69ba      	ldr	r2, [r7, #24]
 810a378:	4013      	ands	r3, r2
 810a37a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810a37c:	683b      	ldr	r3, [r7, #0]
 810a37e:	68da      	ldr	r2, [r3, #12]
 810a380:	69fb      	ldr	r3, [r7, #28]
 810a382:	005b      	lsls	r3, r3, #1
 810a384:	fa02 f303 	lsl.w	r3, r2, r3
 810a388:	69ba      	ldr	r2, [r7, #24]
 810a38a:	4313      	orrs	r3, r2
 810a38c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810a38e:	687b      	ldr	r3, [r7, #4]
 810a390:	69ba      	ldr	r2, [r7, #24]
 810a392:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810a394:	687b      	ldr	r3, [r7, #4]
 810a396:	685b      	ldr	r3, [r3, #4]
 810a398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810a39a:	2201      	movs	r2, #1
 810a39c:	69fb      	ldr	r3, [r7, #28]
 810a39e:	fa02 f303 	lsl.w	r3, r2, r3
 810a3a2:	43db      	mvns	r3, r3
 810a3a4:	69ba      	ldr	r2, [r7, #24]
 810a3a6:	4013      	ands	r3, r2
 810a3a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 810a3aa:	683b      	ldr	r3, [r7, #0]
 810a3ac:	685b      	ldr	r3, [r3, #4]
 810a3ae:	091b      	lsrs	r3, r3, #4
 810a3b0:	f003 0201 	and.w	r2, r3, #1
 810a3b4:	69fb      	ldr	r3, [r7, #28]
 810a3b6:	fa02 f303 	lsl.w	r3, r2, r3
 810a3ba:	69ba      	ldr	r2, [r7, #24]
 810a3bc:	4313      	orrs	r3, r2
 810a3be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810a3c0:	687b      	ldr	r3, [r7, #4]
 810a3c2:	69ba      	ldr	r2, [r7, #24]
 810a3c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810a3c6:	687b      	ldr	r3, [r7, #4]
 810a3c8:	68db      	ldr	r3, [r3, #12]
 810a3ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 810a3cc:	69fb      	ldr	r3, [r7, #28]
 810a3ce:	005b      	lsls	r3, r3, #1
 810a3d0:	2203      	movs	r2, #3
 810a3d2:	fa02 f303 	lsl.w	r3, r2, r3
 810a3d6:	43db      	mvns	r3, r3
 810a3d8:	69ba      	ldr	r2, [r7, #24]
 810a3da:	4013      	ands	r3, r2
 810a3dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810a3de:	683b      	ldr	r3, [r7, #0]
 810a3e0:	689a      	ldr	r2, [r3, #8]
 810a3e2:	69fb      	ldr	r3, [r7, #28]
 810a3e4:	005b      	lsls	r3, r3, #1
 810a3e6:	fa02 f303 	lsl.w	r3, r2, r3
 810a3ea:	69ba      	ldr	r2, [r7, #24]
 810a3ec:	4313      	orrs	r3, r2
 810a3ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810a3f0:	687b      	ldr	r3, [r7, #4]
 810a3f2:	69ba      	ldr	r2, [r7, #24]
 810a3f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 810a3f6:	683b      	ldr	r3, [r7, #0]
 810a3f8:	685b      	ldr	r3, [r3, #4]
 810a3fa:	2b02      	cmp	r3, #2
 810a3fc:	d003      	beq.n	810a406 <HAL_GPIO_Init+0xee>
 810a3fe:	683b      	ldr	r3, [r7, #0]
 810a400:	685b      	ldr	r3, [r3, #4]
 810a402:	2b12      	cmp	r3, #18
 810a404:	d123      	bne.n	810a44e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810a406:	69fb      	ldr	r3, [r7, #28]
 810a408:	08da      	lsrs	r2, r3, #3
 810a40a:	687b      	ldr	r3, [r7, #4]
 810a40c:	3208      	adds	r2, #8
 810a40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810a412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810a414:	69fb      	ldr	r3, [r7, #28]
 810a416:	f003 0307 	and.w	r3, r3, #7
 810a41a:	009b      	lsls	r3, r3, #2
 810a41c:	220f      	movs	r2, #15
 810a41e:	fa02 f303 	lsl.w	r3, r2, r3
 810a422:	43db      	mvns	r3, r3
 810a424:	69ba      	ldr	r2, [r7, #24]
 810a426:	4013      	ands	r3, r2
 810a428:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810a42a:	683b      	ldr	r3, [r7, #0]
 810a42c:	691a      	ldr	r2, [r3, #16]
 810a42e:	69fb      	ldr	r3, [r7, #28]
 810a430:	f003 0307 	and.w	r3, r3, #7
 810a434:	009b      	lsls	r3, r3, #2
 810a436:	fa02 f303 	lsl.w	r3, r2, r3
 810a43a:	69ba      	ldr	r2, [r7, #24]
 810a43c:	4313      	orrs	r3, r2
 810a43e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810a440:	69fb      	ldr	r3, [r7, #28]
 810a442:	08da      	lsrs	r2, r3, #3
 810a444:	687b      	ldr	r3, [r7, #4]
 810a446:	3208      	adds	r2, #8
 810a448:	69b9      	ldr	r1, [r7, #24]
 810a44a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810a44e:	687b      	ldr	r3, [r7, #4]
 810a450:	681b      	ldr	r3, [r3, #0]
 810a452:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810a454:	69fb      	ldr	r3, [r7, #28]
 810a456:	005b      	lsls	r3, r3, #1
 810a458:	2203      	movs	r2, #3
 810a45a:	fa02 f303 	lsl.w	r3, r2, r3
 810a45e:	43db      	mvns	r3, r3
 810a460:	69ba      	ldr	r2, [r7, #24]
 810a462:	4013      	ands	r3, r2
 810a464:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810a466:	683b      	ldr	r3, [r7, #0]
 810a468:	685b      	ldr	r3, [r3, #4]
 810a46a:	f003 0203 	and.w	r2, r3, #3
 810a46e:	69fb      	ldr	r3, [r7, #28]
 810a470:	005b      	lsls	r3, r3, #1
 810a472:	fa02 f303 	lsl.w	r3, r2, r3
 810a476:	69ba      	ldr	r2, [r7, #24]
 810a478:	4313      	orrs	r3, r2
 810a47a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810a47c:	687b      	ldr	r3, [r7, #4]
 810a47e:	69ba      	ldr	r2, [r7, #24]
 810a480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810a482:	683b      	ldr	r3, [r7, #0]
 810a484:	685b      	ldr	r3, [r3, #4]
 810a486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810a48a:	2b00      	cmp	r3, #0
 810a48c:	f000 80e0 	beq.w	810a650 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810a490:	4b2f      	ldr	r3, [pc, #188]	; (810a550 <HAL_GPIO_Init+0x238>)
 810a492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810a496:	4a2e      	ldr	r2, [pc, #184]	; (810a550 <HAL_GPIO_Init+0x238>)
 810a498:	f043 0302 	orr.w	r3, r3, #2
 810a49c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810a4a0:	4b2b      	ldr	r3, [pc, #172]	; (810a550 <HAL_GPIO_Init+0x238>)
 810a4a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810a4a6:	f003 0302 	and.w	r3, r3, #2
 810a4aa:	60fb      	str	r3, [r7, #12]
 810a4ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810a4ae:	4a29      	ldr	r2, [pc, #164]	; (810a554 <HAL_GPIO_Init+0x23c>)
 810a4b0:	69fb      	ldr	r3, [r7, #28]
 810a4b2:	089b      	lsrs	r3, r3, #2
 810a4b4:	3302      	adds	r3, #2
 810a4b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810a4ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810a4bc:	69fb      	ldr	r3, [r7, #28]
 810a4be:	f003 0303 	and.w	r3, r3, #3
 810a4c2:	009b      	lsls	r3, r3, #2
 810a4c4:	220f      	movs	r2, #15
 810a4c6:	fa02 f303 	lsl.w	r3, r2, r3
 810a4ca:	43db      	mvns	r3, r3
 810a4cc:	69ba      	ldr	r2, [r7, #24]
 810a4ce:	4013      	ands	r3, r2
 810a4d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810a4d2:	687b      	ldr	r3, [r7, #4]
 810a4d4:	4a20      	ldr	r2, [pc, #128]	; (810a558 <HAL_GPIO_Init+0x240>)
 810a4d6:	4293      	cmp	r3, r2
 810a4d8:	d052      	beq.n	810a580 <HAL_GPIO_Init+0x268>
 810a4da:	687b      	ldr	r3, [r7, #4]
 810a4dc:	4a1f      	ldr	r2, [pc, #124]	; (810a55c <HAL_GPIO_Init+0x244>)
 810a4de:	4293      	cmp	r3, r2
 810a4e0:	d031      	beq.n	810a546 <HAL_GPIO_Init+0x22e>
 810a4e2:	687b      	ldr	r3, [r7, #4]
 810a4e4:	4a1e      	ldr	r2, [pc, #120]	; (810a560 <HAL_GPIO_Init+0x248>)
 810a4e6:	4293      	cmp	r3, r2
 810a4e8:	d02b      	beq.n	810a542 <HAL_GPIO_Init+0x22a>
 810a4ea:	687b      	ldr	r3, [r7, #4]
 810a4ec:	4a1d      	ldr	r2, [pc, #116]	; (810a564 <HAL_GPIO_Init+0x24c>)
 810a4ee:	4293      	cmp	r3, r2
 810a4f0:	d025      	beq.n	810a53e <HAL_GPIO_Init+0x226>
 810a4f2:	687b      	ldr	r3, [r7, #4]
 810a4f4:	4a1c      	ldr	r2, [pc, #112]	; (810a568 <HAL_GPIO_Init+0x250>)
 810a4f6:	4293      	cmp	r3, r2
 810a4f8:	d01f      	beq.n	810a53a <HAL_GPIO_Init+0x222>
 810a4fa:	687b      	ldr	r3, [r7, #4]
 810a4fc:	4a1b      	ldr	r2, [pc, #108]	; (810a56c <HAL_GPIO_Init+0x254>)
 810a4fe:	4293      	cmp	r3, r2
 810a500:	d019      	beq.n	810a536 <HAL_GPIO_Init+0x21e>
 810a502:	687b      	ldr	r3, [r7, #4]
 810a504:	4a1a      	ldr	r2, [pc, #104]	; (810a570 <HAL_GPIO_Init+0x258>)
 810a506:	4293      	cmp	r3, r2
 810a508:	d013      	beq.n	810a532 <HAL_GPIO_Init+0x21a>
 810a50a:	687b      	ldr	r3, [r7, #4]
 810a50c:	4a19      	ldr	r2, [pc, #100]	; (810a574 <HAL_GPIO_Init+0x25c>)
 810a50e:	4293      	cmp	r3, r2
 810a510:	d00d      	beq.n	810a52e <HAL_GPIO_Init+0x216>
 810a512:	687b      	ldr	r3, [r7, #4]
 810a514:	4a18      	ldr	r2, [pc, #96]	; (810a578 <HAL_GPIO_Init+0x260>)
 810a516:	4293      	cmp	r3, r2
 810a518:	d007      	beq.n	810a52a <HAL_GPIO_Init+0x212>
 810a51a:	687b      	ldr	r3, [r7, #4]
 810a51c:	4a17      	ldr	r2, [pc, #92]	; (810a57c <HAL_GPIO_Init+0x264>)
 810a51e:	4293      	cmp	r3, r2
 810a520:	d101      	bne.n	810a526 <HAL_GPIO_Init+0x20e>
 810a522:	2309      	movs	r3, #9
 810a524:	e02d      	b.n	810a582 <HAL_GPIO_Init+0x26a>
 810a526:	230a      	movs	r3, #10
 810a528:	e02b      	b.n	810a582 <HAL_GPIO_Init+0x26a>
 810a52a:	2308      	movs	r3, #8
 810a52c:	e029      	b.n	810a582 <HAL_GPIO_Init+0x26a>
 810a52e:	2307      	movs	r3, #7
 810a530:	e027      	b.n	810a582 <HAL_GPIO_Init+0x26a>
 810a532:	2306      	movs	r3, #6
 810a534:	e025      	b.n	810a582 <HAL_GPIO_Init+0x26a>
 810a536:	2305      	movs	r3, #5
 810a538:	e023      	b.n	810a582 <HAL_GPIO_Init+0x26a>
 810a53a:	2304      	movs	r3, #4
 810a53c:	e021      	b.n	810a582 <HAL_GPIO_Init+0x26a>
 810a53e:	2303      	movs	r3, #3
 810a540:	e01f      	b.n	810a582 <HAL_GPIO_Init+0x26a>
 810a542:	2302      	movs	r3, #2
 810a544:	e01d      	b.n	810a582 <HAL_GPIO_Init+0x26a>
 810a546:	2301      	movs	r3, #1
 810a548:	e01b      	b.n	810a582 <HAL_GPIO_Init+0x26a>
 810a54a:	bf00      	nop
 810a54c:	580000c0 	.word	0x580000c0
 810a550:	58024400 	.word	0x58024400
 810a554:	58000400 	.word	0x58000400
 810a558:	58020000 	.word	0x58020000
 810a55c:	58020400 	.word	0x58020400
 810a560:	58020800 	.word	0x58020800
 810a564:	58020c00 	.word	0x58020c00
 810a568:	58021000 	.word	0x58021000
 810a56c:	58021400 	.word	0x58021400
 810a570:	58021800 	.word	0x58021800
 810a574:	58021c00 	.word	0x58021c00
 810a578:	58022000 	.word	0x58022000
 810a57c:	58022400 	.word	0x58022400
 810a580:	2300      	movs	r3, #0
 810a582:	69fa      	ldr	r2, [r7, #28]
 810a584:	f002 0203 	and.w	r2, r2, #3
 810a588:	0092      	lsls	r2, r2, #2
 810a58a:	4093      	lsls	r3, r2
 810a58c:	69ba      	ldr	r2, [r7, #24]
 810a58e:	4313      	orrs	r3, r2
 810a590:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810a592:	4938      	ldr	r1, [pc, #224]	; (810a674 <HAL_GPIO_Init+0x35c>)
 810a594:	69fb      	ldr	r3, [r7, #28]
 810a596:	089b      	lsrs	r3, r3, #2
 810a598:	3302      	adds	r3, #2
 810a59a:	69ba      	ldr	r2, [r7, #24]
 810a59c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810a5a0:	697b      	ldr	r3, [r7, #20]
 810a5a2:	681b      	ldr	r3, [r3, #0]
 810a5a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a5a6:	693b      	ldr	r3, [r7, #16]
 810a5a8:	43db      	mvns	r3, r3
 810a5aa:	69ba      	ldr	r2, [r7, #24]
 810a5ac:	4013      	ands	r3, r2
 810a5ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 810a5b0:	683b      	ldr	r3, [r7, #0]
 810a5b2:	685b      	ldr	r3, [r3, #4]
 810a5b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810a5b8:	2b00      	cmp	r3, #0
 810a5ba:	d003      	beq.n	810a5c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 810a5bc:	69ba      	ldr	r2, [r7, #24]
 810a5be:	693b      	ldr	r3, [r7, #16]
 810a5c0:	4313      	orrs	r3, r2
 810a5c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810a5c4:	697b      	ldr	r3, [r7, #20]
 810a5c6:	69ba      	ldr	r2, [r7, #24]
 810a5c8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 810a5ca:	697b      	ldr	r3, [r7, #20]
 810a5cc:	685b      	ldr	r3, [r3, #4]
 810a5ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a5d0:	693b      	ldr	r3, [r7, #16]
 810a5d2:	43db      	mvns	r3, r3
 810a5d4:	69ba      	ldr	r2, [r7, #24]
 810a5d6:	4013      	ands	r3, r2
 810a5d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 810a5da:	683b      	ldr	r3, [r7, #0]
 810a5dc:	685b      	ldr	r3, [r3, #4]
 810a5de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810a5e2:	2b00      	cmp	r3, #0
 810a5e4:	d003      	beq.n	810a5ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 810a5e6:	69ba      	ldr	r2, [r7, #24]
 810a5e8:	693b      	ldr	r3, [r7, #16]
 810a5ea:	4313      	orrs	r3, r2
 810a5ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810a5ee:	697b      	ldr	r3, [r7, #20]
 810a5f0:	69ba      	ldr	r2, [r7, #24]
 810a5f2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 810a5f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810a5f8:	681b      	ldr	r3, [r3, #0]
 810a5fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a5fc:	693b      	ldr	r3, [r7, #16]
 810a5fe:	43db      	mvns	r3, r3
 810a600:	69ba      	ldr	r2, [r7, #24]
 810a602:	4013      	ands	r3, r2
 810a604:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 810a606:	683b      	ldr	r3, [r7, #0]
 810a608:	685b      	ldr	r3, [r3, #4]
 810a60a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810a60e:	2b00      	cmp	r3, #0
 810a610:	d003      	beq.n	810a61a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 810a612:	69ba      	ldr	r2, [r7, #24]
 810a614:	693b      	ldr	r3, [r7, #16]
 810a616:	4313      	orrs	r3, r2
 810a618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810a61a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810a61e:	69bb      	ldr	r3, [r7, #24]
 810a620:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810a622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 810a626:	685b      	ldr	r3, [r3, #4]
 810a628:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810a62a:	693b      	ldr	r3, [r7, #16]
 810a62c:	43db      	mvns	r3, r3
 810a62e:	69ba      	ldr	r2, [r7, #24]
 810a630:	4013      	ands	r3, r2
 810a632:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 810a634:	683b      	ldr	r3, [r7, #0]
 810a636:	685b      	ldr	r3, [r3, #4]
 810a638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810a63c:	2b00      	cmp	r3, #0
 810a63e:	d003      	beq.n	810a648 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 810a640:	69ba      	ldr	r2, [r7, #24]
 810a642:	693b      	ldr	r3, [r7, #16]
 810a644:	4313      	orrs	r3, r2
 810a646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810a648:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810a64c:	69bb      	ldr	r3, [r7, #24]
 810a64e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 810a650:	69fb      	ldr	r3, [r7, #28]
 810a652:	3301      	adds	r3, #1
 810a654:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810a656:	683b      	ldr	r3, [r7, #0]
 810a658:	681a      	ldr	r2, [r3, #0]
 810a65a:	69fb      	ldr	r3, [r7, #28]
 810a65c:	fa22 f303 	lsr.w	r3, r2, r3
 810a660:	2b00      	cmp	r3, #0
 810a662:	f47f ae63 	bne.w	810a32c <HAL_GPIO_Init+0x14>
  }
}
 810a666:	bf00      	nop
 810a668:	bf00      	nop
 810a66a:	3724      	adds	r7, #36	; 0x24
 810a66c:	46bd      	mov	sp, r7
 810a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a672:	4770      	bx	lr
 810a674:	58000400 	.word	0x58000400

0810a678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 810a678:	b480      	push	{r7}
 810a67a:	b083      	sub	sp, #12
 810a67c:	af00      	add	r7, sp, #0
 810a67e:	6078      	str	r0, [r7, #4]
 810a680:	460b      	mov	r3, r1
 810a682:	807b      	strh	r3, [r7, #2]
 810a684:	4613      	mov	r3, r2
 810a686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 810a688:	787b      	ldrb	r3, [r7, #1]
 810a68a:	2b00      	cmp	r3, #0
 810a68c:	d003      	beq.n	810a696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810a68e:	887a      	ldrh	r2, [r7, #2]
 810a690:	687b      	ldr	r3, [r7, #4]
 810a692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 810a694:	e003      	b.n	810a69e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810a696:	887b      	ldrh	r3, [r7, #2]
 810a698:	041a      	lsls	r2, r3, #16
 810a69a:	687b      	ldr	r3, [r7, #4]
 810a69c:	619a      	str	r2, [r3, #24]
}
 810a69e:	bf00      	nop
 810a6a0:	370c      	adds	r7, #12
 810a6a2:	46bd      	mov	sp, r7
 810a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6a8:	4770      	bx	lr

0810a6aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 810a6aa:	b480      	push	{r7}
 810a6ac:	b083      	sub	sp, #12
 810a6ae:	af00      	add	r7, sp, #0
 810a6b0:	6078      	str	r0, [r7, #4]
 810a6b2:	460b      	mov	r3, r1
 810a6b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 810a6b6:	687b      	ldr	r3, [r7, #4]
 810a6b8:	695a      	ldr	r2, [r3, #20]
 810a6ba:	887b      	ldrh	r3, [r7, #2]
 810a6bc:	401a      	ands	r2, r3
 810a6be:	887b      	ldrh	r3, [r7, #2]
 810a6c0:	429a      	cmp	r2, r3
 810a6c2:	d104      	bne.n	810a6ce <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 810a6c4:	887b      	ldrh	r3, [r7, #2]
 810a6c6:	041a      	lsls	r2, r3, #16
 810a6c8:	687b      	ldr	r3, [r7, #4]
 810a6ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 810a6cc:	e002      	b.n	810a6d4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 810a6ce:	887a      	ldrh	r2, [r7, #2]
 810a6d0:	687b      	ldr	r3, [r7, #4]
 810a6d2:	619a      	str	r2, [r3, #24]
}
 810a6d4:	bf00      	nop
 810a6d6:	370c      	adds	r7, #12
 810a6d8:	46bd      	mov	sp, r7
 810a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6de:	4770      	bx	lr

0810a6e0 <HAL_HSEM_Take>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HSEM_Take(uint32_t SemID, uint32_t ProcessID)
{
 810a6e0:	b5b0      	push	{r4, r5, r7, lr}
 810a6e2:	b086      	sub	sp, #24
 810a6e4:	af00      	add	r7, sp, #0
 810a6e6:	6078      	str	r0, [r7, #4]
 810a6e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

#if  USE_MULTI_CORE_SHARED_CODE != 0U
  /* First step  write R register with MasterID, processID and take bit=1*/
  HSEM->R[SemID] = ((ProcessID & HSEM_R_PROCID) | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID) | HSEM_R_LOCK);
 810a6ea:	683b      	ldr	r3, [r7, #0]
 810a6ec:	b2dc      	uxtb	r4, r3
 810a6ee:	f7ff f9e9 	bl	8109ac4 <HAL_GetCurrentCPUID>
 810a6f2:	4602      	mov	r2, r0
 810a6f4:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 810a6f8:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810a6fa:	68fb      	ldr	r3, [r7, #12]
 810a6fc:	fa93 f3a3 	rbit	r3, r3
 810a700:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 810a702:	68bb      	ldr	r3, [r7, #8]
 810a704:	fab3 f383 	clz	r3, r3
 810a708:	b2db      	uxtb	r3, r3
 810a70a:	fa02 f303 	lsl.w	r3, r2, r3
 810a70e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 810a712:	4323      	orrs	r3, r4
 810a714:	4914      	ldr	r1, [pc, #80]	; (810a768 <HAL_HSEM_Take+0x88>)
 810a716:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 810a71a:	687b      	ldr	r3, [r7, #4]
 810a71c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /* second step : read the R register . Take achieved if MasterID and processID match and take bit set to 1 */
  if (HSEM->R[SemID] == ((ProcessID & HSEM_R_PROCID) | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID) | HSEM_R_LOCK))
 810a720:	4a11      	ldr	r2, [pc, #68]	; (810a768 <HAL_HSEM_Take+0x88>)
 810a722:	687b      	ldr	r3, [r7, #4]
 810a724:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810a728:	683b      	ldr	r3, [r7, #0]
 810a72a:	b2dd      	uxtb	r5, r3
 810a72c:	f7ff f9ca 	bl	8109ac4 <HAL_GetCurrentCPUID>
 810a730:	4602      	mov	r2, r0
 810a732:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 810a736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810a738:	697b      	ldr	r3, [r7, #20]
 810a73a:	fa93 f3a3 	rbit	r3, r3
 810a73e:	613b      	str	r3, [r7, #16]
  return result;
 810a740:	693b      	ldr	r3, [r7, #16]
 810a742:	fab3 f383 	clz	r3, r3
 810a746:	b2db      	uxtb	r3, r3
 810a748:	fa02 f303 	lsl.w	r3, r2, r3
 810a74c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 810a750:	432b      	orrs	r3, r5
 810a752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 810a756:	429c      	cmp	r4, r3
 810a758:	d101      	bne.n	810a75e <HAL_HSEM_Take+0x7e>
  {
    /*take success when MasterID and ProcessID match and take bit set*/
    return HAL_OK;
 810a75a:	2300      	movs	r3, #0
 810a75c:	e000      	b.n	810a760 <HAL_HSEM_Take+0x80>
    return HAL_OK;
  }
#endif

  /* Semaphore take fails*/
  return HAL_ERROR;
 810a75e:	2301      	movs	r3, #1
}
 810a760:	4618      	mov	r0, r3
 810a762:	3718      	adds	r7, #24
 810a764:	46bd      	mov	sp, r7
 810a766:	bdb0      	pop	{r4, r5, r7, pc}
 810a768:	58026400 	.word	0x58026400

0810a76c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 810a76c:	b580      	push	{r7, lr}
 810a76e:	b084      	sub	sp, #16
 810a770:	af00      	add	r7, sp, #0
 810a772:	6078      	str	r0, [r7, #4]
 810a774:	6039      	str	r1, [r7, #0]
  assert_param(IS_HSEM_SEMID(SemID));
  assert_param(IS_HSEM_PROCESSID(ProcessID));

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
 810a776:	f7ff f9a5 	bl	8109ac4 <HAL_GetCurrentCPUID>
 810a77a:	4602      	mov	r2, r0
 810a77c:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 810a780:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810a782:	68fb      	ldr	r3, [r7, #12]
 810a784:	fa93 f3a3 	rbit	r3, r3
 810a788:	60bb      	str	r3, [r7, #8]
  return result;
 810a78a:	68bb      	ldr	r3, [r7, #8]
 810a78c:	fab3 f383 	clz	r3, r3
 810a790:	b2db      	uxtb	r3, r3
 810a792:	fa02 f303 	lsl.w	r3, r2, r3
 810a796:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
 810a79a:	4905      	ldr	r1, [pc, #20]	; (810a7b0 <HAL_HSEM_Release+0x44>)
 810a79c:	683b      	ldr	r3, [r7, #0]
 810a79e:	431a      	orrs	r2, r3
 810a7a0:	687b      	ldr	r3, [r7, #4]
 810a7a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
#endif

}
 810a7a6:	bf00      	nop
 810a7a8:	3710      	adds	r7, #16
 810a7aa:	46bd      	mov	sp, r7
 810a7ac:	bd80      	pop	{r7, pc}
 810a7ae:	bf00      	nop
 810a7b0:	58026400 	.word	0x58026400

0810a7b4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810a7b4:	b580      	push	{r7, lr}
 810a7b6:	b082      	sub	sp, #8
 810a7b8:	af00      	add	r7, sp, #0
 810a7ba:	6078      	str	r0, [r7, #4]
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  /*enable the semaphore mask interrupts */
  if (HAL_GetCurrentCPUID() == HSEM_CPU1_COREID)
 810a7bc:	f7ff f982 	bl	8109ac4 <HAL_GetCurrentCPUID>
 810a7c0:	4603      	mov	r3, r0
 810a7c2:	2b03      	cmp	r3, #3
 810a7c4:	d108      	bne.n	810a7d8 <HAL_HSEM_ActivateNotification+0x24>
  {
    /*Use interrupt line 0 for CPU1 Master */
    HSEM->C1IER |= SemMask;
 810a7c6:	4b0a      	ldr	r3, [pc, #40]	; (810a7f0 <HAL_HSEM_ActivateNotification+0x3c>)
 810a7c8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 810a7cc:	4908      	ldr	r1, [pc, #32]	; (810a7f0 <HAL_HSEM_ActivateNotification+0x3c>)
 810a7ce:	687b      	ldr	r3, [r7, #4]
 810a7d0:	4313      	orrs	r3, r2
 810a7d2:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
#endif
}
 810a7d6:	e007      	b.n	810a7e8 <HAL_HSEM_ActivateNotification+0x34>
    HSEM->C2IER |= SemMask;
 810a7d8:	4b05      	ldr	r3, [pc, #20]	; (810a7f0 <HAL_HSEM_ActivateNotification+0x3c>)
 810a7da:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 810a7de:	4904      	ldr	r1, [pc, #16]	; (810a7f0 <HAL_HSEM_ActivateNotification+0x3c>)
 810a7e0:	687b      	ldr	r3, [r7, #4]
 810a7e2:	4313      	orrs	r3, r2
 810a7e4:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
}
 810a7e8:	bf00      	nop
 810a7ea:	3708      	adds	r7, #8
 810a7ec:	46bd      	mov	sp, r7
 810a7ee:	bd80      	pop	{r7, pc}
 810a7f0:	58026400 	.word	0x58026400

0810a7f4 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810a7f4:	b580      	push	{r7, lr}
 810a7f6:	b084      	sub	sp, #16
 810a7f8:	af00      	add	r7, sp, #0
 810a7fa:	60f8      	str	r0, [r7, #12]
 810a7fc:	460b      	mov	r3, r1
 810a7fe:	607a      	str	r2, [r7, #4]
 810a800:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810a802:	4b37      	ldr	r3, [pc, #220]	; (810a8e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a804:	681b      	ldr	r3, [r3, #0]
 810a806:	f023 0201 	bic.w	r2, r3, #1
 810a80a:	4935      	ldr	r1, [pc, #212]	; (810a8e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a80c:	68fb      	ldr	r3, [r7, #12]
 810a80e:	4313      	orrs	r3, r2
 810a810:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810a812:	687b      	ldr	r3, [r7, #4]
 810a814:	2b00      	cmp	r3, #0
 810a816:	d123      	bne.n	810a860 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810a818:	f7ff f954 	bl	8109ac4 <HAL_GetCurrentCPUID>
 810a81c:	4603      	mov	r3, r0
 810a81e:	2b03      	cmp	r3, #3
 810a820:	d158      	bne.n	810a8d4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810a822:	4b2f      	ldr	r3, [pc, #188]	; (810a8e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a824:	691b      	ldr	r3, [r3, #16]
 810a826:	4a2e      	ldr	r2, [pc, #184]	; (810a8e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a828:	f023 0301 	bic.w	r3, r3, #1
 810a82c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810a82e:	4b2d      	ldr	r3, [pc, #180]	; (810a8e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a830:	691b      	ldr	r3, [r3, #16]
 810a832:	4a2c      	ldr	r2, [pc, #176]	; (810a8e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a834:	f043 0304 	orr.w	r3, r3, #4
 810a838:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810a83a:	f3bf 8f4f 	dsb	sy
}
 810a83e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810a840:	f3bf 8f6f 	isb	sy
}
 810a844:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810a846:	7afb      	ldrb	r3, [r7, #11]
 810a848:	2b01      	cmp	r3, #1
 810a84a:	d101      	bne.n	810a850 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810a84c:	bf30      	wfi
 810a84e:	e000      	b.n	810a852 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810a850:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810a852:	4b24      	ldr	r3, [pc, #144]	; (810a8e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a854:	691b      	ldr	r3, [r3, #16]
 810a856:	4a23      	ldr	r2, [pc, #140]	; (810a8e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a858:	f023 0304 	bic.w	r3, r3, #4
 810a85c:	6113      	str	r3, [r2, #16]
 810a85e:	e03c      	b.n	810a8da <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 810a860:	687b      	ldr	r3, [r7, #4]
 810a862:	2b01      	cmp	r3, #1
 810a864:	d123      	bne.n	810a8ae <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810a866:	f7ff f92d 	bl	8109ac4 <HAL_GetCurrentCPUID>
 810a86a:	4603      	mov	r3, r0
 810a86c:	2b01      	cmp	r3, #1
 810a86e:	d133      	bne.n	810a8d8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 810a870:	4b1b      	ldr	r3, [pc, #108]	; (810a8e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a872:	695b      	ldr	r3, [r3, #20]
 810a874:	4a1a      	ldr	r2, [pc, #104]	; (810a8e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a876:	f023 0302 	bic.w	r3, r3, #2
 810a87a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810a87c:	4b19      	ldr	r3, [pc, #100]	; (810a8e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a87e:	691b      	ldr	r3, [r3, #16]
 810a880:	4a18      	ldr	r2, [pc, #96]	; (810a8e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a882:	f043 0304 	orr.w	r3, r3, #4
 810a886:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 810a888:	f3bf 8f4f 	dsb	sy
}
 810a88c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810a88e:	f3bf 8f6f 	isb	sy
}
 810a892:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810a894:	7afb      	ldrb	r3, [r7, #11]
 810a896:	2b01      	cmp	r3, #1
 810a898:	d101      	bne.n	810a89e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810a89a:	bf30      	wfi
 810a89c:	e000      	b.n	810a8a0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810a89e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810a8a0:	4b10      	ldr	r3, [pc, #64]	; (810a8e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a8a2:	691b      	ldr	r3, [r3, #16]
 810a8a4:	4a0f      	ldr	r2, [pc, #60]	; (810a8e4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810a8a6:	f023 0304 	bic.w	r3, r3, #4
 810a8aa:	6113      	str	r3, [r2, #16]
 810a8ac:	e015      	b.n	810a8da <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810a8ae:	f7ff f909 	bl	8109ac4 <HAL_GetCurrentCPUID>
 810a8b2:	4603      	mov	r3, r0
 810a8b4:	2b03      	cmp	r3, #3
 810a8b6:	d106      	bne.n	810a8c6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 810a8b8:	4b09      	ldr	r3, [pc, #36]	; (810a8e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a8ba:	691b      	ldr	r3, [r3, #16]
 810a8bc:	4a08      	ldr	r2, [pc, #32]	; (810a8e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a8be:	f023 0304 	bic.w	r3, r3, #4
 810a8c2:	6113      	str	r3, [r2, #16]
 810a8c4:	e009      	b.n	810a8da <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810a8c6:	4b06      	ldr	r3, [pc, #24]	; (810a8e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a8c8:	695b      	ldr	r3, [r3, #20]
 810a8ca:	4a05      	ldr	r2, [pc, #20]	; (810a8e0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810a8cc:	f023 0304 	bic.w	r3, r3, #4
 810a8d0:	6153      	str	r3, [r2, #20]
 810a8d2:	e002      	b.n	810a8da <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810a8d4:	bf00      	nop
 810a8d6:	e000      	b.n	810a8da <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810a8d8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810a8da:	3710      	adds	r7, #16
 810a8dc:	46bd      	mov	sp, r7
 810a8de:	bd80      	pop	{r7, pc}
 810a8e0:	58024800 	.word	0x58024800
 810a8e4:	e000ed00 	.word	0xe000ed00

0810a8e8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810a8e8:	b580      	push	{r7, lr}
 810a8ea:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810a8ec:	f7ff f8ea 	bl	8109ac4 <HAL_GetCurrentCPUID>
 810a8f0:	4603      	mov	r3, r0
 810a8f2:	2b03      	cmp	r3, #3
 810a8f4:	d101      	bne.n	810a8fa <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810a8f6:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810a8f8:	e001      	b.n	810a8fe <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810a8fa:	bf40      	sev
    __WFE ();
 810a8fc:	bf20      	wfe
}
 810a8fe:	bf00      	nop
 810a900:	bd80      	pop	{r7, pc}
	...

0810a904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810a904:	b480      	push	{r7}
 810a906:	b089      	sub	sp, #36	; 0x24
 810a908:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810a90a:	4bb3      	ldr	r3, [pc, #716]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a90c:	691b      	ldr	r3, [r3, #16]
 810a90e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810a912:	2b18      	cmp	r3, #24
 810a914:	f200 8155 	bhi.w	810abc2 <HAL_RCC_GetSysClockFreq+0x2be>
 810a918:	a201      	add	r2, pc, #4	; (adr r2, 810a920 <HAL_RCC_GetSysClockFreq+0x1c>)
 810a91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a91e:	bf00      	nop
 810a920:	0810a985 	.word	0x0810a985
 810a924:	0810abc3 	.word	0x0810abc3
 810a928:	0810abc3 	.word	0x0810abc3
 810a92c:	0810abc3 	.word	0x0810abc3
 810a930:	0810abc3 	.word	0x0810abc3
 810a934:	0810abc3 	.word	0x0810abc3
 810a938:	0810abc3 	.word	0x0810abc3
 810a93c:	0810abc3 	.word	0x0810abc3
 810a940:	0810a9ab 	.word	0x0810a9ab
 810a944:	0810abc3 	.word	0x0810abc3
 810a948:	0810abc3 	.word	0x0810abc3
 810a94c:	0810abc3 	.word	0x0810abc3
 810a950:	0810abc3 	.word	0x0810abc3
 810a954:	0810abc3 	.word	0x0810abc3
 810a958:	0810abc3 	.word	0x0810abc3
 810a95c:	0810abc3 	.word	0x0810abc3
 810a960:	0810a9b1 	.word	0x0810a9b1
 810a964:	0810abc3 	.word	0x0810abc3
 810a968:	0810abc3 	.word	0x0810abc3
 810a96c:	0810abc3 	.word	0x0810abc3
 810a970:	0810abc3 	.word	0x0810abc3
 810a974:	0810abc3 	.word	0x0810abc3
 810a978:	0810abc3 	.word	0x0810abc3
 810a97c:	0810abc3 	.word	0x0810abc3
 810a980:	0810a9b7 	.word	0x0810a9b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a984:	4b94      	ldr	r3, [pc, #592]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a986:	681b      	ldr	r3, [r3, #0]
 810a988:	f003 0320 	and.w	r3, r3, #32
 810a98c:	2b00      	cmp	r3, #0
 810a98e:	d009      	beq.n	810a9a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810a990:	4b91      	ldr	r3, [pc, #580]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a992:	681b      	ldr	r3, [r3, #0]
 810a994:	08db      	lsrs	r3, r3, #3
 810a996:	f003 0303 	and.w	r3, r3, #3
 810a99a:	4a90      	ldr	r2, [pc, #576]	; (810abdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 810a99c:	fa22 f303 	lsr.w	r3, r2, r3
 810a9a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 810a9a2:	e111      	b.n	810abc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810a9a4:	4b8d      	ldr	r3, [pc, #564]	; (810abdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 810a9a6:	61bb      	str	r3, [r7, #24]
    break;
 810a9a8:	e10e      	b.n	810abc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 810a9aa:	4b8d      	ldr	r3, [pc, #564]	; (810abe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810a9ac:	61bb      	str	r3, [r7, #24]
    break;
 810a9ae:	e10b      	b.n	810abc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 810a9b0:	4b8c      	ldr	r3, [pc, #560]	; (810abe4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810a9b2:	61bb      	str	r3, [r7, #24]
    break;
 810a9b4:	e108      	b.n	810abc8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810a9b6:	4b88      	ldr	r3, [pc, #544]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a9ba:	f003 0303 	and.w	r3, r3, #3
 810a9be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 810a9c0:	4b85      	ldr	r3, [pc, #532]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810a9c4:	091b      	lsrs	r3, r3, #4
 810a9c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 810a9ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 810a9cc:	4b82      	ldr	r3, [pc, #520]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810a9d0:	f003 0301 	and.w	r3, r3, #1
 810a9d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 810a9d6:	4b80      	ldr	r3, [pc, #512]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810a9d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810a9da:	08db      	lsrs	r3, r3, #3
 810a9dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810a9e0:	68fa      	ldr	r2, [r7, #12]
 810a9e2:	fb02 f303 	mul.w	r3, r2, r3
 810a9e6:	ee07 3a90 	vmov	s15, r3
 810a9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810a9ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 810a9f2:	693b      	ldr	r3, [r7, #16]
 810a9f4:	2b00      	cmp	r3, #0
 810a9f6:	f000 80e1 	beq.w	810abbc <HAL_RCC_GetSysClockFreq+0x2b8>
 810a9fa:	697b      	ldr	r3, [r7, #20]
 810a9fc:	2b02      	cmp	r3, #2
 810a9fe:	f000 8083 	beq.w	810ab08 <HAL_RCC_GetSysClockFreq+0x204>
 810aa02:	697b      	ldr	r3, [r7, #20]
 810aa04:	2b02      	cmp	r3, #2
 810aa06:	f200 80a1 	bhi.w	810ab4c <HAL_RCC_GetSysClockFreq+0x248>
 810aa0a:	697b      	ldr	r3, [r7, #20]
 810aa0c:	2b00      	cmp	r3, #0
 810aa0e:	d003      	beq.n	810aa18 <HAL_RCC_GetSysClockFreq+0x114>
 810aa10:	697b      	ldr	r3, [r7, #20]
 810aa12:	2b01      	cmp	r3, #1
 810aa14:	d056      	beq.n	810aac4 <HAL_RCC_GetSysClockFreq+0x1c0>
 810aa16:	e099      	b.n	810ab4c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810aa18:	4b6f      	ldr	r3, [pc, #444]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa1a:	681b      	ldr	r3, [r3, #0]
 810aa1c:	f003 0320 	and.w	r3, r3, #32
 810aa20:	2b00      	cmp	r3, #0
 810aa22:	d02d      	beq.n	810aa80 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810aa24:	4b6c      	ldr	r3, [pc, #432]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa26:	681b      	ldr	r3, [r3, #0]
 810aa28:	08db      	lsrs	r3, r3, #3
 810aa2a:	f003 0303 	and.w	r3, r3, #3
 810aa2e:	4a6b      	ldr	r2, [pc, #428]	; (810abdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 810aa30:	fa22 f303 	lsr.w	r3, r2, r3
 810aa34:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810aa36:	687b      	ldr	r3, [r7, #4]
 810aa38:	ee07 3a90 	vmov	s15, r3
 810aa3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810aa40:	693b      	ldr	r3, [r7, #16]
 810aa42:	ee07 3a90 	vmov	s15, r3
 810aa46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810aa4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810aa4e:	4b62      	ldr	r3, [pc, #392]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810aa52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810aa56:	ee07 3a90 	vmov	s15, r3
 810aa5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810aa5e:	ed97 6a02 	vldr	s12, [r7, #8]
 810aa62:	eddf 5a61 	vldr	s11, [pc, #388]	; 810abe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810aa66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810aa6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810aa6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810aa72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810aa76:	ee67 7a27 	vmul.f32	s15, s14, s15
 810aa7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 810aa7e:	e087      	b.n	810ab90 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810aa80:	693b      	ldr	r3, [r7, #16]
 810aa82:	ee07 3a90 	vmov	s15, r3
 810aa86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810aa8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810abec <HAL_RCC_GetSysClockFreq+0x2e8>
 810aa8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810aa92:	4b51      	ldr	r3, [pc, #324]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aa94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810aa96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810aa9a:	ee07 3a90 	vmov	s15, r3
 810aa9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810aaa2:	ed97 6a02 	vldr	s12, [r7, #8]
 810aaa6:	eddf 5a50 	vldr	s11, [pc, #320]	; 810abe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810aaaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810aaae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810aab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810aab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810aaba:	ee67 7a27 	vmul.f32	s15, s14, s15
 810aabe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810aac2:	e065      	b.n	810ab90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810aac4:	693b      	ldr	r3, [r7, #16]
 810aac6:	ee07 3a90 	vmov	s15, r3
 810aaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810aace:	eddf 6a48 	vldr	s13, [pc, #288]	; 810abf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810aad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810aad6:	4b40      	ldr	r3, [pc, #256]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810aad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810aada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810aade:	ee07 3a90 	vmov	s15, r3
 810aae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810aae6:	ed97 6a02 	vldr	s12, [r7, #8]
 810aaea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 810abe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810aaee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810aaf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810aaf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810aafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810aafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 810ab02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810ab06:	e043      	b.n	810ab90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810ab08:	693b      	ldr	r3, [r7, #16]
 810ab0a:	ee07 3a90 	vmov	s15, r3
 810ab0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ab12:	eddf 6a38 	vldr	s13, [pc, #224]	; 810abf4 <HAL_RCC_GetSysClockFreq+0x2f0>
 810ab16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810ab1a:	4b2f      	ldr	r3, [pc, #188]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810ab1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810ab1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810ab22:	ee07 3a90 	vmov	s15, r3
 810ab26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810ab2a:	ed97 6a02 	vldr	s12, [r7, #8]
 810ab2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 810abe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810ab32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810ab36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810ab3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810ab3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810ab42:	ee67 7a27 	vmul.f32	s15, s14, s15
 810ab46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810ab4a:	e021      	b.n	810ab90 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 810ab4c:	693b      	ldr	r3, [r7, #16]
 810ab4e:	ee07 3a90 	vmov	s15, r3
 810ab52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810ab56:	eddf 6a26 	vldr	s13, [pc, #152]	; 810abf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 810ab5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810ab5e:	4b1e      	ldr	r3, [pc, #120]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810ab60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810ab62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810ab66:	ee07 3a90 	vmov	s15, r3
 810ab6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810ab6e:	ed97 6a02 	vldr	s12, [r7, #8]
 810ab72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 810abe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 810ab76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810ab7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810ab7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810ab82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810ab86:	ee67 7a27 	vmul.f32	s15, s14, s15
 810ab8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810ab8e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 810ab90:	4b11      	ldr	r3, [pc, #68]	; (810abd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810ab92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810ab94:	0a5b      	lsrs	r3, r3, #9
 810ab96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810ab9a:	3301      	adds	r3, #1
 810ab9c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 810ab9e:	683b      	ldr	r3, [r7, #0]
 810aba0:	ee07 3a90 	vmov	s15, r3
 810aba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810aba8:	edd7 6a07 	vldr	s13, [r7, #28]
 810abac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810abb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810abb4:	ee17 3a90 	vmov	r3, s15
 810abb8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 810abba:	e005      	b.n	810abc8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 810abbc:	2300      	movs	r3, #0
 810abbe:	61bb      	str	r3, [r7, #24]
    break;
 810abc0:	e002      	b.n	810abc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 810abc2:	4b07      	ldr	r3, [pc, #28]	; (810abe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810abc4:	61bb      	str	r3, [r7, #24]
    break;
 810abc6:	bf00      	nop
  }

  return sysclockfreq;
 810abc8:	69bb      	ldr	r3, [r7, #24]
}
 810abca:	4618      	mov	r0, r3
 810abcc:	3724      	adds	r7, #36	; 0x24
 810abce:	46bd      	mov	sp, r7
 810abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810abd4:	4770      	bx	lr
 810abd6:	bf00      	nop
 810abd8:	58024400 	.word	0x58024400
 810abdc:	03d09000 	.word	0x03d09000
 810abe0:	003d0900 	.word	0x003d0900
 810abe4:	007a1200 	.word	0x007a1200
 810abe8:	46000000 	.word	0x46000000
 810abec:	4c742400 	.word	0x4c742400
 810abf0:	4a742400 	.word	0x4a742400
 810abf4:	4af42400 	.word	0x4af42400

0810abf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 810abf8:	b580      	push	{r7, lr}
 810abfa:	b082      	sub	sp, #8
 810abfc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810abfe:	f7ff fe81 	bl	810a904 <HAL_RCC_GetSysClockFreq>
 810ac02:	4602      	mov	r2, r0
 810ac04:	4b11      	ldr	r3, [pc, #68]	; (810ac4c <HAL_RCC_GetHCLKFreq+0x54>)
 810ac06:	699b      	ldr	r3, [r3, #24]
 810ac08:	0a1b      	lsrs	r3, r3, #8
 810ac0a:	f003 030f 	and.w	r3, r3, #15
 810ac0e:	4910      	ldr	r1, [pc, #64]	; (810ac50 <HAL_RCC_GetHCLKFreq+0x58>)
 810ac10:	5ccb      	ldrb	r3, [r1, r3]
 810ac12:	f003 031f 	and.w	r3, r3, #31
 810ac16:	fa22 f303 	lsr.w	r3, r2, r3
 810ac1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 810ac1c:	4b0b      	ldr	r3, [pc, #44]	; (810ac4c <HAL_RCC_GetHCLKFreq+0x54>)
 810ac1e:	699b      	ldr	r3, [r3, #24]
 810ac20:	f003 030f 	and.w	r3, r3, #15
 810ac24:	4a0a      	ldr	r2, [pc, #40]	; (810ac50 <HAL_RCC_GetHCLKFreq+0x58>)
 810ac26:	5cd3      	ldrb	r3, [r2, r3]
 810ac28:	f003 031f 	and.w	r3, r3, #31
 810ac2c:	687a      	ldr	r2, [r7, #4]
 810ac2e:	fa22 f303 	lsr.w	r3, r2, r3
 810ac32:	4a08      	ldr	r2, [pc, #32]	; (810ac54 <HAL_RCC_GetHCLKFreq+0x5c>)
 810ac34:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810ac36:	4b07      	ldr	r3, [pc, #28]	; (810ac54 <HAL_RCC_GetHCLKFreq+0x5c>)
 810ac38:	681b      	ldr	r3, [r3, #0]
 810ac3a:	4a07      	ldr	r2, [pc, #28]	; (810ac58 <HAL_RCC_GetHCLKFreq+0x60>)
 810ac3c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810ac3e:	4b05      	ldr	r3, [pc, #20]	; (810ac54 <HAL_RCC_GetHCLKFreq+0x5c>)
 810ac40:	681b      	ldr	r3, [r3, #0]
}
 810ac42:	4618      	mov	r0, r3
 810ac44:	3708      	adds	r7, #8
 810ac46:	46bd      	mov	sp, r7
 810ac48:	bd80      	pop	{r7, pc}
 810ac4a:	bf00      	nop
 810ac4c:	58024400 	.word	0x58024400
 810ac50:	0810c0e0 	.word	0x0810c0e0
 810ac54:	3004000c 	.word	0x3004000c
 810ac58:	30040008 	.word	0x30040008

0810ac5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 810ac5c:	b580      	push	{r7, lr}
 810ac5e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810ac60:	f7ff ffca 	bl	810abf8 <HAL_RCC_GetHCLKFreq>
 810ac64:	4602      	mov	r2, r0
 810ac66:	4b06      	ldr	r3, [pc, #24]	; (810ac80 <HAL_RCC_GetPCLK1Freq+0x24>)
 810ac68:	69db      	ldr	r3, [r3, #28]
 810ac6a:	091b      	lsrs	r3, r3, #4
 810ac6c:	f003 0307 	and.w	r3, r3, #7
 810ac70:	4904      	ldr	r1, [pc, #16]	; (810ac84 <HAL_RCC_GetPCLK1Freq+0x28>)
 810ac72:	5ccb      	ldrb	r3, [r1, r3]
 810ac74:	f003 031f 	and.w	r3, r3, #31
 810ac78:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810ac7c:	4618      	mov	r0, r3
 810ac7e:	bd80      	pop	{r7, pc}
 810ac80:	58024400 	.word	0x58024400
 810ac84:	0810c0e0 	.word	0x0810c0e0

0810ac88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 810ac88:	b480      	push	{r7}
 810ac8a:	b083      	sub	sp, #12
 810ac8c:	af00      	add	r7, sp, #0
 810ac8e:	6078      	str	r0, [r7, #4]
 810ac90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 810ac92:	687b      	ldr	r3, [r7, #4]
 810ac94:	223f      	movs	r2, #63	; 0x3f
 810ac96:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 810ac98:	4b1a      	ldr	r3, [pc, #104]	; (810ad04 <HAL_RCC_GetClockConfig+0x7c>)
 810ac9a:	691b      	ldr	r3, [r3, #16]
 810ac9c:	f003 0207 	and.w	r2, r3, #7
 810aca0:	687b      	ldr	r3, [r7, #4]
 810aca2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 810aca4:	4b17      	ldr	r3, [pc, #92]	; (810ad04 <HAL_RCC_GetClockConfig+0x7c>)
 810aca6:	699b      	ldr	r3, [r3, #24]
 810aca8:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 810acac:	687b      	ldr	r3, [r7, #4]
 810acae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 810acb0:	4b14      	ldr	r3, [pc, #80]	; (810ad04 <HAL_RCC_GetClockConfig+0x7c>)
 810acb2:	699b      	ldr	r3, [r3, #24]
 810acb4:	f003 020f 	and.w	r2, r3, #15
 810acb8:	687b      	ldr	r3, [r7, #4]
 810acba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 810acbc:	4b11      	ldr	r3, [pc, #68]	; (810ad04 <HAL_RCC_GetClockConfig+0x7c>)
 810acbe:	699b      	ldr	r3, [r3, #24]
 810acc0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810acc4:	687b      	ldr	r3, [r7, #4]
 810acc6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 810acc8:	4b0e      	ldr	r3, [pc, #56]	; (810ad04 <HAL_RCC_GetClockConfig+0x7c>)
 810acca:	69db      	ldr	r3, [r3, #28]
 810accc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810acd0:	687b      	ldr	r3, [r7, #4]
 810acd2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 810acd4:	4b0b      	ldr	r3, [pc, #44]	; (810ad04 <HAL_RCC_GetClockConfig+0x7c>)
 810acd6:	69db      	ldr	r3, [r3, #28]
 810acd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 810acdc:	687b      	ldr	r3, [r7, #4]
 810acde:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 810ace0:	4b08      	ldr	r3, [pc, #32]	; (810ad04 <HAL_RCC_GetClockConfig+0x7c>)
 810ace2:	6a1b      	ldr	r3, [r3, #32]
 810ace4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810ace8:	687b      	ldr	r3, [r7, #4]
 810acea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 810acec:	4b06      	ldr	r3, [pc, #24]	; (810ad08 <HAL_RCC_GetClockConfig+0x80>)
 810acee:	681b      	ldr	r3, [r3, #0]
 810acf0:	f003 020f 	and.w	r2, r3, #15
 810acf4:	683b      	ldr	r3, [r7, #0]
 810acf6:	601a      	str	r2, [r3, #0]
}
 810acf8:	bf00      	nop
 810acfa:	370c      	adds	r7, #12
 810acfc:	46bd      	mov	sp, r7
 810acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ad02:	4770      	bx	lr
 810ad04:	58024400 	.word	0x58024400
 810ad08:	52002000 	.word	0x52002000

0810ad0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810ad0c:	b580      	push	{r7, lr}
 810ad0e:	b082      	sub	sp, #8
 810ad10:	af00      	add	r7, sp, #0
 810ad12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810ad14:	687b      	ldr	r3, [r7, #4]
 810ad16:	2b00      	cmp	r3, #0
 810ad18:	d101      	bne.n	810ad1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810ad1a:	2301      	movs	r3, #1
 810ad1c:	e049      	b.n	810adb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810ad1e:	687b      	ldr	r3, [r7, #4]
 810ad20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810ad24:	b2db      	uxtb	r3, r3
 810ad26:	2b00      	cmp	r3, #0
 810ad28:	d106      	bne.n	810ad38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810ad2a:	687b      	ldr	r3, [r7, #4]
 810ad2c:	2200      	movs	r2, #0
 810ad2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810ad32:	6878      	ldr	r0, [r7, #4]
 810ad34:	f000 f841 	bl	810adba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ad38:	687b      	ldr	r3, [r7, #4]
 810ad3a:	2202      	movs	r2, #2
 810ad3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810ad40:	687b      	ldr	r3, [r7, #4]
 810ad42:	681a      	ldr	r2, [r3, #0]
 810ad44:	687b      	ldr	r3, [r7, #4]
 810ad46:	3304      	adds	r3, #4
 810ad48:	4619      	mov	r1, r3
 810ad4a:	4610      	mov	r0, r2
 810ad4c:	f000 f9be 	bl	810b0cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810ad50:	687b      	ldr	r3, [r7, #4]
 810ad52:	2201      	movs	r2, #1
 810ad54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ad58:	687b      	ldr	r3, [r7, #4]
 810ad5a:	2201      	movs	r2, #1
 810ad5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 810ad60:	687b      	ldr	r3, [r7, #4]
 810ad62:	2201      	movs	r2, #1
 810ad64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810ad68:	687b      	ldr	r3, [r7, #4]
 810ad6a:	2201      	movs	r2, #1
 810ad6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 810ad70:	687b      	ldr	r3, [r7, #4]
 810ad72:	2201      	movs	r2, #1
 810ad74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810ad78:	687b      	ldr	r3, [r7, #4]
 810ad7a:	2201      	movs	r2, #1
 810ad7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 810ad80:	687b      	ldr	r3, [r7, #4]
 810ad82:	2201      	movs	r2, #1
 810ad84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810ad88:	687b      	ldr	r3, [r7, #4]
 810ad8a:	2201      	movs	r2, #1
 810ad8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 810ad90:	687b      	ldr	r3, [r7, #4]
 810ad92:	2201      	movs	r2, #1
 810ad94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810ad98:	687b      	ldr	r3, [r7, #4]
 810ad9a:	2201      	movs	r2, #1
 810ad9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 810ada0:	687b      	ldr	r3, [r7, #4]
 810ada2:	2201      	movs	r2, #1
 810ada4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810ada8:	687b      	ldr	r3, [r7, #4]
 810adaa:	2201      	movs	r2, #1
 810adac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 810adb0:	2300      	movs	r3, #0
}
 810adb2:	4618      	mov	r0, r3
 810adb4:	3708      	adds	r7, #8
 810adb6:	46bd      	mov	sp, r7
 810adb8:	bd80      	pop	{r7, pc}

0810adba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810adba:	b480      	push	{r7}
 810adbc:	b083      	sub	sp, #12
 810adbe:	af00      	add	r7, sp, #0
 810adc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 810adc2:	bf00      	nop
 810adc4:	370c      	adds	r7, #12
 810adc6:	46bd      	mov	sp, r7
 810adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810adcc:	4770      	bx	lr
	...

0810add0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 810add0:	b480      	push	{r7}
 810add2:	b085      	sub	sp, #20
 810add4:	af00      	add	r7, sp, #0
 810add6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810add8:	687b      	ldr	r3, [r7, #4]
 810adda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810adde:	b2db      	uxtb	r3, r3
 810ade0:	2b01      	cmp	r3, #1
 810ade2:	d001      	beq.n	810ade8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 810ade4:	2301      	movs	r3, #1
 810ade6:	e021      	b.n	810ae2c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810ade8:	687b      	ldr	r3, [r7, #4]
 810adea:	2202      	movs	r2, #2
 810adec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 810adf0:	687b      	ldr	r3, [r7, #4]
 810adf2:	681b      	ldr	r3, [r3, #0]
 810adf4:	68da      	ldr	r2, [r3, #12]
 810adf6:	687b      	ldr	r3, [r7, #4]
 810adf8:	681b      	ldr	r3, [r3, #0]
 810adfa:	f042 0201 	orr.w	r2, r2, #1
 810adfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810ae00:	687b      	ldr	r3, [r7, #4]
 810ae02:	681b      	ldr	r3, [r3, #0]
 810ae04:	689a      	ldr	r2, [r3, #8]
 810ae06:	4b0c      	ldr	r3, [pc, #48]	; (810ae38 <HAL_TIM_Base_Start_IT+0x68>)
 810ae08:	4013      	ands	r3, r2
 810ae0a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810ae0c:	68fb      	ldr	r3, [r7, #12]
 810ae0e:	2b06      	cmp	r3, #6
 810ae10:	d00b      	beq.n	810ae2a <HAL_TIM_Base_Start_IT+0x5a>
 810ae12:	68fb      	ldr	r3, [r7, #12]
 810ae14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810ae18:	d007      	beq.n	810ae2a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 810ae1a:	687b      	ldr	r3, [r7, #4]
 810ae1c:	681b      	ldr	r3, [r3, #0]
 810ae1e:	681a      	ldr	r2, [r3, #0]
 810ae20:	687b      	ldr	r3, [r7, #4]
 810ae22:	681b      	ldr	r3, [r3, #0]
 810ae24:	f042 0201 	orr.w	r2, r2, #1
 810ae28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 810ae2a:	2300      	movs	r3, #0
}
 810ae2c:	4618      	mov	r0, r3
 810ae2e:	3714      	adds	r7, #20
 810ae30:	46bd      	mov	sp, r7
 810ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae36:	4770      	bx	lr
 810ae38:	00010007 	.word	0x00010007

0810ae3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 810ae3c:	b580      	push	{r7, lr}
 810ae3e:	b082      	sub	sp, #8
 810ae40:	af00      	add	r7, sp, #0
 810ae42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810ae44:	687b      	ldr	r3, [r7, #4]
 810ae46:	681b      	ldr	r3, [r3, #0]
 810ae48:	691b      	ldr	r3, [r3, #16]
 810ae4a:	f003 0302 	and.w	r3, r3, #2
 810ae4e:	2b02      	cmp	r3, #2
 810ae50:	d122      	bne.n	810ae98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810ae52:	687b      	ldr	r3, [r7, #4]
 810ae54:	681b      	ldr	r3, [r3, #0]
 810ae56:	68db      	ldr	r3, [r3, #12]
 810ae58:	f003 0302 	and.w	r3, r3, #2
 810ae5c:	2b02      	cmp	r3, #2
 810ae5e:	d11b      	bne.n	810ae98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 810ae60:	687b      	ldr	r3, [r7, #4]
 810ae62:	681b      	ldr	r3, [r3, #0]
 810ae64:	f06f 0202 	mvn.w	r2, #2
 810ae68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810ae6a:	687b      	ldr	r3, [r7, #4]
 810ae6c:	2201      	movs	r2, #1
 810ae6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 810ae70:	687b      	ldr	r3, [r7, #4]
 810ae72:	681b      	ldr	r3, [r3, #0]
 810ae74:	699b      	ldr	r3, [r3, #24]
 810ae76:	f003 0303 	and.w	r3, r3, #3
 810ae7a:	2b00      	cmp	r3, #0
 810ae7c:	d003      	beq.n	810ae86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810ae7e:	6878      	ldr	r0, [r7, #4]
 810ae80:	f000 f905 	bl	810b08e <HAL_TIM_IC_CaptureCallback>
 810ae84:	e005      	b.n	810ae92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810ae86:	6878      	ldr	r0, [r7, #4]
 810ae88:	f000 f8f7 	bl	810b07a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810ae8c:	6878      	ldr	r0, [r7, #4]
 810ae8e:	f000 f908 	bl	810b0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810ae92:	687b      	ldr	r3, [r7, #4]
 810ae94:	2200      	movs	r2, #0
 810ae96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 810ae98:	687b      	ldr	r3, [r7, #4]
 810ae9a:	681b      	ldr	r3, [r3, #0]
 810ae9c:	691b      	ldr	r3, [r3, #16]
 810ae9e:	f003 0304 	and.w	r3, r3, #4
 810aea2:	2b04      	cmp	r3, #4
 810aea4:	d122      	bne.n	810aeec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810aea6:	687b      	ldr	r3, [r7, #4]
 810aea8:	681b      	ldr	r3, [r3, #0]
 810aeaa:	68db      	ldr	r3, [r3, #12]
 810aeac:	f003 0304 	and.w	r3, r3, #4
 810aeb0:	2b04      	cmp	r3, #4
 810aeb2:	d11b      	bne.n	810aeec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810aeb4:	687b      	ldr	r3, [r7, #4]
 810aeb6:	681b      	ldr	r3, [r3, #0]
 810aeb8:	f06f 0204 	mvn.w	r2, #4
 810aebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 810aebe:	687b      	ldr	r3, [r7, #4]
 810aec0:	2202      	movs	r2, #2
 810aec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810aec4:	687b      	ldr	r3, [r7, #4]
 810aec6:	681b      	ldr	r3, [r3, #0]
 810aec8:	699b      	ldr	r3, [r3, #24]
 810aeca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810aece:	2b00      	cmp	r3, #0
 810aed0:	d003      	beq.n	810aeda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810aed2:	6878      	ldr	r0, [r7, #4]
 810aed4:	f000 f8db 	bl	810b08e <HAL_TIM_IC_CaptureCallback>
 810aed8:	e005      	b.n	810aee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810aeda:	6878      	ldr	r0, [r7, #4]
 810aedc:	f000 f8cd 	bl	810b07a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810aee0:	6878      	ldr	r0, [r7, #4]
 810aee2:	f000 f8de 	bl	810b0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810aee6:	687b      	ldr	r3, [r7, #4]
 810aee8:	2200      	movs	r2, #0
 810aeea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 810aeec:	687b      	ldr	r3, [r7, #4]
 810aeee:	681b      	ldr	r3, [r3, #0]
 810aef0:	691b      	ldr	r3, [r3, #16]
 810aef2:	f003 0308 	and.w	r3, r3, #8
 810aef6:	2b08      	cmp	r3, #8
 810aef8:	d122      	bne.n	810af40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 810aefa:	687b      	ldr	r3, [r7, #4]
 810aefc:	681b      	ldr	r3, [r3, #0]
 810aefe:	68db      	ldr	r3, [r3, #12]
 810af00:	f003 0308 	and.w	r3, r3, #8
 810af04:	2b08      	cmp	r3, #8
 810af06:	d11b      	bne.n	810af40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 810af08:	687b      	ldr	r3, [r7, #4]
 810af0a:	681b      	ldr	r3, [r3, #0]
 810af0c:	f06f 0208 	mvn.w	r2, #8
 810af10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 810af12:	687b      	ldr	r3, [r7, #4]
 810af14:	2204      	movs	r2, #4
 810af16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 810af18:	687b      	ldr	r3, [r7, #4]
 810af1a:	681b      	ldr	r3, [r3, #0]
 810af1c:	69db      	ldr	r3, [r3, #28]
 810af1e:	f003 0303 	and.w	r3, r3, #3
 810af22:	2b00      	cmp	r3, #0
 810af24:	d003      	beq.n	810af2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810af26:	6878      	ldr	r0, [r7, #4]
 810af28:	f000 f8b1 	bl	810b08e <HAL_TIM_IC_CaptureCallback>
 810af2c:	e005      	b.n	810af3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810af2e:	6878      	ldr	r0, [r7, #4]
 810af30:	f000 f8a3 	bl	810b07a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810af34:	6878      	ldr	r0, [r7, #4]
 810af36:	f000 f8b4 	bl	810b0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810af3a:	687b      	ldr	r3, [r7, #4]
 810af3c:	2200      	movs	r2, #0
 810af3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 810af40:	687b      	ldr	r3, [r7, #4]
 810af42:	681b      	ldr	r3, [r3, #0]
 810af44:	691b      	ldr	r3, [r3, #16]
 810af46:	f003 0310 	and.w	r3, r3, #16
 810af4a:	2b10      	cmp	r3, #16
 810af4c:	d122      	bne.n	810af94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 810af4e:	687b      	ldr	r3, [r7, #4]
 810af50:	681b      	ldr	r3, [r3, #0]
 810af52:	68db      	ldr	r3, [r3, #12]
 810af54:	f003 0310 	and.w	r3, r3, #16
 810af58:	2b10      	cmp	r3, #16
 810af5a:	d11b      	bne.n	810af94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 810af5c:	687b      	ldr	r3, [r7, #4]
 810af5e:	681b      	ldr	r3, [r3, #0]
 810af60:	f06f 0210 	mvn.w	r2, #16
 810af64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810af66:	687b      	ldr	r3, [r7, #4]
 810af68:	2208      	movs	r2, #8
 810af6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 810af6c:	687b      	ldr	r3, [r7, #4]
 810af6e:	681b      	ldr	r3, [r3, #0]
 810af70:	69db      	ldr	r3, [r3, #28]
 810af72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810af76:	2b00      	cmp	r3, #0
 810af78:	d003      	beq.n	810af82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810af7a:	6878      	ldr	r0, [r7, #4]
 810af7c:	f000 f887 	bl	810b08e <HAL_TIM_IC_CaptureCallback>
 810af80:	e005      	b.n	810af8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810af82:	6878      	ldr	r0, [r7, #4]
 810af84:	f000 f879 	bl	810b07a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 810af88:	6878      	ldr	r0, [r7, #4]
 810af8a:	f000 f88a 	bl	810b0a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810af8e:	687b      	ldr	r3, [r7, #4]
 810af90:	2200      	movs	r2, #0
 810af92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810af94:	687b      	ldr	r3, [r7, #4]
 810af96:	681b      	ldr	r3, [r3, #0]
 810af98:	691b      	ldr	r3, [r3, #16]
 810af9a:	f003 0301 	and.w	r3, r3, #1
 810af9e:	2b01      	cmp	r3, #1
 810afa0:	d10e      	bne.n	810afc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810afa2:	687b      	ldr	r3, [r7, #4]
 810afa4:	681b      	ldr	r3, [r3, #0]
 810afa6:	68db      	ldr	r3, [r3, #12]
 810afa8:	f003 0301 	and.w	r3, r3, #1
 810afac:	2b01      	cmp	r3, #1
 810afae:	d107      	bne.n	810afc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 810afb0:	687b      	ldr	r3, [r7, #4]
 810afb2:	681b      	ldr	r3, [r3, #0]
 810afb4:	f06f 0201 	mvn.w	r2, #1
 810afb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810afba:	6878      	ldr	r0, [r7, #4]
 810afbc:	f7fe f8cc 	bl	8109158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 810afc0:	687b      	ldr	r3, [r7, #4]
 810afc2:	681b      	ldr	r3, [r3, #0]
 810afc4:	691b      	ldr	r3, [r3, #16]
 810afc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810afca:	2b80      	cmp	r3, #128	; 0x80
 810afcc:	d10e      	bne.n	810afec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810afce:	687b      	ldr	r3, [r7, #4]
 810afd0:	681b      	ldr	r3, [r3, #0]
 810afd2:	68db      	ldr	r3, [r3, #12]
 810afd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810afd8:	2b80      	cmp	r3, #128	; 0x80
 810afda:	d107      	bne.n	810afec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 810afdc:	687b      	ldr	r3, [r7, #4]
 810afde:	681b      	ldr	r3, [r3, #0]
 810afe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 810afe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 810afe6:	6878      	ldr	r0, [r7, #4]
 810afe8:	f000 f914 	bl	810b214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 810afec:	687b      	ldr	r3, [r7, #4]
 810afee:	681b      	ldr	r3, [r3, #0]
 810aff0:	691b      	ldr	r3, [r3, #16]
 810aff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810aff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810affa:	d10e      	bne.n	810b01a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 810affc:	687b      	ldr	r3, [r7, #4]
 810affe:	681b      	ldr	r3, [r3, #0]
 810b000:	68db      	ldr	r3, [r3, #12]
 810b002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b006:	2b80      	cmp	r3, #128	; 0x80
 810b008:	d107      	bne.n	810b01a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 810b00a:	687b      	ldr	r3, [r7, #4]
 810b00c:	681b      	ldr	r3, [r3, #0]
 810b00e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 810b012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810b014:	6878      	ldr	r0, [r7, #4]
 810b016:	f000 f907 	bl	810b228 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 810b01a:	687b      	ldr	r3, [r7, #4]
 810b01c:	681b      	ldr	r3, [r3, #0]
 810b01e:	691b      	ldr	r3, [r3, #16]
 810b020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b024:	2b40      	cmp	r3, #64	; 0x40
 810b026:	d10e      	bne.n	810b046 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 810b028:	687b      	ldr	r3, [r7, #4]
 810b02a:	681b      	ldr	r3, [r3, #0]
 810b02c:	68db      	ldr	r3, [r3, #12]
 810b02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b032:	2b40      	cmp	r3, #64	; 0x40
 810b034:	d107      	bne.n	810b046 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 810b036:	687b      	ldr	r3, [r7, #4]
 810b038:	681b      	ldr	r3, [r3, #0]
 810b03a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 810b03e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 810b040:	6878      	ldr	r0, [r7, #4]
 810b042:	f000 f838 	bl	810b0b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810b046:	687b      	ldr	r3, [r7, #4]
 810b048:	681b      	ldr	r3, [r3, #0]
 810b04a:	691b      	ldr	r3, [r3, #16]
 810b04c:	f003 0320 	and.w	r3, r3, #32
 810b050:	2b20      	cmp	r3, #32
 810b052:	d10e      	bne.n	810b072 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810b054:	687b      	ldr	r3, [r7, #4]
 810b056:	681b      	ldr	r3, [r3, #0]
 810b058:	68db      	ldr	r3, [r3, #12]
 810b05a:	f003 0320 	and.w	r3, r3, #32
 810b05e:	2b20      	cmp	r3, #32
 810b060:	d107      	bne.n	810b072 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810b062:	687b      	ldr	r3, [r7, #4]
 810b064:	681b      	ldr	r3, [r3, #0]
 810b066:	f06f 0220 	mvn.w	r2, #32
 810b06a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 810b06c:	6878      	ldr	r0, [r7, #4]
 810b06e:	f000 f8c7 	bl	810b200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810b072:	bf00      	nop
 810b074:	3708      	adds	r7, #8
 810b076:	46bd      	mov	sp, r7
 810b078:	bd80      	pop	{r7, pc}

0810b07a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 810b07a:	b480      	push	{r7}
 810b07c:	b083      	sub	sp, #12
 810b07e:	af00      	add	r7, sp, #0
 810b080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 810b082:	bf00      	nop
 810b084:	370c      	adds	r7, #12
 810b086:	46bd      	mov	sp, r7
 810b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b08c:	4770      	bx	lr

0810b08e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 810b08e:	b480      	push	{r7}
 810b090:	b083      	sub	sp, #12
 810b092:	af00      	add	r7, sp, #0
 810b094:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810b096:	bf00      	nop
 810b098:	370c      	adds	r7, #12
 810b09a:	46bd      	mov	sp, r7
 810b09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0a0:	4770      	bx	lr

0810b0a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 810b0a2:	b480      	push	{r7}
 810b0a4:	b083      	sub	sp, #12
 810b0a6:	af00      	add	r7, sp, #0
 810b0a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 810b0aa:	bf00      	nop
 810b0ac:	370c      	adds	r7, #12
 810b0ae:	46bd      	mov	sp, r7
 810b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0b4:	4770      	bx	lr

0810b0b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810b0b6:	b480      	push	{r7}
 810b0b8:	b083      	sub	sp, #12
 810b0ba:	af00      	add	r7, sp, #0
 810b0bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 810b0be:	bf00      	nop
 810b0c0:	370c      	adds	r7, #12
 810b0c2:	46bd      	mov	sp, r7
 810b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b0c8:	4770      	bx	lr
	...

0810b0cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 810b0cc:	b480      	push	{r7}
 810b0ce:	b085      	sub	sp, #20
 810b0d0:	af00      	add	r7, sp, #0
 810b0d2:	6078      	str	r0, [r7, #4]
 810b0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810b0d6:	687b      	ldr	r3, [r7, #4]
 810b0d8:	681b      	ldr	r3, [r3, #0]
 810b0da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810b0dc:	687b      	ldr	r3, [r7, #4]
 810b0de:	4a40      	ldr	r2, [pc, #256]	; (810b1e0 <TIM_Base_SetConfig+0x114>)
 810b0e0:	4293      	cmp	r3, r2
 810b0e2:	d013      	beq.n	810b10c <TIM_Base_SetConfig+0x40>
 810b0e4:	687b      	ldr	r3, [r7, #4]
 810b0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b0ea:	d00f      	beq.n	810b10c <TIM_Base_SetConfig+0x40>
 810b0ec:	687b      	ldr	r3, [r7, #4]
 810b0ee:	4a3d      	ldr	r2, [pc, #244]	; (810b1e4 <TIM_Base_SetConfig+0x118>)
 810b0f0:	4293      	cmp	r3, r2
 810b0f2:	d00b      	beq.n	810b10c <TIM_Base_SetConfig+0x40>
 810b0f4:	687b      	ldr	r3, [r7, #4]
 810b0f6:	4a3c      	ldr	r2, [pc, #240]	; (810b1e8 <TIM_Base_SetConfig+0x11c>)
 810b0f8:	4293      	cmp	r3, r2
 810b0fa:	d007      	beq.n	810b10c <TIM_Base_SetConfig+0x40>
 810b0fc:	687b      	ldr	r3, [r7, #4]
 810b0fe:	4a3b      	ldr	r2, [pc, #236]	; (810b1ec <TIM_Base_SetConfig+0x120>)
 810b100:	4293      	cmp	r3, r2
 810b102:	d003      	beq.n	810b10c <TIM_Base_SetConfig+0x40>
 810b104:	687b      	ldr	r3, [r7, #4]
 810b106:	4a3a      	ldr	r2, [pc, #232]	; (810b1f0 <TIM_Base_SetConfig+0x124>)
 810b108:	4293      	cmp	r3, r2
 810b10a:	d108      	bne.n	810b11e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810b10c:	68fb      	ldr	r3, [r7, #12]
 810b10e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810b112:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810b114:	683b      	ldr	r3, [r7, #0]
 810b116:	685b      	ldr	r3, [r3, #4]
 810b118:	68fa      	ldr	r2, [r7, #12]
 810b11a:	4313      	orrs	r3, r2
 810b11c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810b11e:	687b      	ldr	r3, [r7, #4]
 810b120:	4a2f      	ldr	r2, [pc, #188]	; (810b1e0 <TIM_Base_SetConfig+0x114>)
 810b122:	4293      	cmp	r3, r2
 810b124:	d01f      	beq.n	810b166 <TIM_Base_SetConfig+0x9a>
 810b126:	687b      	ldr	r3, [r7, #4]
 810b128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810b12c:	d01b      	beq.n	810b166 <TIM_Base_SetConfig+0x9a>
 810b12e:	687b      	ldr	r3, [r7, #4]
 810b130:	4a2c      	ldr	r2, [pc, #176]	; (810b1e4 <TIM_Base_SetConfig+0x118>)
 810b132:	4293      	cmp	r3, r2
 810b134:	d017      	beq.n	810b166 <TIM_Base_SetConfig+0x9a>
 810b136:	687b      	ldr	r3, [r7, #4]
 810b138:	4a2b      	ldr	r2, [pc, #172]	; (810b1e8 <TIM_Base_SetConfig+0x11c>)
 810b13a:	4293      	cmp	r3, r2
 810b13c:	d013      	beq.n	810b166 <TIM_Base_SetConfig+0x9a>
 810b13e:	687b      	ldr	r3, [r7, #4]
 810b140:	4a2a      	ldr	r2, [pc, #168]	; (810b1ec <TIM_Base_SetConfig+0x120>)
 810b142:	4293      	cmp	r3, r2
 810b144:	d00f      	beq.n	810b166 <TIM_Base_SetConfig+0x9a>
 810b146:	687b      	ldr	r3, [r7, #4]
 810b148:	4a29      	ldr	r2, [pc, #164]	; (810b1f0 <TIM_Base_SetConfig+0x124>)
 810b14a:	4293      	cmp	r3, r2
 810b14c:	d00b      	beq.n	810b166 <TIM_Base_SetConfig+0x9a>
 810b14e:	687b      	ldr	r3, [r7, #4]
 810b150:	4a28      	ldr	r2, [pc, #160]	; (810b1f4 <TIM_Base_SetConfig+0x128>)
 810b152:	4293      	cmp	r3, r2
 810b154:	d007      	beq.n	810b166 <TIM_Base_SetConfig+0x9a>
 810b156:	687b      	ldr	r3, [r7, #4]
 810b158:	4a27      	ldr	r2, [pc, #156]	; (810b1f8 <TIM_Base_SetConfig+0x12c>)
 810b15a:	4293      	cmp	r3, r2
 810b15c:	d003      	beq.n	810b166 <TIM_Base_SetConfig+0x9a>
 810b15e:	687b      	ldr	r3, [r7, #4]
 810b160:	4a26      	ldr	r2, [pc, #152]	; (810b1fc <TIM_Base_SetConfig+0x130>)
 810b162:	4293      	cmp	r3, r2
 810b164:	d108      	bne.n	810b178 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810b166:	68fb      	ldr	r3, [r7, #12]
 810b168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810b16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810b16e:	683b      	ldr	r3, [r7, #0]
 810b170:	68db      	ldr	r3, [r3, #12]
 810b172:	68fa      	ldr	r2, [r7, #12]
 810b174:	4313      	orrs	r3, r2
 810b176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810b178:	68fb      	ldr	r3, [r7, #12]
 810b17a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 810b17e:	683b      	ldr	r3, [r7, #0]
 810b180:	695b      	ldr	r3, [r3, #20]
 810b182:	4313      	orrs	r3, r2
 810b184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 810b186:	687b      	ldr	r3, [r7, #4]
 810b188:	68fa      	ldr	r2, [r7, #12]
 810b18a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810b18c:	683b      	ldr	r3, [r7, #0]
 810b18e:	689a      	ldr	r2, [r3, #8]
 810b190:	687b      	ldr	r3, [r7, #4]
 810b192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810b194:	683b      	ldr	r3, [r7, #0]
 810b196:	681a      	ldr	r2, [r3, #0]
 810b198:	687b      	ldr	r3, [r7, #4]
 810b19a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810b19c:	687b      	ldr	r3, [r7, #4]
 810b19e:	4a10      	ldr	r2, [pc, #64]	; (810b1e0 <TIM_Base_SetConfig+0x114>)
 810b1a0:	4293      	cmp	r3, r2
 810b1a2:	d00f      	beq.n	810b1c4 <TIM_Base_SetConfig+0xf8>
 810b1a4:	687b      	ldr	r3, [r7, #4]
 810b1a6:	4a12      	ldr	r2, [pc, #72]	; (810b1f0 <TIM_Base_SetConfig+0x124>)
 810b1a8:	4293      	cmp	r3, r2
 810b1aa:	d00b      	beq.n	810b1c4 <TIM_Base_SetConfig+0xf8>
 810b1ac:	687b      	ldr	r3, [r7, #4]
 810b1ae:	4a11      	ldr	r2, [pc, #68]	; (810b1f4 <TIM_Base_SetConfig+0x128>)
 810b1b0:	4293      	cmp	r3, r2
 810b1b2:	d007      	beq.n	810b1c4 <TIM_Base_SetConfig+0xf8>
 810b1b4:	687b      	ldr	r3, [r7, #4]
 810b1b6:	4a10      	ldr	r2, [pc, #64]	; (810b1f8 <TIM_Base_SetConfig+0x12c>)
 810b1b8:	4293      	cmp	r3, r2
 810b1ba:	d003      	beq.n	810b1c4 <TIM_Base_SetConfig+0xf8>
 810b1bc:	687b      	ldr	r3, [r7, #4]
 810b1be:	4a0f      	ldr	r2, [pc, #60]	; (810b1fc <TIM_Base_SetConfig+0x130>)
 810b1c0:	4293      	cmp	r3, r2
 810b1c2:	d103      	bne.n	810b1cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810b1c4:	683b      	ldr	r3, [r7, #0]
 810b1c6:	691a      	ldr	r2, [r3, #16]
 810b1c8:	687b      	ldr	r3, [r7, #4]
 810b1ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810b1cc:	687b      	ldr	r3, [r7, #4]
 810b1ce:	2201      	movs	r2, #1
 810b1d0:	615a      	str	r2, [r3, #20]
}
 810b1d2:	bf00      	nop
 810b1d4:	3714      	adds	r7, #20
 810b1d6:	46bd      	mov	sp, r7
 810b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b1dc:	4770      	bx	lr
 810b1de:	bf00      	nop
 810b1e0:	40010000 	.word	0x40010000
 810b1e4:	40000400 	.word	0x40000400
 810b1e8:	40000800 	.word	0x40000800
 810b1ec:	40000c00 	.word	0x40000c00
 810b1f0:	40010400 	.word	0x40010400
 810b1f4:	40014000 	.word	0x40014000
 810b1f8:	40014400 	.word	0x40014400
 810b1fc:	40014800 	.word	0x40014800

0810b200 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 810b200:	b480      	push	{r7}
 810b202:	b083      	sub	sp, #12
 810b204:	af00      	add	r7, sp, #0
 810b206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810b208:	bf00      	nop
 810b20a:	370c      	adds	r7, #12
 810b20c:	46bd      	mov	sp, r7
 810b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b212:	4770      	bx	lr

0810b214 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 810b214:	b480      	push	{r7}
 810b216:	b083      	sub	sp, #12
 810b218:	af00      	add	r7, sp, #0
 810b21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 810b21c:	bf00      	nop
 810b21e:	370c      	adds	r7, #12
 810b220:	46bd      	mov	sp, r7
 810b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b226:	4770      	bx	lr

0810b228 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810b228:	b480      	push	{r7}
 810b22a:	b083      	sub	sp, #12
 810b22c:	af00      	add	r7, sp, #0
 810b22e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810b230:	bf00      	nop
 810b232:	370c      	adds	r7, #12
 810b234:	46bd      	mov	sp, r7
 810b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b23a:	4770      	bx	lr

0810b23c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810b23c:	b580      	push	{r7, lr}
 810b23e:	b084      	sub	sp, #16
 810b240:	af00      	add	r7, sp, #0
 810b242:	60f8      	str	r0, [r7, #12]
 810b244:	60b9      	str	r1, [r7, #8]
 810b246:	4613      	mov	r3, r2
 810b248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810b24a:	68fb      	ldr	r3, [r7, #12]
 810b24c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810b250:	2b20      	cmp	r3, #32
 810b252:	d168      	bne.n	810b326 <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 810b254:	68bb      	ldr	r3, [r7, #8]
 810b256:	2b00      	cmp	r3, #0
 810b258:	d002      	beq.n	810b260 <HAL_UART_Transmit_DMA+0x24>
 810b25a:	88fb      	ldrh	r3, [r7, #6]
 810b25c:	2b00      	cmp	r3, #0
 810b25e:	d101      	bne.n	810b264 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 810b260:	2301      	movs	r3, #1
 810b262:	e061      	b.n	810b328 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 810b264:	68fb      	ldr	r3, [r7, #12]
 810b266:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 810b26a:	2b01      	cmp	r3, #1
 810b26c:	d101      	bne.n	810b272 <HAL_UART_Transmit_DMA+0x36>
 810b26e:	2302      	movs	r3, #2
 810b270:	e05a      	b.n	810b328 <HAL_UART_Transmit_DMA+0xec>
 810b272:	68fb      	ldr	r3, [r7, #12]
 810b274:	2201      	movs	r2, #1
 810b276:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 810b27a:	68fb      	ldr	r3, [r7, #12]
 810b27c:	68ba      	ldr	r2, [r7, #8]
 810b27e:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 810b280:	68fb      	ldr	r3, [r7, #12]
 810b282:	88fa      	ldrh	r2, [r7, #6]
 810b284:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 810b288:	68fb      	ldr	r3, [r7, #12]
 810b28a:	88fa      	ldrh	r2, [r7, #6]
 810b28c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b290:	68fb      	ldr	r3, [r7, #12]
 810b292:	2200      	movs	r2, #0
 810b294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810b298:	68fb      	ldr	r3, [r7, #12]
 810b29a:	2221      	movs	r2, #33	; 0x21
 810b29c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 810b2a0:	68fb      	ldr	r3, [r7, #12]
 810b2a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b2a4:	2b00      	cmp	r3, #0
 810b2a6:	d02c      	beq.n	810b302 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 810b2a8:	68fb      	ldr	r3, [r7, #12]
 810b2aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b2ac:	4a20      	ldr	r2, [pc, #128]	; (810b330 <HAL_UART_Transmit_DMA+0xf4>)
 810b2ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 810b2b0:	68fb      	ldr	r3, [r7, #12]
 810b2b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b2b4:	4a1f      	ldr	r2, [pc, #124]	; (810b334 <HAL_UART_Transmit_DMA+0xf8>)
 810b2b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 810b2b8:	68fb      	ldr	r3, [r7, #12]
 810b2ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b2bc:	4a1e      	ldr	r2, [pc, #120]	; (810b338 <HAL_UART_Transmit_DMA+0xfc>)
 810b2be:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 810b2c0:	68fb      	ldr	r3, [r7, #12]
 810b2c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810b2c4:	2200      	movs	r2, #0
 810b2c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 810b2c8:	68fb      	ldr	r3, [r7, #12]
 810b2ca:	6f58      	ldr	r0, [r3, #116]	; 0x74
 810b2cc:	68fb      	ldr	r3, [r7, #12]
 810b2ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810b2d0:	4619      	mov	r1, r3
 810b2d2:	68fb      	ldr	r3, [r7, #12]
 810b2d4:	681b      	ldr	r3, [r3, #0]
 810b2d6:	3328      	adds	r3, #40	; 0x28
 810b2d8:	461a      	mov	r2, r3
 810b2da:	88fb      	ldrh	r3, [r7, #6]
 810b2dc:	f7fe fc06 	bl	8109aec <HAL_DMA_Start_IT>
 810b2e0:	4603      	mov	r3, r0
 810b2e2:	2b00      	cmp	r3, #0
 810b2e4:	d00d      	beq.n	810b302 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 810b2e6:	68fb      	ldr	r3, [r7, #12]
 810b2e8:	2210      	movs	r2, #16
 810b2ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 810b2ee:	68fb      	ldr	r3, [r7, #12]
 810b2f0:	2200      	movs	r2, #0
 810b2f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 810b2f6:	68fb      	ldr	r3, [r7, #12]
 810b2f8:	2220      	movs	r2, #32
 810b2fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 810b2fe:	2301      	movs	r3, #1
 810b300:	e012      	b.n	810b328 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 810b302:	68fb      	ldr	r3, [r7, #12]
 810b304:	681b      	ldr	r3, [r3, #0]
 810b306:	2240      	movs	r2, #64	; 0x40
 810b308:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 810b30a:	68fb      	ldr	r3, [r7, #12]
 810b30c:	2200      	movs	r2, #0
 810b30e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810b312:	68fb      	ldr	r3, [r7, #12]
 810b314:	681b      	ldr	r3, [r3, #0]
 810b316:	689a      	ldr	r2, [r3, #8]
 810b318:	68fb      	ldr	r3, [r7, #12]
 810b31a:	681b      	ldr	r3, [r3, #0]
 810b31c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 810b320:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 810b322:	2300      	movs	r3, #0
 810b324:	e000      	b.n	810b328 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 810b326:	2302      	movs	r3, #2
  }
}
 810b328:	4618      	mov	r0, r3
 810b32a:	3710      	adds	r7, #16
 810b32c:	46bd      	mov	sp, r7
 810b32e:	bd80      	pop	{r7, pc}
 810b330:	0810b3e7 	.word	0x0810b3e7
 810b334:	0810b437 	.word	0x0810b437
 810b338:	0810b453 	.word	0x0810b453

0810b33c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810b33c:	b480      	push	{r7}
 810b33e:	b083      	sub	sp, #12
 810b340:	af00      	add	r7, sp, #0
 810b342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 810b344:	bf00      	nop
 810b346:	370c      	adds	r7, #12
 810b348:	46bd      	mov	sp, r7
 810b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b34e:	4770      	bx	lr

0810b350 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810b350:	b480      	push	{r7}
 810b352:	b083      	sub	sp, #12
 810b354:	af00      	add	r7, sp, #0
 810b356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810b358:	bf00      	nop
 810b35a:	370c      	adds	r7, #12
 810b35c:	46bd      	mov	sp, r7
 810b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b362:	4770      	bx	lr

0810b364 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810b364:	b480      	push	{r7}
 810b366:	b083      	sub	sp, #12
 810b368:	af00      	add	r7, sp, #0
 810b36a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810b36c:	687b      	ldr	r3, [r7, #4]
 810b36e:	681b      	ldr	r3, [r3, #0]
 810b370:	681a      	ldr	r2, [r3, #0]
 810b372:	687b      	ldr	r3, [r7, #4]
 810b374:	681b      	ldr	r3, [r3, #0]
 810b376:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 810b37a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810b37c:	687b      	ldr	r3, [r7, #4]
 810b37e:	681b      	ldr	r3, [r3, #0]
 810b380:	689a      	ldr	r2, [r3, #8]
 810b382:	687b      	ldr	r3, [r7, #4]
 810b384:	681b      	ldr	r3, [r3, #0]
 810b386:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 810b38a:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810b38c:	687b      	ldr	r3, [r7, #4]
 810b38e:	2220      	movs	r2, #32
 810b390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 810b394:	bf00      	nop
 810b396:	370c      	adds	r7, #12
 810b398:	46bd      	mov	sp, r7
 810b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b39e:	4770      	bx	lr

0810b3a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810b3a0:	b480      	push	{r7}
 810b3a2:	b083      	sub	sp, #12
 810b3a4:	af00      	add	r7, sp, #0
 810b3a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b3a8:	687b      	ldr	r3, [r7, #4]
 810b3aa:	681b      	ldr	r3, [r3, #0]
 810b3ac:	681a      	ldr	r2, [r3, #0]
 810b3ae:	687b      	ldr	r3, [r7, #4]
 810b3b0:	681b      	ldr	r3, [r3, #0]
 810b3b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 810b3b6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b3b8:	687b      	ldr	r3, [r7, #4]
 810b3ba:	681b      	ldr	r3, [r3, #0]
 810b3bc:	689b      	ldr	r3, [r3, #8]
 810b3be:	687a      	ldr	r2, [r7, #4]
 810b3c0:	6812      	ldr	r2, [r2, #0]
 810b3c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810b3c6:	f023 0301 	bic.w	r3, r3, #1
 810b3ca:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810b3cc:	687b      	ldr	r3, [r7, #4]
 810b3ce:	2220      	movs	r2, #32
 810b3d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810b3d4:	687b      	ldr	r3, [r7, #4]
 810b3d6:	2200      	movs	r2, #0
 810b3d8:	66da      	str	r2, [r3, #108]	; 0x6c
}
 810b3da:	bf00      	nop
 810b3dc:	370c      	adds	r7, #12
 810b3de:	46bd      	mov	sp, r7
 810b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b3e4:	4770      	bx	lr

0810b3e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 810b3e6:	b580      	push	{r7, lr}
 810b3e8:	b084      	sub	sp, #16
 810b3ea:	af00      	add	r7, sp, #0
 810b3ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b3ee:	687b      	ldr	r3, [r7, #4]
 810b3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b3f2:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810b3f4:	687b      	ldr	r3, [r7, #4]
 810b3f6:	69db      	ldr	r3, [r3, #28]
 810b3f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810b3fc:	d014      	beq.n	810b428 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 810b3fe:	68fb      	ldr	r3, [r7, #12]
 810b400:	2200      	movs	r2, #0
 810b402:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 810b406:	68fb      	ldr	r3, [r7, #12]
 810b408:	681b      	ldr	r3, [r3, #0]
 810b40a:	689a      	ldr	r2, [r3, #8]
 810b40c:	68fb      	ldr	r3, [r7, #12]
 810b40e:	681b      	ldr	r3, [r3, #0]
 810b410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810b414:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810b416:	68fb      	ldr	r3, [r7, #12]
 810b418:	681b      	ldr	r3, [r3, #0]
 810b41a:	681a      	ldr	r2, [r3, #0]
 810b41c:	68fb      	ldr	r3, [r7, #12]
 810b41e:	681b      	ldr	r3, [r3, #0]
 810b420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 810b424:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810b426:	e002      	b.n	810b42e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 810b428:	68f8      	ldr	r0, [r7, #12]
 810b42a:	f774 ffd1 	bl	80803d0 <HAL_UART_TxCpltCallback>
}
 810b42e:	bf00      	nop
 810b430:	3710      	adds	r7, #16
 810b432:	46bd      	mov	sp, r7
 810b434:	bd80      	pop	{r7, pc}

0810b436 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810b436:	b580      	push	{r7, lr}
 810b438:	b084      	sub	sp, #16
 810b43a:	af00      	add	r7, sp, #0
 810b43c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b43e:	687b      	ldr	r3, [r7, #4]
 810b440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b442:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 810b444:	68f8      	ldr	r0, [r7, #12]
 810b446:	f7ff ff79 	bl	810b33c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b44a:	bf00      	nop
 810b44c:	3710      	adds	r7, #16
 810b44e:	46bd      	mov	sp, r7
 810b450:	bd80      	pop	{r7, pc}

0810b452 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810b452:	b580      	push	{r7, lr}
 810b454:	b086      	sub	sp, #24
 810b456:	af00      	add	r7, sp, #0
 810b458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b45a:	687b      	ldr	r3, [r7, #4]
 810b45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810b45e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810b460:	697b      	ldr	r3, [r7, #20]
 810b462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810b466:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810b468:	697b      	ldr	r3, [r7, #20]
 810b46a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810b46e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810b470:	697b      	ldr	r3, [r7, #20]
 810b472:	681b      	ldr	r3, [r3, #0]
 810b474:	689b      	ldr	r3, [r3, #8]
 810b476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810b47a:	2b80      	cmp	r3, #128	; 0x80
 810b47c:	d109      	bne.n	810b492 <UART_DMAError+0x40>
 810b47e:	693b      	ldr	r3, [r7, #16]
 810b480:	2b21      	cmp	r3, #33	; 0x21
 810b482:	d106      	bne.n	810b492 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810b484:	697b      	ldr	r3, [r7, #20]
 810b486:	2200      	movs	r2, #0
 810b488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 810b48c:	6978      	ldr	r0, [r7, #20]
 810b48e:	f7ff ff69 	bl	810b364 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810b492:	697b      	ldr	r3, [r7, #20]
 810b494:	681b      	ldr	r3, [r3, #0]
 810b496:	689b      	ldr	r3, [r3, #8]
 810b498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810b49c:	2b40      	cmp	r3, #64	; 0x40
 810b49e:	d109      	bne.n	810b4b4 <UART_DMAError+0x62>
 810b4a0:	68fb      	ldr	r3, [r7, #12]
 810b4a2:	2b22      	cmp	r3, #34	; 0x22
 810b4a4:	d106      	bne.n	810b4b4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810b4a6:	697b      	ldr	r3, [r7, #20]
 810b4a8:	2200      	movs	r2, #0
 810b4aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 810b4ae:	6978      	ldr	r0, [r7, #20]
 810b4b0:	f7ff ff76 	bl	810b3a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810b4b4:	697b      	ldr	r3, [r7, #20]
 810b4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810b4ba:	f043 0210 	orr.w	r2, r3, #16
 810b4be:	697b      	ldr	r3, [r7, #20]
 810b4c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810b4c4:	6978      	ldr	r0, [r7, #20]
 810b4c6:	f7ff ff43 	bl	810b350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b4ca:	bf00      	nop
 810b4cc:	3718      	adds	r7, #24
 810b4ce:	46bd      	mov	sp, r7
 810b4d0:	bd80      	pop	{r7, pc}
	...

0810b4d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 810b4d4:	b480      	push	{r7}
 810b4d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 810b4d8:	4b0b      	ldr	r3, [pc, #44]	; (810b508 <SystemInit+0x34>)
 810b4da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810b4de:	4a0a      	ldr	r2, [pc, #40]	; (810b508 <SystemInit+0x34>)
 810b4e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 810b4e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 810b4e8:	4b07      	ldr	r3, [pc, #28]	; (810b508 <SystemInit+0x34>)
 810b4ea:	691b      	ldr	r3, [r3, #16]
 810b4ec:	4a06      	ldr	r2, [pc, #24]	; (810b508 <SystemInit+0x34>)
 810b4ee:	f043 0310 	orr.w	r3, r3, #16
 810b4f2:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 810b4f4:	4b04      	ldr	r3, [pc, #16]	; (810b508 <SystemInit+0x34>)
 810b4f6:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 810b4fa:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 810b4fc:	bf00      	nop
 810b4fe:	46bd      	mov	sp, r7
 810b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b504:	4770      	bx	lr
 810b506:	bf00      	nop
 810b508:	e000ed00 	.word	0xe000ed00

0810b50c <_Znwj>:
  * @param[in]  size_t size
  *
  * @return void *
********************************************************************************/
void * operator new(size_t size) noexcept
{
 810b50c:	b580      	push	{r7, lr}
 810b50e:	b084      	sub	sp, #16
 810b510:	af00      	add	r7, sp, #0
 810b512:	6078      	str	r0, [r7, #4]
	void *ptr;

	if ( IS_NOT( size ) )
 810b514:	687b      	ldr	r3, [r7, #4]
 810b516:	2b00      	cmp	r3, #0
 810b518:	d102      	bne.n	810b520 <_Znwj+0x14>
	{
		++size;
 810b51a:	687b      	ldr	r3, [r7, #4]
 810b51c:	3301      	adds	r3, #1
 810b51e:	607b      	str	r3, [r7, #4]
	}

	ptr = malloc_internal(size);
 810b520:	6878      	ldr	r0, [r7, #4]
 810b522:	f7fd ff47 	bl	81093b4 <malloc_internal>
 810b526:	4603      	mov	r3, r0
 810b528:	60fb      	str	r3, [r7, #12]

	return ptr;
 810b52a:	68fb      	ldr	r3, [r7, #12]
}
 810b52c:	4618      	mov	r0, r3
 810b52e:	3710      	adds	r7, #16
 810b530:	46bd      	mov	sp, r7
 810b532:	bd80      	pop	{r7, pc}

0810b534 <_ZdlPvj>:
  * @param[in]  size_t size
	*
  * @return none
********************************************************************************/
void operator delete(void* ptr, size_t size) noexcept
{
 810b534:	b580      	push	{r7, lr}
 810b536:	b082      	sub	sp, #8
 810b538:	af00      	add	r7, sp, #0
 810b53a:	6078      	str	r0, [r7, #4]
 810b53c:	6039      	str	r1, [r7, #0]
	free_internal(ptr);
 810b53e:	6878      	ldr	r0, [r7, #4]
 810b540:	f7fd ffdb 	bl	81094fa <free_internal>
	__SUPRESS_UNUSED_VAR(size);
}
 810b544:	bf00      	nop
 810b546:	3708      	adds	r7, #8
 810b548:	46bd      	mov	sp, r7
 810b54a:	bd80      	pop	{r7, pc}

0810b54c <_ZN4GPIOC1EPv>:
********************************************************************************/
class GPIO
{
  void * address;
  public:
  GPIO(void * addr) { address = addr; }
 810b54c:	b480      	push	{r7}
 810b54e:	b083      	sub	sp, #12
 810b550:	af00      	add	r7, sp, #0
 810b552:	6078      	str	r0, [r7, #4]
 810b554:	6039      	str	r1, [r7, #0]
 810b556:	687b      	ldr	r3, [r7, #4]
 810b558:	683a      	ldr	r2, [r7, #0]
 810b55a:	601a      	str	r2, [r3, #0]
 810b55c:	687b      	ldr	r3, [r7, #4]
 810b55e:	4618      	mov	r0, r3
 810b560:	370c      	adds	r7, #12
 810b562:	46bd      	mov	sp, r7
 810b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b568:	4770      	bx	lr

0810b56a <_ZL12read_uleb128PKhPm>:
 810b56a:	b530      	push	{r4, r5, lr}
 810b56c:	2300      	movs	r3, #0
 810b56e:	461a      	mov	r2, r3
 810b570:	f810 5b01 	ldrb.w	r5, [r0], #1
 810b574:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 810b578:	4094      	lsls	r4, r2
 810b57a:	4323      	orrs	r3, r4
 810b57c:	062c      	lsls	r4, r5, #24
 810b57e:	f102 0207 	add.w	r2, r2, #7
 810b582:	d4f5      	bmi.n	810b570 <_ZL12read_uleb128PKhPm+0x6>
 810b584:	600b      	str	r3, [r1, #0]
 810b586:	bd30      	pop	{r4, r5, pc}

0810b588 <_ZL12read_sleb128PKhPl>:
 810b588:	b530      	push	{r4, r5, lr}
 810b58a:	2300      	movs	r3, #0
 810b58c:	461a      	mov	r2, r3
 810b58e:	f810 4b01 	ldrb.w	r4, [r0], #1
 810b592:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 810b596:	4095      	lsls	r5, r2
 810b598:	432b      	orrs	r3, r5
 810b59a:	0625      	lsls	r5, r4, #24
 810b59c:	f102 0207 	add.w	r2, r2, #7
 810b5a0:	d4f5      	bmi.n	810b58e <_ZL12read_sleb128PKhPl+0x6>
 810b5a2:	2a1f      	cmp	r2, #31
 810b5a4:	d806      	bhi.n	810b5b4 <_ZL12read_sleb128PKhPl+0x2c>
 810b5a6:	0664      	lsls	r4, r4, #25
 810b5a8:	bf42      	ittt	mi
 810b5aa:	f04f 34ff 	movmi.w	r4, #4294967295
 810b5ae:	fa04 f202 	lslmi.w	r2, r4, r2
 810b5b2:	4313      	orrmi	r3, r2
 810b5b4:	600b      	str	r3, [r1, #0]
 810b5b6:	bd30      	pop	{r4, r5, pc}

0810b5b8 <_ZL28read_encoded_value_with_basehjPKhPj>:
 810b5b8:	2850      	cmp	r0, #80	; 0x50
 810b5ba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 810b5be:	4606      	mov	r6, r0
 810b5c0:	4688      	mov	r8, r1
 810b5c2:	4615      	mov	r5, r2
 810b5c4:	461f      	mov	r7, r3
 810b5c6:	d108      	bne.n	810b5da <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 810b5c8:	3203      	adds	r2, #3
 810b5ca:	f022 0003 	bic.w	r0, r2, #3
 810b5ce:	f850 4b04 	ldr.w	r4, [r0], #4
 810b5d2:	603c      	str	r4, [r7, #0]
 810b5d4:	b002      	add	sp, #8
 810b5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810b5da:	f000 030f 	and.w	r3, r0, #15
 810b5de:	2b0c      	cmp	r3, #12
 810b5e0:	d82e      	bhi.n	810b640 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 810b5e2:	e8df f003 	tbb	[pc, r3]
 810b5e6:	0725      	.short	0x0725
 810b5e8:	2d29251d 	.word	0x2d29251d
 810b5ec:	182d2d2d 	.word	0x182d2d2d
 810b5f0:	2521      	.short	0x2521
 810b5f2:	29          	.byte	0x29
 810b5f3:	00          	.byte	0x00
 810b5f4:	a901      	add	r1, sp, #4
 810b5f6:	4628      	mov	r0, r5
 810b5f8:	f7ff ffb7 	bl	810b56a <_ZL12read_uleb128PKhPm>
 810b5fc:	9c01      	ldr	r4, [sp, #4]
 810b5fe:	2c00      	cmp	r4, #0
 810b600:	d0e7      	beq.n	810b5d2 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 810b602:	f006 0370 	and.w	r3, r6, #112	; 0x70
 810b606:	2b10      	cmp	r3, #16
 810b608:	bf08      	it	eq
 810b60a:	46a8      	moveq	r8, r5
 810b60c:	4444      	add	r4, r8
 810b60e:	0633      	lsls	r3, r6, #24
 810b610:	bf48      	it	mi
 810b612:	6824      	ldrmi	r4, [r4, #0]
 810b614:	e7dd      	b.n	810b5d2 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 810b616:	a901      	add	r1, sp, #4
 810b618:	4628      	mov	r0, r5
 810b61a:	f7ff ffb5 	bl	810b588 <_ZL12read_sleb128PKhPl>
 810b61e:	e7ed      	b.n	810b5fc <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 810b620:	4628      	mov	r0, r5
 810b622:	f830 4b02 	ldrh.w	r4, [r0], #2
 810b626:	e7ea      	b.n	810b5fe <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 810b628:	4628      	mov	r0, r5
 810b62a:	f930 4b02 	ldrsh.w	r4, [r0], #2
 810b62e:	e7e6      	b.n	810b5fe <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 810b630:	4628      	mov	r0, r5
 810b632:	f850 4b04 	ldr.w	r4, [r0], #4
 810b636:	e7e2      	b.n	810b5fe <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 810b638:	4628      	mov	r0, r5
 810b63a:	f850 4b08 	ldr.w	r4, [r0], #8
 810b63e:	e7de      	b.n	810b5fe <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 810b640:	f000 fc68 	bl	810bf14 <abort>

0810b644 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 810b644:	b508      	push	{r3, lr}
 810b646:	4603      	mov	r3, r0
 810b648:	2bff      	cmp	r3, #255	; 0xff
 810b64a:	4608      	mov	r0, r1
 810b64c:	d010      	beq.n	810b670 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 810b64e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 810b652:	2a30      	cmp	r2, #48	; 0x30
 810b654:	d012      	beq.n	810b67c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 810b656:	d807      	bhi.n	810b668 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 810b658:	2a20      	cmp	r2, #32
 810b65a:	d00b      	beq.n	810b674 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 810b65c:	d802      	bhi.n	810b664 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 810b65e:	f013 0f60 	tst.w	r3, #96	; 0x60
 810b662:	d005      	beq.n	810b670 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 810b664:	f000 fc56 	bl	810bf14 <abort>
 810b668:	2a40      	cmp	r2, #64	; 0x40
 810b66a:	d00b      	beq.n	810b684 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 810b66c:	2a50      	cmp	r2, #80	; 0x50
 810b66e:	d1f9      	bne.n	810b664 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 810b670:	2000      	movs	r0, #0
 810b672:	bd08      	pop	{r3, pc}
 810b674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810b678:	f000 bcbf 	b.w	810bffa <_Unwind_GetTextRelBase>
 810b67c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810b680:	f000 bcb8 	b.w	810bff4 <_Unwind_GetDataRelBase>
 810b684:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 810b688:	f7fd bc26 	b.w	8108ed8 <_Unwind_GetRegionStart>

0810b68c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 810b68c:	b513      	push	{r0, r1, r4, lr}
 810b68e:	460c      	mov	r4, r1
 810b690:	4601      	mov	r1, r0
 810b692:	4620      	mov	r0, r4
 810b694:	e9cd 3200 	strd	r3, r2, [sp]
 810b698:	f7ff ffd4 	bl	810b644 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 810b69c:	e9dd 3200 	ldrd	r3, r2, [sp]
 810b6a0:	4601      	mov	r1, r0
 810b6a2:	4620      	mov	r0, r4
 810b6a4:	b002      	add	sp, #8
 810b6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810b6aa:	f7ff bf85 	b.w	810b5b8 <_ZL28read_encoded_value_with_basehjPKhPj>

0810b6ae <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 810b6ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810b6b0:	460c      	mov	r4, r1
 810b6b2:	4615      	mov	r5, r2
 810b6b4:	4606      	mov	r6, r0
 810b6b6:	b328      	cbz	r0, 810b704 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 810b6b8:	f7fd fc0e 	bl	8108ed8 <_Unwind_GetRegionStart>
 810b6bc:	4603      	mov	r3, r0
 810b6be:	4620      	mov	r0, r4
 810b6c0:	602b      	str	r3, [r5, #0]
 810b6c2:	f810 1b01 	ldrb.w	r1, [r0], #1
 810b6c6:	29ff      	cmp	r1, #255	; 0xff
 810b6c8:	d01e      	beq.n	810b708 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 810b6ca:	4602      	mov	r2, r0
 810b6cc:	1d2b      	adds	r3, r5, #4
 810b6ce:	4630      	mov	r0, r6
 810b6d0:	f7ff ffdc 	bl	810b68c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 810b6d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 810b6d8:	752b      	strb	r3, [r5, #20]
 810b6da:	2bff      	cmp	r3, #255	; 0xff
 810b6dc:	d016      	beq.n	810b70c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 810b6de:	2310      	movs	r3, #16
 810b6e0:	752b      	strb	r3, [r5, #20]
 810b6e2:	a901      	add	r1, sp, #4
 810b6e4:	f7ff ff41 	bl	810b56a <_ZL12read_uleb128PKhPm>
 810b6e8:	9b01      	ldr	r3, [sp, #4]
 810b6ea:	4403      	add	r3, r0
 810b6ec:	60eb      	str	r3, [r5, #12]
 810b6ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 810b6f2:	756b      	strb	r3, [r5, #21]
 810b6f4:	a901      	add	r1, sp, #4
 810b6f6:	f7ff ff38 	bl	810b56a <_ZL12read_uleb128PKhPm>
 810b6fa:	9b01      	ldr	r3, [sp, #4]
 810b6fc:	4403      	add	r3, r0
 810b6fe:	612b      	str	r3, [r5, #16]
 810b700:	b002      	add	sp, #8
 810b702:	bd70      	pop	{r4, r5, r6, pc}
 810b704:	4603      	mov	r3, r0
 810b706:	e7da      	b.n	810b6be <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 810b708:	606b      	str	r3, [r5, #4]
 810b70a:	e7e3      	b.n	810b6d4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 810b70c:	2300      	movs	r3, #0
 810b70e:	e7ed      	b.n	810b6ec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

0810b710 <_Unwind_GetGR>:
 810b710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810b712:	ab03      	add	r3, sp, #12
 810b714:	9300      	str	r3, [sp, #0]
 810b716:	2300      	movs	r3, #0
 810b718:	460a      	mov	r2, r1
 810b71a:	4619      	mov	r1, r3
 810b71c:	f7fc fe5c 	bl	81083d8 <_Unwind_VRS_Get>
 810b720:	9803      	ldr	r0, [sp, #12]
 810b722:	b005      	add	sp, #20
 810b724:	f85d fb04 	ldr.w	pc, [sp], #4

0810b728 <__gxx_personality_v0>:
 810b728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810b72c:	b091      	sub	sp, #68	; 0x44
 810b72e:	2300      	movs	r3, #0
 810b730:	9305      	str	r3, [sp, #20]
 810b732:	f000 0303 	and.w	r3, r0, #3
 810b736:	2b01      	cmp	r3, #1
 810b738:	4606      	mov	r6, r0
 810b73a:	460c      	mov	r4, r1
 810b73c:	4617      	mov	r7, r2
 810b73e:	d00e      	beq.n	810b75e <__gxx_personality_v0+0x36>
 810b740:	2b02      	cmp	r3, #2
 810b742:	d003      	beq.n	810b74c <__gxx_personality_v0+0x24>
 810b744:	2b00      	cmp	r3, #0
 810b746:	d13b      	bne.n	810b7c0 <__gxx_personality_v0+0x98>
 810b748:	0701      	lsls	r1, r0, #28
 810b74a:	d53b      	bpl.n	810b7c4 <__gxx_personality_v0+0x9c>
 810b74c:	4639      	mov	r1, r7
 810b74e:	4620      	mov	r0, r4
 810b750:	f7fd fbac 	bl	8108eac <__gnu_unwind_frame>
 810b754:	b390      	cbz	r0, 810b7bc <__gxx_personality_v0+0x94>
 810b756:	2009      	movs	r0, #9
 810b758:	b011      	add	sp, #68	; 0x44
 810b75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810b75e:	0702      	lsls	r2, r0, #28
 810b760:	d406      	bmi.n	810b770 <__gxx_personality_v0+0x48>
 810b762:	6a0d      	ldr	r5, [r1, #32]
 810b764:	4638      	mov	r0, r7
 810b766:	210d      	movs	r1, #13
 810b768:	f7ff ffd2 	bl	810b710 <_Unwind_GetGR>
 810b76c:	4285      	cmp	r5, r0
 810b76e:	d02b      	beq.n	810b7c8 <__gxx_personality_v0+0xa0>
 810b770:	2002      	movs	r0, #2
 810b772:	2300      	movs	r3, #0
 810b774:	f006 0608 	and.w	r6, r6, #8
 810b778:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 810b77c:	4306      	orrs	r6, r0
 810b77e:	f8cd a000 	str.w	sl, [sp]
 810b782:	220c      	movs	r2, #12
 810b784:	4619      	mov	r1, r3
 810b786:	4638      	mov	r0, r7
 810b788:	940a      	str	r4, [sp, #40]	; 0x28
 810b78a:	f7fc fe49 	bl	8108420 <_Unwind_VRS_Set>
 810b78e:	2e06      	cmp	r6, #6
 810b790:	d11c      	bne.n	810b7cc <__gxx_personality_v0+0xa4>
 810b792:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 810b796:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 810b79a:	f1b8 0f00 	cmp.w	r8, #0
 810b79e:	bf0c      	ite	eq
 810b7a0:	f04f 0b01 	moveq.w	fp, #1
 810b7a4:	f04f 0b03 	movne.w	fp, #3
 810b7a8:	f016 0608 	ands.w	r6, r6, #8
 810b7ac:	f000 810c 	beq.w	810b9c8 <__gxx_personality_v0+0x2a0>
 810b7b0:	f1bb 0f01 	cmp.w	fp, #1
 810b7b4:	f040 8104 	bne.w	810b9c0 <__gxx_personality_v0+0x298>
 810b7b8:	f000 f964 	bl	810ba84 <_ZSt9terminatev>
 810b7bc:	2008      	movs	r0, #8
 810b7be:	e7cb      	b.n	810b758 <__gxx_personality_v0+0x30>
 810b7c0:	f000 fba8 	bl	810bf14 <abort>
 810b7c4:	2001      	movs	r0, #1
 810b7c6:	e7d4      	b.n	810b772 <__gxx_personality_v0+0x4a>
 810b7c8:	2006      	movs	r0, #6
 810b7ca:	e7d2      	b.n	810b772 <__gxx_personality_v0+0x4a>
 810b7cc:	4638      	mov	r0, r7
 810b7ce:	f7fd fb89 	bl	8108ee4 <_Unwind_GetLanguageSpecificData>
 810b7d2:	4681      	mov	r9, r0
 810b7d4:	2800      	cmp	r0, #0
 810b7d6:	d0b9      	beq.n	810b74c <__gxx_personality_v0+0x24>
 810b7d8:	4652      	mov	r2, sl
 810b7da:	4601      	mov	r1, r0
 810b7dc:	4638      	mov	r0, r7
 810b7de:	f7ff ff66 	bl	810b6ae <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 810b7e2:	4639      	mov	r1, r7
 810b7e4:	4605      	mov	r5, r0
 810b7e6:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 810b7ea:	f7ff ff2b 	bl	810b644 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 810b7ee:	210f      	movs	r1, #15
 810b7f0:	900c      	str	r0, [sp, #48]	; 0x30
 810b7f2:	4638      	mov	r0, r7
 810b7f4:	f7ff ff8c 	bl	810b710 <_Unwind_GetGR>
 810b7f8:	f020 0801 	bic.w	r8, r0, #1
 810b7fc:	f108 38ff 	add.w	r8, r8, #4294967295
 810b800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810b802:	42ab      	cmp	r3, r5
 810b804:	f240 80c4 	bls.w	810b990 <__gxx_personality_v0+0x268>
 810b808:	462a      	mov	r2, r5
 810b80a:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 810b80e:	ab06      	add	r3, sp, #24
 810b810:	2000      	movs	r0, #0
 810b812:	f7ff ff3b 	bl	810b68c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 810b816:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 810b81a:	4602      	mov	r2, r0
 810b81c:	ab07      	add	r3, sp, #28
 810b81e:	2000      	movs	r0, #0
 810b820:	f7ff ff34 	bl	810b68c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 810b824:	ab08      	add	r3, sp, #32
 810b826:	4602      	mov	r2, r0
 810b828:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 810b82c:	2000      	movs	r0, #0
 810b82e:	f7ff ff2d 	bl	810b68c <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 810b832:	a909      	add	r1, sp, #36	; 0x24
 810b834:	f7ff fe99 	bl	810b56a <_ZL12read_uleb128PKhPm>
 810b838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b83a:	9a06      	ldr	r2, [sp, #24]
 810b83c:	4413      	add	r3, r2
 810b83e:	4543      	cmp	r3, r8
 810b840:	4605      	mov	r5, r0
 810b842:	d901      	bls.n	810b848 <__gxx_personality_v0+0x120>
 810b844:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 810b846:	e7db      	b.n	810b800 <__gxx_personality_v0+0xd8>
 810b848:	9a07      	ldr	r2, [sp, #28]
 810b84a:	4413      	add	r3, r2
 810b84c:	4543      	cmp	r3, r8
 810b84e:	d9d7      	bls.n	810b800 <__gxx_personality_v0+0xd8>
 810b850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810b854:	f1b8 0f00 	cmp.w	r8, #0
 810b858:	d001      	beq.n	810b85e <__gxx_personality_v0+0x136>
 810b85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b85c:	4498      	add	r8, r3
 810b85e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 810b860:	b115      	cbz	r5, 810b868 <__gxx_personality_v0+0x140>
 810b862:	980e      	ldr	r0, [sp, #56]	; 0x38
 810b864:	3d01      	subs	r5, #1
 810b866:	4405      	add	r5, r0
 810b868:	f1b8 0f00 	cmp.w	r8, #0
 810b86c:	f43f af6e 	beq.w	810b74c <__gxx_personality_v0+0x24>
 810b870:	2d00      	cmp	r5, #0
 810b872:	f000 80f7 	beq.w	810ba64 <__gxx_personality_v0+0x33c>
 810b876:	f016 0308 	ands.w	r3, r6, #8
 810b87a:	9302      	str	r3, [sp, #8]
 810b87c:	d034      	beq.n	810b8e8 <__gxx_personality_v0+0x1c0>
 810b87e:	2347      	movs	r3, #71	; 0x47
 810b880:	7023      	strb	r3, [r4, #0]
 810b882:	234e      	movs	r3, #78	; 0x4e
 810b884:	7063      	strb	r3, [r4, #1]
 810b886:	2355      	movs	r3, #85	; 0x55
 810b888:	70a3      	strb	r3, [r4, #2]
 810b88a:	2343      	movs	r3, #67	; 0x43
 810b88c:	70e3      	strb	r3, [r4, #3]
 810b88e:	2346      	movs	r3, #70	; 0x46
 810b890:	7123      	strb	r3, [r4, #4]
 810b892:	234f      	movs	r3, #79	; 0x4f
 810b894:	7163      	strb	r3, [r4, #5]
 810b896:	2352      	movs	r3, #82	; 0x52
 810b898:	71a3      	strb	r3, [r4, #6]
 810b89a:	2300      	movs	r3, #0
 810b89c:	71e3      	strb	r3, [r4, #7]
 810b89e:	f04f 0b00 	mov.w	fp, #0
 810b8a2:	a907      	add	r1, sp, #28
 810b8a4:	4628      	mov	r0, r5
 810b8a6:	f7ff fe6f 	bl	810b588 <_ZL12read_sleb128PKhPl>
 810b8aa:	a908      	add	r1, sp, #32
 810b8ac:	9003      	str	r0, [sp, #12]
 810b8ae:	f7ff fe6b 	bl	810b588 <_ZL12read_sleb128PKhPl>
 810b8b2:	9907      	ldr	r1, [sp, #28]
 810b8b4:	2900      	cmp	r1, #0
 810b8b6:	d068      	beq.n	810b98a <__gxx_personality_v0+0x262>
 810b8b8:	dd3a      	ble.n	810b930 <__gxx_personality_v0+0x208>
 810b8ba:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 810b8be:	28ff      	cmp	r0, #255	; 0xff
 810b8c0:	d032      	beq.n	810b928 <__gxx_personality_v0+0x200>
 810b8c2:	f000 0307 	and.w	r3, r0, #7
 810b8c6:	2b04      	cmp	r3, #4
 810b8c8:	f63f af7a 	bhi.w	810b7c0 <__gxx_personality_v0+0x98>
 810b8cc:	a201      	add	r2, pc, #4	; (adr r2, 810b8d4 <__gxx_personality_v0+0x1ac>)
 810b8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b8d2:	bf00      	nop
 810b8d4:	0810b92d 	.word	0x0810b92d
 810b8d8:	0810b7c1 	.word	0x0810b7c1
 810b8dc:	0810b8fb 	.word	0x0810b8fb
 810b8e0:	0810b92d 	.word	0x0810b92d
 810b8e4:	0810b925 	.word	0x0810b925
 810b8e8:	79e3      	ldrb	r3, [r4, #7]
 810b8ea:	2b01      	cmp	r3, #1
 810b8ec:	bf0c      	ite	eq
 810b8ee:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 810b8f2:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 810b8f6:	9305      	str	r3, [sp, #20]
 810b8f8:	e7d1      	b.n	810b89e <__gxx_personality_v0+0x176>
 810b8fa:	2502      	movs	r5, #2
 810b8fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b8fe:	ab09      	add	r3, sp, #36	; 0x24
 810b900:	fb05 2211 	mls	r2, r5, r1, r2
 810b904:	990c      	ldr	r1, [sp, #48]	; 0x30
 810b906:	f7ff fe57 	bl	810b5b8 <_ZL28read_encoded_value_with_basehjPKhPj>
 810b90a:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b90c:	b131      	cbz	r1, 810b91c <__gxx_personality_v0+0x1f4>
 810b90e:	b37c      	cbz	r4, 810b970 <__gxx_personality_v0+0x248>
 810b910:	ab05      	add	r3, sp, #20
 810b912:	2200      	movs	r2, #0
 810b914:	4620      	mov	r0, r4
 810b916:	f000 f8eb 	bl	810baf0 <__cxa_type_match>
 810b91a:	b348      	cbz	r0, 810b970 <__gxx_personality_v0+0x248>
 810b91c:	9d07      	ldr	r5, [sp, #28]
 810b91e:	f04f 0b03 	mov.w	fp, #3
 810b922:	e039      	b.n	810b998 <__gxx_personality_v0+0x270>
 810b924:	2508      	movs	r5, #8
 810b926:	e7e9      	b.n	810b8fc <__gxx_personality_v0+0x1d4>
 810b928:	2500      	movs	r5, #0
 810b92a:	e7e7      	b.n	810b8fc <__gxx_personality_v0+0x1d4>
 810b92c:	2504      	movs	r5, #4
 810b92e:	e7e5      	b.n	810b8fc <__gxx_personality_v0+0x1d4>
 810b930:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 810b934:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 810b938:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810b93a:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 810b93e:	313f      	adds	r1, #63	; 0x3f
 810b940:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 810b944:	b1dc      	cbz	r4, 810b97e <__gxx_personality_v0+0x256>
 810b946:	9a02      	ldr	r2, [sp, #8]
 810b948:	b9ca      	cbnz	r2, 810b97e <__gxx_personality_v0+0x256>
 810b94a:	9b05      	ldr	r3, [sp, #20]
 810b94c:	9309      	str	r3, [sp, #36]	; 0x24
 810b94e:	3d04      	subs	r5, #4
 810b950:	f855 1f04 	ldr.w	r1, [r5, #4]!
 810b954:	b141      	cbz	r1, 810b968 <__gxx_personality_v0+0x240>
 810b956:	ab09      	add	r3, sp, #36	; 0x24
 810b958:	2200      	movs	r2, #0
 810b95a:	4429      	add	r1, r5
 810b95c:	4620      	mov	r0, r4
 810b95e:	f000 f8c7 	bl	810baf0 <__cxa_type_match>
 810b962:	2800      	cmp	r0, #0
 810b964:	d0f4      	beq.n	810b950 <__gxx_personality_v0+0x228>
 810b966:	2101      	movs	r1, #1
 810b968:	f081 0101 	eor.w	r1, r1, #1
 810b96c:	2900      	cmp	r1, #0
 810b96e:	d1d5      	bne.n	810b91c <__gxx_personality_v0+0x1f4>
 810b970:	9d08      	ldr	r5, [sp, #32]
 810b972:	2d00      	cmp	r5, #0
 810b974:	d072      	beq.n	810ba5c <__gxx_personality_v0+0x334>
 810b976:	9b03      	ldr	r3, [sp, #12]
 810b978:	442b      	add	r3, r5
 810b97a:	461d      	mov	r5, r3
 810b97c:	e791      	b.n	810b8a2 <__gxx_personality_v0+0x17a>
 810b97e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 810b982:	fab1 f181 	clz	r1, r1
 810b986:	0949      	lsrs	r1, r1, #5
 810b988:	e7f0      	b.n	810b96c <__gxx_personality_v0+0x244>
 810b98a:	f04f 0b01 	mov.w	fp, #1
 810b98e:	e7ef      	b.n	810b970 <__gxx_personality_v0+0x248>
 810b990:	2500      	movs	r5, #0
 810b992:	46a8      	mov	r8, r5
 810b994:	f04f 0b01 	mov.w	fp, #1
 810b998:	07f3      	lsls	r3, r6, #31
 810b99a:	f57f af05 	bpl.w	810b7a8 <__gxx_personality_v0+0x80>
 810b99e:	f1bb 0f02 	cmp.w	fp, #2
 810b9a2:	f43f aed3 	beq.w	810b74c <__gxx_personality_v0+0x24>
 810b9a6:	210d      	movs	r1, #13
 810b9a8:	4638      	mov	r0, r7
 810b9aa:	9e05      	ldr	r6, [sp, #20]
 810b9ac:	f7ff feb0 	bl	810b710 <_Unwind_GetGR>
 810b9b0:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 810b9b4:	e9c4 0608 	strd	r0, r6, [r4, #32]
 810b9b8:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 810b9bc:	2006      	movs	r0, #6
 810b9be:	e6cb      	b.n	810b758 <__gxx_personality_v0+0x30>
 810b9c0:	2d00      	cmp	r5, #0
 810b9c2:	da22      	bge.n	810ba0a <__gxx_personality_v0+0x2e2>
 810b9c4:	f000 f870 	bl	810baa8 <_ZSt10unexpectedv>
 810b9c8:	f1bb 0f01 	cmp.w	fp, #1
 810b9cc:	d102      	bne.n	810b9d4 <__gxx_personality_v0+0x2ac>
 810b9ce:	4620      	mov	r0, r4
 810b9d0:	f000 f926 	bl	810bc20 <__cxa_call_terminate>
 810b9d4:	2d00      	cmp	r5, #0
 810b9d6:	da18      	bge.n	810ba0a <__gxx_personality_v0+0x2e2>
 810b9d8:	4652      	mov	r2, sl
 810b9da:	4649      	mov	r1, r9
 810b9dc:	4638      	mov	r0, r7
 810b9de:	f7ff fe66 	bl	810b6ae <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 810b9e2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 810b9e6:	4639      	mov	r1, r7
 810b9e8:	f7ff fe2c 	bl	810b644 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 810b9ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b9ee:	900c      	str	r0, [sp, #48]	; 0x30
 810b9f0:	43eb      	mvns	r3, r5
 810b9f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810b9f6:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 810b9fa:	b10a      	cbz	r2, 810ba00 <__gxx_personality_v0+0x2d8>
 810b9fc:	3601      	adds	r6, #1
 810b9fe:	e7fa      	b.n	810b9f6 <__gxx_personality_v0+0x2ce>
 810ba00:	2204      	movs	r2, #4
 810ba02:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 810ba06:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 810ba0a:	2300      	movs	r3, #0
 810ba0c:	ae09      	add	r6, sp, #36	; 0x24
 810ba0e:	461a      	mov	r2, r3
 810ba10:	4619      	mov	r1, r3
 810ba12:	9600      	str	r6, [sp, #0]
 810ba14:	4638      	mov	r0, r7
 810ba16:	9409      	str	r4, [sp, #36]	; 0x24
 810ba18:	f7fc fd02 	bl	8108420 <_Unwind_VRS_Set>
 810ba1c:	2300      	movs	r3, #0
 810ba1e:	4619      	mov	r1, r3
 810ba20:	2201      	movs	r2, #1
 810ba22:	9600      	str	r6, [sp, #0]
 810ba24:	4638      	mov	r0, r7
 810ba26:	9509      	str	r5, [sp, #36]	; 0x24
 810ba28:	f7fc fcfa 	bl	8108420 <_Unwind_VRS_Set>
 810ba2c:	210f      	movs	r1, #15
 810ba2e:	4638      	mov	r0, r7
 810ba30:	f7ff fe6e 	bl	810b710 <_Unwind_GetGR>
 810ba34:	f000 0001 	and.w	r0, r0, #1
 810ba38:	ea40 0008 	orr.w	r0, r0, r8
 810ba3c:	2300      	movs	r3, #0
 810ba3e:	9009      	str	r0, [sp, #36]	; 0x24
 810ba40:	9600      	str	r6, [sp, #0]
 810ba42:	220f      	movs	r2, #15
 810ba44:	4619      	mov	r1, r3
 810ba46:	4638      	mov	r0, r7
 810ba48:	f7fc fcea 	bl	8108420 <_Unwind_VRS_Set>
 810ba4c:	f1bb 0f02 	cmp.w	fp, #2
 810ba50:	d102      	bne.n	810ba58 <__gxx_personality_v0+0x330>
 810ba52:	4620      	mov	r0, r4
 810ba54:	f000 f8aa 	bl	810bbac <__cxa_begin_cleanup>
 810ba58:	2007      	movs	r0, #7
 810ba5a:	e67d      	b.n	810b758 <__gxx_personality_v0+0x30>
 810ba5c:	f1bb 0f00 	cmp.w	fp, #0
 810ba60:	f43f ae74 	beq.w	810b74c <__gxx_personality_v0+0x24>
 810ba64:	f04f 0b02 	mov.w	fp, #2
 810ba68:	e796      	b.n	810b998 <__gxx_personality_v0+0x270>
 810ba6a:	bf00      	nop

0810ba6c <_ZN10__cxxabiv111__terminateEPFvvE>:
 810ba6c:	b508      	push	{r3, lr}
 810ba6e:	4780      	blx	r0
 810ba70:	f000 fa50 	bl	810bf14 <abort>

0810ba74 <_ZSt13get_terminatev>:
 810ba74:	4b02      	ldr	r3, [pc, #8]	; (810ba80 <_ZSt13get_terminatev+0xc>)
 810ba76:	6818      	ldr	r0, [r3, #0]
 810ba78:	f3bf 8f5b 	dmb	ish
 810ba7c:	4770      	bx	lr
 810ba7e:	bf00      	nop
 810ba80:	30040014 	.word	0x30040014

0810ba84 <_ZSt9terminatev>:
 810ba84:	b508      	push	{r3, lr}
 810ba86:	f7ff fff5 	bl	810ba74 <_ZSt13get_terminatev>
 810ba8a:	f7ff ffef 	bl	810ba6c <_ZN10__cxxabiv111__terminateEPFvvE>

0810ba8e <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 810ba8e:	b508      	push	{r3, lr}
 810ba90:	4780      	blx	r0
 810ba92:	f7ff fff7 	bl	810ba84 <_ZSt9terminatev>
	...

0810ba98 <_ZSt14get_unexpectedv>:
 810ba98:	4b02      	ldr	r3, [pc, #8]	; (810baa4 <_ZSt14get_unexpectedv+0xc>)
 810ba9a:	6818      	ldr	r0, [r3, #0]
 810ba9c:	f3bf 8f5b 	dmb	ish
 810baa0:	4770      	bx	lr
 810baa2:	bf00      	nop
 810baa4:	30040010 	.word	0x30040010

0810baa8 <_ZSt10unexpectedv>:
 810baa8:	b508      	push	{r3, lr}
 810baaa:	f7ff fff5 	bl	810ba98 <_ZSt14get_unexpectedv>
 810baae:	f7ff ffee 	bl	810ba8e <_ZN10__cxxabiv112__unexpectedEPFvvE>

0810bab2 <_Znaj>:
 810bab2:	f7ff bd2b 	b.w	810b50c <_Znwj>

0810bab6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 810bab6:	7803      	ldrb	r3, [r0, #0]
 810bab8:	2b47      	cmp	r3, #71	; 0x47
 810baba:	d117      	bne.n	810baec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810babc:	7843      	ldrb	r3, [r0, #1]
 810babe:	2b4e      	cmp	r3, #78	; 0x4e
 810bac0:	d114      	bne.n	810baec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bac2:	7883      	ldrb	r3, [r0, #2]
 810bac4:	2b55      	cmp	r3, #85	; 0x55
 810bac6:	d111      	bne.n	810baec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bac8:	78c3      	ldrb	r3, [r0, #3]
 810baca:	2b43      	cmp	r3, #67	; 0x43
 810bacc:	d10e      	bne.n	810baec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bace:	7903      	ldrb	r3, [r0, #4]
 810bad0:	2b43      	cmp	r3, #67	; 0x43
 810bad2:	d10b      	bne.n	810baec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bad4:	7943      	ldrb	r3, [r0, #5]
 810bad6:	2b2b      	cmp	r3, #43	; 0x2b
 810bad8:	d108      	bne.n	810baec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bada:	7983      	ldrb	r3, [r0, #6]
 810badc:	2b2b      	cmp	r3, #43	; 0x2b
 810bade:	d105      	bne.n	810baec <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bae0:	79c0      	ldrb	r0, [r0, #7]
 810bae2:	2801      	cmp	r0, #1
 810bae4:	bf8c      	ite	hi
 810bae6:	2000      	movhi	r0, #0
 810bae8:	2001      	movls	r0, #1
 810baea:	4770      	bx	lr
 810baec:	2000      	movs	r0, #0
 810baee:	4770      	bx	lr

0810baf0 <__cxa_type_match>:
 810baf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 810baf4:	461d      	mov	r5, r3
 810baf6:	7803      	ldrb	r3, [r0, #0]
 810baf8:	2b47      	cmp	r3, #71	; 0x47
 810bafa:	460e      	mov	r6, r1
 810bafc:	4602      	mov	r2, r0
 810bafe:	79c1      	ldrb	r1, [r0, #7]
 810bb00:	d113      	bne.n	810bb2a <__cxa_type_match+0x3a>
 810bb02:	7843      	ldrb	r3, [r0, #1]
 810bb04:	2b4e      	cmp	r3, #78	; 0x4e
 810bb06:	d110      	bne.n	810bb2a <__cxa_type_match+0x3a>
 810bb08:	7883      	ldrb	r3, [r0, #2]
 810bb0a:	2b55      	cmp	r3, #85	; 0x55
 810bb0c:	d10d      	bne.n	810bb2a <__cxa_type_match+0x3a>
 810bb0e:	78c3      	ldrb	r3, [r0, #3]
 810bb10:	2b43      	cmp	r3, #67	; 0x43
 810bb12:	d10a      	bne.n	810bb2a <__cxa_type_match+0x3a>
 810bb14:	7903      	ldrb	r3, [r0, #4]
 810bb16:	2b46      	cmp	r3, #70	; 0x46
 810bb18:	d107      	bne.n	810bb2a <__cxa_type_match+0x3a>
 810bb1a:	7943      	ldrb	r3, [r0, #5]
 810bb1c:	2b4f      	cmp	r3, #79	; 0x4f
 810bb1e:	d104      	bne.n	810bb2a <__cxa_type_match+0x3a>
 810bb20:	7983      	ldrb	r3, [r0, #6]
 810bb22:	2b52      	cmp	r3, #82	; 0x52
 810bb24:	d101      	bne.n	810bb2a <__cxa_type_match+0x3a>
 810bb26:	2900      	cmp	r1, #0
 810bb28:	d031      	beq.n	810bb8e <__cxa_type_match+0x9e>
 810bb2a:	4610      	mov	r0, r2
 810bb2c:	f7ff ffc3 	bl	810bab6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 810bb30:	f080 0001 	eor.w	r0, r0, #1
 810bb34:	b2c0      	uxtb	r0, r0
 810bb36:	2300      	movs	r3, #0
 810bb38:	2400      	movs	r4, #0
 810bb3a:	9401      	str	r4, [sp, #4]
 810bb3c:	bb53      	cbnz	r3, 810bb94 <__cxa_type_match+0xa4>
 810bb3e:	bb58      	cbnz	r0, 810bb98 <__cxa_type_match+0xa8>
 810bb40:	2901      	cmp	r1, #1
 810bb42:	bf0a      	itet	eq
 810bb44:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 810bb48:	f1a2 0320 	subne.w	r3, r2, #32
 810bb4c:	3b78      	subeq	r3, #120	; 0x78
 810bb4e:	2901      	cmp	r1, #1
 810bb50:	bf08      	it	eq
 810bb52:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 810bb56:	681c      	ldr	r4, [r3, #0]
 810bb58:	bf18      	it	ne
 810bb5a:	3258      	addne	r2, #88	; 0x58
 810bb5c:	9201      	str	r2, [sp, #4]
 810bb5e:	6823      	ldr	r3, [r4, #0]
 810bb60:	4620      	mov	r0, r4
 810bb62:	689b      	ldr	r3, [r3, #8]
 810bb64:	4798      	blx	r3
 810bb66:	b1c8      	cbz	r0, 810bb9c <__cxa_type_match+0xac>
 810bb68:	9b01      	ldr	r3, [sp, #4]
 810bb6a:	681b      	ldr	r3, [r3, #0]
 810bb6c:	9301      	str	r3, [sp, #4]
 810bb6e:	2702      	movs	r7, #2
 810bb70:	6833      	ldr	r3, [r6, #0]
 810bb72:	aa01      	add	r2, sp, #4
 810bb74:	f8d3 8010 	ldr.w	r8, [r3, #16]
 810bb78:	4621      	mov	r1, r4
 810bb7a:	2301      	movs	r3, #1
 810bb7c:	4630      	mov	r0, r6
 810bb7e:	47c0      	blx	r8
 810bb80:	b170      	cbz	r0, 810bba0 <__cxa_type_match+0xb0>
 810bb82:	9b01      	ldr	r3, [sp, #4]
 810bb84:	602b      	str	r3, [r5, #0]
 810bb86:	4638      	mov	r0, r7
 810bb88:	b002      	add	sp, #8
 810bb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bb8e:	2301      	movs	r3, #1
 810bb90:	4608      	mov	r0, r1
 810bb92:	e7d1      	b.n	810bb38 <__cxa_type_match+0x48>
 810bb94:	4c03      	ldr	r4, [pc, #12]	; (810bba4 <__cxa_type_match+0xb4>)
 810bb96:	e7e2      	b.n	810bb5e <__cxa_type_match+0x6e>
 810bb98:	4c03      	ldr	r4, [pc, #12]	; (810bba8 <__cxa_type_match+0xb8>)
 810bb9a:	e7e0      	b.n	810bb5e <__cxa_type_match+0x6e>
 810bb9c:	2701      	movs	r7, #1
 810bb9e:	e7e7      	b.n	810bb70 <__cxa_type_match+0x80>
 810bba0:	4607      	mov	r7, r0
 810bba2:	e7f0      	b.n	810bb86 <__cxa_type_match+0x96>
 810bba4:	0810c0f0 	.word	0x0810c0f0
 810bba8:	0810c0f8 	.word	0x0810c0f8

0810bbac <__cxa_begin_cleanup>:
 810bbac:	b510      	push	{r4, lr}
 810bbae:	4604      	mov	r4, r0
 810bbb0:	f000 f8a0 	bl	810bcf4 <__cxa_get_globals>
 810bbb4:	4602      	mov	r2, r0
 810bbb6:	4620      	mov	r0, r4
 810bbb8:	f1a4 0120 	sub.w	r1, r4, #32
 810bbbc:	f7ff ff7b 	bl	810bab6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 810bbc0:	b160      	cbz	r0, 810bbdc <__cxa_begin_cleanup+0x30>
 810bbc2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 810bbc6:	3301      	adds	r3, #1
 810bbc8:	2b01      	cmp	r3, #1
 810bbca:	f844 3c04 	str.w	r3, [r4, #-4]
 810bbce:	d103      	bne.n	810bbd8 <__cxa_begin_cleanup+0x2c>
 810bbd0:	6893      	ldr	r3, [r2, #8]
 810bbd2:	f844 3c08 	str.w	r3, [r4, #-8]
 810bbd6:	6091      	str	r1, [r2, #8]
 810bbd8:	2001      	movs	r0, #1
 810bbda:	bd10      	pop	{r4, pc}
 810bbdc:	6893      	ldr	r3, [r2, #8]
 810bbde:	2b00      	cmp	r3, #0
 810bbe0:	d0f9      	beq.n	810bbd6 <__cxa_begin_cleanup+0x2a>
 810bbe2:	f7ff ff4f 	bl	810ba84 <_ZSt9terminatev>

0810bbe6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 810bbe6:	7803      	ldrb	r3, [r0, #0]
 810bbe8:	2b47      	cmp	r3, #71	; 0x47
 810bbea:	d117      	bne.n	810bc1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bbec:	7843      	ldrb	r3, [r0, #1]
 810bbee:	2b4e      	cmp	r3, #78	; 0x4e
 810bbf0:	d114      	bne.n	810bc1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bbf2:	7883      	ldrb	r3, [r0, #2]
 810bbf4:	2b55      	cmp	r3, #85	; 0x55
 810bbf6:	d111      	bne.n	810bc1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bbf8:	78c3      	ldrb	r3, [r0, #3]
 810bbfa:	2b43      	cmp	r3, #67	; 0x43
 810bbfc:	d10e      	bne.n	810bc1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bbfe:	7903      	ldrb	r3, [r0, #4]
 810bc00:	2b43      	cmp	r3, #67	; 0x43
 810bc02:	d10b      	bne.n	810bc1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc04:	7943      	ldrb	r3, [r0, #5]
 810bc06:	2b2b      	cmp	r3, #43	; 0x2b
 810bc08:	d108      	bne.n	810bc1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc0a:	7983      	ldrb	r3, [r0, #6]
 810bc0c:	2b2b      	cmp	r3, #43	; 0x2b
 810bc0e:	d105      	bne.n	810bc1c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc10:	79c0      	ldrb	r0, [r0, #7]
 810bc12:	2801      	cmp	r0, #1
 810bc14:	bf8c      	ite	hi
 810bc16:	2000      	movhi	r0, #0
 810bc18:	2001      	movls	r0, #1
 810bc1a:	4770      	bx	lr
 810bc1c:	2000      	movs	r0, #0
 810bc1e:	4770      	bx	lr

0810bc20 <__cxa_call_terminate>:
 810bc20:	b510      	push	{r4, lr}
 810bc22:	4604      	mov	r4, r0
 810bc24:	b148      	cbz	r0, 810bc3a <__cxa_call_terminate+0x1a>
 810bc26:	f000 f83b 	bl	810bca0 <__cxa_begin_catch>
 810bc2a:	4620      	mov	r0, r4
 810bc2c:	f7ff ffdb 	bl	810bbe6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 810bc30:	b118      	cbz	r0, 810bc3a <__cxa_call_terminate+0x1a>
 810bc32:	f854 0c14 	ldr.w	r0, [r4, #-20]
 810bc36:	f7ff ff19 	bl	810ba6c <_ZN10__cxxabiv111__terminateEPFvvE>
 810bc3a:	f7ff ff23 	bl	810ba84 <_ZSt9terminatev>

0810bc3e <__cxa_call_unexpected>:
 810bc3e:	b538      	push	{r3, r4, r5, lr}
 810bc40:	4602      	mov	r2, r0
 810bc42:	f7ff ffd0 	bl	810bbe6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 810bc46:	b140      	cbz	r0, 810bc5a <__cxa_call_unexpected+0x1c>
 810bc48:	f852 4c18 	ldr.w	r4, [r2, #-24]
 810bc4c:	2500      	movs	r5, #0
 810bc4e:	4610      	mov	r0, r2
 810bc50:	f000 f826 	bl	810bca0 <__cxa_begin_catch>
 810bc54:	b125      	cbz	r5, 810bc60 <__cxa_call_unexpected+0x22>
 810bc56:	f7ff ff27 	bl	810baa8 <_ZSt10unexpectedv>
 810bc5a:	4604      	mov	r4, r0
 810bc5c:	2501      	movs	r5, #1
 810bc5e:	e7f6      	b.n	810bc4e <__cxa_call_unexpected+0x10>
 810bc60:	4620      	mov	r0, r4
 810bc62:	f7ff ff14 	bl	810ba8e <_ZN10__cxxabiv112__unexpectedEPFvvE>

0810bc66 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 810bc66:	7803      	ldrb	r3, [r0, #0]
 810bc68:	2b47      	cmp	r3, #71	; 0x47
 810bc6a:	d117      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc6c:	7843      	ldrb	r3, [r0, #1]
 810bc6e:	2b4e      	cmp	r3, #78	; 0x4e
 810bc70:	d114      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc72:	7883      	ldrb	r3, [r0, #2]
 810bc74:	2b55      	cmp	r3, #85	; 0x55
 810bc76:	d111      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc78:	78c3      	ldrb	r3, [r0, #3]
 810bc7a:	2b43      	cmp	r3, #67	; 0x43
 810bc7c:	d10e      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc7e:	7903      	ldrb	r3, [r0, #4]
 810bc80:	2b43      	cmp	r3, #67	; 0x43
 810bc82:	d10b      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc84:	7943      	ldrb	r3, [r0, #5]
 810bc86:	2b2b      	cmp	r3, #43	; 0x2b
 810bc88:	d108      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc8a:	7983      	ldrb	r3, [r0, #6]
 810bc8c:	2b2b      	cmp	r3, #43	; 0x2b
 810bc8e:	d105      	bne.n	810bc9c <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 810bc90:	79c0      	ldrb	r0, [r0, #7]
 810bc92:	2801      	cmp	r0, #1
 810bc94:	bf8c      	ite	hi
 810bc96:	2000      	movhi	r0, #0
 810bc98:	2001      	movls	r0, #1
 810bc9a:	4770      	bx	lr
 810bc9c:	2000      	movs	r0, #0
 810bc9e:	4770      	bx	lr

0810bca0 <__cxa_begin_catch>:
 810bca0:	b538      	push	{r3, r4, r5, lr}
 810bca2:	4604      	mov	r4, r0
 810bca4:	f000 f826 	bl	810bcf4 <__cxa_get_globals>
 810bca8:	6805      	ldr	r5, [r0, #0]
 810bcaa:	4602      	mov	r2, r0
 810bcac:	4620      	mov	r0, r4
 810bcae:	f1a4 0120 	sub.w	r1, r4, #32
 810bcb2:	f7ff ffd8 	bl	810bc66 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 810bcb6:	b928      	cbnz	r0, 810bcc4 <__cxa_begin_catch+0x24>
 810bcb8:	b10d      	cbz	r5, 810bcbe <__cxa_begin_catch+0x1e>
 810bcba:	f7ff fee3 	bl	810ba84 <_ZSt9terminatev>
 810bcbe:	6011      	str	r1, [r2, #0]
 810bcc0:	4628      	mov	r0, r5
 810bcc2:	bd38      	pop	{r3, r4, r5, pc}
 810bcc4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 810bcc8:	2b00      	cmp	r3, #0
 810bcca:	bfb4      	ite	lt
 810bccc:	f1c3 0301 	rsblt	r3, r3, #1
 810bcd0:	3301      	addge	r3, #1
 810bcd2:	f844 3c0c 	str.w	r3, [r4, #-12]
 810bcd6:	6853      	ldr	r3, [r2, #4]
 810bcd8:	428d      	cmp	r5, r1
 810bcda:	f103 33ff 	add.w	r3, r3, #4294967295
 810bcde:	6053      	str	r3, [r2, #4]
 810bce0:	4620      	mov	r0, r4
 810bce2:	bf1c      	itt	ne
 810bce4:	f844 5c10 	strne.w	r5, [r4, #-16]
 810bce8:	6011      	strne	r1, [r2, #0]
 810bcea:	6a65      	ldr	r5, [r4, #36]	; 0x24
 810bcec:	f7fc fb6c 	bl	81083c8 <_Unwind_Complete>
 810bcf0:	e7e6      	b.n	810bcc0 <__cxa_begin_catch+0x20>
	...

0810bcf4 <__cxa_get_globals>:
 810bcf4:	4800      	ldr	r0, [pc, #0]	; (810bcf8 <__cxa_get_globals+0x4>)
 810bcf6:	4770      	bx	lr
 810bcf8:	30040098 	.word	0x30040098

0810bcfc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 810bcfc:	b510      	push	{r4, lr}
 810bcfe:	4b03      	ldr	r3, [pc, #12]	; (810bd0c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 810bd00:	6003      	str	r3, [r0, #0]
 810bd02:	4604      	mov	r4, r0
 810bd04:	f000 f8b2 	bl	810be6c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810bd08:	4620      	mov	r0, r4
 810bd0a:	bd10      	pop	{r4, pc}
 810bd0c:	0810c180 	.word	0x0810c180

0810bd10 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 810bd10:	b510      	push	{r4, lr}
 810bd12:	4604      	mov	r4, r0
 810bd14:	f7ff fff2 	bl	810bcfc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 810bd18:	4620      	mov	r0, r4
 810bd1a:	210c      	movs	r1, #12
 810bd1c:	f7ff fc0a 	bl	810b534 <_ZdlPvj>
 810bd20:	4620      	mov	r0, r4
 810bd22:	bd10      	pop	{r4, pc}

0810bd24 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 810bd24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810bd26:	9f08      	ldr	r7, [sp, #32]
 810bd28:	4297      	cmp	r7, r2
 810bd2a:	4605      	mov	r5, r0
 810bd2c:	460e      	mov	r6, r1
 810bd2e:	4614      	mov	r4, r2
 810bd30:	d00a      	beq.n	810bd48 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 810bd32:	68a8      	ldr	r0, [r5, #8]
 810bd34:	6802      	ldr	r2, [r0, #0]
 810bd36:	9708      	str	r7, [sp, #32]
 810bd38:	6a15      	ldr	r5, [r2, #32]
 810bd3a:	4631      	mov	r1, r6
 810bd3c:	4622      	mov	r2, r4
 810bd3e:	46ac      	mov	ip, r5
 810bd40:	b003      	add	sp, #12
 810bd42:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 810bd46:	4760      	bx	ip
 810bd48:	4619      	mov	r1, r3
 810bd4a:	9301      	str	r3, [sp, #4]
 810bd4c:	f000 f858 	bl	810be00 <_ZNKSt9type_infoeqERKS_>
 810bd50:	9b01      	ldr	r3, [sp, #4]
 810bd52:	2800      	cmp	r0, #0
 810bd54:	d0ed      	beq.n	810bd32 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 810bd56:	2006      	movs	r0, #6
 810bd58:	b003      	add	sp, #12
 810bd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0810bd5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 810bd5c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bd60:	460d      	mov	r5, r1
 810bd62:	4619      	mov	r1, r3
 810bd64:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 810bd68:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 810bd6c:	4681      	mov	r9, r0
 810bd6e:	4617      	mov	r7, r2
 810bd70:	4698      	mov	r8, r3
 810bd72:	f000 f845 	bl	810be00 <_ZNKSt9type_infoeqERKS_>
 810bd76:	b190      	cbz	r0, 810bd9e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 810bd78:	2d00      	cmp	r5, #0
 810bd7a:	6034      	str	r4, [r6, #0]
 810bd7c:	7137      	strb	r7, [r6, #4]
 810bd7e:	db09      	blt.n	810bd94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 810bd80:	1961      	adds	r1, r4, r5
 810bd82:	458a      	cmp	sl, r1
 810bd84:	bf0c      	ite	eq
 810bd86:	2106      	moveq	r1, #6
 810bd88:	2101      	movne	r1, #1
 810bd8a:	71b1      	strb	r1, [r6, #6]
 810bd8c:	2000      	movs	r0, #0
 810bd8e:	b001      	add	sp, #4
 810bd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bd94:	3502      	adds	r5, #2
 810bd96:	d1f9      	bne.n	810bd8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810bd98:	2301      	movs	r3, #1
 810bd9a:	71b3      	strb	r3, [r6, #6]
 810bd9c:	e7f6      	b.n	810bd8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810bd9e:	4554      	cmp	r4, sl
 810bda0:	d106      	bne.n	810bdb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810bda2:	4659      	mov	r1, fp
 810bda4:	4648      	mov	r0, r9
 810bda6:	f000 f82b 	bl	810be00 <_ZNKSt9type_infoeqERKS_>
 810bdaa:	b108      	cbz	r0, 810bdb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 810bdac:	7177      	strb	r7, [r6, #5]
 810bdae:	e7ed      	b.n	810bd8c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 810bdb0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 810bdb4:	6803      	ldr	r3, [r0, #0]
 810bdb6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 810bdba:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 810bdbe:	69dc      	ldr	r4, [r3, #28]
 810bdc0:	463a      	mov	r2, r7
 810bdc2:	4643      	mov	r3, r8
 810bdc4:	4629      	mov	r1, r5
 810bdc6:	46a4      	mov	ip, r4
 810bdc8:	b001      	add	sp, #4
 810bdca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810bdce:	4760      	bx	ip

0810bdd0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 810bdd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bdd4:	4607      	mov	r7, r0
 810bdd6:	460c      	mov	r4, r1
 810bdd8:	4615      	mov	r5, r2
 810bdda:	461e      	mov	r6, r3
 810bddc:	f000 f879 	bl	810bed2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 810bde0:	b948      	cbnz	r0, 810bdf6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 810bde2:	68b8      	ldr	r0, [r7, #8]
 810bde4:	6803      	ldr	r3, [r0, #0]
 810bde6:	699f      	ldr	r7, [r3, #24]
 810bde8:	462a      	mov	r2, r5
 810bdea:	4633      	mov	r3, r6
 810bdec:	4621      	mov	r1, r4
 810bdee:	46bc      	mov	ip, r7
 810bdf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810bdf4:	4760      	bx	ip
 810bdf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0810bdfa <_ZNSt9type_infoD1Ev>:
 810bdfa:	4770      	bx	lr

0810bdfc <_ZNKSt9type_info14__is_pointer_pEv>:
 810bdfc:	2000      	movs	r0, #0
 810bdfe:	4770      	bx	lr

0810be00 <_ZNKSt9type_infoeqERKS_>:
 810be00:	4281      	cmp	r1, r0
 810be02:	b508      	push	{r3, lr}
 810be04:	d00e      	beq.n	810be24 <_ZNKSt9type_infoeqERKS_+0x24>
 810be06:	6840      	ldr	r0, [r0, #4]
 810be08:	7803      	ldrb	r3, [r0, #0]
 810be0a:	2b2a      	cmp	r3, #42	; 0x2a
 810be0c:	d00c      	beq.n	810be28 <_ZNKSt9type_infoeqERKS_+0x28>
 810be0e:	6849      	ldr	r1, [r1, #4]
 810be10:	780b      	ldrb	r3, [r1, #0]
 810be12:	2b2a      	cmp	r3, #42	; 0x2a
 810be14:	bf08      	it	eq
 810be16:	3101      	addeq	r1, #1
 810be18:	f7fc f912 	bl	8108040 <strcmp>
 810be1c:	fab0 f080 	clz	r0, r0
 810be20:	0940      	lsrs	r0, r0, #5
 810be22:	bd08      	pop	{r3, pc}
 810be24:	2001      	movs	r0, #1
 810be26:	e7fc      	b.n	810be22 <_ZNKSt9type_infoeqERKS_+0x22>
 810be28:	2000      	movs	r0, #0
 810be2a:	e7fa      	b.n	810be22 <_ZNKSt9type_infoeqERKS_+0x22>

0810be2c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 810be2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 810be2e:	2400      	movs	r4, #0
 810be30:	2310      	movs	r3, #16
 810be32:	e9cd 3402 	strd	r3, r4, [sp, #8]
 810be36:	6803      	ldr	r3, [r0, #0]
 810be38:	9400      	str	r4, [sp, #0]
 810be3a:	699e      	ldr	r6, [r3, #24]
 810be3c:	f88d 4004 	strb.w	r4, [sp, #4]
 810be40:	4615      	mov	r5, r2
 810be42:	466b      	mov	r3, sp
 810be44:	6812      	ldr	r2, [r2, #0]
 810be46:	47b0      	blx	r6
 810be48:	f89d 3004 	ldrb.w	r3, [sp, #4]
 810be4c:	f003 0306 	and.w	r3, r3, #6
 810be50:	2b06      	cmp	r3, #6
 810be52:	bf03      	ittte	eq
 810be54:	9b00      	ldreq	r3, [sp, #0]
 810be56:	602b      	streq	r3, [r5, #0]
 810be58:	2001      	moveq	r0, #1
 810be5a:	4620      	movne	r0, r4
 810be5c:	b004      	add	sp, #16
 810be5e:	bd70      	pop	{r4, r5, r6, pc}

0810be60 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 810be60:	9800      	ldr	r0, [sp, #0]
 810be62:	4290      	cmp	r0, r2
 810be64:	bf14      	ite	ne
 810be66:	2001      	movne	r0, #1
 810be68:	2006      	moveq	r0, #6
 810be6a:	4770      	bx	lr

0810be6c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 810be6c:	b510      	push	{r4, lr}
 810be6e:	4b03      	ldr	r3, [pc, #12]	; (810be7c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 810be70:	6003      	str	r3, [r0, #0]
 810be72:	4604      	mov	r4, r0
 810be74:	f7ff ffc1 	bl	810bdfa <_ZNSt9type_infoD1Ev>
 810be78:	4620      	mov	r0, r4
 810be7a:	bd10      	pop	{r4, pc}
 810be7c:	0810c1f4 	.word	0x0810c1f4

0810be80 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 810be80:	b510      	push	{r4, lr}
 810be82:	4604      	mov	r4, r0
 810be84:	f7ff fff2 	bl	810be6c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 810be88:	4620      	mov	r0, r4
 810be8a:	2108      	movs	r1, #8
 810be8c:	f7ff fb52 	bl	810b534 <_ZdlPvj>
 810be90:	4620      	mov	r0, r4
 810be92:	bd10      	pop	{r4, pc}

0810be94 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 810be94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810be98:	461f      	mov	r7, r3
 810be9a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 810be9e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 810bea2:	4598      	cmp	r8, r3
 810bea4:	4606      	mov	r6, r0
 810bea6:	4615      	mov	r5, r2
 810bea8:	d107      	bne.n	810beba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 810beaa:	9907      	ldr	r1, [sp, #28]
 810beac:	f7ff ffa8 	bl	810be00 <_ZNKSt9type_infoeqERKS_>
 810beb0:	b118      	cbz	r0, 810beba <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 810beb2:	7165      	strb	r5, [r4, #5]
 810beb4:	2000      	movs	r0, #0
 810beb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810beba:	4639      	mov	r1, r7
 810bebc:	4630      	mov	r0, r6
 810bebe:	f7ff ff9f 	bl	810be00 <_ZNKSt9type_infoeqERKS_>
 810bec2:	2800      	cmp	r0, #0
 810bec4:	d0f6      	beq.n	810beb4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 810bec6:	2301      	movs	r3, #1
 810bec8:	f8c4 8000 	str.w	r8, [r4]
 810becc:	7125      	strb	r5, [r4, #4]
 810bece:	71a3      	strb	r3, [r4, #6]
 810bed0:	e7f0      	b.n	810beb4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

0810bed2 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 810bed2:	b538      	push	{r3, r4, r5, lr}
 810bed4:	4615      	mov	r5, r2
 810bed6:	461c      	mov	r4, r3
 810bed8:	f7ff ff92 	bl	810be00 <_ZNKSt9type_infoeqERKS_>
 810bedc:	b120      	cbz	r0, 810bee8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 810bede:	2308      	movs	r3, #8
 810bee0:	60e3      	str	r3, [r4, #12]
 810bee2:	2306      	movs	r3, #6
 810bee4:	6025      	str	r5, [r4, #0]
 810bee6:	7123      	strb	r3, [r4, #4]
 810bee8:	bd38      	pop	{r3, r4, r5, pc}

0810beea <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 810beea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810beec:	4605      	mov	r5, r0
 810beee:	460c      	mov	r4, r1
 810bef0:	9201      	str	r2, [sp, #4]
 810bef2:	461e      	mov	r6, r3
 810bef4:	f7ff ff84 	bl	810be00 <_ZNKSt9type_infoeqERKS_>
 810bef8:	b950      	cbnz	r0, 810bf10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810befa:	2e03      	cmp	r6, #3
 810befc:	d808      	bhi.n	810bf10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 810befe:	6823      	ldr	r3, [r4, #0]
 810bf00:	9a01      	ldr	r2, [sp, #4]
 810bf02:	695b      	ldr	r3, [r3, #20]
 810bf04:	4629      	mov	r1, r5
 810bf06:	4620      	mov	r0, r4
 810bf08:	b002      	add	sp, #8
 810bf0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810bf0e:	4718      	bx	r3
 810bf10:	b002      	add	sp, #8
 810bf12:	bd70      	pop	{r4, r5, r6, pc}

0810bf14 <abort>:
 810bf14:	b508      	push	{r3, lr}
 810bf16:	2006      	movs	r0, #6
 810bf18:	f000 f850 	bl	810bfbc <raise>
 810bf1c:	2001      	movs	r0, #1
 810bf1e:	f000 f88d 	bl	810c03c <_exit>
	...

0810bf24 <__libc_init_array>:
 810bf24:	b570      	push	{r4, r5, r6, lr}
 810bf26:	4d0d      	ldr	r5, [pc, #52]	; (810bf5c <__libc_init_array+0x38>)
 810bf28:	4c0d      	ldr	r4, [pc, #52]	; (810bf60 <__libc_init_array+0x3c>)
 810bf2a:	1b64      	subs	r4, r4, r5
 810bf2c:	10a4      	asrs	r4, r4, #2
 810bf2e:	2600      	movs	r6, #0
 810bf30:	42a6      	cmp	r6, r4
 810bf32:	d109      	bne.n	810bf48 <__libc_init_array+0x24>
 810bf34:	4d0b      	ldr	r5, [pc, #44]	; (810bf64 <__libc_init_array+0x40>)
 810bf36:	4c0c      	ldr	r4, [pc, #48]	; (810bf68 <__libc_init_array+0x44>)
 810bf38:	f000 f882 	bl	810c040 <_init>
 810bf3c:	1b64      	subs	r4, r4, r5
 810bf3e:	10a4      	asrs	r4, r4, #2
 810bf40:	2600      	movs	r6, #0
 810bf42:	42a6      	cmp	r6, r4
 810bf44:	d105      	bne.n	810bf52 <__libc_init_array+0x2e>
 810bf46:	bd70      	pop	{r4, r5, r6, pc}
 810bf48:	f855 3b04 	ldr.w	r3, [r5], #4
 810bf4c:	4798      	blx	r3
 810bf4e:	3601      	adds	r6, #1
 810bf50:	e7ee      	b.n	810bf30 <__libc_init_array+0xc>
 810bf52:	f855 3b04 	ldr.w	r3, [r5], #4
 810bf56:	4798      	blx	r3
 810bf58:	3601      	adds	r6, #1
 810bf5a:	e7f2      	b.n	810bf42 <__libc_init_array+0x1e>
 810bf5c:	0810c3dc 	.word	0x0810c3dc
 810bf60:	0810c3dc 	.word	0x0810c3dc
 810bf64:	0810c3dc 	.word	0x0810c3dc
 810bf68:	0810c3e0 	.word	0x0810c3e0

0810bf6c <_raise_r>:
 810bf6c:	291f      	cmp	r1, #31
 810bf6e:	b538      	push	{r3, r4, r5, lr}
 810bf70:	4604      	mov	r4, r0
 810bf72:	460d      	mov	r5, r1
 810bf74:	d904      	bls.n	810bf80 <_raise_r+0x14>
 810bf76:	2316      	movs	r3, #22
 810bf78:	6003      	str	r3, [r0, #0]
 810bf7a:	f04f 30ff 	mov.w	r0, #4294967295
 810bf7e:	bd38      	pop	{r3, r4, r5, pc}
 810bf80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 810bf82:	b112      	cbz	r2, 810bf8a <_raise_r+0x1e>
 810bf84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810bf88:	b94b      	cbnz	r3, 810bf9e <_raise_r+0x32>
 810bf8a:	4620      	mov	r0, r4
 810bf8c:	f000 f830 	bl	810bff0 <_getpid_r>
 810bf90:	462a      	mov	r2, r5
 810bf92:	4601      	mov	r1, r0
 810bf94:	4620      	mov	r0, r4
 810bf96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810bf9a:	f000 b817 	b.w	810bfcc <_kill_r>
 810bf9e:	2b01      	cmp	r3, #1
 810bfa0:	d00a      	beq.n	810bfb8 <_raise_r+0x4c>
 810bfa2:	1c59      	adds	r1, r3, #1
 810bfa4:	d103      	bne.n	810bfae <_raise_r+0x42>
 810bfa6:	2316      	movs	r3, #22
 810bfa8:	6003      	str	r3, [r0, #0]
 810bfaa:	2001      	movs	r0, #1
 810bfac:	e7e7      	b.n	810bf7e <_raise_r+0x12>
 810bfae:	2400      	movs	r4, #0
 810bfb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810bfb4:	4628      	mov	r0, r5
 810bfb6:	4798      	blx	r3
 810bfb8:	2000      	movs	r0, #0
 810bfba:	e7e0      	b.n	810bf7e <_raise_r+0x12>

0810bfbc <raise>:
 810bfbc:	4b02      	ldr	r3, [pc, #8]	; (810bfc8 <raise+0xc>)
 810bfbe:	4601      	mov	r1, r0
 810bfc0:	6818      	ldr	r0, [r3, #0]
 810bfc2:	f7ff bfd3 	b.w	810bf6c <_raise_r>
 810bfc6:	bf00      	nop
 810bfc8:	30040018 	.word	0x30040018

0810bfcc <_kill_r>:
 810bfcc:	b538      	push	{r3, r4, r5, lr}
 810bfce:	4d07      	ldr	r5, [pc, #28]	; (810bfec <_kill_r+0x20>)
 810bfd0:	2300      	movs	r3, #0
 810bfd2:	4604      	mov	r4, r0
 810bfd4:	4608      	mov	r0, r1
 810bfd6:	4611      	mov	r1, r2
 810bfd8:	602b      	str	r3, [r5, #0]
 810bfda:	f000 f827 	bl	810c02c <_kill>
 810bfde:	1c43      	adds	r3, r0, #1
 810bfe0:	d102      	bne.n	810bfe8 <_kill_r+0x1c>
 810bfe2:	682b      	ldr	r3, [r5, #0]
 810bfe4:	b103      	cbz	r3, 810bfe8 <_kill_r+0x1c>
 810bfe6:	6023      	str	r3, [r4, #0]
 810bfe8:	bd38      	pop	{r3, r4, r5, pc}
 810bfea:	bf00      	nop
 810bfec:	3004029c 	.word	0x3004029c

0810bff0 <_getpid_r>:
 810bff0:	f000 b814 	b.w	810c01c <_getpid>

0810bff4 <_Unwind_GetDataRelBase>:
 810bff4:	b508      	push	{r3, lr}
 810bff6:	f7ff ff8d 	bl	810bf14 <abort>

0810bffa <_Unwind_GetTextRelBase>:
 810bffa:	b508      	push	{r3, lr}
 810bffc:	f7ff fffa 	bl	810bff4 <_Unwind_GetDataRelBase>

0810c000 <memcpy>:
 810c000:	440a      	add	r2, r1
 810c002:	4291      	cmp	r1, r2
 810c004:	f100 33ff 	add.w	r3, r0, #4294967295
 810c008:	d100      	bne.n	810c00c <memcpy+0xc>
 810c00a:	4770      	bx	lr
 810c00c:	b510      	push	{r4, lr}
 810c00e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810c012:	f803 4f01 	strb.w	r4, [r3, #1]!
 810c016:	4291      	cmp	r1, r2
 810c018:	d1f9      	bne.n	810c00e <memcpy+0xe>
 810c01a:	bd10      	pop	{r4, pc}

0810c01c <_getpid>:
 810c01c:	4b02      	ldr	r3, [pc, #8]	; (810c028 <_getpid+0xc>)
 810c01e:	2258      	movs	r2, #88	; 0x58
 810c020:	601a      	str	r2, [r3, #0]
 810c022:	f04f 30ff 	mov.w	r0, #4294967295
 810c026:	4770      	bx	lr
 810c028:	3004029c 	.word	0x3004029c

0810c02c <_kill>:
 810c02c:	4b02      	ldr	r3, [pc, #8]	; (810c038 <_kill+0xc>)
 810c02e:	2258      	movs	r2, #88	; 0x58
 810c030:	601a      	str	r2, [r3, #0]
 810c032:	f04f 30ff 	mov.w	r0, #4294967295
 810c036:	4770      	bx	lr
 810c038:	3004029c 	.word	0x3004029c

0810c03c <_exit>:
 810c03c:	e7fe      	b.n	810c03c <_exit>
 810c03e:	bf00      	nop

0810c040 <_init>:
 810c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c042:	bf00      	nop
 810c044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c046:	bc08      	pop	{r3}
 810c048:	469e      	mov	lr, r3
 810c04a:	4770      	bx	lr

0810c04c <_fini>:
 810c04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810c04e:	bf00      	nop
 810c050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810c052:	bc08      	pop	{r3}
 810c054:	469e      	mov	lr, r3
 810c056:	4770      	bx	lr
